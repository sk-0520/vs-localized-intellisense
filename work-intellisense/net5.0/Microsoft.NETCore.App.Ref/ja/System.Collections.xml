<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections</name>
  </assembly>
  <members>
    <member name="T:System.Collections.BitArray">
      <summary vsli:raw="Manages a compact array of bit values, which are represented as Booleans, where &lt;see langword=&quot;true&quot; /&gt; indicates that the bit is on (1) and &lt;see langword=&quot;false&quot; /&gt; indicates the bit is off (0).">ビット値の小型の配列を管理します。このビット値はブール型として表され、<see langword="true" /> はビットがオン (1)、<see langword="false" /> はビットがオフ (0) であることを示します。</summary>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Boolean[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified array of Booleans.">指定されたブール値配列からコピーされたビット値を含む <see cref="T:System.Collections.BitArray" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="values" vsli:raw="An array of Booleans to copy.">コピーするブール値の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;values&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="values" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Byte[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified array of bytes.">指定したバイト配列からビット値をコピーして格納する、<see cref="T:System.Collections.BitArray" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bytes" vsli:raw="An array of bytes containing the values to copy, where each byte represents eight consecutive bits.">コピーする値を格納しているバイト配列。各バイトは 8 個の連続ビットを表します。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bytes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bytes" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;bytes&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="bytes" /> の長さが <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Collections.BitArray)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">指定した <see cref="T:System.Collections.BitArray" /> からコピーされたビット値を格納する、<see cref="T:System.Collections.BitArray" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bits" vsli:raw="The &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to copy.">コピーする <see cref="T:System.Collections.BitArray" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;bits&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="bits" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that can hold the specified number of bit values, which are initially set to &lt;see langword=&quot;false&quot; /&gt;.">指定数のビット値を格納できる、<see cref="T:System.Collections.BitArray" /> クラスの新しいインスタンスを初期化します。ビット値は <see langword="false" /> に初期設定されます。</summary>
      <param name="length" vsli:raw="The number of bit values in the new &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">新しい <see cref="T:System.Collections.BitArray" /> 内のビット値の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="length" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that can hold the specified number of bit values, which are initially set to the specified value.">指定数のビット値を格納できる、<see cref="T:System.Collections.BitArray" /> クラスの新しいインスタンスを初期化します。ビット値は指定値に初期設定されます。</summary>
      <param name="length" vsli:raw="The number of bit values in the new &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">新しい <see cref="T:System.Collections.BitArray" /> 内のビット値の数。</param>
      <param name="defaultValue" vsli:raw="The Boolean value to assign to each bit.">各ビットに代入するブール値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero.">
        <paramref name="length" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.BitArray.#ctor(System.Int32[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; class that contains bit values copied from the specified array of 32-bit integers.">指定した 32 ビット整数配列からビット値をコピーして格納する、<see cref="T:System.Collections.BitArray" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="values" vsli:raw="An array of integers containing the values to copy, where each integer represents 32 consecutive bits.">コピーする値を格納している整数配列。各整数は 32 個の連続ビットを表します。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;values&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="values" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;values&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;">
        <paramref name="values" /> の長さが <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Collections.BitArray.And(System.Collections.BitArray)">
      <summary vsli:raw="Performs the bitwise AND operation between the elements of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object and the corresponding elements in the specified array. The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object will be modified to store the result of the bitwise AND operation.">現在の <see cref="T:System.Collections.BitArray" /> オブジェクトの要素と指定した配列内の対応する要素の間で、ビットごとの AND 演算を実行します。 現在の <see cref="T:System.Collections.BitArray" /> オブジェクトが変更され、ビットごとの AND 演算の結果を格納します。</summary>
      <param name="value" vsli:raw="The array with which to perform the bitwise AND operation.">ビットごとの AND 演算の実行対象となる配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; and the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; do not have the same number of elements.">
        <paramref name="value" /> と現在の <see cref="T:System.Collections.BitArray" /> に同じ数の要素が指定されていません。</exception>
      <returns vsli:raw="An array containing the result of the bitwise AND operation, which is a reference to the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object.">ビットごとの AND 演算の結果を含み、現在の <see cref="T:System.Collections.BitArray" /> オブジェクトへの参照である配列。</returns>
    </member>
    <member name="M:System.Collections.BitArray.Clone">
      <summary vsli:raw="Creates a shallow copy of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" /> の簡易コピーを作成します。</summary>
      <returns vsli:raw="A shallow copy of the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" /> の簡易コピー。</returns>
    </member>
    <member name="M:System.Collections.BitArray.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">
        <see cref="T:System.Collections.BitArray" /> 全体を、互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まる部分に行います。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.BitArray" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。  
  
または 
コピー元の <see cref="T:System.Collections.BitArray" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The type of the source &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">コピー元の <see cref="T:System.Collections.BitArray" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.BitArray.Get(System.Int32)">
      <summary vsli:raw="Gets the value of the bit at a specific position in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" /> の特定位置にあるビット値を取得します。</summary>
      <param name="index" vsli:raw="The zero-based index of the value to get.">取得する値の 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  
  
または 
 <paramref name="index" /> が <see cref="T:System.Collections.BitArray" /> の要素数以上です。</exception>
      <returns vsli:raw="The value of the bit at position &lt;paramref name=&quot;index&quot; /&gt;.">
        <paramref name="index" /> 位置にあるビットの値。</returns>
    </member>
    <member name="M:System.Collections.BitArray.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" />を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the entire &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">全体の <see cref="T:System.Collections.BitArray" /> の <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.BitArray.LeftShift(System.Int32)">
      <summary vsli:raw="Shifts all the bit values of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to the left on &lt;paramref name=&quot;count&quot; /&gt; bits.">現在の <see cref="T:System.Collections.BitArray" /> のすべてのビット値を、<paramref name="count" /> ビット分、左にシフトします。</summary>
      <param name="count" vsli:raw="The number of shifts to make for each bit.">各ビットに対して行うシフトの数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="count" /> が 0 未満です。</exception>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">現在の <see cref="T:System.Collections.BitArray" /> です。</returns>
    </member>
    <member name="M:System.Collections.BitArray.Not">
      <summary vsli:raw="Inverts all the bit values in the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;, so that elements set to &lt;see langword=&quot;true&quot; /&gt; are changed to &lt;see langword=&quot;false&quot; /&gt;, and elements set to &lt;see langword=&quot;false&quot; /&gt; are changed to &lt;see langword=&quot;true&quot; /&gt;.">現在の <see cref="T:System.Collections.BitArray" /> にあるすべてのビット値を反転し、<see langword="true" /> に設定されている要素を <see langword="false" /> に、<see langword="false" /> に設定されている要素を <see langword="true" /> に変更します。</summary>
      <returns vsli:raw="The current instance with inverted bit values.">ビット値の反転後の現在のインスタンス。</returns>
    </member>
    <member name="M:System.Collections.BitArray.Or(System.Collections.BitArray)">
      <summary vsli:raw="Performs the bitwise OR operation between the elements of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object and the corresponding elements in the specified array. The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object will be modified to store the result of the bitwise OR operation.">現在の <see cref="T:System.Collections.BitArray" /> オブジェクトの要素と指定した配列内の対応する要素の間で、ビットごとの OR 演算を実行します。 現在の <see cref="T:System.Collections.BitArray" /> オブジェクトが変更され、ビットごとの OR 演算の結果を格納します。</summary>
      <param name="value" vsli:raw="The array with which to perform the bitwise OR operation.">ビットごとの OR 演算の実行対象となる配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; and the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; do not have the same number of elements.">
        <paramref name="value" /> と現在の <see cref="T:System.Collections.BitArray" /> に同じ数の要素が指定されていません。</exception>
      <returns vsli:raw="An array containing the result of the bitwise OR operation, which is a reference to the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object.">ビットごとの OR 演算の結果を含み、現在の <see cref="T:System.Collections.BitArray" /> オブジェクトへの参照である配列。</returns>
    </member>
    <member name="M:System.Collections.BitArray.RightShift(System.Int32)">
      <summary vsli:raw="Shifts all the bit values of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to the right on &lt;paramref name=&quot;count&quot; /&gt; bits.">現在の <see cref="T:System.Collections.BitArray" /> のすべてのビット値を、<paramref name="count" /> ビット分、右にシフトします。</summary>
      <param name="count" vsli:raw="The number of shifts to make for each bit.">各ビットに対して行うシフトの数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="count" /> が 0 未満です。</exception>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">現在の <see cref="T:System.Collections.BitArray" /> です。</returns>
    </member>
    <member name="M:System.Collections.BitArray.Set(System.Int32,System.Boolean)">
      <summary vsli:raw="Sets the bit at a specific position in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to the specified value.">
        <see cref="T:System.Collections.BitArray" /> の特定位置にあるビットを指定した値に設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the bit to set.">設定するビットの、0 から始まるインデックス番号。</param>
      <param name="value" vsli:raw="The Boolean value to assign to the bit.">ビットに代入するブール値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than or equal to the number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  
  
または 
 <paramref name="index" /> が、<see cref="T:System.Collections.BitArray" /> にある要素の数以上です。</exception>
    </member>
    <member name="M:System.Collections.BitArray.SetAll(System.Boolean)">
      <summary vsli:raw="Sets all bits in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; to the specified value.">
        <see cref="T:System.Collections.BitArray" /> 内のすべてのビットを指定した値に設定します。</summary>
      <param name="value" vsli:raw="The Boolean value to assign to all bits.">すべてのビットに代入するブール値。</param>
    </member>
    <member name="M:System.Collections.BitArray.Xor(System.Collections.BitArray)">
      <summary vsli:raw="Performs the bitwise exclusive OR operation between the elements of the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object against the corresponding elements in the specified array. The current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object will be modified to store the result of the bitwise exclusive OR operation.">指定した配列内の対応する要素に対して、現在の <see cref="T:System.Collections.BitArray" /> の要素間でビットごとの排他的 OR 演算を実行します。 現在の <see cref="T:System.Collections.BitArray" /> オブジェクトが変更され、ビットごとの排他的 OR 演算の結果を格納します。</summary>
      <param name="value" vsli:raw="The array with which to perform the bitwise exclusive OR operation.">ビットごとの排他的 OR 演算の実行対象となる配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; and the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; do not have the same number of elements.">
        <paramref name="value" /> と現在の <see cref="T:System.Collections.BitArray" /> に同じ数の要素が指定されていません。</exception>
      <returns vsli:raw="An array containing the result of the bitwise exclusive OR operation, which is a reference to the current &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; object.">ビットごとの排他的 OR 演算の結果を含み、現在の <see cref="T:System.Collections.BitArray" /> オブジェクトへの参照である配列。</returns>
    </member>
    <member name="P:System.Collections.BitArray.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" /> に格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.BitArray" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="This property is always &lt;see langword=&quot;false&quot; /&gt;.">このプロパティは常に <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Collections.BitArray.IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.BitArray" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="This property is always &lt;see langword=&quot;false&quot; /&gt;.">このプロパティは常に <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Collections.BitArray.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the value of the bit at a specific position in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" /> の特定位置にあるビット値を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the value to get or set.">取得または設定する値の、0 から始まるインデックス番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.BitArray.Count&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  
  
または 
 <paramref name="index" /> が <see cref="P:System.Collections.BitArray.Count" /> 以上になっています。</exception>
      <returns vsli:raw="The value of the bit at position &lt;paramref name=&quot;index&quot; /&gt;.">
        <paramref name="index" /> 位置にあるビットの値。</returns>
    </member>
    <member name="P:System.Collections.BitArray.Length">
      <summary vsli:raw="Gets or sets the number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" /> 内の要素の数を取得または設定します。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The property is set to a value that is less than zero.">プロパティが 0 未満の値に設定されています。</exception>
      <returns vsli:raw="The number of elements in the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" /> にある要素の数。</returns>
    </member>
    <member name="P:System.Collections.BitArray.SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.BitArray&quot; /&gt;.">
        <see cref="T:System.Collections.BitArray" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="T:System.Collections.Generic.CollectionExtensions">
      <summary vsli:raw="Provides extension methods for generic collections.">ジェネリック コレクションの拡張メソッドです。</summary>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0)">
      <summary vsli:raw="Tries to get the value associated with the specified &lt;paramref name=&quot;key&quot; /&gt; in the &lt;paramref name=&quot;dictionary&quot; /&gt;.">
        <paramref name="dictionary" /> から、指定した <paramref name="key" /> に関連付けられている値の取得を試みます。</summary>
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;.">
        <typeparamref name="TKey" /> 型のキーと <typeparamref name="TValue" /> 型の値を含むディクショナリ。</param>
      <param name="key" vsli:raw="The key of the value to get.">取得する値のキー。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; instance. When the method is successful, the returned object is the value associated with the specified &lt;paramref name=&quot;key&quot; /&gt;. When the method fails, it returns the &lt;see langword=&quot;default&quot; /&gt; value for &lt;typeparamref name=&quot;TValue&quot; /&gt;.">
        <typeparamref name="TValue" /> のインスタンス。 このメソッドが成功した場合、返されるオブジェクトは、指定した <paramref name="key" /> に関連付けられている値になります。 このメソッドが失敗すると、<typeparamref name="TValue" /> の <see langword="default" /> 値が返されます。</returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.GetValueOrDefault``2(System.Collections.Generic.IReadOnlyDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Tries to get the value associated with the specified &lt;paramref name=&quot;key&quot; /&gt; in the &lt;paramref name=&quot;dictionary&quot; /&gt;.">
        <paramref name="dictionary" /> から、指定したキーに関連付けられている値の取得を試みます。</summary>
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;.">
        <typeparamref name="TKey" /> 型のキーと <typeparamref name="TValue" /> 型の値を含むディクショナリ。</param>
      <param name="key" vsli:raw="The key of the value to get.">取得する値のキー。</param>
      <param name="defaultValue" vsli:raw="The default value to return when the &lt;paramref name=&quot;dictionary&quot; /&gt; cannot find a value associated with the specified &lt;paramref name=&quot;key&quot; /&gt;.">
        <paramref name="dictionary" /> が指定した <paramref name="key" /> と関連付けられている値を見つけることができない場合に返す既定値。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A &lt;typeparamref name=&quot;TValue&quot; /&gt; instance. When the method is successful, the returned object is the value associated with the specified &lt;paramref name=&quot;key&quot; /&gt;. When the method fails, it returns &lt;paramref name=&quot;defaultValue&quot; /&gt;.">
        <typeparamref name="TValue" /> のインスタンス。 このメソッドが成功した場合、返されるオブジェクトは、指定した <paramref name="key" /> に関連付けられている値になります。 このメソッドが失敗すると、<paramref name="defaultValue" /> が返されます。</returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.Remove``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1@)">
      <summary vsli:raw="Tries to remove the value with the specified &lt;paramref name=&quot;key&quot; /&gt; from the &lt;paramref name=&quot;dictionary&quot; /&gt;.">
        <paramref name="dictionary" /> から、指定した <paramref name="key" /> の値を削除しようとします。</summary>
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;.">
        <typeparamref name="TKey" /> 型のキーと <typeparamref name="TValue" /> 型の値を含むディクショナリ。</param>
      <param name="key" vsli:raw="The key of the value to remove.">削除する値のキー。</param>
      <param name="value" vsli:raw="When this method returns &lt;see langword=&quot;true&quot; /&gt;, the removed value; when this method returns &lt;see langword=&quot;false&quot; /&gt;, the &lt;see langword=&quot;default&quot; /&gt; value for &lt;typeparamref name=&quot;TValue&quot; /&gt;.">このメソッドが <see langword="true" /> を返す場合は、削除された値。このメソッドが <see langword="false" /> を返す場合は、<typeparamref name="TValue" /> の <see langword="default" /> 値。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the &lt;paramref name=&quot;dictionary&quot; /&gt;.">
        <paramref name="dictionary" /> 内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the &lt;paramref name=&quot;dictionary&quot; /&gt;.">
        <paramref name="dictionary" /> 内の値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; when a value is found in the &lt;paramref name=&quot;dictionary&quot; /&gt; with the specified &lt;paramref name=&quot;key&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; when the &lt;paramref name=&quot;dictionary&quot; /&gt; cannot find a value associated with the specified &lt;paramref name=&quot;key&quot; /&gt;.">
        <paramref name="dictionary" /> から指定した <paramref name="key" /> の値が見つかった場合は <see langword="true" />。指定した <paramref name="key" /> に関連付けられている値が <paramref name="dictionary" /> で見つからない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.CollectionExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
      <summary vsli:raw="Tries to add the specified &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; to the &lt;paramref name=&quot;dictionary&quot; /&gt;.">指定した <paramref name="key" /> と <paramref name="value" /> を <paramref name="dictionary" /> に追加しようとします。</summary>
      <param name="dictionary" vsli:raw="A dictionary with keys of type &lt;typeparamref name=&quot;TKey&quot; /&gt; and values of type &lt;typeparamref name=&quot;TValue&quot; /&gt;.">
        <typeparamref name="TKey" /> 型のキーと <typeparamref name="TValue" /> 型の値を含むディクショナリ。</param>
      <param name="key" vsli:raw="The key of the value to add.">追加する値のキー。</param>
      <param name="value" vsli:raw="The value to add.">加算する値。</param>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; when the &lt;paramref name=&quot;key&quot; /&gt; and &lt;paramref name=&quot;value&quot; /&gt; are successfully added to the &lt;paramref name=&quot;dictionary&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; when the &lt;paramref name=&quot;dictionary&quot; /&gt; already contains the specified &lt;paramref name=&quot;key&quot; /&gt;, in which case nothing gets added.">
        <paramref name="key" /> と <paramref name="value" /> が <paramref name="dictionary" /> に正常に追加された場合は、<see langword="true" />。<paramref name="dictionary" /> に指定した <paramref name="key" /> が既に含まれている場合は <see langword="false" /> (この場合、何も追加されません)。</returns>
    </member>
    <member name="T:System.Collections.Generic.Comparer`1">
      <summary vsli:raw="Provides a base class for implementations of the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; generic interface.">
        <see cref="T:System.Collections.Generic.IComparer`1" /> ジェネリック インターフェイスの実装のための基本クラスを提供します。</summary>
      <typeparam name="T" vsli:raw="The type of objects to compare.">比較するオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; class.">
        <see cref="T:System.Collections.Generic.Comparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Compare(`0,`0)">
      <summary vsli:raw="When overridden in a derived class, performs a comparison of two objects of the same type and returns a value indicating whether one object is less than, equal to, or greater than the other.">派生クラスでオーバーライドされると、同じ型の 2 つのオブジェクトに対する比較を実行し、一方のオブジェクトが他方よりも小さいか、等しいか、大きいかを示す値を返します。</summary>
      <param name="x" vsli:raw="The first object to compare.">比較する最初のオブジェクト。</param>
      <param name="y" vsli:raw="The second object to compare.">比較する 2 番目のオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Type &lt;paramref name=&quot;T&quot; /&gt; does not implement either the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface.">
        <paramref name="T" /> 型が、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスと <see cref="T:System.IComparable" /> インターフェイスのいずれも実装していません。</exception>
      <returns vsli:raw="A signed integer that indicates the relative values of &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Meaning&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is less than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; equals &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is greater than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">
        <paramref name="x" /> と <paramref name="y" /> の相対値を示す符号付き整数。次の表を参照してください。  
  
 <list type="table"><listheader><term> [値]</term><description> 説明</description></listheader><item><term> 0 より小さい値</term><description><paramref name="x" /> は <paramref name="y" /> より小さい値です。</description></item><item><term> ゼロ</term><description><paramref name="x" /> と <paramref name="y" /> は等しい。</description></item><item><term> 0 より大きい値</term><description><paramref name="x" /> が <paramref name="y" /> より大きくなっています。</description></item></list></returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.Create(System.Comparison{`0})">
      <summary vsli:raw="Creates a comparer by using the specified comparison.">指定した比較を使用して比較子を作成します。</summary>
      <param name="comparison" vsli:raw="The comparison to use.">使用する比較。</param>
      <returns vsli:raw="The new comparer.">新しい比較子。</returns>
    </member>
    <member name="M:System.Collections.Generic.Comparer`1.System#Collections#IComparer#Compare(System.Object,System.Object)">
      <summary vsli:raw="Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other.">2 つのオブジェクトを比較して、一方が他方より小さいか、同じか、または大きいかを示す値を返します。</summary>
      <param name="x" vsli:raw="The first object to compare.">比較する最初のオブジェクト。</param>
      <param name="y" vsli:raw="The second object to compare.">比較する 2 番目のオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;x&quot; /&gt; or &lt;paramref name=&quot;y&quot; /&gt; is of a type that cannot be cast to type &lt;paramref name=&quot;T&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; do not implement either the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface.">
        <paramref name="x" /> または <paramref name="y" /> が、<paramref name="T" /> 型にキャストできない型です。  
  
- または - 
 <paramref name="x" /> および <paramref name="y" /> が、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスと <see cref="T:System.IComparable" /> インターフェイスのいずれも実装していません。</exception>
      <returns vsli:raw="A signed integer that indicates the relative values of &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Meaning&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; Less than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is less than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; equals &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; Greater than zero&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;x&quot; /&gt; is greater than &lt;paramref name=&quot;y&quot; /&gt;.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">
        <paramref name="x" /> と <paramref name="y" /> の相対値を示す符号付き整数。次の表を参照してください。  
  
 <list type="table"><listheader><term> [値]</term><description> 説明</description></listheader><item><term> 0 より小さい値</term><description><paramref name="x" /> は <paramref name="y" /> より小さい値です。</description></item><item><term> ゼロ</term><description><paramref name="x" /> と <paramref name="y" /> は等しい。</description></item><item><term> 0 より大きい値</term><description><paramref name="x" /> が <paramref name="y" /> より大きくなっています。</description></item></list></returns>
    </member>
    <member name="P:System.Collections.Generic.Comparer`1.Default">
      <summary vsli:raw="Returns a default sort order comparer for the type specified by the generic argument.">汎用引数で指定された型に対して、既定の並べ替え順序比較子を返します。</summary>
      <returns vsli:raw="An object that inherits &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; and serves as a sort order comparer for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Comparer`1" /> を継承し、<paramref name="T" /> 型の並べ替え順序の比較子として機能するオブジェクト。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2">
      <summary vsli:raw="Represents a collection of keys and values.">キーと値のコレクションを表します。</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the default equality comparer for the key type.">空で、既定の初期量を備え、キーの型の既定の等値比較子を使用する、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the default equality comparer for the key type.">指定した <see cref="T:System.Collections.Generic.Dictionary`2" /> から要素をコピーして格納し、キーの型の既定の等値比較子を使用する、<see cref="T:System.Collections.Generic.IDictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> には 1 つまたは複数の重複するキーが含まれます。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">指定した <see cref="T:System.Collections.Generic.IDictionary`2" /> から要素をコピーして格納し、指定した <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を使用する、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">キーの比較時に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 実装。キーの型の既定の <see langword="null" /> を使用する場合は <see cref="T:System.Collections.Generic.EqualityComparer`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> には 1 つまたは複数の重複するキーが含まれます。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;.">指定した <see cref="T:System.Collections.Generic.IEnumerable`1" /> からコピーされた要素を格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;  whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.IEnumerable`1" /> に要素がコピーされた <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; contains one or more duplicated keys.">
        <paramref name="collection" /> には 1 つ以上の重複するキーが含まれています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">指定した <see cref="T:System.Collections.Generic.Dictionary`2" /> から要素をコピーして格納し、指定した <see cref="T:System.Collections.Generic.IEnumerable`1" /> を使用する、<see cref="T:System.Collections.Generic.IEqualityComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.IEnumerable`1" /> に要素がコピーされた <see cref="T:System.Collections.Generic.Dictionary`2" />。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">キーの比較時に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 実装。キーの型の既定の <see langword="null" /> を使用する場合は <see cref="T:System.Collections.Generic.EqualityComparer`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; contains one or more duplicated keys.">
        <paramref name="collection" /> には 1 つ以上の重複するキーが含まれています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">空で、既定の初期量を備え、指定した <see cref="T:System.Collections.Generic.Dictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IEqualityComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">キーの比較時に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 実装。キーの型の既定の <see langword="null" /> を使用する場合は <see cref="T:System.Collections.Generic.EqualityComparer`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the default equality comparer for the key type.">空で、指定した初期量を備え、キーの型の既定の等値比較子を使用する、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> が格納できる要素数の初期値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">空で、指定した初期量を備え、指定した <see cref="T:System.Collections.Generic.Dictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IEqualityComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> が格納できる要素数の初期値。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; for the type of the key.">キーの比較時に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> 実装。キーの型の既定の <see langword="null" /> を使用する場合は <see cref="T:System.Collections.Generic.EqualityComparer`1" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; class with serialized data.">シリアル化したデータを使用して、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object containing the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> をシリアル化するために必要な情報を格納している <see cref="T:System.Collections.Generic.Dictionary`2" /> オブジェクト。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure containing the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納している <see cref="T:System.Collections.Generic.Dictionary`2" /> 構造体。</param>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds the specified key and value to the dictionary.">指定したキーと値をディクショナリに追加します。</summary>
      <param name="key" vsli:raw="The key of the element to add.">追加する要素のキー。</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">追加する要素の値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.Dictionary`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Clear">
      <summary vsli:raw="Removes all keys and values from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> からすべてのキーと値を削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains the specified key.">指定したキーが <see cref="T:System.Collections.Generic.Dictionary`2" /> に格納されているかどうかを判断します。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.Dictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains a specific value.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内で検索される値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値を持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.Dictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.EnsureCapacity(System.Int32)">
      <summary vsli:raw="Ensures that the dictionary can hold up to a specified number of entries without any further expansion of its backing storage.">バッキング ストレージをさらに拡張することなく、ディクショナリに指定したエントリ数まで格納できるようにします。</summary>
      <param name="capacity" vsli:raw="The number of entries.">エントリの数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" /> が 0 未満です。</exception>
      <returns vsli:raw="The current capacity of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の現在の容量。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.Enumerator&quot; /&gt; structure for the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> 構造体。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.Dictionary`2" /> インスタンスをシリアル化するために必要なデータを返します。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> オブジェクト。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> インスタンスに関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納する <see cref="T:System.Collections.Generic.Dictionary`2" /> 構造体。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; instance is invalid.">現在の <see cref="T:System.Collections.Generic.Dictionary`2" /> インスタンスに関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the value with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">指定したキーを持つ値を <see cref="T:System.Collections.Generic.Dictionary`2" /> から削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">要素が見つかり、正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<paramref name="key" /> が <see cref="T:System.Collections.Generic.Dictionary`2" /> に見つからない場合、<see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Remove(`0,`1@)">
      <summary vsli:raw="Removes the value with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, and copies the element to the &lt;paramref name=&quot;value&quot; /&gt; parameter.">指定されたキーを持つ値を <see cref="T:System.Collections.Generic.Dictionary`2" /> から削除し、その要素を <paramref name="value" /> パラメーターにコピーします。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
      <param name="value" vsli:raw="The removed element.">削除された要素。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">要素が見つかり、正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds the specified value to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; with the specified key.">指定した値を、指定したキーと共に <see cref="T:System.Collections.Generic.ICollection`1" /> に追加します。</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure representing the key and value to add to the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> に追加するキーと値を表す <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造体。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The key of &lt;paramref name=&quot;keyValuePair&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyValuePair" /> のキーは <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.Dictionary`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific key and value.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に特定のキーと値が格納されているかどうかを判断します。</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 内で検索される <see cref="T:System.Collections.Generic.ICollection`1" /> 構造体。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <paramref name="keyValuePair" /> に存在する場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt;, starting at the specified array index.">指定した配列インデックスを開始位置として、<see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の配列に <see cref="T:System.Collections.Generic.ICollection`1" /> の要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; that is the destination of the &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> からコピーされる <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 要素のコピー先である <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes a key and value from the dictionary.">ディクショナリからキーと値を削除します。</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure representing the key and value to remove from the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> から削除するキーと値を表す <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 構造体。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key and value represented by &lt;paramref name=&quot;keyValuePair&quot; /&gt; is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <paramref name="keyValuePair" /> で表されたキーと値が見つかり、正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<paramref name="keyValuePair" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> に見つからない場合、<see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array, starting at the specified array index.">指定した配列インデックスを開始位置として、配列に <see cref="T:System.Collections.Generic.ICollection`1" /> の要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から要素がコピーされる 1 次元の配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。  
  
または 
 <paramref name="array" /> には、0 から始まるインデックス番号がありません。  
  
または 
コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。  
  
または 
コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds the specified key and value to the dictionary.">指定したキーと値をディクショナリに追加します。</summary>
      <param name="key" vsli:raw="The object to use as the key.">キーとして使用するオブジェクト。</param>
      <param name="value" vsli:raw="The object to use as the value.">値として使用するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to &lt;paramref name=&quot;TValue&quot; /&gt;, the type of values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <paramref name="key" /> が、<see cref="T:System.Collections.Generic.Dictionary`2" /> のキーの型 <paramref name="TKey" /> に代入できない型です。  
  
または 
 <paramref name="value" /> が、<see cref="T:System.Collections.Generic.Dictionary`2" /> 内の値の型である <paramref name="TValue" /> に代入できない型です。  
  
または 
同じキーを持つ値が、<see cref="T:System.Collections.Generic.Dictionary`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">指定したキーの要素が <see cref="T:System.Collections.IDictionary" /> に格納されているかどうかを確認します。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> 内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" />を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> から削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess">
      <summary vsli:raw="Sets the capacity of this dictionary to what it would be if it had been originally initialized with all its entries.">このディクショナリの容量を、そのすべてのエントリが最初に初期化されていた場合に想定される容量に設定します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TrimExcess(System.Int32)">
      <summary vsli:raw="Sets the capacity of this dictionary to hold up a specified number of entries without any further expansion of its backing storage.">バッキング ストレージをさらに拡張することなく、指定したエントリ数まで格納できるようにこのディクショナリの容量を設定します。</summary>
      <param name="capacity" vsli:raw="The new capacity.">新しい容量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than &lt;see cref=&quot;P:System.Collections.Generic.Dictionary`2.Count&quot; /&gt;.">
        <paramref name="capacity" /> は <see cref="T:System.Collections.Generic.Dictionary`2" /> より小さい値です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryAdd(`0,`1)">
      <summary vsli:raw="Attempts to add the specified key and value to the dictionary.">ディクショナリに対して、指定したキーと値の追加を試みます。</summary>
      <param name="key" vsli:raw="The key of the element to add.">追加する要素のキー。</param>
      <param name="value" vsli:raw="The value of the element to add. It can be &lt;see langword=&quot;null&quot; /&gt;.">追加する要素の値。 <see langword="null" />を指定できます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key/value pair was added to the dictionary successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">キー/値ペアがディクショナリに正常に追加削除された場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">指定したキーに関連付けられている値を取得します。</summary>
      <param name="key" vsli:raw="The key of the value to get.">取得する値のキー。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">このメソッドから制御が戻るときに、キーが見つかった場合は、指定したキーに関連付けられている値が格納されます。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定の値。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.Dictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; that is used to determine equality of keys for the dictionary.">ディクショナリのキーが等しいかどうかを確認するために使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface implementation that is used to determine equality of keys for the current &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; and to provide hash values for the keys.">現在の <see cref="T:System.Collections.Generic.Dictionary`2" /> のキーが等しいかどうかを確認し、キーのハッシュ値を提供するために使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> に格納されているキー/値ペアの数を取得します。</summary>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> に格納されているキー/値ペアの数。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">指定されたキーに関連付けられている値を取得または設定します。</summary>
      <param name="key" vsli:raw="The key of the value to get or set.">取得または設定する値のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">プロパティが取得され、<paramref name="key" /> がコレクションに存在しません。</exception>
      <returns vsli:raw="The value associated with the specified key. If the specified key is not found, a get operation throws a &lt;see cref=&quot;T:System.Collections.Generic.KeyNotFoundException&quot; /&gt;, and a set operation creates a new element with the specified key.">指定されたキーに関連付けられている値。 指定したキーが見つからなかった場合、get 操作は <see cref="T:System.Collections.Generic.KeyNotFoundException" /> をスローし、set 操作は指定したキーを持つ新しい要素を作成します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内のキーを格納しているコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 内のキーを格納している <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the dictionary is read-only.">ディクショナリが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Collections.Generic.Dictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; of type &lt;paramref name=&quot;TKey&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <paramref name="TKey" /> 型の <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; of type &lt;paramref name=&quot;TValue&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <paramref name="TValue" /> 型の <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets a collection containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> のキーを格納しているコレクションを取得します。</summary>
      <returns vsli:raw="A collection containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> のキーを格納しているコレクション。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets a collection containing the values of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> の値を格納しているコレクションを取得します。</summary>
      <returns vsli:raw="A collection containing the values of the &lt;see cref=&quot;T:System.Collections.Generic.IReadOnlyDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IReadOnlyDictionary`2" /> 内の値を格納しているコレクション。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Dictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクト。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IDictionary" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Dictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.IDictionary" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Dictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the value with the specified key.">指定したキーの値を取得または設定します。</summary>
      <param name="key" vsli:raw="The key of the value to get.">取得する値のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value is being assigned, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">値を代入しようとしていますが、<paramref name="key" /> は、<see cref="T:System.Collections.Generic.Dictionary`2" /> のキーの型 <paramref name="TKey" /> に代入できない型です。  
  
または 
値を代入しようとしていますが、<paramref name="value" /> は、<see cref="T:System.Collections.Generic.Dictionary`2" /> の値の型 <paramref name="TValue" /> に代入できない型です。</exception>
      <returns vsli:raw="The value associated with the specified key, or &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">指定したキーに関連付けられた値。ただし、<paramref name="key" /> がディクショナリにない場合、または <paramref name="key" /> が <see cref="T:System.Collections.Generic.Dictionary`2" /> のキー型 <paramref name="TKey" /> に割り当てられない型である場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内の値を格納しているコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 内の値を格納している <see cref="T:System.Collections.Generic.Dictionary`2" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> の要素を列挙します。</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">列挙子を <see cref="T:System.Collections.Generic.Dictionary`2" /> の次の要素に進めます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the dictionary at the current position of the enumerator, as a &lt;see cref=&quot;T:System.Collections.DictionaryEntry&quot; /&gt;.">ディクショナリ内の列挙子の現在位置にある、<see cref="T:System.Collections.DictionaryEntry" /> としての要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary vsli:raw="Gets the key of the element at the current position of the enumerator.">列挙子の現在位置の要素のキーを取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The key of the element in the dictionary at the current position of the enumerator.">ディクショナリ内の列挙子の現在位置にある要素のキー。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary vsli:raw="Gets the value of the element at the current position of the enumerator.">列挙子の現在位置の要素の値を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The value of the element in the dictionary at the current position of the enumerator.">ディレクショナリ内の列挙子の現在位置にある要素の値。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator, as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">コレクション内の列挙子の現在位置にある、<see cref="T:System.Object" /> としての要素。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection">
      <summary vsli:raw="Represents the collection of keys in a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;. This class cannot be inherited.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内のキーのコレクションを表します。 このクラスは継承できません。</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; class that reflects the keys in the specified &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">指定した <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> 内のキーを反映する、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; whose keys are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.Dictionary`2" /> にキーが反映される <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の要素を既存の 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">コピー元の <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" /> の <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。 この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> からすべての項目を削除します。 この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>
        <see cref="T:System.Collections.Generic.ICollection`1" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索するオブジェクト。</param>
      <returns>
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">特定のオブジェクトが <see cref="T:System.Collections.Generic.ICollection`1" /> 内にあるときに、最初に出現したものを削除します。 この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">常にスローされます。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" /> が <paramref name="item" /> から正常に削除された場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。 このメソッドは、元の <see cref="T:System.Collections.Generic.ICollection`1" /> で項目が見つからなかった場合にも <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。  
  
- または - 
 <paramref name="array" /> には、0 から始まるインデックス番号がありません。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> に格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.  &#xA;  &#xA; Retrieving the value of this property is an O(1) operation.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> に格納されている要素の数。  
  
このプロパティ値を取得することは、O(1) 操作になります。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトです。  <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の要素を列挙します。</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;.">列挙子を <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の次の要素に進めます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection">
      <summary vsli:raw="Represents the collection of values in a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;. This class cannot be inherited.">
        <see cref="T:System.Collections.Generic.Dictionary`2" /> 内の値のコレクションを表します。 このクラスは継承できません。</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.#ctor(System.Collections.Generic.Dictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; class that reflects the values in the specified &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">指定した <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> 内の値を反映する、<see cref="T:System.Collections.Generic.Dictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; whose values are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.Dictionary`2" /> に値が反映される <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> の要素を既存の 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">コピー元の <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" /> の <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。  この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> からすべての項目を削除します。  この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">常にスローされます。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific value.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">特定のオブジェクトが <see cref="T:System.Collections.Generic.ICollection`1" /> 内にあるときに、最初に出現したものを削除します。 この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown.">常にスローされます。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" /> が <paramref name="item" /> から正常に削除された場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。 このメソッドは、元の <see langword="false" /> で <paramref name="item" /> が見つからなかった場合にも <see cref="T:System.Collections.Generic.ICollection`1" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。  
  
- または - 
 <paramref name="array" /> には、0 から始まるインデックス番号がありません。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> に格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトです。  <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> の要素を列挙します。</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt;.">列挙子を <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> の次の要素に進めます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.ValueCollection&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.Dictionary`2.ValueCollection" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.Dictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="T:System.Collections.Generic.EqualityComparer`1">
      <summary vsli:raw="Provides a base class for implementations of the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; generic interface.">
        <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> ジェネリック インターフェイスの実装のための基本クラスを提供します。</summary>
      <typeparam name="T" vsli:raw="The type of objects to compare.">比較するオブジェクトの型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; class.">
        <see cref="T:System.Collections.Generic.EqualityComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.Equals(`0,`0)">
      <summary vsli:raw="When overridden in a derived class, determines whether two objects of type &lt;typeparamref name=&quot;T&quot; /&gt; are equal.">派生クラスでオーバーライドされた場合、<typeparamref name="T" /> 型の 2 つのオブジェクトが等しいかどうかを確認します。</summary>
      <param name="x" vsli:raw="The first object to compare.">比較する最初のオブジェクト。</param>
      <param name="y" vsli:raw="The second object to compare.">比較する 2 番目のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified objects are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したオブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.GetHashCode(`0)">
      <summary vsli:raw="When overridden in a derived class, serves as a hash function for the specified object for hashing algorithms and data structures, such as a hash table.">派生クラスでオーバーライドされた場合、ハッシュ アルゴリズムや、ハッシュ テーブルなどのデータ構造体の指定したオブジェクトに使用するハッシュ関数として機能します。</summary>
      <param name="obj" vsli:raw="The object for which to get a hash code.">ハッシュ コードを取得する対象となるオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The type of &lt;paramref name=&quot;obj&quot; /&gt; is a reference type and &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" /> の型が参照型で、<paramref name="obj" /> が <see langword="null" /> です。</exception>
      <returns vsli:raw="A hash code for the specified object.">指定したオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#Equals(System.Object,System.Object)">
      <summary vsli:raw="Determines whether the specified objects are equal.">指定したオブジェクトが等しいかどうかを判断します。</summary>
      <param name="x" vsli:raw="The first object to compare.">比較する最初のオブジェクト。</param>
      <param name="y" vsli:raw="The second object to compare.">比較する 2 番目のオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;x&quot; /&gt; or &lt;paramref name=&quot;y&quot; /&gt; is of a type that cannot be cast to type &lt;typeparamref name=&quot;T&quot; /&gt;.">
        <paramref name="x" /> または <paramref name="y" /> が、<typeparamref name="T" /> 型にキャストできない型です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified objects are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したオブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.EqualityComparer`1.System#Collections#IEqualityComparer#GetHashCode(System.Object)">
      <summary vsli:raw="Returns a hash code for the specified object.">指定したオブジェクトのハッシュ コードを返します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which a hash code is to be returned.">ハッシュ コードが返される対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The type of &lt;paramref name=&quot;obj&quot; /&gt; is a reference type and &lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;obj&quot; /&gt; is of a type that cannot be cast to type &lt;typeparamref name=&quot;T&quot; /&gt;.">
        <paramref name="obj" /> の型が参照型で、<paramref name="obj" /> が <see langword="null" /> です。  
  
- または - 
 <paramref name="obj" /> が、<typeparamref name="T" /> 型にキャストできない型です。</exception>
      <returns vsli:raw="A hash code for the specified object.">指定したオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="P:System.Collections.Generic.EqualityComparer`1.Default">
      <summary vsli:raw="Returns a default equality comparer for the type specified by the generic argument.">汎用引数で指定された型に対して、等値であるかどうかを比較するための既定の比較子を返します。</summary>
      <returns vsli:raw="The default instance of the &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; class for type &lt;typeparamref name=&quot;T&quot; /&gt;.">
        <typeparamref name="T" /> 型の <see cref="T:System.Collections.Generic.EqualityComparer`1" /> クラスの既定のインスタンス。</returns>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1">
      <summary vsli:raw="Represents a set of values.">値のセットを表します。</summary>
      <typeparam name="T" vsli:raw="The type of elements in the hash set.">ハッシュ セット内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that is empty and uses the default equality comparer for the set type.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。初期化後のインスタンスの内容は空です。このセット型には既定の等値比較子が使用されます。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that uses the default equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。このセット型には既定の等値比較子が使用されます。指定されたコレクションからコピーされた要素が格納され、コピー対象の要素数を格納できるだけの十分な容量が確保されます。</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new set.">新しいセットの要素のコピー元となるコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that uses the specified equality comparer for the set type, contains elements copied from the specified collection, and has sufficient capacity to accommodate the number of elements copied.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。このセット型には指定した等値比較子が使用されます。指定されたコレクションからコピーされた要素が格納され、コピー対象の要素数を格納できるだけの十分な容量が確保されます。</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new set.">新しいセットの要素のコピー元となるコレクション。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing values in the set, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; implementation for the set type.">セット内の値を比較する際に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> の実装。このセット型に、既定の <see cref="T:System.Collections.Generic.EqualityComparer`1" /> の実装を使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that is empty and uses the specified equality comparer for the set type.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。初期化後のインスタンスの内容は空です。このセット型には指定した等値比較子が使用されます。</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing values in the set, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.EqualityComparer`1&quot; /&gt; implementation for the set type.">セット内の値を比較する際に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> の実装。このセット型に、既定の <see cref="T:System.Collections.Generic.EqualityComparer`1" /> の実装を使用する場合は <see langword="null" />。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that is empty, but has reserved space for &lt;paramref name=&quot;capacity&quot; /&gt; items and uses the default equality comparer for the set type.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。初期化後のインスタンスの内容は空ですが、<paramref name="capacity" /> 項目の予約された領域があり、このセット型には既定の等値比較子が使用されます。</summary>
      <param name="capacity" vsli:raw="The initial size of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> の初期サイズは、</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class that uses the specified equality comparer for the set type, and has sufficient capacity to accommodate &lt;paramref name=&quot;capacity&quot; /&gt; elements.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。このセット型には指定した等値比較子が使用されます。また、<paramref name="capacity" /> 要素を格納できるだけの容量を備えています。</summary>
      <param name="capacity" vsli:raw="The initial size of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> の初期サイズは、</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing values in the set, or null (Nothing in Visual Basic) to use the default &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation for the set type.">セット内の値を比較する際に使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> の実装。このセット型に、既定の <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> の実装を使用する場合は null (Visual Basic の場合は Nothing)。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; class with serialized data.">シリアル化したデータを使用して、<see cref="T:System.Collections.Generic.HashSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトをシリアル化するために必要な情報を格納している <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> 構造体。</param>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Add(`0)">
      <summary vsli:raw="Adds the specified element to a set.">指定された要素をセットに追加します。</summary>
      <param name="item" vsli:raw="The element to add to the set.">セットに追加する要素。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is added to the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object; &lt;see langword=&quot;false&quot; /&gt; if the element is already present.">要素が <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに追加された場合は <see langword="true" />。要素が既に存在していた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Clear">
      <summary vsli:raw="Removes all elements from a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトからすべての要素を削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object contains the specified element.">指定した要素が <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに含まれているかどうかを判断します。</summary>
      <param name="item" vsli:raw="The element to locate in the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクト内で検索する要素。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object contains the specified element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに指定された要素が格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to an array.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの要素を配列にコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトからコピーされる要素のコピー先となる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to an array, starting at the specified array index.">指定された配列インデックスを開始位置として、<see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの要素を配列にコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトからコピーされる要素のコピー先となる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is greater than the length of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="arrayIndex" /> が、コピー先の <paramref name="array" /> の長さを超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies the specified number of elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to an array, starting at the specified array index.">指定された配列インデックスを開始位置として、<see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから、指定された数の要素を配列にコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトからコピーされる要素のコピー先となる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <param name="count" vsli:raw="The number of elements to copy to &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> にコピーする要素の数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" /> が 0 未満です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is greater than the length of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is greater than the available space from the &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="arrayIndex" /> が、コピー先の <paramref name="array" /> の長さを超えています。  
  
- または - 
 <paramref name="count" /> が、コピー先の <paramref name="array" /> の <paramref name="index" /> から末尾までに格納できる数を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.CreateSetComparer">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object that can be used for equality testing of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの等価テストに使用できる <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object that can be used for deep equality testing of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの深いレベルの等価テストに使用できる <see cref="T:System.Collections.IEqualityComparer" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.EnsureCapacity(System.Int32)">
      <summary vsli:raw="Ensures that this hash set can hold the specified number of elements without growing.">このハッシュ セットを大きくすることなく、指定された要素数を保持できるようにします。</summary>
      <param name="capacity" vsli:raw="The minimum capacity to ensure.">必要な最小容量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> が 0 未満です。</exception>
      <returns vsli:raw="The new capacity of this instance.">このインスタンスの新しい容量。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements in the specified collection from the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから、指定されたコレクションに含まれる要素をすべて削除します。</summary>
      <param name="other" vsli:raw="The collection of items to remove from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから削除する項目のコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1.Enumerator&quot; /&gt; object for the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトをシリアル化するために必要なデータを返します。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトをシリアル化するために必要な情報を格納している <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> 構造体。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to contain only elements that are present in that object and in the specified collection.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトを、そのオブジェクトと指定されたコレクションの両方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper subset of the specified collection.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> の真のサブセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper superset of the specified collection.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが、指定されたコレクションの真のスーパーセット (真上位集合) であるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> の真のスーパーセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a subset of the specified collection.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> のサブセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a superset of the specified collection.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> のスーパーセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is invalid.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object and a specified collection share common elements.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと指定されたコレクションとが共通の要素を共有しているかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと <paramref name="other" /> との間に共通する要素が 1 つでも存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Remove(`0)">
      <summary vsli:raw="Removes the specified element from a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトから指定された要素を削除します。</summary>
      <param name="item" vsli:raw="The element to remove.">削除する要素。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">要素が見つかり、正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<paramref name="item" /> が <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに見つからない場合、<see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.RemoveWhere(System.Predicate{`0})">
      <summary vsli:raw="Removes all elements that match the conditions defined by the specified predicate from a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection.">指定の述語によって定義された条件に一致するすべての要素を <see cref="T:System.Collections.Generic.HashSet`1" /> コレクションから削除します。</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to remove.">削除する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The number of elements that were removed from the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> コレクションから削除された要素数。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object and the specified collection contain the same elements.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトが <paramref name="other" /> と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to contain only elements that are present either in that object or in the specified collection, but not both.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトを、そのオブジェクトと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトに項目を追加します。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; object that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; object that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TrimExcess">
      <summary vsli:raw="Sets the capacity of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to the actual number of elements it contains, rounded up to a nearby, implementation-specific value.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの容量を、そこに格納されている実際の要素数を最も近い実装に固有の値に切り上げて設定します。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">指定された値をセットで検索し、見つかった場合は同じ値を返します。</summary>
      <param name="equalValue" vsli:raw="The value to search for.">検索する値。</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the default value of T when the search yielded no match.">セット内の検索で見つかった値。検索で一致するものがなかった場合は、既定の T の値。</param>
      <returns vsli:raw="A value indicating whether the search was successful.">検索が成功したかどうかを示す値。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object to contain all elements that are present in itself, the specified collection, or both.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトに変更を加えて、そのオブジェクト自体、指定されたコレクション、またはそれら両方に存在するすべての要素を格納するようにします。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; object that is used to determine equality for the values in the set.">セット内の値が等しいかどうかを確認するために使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; object that is used to determine equality for the values in the set.">セット内の値が等しいかどうかを確認するために使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> オブジェクト。</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Count">
      <summary vsli:raw="Gets the number of elements that are contained in a set.">セットに格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements that are contained in the set.">セットに格納されている要素の数。</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether a collection is read-only.">コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.HashSet`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> オブジェクトの要素を列挙します。</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by a &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1.Enumerator&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.HashSet`1.Enumerator" /> オブジェクトによって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection.">列挙子を <see cref="T:System.Collections.Generic.HashSet`1" /> コレクションの次の要素に進めます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.HashSet`1&quot; /&gt; collection at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.HashSet`1" /> コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.HashSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator, as an &lt;see cref=&quot;T:System.Object&quot; /&gt;.">コレクション内の列挙子の現在位置にある、<see cref="T:System.Object" /> としての要素。</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1">
      <summary vsli:raw="Represents a doubly linked list.">ダブルリンク リストを表します。</summary>
      <typeparam name="T" vsli:raw="Specifies the element type of the linked list.">リンク リストの要素の型を指定します。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; class that is empty.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> クラスの新しい空のインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; and has sufficient capacity to accommodate the number of elements copied.">指定した <see cref="T:System.Collections.Generic.LinkedList`1" /> からコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.IEnumerable" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">新しい <see cref="T:System.Collections.IEnumerable" /> に要素がコピーされた <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; class that is serializable with the specified &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">指定した <see cref="T:System.Collections.Generic.LinkedList`1" /> と <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を使用して、シリアル化可能な <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object containing the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> をシリアル化するために必要な情報を格納している <see cref="T:System.Collections.Generic.LinkedList`1" /> オブジェクト。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object containing the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> に関連付けられているシリアル化ストリームのソースおよびデスティネーションを格納している <see cref="T:System.Collections.Generic.LinkedList`1" /> オブジェクト。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary vsli:raw="Adds a new node containing the specified value after the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の指定した既存のノードの後に、指定した値を含んだ新しいノードを追加します。</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; after which to insert a new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" /> を挿入する位置の直前の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="value" vsli:raw="The value to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> に追加する値。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。</exception>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddAfter(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node after the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の指定した既存のノードの後に、指定した新しいノードを追加します。</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; after which to insert &lt;paramref name=&quot;newNode&quot; /&gt;.">
        <paramref name="newNode" /> を挿入する位置の直前の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="newNode" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> に追加する新しい <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="newNode" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。  
  
- または - 
 <paramref name="newNode" /> は他の <see cref="T:System.Collections.Generic.LinkedList`1" /> に属しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},`0)">
      <summary vsli:raw="Adds a new node containing the specified value before the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の指定した既存のノードの前に、指定した値を含んだ新しいノードを追加します。</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; before which to insert a new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" /> を挿入する位置の直後の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="value" vsli:raw="The value to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> に追加する値。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。</exception>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddBefore(System.Collections.Generic.LinkedListNode{`0},System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node before the specified existing node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の指定した既存のノードの前に、指定した新しいノードを追加します。</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; before which to insert &lt;paramref name=&quot;newNode&quot; /&gt;.">
        <paramref name="newNode" /> を挿入する位置の直後の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</param>
      <param name="newNode" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> に追加する新しい <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="newNode" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;newNode&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。  
  
- または - 
 <paramref name="newNode" /> は他の <see cref="T:System.Collections.Generic.LinkedList`1" /> に属しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(`0)">
      <summary vsli:raw="Adds a new node containing the specified value at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の先頭に、指定した値を含んだ新しいノードを追加します。</summary>
      <param name="value" vsli:raw="The value to add at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の先頭に追加する値。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddFirst(System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の先頭に指定した新しいノードを追加します。</summary>
      <param name="node" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> の先頭に追加する新しい <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> は他の <see cref="T:System.Collections.Generic.LinkedList`1" /> に属しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(`0)">
      <summary vsli:raw="Adds a new node containing the specified value at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の末尾に、指定した値を含んだ新しいノードを追加します。</summary>
      <param name="value" vsli:raw="The value to add at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の末尾に追加する値。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; containing &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> を含んだ新しい <see cref="T:System.Collections.Generic.LinkedListNode`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.AddLast(System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Adds the specified new node at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の末尾に、指定した新しいノードを追加します。</summary>
      <param name="node" vsli:raw="The new &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to add at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> の末尾に追加する新しい <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; belongs to another &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> は他の <see cref="T:System.Collections.Generic.LinkedList`1" /> に属しています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Clear">
      <summary vsli:raw="Removes all nodes from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> からすべてのノードを削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Contains(`0)">
      <summary vsli:raw="Determines whether a value is in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">ある値が <see cref="T:System.Collections.Generic.LinkedList`1" /> 内に存在するかどうかを判断します。</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内で検索される値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <paramref name="value" /> に存在する場合は <see cref="T:System.Collections.Generic.LinkedList`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 全体を互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.LinkedList`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">コピー元の <see cref="T:System.Collections.Generic.LinkedList`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Find(`0)">
      <summary vsli:raw="Finds the first node that contains the specified value.">指定した値を含む最初のノードを検索します。</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内で検索される値。</param>
      <returns vsli:raw="The first &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; that contains the specified value, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">存在する場合は、指定した値を含む最初の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.FindLast(`0)">
      <summary vsli:raw="Finds the last node that contains the specified value.">指定した値を含む最後のノードを検索します。</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内で検索される値。</param>
      <returns vsli:raw="The last &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; that contains the specified value, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">存在する場合は、指定した値を含む最後の <see cref="T:System.Collections.Generic.LinkedListNode`1" />。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> の <see cref="T:System.Collections.Generic.LinkedList`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.LinkedList`1" /> インスタンスをシリアル化するために必要なデータを返します。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Collections.Generic.LinkedList`1" /> オブジェクト。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> インスタンスに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance is invalid.">現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> インスタンスに関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of the specified value from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内で最初に見つかった指定の値を削除します。</summary>
      <param name="value" vsli:raw="The value to remove from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> から削除する値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element containing &lt;paramref name=&quot;value&quot; /&gt; is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="value" /> を含んだ要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、元の <see langword="false" /> で <paramref name="value" /> が見つからなかった場合にも <see cref="T:System.Collections.Generic.LinkedList`1" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Remove(System.Collections.Generic.LinkedListNode{`0})">
      <summary vsli:raw="Removes the specified node from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">指定したノードを <see cref="T:System.Collections.Generic.LinkedList`1" /> から削除します。</summary>
      <param name="node" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> から削除する <see cref="T:System.Collections.Generic.LinkedList`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="node" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;node&quot; /&gt; is not in the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <paramref name="node" /> は、現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> に含まれていません。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveFirst">
      <summary vsli:raw="Removes the node at the start of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の先頭にあるノードを削除します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> が空です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.RemoveLast">
      <summary vsli:raw="Removes the node at the end of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の末尾にあるノードを削除します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> が空です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item at the end of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> の末尾にアイテムを追加します。</summary>
      <param name="value" vsli:raw="The value to add at the end of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> の末尾に追加する値。</param>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。  
  
- または - 
 <paramref name="array" /> には、0 から始まるインデックス番号がありません。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the linked list as a collection.">コレクションとしてリンク リストを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the linked list as a collection.">コレクションとしてリンク リストを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Count">
      <summary vsli:raw="Gets the number of nodes actually contained in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> に実際に格納されているノードの数を取得します。</summary>
      <returns vsli:raw="The number of nodes actually contained in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> に実際に格納されているノードの数。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.First">
      <summary vsli:raw="Gets the first node of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の最初のノードを取得します。</summary>
      <returns vsli:raw="The first &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> の最初の <see cref="T:System.Collections.Generic.LinkedList`1" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Last">
      <summary vsli:raw="Gets the last node of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> ノードの最後のノードを取得します。</summary>
      <returns vsli:raw="The last &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> の最後の <see cref="T:System.Collections.Generic.LinkedList`1" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.LinkedList`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.LinkedList`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトです。  <see cref="T:System.Collections.Generic.LinkedList`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedList`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> の要素を列挙します。</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">列挙子を <see cref="T:System.Collections.Generic.LinkedList`1" /> の次の要素に進めます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection. This class cannot be inherited.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。 このクラスは継承できません。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance is invalid.">現在の <see cref="T:System.Collections.Generic.LinkedList`1" /> インスタンスに関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Generic.LinkedList`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.LinkedList`1" /> インスタンスをシリアル化するために必要なデータを返します。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Collections.Generic.LinkedList`1" /> オブジェクト。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; instance.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> インスタンスに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedList`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="T:System.Collections.Generic.LinkedListNode`1">
      <summary vsli:raw="Represents a node in a &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;. This class cannot be inherited.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> のノードを表します。 このクラスは継承できません。</summary>
      <typeparam name="T" vsli:raw="Specifies the element type of the linked list.">リンク リストの要素の型を指定します。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.LinkedListNode`1.#ctor(`0)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; class, containing the specified value.">指定した値を含んだ <see cref="T:System.Collections.Generic.LinkedListNode`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The value to contain in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedListNode`1" /> に格納する値。</param>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.List">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; that the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; belongs to.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> が属する <see cref="T:System.Collections.Generic.LinkedListNode`1" /> を取得します。</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt; that the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; belongs to, or &lt;see langword=&quot;null&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.LinkedListNode`1&quot; /&gt; is not linked.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> が属する <see cref="T:System.Collections.Generic.LinkedListNode`1" /> への参照。<see cref="T:System.Collections.Generic.LinkedListNode`1" /> がリンクされていない場合は、<see langword="null" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Next">
      <summary vsli:raw="Gets the next node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の次のノードを取得します。</summary>
      <returns vsli:raw="A reference to the next node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the current node is the last element (&lt;see cref=&quot;P:System.Collections.Generic.LinkedList`1.Last&quot; /&gt;) of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の次のノードへの参照。現在のノードが <see cref="P:System.Collections.Generic.LinkedList`1.Last" /> の最後の要素 (<see cref="T:System.Collections.Generic.LinkedList`1" />) である場合は、<see langword="null" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Previous">
      <summary vsli:raw="Gets the previous node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の前のノードを取得します。</summary>
      <returns vsli:raw="A reference to the previous node in the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the current node is the first element (&lt;see cref=&quot;P:System.Collections.Generic.LinkedList`1.First&quot; /&gt;) of the &lt;see cref=&quot;T:System.Collections.Generic.LinkedList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.LinkedList`1" /> 内の前のノードへの参照。現在のノードが <see cref="P:System.Collections.Generic.LinkedList`1.First" /> の最初の要素 (<see cref="T:System.Collections.Generic.LinkedList`1" />) である場合は、<see langword="null" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.Value">
      <summary vsli:raw="Gets the value contained in the node.">ノードに格納された値を取得します。</summary>
      <returns vsli:raw="The value contained in the node.">ノードに格納された値。</returns>
    </member>
    <member name="P:System.Collections.Generic.LinkedListNode`1.ValueRef">
      <summary vsli:raw="Gets a reference to the value held by the node.">ノードに保持されている値への参照を取得します。</summary>
      <returns vsli:raw="A reference to the value held by the node.">ノードに保持されている値への参照。</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1">
      <summary vsli:raw="Represents a strongly typed list of objects that can be accessed by index. Provides methods to search, sort, and manipulate lists.">インデックスを使用してアクセスできる、厳密に型指定されたオブジェクトのリストを表します。 リストの検索、並べ替え、および操作のためのメソッドを提供します。</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">リスト内の要素の型です。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; class that is empty and has the default initial capacity.">空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.">指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new list.">新しいリストに要素がコピーされたコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; class that is empty and has the specified initial capacity.">空で、指定した初期量を備えた、<see cref="T:System.Collections.Generic.List`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity" vsli:raw="The number of elements that the new list can initially store.">新しいリストに格納できる要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Add(`0)">
      <summary vsli:raw="Adds an object to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> の末尾にオブジェクトを追加します。</summary>
      <param name="item" vsli:raw="The object to be added to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" /> の末尾に追加するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Adds the elements of the specified collection to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">指定したコレクションの要素を <see cref="T:System.Collections.Generic.List`1" /> の末尾に追加します。</summary>
      <param name="collection" vsli:raw="The collection whose elements should be added to the end of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are &lt;see langword=&quot;null&quot; /&gt;, if type &lt;paramref name=&quot;T&quot; /&gt; is a reference type.">
        <see cref="T:System.Collections.Generic.List`1" /> の末尾に要素が追加されるコレクション。 コレクション自体を <see langword="null" /> にすることはできませんが、型 <paramref name="T" /> が参照型の場合、コレクションに格納する要素は <see langword="null" /> であってもかまいません。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.AsReadOnly">
      <summary vsli:raw="Returns a read-only &lt;see cref=&quot;T:System.Collections.ObjectModel.ReadOnlyCollection`1&quot; /&gt; wrapper for the current collection.">現在のコレクションの読み取り専用の <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> ラッパーを返します。</summary>
      <returns vsli:raw="An object that acts as a read-only wrapper around the current &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">現在の <see cref="T:System.Collections.Generic.List`1" /> をラップする読み取り専用のラッパーとして動作するオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0)">
      <summary vsli:raw="Searches the entire sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; for an element using the default comparer and returns the zero-based index of the element.">既定の比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;item&quot; /&gt; in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if &lt;paramref name=&quot;item&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches the entire sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> 全体を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。  
  
- または - 
 既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;item&quot; /&gt; in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if &lt;paramref name=&quot;item&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Searches a range of elements in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; for an element using the specified comparer and returns the zero-based index of the element.">指定した比較子を使用して、並べ替えられた要素の <see cref="T:System.Collections.Generic.List`1" /> の 1 つの要素の範囲を検索し、その要素の 0 から始まるインデックスを返します。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to search.">検索範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The length of the range to search.">検索する範囲の長さ。</param>
      <param name="item" vsli:raw="The object to locate. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において有効な範囲を表していません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;item&quot; /&gt; in the sorted &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if &lt;paramref name=&quot;item&quot; /&gt; is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than &lt;paramref name=&quot;item&quot; /&gt; or, if there is no larger element, the bitwise complement of &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="item" /> が見つかった場合は、並べ替えられた <see cref="T:System.Collections.Generic.List`1" /> 内の <paramref name="item" /> の 0 から始まるインデックス。見つからなかった場合は、負の値。これは、<paramref name="item" /> の次に大きい要素のインデックスのビットごとの補数です。ただし、大きい要素が存在しない場合は、<see cref="P:System.Collections.Generic.List`1.Count" /> のビットごとの補数です。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> からすべての要素を削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Contains(`0)">
      <summary vsli:raw="Determines whether an element is in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">ある要素が <see cref="T:System.Collections.Generic.List`1" /> 内に存在するかどうかを判断します。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ConvertAll``1(System.Converter{`0,``0})">
      <summary vsli:raw="Converts the elements in the current &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to another type, and returns a list containing the converted elements.">現在の <see cref="T:System.Collections.Generic.List`1" /> の要素を別の型に変換し、変換された要素が格納されたリストを返します。</summary>
      <param name="converter" vsli:raw="A &lt;see cref=&quot;T:System.Converter`2&quot; /&gt; delegate that converts each element from one type to another type.">各要素の型を変換するための <see cref="T:System.Converter`2" /> デリゲート。</param>
      <typeparam name="TOutput" vsli:raw="The type of the elements of the target array.">変換後の配列要素の型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;converter&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="converter" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; of the target type containing the converted elements from the current &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">現在の <see cref="T:System.Collections.Generic.List`1" /> の要素の型を変換した後の <see cref="T:System.Collections.Generic.List`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a compatible one-dimensional array, starting at the beginning of the target array.">
        <see cref="T:System.Collections.Generic.List`1" /> 全体を互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.List`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; is greater than the number of elements that the destination &lt;paramref name=&quot;array&quot; /&gt; can contain.">コピー元の <see cref="T:System.Collections.Generic.List`1" /> の要素数が、コピー先 <paramref name="array" /> に含めることができる要素数を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified index of the target array.">
        <see cref="T:System.Collections.Generic.List`1" /> 全体を、互換性のある 1 次元配列の、指定したインデックスから始まる位置にコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.List`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">コピー元の <see cref="T:System.Collections.Generic.List`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a range of elements from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified index of the target array.">
        <see cref="T:System.Collections.Generic.List`1" /> のうちある範囲の要素を、互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</summary>
      <param name="index" vsli:raw="The zero-based index in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at which copying begins.">コピーを開始するコピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、0 から始まるインデックス。</param>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.List`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <param name="count" vsli:raw="The number of elements to copy.">コピーする要素の数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="arrayIndex" /> が 0 未満です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt; of the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements from &lt;paramref name=&quot;index&quot; /&gt; to the end of the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> がコピー元の <see cref="T:System.Collections.Generic.List`1" /> の <see cref="P:System.Collections.Generic.List`1.Count" /> 以上です。  
  
- または - 
コピー元の <see cref="T:System.Collections.Generic.List`1" /> の <paramref name="index" /> から最後までの要素数が、コピー先の <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能な領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Exists(System.Predicate{`0})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; contains elements that match the conditions defined by the specified predicate.">
        <see cref="T:System.Collections.Generic.List`1" /> に、指定された述語によって定義された条件と一致する要素が含まれているかどうかを判断します。</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to search for.">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; contains one or more elements that match the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定された述語によって定義された条件と一致する要素が少なくとも 1 つ、<see cref="T:System.Collections.Generic.List`1" /> に含まれる場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Find(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">指定された述語によって定義された条件と一致する要素を検索し、<see cref="T:System.Collections.Generic.List`1" /> 全体の中で最もインデックス番号の小さい要素を返します。</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">見つかった場合は、指定された述語によって定義された条件と一致する最初の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindAll(System.Predicate{`0})">
      <summary vsli:raw="Retrieves all the elements that match the conditions defined by the specified predicate.">指定された述語によって定義された条件と一致するすべての要素を取得します。</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to search for.">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">指定した述語によって定義される条件に一致する要素が見つかった場合は、そのすべての要素を格納する <see cref="T:System.Collections.Generic.List`1" />。それ以外の場合は、空の <see cref="T:System.Collections.Generic.List`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">
        <see cref="T:System.Collections.Generic.List`1" /> のうち、指定したインデックスから始まり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" />の有効なインデックスの範囲外です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="startIndex" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the specified index to the last element.">
        <see cref="T:System.Collections.Generic.List`1" /> の指定したインデックスから最後の要素までの範囲内で、指定した述語にで定義される条件に一致する要素を検索し、最初に見つかった 0 から始まるインデックスを返します。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the search.">検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" />の有効なインデックスの範囲外です。</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の小さい要素の 0 から始まるインデックスを返します。</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在した場合、最もインデックス番号の小さい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLast(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">指定された述語によって定義された条件と一致する要素を、<see cref="T:System.Collections.Generic.List`1" /> 全体を対象に検索し、最もインデックス番号の大きい要素を返します。</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type &lt;paramref name=&quot;T&quot; /&gt;.">見つかった場合は、指定された述語によって定義された条件と一致する最後の要素。それ以外の場合は、型 <paramref name="T" /> の既定値。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">
        <see cref="T:System.Collections.Generic.List`1" /> のうち、指定したインデックスで終わり、指定した要素数が含まれる範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" />の有効なインデックスの範囲外です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="startIndex" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Int32,System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the first element to the specified index.">
        <see cref="T:System.Collections.Generic.List`1" /> のうち、先頭の要素から指定したインデックスまでの範囲の中で、指定した述語によって定義される条件に一致する要素を検索し、そのうち最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="startIndex" vsli:raw="The zero-based starting index of the backward search.">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="startIndex" /> は <see cref="T:System.Collections.Generic.List`1" />の有効なインデックスの範囲外です。</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.FindLastIndex(System.Predicate{`0})">
      <summary vsli:raw="Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> 全体から、指定した述語によって定義される条件に一致する要素を検索し、最もインデックス番号の大きい要素の 0 から始まるインデックスを返します。</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the element to search for.">検索する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of an element that matches the conditions defined by &lt;paramref name=&quot;match&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="match" /> で定義された条件と一致する要素が存在する場合、最もインデックス番号の大きい要素の 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.ForEach(System.Action{`0})">
      <summary vsli:raw="Performs the specified action on each element of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> の各要素に対して、指定された処理を実行します。</summary>
      <param name="action" vsli:raw="The &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate to perform on each element of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> の各要素に対して実行する <see cref="T:System.Action`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An element in the collection has been modified.">コレクションの要素が変更されています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.List`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1.Enumerator" /> の <see cref="T:System.Collections.Generic.List`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.GetRange(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a shallow copy of a range of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">コピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、ある範囲の要素の簡易コピーを作成します。</summary>
      <param name="index" vsli:raw="The zero-based &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; index at which the range starts.">範囲が開始する位置の、0 から始まる <see cref="T:System.Collections.Generic.List`1" /> のインデックス番号。</param>
      <param name="count" vsli:raw="The number of elements in the range.">範囲内の要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において要素の有効な範囲を表していません。</exception>
      <returns vsli:raw="A shallow copy of a range of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">コピー元の <see cref="T:System.Collections.Generic.List`1" /> 内の、ある範囲の要素の簡易コピー。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> 全体から指定したオブジェクトを検索し、最初に見つかったオブジェクトのインデックス (0 から始まる) を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if found; otherwise, -1.">
        <see cref="T:System.Collections.Generic.List`1" /> 全体を対象に <paramref name="item" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the specified index to the last element.">
        <see cref="T:System.Collections.Generic.List`1" /> のうち指定したインデックスから最後の要素までの要素範囲の中から、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" />の有効なインデックスの範囲外です。</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from &lt;paramref name=&quot;index&quot; /&gt; to the last element, if found; otherwise, -1.">
        <paramref name="index" /> から最後の要素までの <see cref="T:System.Collections.Generic.List`1" /> 内の要素の範囲内で <paramref name="item" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.IndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that starts at the specified index and contains the specified number of elements.">指定したインデックスから始まり、指定した数の要素が含まれる <see cref="T:System.Collections.Generic.List`1" /> の要素範囲内で、指定したオブジェクトを検索し、最初に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index" vsli:raw="The zero-based starting index of the search. 0 (zero) is valid in an empty list.">検索の開始位置を示す 0 から始まるインデックス。 空のリストでは 0 (ゼロ) は有効です。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" />の有効なインデックスの範囲外です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</exception>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that starts at &lt;paramref name=&quot;index&quot; /&gt; and contains &lt;paramref name=&quot;count&quot; /&gt; number of elements, if found; otherwise, -1.">
        <paramref name="index" /> から始まって <paramref name="count" /> 個の要素を格納する <see cref="T:System.Collections.Generic.List`1" /> 内の要素の範囲内で <paramref name="item" /> が見つかった場合は、最初に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Insert(System.Int32,`0)">
      <summary vsli:raw="Inserts an element into the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the specified index.">
        <see cref="T:System.Collections.Generic.List`1" /> 内の指定したインデックスの位置に要素を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item" vsli:raw="The object to insert. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">挿入するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Inserts the elements of a collection into the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the specified index.">コレクションの要素を <see cref="T:System.Collections.Generic.List`1" /> 内の指定したインデックスの位置に挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which the new elements should be inserted.">新しい要素が挿入される位置の 0 から始まるインデックス。</param>
      <param name="collection" vsli:raw="The collection whose elements should be inserted into the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The collection itself cannot be &lt;see langword=&quot;null&quot; /&gt;, but it can contain elements that are &lt;see langword=&quot;null&quot; /&gt;, if type &lt;paramref name=&quot;T&quot; /&gt; is a reference type.">
        <see cref="T:System.Collections.Generic.List`1" /> に要素を挿入するコレクション。 コレクション自体を <see langword="null" /> にすることはできませんが、型 <paramref name="T" /> が参照型の場合、コレクションに格納する要素は <see langword="null" /> であってもかまいません。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> 全体から指定したオブジェクトを検索し、最後に見つかったオブジェクトのインデックス (0 から始まる) を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the entire the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="item" /> が見つかった場合は、<see cref="T:System.Collections.Generic.List`1" /> 全体で最後に見つかった位置のインデックス番号 (0 から始まる)。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the first element to the specified index.">
        <see cref="T:System.Collections.Generic.List`1" /> のうち、最初の要素から指定したインデックスまでの要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" />の有効なインデックスの範囲外です。</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that extends from the first element to &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">最初の要素から <paramref name="index" /> までの <see cref="T:System.Collections.Generic.List`1" /> 内の要素の範囲内で <paramref name="item" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.LastIndexOf(`0,System.Int32,System.Int32)">
      <summary vsli:raw="Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that contains the specified number of elements and ends at the specified index.">
        <see cref="T:System.Collections.Generic.List`1" /> のうち、指定した要素数が含まれ、指定したインデックスの位置で終了する要素範囲の中で、指定したオブジェクトを検索し、最後に出現する位置の 0 から始まるインデックス番号を返します。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <param name="index" vsli:raw="The zero-based starting index of the backward search.">後方検索の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements in the section to search.">検索対象の範囲内にある要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the range of valid indexes for the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid section in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> は <see cref="T:System.Collections.Generic.List`1" />の有効なインデックスの範囲外です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> および <paramref name="count" /> が <see cref="T:System.Collections.Generic.List`1" /> 内の正しいセクションを指定していません。</exception>
      <returns vsli:raw="The zero-based index of the last occurrence of &lt;paramref name=&quot;item&quot; /&gt; within the range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; that contains &lt;paramref name=&quot;count&quot; /&gt; number of elements and ends at &lt;paramref name=&quot;index&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="count" /> 個の要素を格納し、<paramref name="index" /> の位置で終了する <see cref="T:System.Collections.Generic.List`1" /> 内の要素の範囲内で <paramref name="item" /> が見つかった場合は、最後に見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">特定のオブジェクトが <see cref="T:System.Collections.Generic.List`1" /> 内にあるときに、最初に出現したものを削除します。</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.List`1" /> から削除するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; was not found in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="item" /> が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<see langword="false" /> が <paramref name="item" /> に見つからなかった場合にも <see cref="T:System.Collections.Generic.List`1" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAll(System.Predicate{`0})">
      <summary vsli:raw="Removes all the elements that match the conditions defined by the specified predicate.">指定した述語によって定義される条件に一致するすべての要素を削除します。</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions of the elements to remove.">削除する要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The number of elements removed from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> から削除される要素の数。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> の指定したインデックスにある要素を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">削除する要素の、0 から始まるインデックス番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> 以上になっています。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.RemoveRange(System.Int32,System.Int32)">
      <summary vsli:raw="Removes a range of elements from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> から要素の範囲を削除します。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range of elements to remove.">削除する要素の範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements to remove.">削除する要素の数を指定します。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において要素の有効な範囲を表していません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse">
      <summary vsli:raw="Reverses the order of the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> 全体の要素の順序を反転させます。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Reverse(System.Int32,System.Int32)">
      <summary vsli:raw="Reverses the order of the elements in the specified range.">指定した範囲の要素の順序を反転させます。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to reverse.">反転させる範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The number of elements in the range to reverse.">反転させる範囲内にある要素の数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not denote a valid range of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において要素の有効な範囲を表していません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the default comparer.">既定の比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find an implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> は、<see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the specified comparer.">指定した比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The implementation of &lt;paramref name=&quot;comparer&quot; /&gt; caused an error during the sort. For example, &lt;paramref name=&quot;comparer&quot; /&gt; might not return 0 when comparing an item with itself.">
        <paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。 たとえば、項目をそれ自体と比較する場合、<paramref name="comparer" /> は 0 を返さない可能性があります。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})">
      <summary vsli:raw="Sorts the elements in the entire &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the specified &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt;.">指定した <see cref="T:System.Comparison`1" /> を使用して、<see cref="T:System.Collections.Generic.List`1" /> 全体内の要素を並べ替えます。</summary>
      <param name="comparison" vsli:raw="The &lt;see cref=&quot;T:System.Comparison`1&quot; /&gt; to use when comparing elements.">要素を比較する場合に使用する <see cref="T:System.Comparison`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparison&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparison" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The implementation of &lt;paramref name=&quot;comparison&quot; /&gt; caused an error during the sort. For example, &lt;paramref name=&quot;comparison&quot; /&gt; might not return 0 when comparing an item with itself.">
        <paramref name="comparison" /> の実装により、並べ替え中にエラーが発生しました。 たとえば、項目をそれ自体と比較する場合、<paramref name="comparison" /> は 0 を返さない可能性があります。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Sorts the elements in a range of elements in &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; using the specified comparer.">指定した比較子を使用して、<see cref="T:System.Collections.Generic.List`1" /> 内の要素の範囲内の要素を並べ替えます。</summary>
      <param name="index" vsli:raw="The zero-based starting index of the range to sort.">並べ替える範囲の開始位置を示す 0 から始まるインデックス。</param>
      <param name="count" vsli:raw="The length of the range to sort.">並べ替える範囲の長さ。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing elements, or &lt;see langword=&quot;null&quot; /&gt; to use the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt;.">要素を比較する場合に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。または、既定の比較子 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> を使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; and &lt;paramref name=&quot;count&quot; /&gt; do not specify a valid range in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The implementation of &lt;paramref name=&quot;comparer&quot; /&gt; caused an error during the sort. For example, &lt;paramref name=&quot;comparer&quot; /&gt; might not return 0 when comparing an item with itself.">
        <paramref name="index" /> および <paramref name="count" /> は <see cref="T:System.Collections.Generic.List`1" /> において有効な範囲を指定していません。  
  
- または - 
<paramref name="comparer" /> の実装により、並べ替え中にエラーが発生しました。 たとえば、項目をそれ自体と比較する場合、<paramref name="comparer" /> は 0 を返さない可能性があります。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the default comparer &lt;see cref=&quot;P:System.Collections.Generic.Comparer`1.Default&quot; /&gt; cannot find implementation of the &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; generic interface or the &lt;see cref=&quot;T:System.IComparable&quot; /&gt; interface for type &lt;paramref name=&quot;T&quot; /&gt;.">
        <paramref name="comparer" /> が <see langword="null" /> で、既定の比較関数 <see cref="P:System.Collections.Generic.Comparer`1.Default" /> が <see cref="T:System.IComparable`1" /> ジェネリック インターフェイスまたは <paramref name="T" /> 型の <see cref="T:System.IComparable" /> インターフェイスの実装を見つけることができません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than 0.">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。  
  
- または - 
 <paramref name="array" /> には、0 から始まるインデックス番号がありません。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> に項目を追加します。</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> に追加する <see cref="T:System.Collections.IList" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
      <returns vsli:raw="The position into which the new element was inserted.">新しい要素が挿入された位置。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; contains a specific value.">
        <see cref="T:System.Collections.IList" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> 内で検索される <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> 内の特定の項目のインデックスを確認します。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> 内で検索するオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
      <returns vsli:raw="The index of &lt;paramref name=&quot;item&quot; /&gt; if found in the list; otherwise, -1.">リストに存在する場合は <paramref name="item" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; at the specified index.">指定したインデックスの <see cref="T:System.Collections.IList" /> に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;item&quot; /&gt; should be inserted.">
        <paramref name="item" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="item" vsli:raw="The object to insert into the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> に挿入するオブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">特定のオブジェクトが <see cref="T:System.Collections.IList" /> 内にあるときに、最初に出現したものを削除します。</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> から削除するオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;item&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="item" /> は <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
    </member>
    <member name="M:System.Collections.Generic.List`1.ToArray">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; to a new array.">
        <see cref="T:System.Collections.Generic.List`1" /> の要素を新しい配列にコピーします。</summary>
      <returns vsli:raw="An array containing copies of the elements of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> の要素のコピーを格納する配列。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, if that number is less than a threshold value.">
        <see cref="T:System.Collections.Generic.List`1" /> 内にある実際の要素数がしきい値未満の場合は、容量をその数に設定します。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.TrueForAll(System.Predicate{`0})">
      <summary vsli:raw="Determines whether every element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; matches the conditions defined by the specified predicate.">
        <see cref="T:System.Collections.Generic.List`1" /> 内のすべての要素が、指定した述語によって定義される条件に一致するかどうかを調べます。</summary>
      <param name="match" vsli:raw="The &lt;see cref=&quot;T:System.Predicate`1&quot; /&gt; delegate that defines the conditions to check against the elements.">要素の条件を定義する <see cref="T:System.Predicate`1" /> デリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if every element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; matches the conditions defined by the specified predicate; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the list has no elements, the return value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> 内のすべての要素が、指定した述語によって定義される条件に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 リストに要素がない場合、戻り値は <see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Capacity">
      <summary vsli:raw="Gets or sets the total number of elements the internal data structure can hold without resizing.">内部データ構造体がサイズ変更せずに格納できる要素の合計数を取得または設定します。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;see cref=&quot;P:System.Collections.Generic.List`1.Capacity&quot; /&gt; is set to a value that is less than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <see cref="P:System.Collections.Generic.List`1.Capacity" /> は <see cref="P:System.Collections.Generic.List`1.Count" /> より小さい値に設定されます。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is not enough memory available on the system.">システムで使用可能なメモリが不足しています。</exception>
      <returns vsli:raw="The number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; can contain before resizing is required.">サイズ変更が必要となるまでに <see cref="T:System.Collections.Generic.List`1" /> に格納できる要素の数。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> に格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.Generic.List`1.Count&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <see cref="P:System.Collections.Generic.List`1.Count" /> 以上になっています。</exception>
      <returns vsli:raw="The element at the specified index.">指定したインデックス位置にある要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトです。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.List`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <paramref name="index" /> が <see cref="T:System.Collections.IList" /> の有効なインデックスではありません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The property is set and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">プロパティが設定されていて、<paramref name="value" /> が <see cref="T:System.Collections.IList" /> に割り当てることのできない型です。</exception>
      <returns vsli:raw="The element at the specified index.">指定したインデックス位置にある要素。</returns>
    </member>
    <member name="T:System.Collections.Generic.List`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1" /> の要素を列挙します。</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.List`1.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.List`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">列挙子を <see cref="T:System.Collections.Generic.List`1" /> の次の要素に進めます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.List`1" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.List`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.List`1" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1">
      <summary vsli:raw="Represents a first-in, first-out collection of objects.">オブジェクトの先入れ先出しコレクションを表します。</summary>
      <typeparam name="T" vsli:raw="Specifies the type of elements in the queue.">キュー内の要素の型を指定します。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; class that is empty and has the default initial capacity.">空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.">指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.Queue`1" /> に要素がコピーされたコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; class that is empty and has the specified initial capacity.">空で、指定した初期量を備えた、<see cref="T:System.Collections.Generic.Queue`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.Queue`1" /> が格納できる要素数の初期値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Clear">
      <summary vsli:raw="Removes all objects from the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" /> からすべてのオブジェクトを削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Contains(`0)">
      <summary vsli:raw="Determines whether an element is in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">ある要素が <see cref="T:System.Collections.Generic.Queue`1" /> 内に存在するかどうかを判断します。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.Queue`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.Queue`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">
        <see cref="T:System.Collections.Generic.Queue`1" /> の要素を既存の 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.Queue`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">コピー元の <see cref="T:System.Collections.Generic.Queue`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Dequeue">
      <summary vsli:raw="Removes and returns the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクトを削除し、返します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Generic.Queue`1" /> が空です。</exception>
      <returns vsli:raw="The object that is removed from the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" /> の先頭から削除されたオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an object to the end of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" /> の末尾にオブジェクトを追加します。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.Queue`1" /> に追加するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.Queue`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> の <see cref="T:System.Collections.Generic.Queue`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Peek">
      <summary vsli:raw="Returns the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; without removing it.">
        <see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクトを削除せずに返します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Generic.Queue`1" /> が空です。</exception>
      <returns vsli:raw="The object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" /> の先頭にあるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。  
  
- または - 
 <paramref name="array" /> には、0 から始まるインデックス番号がありません。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.ToArray">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; elements to a new array.">
        <see cref="T:System.Collections.Generic.Queue`1" /> の要素を新しい配列にコピーします。</summary>
      <returns vsli:raw="A new array containing elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" /> からコピーした要素を格納する新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, if that number is less than 90 percent of current capacity.">
        <see cref="T:System.Collections.Generic.Queue`1" /> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryDequeue(`0@)">
      <summary vsli:raw="Removes the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, and copies it to the &lt;paramref name=&quot;result&quot; /&gt; parameter.">の先頭にあるオブジェクトを削除 <see cref="T:System.Collections.Generic.Queue`1" /> し、パラメーターにコピーし <paramref name="result" /> ます。</summary>
      <param name="result" vsli:raw="The removed object.">削除されたオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is successfully removed; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is empty.">
        <see langword="true" /> オブジェクトが正常に削除された場合は。 <see langword="false" /><see cref="T:System.Collections.Generic.Queue`1" /> が空の場合。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.TryPeek(`0@)">
      <summary vsli:raw="Returns a value that indicates whether there is an object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, and if one is present, copies it to the &lt;paramref name=&quot;result&quot; /&gt; parameter. The object is not removed from the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">の先頭にオブジェクトがあるかどうかを示す値を返し <see cref="T:System.Collections.Generic.Queue`1" /> ます。オブジェクトが存在する場合は、そのオブジェクトをパラメーターにコピーし <paramref name="result" /> ます。 オブジェクトはから削除されません <see cref="T:System.Collections.Generic.Queue`1" /> 。</summary>
      <param name="result" vsli:raw="If present, the object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;; otherwise, the default value of &lt;typeparamref name=&quot;T&quot; /&gt;.">存在する場合は、の先頭にあるオブジェクト <see cref="T:System.Collections.Generic.Queue`1" /> 。それ以外の場合は、の既定値 <typeparamref name="T" /> 。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is an object at the beginning of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; is empty.">
        <see langword="true" /> の先頭にオブジェクトが存在する場合は。 <see cref="T:System.Collections.Generic.Queue`1" /><see langword="false" /> が空の場合は <see cref="T:System.Collections.Generic.Queue`1" /> 。</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" /> に格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Queue`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトです。  <see cref="T:System.Collections.Generic.Queue`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="T:System.Collections.Generic.Queue`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1" /> の要素を列挙します。</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Queue`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt;.">列挙子を <see cref="T:System.Collections.Generic.Queue`1" /> の次の要素に進めます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Queue`1&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.Queue`1" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.Queue`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="T:System.Collections.Generic.ReferenceEqualityComparer">
      <summary vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; that uses reference equality (&lt;see cref=&quot;M:System.Object.ReferenceEquals(System.Object,System.Object)&quot; /&gt;) instead of value equality (&lt;see cref=&quot;M:System.Object.Equals(System.Object)&quot; /&gt;) when comparing two object instances.">2 つのオブジェクト インスタンスを比較するときに、値の等価性 (<see cref="M:System.Object.Equals(System.Object)" />) ではなく参照の等価性 (<see cref="M:System.Object.ReferenceEquals(System.Object,System.Object)" />) を使用する <see cref="T:System.Collections.Generic.IEqualityComparer`1" />。</summary>
    </member>
    <member name="M:System.Collections.Generic.ReferenceEqualityComparer.Equals(System.Object,System.Object)">
      <summary vsli:raw="Determines whether two object references refer to the same object instance.">2 つのオブジェクト参照が同じオブジェクト インスタンスを参照しているかどうかを判断します。</summary>
      <param name="x" vsli:raw="The first object to compare.">比較する最初のオブジェクト。</param>
      <param name="y" vsli:raw="The second object to compare.">比較する 2 番目のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if both &lt;paramref name=&quot;x&quot; /&gt; and &lt;paramref name=&quot;y&quot; /&gt; refer to the same object instance or if both are &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="x" /> と <paramref name="y" /> の両方が同じオブジェクト インスタンスを参照している場合、または両方が <see langword="null" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.ReferenceEqualityComparer.GetHashCode(System.Object)">
      <summary vsli:raw="Returns a hash code for the specified object. The returned hash code is based on the object identity, not on the contents of the object.">指定したオブジェクトのハッシュ コードを返します。 返されるハッシュ コードは、オブジェクトの内容ではなく、オブジェクト ID に基づいています。</summary>
      <param name="obj" vsli:raw="The object for which to retrieve the hash code.">ハッシュ コードを取得する対象のオブジェクト。</param>
      <returns vsli:raw="A hash code for the identity of &lt;paramref name=&quot;obj&quot; /&gt;.">
        <paramref name="obj" /> の ID のハッシュ コード。</returns>
    </member>
    <member name="P:System.Collections.Generic.ReferenceEqualityComparer.Instance">
      <summary vsli:raw="Gets the singleton &lt;see cref=&quot;T:System.Collections.Generic.ReferenceEqualityComparer&quot; /&gt; instance.">シングルトン <see cref="T:System.Collections.Generic.ReferenceEqualityComparer" /> インスタンスを取得します。</summary>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2">
      <summary vsli:raw="Represents a collection of key/value pairs that are sorted on the key.">キーに基づいて並べ替えられた、キーと値のペアのコレクションを表します。</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">ディクショナリ内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">ディクショナリ内の値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that is empty and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation for the key type.">空で、キーの型の既定の <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 実装を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that is empty and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to compare keys.">空で、指定した <see cref="T:System.Collections.Generic.SortedDictionary`2" /> を使用してキーを比較する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。キーの型の既定の <see langword="null" /> を使用する場合は <see cref="T:System.Collections.Generic.Comparer`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation for the key type.">指定した <see cref="T:System.Collections.Generic.SortedDictionary`2" /> から要素をコピーして格納し、キーの型の既定の <see cref="T:System.Collections.Generic.IDictionary`2" /> 実装を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> には 1 つまたは複数の重複するキーが含まれます。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to compare keys.">指定した <see cref="T:System.Collections.Generic.SortedDictionary`2" /> から要素をコピーして格納し、指定した <see cref="T:System.Collections.Generic.IDictionary`2" /> 実装を使用してキーを比較する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys, or &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> 実装。キーの型の既定の <see langword="null" /> を使用する場合は <see cref="T:System.Collections.Generic.Comparer`1" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> には 1 つまたは複数の重複するキーが含まれます。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value into the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">指定したキーおよび値を持つ要素を <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に追加します。</summary>
      <param name="key" vsli:raw="The key of the element to add.">追加する要素のキー。</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">追加する要素の値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> からすべての要素を削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified key.">指定したキーの要素が <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されているかどうかを確認します。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedDictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified value.">指定した値の要素が <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されているかどうかを確認します。</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内で検索される値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値を持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedDictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; to the specified array of &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structures, starting at the specified index.">指定したインデックスを開始位置として、指定した <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 構造体の配列に <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array of &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structures that is the destination of the elements copied from the current &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; The array must have zero-based indexing.">現在の <see cref="T:System.Collections.Generic.KeyValuePair`2" /> からコピーされる要素のコピー先である <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 構造体の 1 次元配列。この配列には、0 から始まるインデックスを使用する必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">コピー元の <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> の <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">指定したキーを持つ要素を <see cref="T:System.Collections.Generic.SortedDictionary`2" /> から削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、<see langword="false" /> が <paramref name="key" /> に見つからない場合にも <see cref="T:System.Collections.Generic.SortedDictionary`2" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> に追加する <see cref="T:System.Collections.Generic.ICollection`1" /> 構造体。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;keyValuePair&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyValuePair" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific key and value.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に特定のキーと値が格納されているかどうかを判断します。</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 内で検索される <see cref="T:System.Collections.Generic.ICollection`1" /> 構造体。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <paramref name="keyValuePair" /> に存在する場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of the specified element from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で最初に見つかった指定の要素を削除します。</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; structure to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> から削除する <see cref="T:System.Collections.Generic.ICollection`1" /> 構造体。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" /> が <paramref name="keyValuePair" /> から正常に削除された場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。 このメソッドは、<see langword="false" /> が <paramref name="keyValuePair" /> に見つからなかった場合にも <see cref="T:System.Collections.Generic.ICollection`1" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an array, starting at the specified array index.">指定した配列インデックスを開始位置として、配列に <see cref="T:System.Collections.Generic.ICollection`1" /> の要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。  
  
- または - 
 <paramref name="array" /> には、0 から始まるインデックス番号がありません。  
  
- または - 
コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。  
  
- または - 
コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">指定したキーおよび値を持つ要素を <see cref="T:System.Collections.IDictionary" /> オブジェクトに追加します。</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">追加する要素のキーとして使用するオブジェクト。</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">追加する要素の値として使用するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <paramref name="key" /> が、<see cref="T:System.Collections.IDictionary" /> のキーの型 <paramref name="TKey" /> に代入できない型です。  
  
- または - 
 <paramref name="value" /> が、<see cref="T:System.Collections.IDictionary" /> の値型 <paramref name="TValue" /> に代入できない型です。  
  
- または - 
同じキーを持つ要素が、<see cref="T:System.Collections.IDictionary" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">指定したキーの要素が <see cref="T:System.Collections.IDictionary" /> に格納されているかどうかを確認します。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> 内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素を <see langword="true" /> が保持している場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" /> を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> から削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">指定したキーに関連付けられている値を取得します。</summary>
      <param name="key" vsli:raw="The key of the value to get.">取得する値のキー。</param>
      <param name="value" vsli:raw="When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定の値。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedDictionary`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; used to order the elements of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IComparer`1" /> の要素の順序付けに使用する <see cref="T:System.Collections.Generic.SortedDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; used to order the elements of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;">
        <see cref="T:System.Collections.Generic.IComparer`1" /> の要素の順序付けに使用する <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されているキー/値ペアの数を取得します。</summary>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に格納されているキー/値ペアの数。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">指定されたキーに関連付けられている値を取得または設定します。</summary>
      <param name="key" vsli:raw="The key of the value to get or set.">取得または設定する値のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">プロパティが取得され、<paramref name="key" /> がコレクションに存在しません。</exception>
      <returns vsli:raw="The value associated with the specified key. If the specified key is not found, a get operation throws a &lt;see cref=&quot;T:System.Collections.Generic.KeyNotFoundException&quot; /&gt;, and a set operation creates a new element with the specified key.">指定されたキーに関連付けられている値。 指定したキーが見つからなかった場合、get 操作は <see cref="T:System.Collections.Generic.KeyNotFoundException" /> をスローし、set 操作は指定したキーを持つ新しい要素を作成します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内のキーを格納しているコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 内のキーを格納している <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内のキーを格納しているコレクションを取得します。</summary>
      <returns vsli:raw="A collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> のキーを格納しているコレクション。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内の値を格納しているコレクションを取得します。</summary>
      <returns vsli:raw="A collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">内の値を格納しているコレクション <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトです。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IDictionary" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.IDictionary" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key" vsli:raw="The key of the element to get.">取得する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value is being assigned, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">値を代入しようとしていますが、<paramref name="key" /> は、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> のキーの型 <paramref name="TKey" /> に代入できない型です。  
  
- または - 
値を代入しようとしていますが、<paramref name="value" /> は、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> の値の型 <paramref name="TValue" /> に代入できない型です。</exception>
      <returns vsli:raw="The element with the specified key, or &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">指定したキーを持つ要素。<see langword="null" /> がディクショナリに存在しない場合、または <paramref name="key" /> が <paramref name="key" /> のキーの型 <paramref name="TKey" /> に代入できない型である場合は <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内の値を格納しているコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 内の値を格納している <see cref="T:System.Collections.Generic.SortedDictionary`2" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の要素を列挙します。</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">列挙子を <see cref="T:System.Collections.Generic.SortedDictionary`2" /> の次の要素に進めます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Entry">
      <summary vsli:raw="Gets the element at the current position of the enumerator as a &lt;see cref=&quot;T:System.Collections.DictionaryEntry&quot; /&gt; structure.">列挙子の現在位置の要素を <see cref="T:System.Collections.DictionaryEntry" /> 構造体として取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the collection at the current position of the dictionary, as a &lt;see cref=&quot;T:System.Collections.DictionaryEntry&quot; /&gt; structure.">
        <see cref="T:System.Collections.DictionaryEntry" /> 構造体としての、ディクショナリの現在の位置にあるコレクション内の要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Key">
      <summary vsli:raw="Gets the key of the element at the current position of the enumerator.">列挙子の現在位置の要素のキーを取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The key of the element in the collection at the current position of the enumerator.">コレクション内の列挙子の現在位置にある要素のキー。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IDictionaryEnumerator#Value">
      <summary vsli:raw="Gets the value of the element at the current position of the enumerator.">列挙子の現在位置の要素の値を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The value of the element in the collection at the current position of the enumerator.">コレクション内の列挙子の現在位置にある要素の値。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection">
      <summary vsli:raw="Represents the collection of keys in a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;. This class cannot be inherited.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内のキーのコレクションを表します。 このクラスは継承できません。</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; class that reflects the keys in the specified &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">指定した <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> 内のキーを反映する、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; whose keys are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.SortedDictionary`2" /> にキーが反映される <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; elements to an existing one-dimensional array, starting at the specified array index.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の要素を既存の 1 次元の配列にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">コピー元の <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator&quot; /&gt; structure for the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> 構造体。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Add(`0)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。  この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">常にスローされます。コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> からすべての項目を削除します。  この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">常にスローされます。コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Contains(`0)">
      <summary>指定した値が <see cref="T:System.Collections.Generic.ICollection`1" /> に含まれているかどうかを示します。</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索するオブジェクト。</param>
      <returns>
        <see langword="true" /> で項目が見つかった場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#Remove(`0)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.  This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">特定のオブジェクトが <see cref="T:System.Collections.Generic.ICollection`1" /> 内にあるときに、最初に出現したものを削除します。  この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">常にスローされます。コレクションは読み取り専用です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item is successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if item is not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">項目が <see cref="T:System.Collections.Generic.ICollection`1" /> から正常に削除された場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。 このメソッドは、項目が <see cref="T:System.Collections.Generic.ICollection`1" /> に見つからない場合にも <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#IEnumerable{TKey}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an array, starting at a particular array index.">特定の配列インデックスを開始位置として、配列に <see cref="T:System.Collections.ICollection" /> の要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.ICollection" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。  
  
- または - 
 <paramref name="array" /> には、0 から始まるインデックス番号がありません。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> に格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#Generic#ICollection{TKey}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトです。  <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の要素を列挙します。</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt;.">列挙子を <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> の次の要素に進めます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.KeyCollection&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.KeyCollection" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.KeyCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection">
      <summary vsli:raw="Represents the collection of values in a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;. This class cannot be inherited.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2" /> 内の値のコレクションを表します。 このクラスは継承できません。</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.#ctor(System.Collections.Generic.SortedDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; class that reflects the values in the specified &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt;.">指定した <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> 内の値を反映する、<see cref="T:System.Collections.Generic.SortedDictionary`2" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2&quot; /&gt; whose values are reflected in the new &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.SortedDictionary`2" /> に値が反映される <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.CopyTo(`1[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; elements to an existing one-dimensional array, starting at the specified array index.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の要素を既存の 1 次元の配列にコピーします。コピー操作は、配列内の指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">コピー元の <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator&quot; /&gt; structure for the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> 構造体。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Add(`1)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に項目を追加します。 この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">常にスローされます。コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> からすべての項目を削除します。 この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">常にスローされます。コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Contains(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specified value.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に指定された値が含まれているかどうかを判断します。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#Remove(`1)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. This implementation always throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">特定のオブジェクトが <see cref="T:System.Collections.Generic.ICollection`1" /> 内にあるときに、最初に出現したものを削除します。 この実装は常に <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="item" vsli:raw="The object to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> から削除するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Always thrown; the collection is read-only.">常にスローされます。コレクションは読み取り専用です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is not found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <paramref name="item" /> が <see cref="T:System.Collections.Generic.ICollection`1" /> から正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このメソッドは、<see langword="false" /> が <paramref name="item" /> に見つからない場合にも <see cref="T:System.Collections.Generic.ICollection`1" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#IEnumerable{TValue}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an array, starting at a particular array index.">特定の配列インデックスを開始位置として、配列に <see cref="T:System.Collections.ICollection" /> の要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.ICollection" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。  
  
- または - 
 <paramref name="array" /> には、0 から始まるインデックス番号がありません。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="index" /> から最後までの使用可能領域を超えています。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> に格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#Generic#ICollection{TValue}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトです。  <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の要素を列挙します。</summary>
      <typeparam name="TKey" vsli:raw="" />
      <typeparam name="TValue" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt;.">列挙子を <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> の次の要素に進めます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.SortedDictionary`2.ValueCollection&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.SortedDictionary`2.ValueCollection" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedDictionary`2.ValueCollection.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedList`2">
      <summary vsli:raw="Represents a collection of key/value pairs that are sorted by key based on the associated &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation.">関連付けられた <see cref="T:System.Collections.Generic.IComparer`1" /> 実装に基づいて、キーにより並べ替えられた、キーと値のペアのコレクションを表します。</summary>
      <typeparam name="TKey" vsli:raw="The type of keys in the collection.">コレクション内のキーの型。</typeparam>
      <typeparam name="TValue" vsli:raw="The type of values in the collection.">コレクション内の値の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">空で、既定の初期量を備え、既定の <see cref="T:System.Collections.Generic.SortedList`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the default initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">空で、既定の初期量を備え、指定した <see cref="T:System.Collections.Generic.SortedList`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。  
  
- または - 
 キーの型に既定の <see cref="T:System.Collections.Generic.Comparer`1" /> を使用する場合は <see langword="null" />。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, has sufficient capacity to accommodate the number of elements copied, and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">指定した <see cref="T:System.Collections.Generic.SortedList`2" /> からコピーした要素を格納し、コピーした要素の数を格納できるだけの容量を備え、既定の <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.SortedList`2" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> には 1 つまたは複数の重複するキーが含まれます。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Collections.Generic.IDictionary{`0,`1},System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;, has sufficient capacity to accommodate the number of elements copied, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">指定した <see cref="T:System.Collections.Generic.SortedList`2" /> からコピーした要素を格納し、コピーした要素の数を格納できるだけの容量を備え、指定した <see cref="T:System.Collections.Generic.IDictionary`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dictionary" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">新しい <see cref="T:System.Collections.Generic.IDictionary`2" /> に要素がコピーされた <see cref="T:System.Collections.Generic.SortedList`2" />。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。  
  
- または - 
 キーの型に既定の <see cref="T:System.Collections.Generic.Comparer`1" /> を使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dictionary" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;dictionary&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="dictionary" /> には 1 つまたは複数の重複するキーが含まれます。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the default &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">空で、指定した初期量を備え、既定の <see cref="T:System.Collections.Generic.SortedList`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> が格納できる要素数の初期値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.#ctor(System.Int32,System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; class that is empty, has the specified initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt;.">空で、指定した初期量を備え、指定した <see cref="T:System.Collections.Generic.SortedList`2" /> を使用する、<see cref="T:System.Collections.Generic.IComparer`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> が格納できる要素数の初期値。</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; implementation to use when comparing keys.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default &lt;see cref=&quot;T:System.Collections.Generic.Comparer`1&quot; /&gt; for the type of the key.">キーの比較時に使用する <see cref="T:System.Collections.Generic.IComparer`1" /> の実装。  
  
- または - 
 キーの型に既定の <see cref="T:System.Collections.Generic.Comparer`1" /> を使用する場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Add(`0,`1)">
      <summary vsli:raw="Adds an element with the specified key and value into the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">指定したキーおよび値を持つ要素を <see cref="T:System.Collections.Generic.SortedList`2" /> に追加します。</summary>
      <param name="key" vsli:raw="The key of the element to add.">追加する要素のキー。</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">追加する要素の値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">同じキーを持つ要素が、<see cref="T:System.Collections.Generic.SortedList`2" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> からすべての要素を削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains a specific key.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> に特定のキーが格納されているかどうかを判断します。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedList`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.ContainsValue(`1)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains a specific value.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 内で検索される値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains an element with the specified value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値を持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedList`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; of type &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> の <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 型の <see cref="T:System.Collections.Generic.SortedList`2" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfKey(`0)">
      <summary vsli:raw="Searches for the specified key and returns the zero-based index within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">指定したキーを検索し、<see cref="T:System.Collections.Generic.SortedList`2" /> 全体内でそのキーが見つかった位置の 0 から始まるインデックスを返します。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The zero-based index of &lt;paramref name=&quot;key&quot; /&gt; within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, if found; otherwise, -1.">
        <paramref name="key" /> 全体内で <see cref="T:System.Collections.Generic.SortedList`2" /> が見つかった場合は、見つかった位置の 0 から始まるインデックス番号。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.IndexOfValue(`1)">
      <summary vsli:raw="Searches for the specified value and returns the zero-based index of the first occurrence within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">指定した値を検索し、<see cref="T:System.Collections.Generic.SortedList`2" /> 全体内で最初に見つかった位置の 0 から始まるインデックスを返します。</summary>
      <param name="value" vsli:raw="The value to locate in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.  The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 内で検索される値。  参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="The zero-based index of the first occurrence of &lt;paramref name=&quot;value&quot; /&gt; within the entire &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, if found; otherwise, -1.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 全体を対象に <paramref name="value" /> を検索し、見つかった場合は、インデックス番号の最も小さい要素の 0 から始まるインデックス番号、それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">指定したキーを持つ要素を <see cref="T:System.Collections.Generic.SortedList`2" /> から削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">要素が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  このメソッドは、元の <see langword="false" /> で <paramref name="key" /> が見つからなかった場合にも <see cref="T:System.Collections.Generic.SortedList`2" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> の指定したインデックスにある要素を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">削除する要素の、0 から始まるインデックス番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.Collections.Generic.SortedList`2.Count&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <see cref="P:System.Collections.Generic.SortedList`2.Count" /> 以上になっています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に、キー/値ペアを追加します。</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> に追加する <see cref="T:System.Collections.Generic.ICollection`1" />。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains a specific element.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> に特定の要素が格納されているかどうかを判断します。</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で検索される <see cref="T:System.Collections.Generic.KeyValuePair`2" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <paramref name="keyValuePair" /> に存在する場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.ICollection`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">コピー元の <see cref="T:System.Collections.Generic.ICollection`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the first occurrence of a specific key/value pair from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内で最初に見つかった特定のキー/値ペアを削除します。</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" /> から削除する <see cref="T:System.Collections.Generic.ICollection`1" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was successfully removed from the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;keyValuePair&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" /> が <paramref name="keyValuePair" /> から正常に削除された場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。 このメソッドは、元の <see langword="false" /> で <paramref name="keyValuePair" /> が見つからなかった場合にも <see cref="T:System.Collections.Generic.ICollection`1" /> を返します。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。  
  
- または - 
 <paramref name="array" /> には、0 から始まるインデックス番号がありません。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">指定したキーおよび値を持つ要素を <see cref="T:System.Collections.IDictionary" /> オブジェクトに追加します。</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the key of the element to add.">追加する要素のキーとして使用する <see cref="T:System.Object" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the value of the element to add.">追加する要素の値として使用する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <paramref name="key" /> が、<see cref="T:System.Collections.IDictionary" /> のキーの型 <paramref name="TKey" /> に代入できない型です。  
  
- または - 
 <paramref name="value" /> が、<see cref="T:System.Collections.IDictionary" /> の値型 <paramref name="TValue" /> に代入できない型です。  
  
- または - 
同じキーを持つ要素が、<see cref="T:System.Collections.IDictionary" /> に既に存在します。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">指定したキーの要素が <see cref="T:System.Collections.IDictionary" /> に格納されているかどうかを確認します。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> 内で検索されるキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素を <see langword="true" /> が保持している場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" /> を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionaryEnumerator" /> の <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> から削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, if that number is less than 90 percent of current capacity.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedList`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Gets the value associated with the specified key.">指定したキーに関連付けられている値を取得します。</summary>
      <param name="key" vsli:raw="The key whose value to get.">値を取得する対象のキー。</param>
      <param name="value" vsli:raw="When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the &lt;paramref name=&quot;value&quot; /&gt; parameter. This parameter is passed uninitialized.">このメソッドが返されるときに、キーが見つかった場合は、指定したキーに関連付けられている値。それ以外の場合は <paramref name="value" /> パラメーターの型に対する既定の値。 このパラメーターは初期化せずに渡されます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素が <see langword="true" /> に格納されている場合は <see cref="T:System.Collections.Generic.SortedList`2" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Capacity">
      <summary vsli:raw="Gets or sets the number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> に格納できる要素の数を取得または設定します。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;see cref=&quot;P:System.Collections.Generic.SortedList`2.Capacity&quot; /&gt; is set to a value that is less than &lt;see cref=&quot;P:System.Collections.Generic.SortedList`2.Count&quot; /&gt;.">
        <see cref="P:System.Collections.Generic.SortedList`2.Capacity" /> は <see cref="P:System.Collections.Generic.SortedList`2.Count" /> より小さい値に設定されます。</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is not enough memory available on the system.">システムで使用可能なメモリが不足しています。</exception>
      <returns vsli:raw="The number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> に格納できる要素の数。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; for the sorted list.">並べ替えられたリストの <see cref="T:System.Collections.Generic.IComparer`1" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IComparable`1&quot; /&gt; for the current &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">現在の <see cref="T:System.IComparable`1" /> の <see cref="T:System.Collections.Generic.SortedList`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> に格納されているキー/値ペアの数を取得します。</summary>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> に格納されているキー/値ペアの数。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">指定されたキーに関連付けられている値を取得または設定します。</summary>
      <param name="key" vsli:raw="The key whose value to get or set.">値を取得または設定する対象のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">プロパティが取得され、<paramref name="key" /> がコレクションに存在しません。</exception>
      <returns vsli:raw="The value associated with the specified key. If the specified key is not found, a get operation throws a &lt;see cref=&quot;T:System.Collections.Generic.KeyNotFoundException&quot; /&gt; and a set operation creates a new element using the specified key.">指定されたキーに関連付けられている値。 指定したキーが見つからなかった場合、get 操作は <see cref="T:System.Collections.Generic.KeyNotFoundException" /> をスローし、set 操作は指定したキーを使用して新しい要素を作成します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, in sorted order.">並べ替えられた順序で、<see cref="T:System.Collections.Generic.SortedList`2" /> 内のキーを含むコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IList`1" /> 内のキーを格納している <see cref="T:System.Collections.Generic.SortedList`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.Generic.ICollection`1" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.Collections.Generic.SortedList`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> のキーを保持している <see cref="T:System.Collections.Generic.IDictionary`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.IDictionary`2" /> を取得します。</summary>
      <returns vsli:raw="An object containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">内の値を格納しているオブジェクト <see cref="T:System.Collections.Generic.IDictionary`2" /> 。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets an enumerable collection that contains the keys in the read-only dictionary.">読み取り専用のディクショナリのキーを含む列挙可能なコレクションを取得します。</summary>
      <returns vsli:raw="An enumerable collection that contains the keys in the read-only dictionary.">読み取り専用のディクショナリのキーを含む列挙可能なコレクション。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets an enumerable collection that contains the values in the read-only dictionary.">読み取り専用のディクショナリの値を含む列挙可能なコレクションを取得します。</summary>
      <returns vsli:raw="An enumerable collection that contains the values in the read-only dictionary.">読み取り専用のディクショナリの値を含む列挙可能なコレクション。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedList`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトです。  <see cref="T:System.Collections.Generic.SortedList`2" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IDictionary" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedList`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.IDictionary" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.SortedList`2" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key" vsli:raw="The key of the element to get or set.">取得または設定する要素のキー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A value is being assigned, and &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the value type &lt;paramref name=&quot;TValue&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">値を代入しようとしていますが、<paramref name="key" /> は、<see cref="T:System.Collections.Generic.SortedList`2" /> のキーの型 <paramref name="TKey" /> に代入できない型です。  
  
- または - 
値を代入しようとしていますが、<paramref name="value" /> は、<see cref="T:System.Collections.Generic.SortedList`2" /> の値の型 <paramref name="TValue" /> に代入できない型です。</exception>
      <returns vsli:raw="The element with the specified key, or &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type &lt;paramref name=&quot;TKey&quot; /&gt; of the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">指定したキーを持つ要素。<see langword="null" /> がディクショナリに存在しない場合、または <paramref name="key" /> が <paramref name="key" /> のキーの型 <paramref name="TKey" /> に代入できない型である場合は <see cref="T:System.Collections.Generic.SortedList`2" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedList`2.Values">
      <summary vsli:raw="Gets a collection containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedList`2" /> 内の値を格納しているコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedList`2&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IList`1" /> 内の値を格納している <see cref="T:System.Collections.Generic.SortedList`2" />。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1">
      <summary vsli:raw="Represents a collection of objects that is maintained in sorted order.">一定の並べ替え順序で管理されたオブジェクトのコレクションを表します。</summary>
      <typeparam name="T" vsli:raw="The type of elements in the set.">セット内の要素の型。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that uses a specified comparer.">指定された比較子を使用する <see cref="T:System.Collections.Generic.SortedSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comparer" vsli:raw="The default comparer to use for comparing objects.">オブジェクトの比較に使用する既定の比較子。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that contains elements copied from a specified enumerable collection.">指定の列挙可能なコレクションからコピーされた要素を格納する、<see cref="T:System.Collections.Generic.SortedSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The enumerable collection to be copied.">コピーする列挙可能なコレクション。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that contains elements copied from a specified enumerable collection and that uses a specified comparer.">指定の列挙可能なコレクションからコピーされた要素を格納し、指定された比較子を使用する、<see cref="T:System.Collections.Generic.SortedSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The enumerable collection to be copied.">コピーする列挙可能なコレクション。</param>
      <param name="comparer" vsli:raw="The default comparer to use for comparing objects.">オブジェクトの比較に使用する既定の比較子。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; class that contains serialized data.">シリアル化したデータを格納する、<see cref="T:System.Collections.Generic.SortedSet`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The object that contains the information that is required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトをシリアル化するために必要な情報を格納しているオブジェクト。</param>
      <param name="context" vsli:raw="The structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトに関連付けられているシリアル化ストリームの転送元および転送先を格納する構造体。</param>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Add(`0)">
      <summary vsli:raw="Adds an element to the set and returns a value that indicates if it was successfully added.">要素をセットに追加し、正常に追加されたかどうかを示す値を返します。</summary>
      <param name="item" vsli:raw="The element to add to the set.">セットに追加する要素。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is added to the set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="item" /> がセットに追加された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Clear">
      <summary vsli:raw="Removes all elements from the set.">すべての要素をセットから削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Contains(`0)">
      <summary vsli:raw="Determines whether the set contains a specific element.">セットに特定の要素が含まれているかどうかを判断します。</summary>
      <param name="item" vsli:raw="The element to locate in the set.">セット内で検索する要素。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set contains &lt;paramref name=&quot;item&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">セットに <paramref name="item" /> が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[])">
      <summary vsli:raw="Copies the complete &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the beginning of the target array.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 全体を互換性のある 1 次元の配列にコピーします。コピー操作は、コピー先の配列の先頭から始まります。</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> から要素がコピーされる 1 次元配列。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; exceeds the number of elements that the destination array can contain.">コピー元の <see cref="T:System.Collections.Generic.SortedSet`1" /> の要素数が、コピー先の配列に格納できる要素の数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the complete &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified array index.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 全体を互換性のある 1 次元配列にコピーします。コピー操作は、配列の指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source array is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination array.">コピー元の配列の要素数が、<paramref name="index" /> からコピー先の配列の末尾までに格納できる数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CopyTo(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies a specified number of elements from &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified array index.">指定された数の要素を <see cref="T:System.Collections.Generic.SortedSet`1" /> から互換性のある 1 次元配列にコピーします。コピー操作は、指定された配列インデックスから始まります。</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <param name="count" vsli:raw="The number of elements to copy.">コピーする要素の数。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source array is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination array.">コピー元の配列の要素数が、<paramref name="index" /> からコピー先の配列の末尾までに格納できる数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="count" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object that can be used to create a collection that contains individual sets.">個々のセットを含んだコレクションを作成する際に使用できる <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトを返します。</summary>
      <returns vsli:raw="A comparer for creating a collection of sets.">セットのコレクションを作成するための比較子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.CreateSetComparer(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEqualityComparer&quot; /&gt; object, according to a specified comparer, that can be used to create a collection that contains individual sets.">個々のセットを含んだコレクションを作成する際に使用できる <see cref="T:System.Collections.IEqualityComparer" /> オブジェクトを、指定された比較子に従って返します。</summary>
      <param name="memberEqualityComparer" vsli:raw="The comparer to use for creating the returned comparer.">戻り値となる比較子の作成に使用する比較子。</param>
      <returns vsli:raw="A comparer for creating a collection of sets.">セットのコレクションを作成するための比較子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.ExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Removes all elements that are in a specified collection from the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトから、指定されたコレクションに含まれる要素をすべて削除します。</summary>
      <param name="other" vsli:raw="The collection of items to remove from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトから削除する項目のコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> を反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; in sorted order.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> をソートされた順序で反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data that you must have to serialize a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトをシリアル化するために必要なデータを返します。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information that is required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトをシリアル化するために必要な情報を格納する <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクト。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> 構造体。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.GetViewBetween(`0,`0)">
      <summary vsli:raw="Returns a view of a subset in a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 内のサブセットのビューを返します。</summary>
      <param name="lowerValue" vsli:raw="The lowest desired value in the view.">目的のビューの範囲の最小値。</param>
      <param name="upperValue" vsli:raw="The highest desired value in the view.">目的のビューの範囲の最大値。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;lowerValue&quot; /&gt; is more than &lt;paramref name=&quot;upperValue&quot; /&gt; according to the comparer.">比較子に照らすと、<paramref name="lowerValue" /> が <paramref name="upperValue" /> を超えています。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="A tried operation on the view was outside the range specified by &lt;paramref name=&quot;lowerValue&quot; /&gt; and &lt;paramref name=&quot;upperValue&quot; /&gt;.">ビューで試行された操作が、<paramref name="lowerValue" /> および <paramref name="upperValue" /> で指定された範囲外です。</exception>
      <returns vsli:raw="A subset view that contains only the values in the specified range.">指定された範囲の値だけを含むサブセット ビュー。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IntersectWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object so that it contains only elements that are also in a specified collection.">指定されたコレクションに存在する要素だけが含まれるように現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトを変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper subset of the specified collection.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが、指定されたコレクションの真のサブセット (真部分集合) であるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> の真のサブセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsProperSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper superset of the specified collection.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが、指定されたコレクションの真のスーパーセット (真上位集合) であるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a proper superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> の真のスーパーセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSubsetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a subset of the specified collection.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが、指定されたコレクションのサブセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a subset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> のサブセットの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.IsSupersetOf(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a superset of the specified collection.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが、指定されたコレクションのスーパーセットであるかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is a superset of &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> のスーパーセットである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface, and raises the deserialization event when the deserialization is completed.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is invalid.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Overlaps(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object and a specified collection share common elements.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと指定されたコレクションとが共通の要素を共有しているかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object and &lt;paramref name=&quot;other&quot; /&gt; share at least one common element; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと <paramref name="other" /> との間に共通する要素が 1 つでも存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Remove(`0)">
      <summary vsli:raw="Removes a specified item from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">指定した項目を <see cref="T:System.Collections.Generic.SortedSet`1" /> から削除します。</summary>
      <param name="item" vsli:raw="The element to remove.">削除する要素。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is found and successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">要素が見つかり、正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.RemoveWhere(System.Predicate{`0})">
      <summary vsli:raw="Removes all elements that match the conditions defined by the specified predicate from a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">指定の述語によって定義された条件に一致するすべての要素を <see cref="T:System.Collections.Generic.SortedSet`1" /> から削除します。</summary>
      <param name="match" vsli:raw="The delegate that defines the conditions of the elements to remove.">削除する要素の条件を定義するデリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;match&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="match" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The number of elements that were removed from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; collection.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> コレクションから削除された要素数。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Reverse">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that iterates over the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; in reverse order.">
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> を逆順で反復処理する <see cref="T:System.Collections.Generic.SortedSet`1" /> を返します。</summary>
      <returns vsli:raw="An enumerator that iterates over the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; in reverse order.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> を逆順で反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SetEquals(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object and the specified collection contain the same elements.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと指定されたコレクションに同じ要素が存在するかどうかを判断します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object is equal to &lt;paramref name=&quot;other&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトが <paramref name="other" /> に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.SymmetricExceptWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object so that it contains only elements that are present either in the current object or in the specified collection, but not both.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトを、そのオブジェクトと指定されたコレクションの (両方に存在するのではなく) どちらか一方に存在する要素だけが格納されるように変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <summary vsli:raw="Adds an item to an &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトに項目を追加します。</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> オブジェクトに追加するオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.Generic.ICollection`1" /> は読み取り専用です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the complete &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; to a compatible one-dimensional array, starting at the specified array index.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> 全体を互換性のある 1 次元配列にコピーします。コピー操作は、配列の指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="A one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> から要素がコピーされる 1 次元配列。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source array is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination array.">コピー元の配列の要素数が、<paramref name="index" /> からコピー先の配列の末尾までに格納できる数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that can be used to iterate through the collection.">コレクションの反復処理に使用できる列挙子。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.IDeserializationCallback&quot; /&gt; interface, and raises the deserialization event when the deserialization is completed.">
        <see cref="T:System.Runtime.Serialization.IDeserializationCallback" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance is invalid.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスに関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface, and returns the data that you need to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスをシリアル化するために必要なデータを返します。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information that is required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクト。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; structure that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> 構造体。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.TryGetValue(`0,`0@)">
      <summary vsli:raw="Searches the set for a given value and returns the equal value it finds, if any.">指定された値をセットで検索し、見つかった場合は同じ値を返します。</summary>
      <param name="equalValue" vsli:raw="The value to search for.">検索する値。</param>
      <param name="actualValue" vsli:raw="The value from the set that the search found, or the default value of T when the search yielded no match.">セット内の検索で見つかった値。検索で一致するものがなかった場合は、既定の T の値。</param>
      <returns vsli:raw="A value indicating whether the search was successful.">検索が成功したかどうかを示す値。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.UnionWith(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Modifies the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object so that it contains all elements that are present in either the current object or the specified collection.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトを、現在のオブジェクトまたは指定したコレクションのいずれかに存在するすべての要素が格納されるように変更します。</summary>
      <param name="other" vsli:raw="The collection to compare to the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトと比較するコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;other&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="other" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Comparer">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Collections.Generic.IComparer`1&quot; /&gt; object that is used to order the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> の中の値を順序付けするために使用する <see cref="T:System.Collections.Generic.IComparer`1" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="The comparer that is used to order the values in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> の中の値を順序付けするために使用する比較演算子。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Count">
      <summary vsli:raw="Gets the number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> にある要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> にある要素の数。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Max">
      <summary vsli:raw="Gets the maximum value in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;, as defined by the comparer.">比較子によって定義された、<see cref="T:System.Collections.Generic.SortedSet`1" /> 内の最大値を取得します。</summary>
      <returns vsli:raw="The maximum value in the set.">セット内の最大値。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Min">
      <summary vsli:raw="Gets the minimum value in the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt;, as defined by the comparer.">比較子によって定義された、<see cref="T:System.Collections.Generic.SortedSet`1" /> 内の最小値を取得します。</summary>
      <returns vsli:raw="The minimum value in the set.">セット内の最小値。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether a &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.ICollection" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されるかどうか (スレッド セーフかどうか) を示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期される場合は <see langword="true" />、同期されない場合は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2.KeyCollection&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトです。 <see cref="T:System.Collections.Generic.Dictionary`2.KeyCollection" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="T:System.Collections.Generic.SortedSet`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; object.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクトの要素を列挙します。</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.SortedSet`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; collection.">列挙子を <see cref="T:System.Collections.Generic.SortedSet`1" /> コレクションの次の要素に進めます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and raises the deserialization event when the deserialization is complete.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、逆シリアル化が完了したときに逆シリアル化イベントを発生させます。</summary>
      <param name="sender" vsli:raw="The source of the deserialization event.">逆シリアル化イベントのソース。</param>
      <exception cref="T:System.Runtime.Serialization.SerializationException" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object associated with the current &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance is invalid.">現在の <see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスに関連付けられている <see cref="T:System.Runtime.Serialization.SerializationInfo" /> オブジェクトが無効です。</exception>
    </member>
    <member name="M:System.Collections.Generic.SortedSet`1.Enumerator.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Implements the &lt;see cref=&quot;T:System.Runtime.Serialization.ISerializable&quot; /&gt; interface and returns the data needed to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.ISerializable" /> インターフェイスを実装し、<see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスをシリアル化するために必要なデータを返します。</summary>
      <param name="info" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that contains the information required to serialize the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> インスタンスをシリアル化するために必要な情報を格納する <see cref="T:System.Collections.Generic.SortedSet`1" /> オブジェクト。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that contains the source and destination of the serialized stream associated with the &lt;see cref=&quot;T:System.Collections.Generic.SortedSet`1&quot; /&gt; instance.">
        <see cref="T:System.Collections.Generic.SortedSet`1" /> インスタンスに関連付けられているシリアル化ストリームの転送元および転送先を格納する <see cref="T:System.Runtime.Serialization.StreamingContext" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.SortedSet`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="T:System.Collections.Generic.Stack`1">
      <summary vsli:raw="Represents a variable size last-in-first-out (LIFO) collection of instances of the same specified type.">指定した同じ型のインスタンスの、後入れ先出し (LIFO) の可変サイズのコレクションを表します。</summary>
      <typeparam name="T" vsli:raw="Specifies the type of elements in the stack.">スタック内の要素の型を指定します。</typeparam>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; class that is empty and has the default initial capacity.">空で、既定の初期量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; class that contains elements copied from the specified collection and has sufficient capacity to accommodate the number of elements copied.">指定したコレクションからコピーした要素を格納し、コピーされる要素の数を格納できるだけの容量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="collection" vsli:raw="The collection to copy elements from.">要素のコピー元のコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; class that is empty and has the specified initial capacity or the default initial capacity, whichever is greater.">空で、指定した初期量または既定の初期量のうち大きい方の初期量を備えた、<see cref="T:System.Collections.Generic.Stack`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; can contain.">
        <see cref="T:System.Collections.Generic.Stack`1" /> が格納できる要素数の初期値。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="capacity" /> が 0 未満です。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Clear">
      <summary vsli:raw="Removes all objects from the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" /> からすべてのオブジェクトを削除します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Contains(`0)">
      <summary vsli:raw="Determines whether an element is in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">ある要素が <see cref="T:System.Collections.Generic.Stack`1" /> 内に存在するかどうかを判断します。</summary>
      <param name="item" vsli:raw="The object to locate in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.Stack`1" /> 内で検索するオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; is found in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <paramref name="item" /> に存在する場合は <see cref="T:System.Collections.Generic.Stack`1" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">
        <see cref="T:System.Collections.Generic.Stack`1" /> を既存の 1 次元 <see cref="T:System.Array" /> に、指定の配列インデックスを開始位置としてコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.Generic.Stack`1" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The number of elements in the source &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">コピー元の <see cref="T:System.Collections.Generic.Stack`1" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" /> の列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.Stack`1.Enumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> の <see cref="T:System.Collections.Generic.Stack`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Peek">
      <summary vsli:raw="Returns the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; without removing it.">
        <see cref="T:System.Collections.Generic.Stack`1" /> の先頭にあるオブジェクトを削除せずに返します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Generic.Stack`1" /> が空です。</exception>
      <returns vsli:raw="The object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" /> の一番上にあるオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Pop">
      <summary vsli:raw="Removes and returns the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" /> の先頭にあるオブジェクトを削除し、返します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is empty.">
        <see cref="T:System.Collections.Generic.Stack`1" /> が空です。</exception>
      <returns vsli:raw="The object removed from the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" /> の一番上から削除されたオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" /> の先頭にオブジェクトを挿入します。</summary>
      <param name="item" vsli:raw="The object to push onto the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">
        <see cref="T:System.Collections.Generic.Stack`1" /> にプッシュするオブジェクト。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.Generic.IEnumerator`1" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;arrayIndex&quot; /&gt; is less than zero.">
        <paramref name="arrayIndex" /> が 0 未満です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;arrayIndex&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> が多次元です。  
  
- または - 
 <paramref name="array" /> には、0 から始まるインデックス番号がありません。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の要素数が、コピー先 <paramref name="array" /> の <paramref name="arrayIndex" /> から最後までの使用可能領域を超えています。  
  
- または - 
コピー元の <see cref="T:System.Collections.ICollection" /> の型をコピー先の <paramref name="array" /> の型に自動的にキャストすることはできません。</exception>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.ToArray">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; to a new array.">
        <see cref="T:System.Collections.Generic.Stack`1" /> を新しい配列にコピーします。</summary>
      <returns vsli:raw="A new array containing copies of the elements of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" /> の要素のコピーを格納する新しい配列。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TrimExcess">
      <summary vsli:raw="Sets the capacity to the actual number of elements in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, if that number is less than 90 percent of current capacity.">
        <see cref="T:System.Collections.Generic.Stack`1" /> 内にある実際の要素数が現在の容量の 90% 未満の場合は、容量をその数に設定します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPeek(`0@)">
      <summary vsli:raw="Returns a value that indicates whether there is an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, and if one is present, copies it to the &lt;paramref name=&quot;result&quot; /&gt; parameter. The object is not removed from the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">の先頭にオブジェクトがあるかどうかを示す値を返し <see cref="T:System.Collections.Generic.Stack`1" /> ます。オブジェクトが存在する場合は、そのオブジェクトをパラメーターにコピーし <paramref name="result" /> ます。 オブジェクトはから削除されません <see cref="T:System.Collections.Generic.Stack`1" /> 。</summary>
      <param name="result" vsli:raw="If present, the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; otherwise, the default value of &lt;typeparamref name=&quot;T&quot; /&gt;.">存在する場合は、の先頭にあるオブジェクト。それ以外の場合は、 <see cref="T:System.Collections.Generic.Stack`1" /> の既定値 <typeparamref name="T" /> 。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is empty.">
        <see langword="true" /> の先頭にオブジェクトがある場合は。 <see cref="T:System.Collections.Generic.Stack`1" /><see langword="false" /> が空の場合は <see cref="T:System.Collections.Generic.Stack`1" /> 。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.TryPop(`0@)">
      <summary vsli:raw="Returns a value that indicates whether there is an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, and if one is present, copies it to the &lt;paramref name=&quot;result&quot; /&gt; parameter, and removes it from the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">の先頭にオブジェクトがあるかどうかを示す値を返します。オブジェクトが存在する場合は、 <see cref="T:System.Collections.Generic.Stack`1" /> それをパラメーターにコピー <paramref name="result" /> してから削除し <see cref="T:System.Collections.Generic.Stack`1" /> ます。</summary>
      <param name="result" vsli:raw="If present, the object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; otherwise, the default value of &lt;typeparamref name=&quot;T&quot; /&gt;.">存在する場合は、の先頭にあるオブジェクト。それ以外の場合は、 <see cref="T:System.Collections.Generic.Stack`1" /> の既定値 <typeparamref name="T" /> 。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is an object at the top of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; is empty.">
        <see langword="true" /> の先頭にオブジェクトがある場合は。 <see cref="T:System.Collections.Generic.Stack`1" /><see langword="false" /> が空の場合は <see cref="T:System.Collections.Generic.Stack`1" /> 。</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" /> に格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。  <see cref="T:System.Collections.Generic.Stack`1" /> の既定の実装では、このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  In the default implementation of &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;, this property always returns the current instance.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトです。  <see cref="T:System.Collections.Generic.Stack`1" /> の既定の実装では、このプロパティは常に現在のインスタンスを返します。</returns>
    </member>
    <member name="T:System.Collections.Generic.Stack`1.Enumerator">
      <summary vsli:raw="Enumerates the elements of a &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1" /> の要素を列挙します。</summary>
      <typeparam name="T" vsli:raw="" />
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1.Enumerator&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.Stack`1.Enumerator" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt;.">列挙子を <see cref="T:System.Collections.Generic.Stack`1" /> の次の要素に進めます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection. This class cannot be inherited.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。 このクラスは継承できません。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The collection was modified after the enumerator was created.">コレクションは、列挙子の作成後に変更されました。</exception>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the &lt;see cref=&quot;T:System.Collections.Generic.Stack`1&quot; /&gt; at the current position of the enumerator.">
        <see cref="T:System.Collections.Generic.Stack`1" /> のうち、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="P:System.Collections.Generic.Stack`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="Gets the element at the current position of the enumerator.">列挙子の現在位置の要素を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enumerator is positioned before the first element of the collection or after the last element.">列挙子は、コレクションの最初の要素の前または最後の要素の後に配置されています。</exception>
      <returns vsli:raw="The element in the collection at the current position of the enumerator.">コレクション内の、列挙子の現在位置にある要素。</returns>
    </member>
    <member name="T:System.Collections.StructuralComparisons">
      <summary vsli:raw="Provides objects for performing a structural comparison of two collection objects.">2 つのコレクション オブジェクトの構造比較を実行するオブジェクトを提供します。</summary>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralComparer">
      <summary vsli:raw="Gets a predefined object that performs a structural comparison of two objects.">2 つのオブジェクトの構造比較を実行する定義済みのオブジェクトを取得します。</summary>
      <returns vsli:raw="A predefined object that is used to perform a structural comparison of two collection objects.">2 つのコレクション オブジェクトの構造比較に使用される定義済みのオブジェクト。</returns>
    </member>
    <member name="P:System.Collections.StructuralComparisons.StructuralEqualityComparer">
      <summary vsli:raw="Gets a predefined object that compares two objects for structural equality.">2 つのオブジェクトの構造上の等価性を比較する定義済みのオブジェクトを取得します。</summary>
      <returns vsli:raw="A predefined object that is used to compare two collection objects for structural equality.">2 つのコレクション オブジェクトの構造上の等価性を比較するのに使用される定義済みのオブジェクト。</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.ComponentModel.TypeConverter</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.AddingNewEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">
        <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using no parameters.">パラメーターを使用せずに <see cref="T:System.ComponentModel.AddingNewEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.AddingNewEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; class using the specified object as the new item.">指定したオブジェクトを新しい項目として使用して、<see cref="T:System.ComponentModel.AddingNewEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="newObject" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the new item value.">新しい項目値として使用する <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.ComponentModel.AddingNewEventArgs.NewObject">
      <summary vsli:raw="Gets or sets the object to be added to the binding list.">バインディング リストに追加するオブジェクトを取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to be added as a new item to the associated collection.">新しい項目として、関連付けられているコレクションに追加する <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.AddingNewEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Windows.Forms.BindingSource.AddingNew&quot; /&gt; event.">
        <see cref="E:System.Windows.Forms.BindingSource.AddingNew" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event, typically a data container or data-bound collection.">イベントのソース。通常は、データ コンテナーまたはデータ バインド コレクション。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.AddingNewEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.AmbientValueAttribute">
      <summary vsli:raw="Specifies the value to pass to a property to cause the property to get its value from another source. This is known as ambience. This class cannot be inherited.">プロパティに渡す値を指定し、そのプロパティが別のソースから値を取得するようにします。 これは "アンビエンス" と呼ばれています。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Boolean value for its value.">値としてブール値を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The value of this attribute.">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Byte)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an 8-bit unsigned integer for its value.">値として 8 ビット符号なし整数を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The value of this attribute.">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Char)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a Unicode character for its value.">値として Unicode 文字を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The value of this attribute.">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a double-precision floating-point number for its value.">値として倍精度浮動小数点数を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The value of this attribute.">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 16-bit signed integer for its value.">値として 16 ビット符号付き整数を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The value of this attribute.">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 32-bit signed integer for its value.">値として 32 ビット符号付き整数を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The value of this attribute.">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a 64-bit signed integer for its value.">値として 64 ビット符号付き整数を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The value of this attribute.">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given an object for its value.">値としてオブジェクトを指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The value of this attribute.">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Single)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a single-precision floating point number for its value.">値として単精度浮動小数点数を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The value of this attribute.">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given a string for its value.">値として文字列を設定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The value of this attribute.">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; class, given the value and its type.">値とその型を指定して、<see cref="T:System.ComponentModel.AmbientValueAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;paramref name=&quot;value&quot; /&gt; parameter.">
        <paramref name="value" /> パラメーターの <see cref="T:System.Type" />。</param>
      <param name="value" vsli:raw="The value for this attribute.">この属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.AmbientValueAttribute" /> が現在の <see cref="T:System.ComponentModel.AmbientValueAttribute" /> と等しいかどうかを示します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.AmbientValueAttribute" /> と比較する <see cref="T:System.ComponentModel.AmbientValueAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した <see langword="true" /> が現在の <see cref="T:System.ComponentModel.AmbientValueAttribute" /> と等しい場合は <see cref="T:System.ComponentModel.AmbientValueAttribute" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AmbientValueAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.AmbientValueAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.AmbientValueAttribute.Value">
      <summary vsli:raw="Gets the object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.AmbientValueAttribute" /> の値であるオブジェクトを取得します。</summary>
      <returns vsli:raw="The object that is the value of this &lt;see cref=&quot;T:System.ComponentModel.AmbientValueAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.AmbientValueAttribute" /> の値であるオブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.ArrayConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Array&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.Array" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ArrayConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ArrayConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">値オブジェクトを目的の型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter.">value パラメーターに指定された配列型のプロパティのコレクションを取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">プロパティを取得する対象となる配列の型を指定する <see cref="T:System.Object" />。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for an array, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">配列に対して公開されているプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。コレクションにプロパティが格納されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ArrayConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties.">このオブジェクトがプロパティをサポートしているかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトのプロパティを見つけるために <see cref="M:System.ComponentModel.ArrayConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> を呼び出す必要があるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeCollection">
      <summary vsli:raw="Represents a collection of attributes.">属性のコレクションを表します。</summary>
    </member>
    <member name="F:System.ComponentModel.AttributeCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use, rather than creating a new one. This field is read-only.">新しいコレクションを作成するのではなく、使用できる空のコレクションを指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection.">コレクションの属性を提供する <see cref="T:System.Attribute" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributes" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute)">
      <summary vsli:raw="Determines whether this collection of attributes has the specified attribute.">指定した属性が属性コレクションに格納されているかどうかを判断します。</summary>
      <param name="attribute" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">コレクション内で検索する <see cref="T:System.Attribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the attribute or is the default attribute for the type of attribute; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した属性がコレクションに格納されているか、指定した属性型の既定の属性が格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Contains(System.Attribute[])">
      <summary vsli:raw="Determines whether this attribute collection contains all the specified attributes in the attribute array.">属性配列にある指定したすべての属性が属性コレクションに格納されているかどうかを判断します。</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to find in the collection.">コレクション内で検索する <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains all the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションにすべての属性が格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the collection to an array, starting at the specified index.">指定したインデックスを開始位置として、配列にコレクションをコピーします。</summary>
      <param name="array" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to copy the collection to.">コレクションのコピー先の <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index to start from.">コピーの開始位置を示すインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from an existing &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">既存の <see cref="T:System.ComponentModel.AttributeCollection" /> から新しい <see cref="T:System.ComponentModel.AttributeCollection" /> を作成します。</summary>
      <param name="existing" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; from which to create the copy.">コピー元の <see cref="T:System.ComponentModel.AttributeCollection" />。</param>
      <param name="newAttributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that provides the attributes for this collection. Can be &lt;see langword=&quot;null&quot; /&gt;.">コレクションの属性を提供する <see cref="T:System.Attribute" /> 型の配列。 <see langword="null" /> の可能性があります。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;existing&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="existing" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that is a copy of &lt;paramref name=&quot;existing&quot; /&gt;.">
        <paramref name="existing" /> のコピーである新しい <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;see cref=&quot;T:System.Type&quot; /&gt;.">指定した <see cref="T:System.Attribute" /> の既定の <see cref="T:System.Type" /> を返します。</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the attribute to retrieve.">取得する属性の <see cref="T:System.Type" />。</param>
      <returns vsli:raw="The default &lt;see cref=&quot;T:System.Attribute&quot; /&gt; of a given &lt;paramref name=&quot;attributeType&quot; /&gt;.">指定された <paramref name="attributeType" /> の既定の <see cref="T:System.Attribute" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this collection.">このコレクションの列挙子を取得します。</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 型の列挙子。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute)">
      <summary vsli:raw="Determines whether a specified attribute is the same as an attribute in the collection.">指定した属性がコレクション内の属性と同じかどうかを判断します。</summary>
      <param name="attribute" vsli:raw="An instance of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to compare with the attributes in this collection.">コレクション内の属性と比較する対象の <see cref="T:System.Attribute" /> のインスタンス。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is contained within the collection and has the same value as the attribute in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した属性がコレクションに格納されていて、その値がコレクション内の属性の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.Matches(System.Attribute[])">
      <summary vsli:raw="Determines whether the attributes in the specified array are the same as the attributes in the collection.">指定した配列内の属性がコレクション内の属性と同じかどうかを判断します。</summary>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; to compare with the attributes in this collection.">コレクション内の属性と比較する対象の <see cref="T:System.CodeDom.MemberAttributes" /> の配列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the attributes in the array are contained in the collection and have the same values as the attributes in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">配列内の属性がコレクションに格納されていて、その値がコレクション内の属性の値と同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Collections.IDictionary" /> を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Attributes">
      <summary vsli:raw="Gets the attribute collection.">属性のコレクションを取得します。</summary>
      <returns vsli:raw="The attribute collection.">属性のコレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Count">
      <summary vsli:raw="Gets the number of attributes.">属性の数を取得します。</summary>
      <returns vsli:raw="The number of attributes.">属性の数。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the attribute with the specified index number.">指定したインデックス番号の属性を取得します。</summary>
      <param name="index" vsli:raw="The zero-based index of &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt;.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> の 0 から始まるインデックス。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified index number.">指定したインデックス番号を持つ <see cref="T:System.Attribute" />。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.Item(System.Type)">
      <summary vsli:raw="Gets the attribute with the specified type.">指定した型の属性を取得します。</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to get from the collection.">コレクションから取得する <see cref="T:System.Type" /> の <see cref="T:System.Attribute" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; with the specified type or, if the attribute does not exist, the default value for the attribute type.">指定した型の <see cref="T:System.Attribute" />。そのような属性が存在しない場合は、指定した属性型の既定値。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">コレクションに格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the collection.">コレクションに含まれる要素の数です。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread-safe).">コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread-safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションへのアクセスが同期される場合 (スレッドセーフの場合) は <see langword="true" />、同期されない場合は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">コレクションへのアクセスの同期に使用できるオブジェクトです。</returns>
    </member>
    <member name="T:System.ComponentModel.AttributeProviderAttribute">
      <summary vsli:raw="Enables attribute redirection. This class cannot be inherited.">属性のリダイレクトを有効にします。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name.">指定した型名を使用して <see cref="T:System.ComponentModel.AttributeProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">指定する型の名前。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeName" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type name and property name.">指定した型名とプロパティ名を使用して、<see cref="T:System.ComponentModel.AttributeProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName" vsli:raw="The name of the type to specify.">指定する型の名前。</param>
      <param name="propertyName" vsli:raw="The name of the property for which attributes will be retrieved.">属性を取得するプロパティの名前。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;propertyName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="propertyName" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.AttributeProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.AttributeProviderAttribute&quot; /&gt; class with the given type.">指定した型を使用して、<see cref="T:System.ComponentModel.AttributeProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The type to specify.">指定する型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.PropertyName">
      <summary vsli:raw="Gets the name of the property for which attributes will be retrieved.">属性を取得するプロパティの名前を取得します。</summary>
      <returns vsli:raw="The name of the property for which attributes will be retrieved.">属性を取得するプロパティの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.AttributeProviderAttribute.TypeName">
      <summary vsli:raw="Gets the assembly qualified type name passed into the constructor.">コンストラクターに渡されるアセンブリ修飾型名を取得します。</summary>
      <returns vsli:raw="The assembly qualified name of the type specified in the constructor.">コンストラクターで指定されたアセンブリ修飾型名。</returns>
    </member>
    <member name="T:System.ComponentModel.BaseNumberConverter">
      <summary vsli:raw="Provides a base type converter for nonfloating-point numerical types.">非浮動小数点型の基本型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">このコンバーターが、任意の型のオブジェクトをコンバーターのネイティブな型に変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type from which you want to convert.">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このコンバーターが操作を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to which you want to convert.">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このコンバーターが操作を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">特定のオブジェクトをコンバーターのネイティブな型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">数を表すカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <exception cref="T:System.Exception" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BaseNumberConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">指定したオブジェクトを別の型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the number.">数を表すカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">オブジェクトの変換後の型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.BindableAttribute">
      <summary vsli:raw="Specifies whether a member is typically used for binding. This class cannot be inherited.">メンバーが通常、バインディングに使用されるかどうかを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.BindableAttribute.No&quot; /&gt;. This field is read-only.">
        <see cref="T:System.ComponentModel.BindableAttribute" /> の既定値 (<see cref="F:System.ComponentModel.BindableAttribute.No" />) を指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not typically used for binding. This field is read-only.">プロパティが通常はバインドに使用されないことを指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is typically used for binding. This field is read-only.">プロパティが通常、バインドに使用されることを指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with a Boolean value.">Boolean 値を指定して、<see cref="T:System.ComponentModel.BindableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティをバインディングに使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.Boolean,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.BindableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use property for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティをバインディングに使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.BindingDirection" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class with one of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.BindableAttribute" /> クラスの新しいインスタンスを <see cref="T:System.ComponentModel.BindableSupport" /> の値のいずれかで初期化します。</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.BindableSupport" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.#ctor(System.ComponentModel.BindableSupport,System.ComponentModel.BindingDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.BindableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.BindableSupport" /> 値のいずれか 1 つ。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.BindingDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.BindingDirection" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; objects are equal.">2 つの <see cref="T:System.ComponentModel.BindableAttribute" /> オブジェクトが等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The object to compare.">比較対象のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;; &lt;see langword=&quot;false&quot; /&gt; if it is not equal.">指定した <see cref="T:System.ComponentModel.BindableAttribute" /> が現在の <see cref="T:System.ComponentModel.BindableAttribute" /> と等しい場合は <see langword="true" />。等しくない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.GetHashCode">
      <summary vsli:raw="Serves as a hash function for the &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.BindableAttribute" /> クラスのハッシュ関数として機能します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.BindableAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.BindableAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.BindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">この属性が既定値かどうかを判断します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">属性がこの属性クラスの既定値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating that a property is typically used for binding.">プロパティが通常、バインドに使用されることを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is typically used for binding; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティが通常、バインドに使用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindableAttribute.Direction">
      <summary vsli:raw="Gets a value indicating the direction or directions of this property's data binding.">このプロパティのデータ バインディングの方向を示す値を取得します。</summary>
      <returns vsli:raw="The direction of this property's data binding.">このプロパティのデータバインディングの方向。</returns>
    </member>
    <member name="T:System.ComponentModel.BindableSupport">
      <summary vsli:raw="Specifies values to indicate whether a property can be bound to a data element or another property.">プロパティをデータ要素または別のプロパティに連結できるかどうかを示す値を指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Default">
      <summary vsli:raw="The property is set to the default.">プロパティは既定値に設定されます。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.No">
      <summary vsli:raw="The property is not bindable at design time.">このプロパティは、デザイン時には連結できません。</summary>
    </member>
    <member name="F:System.ComponentModel.BindableSupport.Yes">
      <summary vsli:raw="The property is bindable at design time.">このプロパティは、デザイン時に連結できます。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingDirection">
      <summary vsli:raw="Specifies whether the template can be bound one way or two ways.">テンプレートを一方向または双方向のいずれでバインドできるのかを指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.OneWay">
      <summary vsli:raw="The template can only accept property values. Used with a generic &lt;see cref=&quot;T:System.Web.UI.ITemplate&quot; /&gt;.">テンプレートはプロパティ値を受け入れるのみです。 ジェネリックな <see cref="T:System.Web.UI.ITemplate" /> で使用します。</summary>
    </member>
    <member name="F:System.ComponentModel.BindingDirection.TwoWay">
      <summary vsli:raw="The template can accept and expose property values. Used with an &lt;see cref=&quot;T:System.Web.UI.IBindableTemplate&quot; /&gt;.">テンプレートはプロパティ値を受け入れて公開できます。 <see cref="T:System.Web.UI.IBindableTemplate" /> で使用します。</summary>
    </member>
    <member name="T:System.ComponentModel.BindingList`1">
      <summary vsli:raw="Provides a generic collection that supports data binding.">データ バインディングをサポートするジェネリック コレクションを提供します。</summary>
      <typeparam name="T" vsli:raw="The type of elements in the list.">リスト内の要素の型です。</typeparam>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.AddingNew">
      <summary vsli:raw="Occurs before an item is added to the list.">項目がリストに追加される前に発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.BindingList`1.ListChanged">
      <summary vsli:raw="Occurs when the list or an item in the list changes.">リストまたはリスト内の項目が変更された場合に発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class using default values.">既定値を使用して <see cref="T:System.ComponentModel.BindingList`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.#ctor(System.Collections.Generic.IList{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt; class with the specified list.">指定されたリストを使用して、<see cref="T:System.ComponentModel.BindingList`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="list" vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; of items to be contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">
        <see cref="T:System.Collections.Generic.IList`1" /> に格納される項目の <see cref="T:System.ComponentModel.BindingList`1" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNew">
      <summary vsli:raw="Adds a new item to the collection.">新しい項目をコレクションに追加します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Forms.BindingSource.AllowNew&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; A public parameterless constructor could not be found for the current item type.">
        <see cref="P:System.Windows.Forms.BindingSource.AllowNew" /> プロパティが <see langword="false" /> に設定されている。  
  
- または - 
現在の項目の型に対応するパラメーターなしのパブリック コンストラクターがありません。</exception>
      <returns vsli:raw="The item added to the list.">リストに追加された項目。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.AddNewCore">
      <summary vsli:raw="Adds a new item to the end of the collection.">コレクションの末尾に新しい項目を追加します。</summary>
      <exception cref="T:System.InvalidCastException" vsli:raw="The new item is not the same type as the objects contained in the &lt;see cref=&quot;T:System.ComponentModel.BindingList`1&quot; /&gt;.">新しい項目が、<see cref="T:System.ComponentModel.BindingList`1" /> に格納されているオブジェクトと同じ型ではありません。</exception>
      <returns vsli:raw="The item that was added to the collection.">コレクションに追加された項目。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the items if overridden in a derived class; otherwise, throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">派生クラスでオーバーライドされた場合は、項目を並べ替えます。それ以外の場合は <see cref="T:System.NotSupportedException" /> をスローします。</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that specifies the property to sort on.">並べ替える対象のプロパティを指定する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか 1 つ。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">メソッドは、派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item.">保留中の新しい項目を破棄します。</summary>
      <param name="itemIndex" vsli:raw="The index of the of the new item to be added.">追加する新しい項目のインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ClearItems">
      <summary vsli:raw="Removes all elements from the collection.">コレクションからすべての要素を削除します。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">保留中の新しい項目をコレクションにコミットします。</summary>
      <param name="itemIndex" vsli:raw="The index of the new item to be added.">追加する新しい項目のインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Searches for the index of the item that has the specified property descriptor with the specified value, if searching is implemented in a derived class; otherwise, a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">検索が派生クラスに実装されている場合、指定した値の指定したプロパティ記述子を持つ項目のインデックスを検索します。実装されていない場合は <see cref="T:System.NotSupportedException" /> がスローされます。</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search for.">検索対象の <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key" vsli:raw="The value of &lt;paramref name=&quot;prop&quot; /&gt; to match.">検索条件として使用する <paramref name="prop" /> の値。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; is not overridden in a derived class.">
        <see cref="M:System.ComponentModel.BindingList`1.FindCore(System.ComponentModel.PropertyDescriptor,System.Object)" /> は、派生クラスでオーバーライドされません。</exception>
      <returns vsli:raw="The zero-based index of the item that matches the property descriptor and contains the specified value.">プロパティ記述子に一致し、指定した値を格納している項目の 0 から始まるインデックス。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.InsertItem(System.Int32,`0)">
      <summary vsli:raw="Inserts the specified item in the list at the specified index.">リスト内の指定したインデックス位置に、指定した項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index where the item is to be inserted.">項目を挿入する位置の 0 から始まるインデックス番号。</param>
      <param name="item" vsli:raw="The item to insert in the list.">リストに挿入する項目。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnAddingNew(System.ComponentModel.AddingNewEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.AddingNew&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.BindingList`1.AddingNew" /> イベントを発生させます。</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AddingNewEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.AddingNewEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> イベントを発生させます。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">指定したインデックス位置にある項目を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="You are removing a newly added item and &lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowRemove&quot; /&gt; is set to &lt;see langword=&quot;false&quot; /&gt;.">新しく追加された項目を削除しようとしており、<see cref="P:System.ComponentModel.IBindingList.AllowRemove" /> が <see langword="false" /> に設定されています。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.RemoveSortCore">
      <summary vsli:raw="Removes any sort applied with &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; if sorting is implemented in a derived class; otherwise, raises &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">派生クラスで並べ替えが実装されている場合は、<see cref="M:System.ComponentModel.BindingList`1.ApplySortCore(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> を使用して適用された並べ替えをすべて解除します。それ以外の場合は <see cref="T:System.NotSupportedException" /> を発生させます。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Method is not overridden in a derived class.">メソッドは、派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetBindings">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.Reset&quot; /&gt;.">種類が <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> の <see cref="F:System.ComponentModel.ListChangedType.Reset" /> イベントを発生させます。</summary>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.ResetItem(System.Int32)">
      <summary vsli:raw="Raises a &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; event of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt; for the item at the specified position.">指定した位置の項目に対して、種類が <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> の <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> イベントを発生させます。</summary>
      <param name="position" vsli:raw="A zero-based index of the item to be reset.">リセットされる項目の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.SetItem(System.Int32,`0)">
      <summary vsli:raw="Replaces the item at the specified index with the specified item.">指定したインデックス位置の項目を、指定した項目で置き換えます。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to replace.">置き換えられる項目の 0 から始まるインデックス。</param>
      <param name="item" vsli:raw="The new value for the item at the specified index. The value can be &lt;see langword=&quot;null&quot; /&gt; for reference types.">指定したインデックス位置に存在する項目の新しい値。 参照型の場合は <see langword="null" /> の値を使用できます。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.ObjectModel.Collection`1.Count&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <see cref="P:System.Collections.ObjectModel.Collection`1.Count" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />」をご覧ください。</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add as a search criteria.">検索条件として追加する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AddNew">
      <summary vsli:raw="Adds a new item to the list. For more information, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">リストに新しい項目を追加します。 詳細については、「<see cref="M:System.ComponentModel.IBindingList.AddNew" />」を参照してください。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">このメソッドはサポートされていません。</exception>
      <returns vsli:raw="The item added to the list.">リストに追加された項目。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;. For a complete description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> と <see cref="T:System.ComponentModel.ListSortDirection" /> に基づいて並べ替えを行います。 このメンバーの詳細については、<see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> のトピックを参照してください。</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">並べ替えのキーとなる <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />」をご覧ください。</summary>
      <param name="prop" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">検索対象の <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;prop&quot; /&gt; parameter to search for.">検索する <paramref name="prop" /> パラメーターの値。</param>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">指定された <see cref="T:System.ComponentModel.PropertyDescriptor" /> を保持する行のインデックス。</returns>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />」をご覧ください。</summary>
      <param name="prop" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">検索に使用されるインデックスから削除する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#RemoveSort">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt;.">このメンバーの説明については、<see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> のトピックを参照してください。</summary>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowEdit">
      <summary vsli:raw="Gets or sets a value indicating whether items in the list can be edited.">リスト内の項目を編集できるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">リスト項目を編集できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowNew">
      <summary vsli:raw="Gets or sets a value indicating whether you can add items to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> メソッドを使用してリストに項目を追加できるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> メソッドを使用してリストに項目を追加できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、リストに含まれている、基になる型によって異なります。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.AllowRemove">
      <summary vsli:raw="Gets or sets a value indicating whether you can remove items from the collection.">コレクションから項目を削除できるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> メソッドを使用して、リストから項目を削除できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.IsSortedCore">
      <summary vsli:raw="Gets a value indicating whether the list is sorted.">リストが並べ替えられたかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is sorted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">リストが並べ替えられている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.RaiseListChangedEvents">
      <summary vsli:raw="Gets or sets a value indicating whether adding or removing items within the list raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events.">リストの項目を追加または削除すると <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> イベントが発生するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if adding or removing items raises &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">項目を追加または削除すると <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> イベントが発生する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortDirectionCore">
      <summary vsli:raw="Gets the direction the list is sorted.">リストが並べ替えられる順序を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.ComponentModel.ListSortDirection.Ascending&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.ComponentModel.ListSortDirection.Ascending" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SortPropertyCore">
      <summary vsli:raw="Gets the property descriptor that is used for sorting the list if sorting is implemented in a derived class; otherwise, returns &lt;see langword=&quot;null&quot; /&gt;.">派生クラスで並べ替えが実装されている場合、リストの並べ替えに使用されるプロパティ記述子を取得します。実装されていない場合は <see langword="null" /> を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; used for sorting the list.">リストの並べ替えに使用される <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsChangeNotificationCore">
      <summary vsli:raw="Gets a value indicating whether &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are enabled.">
        <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> イベントが有効かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> イベントがサポートされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSearchingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports searching.">リストが検索をサポートしているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">リストが検索をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.SupportsSortingCore">
      <summary vsli:raw="Gets a value indicating whether the list supports sorting.">リストが並べ替えをサポートしているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">リストが並べ替えをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowEdit">
      <summary vsli:raw="Gets a value indicating whether items in the list can be edited.">リスト内の項目を編集できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if list items can be edited; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">リスト項目を編集できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowNew">
      <summary vsli:raw="Gets a value indicating whether new items can be added to the list using the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method.">
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> メソッドを使用してリストに新しい項目を追加できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.AddNew&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default depends on the underlying type contained in the list.">
        <see cref="M:System.ComponentModel.BindingList`1.AddNew" /> メソッドを使用してリストに項目を追加できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、リストに含まれている、基になる型によって異なります。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#AllowRemove">
      <summary vsli:raw="Gets a value indicating whether items can be removed from the list.">リストから項目を削除できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list with the &lt;see cref=&quot;M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="M:System.ComponentModel.BindingList`1.RemoveItem(System.Int32)" /> メソッドを使用して、リストから項目を削除できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#IsSorted">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.IsSorted&quot; /&gt;.">このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.IsSorted" />」をご覧ください。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" /> が呼び出され、<see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> は呼び出されていない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortDirection">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortDirection&quot; /&gt;.">このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SortDirection" />」をご覧ください。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SortProperty">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SortProperty&quot; /&gt;.">このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SortProperty" />」をご覧ください。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">並べ替えに使用されている <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsChangeNotification&quot; /&gt;.">このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />」をご覧ください。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストまたはリスト内の項目が変更されたときに <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSearching">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt;.">このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />」をご覧ください。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストが <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> メソッドを使用した検索をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IBindingList#SupportsSorting">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt;.">このメンバーの詳細については、「<see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />」をご覧ください。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストが並べ替えをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.BindingList`1.System#ComponentModel#IRaiseItemChangedEvents#RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether item property value changes raise &lt;see cref=&quot;E:System.ComponentModel.BindingList`1.ListChanged&quot; /&gt; events of type &lt;see cref=&quot;F:System.ComponentModel.ListChangedType.ItemChanged&quot; /&gt;. This member cannot be overridden in a derived class.">項目のプロパティ値が変更されると、種類が <see cref="E:System.ComponentModel.BindingList`1.ListChanged" /> の <see cref="F:System.ComponentModel.ListChangedType.ItemChanged" /> イベントが発生するかどうかを示す値を取得します。 このメンバーは、派生クラスでオーバーライドすることはできません。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list type implements &lt;see cref=&quot;T:System.ComponentModel.INotifyPropertyChanged&quot; /&gt;, otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> リスト型がを実装している場合は <see cref="T:System.ComponentModel.INotifyPropertyChanged" /> 。それ以外の場合は <see langword="false" /> 。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.BooleanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Boolean&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.Boolean" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.BooleanConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.BooleanConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Boolean object using the specified context.">このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを Boolean オブジェクトに変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトが変換を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a Boolean object.">特定の値オブジェクトを Boolean オブジェクトに変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">変換後のカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the Boolean data type.">Boolean データ型の標準値コレクションを取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values.">有効値の標準セットが格納されている <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">
        <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> メソッドから返された標準値のリストが、排他的リストかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> から返された <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> が有効値の排他的リストであるため、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="M:System.ComponentModel.BooleanConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">リストから選択できる標準値セットをこのオブジェクトがサポートしているかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトがサポートしている標準値セットを見つけるために <see cref="M:System.ComponentModel.BooleanConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> を呼び出すことができるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="T:System.ComponentModel.ByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from various other representations.">8 ビット符号なし整数オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ByteConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ByteConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.CancelEventHandler">
      <summary vsli:raw="Represents the method that handles a cancelable event.">キャンセルできるイベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CancelEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.CancelEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.CharConverter">
      <summary vsli:raw="Provides a type converter to convert Unicode character objects to and from various other representations.">Unicode 文字オブジェクトから他のさまざまな表現への変換や、その逆の変換を実行する型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CharConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.CharConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.CharConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a Unicode character object using the specified context.">このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを Unicode 文字オブジェクトに変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">変換元の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a Unicode character object.">特定のオブジェクトを Unicode 文字オブジェクトに変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CharConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a Unicode character object using the arguments.">引数を使用して、指定した値オブジェクトを Unicode 文字オブジェクトに変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeAction">
      <summary vsli:raw="Specifies how the collection is changed.">コレクションがどのように変更されるかを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Add">
      <summary vsli:raw="Specifies that an element was added to the collection.">コレクションに要素が追加されたことを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Refresh">
      <summary vsli:raw="Specifies that the entire collection has changed. This is caused by using methods that manipulate the entire collection, such as &lt;see cref=&quot;M:System.Collections.CollectionBase.Clear&quot; /&gt;.">コレクション全体が変更されたことを示します。 このような変更は、<see cref="M:System.Collections.CollectionBase.Clear" /> など、コレクション全体を操作するメソッドを使用した場合に発生します。</summary>
    </member>
    <member name="F:System.ComponentModel.CollectionChangeAction.Remove">
      <summary vsli:raw="Specifies that an element was removed from the collection.">コレクションから要素が削除されたことを示します。</summary>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event.">
        <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionChangeEventArgs.#ctor(System.ComponentModel.CollectionChangeAction,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="action" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values that specifies how the collection changed.">コレクションがどのように変更されたかを示す <see cref="T:System.ComponentModel.CollectionChangeAction" /> 値の 1 つ。</param>
      <param name="element" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the instance of the collection where the change occurred.">変更されたコレクションのインスタンスを指定する <see cref="T:System.Object" />。</param>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Action">
      <summary vsli:raw="Gets an action that specifies how the collection changed.">コレクションがどのように変更されたかを示すアクションを取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeAction&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.CollectionChangeAction" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.ComponentModel.CollectionChangeEventArgs.Element">
      <summary vsli:raw="Gets the instance of the collection with the change.">変更されたコレクションのインスタンスを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the instance of the collection with the change, or &lt;see langword=&quot;null&quot; /&gt; if you refresh the collection.">変更されたコレクションのインスタンスを表す <see cref="T:System.Object" />。コレクションを更新する場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CollectionChangeEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Data.DataColumnCollection.CollectionChanged&quot; /&gt; event raised when adding elements to or removing elements from a collection.">コレクションに要素を追加したり、コレクションから要素を削除したりすると発生する <see cref="E:System.Data.DataColumnCollection.CollectionChanged" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.CollectionChangeEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.CollectionConverter">
      <summary vsli:raw="Provides a type converter to convert collection objects to and from various other representations.">コレクション オブジェクトから他のさまざまな表現への変換や、その逆の変換を実行する型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CollectionConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.CollectionConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">値オブジェクトを目的の型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The culture to which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This parameter must inherit from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">変換対象の <see cref="T:System.Object" />。 このパラメーターは、<see cref="T:System.Collections.ICollection" /> から継承する必要があります。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of array specified by the value parameter using the specified context and attributes.">指定したコンテキストと属性を使用して、value パラメーターで指定された配列型のプロパティのコレクションを取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array to get the properties for.">プロパティを取得する対象となる配列の型を指定する <see cref="T:System.Object" />。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">このデータ型について公開されているプロパティを持つ <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。または、プロパティがない場合は <see langword="null" />。 このメソッドは常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.CollectionConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>このオブジェクトがプロパティをサポートしているかどうかを示す値を取得します。</summary>
      <param name="context">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns>このオブジェクトのプロパティを見つけるために <see cref="M:System.ComponentModel.CollectionConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> を呼び出すことはできないので、<see langword="false" />。 このメソッドが <see langword="true" /> を返すことはありません。</returns>
    </member>
    <member name="T:System.ComponentModel.ComplexBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the data source and data member properties for a component that supports complex data binding. This class cannot be inherited.">複合データ バインディングをサポートするコンポーネントのデータ ソース プロパティおよびデータ メンバー プロパティを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="F:System.ComponentModel.ComplexBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> クラスの既定値を表します。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using no parameters.">パラメーターを使用せずに <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source.">指定したデータ ソースを使用して、<see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">データ ソースとして使用するプロパティの名前。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; class using the specified data source and data member.">指定したデータ ソースとデータ メンバーを使用して、<see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">データ ソースとして使用するプロパティの名前。</param>
      <param name="dataMember" vsli:raw="The name of the property to be used as the source for data.">データ ソースとして使用するプロパティの名前。</param>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> インスタンスと等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; instance.">現在の <see cref="T:System.Object" /> インスタンスと比較する <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">オブジェクトが現在のインスタンスと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" /> で、これらが等しくないことを示します。</returns>
    </member>
    <member name="M:System.ComponentModel.ComplexBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataMember">
      <summary vsli:raw="Gets the name of the data member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> のバインド先となるコンポーネントのデータ メンバー プロパティの名前を取得します。</summary>
      <returns vsli:raw="The name of the data member property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> のバインド先となるコンポーネントのデータ メンバー プロパティの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.ComplexBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> のバインド先となるコンポーネントのデータ ソース プロパティの名前を取得します。</summary>
      <returns vsli:raw="The name of the data source property for the component to which &lt;see cref=&quot;T:System.ComponentModel.ComplexBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.ComplexBindingPropertiesAttribute" /> のバインド先となるコンポーネントのデータ ソース プロパティの名前。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentConverter">
      <summary vsli:raw="Provides a type converter to convert components to and from various other representations.">コンポーネントのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ComponentConverter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this component converter.">このコンポーネント コンバーターに関連付ける型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of component specified by the value parameter.">value パラメーターに指定された配列型のプロパティのコレクションを取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of component to get the properties for.">プロパティを取得する対象のコンポーネントの型を指定する <see cref="T:System.Object" />。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">指定されたコンポーネントに対して公開されているプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。コレクションにプロパティが格納されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">指定したコンテキストを使用して、オブジェクトがプロパティをサポートしているかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトのプロパティを見つけるために <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> を呼び出す必要があるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentEditor">
      <summary vsli:raw="Provides the base class for a custom component editor.">カスタムのコンポーネント エディターの基本クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentEditor&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ComponentEditor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified based upon a given context.">コンポーネントを編集し、指定したコンテキストに基づいてコンポーネントが変更されたかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An optional context object that can be used to obtain further information about the edit.">編集に関する詳細情報を取得するために使用できるオプションのコンテキスト オブジェクト。</param>
      <param name="component" vsli:raw="The component to be edited.">編集対象のコンポーネント。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンポーネントが変更された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ComponentEditor.EditComponent(System.Object)">
      <summary vsli:raw="Edits the component and returns a value indicating whether the component was modified.">コンポーネントを編集し、このコンポーネントが変更されたかどうかを示す値を返します。</summary>
      <param name="component" vsli:raw="The component to be edited.">編集対象のコンポーネント。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component was modified; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンポーネントが変更された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentResourceManager">
      <summary vsli:raw="Provides simple functionality for enumerating resources for a component or object. The &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class is a &lt;see cref=&quot;T:System.Resources.ResourceManager&quot; /&gt;.">コンポーネントまたはオブジェクトのリソースを列挙するための簡単な機能を提供します。 <see cref="T:System.ComponentModel.ComponentResourceManager" /> クラスは <see cref="T:System.Resources.ResourceManager" /> です。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; class with default values.">
        <see cref="T:System.ComponentModel.ComponentResourceManager" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.#ctor(System.Type)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; that looks up resources in satellite assemblies based on information from the specified &lt;see cref=&quot;T:System.Type&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.ComponentResourceManager" /> の情報に基づいて、サテライト アセンブリでリソースを検索する <see cref="T:System.Type" /> を作成します。</summary>
      <param name="t" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; from which the &lt;see cref=&quot;T:System.ComponentModel.ComponentResourceManager&quot; /&gt; derives all information for finding resource files.">
        <see cref="T:System.Type" /> がリソース ファイルを検索するための情報をすべて取得する元となる <see cref="T:System.ComponentModel.ComponentResourceManager" />。</param>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">オブジェクトの対応するプロパティにリソースの値を適用します。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">適用されるプロパティ値を格納する <see cref="T:System.Object" />。</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">リソースを検索するためのオブジェクトの名前を格納する <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> または <paramref name="objectName" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.ComponentResourceManager.ApplyResources(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Applies a resource's value to the corresponding property of the object.">オブジェクトの対応するプロパティにリソースの値を適用します。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that contains the property value to be applied.">適用されるプロパティ値を格納する <see cref="T:System.Object" />。</param>
      <param name="objectName" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that contains the name of the object to look up in the resources.">リソースを検索するためのオブジェクトの名前を格納する <see cref="T:System.String" />。</param>
      <param name="culture" vsli:raw="The culture for which to apply resources.">リソースを適用するカルチャ。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; or &lt;paramref name=&quot;objectName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> または <paramref name="objectName" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="T:System.ComponentModel.Container">
      <summary vsli:raw="Encapsulates zero or more components.">0 個以上のコンポーネントをカプセル化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Container" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;. The component is unnamed.">指定した <see cref="T:System.ComponentModel.Component" /> を <see cref="T:System.ComponentModel.Container" /> に追加します。 コンポーネントに名前が付いていません。</summary>
      <param name="component" vsli:raw="The component to add.">追加するコンポーネント。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; and assigns it a name.">指定した <see cref="T:System.ComponentModel.Component" /> を <see cref="T:System.ComponentModel.Container" /> に追加し、名前を割り当てます。</summary>
      <param name="component" vsli:raw="The component to add.">追加するコンポーネント。</param>
      <param name="name" vsli:raw="The unique, case-insensitive name to assign to the component.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt;, which leaves the component unnamed.">コンポーネントに割り当てる、大文字小文字を区別しない一意の名前。  
  
- または - 
 コンポーネントに名前を付けない場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" /> が一意ではありません。</exception>
    </member>
    <member name="M:System.ComponentModel.Container.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; for the given &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and assigns the given name to the site.">指定した <see cref="T:System.ComponentModel.ISite" /> 用にサイト <see cref="T:System.ComponentModel.IComponent" /> を作成し、そのサイトに特定の名前を割り当てます。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">サイトを作成する <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">
        <paramref name="component" /> に割り当てる名前。名前の割り当てをスキップする場合は <see langword="null" />。</param>
      <returns vsli:raw="The newly created site.">新規作成されたサイト。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Container" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;, and optionally releases the managed resources.">
        <see cref="T:System.ComponentModel.Container" /> が使用しているアンマネージド リソースを解放します。オプションとして、マネージド リソースを解放することもできます。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Container.Finalize">
      <summary vsli:raw="Releases unmanaged resources and performs other cleanup operations before the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; is reclaimed by garbage collection.">
        <see cref="T:System.ComponentModel.Container" /> がガベージ コレクションによってクリアされる前に、アンマネージ リソースを解放し、その他のクリーンアップ操作を実行します。</summary>
    </member>
    <member name="M:System.ComponentModel.Container.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">指定した型のサービス オブジェクトがある場合は、そのオブジェクトを取得します。</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">取得するサービスの <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; implementing the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">要求したサービスを実装している <see cref="T:System.Object" />。サービスを解決できない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Container" /> からコンポーネントを削除します。</summary>
      <param name="component" vsli:raw="The component to remove.">削除するコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)">
      <summary vsli:raw="Removes a component from the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt; without setting &lt;see cref=&quot;P:System.ComponentModel.IComponent.Site&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Container" /> に <see langword="null" /> を設定しないで、<see cref="P:System.ComponentModel.IComponent.Site" /> からコンポーネントを削除します。</summary>
      <param name="component" vsli:raw="The component to remove.">削除するコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Determines whether the component name is unique for this container.">コンポーネント名がこのコンテナーで一意であるかどうかを判断します。</summary>
      <param name="component" vsli:raw="The named component.">名前付きコンポーネント。</param>
      <param name="name" vsli:raw="The component name to validate.">検証対象のコンポーネント名。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is not unique.">
        <paramref name="name" /> が一意ではありません。</exception>
    </member>
    <member name="P:System.ComponentModel.Container.Components">
      <summary vsli:raw="Gets all the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Container" /> 内のすべてのコンポーネントを取得します。</summary>
      <returns vsli:raw="A collection that contains the components in the &lt;see cref=&quot;T:System.ComponentModel.Container&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Container" /> 内のコンポーネントを格納しているコレクション。</returns>
    </member>
    <member name="T:System.ComponentModel.ContainerFilterService">
      <summary vsli:raw="Provides a base class for the container filter service.">コンテナー フィルター サービスの基本クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ContainerFilterService&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ContainerFilterService" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ContainerFilterService.FilterComponents(System.ComponentModel.ComponentCollection)">
      <summary vsli:raw="Filters the component collection.">コンポーネント コレクションのフィルター処理を行います。</summary>
      <param name="components" vsli:raw="The component collection to filter.">フィルター処理を行うコンポーネント コレクション。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ComponentCollection&quot; /&gt; that represents a modified collection.">変更したコレクションを表す <see cref="T:System.ComponentModel.ComponentCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CultureInfoConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.Globalization.CultureInfo" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CultureInfoConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.CultureInfoConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; using the specified context.">このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを <see cref="T:System.Globalization.CultureInfo" /> に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;.">指定した値オブジェクトを <see cref="T:System.Globalization.CultureInfo" /> に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">変換後のカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; specifies a culture that is not valid.">
        <paramref name="value" /> に無効なカルチャが指定されています。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">値オブジェクトを目的の型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to which to convert.">変換後のカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetCultureName(System.Globalization.CultureInfo)">
      <summary vsli:raw="Retrieves the name of the specified culture.">指定したカルチャの名前を取得します。</summary>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to get the name for.">名前を取得するカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns vsli:raw="The name of the specified culture.">指定したカルチャの名前。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for a &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object using the specified context.">指定したコンテキストを使用して <see cref="T:System.Globalization.CultureInfo" /> オブジェクトの標準値コレクションを取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">有効値の標準セットを格納している <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。データ型が標準値セットをサポートしていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list.">
        <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> から返された標準値のコレクションが、排他的リストかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is not an exhaustive list of possible values (that is, other values are possible). This method never returns &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> から返された <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> が、有効値の排他的リストではないので (他の値も有効であるため)、<see langword="false" />。 このメソッドが <see langword="true" /> を返すことはありません。</returns>
    </member>
    <member name="M:System.ComponentModel.CultureInfoConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">指定したコンテキストを使用して、リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトがサポートしている標準値セットを見つけるために <see cref="M:System.ComponentModel.CultureInfoConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> を呼び出す必要があるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="T:System.ComponentModel.CustomTypeDescriptor">
      <summary vsli:raw="Provides a simple default implementation of the &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; interface.">
        <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> インターフェイスの単純な既定の実装を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.CustomTypeDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.#ctor(System.ComponentModel.ICustomTypeDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CustomTypeDescriptor&quot; /&gt; class using a parent custom type descriptor.">親のカスタムの型記述子を使用して、<see cref="T:System.ComponentModel.CustomTypeDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parent" vsli:raw="The parent custom type descriptor.">親のカスタムの型記述子。</param>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for the type represented by this type descriptor.">この型記述子によって表される型のカスタム属性のコレクションを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the type. The default is &lt;see cref=&quot;F:System.ComponentModel.AttributeCollection.Empty&quot; /&gt;.">型の属性を格納している <see cref="T:System.ComponentModel.AttributeCollection" />。 既定値は、<see cref="F:System.ComponentModel.AttributeCollection.Empty" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the fully qualified name of the class represented by this type descriptor.">この型記述子によって表されるクラスの完全修飾名を返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the fully qualified class name of the type this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">この型記述子によって記述される型の完全修飾クラス名を格納している <see cref="T:System.String" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of the class represented by this type descriptor.">この型記述子によって表されるクラスの名前を返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the component instance this type descriptor is describing. The default is &lt;see langword=&quot;null&quot; /&gt;.">この型記述子が記述するコンポーネント インスタンスの名前を格納している <see cref="T:System.String" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for the type represented by this type descriptor.">この型記述子によって表される型の型コンバーターを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the type represented by this type descriptor. The default is a newly created &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt;.">この型記述子によって表される型の <see cref="T:System.ComponentModel.TypeConverter" />。 既定値は新しく作成された <see cref="T:System.ComponentModel.TypeConverter" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the event descriptor for the default event of the object represented by this type descriptor.">この型記述子によって表されるオブジェクトの既定のイベントに使用するイベント記述子を返します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the default event on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">この型記述子によって表されるオブジェクトの既定のイベントに使用する <see cref="T:System.ComponentModel.EventDescriptor" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the property descriptor for the default property of the object represented by this type descriptor.">この型記述子によって表されるオブジェクトの既定のプロパティに使用するプロパティ記述子を返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; for the default property on the object represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">この型記述子によって表されるオブジェクトの既定のプロパティに使用する <see cref="T:System.ComponentModel.PropertyDescriptor" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type that is to be associated with the class represented by this type descriptor.">この型記述子によって表されるクラスに関連付けられる指定した型のエディターを返します。</summary>
      <param name="editorBaseType" vsli:raw="The base type of the editor to retrieve.">取得するエディターの基本型。</param>
      <returns vsli:raw="An editor of the given type that is to be associated with the class represented by this type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">この型記述子によって表されるクラスに関連付けられる指定した型のエディター。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns a collection of event descriptors for the object represented by this type descriptor.">この型記述子によって表されるオブジェクトのイベント記述子のコレクションを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptors for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">この型記述子によって表されるオブジェクトのイベント記述子を格納している <see cref="T:System.ComponentModel.EventDescriptorCollection" />。 既定値は、<see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of event descriptors for the object represented by this type descriptor.">この型記述子によって表されるオブジェクトのイベント記述子のフィルター処理されたコレクションを返します。</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">フィルターとして使用される属性の配列。 これは <see langword="null" /> でもかまいません。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; containing the event descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.EventDescriptorCollection.Empty&quot; /&gt;.">この型記述子によって表されるオブジェクトのイベント記述子を格納している <see cref="T:System.ComponentModel.EventDescriptorCollection" />。 既定値は、<see cref="F:System.ComponentModel.EventDescriptorCollection.Empty" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns a collection of property descriptors for the object represented by this type descriptor.">この型記述子によって表されるオブジェクトのプロパティ記述子のコレクションを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">この型記述子によって表されるオブジェクトのプロパティ記述子を格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。 既定値は、<see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns a filtered collection of property descriptors for the object represented by this type descriptor.">この型記述子によって表されるオブジェクトのプロパティ記述子のフィルター処理されたコレクションを返します。</summary>
      <param name="attributes" vsli:raw="An array of attributes to use as a filter. This can be &lt;see langword=&quot;null&quot; /&gt;.">フィルターとして使用される属性の配列。 これは <see langword="null" /> でもかまいません。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the property descriptions for the object represented by this type descriptor. The default is &lt;see cref=&quot;F:System.ComponentModel.PropertyDescriptorCollection.Empty&quot; /&gt;.">この型記述子によって表されるオブジェクトのプロパティ記述子を格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。 既定値は、<see cref="F:System.ComponentModel.PropertyDescriptorCollection.Empty" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.CustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">指定したプロパティ記述子によって記述されたプロパティを含むオブジェクトを返します。</summary>
      <param name="pd" vsli:raw="The property descriptor for which to retrieve the owning object.">所有オブジェクトを取得するプロパティ記述子。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that owns the given property specified by the type descriptor. The default is &lt;see langword=&quot;null&quot; /&gt;.">型記述子によって指定されたプロパティを所有する <see cref="T:System.Object" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectAttribute">
      <summary vsli:raw="Identifies a type as an object suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object. This class cannot be inherited.">ある型を、<see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトへのバインドに適したオブジェクトとして識別します。 このクラスは継承できません。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.DataObject">
      <summary vsli:raw="Indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">クラスがデザイン時の <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトへのバインドに適していることを示します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.Default">
      <summary vsli:raw="Represents the default value of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class, which indicates that the class is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">クラスがデザイン時の <see cref="T:System.ComponentModel.DataObjectAttribute" /> オブジェクトへのバインドに適していることを示す、<see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> クラスの既定値を表します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectAttribute.NonDataObject">
      <summary vsli:raw="Indicates that the class is not suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time. This field is read-only.">クラスがデザイン時の <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトへのバインドに適していないことを示します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DataObjectAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; class and indicates whether an object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object.">
        <see cref="T:System.ComponentModel.DataObjectAttribute" /> クラスの新しいインスタンスを初期化し、オブジェクトが <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトへのバインドに適しているかどうかを示します。</summary>
      <param name="isDataObject" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトへのバインドに適している場合は<see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt; fits the pattern of another object.">
        <see cref="T:System.ComponentModel.DataObjectAttribute" /> のこのインスタンスが別のオブジェクトのパターンと一致するかどうかを確認します。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DataObjectAttribute" /> のこのインスタンスと比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスが <paramref name="obj" /> パラメーターで指定されたインスタンスと同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">属性の現在の値が既定値かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">属性の現在の値が既定値である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectAttribute.IsDataObject">
      <summary vsli:raw="Gets a value indicating whether an object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object at design time.">オブジェクトがデザイン時の <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトへのバインドに適していると見なされるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object should be considered suitable for binding to an &lt;see cref=&quot;T:System.Web.UI.WebControls.ObjectDataSource&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが <see cref="T:System.Web.UI.WebControls.ObjectDataSource" /> オブジェクトへのバインドに適していると見なされる場合は<see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectFieldAttribute">
      <summary vsli:raw="Provides metadata for a property representing a data field. This class cannot be inherited.">データ フィールドを表すプロパティのメタデータを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row.">
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> クラスの新しいインスタンスを初期化し、フィールドがデータ行の主キーかどうかを示します。</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">フィールドがデータ行の主キーに含まれることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, and whether the field is a database identity field.">
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> クラスの新しいインスタンスを初期化し、フィールドがデータ行の主キーかどうか、フィールドがデータベースの ID フィールドかどうかを示します。</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">フィールドがデータ行の主キーに含まれることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">フィールドがデータ行を一意に識別する ID フィールドであることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether the field is a database identity field, and whether the field can be null.">
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> クラスの新しいインスタンスを初期化し、フィールドがデータ行の主キーかどうか、フィールドがデータベースの ID フィールドかどうか、フィールドを null にできるかどうかを示します。</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">フィールドがデータ行の主キーに含まれることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">フィールドがデータ行を一意に識別する ID フィールドであることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">データ ストア内でフィールドを null にできることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.#ctor(System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt; class and indicates whether the field is the primary key for the data row, whether it is a database identity field, and whether it can be null and sets the length of the field.">
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> クラスの新しいインスタンスを初期化し、フィールドがデータ行の主キーかどうか、データベースの ID フィールドかどうか、null にできるかどうかを示し、フィールドの長さも設定します。</summary>
      <param name="primaryKey" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is in the primary key of the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">フィールドがデータ行の主キーに含まれることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="isIdentity" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field is an identity field that uniquely identifies the data row; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">フィールドがデータ行を一意に識別する ID フィールドであることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="isNullable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the field can be null in the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">データ ストア内でフィールドを null にできることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="length" vsli:raw="The length of the field in bytes.">フィールドの長さ (バイト単位)。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">このインスタンスが指定されたオブジェクトに等しいかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectFieldAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DataObjectFieldAttribute" /> のこのインスタンスと比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスが <paramref name="obj" /> パラメーターで指定されたインスタンスと同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectFieldAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsIdentity">
      <summary vsli:raw="Gets a value indicating whether a property represents an identity field in the underlying data.">プロパティが、基になるデータの ID フィールドを表しているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents an identity field in the underlying data; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;false&quot; /&gt;.">プロパティが、基になるデータの ID フィールドを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.IsNullable">
      <summary vsli:raw="Gets a value indicating whether a property represents a field that can be null in the underlying data store.">プロパティが、基になるデータ ストア内で null にできるフィールドを表しているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents a field that can be null in the underlying data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティが、基になるデータ ストア内で null にできるフィールドを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.Length">
      <summary vsli:raw="Gets the length of the property in bytes.">バイト単位のプロパティの長さを取得します。</summary>
      <returns vsli:raw="The length of the property in bytes, or -1 if not set.">バイト単位のプロパティの長さ。設定されていない場合は -1。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectFieldAttribute.PrimaryKey">
      <summary vsli:raw="Gets a value indicating whether a property is in the primary key in the underlying data.">プロパティが、基になるデータの主キーに含まれるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is in the primary key of the data store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティが、データ ストアの主キーに含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodAttribute">
      <summary vsli:raw="Identifies a data operation method exposed by a type, what type of operation the method performs, and whether the method is the default data method. This class cannot be inherited.">型、メソッドが実行する操作の種類、およびメソッドが既定のデータ メソッドであるかどうかによって公開される、データ操作メソッドを識別します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class and identifies the type of data operation the method performs.">
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> クラスの新しいインスタンスを初期化し、メソッドによって実行されるデータ操作の種類を識別します。</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">メソッドによって実行されるデータ操作を示す <see cref="T:System.ComponentModel.DataObjectMethodType" /> 値の 1 つ。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.#ctor(System.ComponentModel.DataObjectMethodType,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; class, identifies the type of data operation the method performs, and identifies whether the method is the default data method that the data object exposes.">
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> クラスの新しいインスタンスを初期化して、メソッドによって実行されるデータ操作の種類を識別し、さらにそのメソッドがそのデータ オブジェクトによって公開される既定のデータ メソッドかどうかを識別します。</summary>
      <param name="methodType" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that describes the data operation the method performs.">メソッドによって実行されるデータ操作を示す <see cref="T:System.ComponentModel.DataObjectMethodType" /> 値の 1 つ。</param>
      <param name="isDefault" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the method that the attribute is applied to is the default method of the data object for the specified &lt;paramref name=&quot;methodType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この属性が適用されるメソッドが、指定した <paramref name="methodType" /> のデータ オブジェクトの既定のメソッドである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">このインスタンスが指定されたオブジェクトに等しいかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> のこのインスタンスと比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスが <paramref name="obj" /> パラメーターで指定されたインスタンスと同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.DataObjectMethodAttribute.Match(System.Object)">
      <summary vsli:raw="Gets a value indicating whether this instance shares a common pattern with a specified attribute.">対象のインスタンスが、指定した属性と共通のパターンを共有するかどうかを示す値を取得します。</summary>
      <param name="obj" vsli:raw="An object to compare with this instance of &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> のこのインスタンスと比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the same as the instance specified by the &lt;paramref name=&quot;obj&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスが <paramref name="obj" /> パラメーターで指定されたインスタンスと同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.IsDefault">
      <summary vsli:raw="Gets a value indicating whether the method that the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied to is the default data method exposed by the data object for a specific method type.">
        <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> が適用されるメソッドが、特定のメソッドの種類のデータ オブジェクトによって公開される既定のデータ メソッドであるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is the default method exposed by the object for a method type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メソッドが、オブジェクトによって公開されるメソッドの種類の既定のメソッドである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DataObjectMethodAttribute.MethodType">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; value indicating the type of data operation the method performs.">メソッドによって実行されるデータ操作の種類を示す <see cref="T:System.ComponentModel.DataObjectMethodType" /> 値を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodType&quot; /&gt; values that identifies the type of data operation performed by the method to which the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; is applied.">
        <see cref="T:System.ComponentModel.DataObjectMethodType" /> が適用されるメソッドによって実行されるデータ操作の種類を示す <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> 値の 1 つ。</returns>
    </member>
    <member name="T:System.ComponentModel.DataObjectMethodType">
      <summary vsli:raw="Identifies the type of data operation performed by a method, as specified by the &lt;see cref=&quot;T:System.ComponentModel.DataObjectMethodAttribute&quot; /&gt; applied to the method.">メソッドに適用された <see cref="T:System.ComponentModel.DataObjectMethodAttribute" /> で指定された、メソッドによって実行されるデータ操作の種類を示します。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Delete">
      <summary vsli:raw="Indicates that a method is used for a data operation that deletes data.">メソッドが、データを削除するデータ操作に使用されることを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Fill">
      <summary vsli:raw="Indicates that a method is used for a data operation that fills a &lt;see cref=&quot;T:System.Data.DataSet&quot; /&gt; object.">メソッドが、<see cref="T:System.Data.DataSet" /> オブジェクトにデータを格納するデータ操作に使用されることを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Insert">
      <summary vsli:raw="Indicates that a method is used for a data operation that inserts data.">メソッドが、データを挿入するデータ操作に使用されることを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Select">
      <summary vsli:raw="Indicates that a method is used for a data operation that retrieves data.">メソッドが、データを取得するデータ操作に使用されることを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.DataObjectMethodType.Update">
      <summary vsli:raw="Indicates that a method is used for a data operation that updates data.">メソッドが、データを更新するデータ操作に使用されることを示します。</summary>
    </member>
    <member name="T:System.ComponentModel.DateTimeConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTime&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.DateTime" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DateTimeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the specified context.">このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを <see cref="T:System.DateTime" /> に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトが変換を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.">指定した値オブジェクトを <see cref="T:System.DateTime" /> に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.DateTime&quot; /&gt; using the arguments.">引数を使用して、指定した値オブジェクトを <see cref="T:System.DateTime" /> に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DateTimeOffsetConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; structures to and from various other representations.">
        <see cref="T:System.DateTimeOffset" /> 構造体のさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DateTimeOffsetConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DateTimeOffsetConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether an object of the specified source type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">指定した変換元の型のオブジェクトを <see cref="T:System.DateTimeOffset" /> に変換できるかどうか示す値を返します。</summary>
      <param name="context" vsli:raw="The date format context.">日付形式コンテキスト。</param>
      <param name="sourceType" vsli:raw="The source type to check.">確認する対象の変換元の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified type can be converted to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した型を <see cref="T:System.DateTimeOffset" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value that indicates whether a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to an object of the specified type.">指定した型のオブジェクトに <see cref="T:System.DateTimeOffset" /> を変換できるかどうか示す値を返します。</summary>
      <param name="context" vsli:raw="The date format context.">日付形式コンテキスト。</param>
      <param name="destinationType" vsli:raw="The destination type to check.">確認する対象の変換先の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; can be converted to the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した型に <see cref="T:System.DateTimeOffset" /> を変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">指定したオブジェクトを <see cref="T:System.DateTimeOffset" /> に変換します。</summary>
      <param name="context" vsli:raw="The date format context.">日付形式コンテキスト。</param>
      <param name="culture" vsli:raw="The date culture.">日付カルチャ。</param>
      <param name="value" vsli:raw="The object to be converted.">変換されるオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; that represents the specified object.">指定したオブジェクトを表す <see cref="T:System.DateTimeOffset" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DateTimeOffsetConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to an object of the specified type.">
        <see cref="T:System.DateTimeOffset" /> を、指定した型のオブジェクトに変換します。</summary>
      <param name="context" vsli:raw="The date format context.">日付形式コンテキスト。</param>
      <param name="culture" vsli:raw="The date culture.">日付カルチャ。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt; to be converted.">変換される <see cref="T:System.DateTimeOffset" />。</param>
      <param name="destinationType" vsli:raw="The type to convert to.">変換後の型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An object of the specified type that represents the &lt;see cref=&quot;T:System.DateTimeOffset&quot; /&gt;.">
        <see cref="T:System.DateTimeOffset" /> を表す指定した型のオブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.DecimalConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Decimal&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.Decimal" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DecimalConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DecimalConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DecimalConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; using the arguments.">引数を使用して、指定した値オブジェクトを <see cref="T:System.Decimal" /> に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultBindingPropertyAttribute">
      <summary vsli:raw="Specifies the default binding property for a component. This class cannot be inherited.">コンポーネントの既定のバインディング プロパティを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultBindingPropertyAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> クラスの既定値を表します。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using no parameters.">パラメーターを使用せずに <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; class using the specified property name.">指定したプロパティ名を使用して、<see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the default binding property.">既定のバインディング プロパティの名前。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> インスタンスと等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; instance.">現在の <see cref="T:System.Object" /> インスタンスと比較する <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">オブジェクトが現在のインスタンスと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" /> で、これらが等しくないことを示します。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultBindingPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultBindingPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> のバインド先となるコンポーネントで使用する既定のバインディング プロパティの名前を取得します。</summary>
      <returns vsli:raw="The name of the default binding property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.DefaultBindingPropertyAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" /> のバインド先となるコンポーネントで使用する既定のバインディング プロパティの名前。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultEventAttribute">
      <summary vsli:raw="Specifies the default event for a component.">コンポーネントの既定のイベントを指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultEventAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">
        <see cref="T:System.ComponentModel.DefaultEventAttribute" /> の既定値 (<see langword="null" />) を指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DefaultEventAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the default event for the component this attribute is bound to.">この属性が関連付けられているコンポーネントの既定のイベント名。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultEventAttribute&quot; /&gt;.">指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.DefaultEventAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">値が等しいかどうかを確認するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したオブジェクトの値が現在の値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultEventAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultEventAttribute.Name">
      <summary vsli:raw="Gets the name of the default event for the component this attribute is bound to.">この属性が関連付けられているコンポーネントの既定のイベント名を取得します。</summary>
      <returns vsli:raw="The name of the default event for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">この属性が関連付けられているコンポーネントの既定のイベント名。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.DefaultPropertyAttribute">
      <summary vsli:raw="Specifies the default property for a component.">コンポーネントの既定のプロパティを指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.DefaultPropertyAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;, which is &lt;see langword=&quot;null&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">
        <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> の既定値 (<see langword="null" />) を指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the default property for the component this attribute is bound to.">この属性が関連付けられているコンポーネントの既定のプロパティ名。</param>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.DefaultPropertyAttribute&quot; /&gt;.">指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.DefaultPropertyAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">値が等しいかどうかを確認するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したオブジェクトの値が現在の値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DefaultPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.DefaultPropertyAttribute.Name">
      <summary vsli:raw="Gets the name of the default property for the component this attribute is bound to.">この属性が関連付けられているコンポーネントの既定のプロパティ名を取得します。</summary>
      <returns vsli:raw="The name of the default property for the component this attribute is bound to. The default value is &lt;see langword=&quot;null&quot; /&gt;.">この属性が関連付けられているコンポーネントの既定のプロパティ名。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner&quot; /&gt; event.">
        <see cref="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ActiveDesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost,System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="oldDesigner" vsli:raw="The document that is losing activation.">これからアクティブでなくなるドキュメント。</param>
      <param name="newDesigner" vsli:raw="The document that is gaining activation.">これからアクティブになるドキュメント。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.NewDesigner">
      <summary vsli:raw="Gets the document that is gaining activation.">これからアクティブになるドキュメントを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document gaining activation.">アクティブになるドキュメントを表す <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ActiveDesignerEventArgs.OldDesigner">
      <summary vsli:raw="Gets the document that is losing activation.">これからアクティブでなくなるドキュメントを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; that represents the document losing activation.">アクティブでなくなるドキュメントを表す <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ActiveDesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.ActiveDesignerEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.Design.ActiveDesignerEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.CheckoutException">
      <summary vsli:raw="The exception that is thrown when an attempt to check out a file that is checked into a source code management program is canceled or fails.">ソース コード管理プログラムにチェックインされているファイルのチェックアウトをキャンセルするか、チェックアウトが失敗した場合にスローされる例外。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.CheckoutException.Canceled">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class that specifies that the check out was canceled. This field is read-only.">チェックアウトがキャンセルされたことを示す、<see cref="T:System.ComponentModel.Design.CheckoutException" /> クラスの新しいインスタンスを初期化します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with no associated message or error code.">メッセージやエラー コードを関連付けずに、<see cref="T:System.ComponentModel.Design.CheckoutException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class using the specified serialization data and context.">指定したシリアル化データとコンテキストを使用して、<see cref="T:System.ComponentModel.Design.CheckoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">逆シリアル化に使用する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">逆シリアル化に使用する転送先。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message.">指定したメッセージを使用して、<see cref="T:System.ComponentModel.Design.CheckoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="A message describing the exception.">例外を説明するメッセージ。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified detailed description and the specified exception.">詳細説明と例外を指定して、<see cref="T:System.ComponentModel.Design.CheckoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="A detailed description of the error.">エラーの詳細説明。</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">この例外の原因である内部例外への参照。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CheckoutException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CheckoutException&quot; /&gt; class with the specified message and error code.">指定したメッセージおよびエラー コードを使用して、<see cref="T:System.ComponentModel.Design.CheckoutException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="A message describing the exception.">例外を説明するメッセージ。</param>
      <param name="errorCode" vsli:raw="The error code to pass.">渡すエラー コード。</param>
    </member>
    <member name="T:System.ComponentModel.Design.CommandID">
      <summary vsli:raw="Represents a unique command identifier that consists of a numeric command ID and a GUID menu group identifier.">数値コマンド ID と GUID メニュー グループ ID から構成される一意のコマンド ID を表します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.#ctor(System.Guid,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; class using the specified menu group GUID and command ID number.">指定したメニュー グループ GUID とコマンド ID 番号を使用して、<see cref="T:System.ComponentModel.Design.CommandID" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="menuGroup" vsli:raw="The GUID of the group that this menu command belongs to.">メニュー コマンドが属するグループの GUID。</param>
      <param name="commandID" vsli:raw="The numeric identifier of this menu command.">このメニュー コマンドの数値 ID。</param>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; instances are equal.">2 つの <see cref="T:System.ComponentModel.Design.CommandID" /> インスタンスが等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The object to compare.">比較対象のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is equivalent to this one; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したオブジェクトがこのオブジェクトに等しい場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.GetHashCode">
      <summary vsli:raw="Serves as a hash function for a particular type.">特定の型についてハッシュ関数として機能します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.Object&quot; /&gt;.">現在の <see cref="T:System.Object" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.CommandID.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the current object.">現在のオブジェクトを表す <see cref="T:System.String" /> を返します。</summary>
      <returns vsli:raw="A string that contains the command ID information, both the GUID and integer identifier.">GUID および整数 ID の両方のコマンド ID 情報を含む文字列。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.Guid">
      <summary vsli:raw="Gets the GUID of the menu group that the menu command identified by this &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; belongs to.">
        <see cref="T:System.ComponentModel.Design.CommandID" /> で識別されるメニュー コマンドが属するメニュー グループの GUID を取得します。</summary>
      <returns vsli:raw="The GUID of the command group for this command.">コマンドのコマンド グループの GUID。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.CommandID.ID">
      <summary vsli:raw="Gets the numeric command ID.">数値コマンド ID を取得します。</summary>
      <returns vsli:raw="The command ID number.">コマンド ID 番号。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event. This class cannot be inherited.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> イベントのデータを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangedEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="component" vsli:raw="The component that was changed.">変更されたコンポーネント。</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that represents the member that was changed.">変更されたメンバーを表す <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
      <param name="oldValue" vsli:raw="The old value of the changed member.">変更されたメンバーの変更前の値。</param>
      <param name="newValue" vsli:raw="The new value of the changed member.">変更されたメンバーの変更後の値。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Component">
      <summary vsli:raw="Gets the component that was modified.">変更されたコンポーネントを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the component that was modified.">変更されたコンポーネントを表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.Member">
      <summary vsli:raw="Gets the member that has been changed.">変更されたメンバーを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that indicates the member that has been changed.">変更されたメンバーを示す <see cref="T:System.ComponentModel.MemberDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.NewValue">
      <summary vsli:raw="Gets the new value of the changed member.">変更されたメンバーの変更後の値を取得します。</summary>
      <returns vsli:raw="The new value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">変更されたメンバーの変更後の値。 このプロパティは <see langword="null" /> に設定できます。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangedEventArgs.OldValue">
      <summary vsli:raw="Gets the old value of the changed member.">変更されたメンバーの変更前の値を取得します。</summary>
      <returns vsli:raw="The old value of the changed member. This property can be &lt;see langword=&quot;null&quot; /&gt;.">変更されたメンバーの変更前の値。 このプロパティは <see langword="null" /> に設定できます。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangedEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.Design.ComponentChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event. This class cannot be inherited.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> イベントのデータを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentChangingEventArgs.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="component" vsli:raw="The component that is about to be changed.">変更されようとしているコンポーネント。</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member of the component that is about to be changed.">変更されようとしているコンポーネントのメンバーを示す <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Component">
      <summary vsli:raw="Gets the component that is about to be changed or the component that is the parent container of the member that is about to be changed.">変更されようとしているコンポーネント、または変更されようとしているメンバーの親コンテナーであるコンポーネントを取得します。</summary>
      <returns vsli:raw="The component that is about to have a member changed.">変更されようとしているメンバーを持つコンポーネント。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentChangingEventArgs.Member">
      <summary vsli:raw="Gets the member that is about to be changed.">変更されようとしているメンバーを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; indicating the member that is about to be changed, if known, or &lt;see langword=&quot;null&quot; /&gt; otherwise.">変更されようとしているメンバーが判明している場合は、そのメンバーを示す <see cref="T:System.ComponentModel.MemberDescriptor" />。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentChangingEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentChangingEventArgs&quot; /&gt; event that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.Design.ComponentChangingEventArgs" /> イベント。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt; events.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" /> の各イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentEventArgs.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.ComponentEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="component" vsli:raw="The component that is the source of the event.">イベントのソースであるコンポーネント。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentEventArgs.Component">
      <summary vsli:raw="Gets the component associated with the event.">イベントに関連付けられているコンポーネントを取得します。</summary>
      <returns vsli:raw="The component associated with the event.">イベントに関連付けられているコンポーネント。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded&quot; /&gt;, &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving&quot; /&gt;, and &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved&quot; /&gt; events raised for component-level events.">コンポーネント レベルのイベントに対して発生する <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving" />、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved" /> の各イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.Design.ComponentEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ComponentRenameEventArgs.#ctor(System.Object,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="component" vsli:raw="The component to be renamed.">名前が変更されるコンポーネント。</param>
      <param name="oldName" vsli:raw="The old name of the component.">コンポーネントの変更前の名前。</param>
      <param name="newName" vsli:raw="The new name of the component.">コンポーネントの変更後の名前。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.Component">
      <summary vsli:raw="Gets the component that is being renamed.">名前が変更されるコンポーネントを取得します。</summary>
      <returns vsli:raw="The component that is being renamed.">名前が変更されるコンポーネント。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.NewName">
      <summary vsli:raw="Gets the name of the component after the rename event.">名前変更イベントが発生した後のコンポーネントの名前を取得します。</summary>
      <returns vsli:raw="The name of the component after the rename event.">名前変更イベントが発生した後のコンポーネントの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ComponentRenameEventArgs.OldName">
      <summary vsli:raw="Gets the name of the component before the rename event.">名前変更イベントが発生する前のコンポーネントの名前を取得します。</summary>
      <returns vsli:raw="The previous name of the component.">コンポーネントの変更前の名前。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ComponentRenameEventHandler">
      <summary vsli:raw="Represents the method that will handle a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentRename&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ComponentRenameEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.Design.ComponentRenameEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerCollection">
      <summary vsli:raw="Represents a collection of designers.">デザイナーのコレクションを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.Collections.IList)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified set of designers.">指定した一連のデザイナーを格納する、<see cref="T:System.ComponentModel.Design.DesignerCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="designers" vsli:raw="A list that contains the collection of designers to add.">追加するデザイナーのコレクションを含むリスト。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.#ctor(System.ComponentModel.Design.IDesignerHost[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; class that contains the specified designers.">指定したデザイナーを格納する、<see cref="T:System.ComponentModel.Design.DesignerCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="designers" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; objects to store.">格納する <see cref="T:System.ComponentModel.Design.IDesignerHost" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">コレクションの新しい列挙子を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">コレクションを列挙する <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">コレクションの要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">コレクションから要素がコピーされる 1 次元の <see cref="T:System.Array" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a new enumerator for this collection.">コレクションの新しい列挙子を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that enumerates the collection.">コレクションを列挙する <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Count">
      <summary vsli:raw="Gets the number of designers in the collection.">コレクション内のデザイナーの数を取得します。</summary>
      <returns vsli:raw="The number of designers in the collection.">コレクション内のデザイナーの数。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the designer at the specified index.">指定したインデックスにあるデザイナーを取得します。</summary>
      <param name="index" vsli:raw="The index of the designer to return.">返されるデザイナーのインデックス。</param>
      <returns vsli:raw="The designer at the specified index.">指定したインデックスにあるデザイナー。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">コレクションに格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the collection.">コレクションに含まれる要素の数です。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">コレクションへのアクセスの同期に使用できるオブジェクトです。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events.">
        <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> イベントおよび <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerEventArgs.#ctor(System.ComponentModel.Design.IDesignerHost)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.DesignerEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="host" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">ドキュメントの <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerEventArgs.Designer">
      <summary vsli:raw="Gets the host of the document.">ドキュメントのホストを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.IDesignerHost&quot; /&gt; of the document.">ドキュメントの <see cref="T:System.ComponentModel.Design.IDesignerHost" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed&quot; /&gt; events that are raised when a document is created or disposed of.">ドキュメントが作成または破棄されるときにそれぞれ発生する <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated" /> イベントと <see cref="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.Design.DesignerEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService">
      <summary vsli:raw="Provides a base class for getting and setting option values for a designer.">デザイナーのオプションの値を取得および設定するために使用する基本クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.DesignerOptionService" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.CreateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.String,System.Object)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name and adds it to the given parent.">名前を指定して新しい <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> を作成し、指定した親に追加します。</summary>
      <param name="parent" vsli:raw="The parent designer option collection. All collections have a parent except the root object collection.">デザイナー オプションの親コレクション。 ルート オブジェクトのコレクションを除き、すべてのコレクションが親を持ちます。</param>
      <param name="name" vsli:raw="The name of this collection.">このコレクションの名前。</param>
      <param name="value" vsli:raw="The object providing properties for this collection. Can be &lt;see langword=&quot;null&quot; /&gt; if the collection should not provide any properties.">このコレクションのプロパティを提供するオブジェクト。 コレクションがプロパティを提供しない場合は <see langword="null" /> でもかまいません。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="parent" /> または <paramref name="name" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is an empty string.">
        <paramref name="name" /> が空の文字列です。</exception>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; with the given name.">指定された名前を持つ新しい <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.PopulateOptionCollection(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Populates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> を値を読み込みます。</summary>
      <param name="options" vsli:raw="The collection to populate.">値を読み込むコレクション。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.ShowDialog(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection,System.Object)">
      <summary vsli:raw="Shows the options dialog box for the given object.">指定したオブジェクトのオプション ダイアログ ボックスを表示します。</summary>
      <param name="options" vsli:raw="The options collection containing the object to be invoked.">呼び出すオブジェクトを格納するオプション コレクション。</param>
      <param name="optionObject" vsli:raw="The actual options object.">実際のオプション オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box is shown; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ダイアログ ボックスが表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of an option defined in this package.">パッケージで定義したオプションの値を取得します。</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">オプションのバインド先となるページ。</param>
      <param name="valueName" vsli:raw="The name of the option value.">オプション値の名前。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> または <paramref name="valueName" /> が <see langword="null" /> です。</exception>
      <returns vsli:raw="The value of the option named &lt;paramref name=&quot;valueName&quot; /&gt;.">
        <paramref name="valueName" /> という名前のオプションの値。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.System#ComponentModel#Design#IDesignerOptionService#SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of an option defined in this package.">パッケージで定義したオプションの値を設定します。</summary>
      <param name="pageName" vsli:raw="The page to which the option is bound.">オプションのバインド先となるページ。</param>
      <param name="valueName" vsli:raw="The name of the option value.">オプション値の名前。</param>
      <param name="value" vsli:raw="The value of the option.">オプションの値。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pageName&quot; /&gt; or &lt;paramref name=&quot;valueName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="pageName" /> または <paramref name="valueName" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.Options">
      <summary vsli:raw="Gets the options collection for this service.">このサービスのオプション コレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; populated with available designer options.">使用できるデザイナー オプションが設定される <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection">
      <summary vsli:raw="Contains a collection of designer options. This class cannot be inherited.">デザイナー オプションのコレクションを格納します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to a compatible one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified index of the target array.">コレクション全体を互換性のある 1 次元の <see cref="T:System.Array" /> にコピーします。コピー操作は、コピー先の配列の指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the collection. The &lt;paramref name=&quot;array&quot; /&gt; must have zero-based indexing.">コレクションから要素がコピーされる 1 次元の <see cref="T:System.Array" />。 <paramref name="array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">このコレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate this collection.">このコレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.IndexOf(System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection)">
      <summary vsli:raw="Returns the index of the first occurrence of a given value in a range of this collection.">このコレクションの範囲で、指定した値が最初に見つかった位置のインデックスを返します。</summary>
      <param name="value" vsli:raw="The object to locate in the collection.">コレクション内で検索するオブジェクト。</param>
      <returns vsli:raw="The index of the first occurrence of value within the entire collection, if found; otherwise, the lower bound of the collection minus 1.">コレクション全体で値が見つかった場合は、その値が最初に見つかった位置のインデックス。それ以外の場合は、コレクションの下限 - 1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.ShowDialog">
      <summary vsli:raw="Displays a dialog box user interface (UI) with which the user can configure the options in this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">ユーザーがこの <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> のオプションを構成できるダイアログ ボックス ユーザー インターフェイス (UI) を表示します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dialog box can be displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ダイアログ ボックスを表示できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> に項目を追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> に追加する <see cref="T:System.Collections.IList" />。</param>
      <returns vsli:raw="The position into which the new element was inserted.">新しい要素が挿入された位置。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">コレクションからすべての項目を削除します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">コレクションに特定の値が格納されているかどうかを判断します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">コレクション内で検索する <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Object" /> がコレクション内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">コレクション内での指定した項目のインデックスを調べます。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">コレクション内で検索する <see cref="T:System.Object" />。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at the specified index.">コレクション内の指定したインデックスの位置に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">コレクションに挿入する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">特定のオブジェクトの最初に出現したものをコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">コレクションから削除する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the collection item at the specified index.">指定したインデックスにあるコレクション項目を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">削除する項目の 0 から始まるインデックス。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Count">
      <summary vsli:raw="Gets the number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">この <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> が格納する子オプション コレクションの数を取得します。</summary>
      <returns vsli:raw="The number of child option collections this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt; contains.">この <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> が格納する子オプション コレクションの数。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the child collection at the given index.">指定したインデックス位置にある子コレクションを取得します。</summary>
      <param name="index" vsli:raw="The zero-based index of the child collection to get.">取得する子コレクションの、0 から始まるインデックス。</param>
      <returns vsli:raw="The child collection at the specified index.">指定したインデックス位置にある子コレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Item(System.String)">
      <summary vsli:raw="Gets the child collection at the given name.">指定した名前を持つ子コレクションを取得します。</summary>
      <param name="name" vsli:raw="The name of the child collection.">子コレクションの名前。</param>
      <returns vsli:raw="The child collection with the name specified by the &lt;paramref name=&quot;name&quot; /&gt; parameter, or &lt;see langword=&quot;null&quot; /&gt; if the name is not found.">
        <paramref name="name" /> パラメーターで指定された名前を持つ子コレクション。名前が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Name">
      <summary vsli:raw="Gets the name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">この <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> の名前を取得します。</summary>
      <returns vsli:raw="The name of this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;.">この <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> の名前。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Parent">
      <summary vsli:raw="Gets the parent collection object.">親コレクション オブジェクトを取得します。</summary>
      <returns vsli:raw="The parent collection object, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">親コレクション オブジェクト。親が存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.Properties">
      <summary vsli:raw="Gets the collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">この <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> によって提供されるプロパティのコレクションと、そのすべての子を取得します。</summary>
      <returns vsli:raw="The collection of properties offered by this &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection&quot; /&gt;, along with all of its children.">この <see cref="T:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection" /> によって提供されるプロパティのコレクションと、そのすべての子。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized and, therefore, thread safe.">コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションへのアクセスが同期されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">コレクションへのアクセスの同期に使用できるオブジェクトです。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">コレクションが固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerOptionService.DesignerOptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <returns vsli:raw="The element at the specified index.">指定したインデックス位置にある要素。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransaction">
      <summary vsli:raw="Provides a way to group a series of design-time actions to improve performance and enable most types of changes to be undone.">パフォーマンスを向上し、ほとんどの変更内容を元に戻せるようにするために、デザイン時の一連の操作をグループ化する手段を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class with no description.">説明を指定せずに <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; class using the specified transaction description.">トランザクションの説明を指定して、<see cref="T:System.ComponentModel.Design.DesignerTransaction" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="description" vsli:raw="A description for this transaction.">このトランザクションの説明。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Cancel">
      <summary vsli:raw="Cancels the transaction and attempts to roll back the changes made by the events of the transaction.">トランザクションをキャンセルし、そのトランザクションのイベントによって行われた変更をすべて元に戻そうとします。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Commit">
      <summary vsli:raw="Commits this transaction.">トランザクションをコミットします。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.Finalize">
      <summary vsli:raw="Releases the resources associated with this object. This override commits this transaction if it was not already committed.">オブジェクトと関連付けられたリソースを解放します。 このトランザクションがまだコミットされていなかった場合、このオーバーライドがこのトランザクションをコミットします。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCancel">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Cancel&quot; /&gt; event.">
        <see langword="Cancel" /> イベントを発生させます。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.OnCommit">
      <summary vsli:raw="Performs the actual work of committing a transaction.">トランザクションの実際のコミット処理を実行します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransaction.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Canceled">
      <summary vsli:raw="Gets a value indicating whether the transaction was canceled.">トランザクションがキャンセルされたかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was canceled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">トランザクションがキャンセルされた場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Committed">
      <summary vsli:raw="Gets a value indicating whether the transaction was committed.">トランザクションがコミットされたかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the transaction was committed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">トランザクションがコミットされた場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransaction.Description">
      <summary vsli:raw="Gets a description for the transaction.">トランザクションの説明を取得します。</summary>
      <returns vsli:raw="A description for the transaction.">トランザクションの説明。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events.">
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> イベントおよび <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class, using the specified value that indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">デザイナーがトランザクションに対して <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> を呼び出したかどうかを示す値を指定して、<see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">トランザクションがコミットされたかどうかを示す値。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.#ctor(System.Boolean,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="commit" vsli:raw="A value indicating whether the transaction was committed.">トランザクションがコミットされたかどうかを示す値。</param>
      <param name="lastTransaction" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このトランザクションが最後に閉じるトランザクションである場合、<see langword="true" />。それ以外の場合は、<see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.LastTransaction">
      <summary vsli:raw="Gets a value indicating whether this is the last transaction to close.">このトランザクションが最後に閉じるトランザクションかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this is the last transaction to close; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このトランザクションが最後に閉じるトランザクションである場合、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerTransactionCloseEventArgs.TransactionCommitted">
      <summary vsli:raw="Indicates whether the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction.">デザイナーがトランザクションに対して <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> を呼び出したかどうかを示します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer called &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on the transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">デザイナーがトランザクションに対して <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> を呼び出した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerTransactionCloseEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; and &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; events of a designer.">デザイナーの <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> イベントと <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.Design.DesignerTransactionCloseEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerb">
      <summary vsli:raw="Represents a verb that can be invoked from a designer.">デザイナーから呼び出すことができる動詞を表します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">ユーザーに対して表示されるメニュー コマンドのテキスト。</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">動詞のアクションを実行するイベント ハンドラー。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.#ctor(System.String,System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text" vsli:raw="The text of the menu command that is shown to the user.">ユーザーに対して表示されるメニュー コマンドのテキスト。</param>
      <param name="handler" vsli:raw="The event handler that performs the actions of the verb.">動詞のアクションを実行するイベント ハンドラー。</param>
      <param name="startCommandID" vsli:raw="The starting command ID for this verb. By default, the designer architecture sets aside a range of command IDs for verbs. You can override this by providing a custom command ID.">動詞の開始コマンド ID。 既定では、動詞のコマンド ID の範囲は、デザイナー アーキテクチャによって指定されます。 カスタムのコマンド ID を指定することにより、この既定値をオーバーライドできます。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerb.ToString">
      <summary vsli:raw="Overrides &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt;.">
        <see cref="M:System.Object.ToString" /> をオーバーライドします。</summary>
      <returns vsli:raw="The verb's text, or an empty string (&quot;&quot;) if the text field is empty.">動詞のテキスト。テキスト フィールドが空の場合は空の文字列 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Description">
      <summary vsli:raw="Gets or sets the description of the menu item for the verb.">動詞に関するメニュー項目の説明を取得または設定します。</summary>
      <returns vsli:raw="A string describing the menu item.">メニュー項目を説明する文字列。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerb.Text">
      <summary vsli:raw="Gets the text description for the verb command on the menu.">メニュー上の動詞コマンドを説明するテキストを取得します。</summary>
      <returns vsli:raw="A description for the verb command.">動詞コマンドの説明。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesignerVerbCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.#ctor(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; class using the specified array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" /> オブジェクトの指定した配列を使用して、<see cref="T:System.ComponentModel.Design.DesignerVerb" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array that indicates the verbs to contain within the collection.">コレクション内に格納する動詞を示す <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Add(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to the collection.">指定された <see cref="T:System.ComponentModel.Design.DesignerVerb" /> をコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add to the collection.">コレクションに追加する <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns vsli:raw="The index in the collection at which the verb was added.">動詞が追加された位置を示す、コレクション内のインデックス。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerb[])">
      <summary vsli:raw="Adds the specified set of designer verbs to the collection.">指定した一連のデザイナー動詞をコレクションに追加します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; objects to add to the collection.">コレクションに追加する <see cref="T:System.ComponentModel.Design.DesignerVerb" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.AddRange(System.ComponentModel.Design.DesignerVerbCollection)">
      <summary vsli:raw="Adds the specified collection of designer verbs to the collection.">デザイナー動詞の指定したコレクションをコレクションに追加します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; to add to the collection.">コレクションに追加する <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Contains(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets a value indicating whether the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; exists in the collection.">指定した <see cref="T:System.ComponentModel.Design.DesignerVerb" /> がコレクション内に存在するかどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to search for in the collection.">コレクション内で検索される <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object exists in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したオブジェクトがコレクション内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.CopyTo(System.ComponentModel.Design.DesignerVerb[],System.Int32)">
      <summary vsli:raw="Copies the collection members to the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; array beginning at the specified destination index.">指定したインデックスを開始位置として、指定した <see cref="T:System.ComponentModel.Design.DesignerVerb" /> 配列にコレクション メンバーをコピーします。</summary>
      <param name="array" vsli:raw="The array to copy collection members to.">コレクション メンバーのコピー先の配列。</param>
      <param name="index" vsli:raw="The destination index to begin copying to.">コピーの開始位置を示す、コピー先の配列内のインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.IndexOf(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.Design.DesignerVerb" /> のインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; whose index to get in the collection.">コレクション内のインデックスを取得する対象の <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
      <returns vsli:raw="The index of the specified object if it is found in the list; otherwise, -1.">指定したオブジェクトのインデックスがリスト内に見つかった場合はそのインデックス。見つからなかった場合は -1。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Insert(System.Int32,System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">指定したインデックス位置に指定した <see cref="T:System.ComponentModel.Design.DesignerVerb" /> を挿入します。</summary>
      <param name="index" vsli:raw="The index in the collection at which to insert the verb.">動詞を挿入する位置を示す、コレクション内のインデックス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to insert in the collection.">コレクションに挿入する <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnClear">
      <summary>
        <see langword="Clear" /> イベントを発生させます。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnInsert(System.Int32,System.Object)">
      <summary>
        <see langword="Insert" /> イベントを発生させます。</summary>
      <param name="index">項目を挿入する位置のインデックス。</param>
      <param name="value">挿入するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnRemove(System.Int32,System.Object)">
      <summary>
        <see langword="Remove" /> イベントを発生させます。</summary>
      <param name="index">項目を削除する位置のインデックス。</param>
      <param name="value">削除するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnSet(System.Int32,System.Object,System.Object)">
      <summary>
        <see langword="Set" /> イベントを発生させます。</summary>
      <param name="index">項目を設定する位置のインデックス。</param>
      <param name="oldValue">古いオブジェクト。</param>
      <param name="newValue">新しいオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.OnValidate(System.Object)">
      <summary vsli:raw="Raises the &lt;see langword=&quot;Validate&quot; /&gt; event.">
        <see langword="Validate" /> イベントを発生させます。</summary>
      <param name="value" vsli:raw="The object to validate.">検証対象のオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.Design.DesignerVerbCollection.Remove(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; from the collection.">指定された <see cref="T:System.ComponentModel.Design.DesignerVerb" /> をコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove from the collection.">コレクションから削除する <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesignerVerbCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at the specified index.">指定したインデックス位置にある <see cref="T:System.ComponentModel.Design.DesignerVerb" /> を取得または設定します。</summary>
      <param name="index" vsli:raw="The index at which to get or set the &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.DesignerVerb" /> を取得または設定する位置のインデックス。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; at each valid index in the collection.">コレクション内の有効な各インデックスにある <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContext">
      <summary vsli:raw="Represents a design-time license context that can support a license provider at design time.">デザイン時にライセンス プロバイダーをサポートできるデザイン時ライセンス コンテキストを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="Gets a saved license key.">保存されているライセンス キーを取得します。</summary>
      <param name="type" vsli:raw="The type of the license key.">ライセンス キーの型。</param>
      <param name="resourceAssembly" vsli:raw="The assembly to get the key from.">キーの取得元のアセンブリ。</param>
      <returns vsli:raw="The saved license key that matches the specified type.">指定した型と一致する、保存されているライセンス キー。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="Sets a saved license key.">保存されているライセンス キーを設定します。</summary>
      <param name="type" vsli:raw="The type of the license key.">ライセンス キーの型。</param>
      <param name="key" vsli:raw="The license key.">ライセンス キー。</param>
    </member>
    <member name="P:System.ComponentModel.Design.DesigntimeLicenseContext.UsageMode">
      <summary vsli:raw="Gets the license usage mode.">ライセンス使用モードを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; indicating the licensing mode for the context.">コンテキストのライセンス使用モードを示す <see cref="T:System.ComponentModel.LicenseUsageMode" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.DesigntimeLicenseContextSerializer">
      <summary vsli:raw="Provides support for design-time license context serialization.">デザイン時ライセンス コンテキストのシリアル化をサポートできるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.DesigntimeLicenseContextSerializer.Serialize(System.IO.Stream,System.String,System.ComponentModel.Design.DesigntimeLicenseContext)">
      <summary vsli:raw="Serializes the licenses within the specified design-time license context using the specified key and output stream.">指定したキーと出力ストリームを使用して、指定したデザイン時ライセンス コンテキスト内のライセンスをシリアル化します。</summary>
      <param name="o" vsli:raw="The stream to output to.">出力先のストリーム。</param>
      <param name="cryptoKey" vsli:raw="The key to use for encryption.">暗号化のために使用するキー。</param>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesigntimeLicenseContext&quot; /&gt; indicating the license context.">ライセンス コンテキストを示す <see cref="T:System.ComponentModel.Design.DesigntimeLicenseContext" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.HelpContextType">
      <summary vsli:raw="Defines identifiers that indicate information about the context in which a request for Help information originated.">ヘルプ情報の要求元であるコンテキストに関する情報を示す識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Ambient">
      <summary vsli:raw="A general context.">標準コンテキスト。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Selection">
      <summary vsli:raw="A selection.">選択項目。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.ToolWindowSelection">
      <summary vsli:raw="A tool window selection.">ツール ウィンドウの選択項目。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpContextType.Window">
      <summary vsli:raw="A window.">ウィンドウ。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordAttribute">
      <summary vsli:raw="Specifies the context keyword for a class or member. This class cannot be inherited.">クラスまたはメンバーのコンテキスト キーワードを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;. This field is read-only.">
        <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> の既定値を表します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="keyword" vsli:raw="The Help keyword value.">ヘルプ キーワード値。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;keyword&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="keyword" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; class from the given type.">特定の型の <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="t" vsli:raw="The type from which the Help keyword will be taken.">ヘルプ キーワードの取得元となる型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="t" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; instances are equal.">2 つの <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> インスタンスが等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> と比較する <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した <see langword="true" /> が現在の <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> と等しい場合は <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.Design.HelpKeywordAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.HelpKeywordAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines whether the Help keyword is &lt;see langword=&quot;null&quot; /&gt;.">ヘルプ キーワードが <see langword="null" /> かどうかを判断します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the Help keyword is &lt;see langword=&quot;null&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ヘルプ キーワードが <see langword="true" /> の場合は <see langword="null" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.HelpKeywordAttribute.HelpKeyword">
      <summary vsli:raw="Gets the Help keyword supplied by this attribute.">この属性で指定されたヘルプ キーワードを取得します。</summary>
      <returns vsli:raw="The Help keyword supplied by this attribute.">この属性で指定されたヘルプ キーワードです。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.HelpKeywordType">
      <summary vsli:raw="Defines identifiers that indicate the type of a Help keyword.">ヘルプ キーワードの種類を示す識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.F1Keyword">
      <summary vsli:raw="A keyword that F1 was pressed to request help about.">関連するヘルプ情報を要求するために F1 キーが押されたキーワード。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.FilterKeyword">
      <summary vsli:raw="A filter keyword.">フィルター キーワード。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.HelpKeywordType.GeneralKeyword">
      <summary vsli:raw="A general keyword.">標準キーワード。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentChangeService">
      <summary vsli:raw="Provides an interface to add and remove the event handlers for events that add, change, remove or rename components, and provides methods to raise a &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; or &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">コンポーネントの追加、変更、削除、または名前変更のイベントのイベント ハンドラーを追加および削除するためのインターフェイスを提供すると共に、<see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> イベントまたは <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> イベントを発生させるメソッドを提供します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdded">
      <summary vsli:raw="Occurs when a component has been added.">コンポーネントが追加されたときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentAdding">
      <summary vsli:raw="Occurs when a component is in the process of being added.">コンポーネントが追加されているときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged">
      <summary vsli:raw="Occurs when a component has been changed.">コンポーネントが変更されたときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging">
      <summary vsli:raw="Occurs when a component is in the process of being changed.">コンポーネントが変更されているときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoved">
      <summary vsli:raw="Occurs when a component has been removed.">コンポーネントが削除されたときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRemoving">
      <summary vsli:raw="Occurs when a component is in the process of being removed.">コンポーネントが削除されているときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IComponentChangeService.ComponentRename">
      <summary vsli:raw="Occurs when a component is renamed.">コンポーネントの名前が変更されたときに発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged(System.Object,System.ComponentModel.MemberDescriptor,System.Object,System.Object)">
      <summary vsli:raw="Announces to the component change service that a particular component has changed.">コンポーネント変更サービスに対して、特定のコンポーネントが変更されたことを通知します。</summary>
      <param name="component" vsli:raw="The component that has changed.">変更されたコンポーネント。</param>
      <param name="member" vsli:raw="The member that has changed. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">変更されたメンバー。 変更が単一のメンバーに関連していない場合は <see langword="null" /> になります。</param>
      <param name="oldValue" vsli:raw="The old value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">変更前のメンバーの値。 メンバーが <see langword="null" /> ではない場合にだけ有効です。</param>
      <param name="newValue" vsli:raw="The new value of the member. This is valid only if the member is not &lt;see langword=&quot;null&quot; /&gt;.">変更後のメンバーの値。 メンバーが <see langword="null" /> ではない場合にだけ有効です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Announces to the component change service that a particular component is changing.">コンポーネント変更サービスに対して、特定のコンポーネントがこれから変更されることを通知します。</summary>
      <param name="component" vsli:raw="The component that is about to change.">変更されようとしているコンポーネント。</param>
      <param name="member" vsli:raw="The member that is changing. This is &lt;see langword=&quot;null&quot; /&gt; if this change is not related to a single member.">変更されようとしているメンバー。 変更が単一のメンバーに関連していない場合は <see langword="null" /> になります。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentDiscoveryService">
      <summary vsli:raw="Enables enumeration of components at design time.">デザイン時のコンポーネントの列挙を有効にします。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentDiscoveryService.GetComponentTypes(System.ComponentModel.Design.IDesignerHost,System.Type)">
      <summary vsli:raw="Gets the list of available component types.">利用可能なコンポーネント型のリストを取得します。</summary>
      <param name="designerHost" vsli:raw="The designer host providing design-time services. Can be &lt;see langword=&quot;null&quot; /&gt;.">デザイン時サービスを提供するデザイナー ホスト。 <see langword="null" /> の可能性があります。</param>
      <param name="baseType" vsli:raw="The base type specifying the components to retrieve. Can be &lt;see langword=&quot;null&quot; /&gt;.">取得するコンポーネントを指定する基本型。 <see langword="null" /> の可能性があります。</param>
      <returns vsli:raw="The list of available component types.">利用可能なコンポーネント型のリスト。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IComponentInitializer">
      <summary vsli:raw="Provides a set of recommended default values during component creation.">コンポーネント作成中に推奨される既定値のセットを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeExistingComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Restores an instance of a component to its default state.">コンポーネントのインスタンスを既定の状態に戻します。</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to reset the component's state.">コンポーネントの状態をリセットするために使用する、名前と値のペアで構成された既定のプロパティ値のディクショナリ。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IComponentInitializer.InitializeNewComponent(System.Collections.IDictionary)">
      <summary vsli:raw="Initializes a new component using a set of recommended values.">推奨値のセットを使用して、新しいコンポーネントを初期化します。</summary>
      <param name="defaultValues" vsli:raw="A dictionary of default property values, which are name/value pairs, with which to initialize the component's state.">コンポーネントの状態を初期化するために使用する、名前と値のペアで構成された既定のプロパティ値のディクショナリ。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesigner">
      <summary vsli:raw="Provides the basic framework for building a custom designer.">カスタム デザイナーを構築するための基本フレームワークを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.DoDefaultAction">
      <summary vsli:raw="Performs the default action for this designer.">デザイナーの既定のアクションを実行します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesigner.Initialize(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes the designer with the specified component.">コンポーネントを指定して、デザイナーを初期化します。</summary>
      <param name="component" vsli:raw="The component to associate with this designer.">デザイナーに関連付けるコンポーネント。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Component">
      <summary vsli:raw="Gets the base component that this designer is designing.">デザイナーがデザインする基本コンポーネントを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; indicating the base component that this designer is designing.">デザイナーがデザインする基本コンポーネントを示す <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesigner.Verbs">
      <summary vsli:raw="Gets a collection of the design-time verbs supported by the designer.">デザイナーでサポートされているデザイン時動詞のコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the verbs supported by the designer, or &lt;see langword=&quot;null&quot; /&gt; if the component has no verbs.">デザイナーでサポートされている動詞を含む <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />。コンポーネントに動詞がない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerEventService">
      <summary vsli:raw="Provides event notifications when root designers are added and removed, when a selected component changes, and when the current root designer changes.">ルート デザイナーが追加および削除されたとき、選択したコンポーネントが変更されたとき、および現在のルート デザイナーが変更されたときにイベント通知を提供します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.ActiveDesignerChanged">
      <summary vsli:raw="Occurs when the current root designer changes.">現在のルート デザイナーが変更されたときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerCreated">
      <summary vsli:raw="Occurs when a root designer is created.">ルート デザイナーが作成されたときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.DesignerDisposed">
      <summary vsli:raw="Occurs when a root designer for a document is disposed.">ドキュメントのルート デザイナーが破棄されるときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerEventService.SelectionChanged">
      <summary vsli:raw="Occurs when the current design-view selection changes.">現在のデザイン ビューで選択されている内容が変更されたときに発生します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.ActiveDesigner">
      <summary vsli:raw="Gets the root designer for the currently active document.">現在アクティブなドキュメントのルート デザイナーを取得します。</summary>
      <returns vsli:raw="The currently active document, or &lt;see langword=&quot;null&quot; /&gt; if there is no active document.">現在アクティブなドキュメント。アクティブなドキュメントがない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerEventService.Designers">
      <summary vsli:raw="Gets a collection of root designers for design documents that are currently active in the development environment.">開発環境で現在アクティブなデザイン ドキュメントのルート デザイナーのコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerCollection&quot; /&gt; containing the root designers that have been created and not yet disposed.">作成され、まだ破棄されていないルート デザイナーを格納している <see cref="T:System.ComponentModel.Design.DesignerCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerFilter">
      <summary vsli:raw="Provides an interface that enables a designer to access and filter the dictionaries of a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that stores the property, attribute, and event descriptors that a component designer can expose to the design-time environment.">コンポーネント デザイナーがデザイン時環境に対して公開できるプロパティ、属性、イベントの各記述子を格納する <see cref="T:System.ComponentModel.TypeDescriptor" /> のディクショナリにデザイナーがアクセスし、フィルター処理を実行できるようにするインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">派生クラスでオーバーライドされた場合、デザイナーが <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じて公開する一連の属性の項目を変更または削除できるようにします。</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">コンポーネントのクラスの <see cref="T:System.Attribute" /> オブジェクト。 属性のディクショナリ内でのキーは、属性の <see cref="P:System.Attribute.TypeId" /> 値です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">派生クラスでオーバーライドされた場合、デザイナーが <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じて公開する一連のイベントの項目を変更または削除できるようになります。</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">コンポーネントのクラスのイベントを表す <see cref="T:System.ComponentModel.EventDescriptor" /> オブジェクト。 イベントのディクショナリ内でのキーは、イベント名です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PostFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to change or remove items from the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">派生クラスでオーバーライドされた場合、デザイナーが <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じて公開する一連のプロパティの項目を変更または削除できるようになります。</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">コンポーネントのクラスのプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクト。 プロパティのディクショナリ内でのキーは、プロパティ名です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterAttributes(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of attributes that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">派生クラスでオーバーライドされた場合、デザイナーが <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じて公開する一連の属性に項目を追加できるようにします。</summary>
      <param name="attributes" vsli:raw="The &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects for the class of the component. The keys in the dictionary of attributes are the &lt;see cref=&quot;P:System.Attribute.TypeId&quot; /&gt; values of the attributes.">コンポーネントのクラスの <see cref="T:System.Attribute" /> オブジェクト。 属性のディクショナリ内でのキーは、属性の <see cref="P:System.Attribute.TypeId" /> 値です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterEvents(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of events that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">派生クラスでオーバーライドされた場合、デザイナーが <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じて公開する一連のイベントに項目を追加できるようにします。</summary>
      <param name="events" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects that represent the events of the class of the component. The keys in the dictionary of events are event names.">コンポーネントのクラスのイベントを表す <see cref="T:System.ComponentModel.EventDescriptor" /> オブジェクト。 イベントのディクショナリ内でのキーは、イベント名です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerFilter.PreFilterProperties(System.Collections.IDictionary)">
      <summary vsli:raw="When overridden in a derived class, allows a designer to add items to the set of properties that it exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">派生クラスでオーバーライドされた場合、デザイナーが <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じて公開する一連のプロパティに項目を追加できるようにします。</summary>
      <param name="properties" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that represent the properties of the class of the component. The keys in the dictionary of properties are property names.">コンポーネントのクラスのプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクト。 プロパティのディクショナリ内でのキーは、プロパティ名です。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHost">
      <summary vsli:raw="Provides an interface for managing designer transactions and components.">デザイナーのトランザクションおよびコンポーネントを管理するためのインターフェイスを提供します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Activated">
      <summary vsli:raw="Occurs when this designer is activated.">デザイナーがアクティブになるときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.Deactivated">
      <summary vsli:raw="Occurs when this designer is deactivated.">デザイナーがアクティブでなくなるときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.LoadComplete">
      <summary vsli:raw="Occurs when this designer completes loading its document.">デザイナーがドキュメントの読み込みを完了したときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosed&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosed" /> イベントのイベント ハンドラーを追加します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionClosing&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionClosing" /> イベントのイベント ハンドラーを追加します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpened&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpened" /> イベントのイベント ハンドラーを追加します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening">
      <summary vsli:raw="Adds an event handler for the &lt;see cref=&quot;E:System.ComponentModel.Design.IDesignerHost.TransactionOpening&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IDesignerHost.TransactionOpening" /> イベントのイベント ハンドラーを追加します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.Activate">
      <summary vsli:raw="Activates the designer that this host is hosting.">ホストしているデザイナーをアクティブにします。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type)">
      <summary vsli:raw="Creates a component of the specified type and adds it to the design document.">指定した型のコンポーネントを作成し、そのコンポーネントをデザイン ドキュメントに追加します。</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">作成するコンポーネントの型。</param>
      <returns vsli:raw="The newly created component.">新規作成したコンポーネント。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateComponent(System.Type,System.String)">
      <summary vsli:raw="Creates a component of the specified type and name, and adds it to the design document.">指定した型および名前のコンポーネントを作成し、そのコンポーネントをデザイン ドキュメントに追加します。</summary>
      <param name="componentClass" vsli:raw="The type of the component to create.">作成するコンポーネントの型。</param>
      <param name="name" vsli:raw="The name for the component.">コンポーネントの名前。</param>
      <returns vsli:raw="The newly created component.">新規作成したコンポーネント。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality.">一連のイベントをカプセル化することでパフォーマンスを向上させ、"元に戻す" 機能や "やり直し" 機能をサポートできるようにする <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> を作成します。</summary>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you complete the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">
        <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> の新しいインスタンス。 トランザクションの手順が完了したら、このオブジェクトに対して <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> を呼び出す必要があります。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.CreateTransaction(System.String)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt; that can encapsulate event sequences to improve performance and enable undo and redo support functionality, using the specified transaction description.">指定したトランザクションの説明を使用して、一連のイベントをカプセル化することでパフォーマンスを向上させ、"元に戻す" 機能や "やり直し" 機能をサポートできるようにする <see cref="T:System.ComponentModel.Design.DesignerTransaction" /> を作成します。</summary>
      <param name="description" vsli:raw="A title or description for the newly created transaction.">新規作成したトランザクションのタイトルまたは説明。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerTransaction&quot; /&gt;. When you have completed the steps in your transaction, you should call &lt;see cref=&quot;M:System.ComponentModel.Design.DesignerTransaction.Commit&quot; /&gt; on this object.">新しい <see cref="T:System.ComponentModel.Design.DesignerTransaction" />。 トランザクションの手順が完了したら、このオブジェクトに対して <see cref="M:System.ComponentModel.Design.DesignerTransaction.Commit" /> を呼び出す必要があります。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.DestroyComponent(System.ComponentModel.IComponent)">
      <summary vsli:raw="Destroys the specified component and removes it from the designer container.">指定したコンポーネントを破棄し、デザイナー コンテナーからそのコンポーネントを削除します。</summary>
      <param name="component" vsli:raw="The component to destroy.">破棄するコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetDesigner(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the designer instance that contains the specified component.">指定したコンポーネントを格納しているデザイナー インスタンスを取得します。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to retrieve the designer for.">デザイナーを取得する対象の <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if there is no designer for the specified component.">
        <see cref="T:System.ComponentModel.Design.IDesigner" />。指定したコンポーネントのデザイナーがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerHost.GetType(System.String)">
      <summary vsli:raw="Gets an instance of the specified, fully qualified type name.">指定した完全限定型名のインスタンスを取得します。</summary>
      <param name="typeName" vsli:raw="The name of the type to load.">読み込む型の名前。</param>
      <returns vsli:raw="The type object for the specified type name, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be found.">指定した型名の型オブジェクト。型が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Container">
      <summary vsli:raw="Gets the container for this designer host.">デザイナー ホストのコンテナーを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; for this host.">ホストの <see cref="T:System.ComponentModel.IContainer" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.InTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently in a transaction.">デザイナー ホストが現在トランザクションを実行中かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a transaction is in progress; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">トランザクションを実行中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.Loading">
      <summary vsli:raw="Gets a value indicating whether the designer host is currently loading the document.">デザイナー ホストが現在ドキュメントを読み込み中かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer host is currently loading the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">デザイナー ホストがドキュメントを読み込み中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponent">
      <summary vsli:raw="Gets the instance of the base class used as the root component for the current design.">現在のデザインのルート コンポーネントとして使用される、基本クラスのインスタンスを取得します。</summary>
      <returns vsli:raw="The instance of the root component class.">ルート コンポーネント クラスのインスタンス。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.RootComponentClassName">
      <summary vsli:raw="Gets the fully qualified name of the class being designed.">デザイン対象のクラスの完全限定名を取得します。</summary>
      <returns vsli:raw="The fully qualified name of the base component class.">基本コンポーネント クラスの完全限定名。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHost.TransactionDescription">
      <summary vsli:raw="Gets the description of the current transaction.">現在のトランザクションの説明を取得します。</summary>
      <returns vsli:raw="A description of the current transaction.">現在のトランザクションの説明。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerHostTransactionState">
      <summary vsli:raw="Specifies methods for the designer host to report on the state of transactions.">トランザクションの状態について報告するデザイナー ホストのメソッドを指定します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.IDesignerHostTransactionState.IsClosingTransaction">
      <summary vsli:raw="Gets a value indicating whether the designer host is closing a transaction.">デザイナー ホストがトランザクションを終了中かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is closing a transaction; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">デザイナーがトランザクションを終了中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IDesignerOptionService">
      <summary vsli:raw="Provides access to the designer options located on the Tools menu under the Options command in the Visual Studio development environment.">Visual Studio 開発環境で **[ツール] メニューの [オプション]** コマンドにある各デザイナー オプションへのアクセスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.GetOptionValue(System.String,System.String)">
      <summary vsli:raw="Gets the value of the specified Windows Forms Designer option.">指定した Windows フォーム デザイナー‏ オプションの値を取得します。</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">オプションを定義するページの名前。</param>
      <param name="valueName" vsli:raw="The name of the option property.">オプション プロパティの名前。</param>
      <returns vsli:raw="The value of the specified option.">指定したオプションの値。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDesignerOptionService.SetOptionValue(System.String,System.String,System.Object)">
      <summary vsli:raw="Sets the value of the specified Windows Forms Designer option.">指定した Windows フォーム デザイナー‏ オプションの値を設定します。</summary>
      <param name="pageName" vsli:raw="The name of the page that defines the option.">オプションを定義するページの名前。</param>
      <param name="valueName" vsli:raw="The name of the option property.">オプション プロパティの名前。</param>
      <param name="value" vsli:raw="The new value.">新しい値。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IDictionaryService">
      <summary vsli:raw="Provides a basic, component site-specific, key-value pair dictionary through a service that a designer can use to store user-defined data.">サービスを通じて、デザイナーがユーザー定義データを格納するために使用できる、基本的な、コンポーネント サイト固有の、キーと値のペアのディクショナリを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetKey(System.Object)">
      <summary vsli:raw="Gets the key corresponding to the specified value.">指定した値に対応するキーを取得します。</summary>
      <param name="value" vsli:raw="The value to look up in the dictionary.">ディクショナリ内で検索する値。</param>
      <returns vsli:raw="The associated key, or &lt;see langword=&quot;null&quot; /&gt; if no key exists.">関連付けられているキー。キーがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.GetValue(System.Object)">
      <summary vsli:raw="Gets the value corresponding to the specified key.">指定したキーに対応する値を取得します。</summary>
      <param name="key" vsli:raw="The key to look up the value for.">値を検索する対象のキー。</param>
      <returns vsli:raw="The associated value, or &lt;see langword=&quot;null&quot; /&gt; if no value exists.">関連付けられている値。値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IDictionaryService.SetValue(System.Object,System.Object)">
      <summary vsli:raw="Sets the specified key-value pair.">指定したキーと値の組み合わせを設定します。</summary>
      <param name="key" vsli:raw="An object to use as the key to associate the value with.">値に関連付けるキーとして使用するオブジェクト。</param>
      <param name="value" vsli:raw="The value to store.">格納する値。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IEventBindingService">
      <summary vsli:raw="Provides a service for registering event handlers for component events.">コンポーネントのイベントに対するイベント ハンドラーを登録するためのサービスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.CreateUniqueMethodName(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Creates a unique name for an event-handler method for the specified component and event.">指定したコンポーネントおよびイベントのイベント ハンドラー メソッドに対して一意の名前を作成します。</summary>
      <param name="component" vsli:raw="The component instance the event is connected to.">イベントを関連付ける対象のコンポーネント インスタンス。</param>
      <param name="e" vsli:raw="The event to create a name for.">名前を作成する対象のイベント。</param>
      <returns vsli:raw="The recommended name for the event-handler method for this event.">指定したイベントのイベント ハンドラー メソッドに推奨される名前。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetCompatibleMethods(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Gets a collection of event-handler methods that have a method signature compatible with the specified event.">指定したイベントと互換性のあるメソッド シグネチャを持つイベント ハンドラー メソッドのコレクションを取得します。</summary>
      <param name="e" vsli:raw="The event to get the compatible event-handler methods for.">互換性のあるイベント ハンドラー メソッドを取得する対象のイベント。</param>
      <returns vsli:raw="A collection of strings.">文字列のコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEvent(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the specified property descriptor represents, if it represents an event.">指定したプロパティ記述子がイベントを表す場合、そのイベントの <see cref="T:System.ComponentModel.EventDescriptor" /> を取得します。</summary>
      <param name="property" vsli:raw="The property that represents an event.">イベントを表すプロパティ。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; for the event that the property represents, or &lt;see langword=&quot;null&quot; /&gt; if the property does not represent an event.">プロパティが表すイベントの <see cref="T:System.ComponentModel.EventDescriptor" />。プロパティがイベントを表さない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperties(System.ComponentModel.EventDescriptorCollection)">
      <summary vsli:raw="Converts a set of event descriptors to a set of property descriptors.">一連のイベント記述子を一連のプロパティ記述子に変換します。</summary>
      <param name="events" vsli:raw="The events to convert to properties.">プロパティに変換する対象のイベント。</param>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects that describe the event set.">一連のイベントを説明する <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトの配列。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.GetEventProperty(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Converts a single event descriptor to a property descriptor.">単一のイベント記述子をプロパティ記述子に変換します。</summary>
      <param name="e" vsli:raw="The event to convert.">変換対象のイベント。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the event.">イベントを説明する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode">
      <summary vsli:raw="Displays the user code for the designer.">デザイナーに関連するコードを表示します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コードが表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.ComponentModel.IComponent,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Displays the user code for the specified event.">指定したイベントに関連するコードを表示します。</summary>
      <param name="component" vsli:raw="The component that the event is connected to.">イベントを関連付ける対象のコンポーネント。</param>
      <param name="e" vsli:raw="The event to display.">表示するイベント。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コードが表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IEventBindingService.ShowCode(System.Int32)">
      <summary vsli:raw="Displays the user code for the designer at the specified line.">デザイナーに関連するコードの指定した行を表示します。</summary>
      <param name="lineNumber" vsli:raw="The line number to place the caret on.">カレット (＾) を配置する行番号。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code is displayed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コードが表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderListService">
      <summary vsli:raw="Provides an interface that can list extender providers.">拡張プロバイダーのリストを生成できるインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderListService.GetExtenderProviders">
      <summary vsli:raw="Gets the set of extender providers for the component.">コンポーネントの一連の拡張プロバイダーを取得します。</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that lists the active extender providers. If there are no providers, an empty array is returned.">アクティブな拡張プロバイダーを格納している <see cref="T:System.ComponentModel.IExtenderProvider" /> 型の配列。 プロバイダーがない場合は、空の配列が返されます。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IExtenderProviderService">
      <summary vsli:raw="Provides an interface for adding and removing extender providers at design time.">デザイン時に拡張プロバイダーを追加および削除するためのインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.AddExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Adds the specified extender provider.">指定した拡張プロバイダーを追加します。</summary>
      <param name="provider" vsli:raw="The extender provider to add.">追加する拡張プロバイダー。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IExtenderProviderService.RemoveExtenderProvider(System.ComponentModel.IExtenderProvider)">
      <summary vsli:raw="Removes the specified extender provider.">指定した拡張プロバイダーを削除します。</summary>
      <param name="provider" vsli:raw="The extender provider to remove.">削除する拡張プロバイダー。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IHelpService">
      <summary vsli:raw="Provides methods for showing Help topics and adding and removing Help keywords at design time.">デザイン時に、ヘルプ トピックを表示し、ヘルプ キーワードの追加と削除を行うためのメソッドを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.AddContextAttribute(System.String,System.String,System.ComponentModel.Design.HelpKeywordType)">
      <summary vsli:raw="Adds a context attribute to the document.">コンテキスト属性をドキュメントに追加します。</summary>
      <param name="name" vsli:raw="The name of the attribute to add.">追加する属性の名前。</param>
      <param name="value" vsli:raw="The value of the attribute.">属性の値。</param>
      <param name="keywordType" vsli:raw="The type of the keyword, from the enumeration &lt;see cref=&quot;T:System.ComponentModel.Design.HelpKeywordType&quot; /&gt;.">キーワードの種類を示す、列挙体 <see cref="T:System.ComponentModel.Design.HelpKeywordType" /> の値。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ClearContextAttributes">
      <summary vsli:raw="Removes all existing context attributes from the document.">ドキュメントから既存のコンテキスト属性をすべて削除します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)">
      <summary vsli:raw="Creates a local &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to manage subcontexts.">ローカル <see cref="T:System.ComponentModel.Design.IHelpService" /> を作成し、サブコンテキストを管理します。</summary>
      <param name="contextType" vsli:raw="The priority type of the subcontext to add.">追加するサブコンテキストの優先順位の種類。</param>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt;.">新しく作成された <see cref="T:System.ComponentModel.Design.IHelpService" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveContextAttribute(System.String,System.String)">
      <summary vsli:raw="Removes a previously added context attribute.">以前に追加したコンテキスト属性を削除します。</summary>
      <param name="name" vsli:raw="The name of the attribute to remove.">削除する属性の名前。</param>
      <param name="value" vsli:raw="The value of the attribute to remove.">削除する属性の値。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.RemoveLocalContext(System.ComponentModel.Design.IHelpService)">
      <summary vsli:raw="Removes a context created with &lt;see cref=&quot;M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)&quot; /&gt;.">
        <see cref="M:System.ComponentModel.Design.IHelpService.CreateLocalContext(System.ComponentModel.Design.HelpContextType)" /> を使用して作成したコンテキストを削除します。</summary>
      <param name="localContext" vsli:raw="The local context &lt;see cref=&quot;T:System.ComponentModel.Design.IHelpService&quot; /&gt; to remove.">削除するローカル コンテキスト <see cref="T:System.ComponentModel.Design.IHelpService" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromKeyword(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified keyword.">指定したキーワードに対応するヘルプ トピックを表示します。</summary>
      <param name="helpKeyword" vsli:raw="The keyword of the Help topic to display.">表示するヘルプ トピックのキーワード。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IHelpService.ShowHelpFromUrl(System.String)">
      <summary vsli:raw="Shows the Help topic that corresponds to the specified URL.">指定した URL に対応するヘルプ トピックを表示します。</summary>
      <param name="helpUrl" vsli:raw="The URL of the Help topic to display.">表示するヘルプ トピックの URL。</param>
    </member>
    <member name="T:System.ComponentModel.Design.IInheritanceService">
      <summary vsli:raw="Provides methods for identifying the components of a component.">コンポーネントの構成要素を識別するためのメソッドが用意されています。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.AddInheritedComponents(System.ComponentModel.IComponent,System.ComponentModel.IContainer)">
      <summary vsli:raw="Searches the specified component for fields that implement the &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; interface and adds each to the specified container, storing the inheritance level of each which can be retrieved using the &lt;see cref=&quot;M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)&quot; /&gt; method.">指定したコンポーネントから <see cref="T:System.ComponentModel.IComponent" /> インターフェイスを実装するフィールドを検索し、指定したコンテナーに各フィールドを追加して、<see cref="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)" /> メソッドで取得できるそれぞれの継承レベルを格納します。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to search. Searching begins with this component.">検索する <see cref="T:System.ComponentModel.IComponent" />。 このコンポーネントから検索が始まります。</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to add components to.">コンポーネントの追加先となる <see cref="T:System.ComponentModel.IContainer" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IInheritanceService.GetInheritanceAttribute(System.ComponentModel.IComponent)">
      <summary vsli:raw="Gets the inheritance attribute for the specified component.">指定したコンポーネントの継承属性を取得します。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for which to retrieve the inheritance attribute.">継承属性の取得対象となる <see cref="T:System.ComponentModel.IComponent" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; that describes the level of inheritance of the specified component.">指定したコンポーネントの継承レベルが記述された <see cref="T:System.ComponentModel.InheritanceAttribute" /> のインスタンス。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IMenuCommandService">
      <summary vsli:raw="Provides methods to manage the global designer verbs and menu commands available in design mode, and to show some types of shortcut menus.">グローバル デザイナー動詞とデザイン モードで使用できるメニュー コマンドを管理し、いくつかの種類のショートカット メニューを表示するためのメソッドを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Adds the specified standard menu command to the menu.">指定した標準メニュー コマンドをメニューに追加します。</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to add.">追加する <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the specified &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; is already present on a menu.">指定した <see cref="T:System.ComponentModel.Design.CommandID" /> の <see cref="T:System.ComponentModel.Design.MenuCommand" /> が、既にメニュー上に存在します。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.AddVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Adds the specified designer verb to the set of global designer verbs.">指定したデザイナー動詞をグローバル デザイナー動詞のセットに追加します。</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to add.">追加する <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.FindCommand(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Searches for the specified command ID and returns the menu command associated with it.">指定したコマンド ID を検索し、その ID に関連付けられているメニュー コマンドを返します。</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; to search for.">検索対象の <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; associated with the command ID, or &lt;see langword=&quot;null&quot; /&gt; if no command is found.">コマンド ID に関連付けられている <see cref="T:System.ComponentModel.Design.MenuCommand" />。コマンドが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.GlobalInvoke(System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Invokes a menu or designer verb command matching the specified command ID.">指定したコマンド ID に一致するメニューまたはデザイナー動詞コマンドを呼び出します。</summary>
      <param name="commandID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; of the command to search for and execute.">検索および実行対象のコマンドの <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the command was found and invoked successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コマンドが見つかり、正常に呼び出された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveCommand(System.ComponentModel.Design.MenuCommand)">
      <summary vsli:raw="Removes the specified standard menu command from the menu.">指定した標準メニュー コマンドをメニューから削除します。</summary>
      <param name="command" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; to remove.">削除する <see cref="T:System.ComponentModel.Design.MenuCommand" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.RemoveVerb(System.ComponentModel.Design.DesignerVerb)">
      <summary vsli:raw="Removes the specified designer verb from the collection of global designer verbs.">指定したデザイナー動詞をグローバル デザイナー動詞のコレクションから削除します。</summary>
      <param name="verb" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerb&quot; /&gt; to remove.">削除する <see cref="T:System.ComponentModel.Design.DesignerVerb" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IMenuCommandService.ShowContextMenu(System.ComponentModel.Design.CommandID,System.Int32,System.Int32)">
      <summary vsli:raw="Shows the specified shortcut menu at the specified location.">指定した位置に指定したショートカット メニューを表示します。</summary>
      <param name="menuID" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the shortcut menu to show.">表示するショートカット メニューの <see cref="T:System.ComponentModel.Design.CommandID" />。</param>
      <param name="x" vsli:raw="The x-coordinate at which to display the menu, in screen coordinates.">メニューを表示する位置の x 座標 (画面座標)。</param>
      <param name="y" vsli:raw="The y-coordinate at which to display the menu, in screen coordinates.">メニューを表示する位置の y 座標 (画面座標)。</param>
    </member>
    <member name="P:System.ComponentModel.Design.IMenuCommandService.Verbs">
      <summary vsli:raw="Gets a collection of the designer verbs that are currently available.">現在使用できるデザイナー動詞のコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.DesignerVerbCollection&quot; /&gt; that contains the designer verbs that are currently available.">現在使用できるデザイナー動詞の <see cref="T:System.ComponentModel.Design.DesignerVerbCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IReferenceService">
      <summary vsli:raw="Provides an interface for obtaining references to objects within a project by name or type, obtaining the name of a specified object, and for locating the parent of a specified object within a designer project.">名前や型でプロジェクト内のオブジェクトへの参照を取得したり、指定したオブジェクトの名前を取得したり、デザイナー プロジェクト内で指定したオブジェクトの親を見つけたりするためのインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetComponent(System.Object)">
      <summary vsli:raw="Gets the component that contains the specified component.">指定したコンポーネントを格納しているコンポーネントを取得します。</summary>
      <param name="reference" vsli:raw="The object to retrieve the parent component for.">親コンポーネントを取得するオブジェクト。</param>
      <returns vsli:raw="The base &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that contains the specified object, or &lt;see langword=&quot;null&quot; /&gt; if no parent component exists.">指定したオブジェクトを格納している基本 <see cref="T:System.ComponentModel.IComponent" />。親コンポーネントが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">指定したコンポーネントの名前を取得します。</summary>
      <param name="reference" vsli:raw="The object to return the name of.">名前を返すオブジェクト。</param>
      <returns vsli:raw="The name of the object referenced, or &lt;see langword=&quot;null&quot; /&gt; if the object reference is not valid.">オブジェクト参照の名前。オブジェクト参照が有効でない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReference(System.String)">
      <summary vsli:raw="Gets a reference to the component whose name matches the specified name.">指定した名前に名前が一致するコンポーネントへの参照を取得します。</summary>
      <param name="name" vsli:raw="The name of the component to return a reference to.">参照を返すコンポーネントの名前。</param>
      <returns vsli:raw="An object the specified name refers to, or &lt;see langword=&quot;null&quot; /&gt; if no reference is found.">指定した、参照する名前のオブジェクト。参照が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences">
      <summary vsli:raw="Gets all available references to project components.">プロジェクト コンポーネントへの使用可能な参照をすべて取得します。</summary>
      <returns vsli:raw="An array of all objects with references available to the &lt;see cref=&quot;T:System.ComponentModel.Design.IReferenceService&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.IReferenceService" /> に使用可能な参照を持つすべてのオブジェクトの配列。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IReferenceService.GetReferences(System.Type)">
      <summary vsli:raw="Gets all available references to components of the specified type.">指定した型のコンポーネントへの使用可能なすべての参照を取得します。</summary>
      <param name="baseType" vsli:raw="The type of object to return references to instances of.">インスタンスへの参照を返す対象となるオブジェクトの型。</param>
      <returns vsli:raw="An array of all available objects of the specified type.">指定した型の使用可能なすべてのオブジェクトの配列。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IResourceService">
      <summary vsli:raw="Provides an interface for designers to access resource readers and writers for specific &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; resource types.">デザイナーが、特定の <see cref="T:System.Globalization.CultureInfo" /> のリソースの種類に対するリソース リーダーやリソース ライターにアクセスするためのインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceReader(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource reader for the specified culture and returns it.">指定したカルチャのリソース リーダーを検索し、そのリソース リーダーを返します。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to retrieve a resource reader.">リソース リーダーを取得する対象のリソースの <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceReader&quot; /&gt; interface that contains the resources for the culture, or &lt;see langword=&quot;null&quot; /&gt; if no resources for the culture exist.">指定したカルチャのリソースを含む <see cref="T:System.Resources.IResourceReader" /> インターフェイス。カルチャのリソースが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.IResourceService.GetResourceWriter(System.Globalization.CultureInfo)">
      <summary vsli:raw="Locates the resource writer for the specified culture and returns it.">指定したカルチャのリソース ライターを検索し、そのリソース ライターを返します。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the resource for which to create a resource writer.">リソース ライターを作成する対象のリソースの <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Resources.IResourceWriter&quot; /&gt; interface for the specified culture.">指定したカルチャの <see cref="T:System.Resources.IResourceWriter" /> インターフェイス。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IRootDesigner">
      <summary vsli:raw="Provides support for root-level designer view technologies.">ルート レベルのデザイナー ビュー テクノロジのサポートを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IRootDesigner.GetView(System.ComponentModel.Design.ViewTechnology)">
      <summary vsli:raw="Gets a view object for the specified view technology.">指定したビュー技術のビュー オブジェクトを取得します。</summary>
      <param name="technology" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; that indicates a particular view technology.">特定のビュー技術を示す <see cref="T:System.ComponentModel.Design.ViewTechnology" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified view technology is not supported or does not exist.">指定したビュー技術がサポートされていないか、存在しません。</exception>
      <returns vsli:raw="An object that represents the view for this designer.">デザイナーのビューを表すオブジェクト。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.IRootDesigner.SupportedTechnologies">
      <summary vsli:raw="Gets the set of technologies that this designer can support for its display.">デザイナーがサポートできる表示用の一連の技術を取得します。</summary>
      <returns vsli:raw="An array of supported &lt;see cref=&quot;T:System.ComponentModel.Design.ViewTechnology&quot; /&gt; values.">サポートされている <see cref="T:System.ComponentModel.Design.ViewTechnology" /> 値の配列。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ISelectionService">
      <summary vsli:raw="Provides an interface for a designer to select components.">デザイナーがコンポーネントを選択するために必要なインターフェイスを提供します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanged">
      <summary vsli:raw="Occurs when the current selection changes.">現在の選択が変更したときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.ISelectionService.SelectionChanging">
      <summary vsli:raw="Occurs when the current selection is about to change.">現在選択されている対象がこれから変更されるときに発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetComponentSelected(System.Object)">
      <summary vsli:raw="Gets a value indicating whether the specified component is currently selected.">指定したコンポーネントが現在選択されているかどうかを示す値を取得します。</summary>
      <param name="component" vsli:raw="The component to test.">テスト対象のコンポーネント。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is part of the user's current selection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンポーネントが現在選択されている内容に含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.GetSelectedComponents">
      <summary vsli:raw="Gets a collection of components that are currently selected.">現在選択されているコンポーネントのコレクションを取得します。</summary>
      <returns vsli:raw="A collection that represents the current set of components that are selected.">現在選択されている一連のコンポーネントを表すコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection)">
      <summary vsli:raw="Selects the specified collection of components.">コンポーネントの指定したコレクションを選択します。</summary>
      <param name="components" vsli:raw="The collection of components to select.">選択対象のコンポーネントのコレクション。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ISelectionService.SetSelectedComponents(System.Collections.ICollection,System.ComponentModel.Design.SelectionTypes)">
      <summary vsli:raw="Selects the components from within the specified collection of components that match the specified selection type.">指定した選択の種類と一致するコンポーネントの指定したコレクション内からコンポーネントを選択します。</summary>
      <param name="components" vsli:raw="The collection of components to select.">選択対象のコンポーネントのコレクション。</param>
      <param name="selectionType" vsli:raw="A value from the &lt;see cref=&quot;T:System.ComponentModel.Design.SelectionTypes&quot; /&gt; enumeration. The default is &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.SelectionTypes" /> 列挙体の値。 既定値は、<see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" /> です。</param>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.PrimarySelection">
      <summary vsli:raw="Gets the object that is currently the primary selected object.">現在の主要選択オブジェクトであるオブジェクトを取得します。</summary>
      <returns vsli:raw="The object that is currently the primary selected object.">現在の主要選択オブジェクトであるオブジェクト。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ISelectionService.SelectionCount">
      <summary vsli:raw="Gets the count of selected objects.">選択されているオブジェクトの数を取得します。</summary>
      <returns vsli:raw="The number of selected objects.">選択されているオブジェクトの数。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.IServiceContainer">
      <summary vsli:raw="Provides a container for services.">サービスのコンテナーを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">指定されたサービスをサービス コンテナーに追加します。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">追加するサービスの型です。</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">サービスの作成に使用されるコールバック オブジェクトです。 このオブジェクトによってサービスを使用可能として宣言できますが、サービスが要求されるまでオブジェクトの作成は遅れます。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to parent service containers.">指定されたサービスをサービス コンテナーに追加し、必要に応じてサービスを親サービス コンテナーに昇格します。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">追加するサービスの型です。</param>
      <param name="callback" vsli:raw="A callback object that is used to create the service. This allows a service to be declared as available, but delays the creation of the object until the service is requested.">サービスの作成に使用されるコールバック オブジェクトです。 このオブジェクトによってサービスを使用可能として宣言できますが、サービスが要求されるまでオブジェクトの作成は遅れます。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この要求を任意の親サービス コンテナーに昇格する場合は <see langword="true" />、昇格しない場合は <see langword="false" /> です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">指定されたサービスをサービス コンテナーに追加します。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">追加するサービスの型です。</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">追加するサービスの型のインスタンスです。 このオブジェクトは、<paramref name="serviceType" /> パラメーターに指定された型を実装しているか、またはその型から継承していることが必要です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container, and optionally promotes the service to any parent service containers.">指定されたサービスをサービス コンテナーに追加し、必要に応じてサービスを任意の親サービス コンテナーに昇格します。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">追加するサービスの型です。</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">追加するサービスの型のインスタンスです。 このオブジェクトは、<paramref name="serviceType" /> パラメーターに指定された型を実装しているか、またはその型から継承していることが必要です。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この要求を任意の親サービス コンテナーに昇格する場合は <see langword="true" />、昇格しない場合は <see langword="false" /> です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">指定されたサービスの型をサービス コンテナーから削除します。</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">削除するサービスの型です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.IServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container, and optionally promotes the service to parent service containers.">指定されたサービスの型をサービス コンテナーから削除し、必要に応じてサービスを親サービス コンテナーに昇格します。</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">削除するサービスの型です。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to promote this request to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この要求を任意の親サービス コンテナーに昇格する場合は <see langword="true" />、昇格しない場合は <see langword="false" /> です。</param>
    </member>
    <member name="T:System.ComponentModel.Design.ITreeDesigner">
      <summary vsli:raw="Provides support for building a set of related custom designers.">関連するカスタム デザイナーのセットの構築をサポートします。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Children">
      <summary vsli:raw="Gets a collection of child designers.">子デザイナーのコレクションを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;, containing the collection of &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; child objects of the current designer.">現在のデザイナーの <see cref="T:System.Collections.ICollection" /> 子オブジェクトのレクションを格納する <see cref="T:System.ComponentModel.Design.IDesigner" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.ITreeDesigner.Parent">
      <summary vsli:raw="Gets the parent designer.">親デザイナーを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; representing the parent designer, or &lt;see langword=&quot;null&quot; /&gt; if there is no parent.">親デザイナーを表す <see cref="T:System.ComponentModel.Design.IDesigner" />。または、親がないときは <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDescriptorFilterService">
      <summary vsli:raw="Provides an interface to modify the set of member descriptors for a component in design mode.">デザイン モードでコンポーネントの一連のメンバー記述子を変更するためのインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterAttributes(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the attributes that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じてコンポーネントが公開する属性をフィルター処理します。</summary>
      <param name="component" vsli:raw="The component to filter the attributes of.">属性をフィルター処理する対象のコンポーネント。</param>
      <param name="attributes" vsli:raw="A dictionary of attributes that can be modified.">変更できる属性のディクショナリ。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered attributes is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">フィルター処理した一連の属性をキャッシュに保存する場合は <see langword="true" />。フィルター サービスが再照会する必要がある場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterEvents(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the events that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じてコンポーネントが公開するイベントをフィルター処理します。</summary>
      <param name="component" vsli:raw="The component to filter events for.">イベントをフィルター処理する対象のコンポーネント。</param>
      <param name="events" vsli:raw="A dictionary of events that can be modified.">変更できるイベントのディクショナリ。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered events is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">フィルター処理した一連のイベントをキャッシュに保存する場合は <see langword="true" />。フィルター サービスが再照会する必要がある場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDescriptorFilterService.FilterProperties(System.ComponentModel.IComponent,System.Collections.IDictionary)">
      <summary vsli:raw="Filters the properties that a component exposes through a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> を通じてコンポーネントが公開するプロパティをフィルター処理します。</summary>
      <param name="component" vsli:raw="The component to filter properties for.">プロパティをフィルター処理する対象のコンポーネント。</param>
      <param name="properties" vsli:raw="A dictionary of properties that can be modified.">変更できるプロパティのディクショナリ。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the set of filtered properties is to be cached; &lt;see langword=&quot;false&quot; /&gt; if the filter service must query again.">フィルター処理した一連のプロパティをキャッシュに保存する場合は <see langword="true" />。フィルター サービスが再照会する必要がある場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeDiscoveryService">
      <summary vsli:raw="Discovers available types at design time.">デザイン時に使用できる型を探索します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeDiscoveryService.GetTypes(System.Type,System.Boolean)">
      <summary vsli:raw="Retrieves the list of available types.">使用できる型のリストを取得します。</summary>
      <param name="baseType" vsli:raw="The base type to match. Can be &lt;see langword=&quot;null&quot; /&gt;.">一致する基本型。 <see langword="null" /> の可能性があります。</param>
      <param name="excludeGlobalTypes" vsli:raw="Indicates whether types from all referenced assemblies should be checked.">すべての参照アセンブリの型をチェックするかどうかを示します。</param>
      <returns vsli:raw="A collection of types that match the criteria specified by &lt;paramref name=&quot;baseType&quot; /&gt; and &lt;paramref name=&quot;excludeGlobalTypes&quot; /&gt;.">
        <paramref name="baseType" /> および <paramref name="excludeGlobalTypes" /> で指定された基準に一致する型のコレクション。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ITypeResolutionService">
      <summary vsli:raw="Provides an interface to retrieve an assembly or type by name.">名前によってアセンブリまたは型を取得するインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the requested assembly.">要求されたアセンブリを取得します。</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">取得するアセンブリの名前。</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">要求されたアセンブリのインスタンス。アセンブリが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetAssembly(System.Reflection.AssemblyName,System.Boolean)">
      <summary vsli:raw="Gets the requested assembly.">要求されたアセンブリを取得します。</summary>
      <param name="name" vsli:raw="The name of the assembly to retrieve.">取得するアセンブリの名前。</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">アセンブリが見つからないときにこのメソッドが例外をスローする必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。アセンブリが見つからない場合、このメソッドは <see langword="null" /> を返します。</param>
      <returns vsli:raw="An instance of the requested assembly, or &lt;see langword=&quot;null&quot; /&gt; if no assembly can be located.">要求されたアセンブリのインスタンス。アセンブリが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetPathOfAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Gets the path to the file from which the assembly was loaded.">アセンブリの読み込み元のファイルへのパスを取得します。</summary>
      <param name="name" vsli:raw="The name of the assembly.">アセンブリの名前。</param>
      <returns vsli:raw="The path to the file from which the assembly was loaded.">アセンブリの読み込み元のファイルへのパス。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String)">
      <summary vsli:raw="Loads a type with the specified name.">指定した名前で型を読み込みます。</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">型の名前。 型名がアセンブリを示す完全限定名でない場合、このサービスは参照先アセンブリの内部セットを検索します。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">指定した名前に対応する <see cref="T:System.Type" /> のインスタンス。型が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">指定した名前で型を読み込みます。</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">型の名前。 型名がアセンブリを示す完全限定名でない場合、このサービスは参照先アセンブリの内部セットを検索します。</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">アセンブリが見つからないときにこのメソッドが例外をスローする必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。アセンブリが見つからない場合、このメソッドは <see langword="null" /> を返します。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">指定した名前に対応する <see cref="T:System.Type" /> のインスタンス。型が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Loads a type with the specified name.">指定した名前で型を読み込みます。</summary>
      <param name="name" vsli:raw="The name of the type. If the type name is not a fully qualified name that indicates an assembly, this service will search its internal set of referenced assemblies.">型の名前。 型名がアセンブリを示す完全限定名でない場合、このサービスは参照先アセンブリの内部セットを検索します。</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this method should throw an exception if the assembly cannot be located; otherwise, &lt;see langword=&quot;false&quot; /&gt;, and this method returns &lt;see langword=&quot;null&quot; /&gt; if the assembly cannot be located.">アセンブリが見つからないときにこのメソッドが例外をスローする必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。アセンブリが見つからない場合、このメソッドは <see langword="null" /> を返します。</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore case when searching for types; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型を検索するときに大文字と小文字を区別しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Type&quot; /&gt; that corresponds to the specified name, or &lt;see langword=&quot;null&quot; /&gt; if no type can be found.">指定した名前に対応する <see cref="T:System.Type" /> のインスタンス。型が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ITypeResolutionService.ReferenceAssembly(System.Reflection.AssemblyName)">
      <summary vsli:raw="Adds a reference to the specified assembly.">指定したアセンブリに参照を追加します。</summary>
      <param name="name" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that indicates the assembly to reference.">参照するアセンブリを示す <see cref="T:System.Reflection.AssemblyName" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.MenuCommand">
      <summary vsli:raw="Represents a Windows menu or toolbar command item.">Windows メニューまたはツール バーのコマンド項目を表します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.MenuCommand.CommandChanged">
      <summary vsli:raw="Occurs when the menu command changes.">メニュー コマンドが変更されたときに発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.#ctor(System.EventHandler,System.ComponentModel.Design.CommandID)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="handler" vsli:raw="The event to raise when the user selects the menu item or toolbar button.">ユーザーがメニュー項目またはツール バー ボタンを選択したときに発生するイベント。</param>
      <param name="command" vsli:raw="The unique command ID that links this menu command to the environment's menu.">メニュー コマンドを実行環境のメニューに結びつける一意のコマンド ID。</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke">
      <summary vsli:raw="Invokes the command.">コマンドを呼び出します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.Invoke(System.Object)">
      <summary vsli:raw="Invokes the command with the given parameter.">指定したパラメーターを使用して、コマンドが呼び出されます。</summary>
      <param name="arg" vsli:raw="An optional argument for use by the command.">このコマンドで使用するオプションの引数。</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.OnCommandChanged(System.EventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.MenuCommand.CommandChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.MenuCommand.CommandChanged" /> イベントを発生させます。</summary>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.MenuCommand.ToString">
      <summary vsli:raw="Returns a string representation of this menu command.">メニュー コマンドの文字列形式を返します。</summary>
      <returns vsli:raw="A string containing the value of the &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.CommandID&quot; /&gt; property appended with the names of any flags that are set, separated by pipe bars (|). These flag properties include &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Checked&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Enabled&quot; /&gt;, &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Supported&quot; /&gt;, and &lt;see cref=&quot;P:System.ComponentModel.Design.MenuCommand.Visible&quot; /&gt;.">
        <see cref="P:System.ComponentModel.Design.MenuCommand.CommandID" /> プロパティの値に、設定されているフラグの名前が縦線 (|) で区切って追加されている文字列。 これらのフラグ プロパティには、<see cref="P:System.ComponentModel.Design.MenuCommand.Checked" />、<see cref="P:System.ComponentModel.Design.MenuCommand.Enabled" />、<see cref="P:System.ComponentModel.Design.MenuCommand.Supported" />、および <see cref="P:System.ComponentModel.Design.MenuCommand.Visible" /> があります。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Checked">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is checked.">メニュー項目がチェックされているかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is checked; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">項目がチェックされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.CommandID">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with this menu command.">メニュー コマンドに関連付けられている <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; associated with the menu command.">メニュー コマンドに関連付けられている <see cref="T:System.ComponentModel.Design.CommandID" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Enabled">
      <summary vsli:raw="Gets a value indicating whether this menu item is available.">メニュー項目を使用できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">項目が有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.OleStatus">
      <summary vsli:raw="Gets the OLE command status code for this menu item.">メニュー項目の OLE コマンド ステータス コードを取得します。</summary>
      <returns vsli:raw="An integer containing a mixture of status flags that reflect the state of this menu item.">メニュー項目の状態を反映する複数のステータス フラグの組み合わせを含んでいる整数。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Properties">
      <summary vsli:raw="Gets the public properties associated with the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.MenuCommand" /> に関連付けられているパブリック プロパティを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing the public properties of the &lt;see cref=&quot;T:System.ComponentModel.Design.MenuCommand&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> のパブリック プロパティを格納している <see cref="T:System.ComponentModel.Design.MenuCommand" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Supported">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is supported.">メニュー項目がサポートされているかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is supported, which is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">項目がサポートされている場合は <see langword="true" /> (既定値)。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.MenuCommand.Visible">
      <summary vsli:raw="Gets or sets a value indicating whether this menu item is visible.">メニュー項目を表示するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is visible; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メニュー項目を表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.SelectionTypes">
      <summary vsli:raw="Defines identifiers that indicate the type of a selection.">選択の種類を示す識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Add">
      <summary vsli:raw="Represents an add selection that adds the selected components to the current selection, maintaining the current set of selected components.">選択されたコンポーネントを現在の選択に追加するための、追加選択を表します。これにより、選択されたコンポーネントの現在のセットが維持されます。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Auto">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">通常の選択を表します。 選択サービスは、Ctrl キーと Shift キーに対応し、コンポーネントを選択範囲に含めたり、選択範囲から外したりする動作をサポートします。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Click">
      <summary vsli:raw="Represents a selection that occurs when a user clicks a component. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">ユーザーがコンポーネントをクリックしたときに発生する選択を表します。 新しく選択したコンポーネントが既に選択されている状態の場合、キャンセルされるのではなく、そのコンポーネントが主要選択コンポーネントになります。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseDown">
      <summary vsli:raw="Represents a selection that occurs when the user presses on the mouse button while the mouse pointer is over a component. If the component under the pointer is already selected, it is promoted to become the primary selected component rather than being canceled.">マウス ポインターがコンポーネントの上にあるときにユーザーがマウス ボタンを押すと発生する選択を表します。 ポインターの下にあるコンポーネントが既に選択されている状態の場合、キャンセルされるのではなく、そのコンポーネントが主要選択コンポーネントになります。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.MouseUp">
      <summary vsli:raw="Represents a selection that occurs when the user releases the mouse button immediately after a component has been selected. If the newly selected component is already selected, it is promoted to be the primary selected component rather than being canceled.">コンポーネントが選択された直後にユーザーがマウス ボタンを離すと発生する選択を表します。 新しく選択したコンポーネントが既に選択されている状態の場合、キャンセルされるのではなく、そのコンポーネントが主要選択コンポーネントになります。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Normal">
      <summary vsli:raw="Represents a regular selection. The selection service responds to the CTRL and SHIFT keys to support adding or removing components to or from the selection.">通常の選択を表します。 選択サービスは、Ctrl キーと Shift キーに対応し、コンポーネントを選択範囲に含めたり、選択範囲から外したりする動作をサポートします。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Primary">
      <summary vsli:raw="Represents a primary selection that occurs when a user clicks on a component. If a component in the selection list is already selected, the component is promoted to be the primary selection.">ユーザーがコンポーネントをクリックしたときに発生する主要選択を表します。 選択リストのコンポーネントが既に選択されている状態の場合、そのコンポーネントが主要選択になります。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Remove">
      <summary vsli:raw="Represents a remove selection that removes the selected components from the current selection, maintaining the current set of selected components.">選択されたコンポーネントを現在の選択から削除するための、削除選択を表します。これにより、選択されたコンポーネントの現在のセットが維持されます。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Replace">
      <summary vsli:raw="Represents a selection that occurs when the content of a selection is replaced. The selection service replaces the current selection with the replacement.">選択の内容が置き換えられたときに発生する選択を表します。 選択サービスは、現在の選択内容を別の内容で置き換えます。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Toggle">
      <summary vsli:raw="Represents a toggle selection that switches between the current selection and the provided selection. If a component is already selected and is passed into &lt;see cref=&quot;Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents&quot; /&gt; with a selection type of &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Toggle&quot; /&gt;, the component selection will be canceled.">現在の選択と新たに指定された選択との間の切り替えを行う、切り替え選択を表します。 コンポーネントが既に選択されている状態で、<see cref="Overload:System.ComponentModel.Design.ISelectionService.SetSelectedComponents" /> の選択の種類が <see cref="F:System.ComponentModel.Design.SelectionTypes.Toggle" /> に渡された場合、コンポーネントの選択状態はキャンセルされます。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.SelectionTypes.Valid">
      <summary vsli:raw="Identifies the valid selection types as &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Normal&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Replace&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseDown&quot; /&gt;, &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.MouseUp&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.SelectionTypes.Click&quot; /&gt;.">有効な選択の種類として、<see cref="F:System.ComponentModel.Design.SelectionTypes.Normal" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.Replace" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseDown" />、<see cref="F:System.ComponentModel.Design.SelectionTypes.MouseUp" />、または <see cref="F:System.ComponentModel.Design.SelectionTypes.Click" /> を識別します。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ComponentSerializationService">
      <summary vsli:raw="Provides the base class for serializing a set of components or serializable objects into a serialization store.">一連のコンポーネントまたはシリアル化可能なオブジェクトを、シリアル化ストアにシリアル化するための基本クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.CreateStore">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">新しい <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> を作成します。</summary>
      <returns vsli:raw="A new created serialization store.">新規作成されたシリアル化ストア。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore)">
      <summary vsli:raw="Deserializes the given store to produce a collection of objects.">指定したストアを逆シリアル化し、オブジェクトのコレクションを生成します。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">逆シリアル化を行う対象の <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> には、シリアル化コンテナーが処理できる形式でデータが格納されていません。</exception>
      <returns vsli:raw="A collection of objects created according to the stored state.">格納されている状態に従って作成されたオブジェクトのコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Deserialize(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given store and populates the given &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with deserialized &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects.">指定したストアを逆シリアル化し、逆シリアル化された <see cref="T:System.ComponentModel.IContainer" /> オブジェクトを指定した <see cref="T:System.ComponentModel.IComponent" /> に追加します。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">逆シリアル化を行う対象の <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">
        <see cref="T:System.ComponentModel.IContainer" /> オブジェクトの追加先となる <see cref="T:System.ComponentModel.IComponent" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> または <paramref name="container" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> には、シリアル化コンテナーが処理できる形式でデータが格納されていません。</exception>
      <returns vsli:raw="A collection of objects created according to the stored state.">格納されている状態に従って作成されたオブジェクトのコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container.">指定した <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> を指定したコンテナーに逆シリアル化します。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">逆シリアル化を行う対象の <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">
        <see cref="T:System.ComponentModel.IComponent" /> オブジェクトの追加先となるコンテナー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> または <paramref name="container" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> には、シリアル化コンテナーが処理できる形式でデータが格納されていません。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally validating recycled types.">指定した <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> を指定したコンテナーに逆シリアル化します。オプションで、リサイクルされた型を検証することもできます。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">逆シリアル化を行う対象の <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">
        <see cref="T:System.ComponentModel.IComponent" /> オブジェクトの追加先となるコンテナー。</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">同じ型のオブジェクトに適用された場合にだけ、逆シリアル化が機能することを保証する場合は <see langword="true" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> または <paramref name="container" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> には、シリアル化コンテナーが処理できる形式でデータが格納されていません。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.DeserializeTo(System.ComponentModel.Design.Serialization.SerializationStore,System.ComponentModel.IContainer,System.Boolean,System.Boolean)">
      <summary vsli:raw="Deserializes the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to the given container, optionally applying default property values.">指定した <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> を指定したコンテナーに逆シリアル化します。オプションで、既定のプロパティ値を適用することもできます。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to deserialize.">逆シリアル化を行う対象の <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="container" vsli:raw="The container to which &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; objects will be added.">
        <see cref="T:System.ComponentModel.IComponent" /> オブジェクトの追加先となるコンテナー。</param>
      <param name="validateRecycledTypes" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to guarantee that the deserialization will only work if applied to an object of the same type.">同じ型のオブジェクトに適用された場合にだけ、逆シリアル化が機能することを保証する場合は <see langword="true" />。</param>
      <param name="applyDefaults" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the default property values should be applied.">既定のプロパティ値を適用する必要があることを示す場合は <see langword="true" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;container&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> または <paramref name="container" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; does not contain data in a format the serialization container can process.">
        <paramref name="store" /> には、シリアル化コンテナーが処理できる形式でデータが格納されていません。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.LoadStore(System.IO.Stream)">
      <summary vsli:raw="Loads a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; from a stream.">ストリームから <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> を読み込みます。</summary>
      <param name="stream" vsli:raw="The &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; from which the store will be loaded.">ストアの読み込み元である <see cref="T:System.IO.Stream" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; does not contain data saved by a previous call to &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)&quot; /&gt;.">
        <paramref name="stream" /> には、<see cref="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)" /> の以前の呼び出しによって保存されたデータが格納されていません。</exception>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; instance.">新しい <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> インスタンス。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.Serialize(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object to the given &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">指定したオブジェクトを指定した <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> にシリアル化します。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be written.">
        <paramref name="value" /> の状態の書き込み先となる <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="value" vsli:raw="The object to serialize.">シリアル化するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> が閉じられているか、<paramref name="store" /> がサポートされている型のシリアル化ストアではありません。 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> によって返されたストアを使用してください。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object)">
      <summary vsli:raw="Serializes the given object, accounting for default property values.">既定のプロパティ値から成る、指定したオブジェクトをシリアル化します。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;value&quot; /&gt; will be serialized.">
        <paramref name="value" /> の状態のシリアル化先となる <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="value" vsli:raw="The object to serialize.">シリアル化するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> が閉じられているか、<paramref name="store" /> がサポートされている型のシリアル化ストアではありません。 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> によって返されたストアを使用してください。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMember(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object.">指定されたオブジェクトの指定されたメンバーをシリアル化します。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">
        <paramref name="member" /> の状態のシリアル化先となる <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">
        <paramref name="member" /> が割り当てられているオブジェクト。</param>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; specifying the member to serialize.">シリアル化するメンバーを指定する <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> が閉じられているか、<paramref name="store" /> がサポートされている型のシリアル化ストアではありません。 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> によって返されたストアを使用してください。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ComponentSerializationService.SerializeMemberAbsolute(System.ComponentModel.Design.Serialization.SerializationStore,System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Serializes the given member on the given object, accounting for the default property value.">既定のプロパティ値を構成する、指定したオブジェクトの指定したメンバーをシリアル化します。</summary>
      <param name="store" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; to which the state of &lt;paramref name=&quot;member&quot; /&gt; will be serialized.">
        <paramref name="member" /> の状態のシリアル化先となる <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" />。</param>
      <param name="owningObject" vsli:raw="The object to which &lt;paramref name=&quot;member&quot; /&gt; is attached.">
        <paramref name="member" /> が割り当てられているオブジェクト。</param>
      <param name="member" vsli:raw="The member to serialize.">シリアル化するメンバー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="store" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;store&quot; /&gt; is closed, or &lt;paramref name=&quot;store&quot; /&gt; is not a supported type of serialization store. Use a store returned by &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore&quot; /&gt;.">
        <paramref name="store" /> が閉じられているか、<paramref name="store" /> がサポートされている型のシリアル化ストアではありません。 <see cref="M:System.ComponentModel.Design.Serialization.CodeDomComponentSerializationService.CreateStore" /> によって返されたストアを使用してください。</exception>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ContextStack">
      <summary vsli:raw="Provides a stack object that can be used by a serializer to make information available to nested serializers.">入れ子のシリアライザーで情報を使用できるように、シリアライザーによって使用するスタック オブジェクトを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Append(System.Object)">
      <summary vsli:raw="Appends an object to the end of the stack, rather than pushing it onto the top of the stack.">スタックの最上位にオブジェクトをプッシュせずに、スタックの末尾にオブジェクトを追加します。</summary>
      <param name="context" vsli:raw="A context object to append to the stack.">スタックに追加するコンテキスト オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Pop">
      <summary vsli:raw="Removes the current object off of the stack, returning its value.">スタックから現在のオブジェクトを削除し、そのオブジェクトの値を返します。</summary>
      <returns vsli:raw="The object removed from the stack; &lt;see langword=&quot;null&quot; /&gt; if no objects are on the stack.">スタックから削除されたオブジェクト。スタックにオブジェクトがない場合は、<see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ContextStack.Push(System.Object)">
      <summary vsli:raw="Pushes, or places, the specified object onto the stack.">指定したオブジェクトをスタックにプッシュ (格納) します。</summary>
      <param name="context" vsli:raw="The context object to push onto the stack.">スタックにプッシュするコンテキスト オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;context&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="context" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Current">
      <summary vsli:raw="Gets the current object on the stack.">スタック上の現在のオブジェクトを取得します。</summary>
      <returns vsli:raw="The current object on the stack, or &lt;see langword=&quot;null&quot; /&gt; if no objects were pushed.">スタック上の現在のオブジェクト。プッシュされたオブジェクトがない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Int32)">
      <summary vsli:raw="Gets the object on the stack at the specified level.">スタック上で、指定したレベルのオブジェクトを取得します。</summary>
      <param name="level" vsli:raw="The level of the object to retrieve on the stack. Level 0 is the top of the stack, level 1 is the next down, and so on. This level must be 0 or greater. If level is greater than the number of levels on the stack, it returns &lt;see langword=&quot;null&quot; /&gt;.">スタック上で取得する対象のオブジェクトのレベル。 レベル 0 は、スタックの最上位レベル、レベル 1 は最上位の 1 つ下のレベルです。以下同様です。 このレベルは 0 以上である必要があります。 レベルがスタック上でのレベル数より大きい場合は、<see langword="null" /> を返します。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;level&quot; /&gt; is less than 0.">
        <paramref name="level" /> が 0 未満です。</exception>
      <returns vsli:raw="The object on the stack at the specified level, or &lt;see langword=&quot;null&quot; /&gt; if no object exists at that level.">スタック上にある、指定したレベルのオブジェクト。そのレベルのオブジェクトがない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ContextStack.Item(System.Type)">
      <summary vsli:raw="Gets the first object on the stack that inherits from or implements the specified type.">スタック上で、指定した型から継承されるか、指定した型を実装する最初のオブジェクトを取得します。</summary>
      <param name="type" vsli:raw="A type to retrieve from the context stack.">コンテキスト スタックから取得する型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The first object on the stack that inherits from or implements the specified type, or &lt;see langword=&quot;null&quot; /&gt; if no object on the stack implements the type.">スタック上で、指定した型から継承されるか、指定した型を実装する最初のオブジェクト。その型を実装するオブジェクトがスタック上にない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; attribute is placed on a serializer to indicate the class to use as a default provider of that type of serializer.">
        <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> 属性はシリアライザーに設定され、その型のシリアライザーの既定のプロバイダーとして使用するクラスを示します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the named provider type.">名前付きのプロバイダーの種類を使用して <see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="providerTypeName" vsli:raw="The name of the serialization provider type.">シリアル化プロバイダーの種類の名前。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerTypeName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerTypeName" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute&quot; /&gt; class with the given provider type.">指定したプロバイダーの種類を使用して、<see cref="T:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="providerType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the serialization provider.">シリアル化プロバイダーの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerType" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DefaultSerializationProviderAttribute.ProviderTypeName">
      <summary vsli:raw="Gets the type name of the serialization provider.">シリアル化プロバイダーの型名を取得します。</summary>
      <returns vsli:raw="A string containing the name of the provider.">プロバイダーの名前を含む文字列。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerLoader">
      <summary vsli:raw="Provides a basic designer loader interface that can be used to implement a custom designer loader.">カスタム デザイナー ローダーの実装に使用できる基本デザイナー ローダー インターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.BeginLoad(System.ComponentModel.Design.Serialization.IDesignerLoaderHost)">
      <summary vsli:raw="Begins loading a designer.">デザイナーの読み込みを開始します。</summary>
      <param name="host" vsli:raw="The loader host through which this loader loads components.">このローダーがコンポーネントを読み込むために使用するローダー ホスト。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.DesignerLoader&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerLoader" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerLoader.Flush">
      <summary vsli:raw="Writes cached changes to the location that the designer was loaded from.">キャッシュに保存された変更を、デザイナーの読み込み元の位置に書き込みます。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerLoader.Loading">
      <summary vsli:raw="Gets a value indicating whether the loader is currently loading a document.">ローダーが現在ドキュメントを読み込んでいるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the loader is currently loading a document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ローダーが現在ドキュメントを読み込んでいる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost">
      <summary vsli:raw="Provides an interface that can extend a designer host to support loading from a serialized state.">シリアル化された状態からの読み込みをサポートするためのデザイナー ホストを拡張できるインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.EndLoad(System.String,System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Ends the designer loading operation.">デザイナー読み込み操作を終了します。</summary>
      <param name="baseClassName" vsli:raw="The fully qualified name of the base class of the document that this designer is designing.">このデザイナーがデザインしているドキュメントの基本クラスの完全限定名。</param>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer is successfully loaded; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">デザイナーが正常に読み込まれた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="errorCollection" vsli:raw="A collection containing the errors encountered during load, if any. If no errors were encountered, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">読み込み中に検出されたエラーがある場合は、そのエラーを格納するコレクション。 エラーが検出されなかった場合は、空のコレクションまたは <see langword="null" /> を渡します。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload">
      <summary vsli:raw="Reloads the design document.">デザイン ドキュメントを再読み込みします。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2">
      <summary vsli:raw="Provides an interface that extends &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost&quot; /&gt; to specify whether errors are tolerated while loading a design document.">
        <see cref="T:System.ComponentModel.Design.Serialization.IDesignerLoaderHost" /> を拡張し、デザイン ドキュメントの読み込み中にエラーを許容するかどうかを指定するインターフェイスを提供します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.CanReloadWithErrors">
      <summary vsli:raw="Gets or sets a value indicating whether it is possible to reload with errors.">エラーがある場合に再読み込みができるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader can reload the design document when errors are detected; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">エラーが検出された場合にデザイナー ローダーがデザイン ドキュメントを再読み込みできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerLoaderHost2.IgnoreErrorsDuringReload">
      <summary vsli:raw="Gets or sets a value indicating whether errors should be ignored when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload&quot; /&gt; is called.">
        <see cref="M:System.ComponentModel.Design.Serialization.IDesignerLoaderHost.Reload" /> の呼び出し時にエラーを無視する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the designer loader will ignore errors when it reloads; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">再読み込み時にデザイナー ローダーでエラーを無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerLoaderService">
      <summary vsli:raw="Provides an interface that can extend a designer loader to support asynchronous loading of external components.">外部コンポーネントの非同期読み込みをサポートするためにデザイナー ローダーを拡張できるインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.AddLoadDependency">
      <summary vsli:raw="Registers an external component as part of the load process managed by this interface.">外部コンポーネントを、このインターフェイスが管理する読み込みプロセスの一部として登録します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.DependentLoadComplete(System.Boolean,System.Collections.ICollection)">
      <summary vsli:raw="Signals that a dependent load has finished.">依存読み込みプロセスの 1 つが終了したことを示します。</summary>
      <param name="successful" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the load of the designer is successful; &lt;see langword=&quot;false&quot; /&gt; if errors prevented the load from finishing.">デザイナーの読み込みが正常に終了した場合は <see langword="true" />。エラーが原因で読み込みを完了できなかった場合は <see langword="false" />。</param>
      <param name="errorCollection" vsli:raw="A collection of errors that occurred during the load, if any. If no errors occurred, pass either an empty collection or &lt;see langword=&quot;null&quot; /&gt;.">読み込み中に発生したエラーがある場合は、そのエラーのコレクション。 エラーが発生しなかった場合は、空のコレクションまたは <see langword="null" /> を渡します。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerLoaderService.Reload">
      <summary vsli:raw="Reloads the design document.">デザイン ドキュメントを再読み込みします。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the reload request is accepted, or &lt;see langword=&quot;false&quot; /&gt; if the loader does not allow the reload.">再読み込み要求が受け入れられた場合は <see langword="true" />。ローダーが再読み込みを許可しない場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationManager">
      <summary vsli:raw="Provides an interface that can manage design-time serialization.">デザイン時のシリアル化を管理するためのインターフェイスを提供します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)&quot; /&gt; cannot locate the specified name in the serialization manager's name table.">
        <see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)" /> が、指定した名前をシリアル化マネージャーの名前テーブルで見つけることができない場合に発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete">
      <summary vsli:raw="Occurs when serialization is complete.">シリアル化が完了したときに発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Adds the specified serialization provider to the serialization manager.">指定したシリアル化プロバイダーをシリアル化マネージャーに追加します。</summary>
      <param name="provider" vsli:raw="The serialization provider to add.">追加するシリアル化プロバイダー。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)">
      <summary vsli:raw="Creates an instance of the specified type and adds it to a collection of named instances.">指定した型のインスタンスを作成し、作成したインスタンスを名前付きインスタンスのコレクションに追加します。</summary>
      <param name="type" vsli:raw="The data type to create.">作成するデータ型。</param>
      <param name="arguments" vsli:raw="The arguments to pass to the constructor for this type.">型のコンストラクターに渡す引数。</param>
      <param name="name" vsli:raw="The name of the object. This name can be used to access the object later through &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the object is still created but cannot be accessed by name.">オブジェクトの名前。 この名前は、<see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)" /> を使用して後からオブジェクトにアクセスするときに使用できます。 <see langword="null" /> が渡された場合でもオブジェクトは作成されますが、そのオブジェクトには名前を指定する方法ではアクセスできません。</param>
      <param name="addToContainer" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, this object is added to the design container. The object must implement &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; for this to have any effect.">
        <see langword="true" /> の場合、オブジェクトはデザイン コンテナーに追加されます。 この値を有効にするには、オブジェクトが <see cref="T:System.ComponentModel.IComponent" /> を実装していることが必要です。</param>
      <returns vsli:raw="The newly created object instance.">新しく作成したオブジェクト インスタンス。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(System.String)">
      <summary vsli:raw="Gets an instance of a created object of the specified name, or &lt;see langword=&quot;null&quot; /&gt; if that object does not exist.">指定した名前で作成されたオブジェクトのインスタンスを取得します。そのようなオブジェクトが存在しない場合は <see langword="null" /> を取得します。</summary>
      <param name="name" vsli:raw="The name of the object to retrieve.">取得するオブジェクトの名前。</param>
      <returns vsli:raw="An instance of the object with the given name, or &lt;see langword=&quot;null&quot; /&gt; if no object by that name can be found.">指定した名前を持つオブジェクトのインスタンス。その名前のオブジェクトが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified object, or &lt;see langword=&quot;null&quot; /&gt; if the object has no name.">指定したオブジェクトの名前を取得します。オブジェクトに名前がない場合は <see langword="null" /> を取得します。</summary>
      <param name="value" vsli:raw="The object to retrieve the name for.">名前を取得する対象のオブジェクト。</param>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object is unnamed.">オブジェクトの名前。オブジェクトに名前がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer of the requested type for the specified object type.">指定したオブジェクト型に対応する、要求された型のシリアライザーを取得します。</summary>
      <param name="objectType" vsli:raw="The type of the object to get the serializer for.">シリアライザーを取得する対象のオブジェクトの型。</param>
      <param name="serializerType" vsli:raw="The type of the serializer to retrieve.">取得するシリアライザーの型。</param>
      <returns vsli:raw="An instance of the requested serializer, or &lt;see langword=&quot;null&quot; /&gt; if no appropriate serializer can be located.">要求されたシリアライザーのインスタンス。該当するシリアライザーが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(System.String)">
      <summary vsli:raw="Gets a type of the specified name.">指定した名前の型を取得します。</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the type to load.">読み込まれる型の完全修飾名。</param>
      <returns vsli:raw="An instance of the type, or &lt;see langword=&quot;null&quot; /&gt; if the type cannot be loaded.">型のインスタンス。型を読み込めない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)">
      <summary vsli:raw="Removes a custom serialization provider from the serialization manager.">カスタム シリアル化プロバイダーをシリアル化マネージャーから削除します。</summary>
      <param name="provider" vsli:raw="The provider to remove. This object must have been added using &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)&quot; /&gt;.">削除するプロバイダー。 このオブジェクトは、<see cref="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)" /> を使用して追加されていることが必要です。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(System.Object)">
      <summary vsli:raw="Reports an error in serialization.">シリアル化時のエラーを報告します。</summary>
      <param name="errorInformation" vsli:raw="The error to report. This information object can be of any object type. If it is an exception, the message of the exception is extracted and reported to the user. If it is any other type, &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; is called to display the information to the user.">報告するエラー。 この情報オブジェクトには、任意のオブジェクト型を使用できます。 オブジェクトが例外である場合は、例外のメッセージが抽出され、ユーザーに報告されます。 それ以外の型である場合は、<see cref="M:System.Object.ToString" /> が呼び出され、ユーザーに対して情報が表示されます。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(System.Object,System.String)">
      <summary vsli:raw="Sets the name of the specified existing object.">指定した既存のオブジェクトの名前を設定します。</summary>
      <param name="instance" vsli:raw="The object instance to name.">名前を付ける対象のオブジェクト。</param>
      <param name="name" vsli:raw="The name to give the instance.">インスタンスに付ける名前。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context">
      <summary vsli:raw="Gets a stack-based, user-defined storage area that is useful for communication between serializers.">シリアライザー間の通信に役立つスタック ベースのユーザー定義ストレージ エリアを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ContextStack&quot; /&gt; that stores data.">データを格納する <see cref="T:System.ComponentModel.Design.Serialization.ContextStack" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties">
      <summary vsli:raw="Indicates custom properties that can be serializable with available serializers.">有効なシリアライザーを使用してシリアル化できるカスタム プロパティを示します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties to be serialized.">シリアル化されるプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider">
      <summary vsli:raw="Provides an interface that enables access to a serializer.">シリアライザーにアクセスできるようにするインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationProvider.GetSerializer(System.ComponentModel.Design.Serialization.IDesignerSerializationManager,System.Object,System.Type,System.Type)">
      <summary vsli:raw="Gets a serializer using the specified attributes.">指定した属性を使用してシリアライザーを取得します。</summary>
      <param name="manager" vsli:raw="The serialization manager requesting the serializer.">シリアライザーを要求しているシリアル化マネージャー。</param>
      <param name="currentSerializer" vsli:raw="An instance of the current serializer of the specified type. This can be &lt;see langword=&quot;null&quot; /&gt; if no serializer of the specified type exists.">指定した型の現在のシリアライザーのインスタンス。 指定した型のシリアライザーがない場合、この値は <see langword="null" /> になります。</param>
      <param name="objectType" vsli:raw="The data type of the object to serialize.">シリアル化するオブジェクトのデータ型。</param>
      <param name="serializerType" vsli:raw="The data type of the serializer to create.">作成するシリアライザーのデータ型。</param>
      <returns vsli:raw="An instance of a serializer of the type requested, or &lt;see langword=&quot;null&quot; /&gt; if the request cannot be satisfied.">要求された型のシリアライザーのインスタンス。要求を満たすシリアライザーがない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.IDesignerSerializationService">
      <summary vsli:raw="Provides an interface that can invoke serialization and deserialization.">シリアル化と逆シリアル化を起動できるインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Deserialize(System.Object)">
      <summary vsli:raw="Deserializes the specified serialization data object and returns a collection of objects represented by that data.">指定したシリアル化データ オブジェクトを逆シリアル化し、そのデータと等価なオブジェクトのコレクションを返します。</summary>
      <param name="serializationData" vsli:raw="An object consisting of serialized data.">シリアル化されたデータから構成されるオブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of objects rebuilt from the specified serialization data object.">指定したシリアル化データ オブジェクトから再ビルドしたオブジェクトの <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.IDesignerSerializationService.Serialize(System.Collections.ICollection)">
      <summary vsli:raw="Serializes the specified collection of objects and stores them in a serialization data object.">指定したオブジェクトのコレクションをシリアル化し、シリアル化されたデータをシリアル化データ オブジェクトに格納します。</summary>
      <param name="objects" vsli:raw="A collection of objects to serialize.">シリアル化するオブジェクトのコレクション。</param>
      <returns vsli:raw="An object that contains the serialized state of the specified collection of objects.">指定したオブジェクトのコレクションのシリアル化された状態を格納するオブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.INameCreationService">
      <summary vsli:raw="Provides a service that can generate unique names for objects.">オブジェクトの一意の名前を生成できるサービスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.CreateName(System.ComponentModel.IContainer,System.Type)">
      <summary vsli:raw="Creates a new name that is unique to all components in the specified container.">指定したコンテナー内でどのコンポーネントとも重複しない新しい名前を作成します。</summary>
      <param name="container" vsli:raw="The container where the new object is added.">新しいオブジェクトが追加される先のコンテナー。</param>
      <param name="dataType" vsli:raw="The data type of the object that receives the name.">名前を受け取るオブジェクトのデータ型。</param>
      <returns vsli:raw="A unique name for the data type.">データ型の一意の名前。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.IsValidName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">指定した名前が有効かどうかを示す値を取得します。</summary>
      <param name="name" vsli:raw="The name to validate.">検証対象の名前。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the name is valid; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">名前が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.INameCreationService.ValidateName(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified name is valid.">指定した名前が有効かどうかを示す値を取得します。</summary>
      <param name="name" vsli:raw="The name to validate.">検証対象の名前。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.InstanceDescriptor">
      <summary vsli:raw="Provides the information necessary to create an instance of an object. This class cannot be inherited.">オブジェクトのインスタンスを作成するために必要な情報を提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information and arguments.">メンバー情報と引数を指定して、<see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">記述子のメンバー情報。 これは、<see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.ConstructorInfo" />、<see cref="T:System.Reflection.FieldInfo" />、または <see cref="T:System.Reflection.PropertyInfo" /> である場合もあります。 これが <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" />、または <see cref="T:System.Reflection.PropertyInfo" /> である場合は、<see langword="static" /> メンバーを表している必要があります。</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">メンバーに渡される引数のコレクション。 引数がない場合、このパラメーターは <see langword="null" /> または空のコレクションになります。 コレクションは、<see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> の他のインスタンスから構成されることもあります。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member.  &#xA;&#xA;-or-&#xA;  &#xA;&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" /> の型が <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" />、または <see cref="T:System.Reflection.PropertyInfo" /> であり、<see langword="static" /> メンバーを表していません。  

- または - 
<paramref name="member" /> の型が <see cref="T:System.Reflection.PropertyInfo" /> であり、読み取り可能ではありません。  

- または - 
<paramref name="member" /> の型が <see cref="T:System.Reflection.MethodInfo" /> または <see cref="T:System.Reflection.ConstructorInfo" /> であり、<paramref name="arguments" /> の引数の数が <paramref name="member" /> のシグネチャに一致しません。

- または -

<paramref name="member" /> の型が <see cref="T:System.Reflection.ConstructorInfo" /> であり、<see langword="static" /> メンバーを表しています。  

- または - 
<paramref name="member" /> の型が <see cref="T:System.Reflection.FieldInfo" /> であり、<paramref name="arguments" /> の引数の数が 0 以外です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.#ctor(System.Reflection.MemberInfo,System.Collections.ICollection,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; class using the specified member information, arguments, and value indicating whether the specified information completely describes the instance.">メンバー情報、引数、およびこれらの情報がインスタンスの完全な記述であるかどうかを示す値を指定して、<see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="member" vsli:raw="The member information for the descriptor. This can be a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;. If this is a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, it must represent a &lt;see langword=&quot;static&quot; /&gt; member.">記述子のメンバー情報。 これは、<see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.ConstructorInfo" />、<see cref="T:System.Reflection.FieldInfo" />、または <see cref="T:System.Reflection.PropertyInfo" /> である場合もあります。 これが <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" />、または <see cref="T:System.Reflection.PropertyInfo" /> である場合は、<see langword="static" /> メンバーを表している必要があります。</param>
      <param name="arguments" vsli:raw="The collection of arguments to pass to the member. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an empty collection if there are no arguments. The collection can also consist of other instances of &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;.">メンバーに渡される引数のコレクション。 引数がない場合、このパラメーターは <see langword="null" /> または空のコレクションになります。 コレクションは、<see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> の他のインスタンスから構成されることもあります。</param>
      <param name="isComplete" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified information completely describes the instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した情報がインスタンスの完全な記述である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;, &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, or &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt;, and it does not represent a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; and is not readable.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; does not match the signature of &lt;paramref name=&quot;member&quot; /&gt;.  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; and represents a &lt;see langword=&quot;static&quot; /&gt; member  &#xA;  &#xA; &lt;paramref name=&quot;member&quot; /&gt; is of type &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;, and the number of arguments in &lt;paramref name=&quot;arguments&quot; /&gt; is not zero.">
        <paramref name="member" /> の型が <see cref="T:System.Reflection.MethodInfo" />、<see cref="T:System.Reflection.FieldInfo" /> または <see cref="T:System.Reflection.PropertyInfo" /> であり、<see langword="static" /> メンバーを表していません。 
 <paramref name="member" /> の型が <see cref="T:System.Reflection.PropertyInfo" /> であり、読み取り可能ではありません。  
  
 <paramref name="member" /> の型が <see cref="T:System.Reflection.MethodInfo" /> または <see cref="T:System.Reflection.ConstructorInfo" /> であり、<paramref name="arguments" /> の引数の数が <paramref name="member" /> のシグネチャに一致しません。  
  
 <paramref name="member" /> の型が <see cref="T:System.Reflection.ConstructorInfo" /> であり、<see langword="static" /> メンバーを表しています。 
 <paramref name="member" /> の型が <see cref="T:System.Reflection.FieldInfo" /> であり、<paramref name="arguments" /> の引数の数が 0 以外です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.InstanceDescriptor.Invoke">
      <summary vsli:raw="Invokes this instance descriptor and returns the object the descriptor describes.">このインスタンス記述子を呼び出し、記述子が記述するオブジェクトを返します。</summary>
      <returns vsli:raw="The object this instance descriptor describes.">このインスタンス記述子が記述するオブジェクト。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.Arguments">
      <summary vsli:raw="Gets the collection of arguments that can be used to reconstruct an instance of the object that this instance descriptor represents.">このインスタンス記述子が表すオブジェクトのインスタンスを再構築するために使用できる引数のコレクションを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; of arguments that can be used to create the object.">オブジェクトを作成するために使用できる引数の <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.IsComplete">
      <summary vsli:raw="Gets a value indicating whether the contents of this &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt; completely identify the instance.">この <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> の内容でインスタンスを完全に識別できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instance is completely described; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">インスタンスが完全に記述されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.InstanceDescriptor.MemberInfo">
      <summary vsli:raw="Gets the member information that describes the instance this descriptor is associated with.">この記述子が関連付けられているインスタンスを記述するメンバー情報を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; that describes the instance that this object is associated with.">このオブジェクトが関連付けられているインスタンスを記述する <see cref="T:System.Reflection.MemberInfo" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationship">
      <summary vsli:raw="Represents a single relationship between an object and a member.">オブジェクトとメンバー間の単一のリレーションシップを表します。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty">
      <summary vsli:raw="Represents the empty member relationship. This field is read-only.">空のメンバー リレーションシップを表します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="owner" vsli:raw="The object that owns &lt;paramref name=&quot;member&quot; /&gt;.">
        <paramref name="member" /> を所有するオブジェクト。</param>
      <param name="member" vsli:raw="The member which is to be related to &lt;paramref name=&quot;owner&quot; /&gt;.">
        <paramref name="owner" /> に関連付けられるメンバー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; or &lt;paramref name=&quot;member&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> または <paramref name="member" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.Equals(System.Object)">
      <summary vsli:raw="Determines whether this instance is equal to the specified object representing a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance.">2 つの <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> インスタンスが等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> と比較する <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is a &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; instance and is equal to the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した <see langword="true" /> が現在の <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> と等しい場合は <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Equality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equivalent.">指定した 2 つの <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体が等しいかどうかをテストします。</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the equality operator.">等値演算子の左側に表示される <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体。</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the equality operator.">等値演算子の右側に表示される <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体。</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つの <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体が等しい場合、この演算子は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationship.op_Inequality(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Tests whether two specified &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different.">指定した 2 つの <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体が異なるかどうかをテストします。</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the left of the inequality operator.">非等値演算子の左側に表示される <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体。</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure that is to the right of the inequality operator.">非等値演算子の右側に表示される <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体。</param>
      <returns vsli:raw="This operator returns &lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structures are different; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つの <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" /> 構造体が異なる場合、この演算子は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship.">このリレーションシップが <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> リレーションシップに等しいかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this relationship is equal to the &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; relationship; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このリレーションシップが <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" /> リレーションシップと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Member">
      <summary vsli:raw="Gets the related member.">関連するメンバーを取得します。</summary>
      <returns vsli:raw="The member that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">
        <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> に渡されるメンバー。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationship.Owner">
      <summary vsli:raw="Gets the owning object.">所有オブジェクトを取得します。</summary>
      <returns vsli:raw="The owning object that is passed in to the &lt;see cref=&quot;M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)&quot; /&gt;.">
        <see cref="M:System.ComponentModel.Design.Serialization.MemberRelationship.#ctor(System.Object,System.ComponentModel.MemberDescriptor)" /> に渡される所有オブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.MemberRelationshipService">
      <summary vsli:raw="Provides the base class for relating one member to another.">1 つのメンバーを別のメンバーに関連付けるための基本クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationshipService&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationshipService" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.GetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a relationship to the given source relationship.">指定したソース リレーションシップとのリレーションシップを取得します。</summary>
      <param name="source" vsli:raw="The source relationship.">ソース リレーションシップ。</param>
      <returns vsli:raw="A relationship to &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if no relationship exists.">
        <paramref name="source" /> とのリレーションシップ。リレーションシップが存在しない場合は <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SetRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Creates a relationship between the source object and target relationship.">ソース オブジェクトとターゲット リレーションシップの間のリレーションシップを作成します。</summary>
      <param name="source" vsli:raw="The source relationship.">ソース リレーションシップ。</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">ソースに設定するリレーションシップ。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The relationship is not supported by the service.">リレーションシップがサービスでサポートされていません。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.MemberRelationshipService.SupportsRelationship(System.ComponentModel.Design.Serialization.MemberRelationship,System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Gets a value indicating whether the given relationship is supported.">指定したリレーションシップがサポートされているかどうかを示す値を取得します。</summary>
      <param name="source" vsli:raw="The source relationship.">ソース リレーションシップ。</param>
      <param name="relationship" vsli:raw="The relationship to set into the source.">ソースに設定するリレーションシップ。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a relationship between the given two objects is supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのオブジェクト間のリレーションシップがサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.ComponentModel.Design.Serialization.MemberRelationship)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">ソース オブジェクトとターゲット オブジェクトの間のリレーションシップを確立します。</summary>
      <param name="source" vsli:raw="The source relationship. This is the left-hand side of a relationship assignment.">ソース リレーションシップ。 これは、リレーションシップの代入式の左辺です。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="source" /> が空であるか、またはサービスでリレーションシップがサポートされていません。</exception>
      <returns vsli:raw="The current relationship associated with &lt;paramref name=&quot;source&quot; /&gt;, or &lt;see cref=&quot;F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty&quot; /&gt; if there is no relationship.">
        <paramref name="source" /> に関連付けられている現在のリレーションシップ。リレーションシップが存在しない場合は <see cref="F:System.ComponentModel.Design.Serialization.MemberRelationship.Empty" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.MemberRelationshipService.Item(System.Object,System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Establishes a relationship between a source and target object.">ソース オブジェクトとターゲット オブジェクトの間のリレーションシップを確立します。</summary>
      <param name="sourceOwner" vsli:raw="The owner of a source relationship.">ソース リレーションシップの所有者。</param>
      <param name="sourceMember" vsli:raw="The member of a source relationship.">ソース リレーションシップのメンバー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="sourceOwner" /> または <paramref name="sourceMember" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;sourceOwner&quot; /&gt; or &lt;paramref name=&quot;sourceMember&quot; /&gt; is empty, or the relationship is not supported by the service.">
        <paramref name="sourceOwner" /> または <paramref name="sourceMember" /> が空であるか、またはサービスでリレーションシップがサポートされていません。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.MemberRelationship&quot; /&gt; structure encapsulating the relationship between a source and target object, or &lt;see langword=&quot;null&quot; /&gt; if there is no relationship.">ソース オブジェクトとターゲット オブジェクトの間のリレーションシップをカプセル化する <see cref="T:System.ComponentModel.Design.Serialization.MemberRelationship" />構造体。リレーションシップが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name to resolve.">解決する名前。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Name">
      <summary vsli:raw="Gets the name of the object to resolve.">解決するオブジェクトの名前を取得します。</summary>
      <returns vsli:raw="The name of the object to resolve.">解決するオブジェクトの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.ResolveNameEventArgs.Value">
      <summary vsli:raw="Gets or sets the object that matches the name.">名前と一致するオブジェクトを取得または設定します。</summary>
      <returns vsli:raw="The object that the name is associated with.">名前に関連付けられているオブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.ResolveNameEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot; /&gt; event of a serialization manager.">シリアル化マネージャーの <see cref="E:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.Design.Serialization.ResolveNameEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute">
      <summary vsli:raw="Indicates the base serializer to use for a root designer object. This class cannot be inherited.">ルート デザイナー オブジェクトのために使用する基本シリアライザーを示します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">属性を指定して、<see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">シリアライザーのデータ型の完全修飾名。</param>
      <param name="baseSerializerTypeName" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers as they all have different base types.">シリアライザーの基本型の名前。 シリアライザーの基本型がすべて異なっているため、1 つのクラスに複数のシリアライザーを組み込むことができます。</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このシリアライザーがドキュメントの動的な再読み込みをサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.String,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">属性を指定して、<see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializerTypeName" vsli:raw="The fully qualified name of the data type of the serializer.">シリアライザーのデータ型の完全修飾名。</param>
      <param name="baseSerializerType" vsli:raw="The name of the base type of the serializer. A class can include multiple serializers, as they all have different base types.">シリアライザーの基本型の名前。 シリアライザーの基本型がすべて異なっているため、1 つのクラスに複数のシリアライザーを組み込むことができます。</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このシリアライザーがドキュメントの動的な再読み込みをサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.#ctor(System.Type,System.Type,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute&quot; /&gt; class using the specified attributes.">属性を指定して、<see cref="T:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="serializerType" vsli:raw="The data type of the serializer.">シリアライザーのデータ型。</param>
      <param name="baseSerializerType" vsli:raw="The base type of the serializer. A class can include multiple serializers as they all have different base types.">シリアライザーの基本型。 シリアライザーの基本型がすべて異なっているため、1 つのクラスに複数のシリアライザーを組み込むことができます。</param>
      <param name="reloadable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this serializer supports dynamic reloading of the document; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このシリアライザーがドキュメントの動的な再読み込みをサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.Reloadable">
      <summary vsli:raw="Gets a value indicating whether the root serializer supports reloading of the design document without first disposing the designer host.">ルート シリアライザーが、デザイナー ホストを解放することなく実行されるデザイン ドキュメントの再読み込みをサポートするかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the root serializer supports reloading; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ルート シリアライザーが再読み込みをサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerBaseTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the base type of the serializer.">シリアライザーの基本型の完全修飾型名を取得します。</summary>
      <returns vsli:raw="The name of the base type of the serializer.">シリアライザーの基本型の名前。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.SerializerTypeName">
      <summary vsli:raw="Gets the fully qualified type name of the serializer.">シリアライザーの完全修飾型名を取得します。</summary>
      <returns vsli:raw="The name of the type of the serializer.">シリアライザーの型の名前。</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.RootDesignerSerializerAttribute.TypeId">
      <summary vsli:raw="Gets a unique ID for this attribute type.">この属性型の一意の ID を取得します。</summary>
      <returns vsli:raw="An object containing a unique ID for this attribute type.">この属性型の一意の ID を格納しているオブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.SerializationStore">
      <summary vsli:raw="Provides the base class for storing serialization data for the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.ComponentSerializationService&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.Serialization.ComponentSerializationService" /> のシリアル化データを格納するための基本クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Close">
      <summary vsli:raw="Closes the serialization store.">シリアル化ストアを閉じます。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.Save(System.IO.Stream)">
      <summary vsli:raw="Saves the store to the given stream.">指定したストリームにストアを保存します。</summary>
      <param name="stream" vsli:raw="The stream to which the store will be serialized.">ストアのシリアル化先のストリーム。</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.SerializationStore.System#IDisposable#Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.SerializationStore&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.Serialization.SerializationStore" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.SerializationStore.Errors">
      <summary vsli:raw="Gets a collection of errors that occurred during serialization or deserialization.">シリアル化中または逆シリアル化中に発生したエラーのコレクションを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains errors that occurred during serialization or deserialization.">シリアル化中または逆シリアル化中に発生したエラーを格納する <see cref="T:System.Collections.ICollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceContainer">
      <summary vsli:raw="Provides a simple implementation of the &lt;see cref=&quot;T:System.ComponentModel.Design.IServiceContainer&quot; /&gt; interface. This class cannot be inherited.">
        <see cref="T:System.ComponentModel.Design.IServiceContainer" /> インターフェイスの単純な実装を提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.ServiceContainer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.#ctor(System.IServiceProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; class using the specified parent service provider.">親サービス プロバイダーを指定して、<see cref="T:System.ComponentModel.Design.ServiceContainer" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parentProvider" vsli:raw="A parent service provider.">親サービス プロバイダー。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback)">
      <summary vsli:raw="Adds the specified service to the service container.">指定されたサービスをサービス コンテナーに追加します。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">追加するサービスの型です。</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">サービスを作成できるコールバック オブジェクト。 これにより、サービスを使用可能として宣言できますが、オブジェクトの作成はそのサービスが要求されるまで延期されます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> または <paramref name="callback" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">型のサービス <paramref name="serviceType" /> はコンテナー内に既に存在します。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.ComponentModel.Design.ServiceCreatorCallback,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">指定されたサービスをサービス コンテナーに追加します。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">追加するサービスの型です。</param>
      <param name="callback" vsli:raw="A callback object that can create the service. This allows a service to be declared as available, but delays creation of the object until the service is requested.">サービスを作成できるコールバック オブジェクト。 これにより、サービスを使用可能として宣言できますが、オブジェクトの作成はそのサービスが要求されるまで延期されます。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">サービスを任意の親サービス コンテナーに追加する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> または <paramref name="callback" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">型のサービス <paramref name="serviceType" /> はコンテナー内に既に存在します。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds the specified service to the service container.">指定されたサービスをサービス コンテナーに追加します。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">追加するサービスの型です。</param>
      <param name="serviceInstance" vsli:raw="An instance of the service to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">追加するサービスのインスタンス。 このオブジェクトは、<paramref name="serviceType" /> パラメーターに指定された型を実装しているか、またはその型から継承していることが必要です。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> または <paramref name="serviceInstance" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">型のサービス <paramref name="serviceType" /> はコンテナー内に既に存在します。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.AddService(System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Adds the specified service to the service container.">指定されたサービスをサービス コンテナーに追加します。</summary>
      <param name="serviceType" vsli:raw="The type of service to add.">追加するサービスの型です。</param>
      <param name="serviceInstance" vsli:raw="An instance of the service type to add. This object must implement or inherit from the type indicated by the &lt;paramref name=&quot;serviceType&quot; /&gt; parameter.">追加するサービスの型のインスタンスです。 このオブジェクトは、<paramref name="serviceType" /> パラメーターに指定された型を実装しているか、またはその型から継承していることが必要です。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be added to any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">サービスを任意の親サービス コンテナーに追加する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;serviceInstance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> または <paramref name="serviceInstance" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A service of type &lt;paramref name=&quot;serviceType&quot; /&gt; already exists in the container.">型のサービス <paramref name="serviceType" /> はコンテナー内に既に存在します。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose">
      <summary vsli:raw="Disposes this service container.">このサービス コンテナーを破棄します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Disposes this service container.">このサービス コンテナーを破棄します。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt; is in the process of being disposed of; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.ServiceContainer" /> が破棄処理中である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service.">要求したサービスを取得します。</summary>
      <param name="serviceType" vsli:raw="The type of service to retrieve.">取得するサービスの型。</param>
      <returns vsli:raw="An instance of the service if it could be found, or &lt;see langword=&quot;null&quot; /&gt; if it could not be found.">サービスが見つかった場合はそのサービスのインスタンス。サービスが見つからなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type)">
      <summary vsli:raw="Removes the specified service type from the service container.">指定されたサービスの型をサービス コンテナーから削除します。</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">削除するサービスの型です。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.Design.ServiceContainer.RemoveService(System.Type,System.Boolean)">
      <summary vsli:raw="Removes the specified service type from the service container.">指定されたサービスの型をサービス コンテナーから削除します。</summary>
      <param name="serviceType" vsli:raw="The type of service to remove.">削除するサービスの型です。</param>
      <param name="promote" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this service should be removed from any parent service containers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">任意の親サービス コンテナーからサービスを削除する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.Design.ServiceContainer.DefaultServices">
      <summary vsli:raw="Gets the default services implemented directly by &lt;see cref=&quot;T:System.ComponentModel.Design.ServiceContainer&quot; /&gt;.">
        <see cref="T:System.ComponentModel.Design.ServiceContainer" /> によって直接実装されている既定のサービスを取得します。</summary>
      <returns vsli:raw="The default services.">既定のサービス。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ServiceCreatorCallback">
      <summary vsli:raw="Provides a callback mechanism that can create an instance of a service on demand.">要求に応じてサービスのインスタンスを作成できるコールバック機構を提供します。</summary>
      <param name="container" vsli:raw="The service container that requested the creation of the service.">サービスの作成を要求したサービス コンテナー。</param>
      <param name="serviceType" vsli:raw="The type of service to create.">作成するサービスの型。</param>
      <returns vsli:raw="The service specified by &lt;paramref name=&quot;serviceType&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the service could not be created.">
        <paramref name="serviceType" /> によって指定されたサービス。サービスが作成されなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.StandardCommands">
      <summary vsli:raw="Defines identifiers for the standard set of commands that are available to most applications.">ほとんどのアプリケーションで使用できる一連の標準コマンドの識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignBottom command. This field is read-only.">AlignBottom コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignHorizontalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignHorizontalCenters command. This field is read-only.">AlignHorizontalCenters コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignLeft">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignLeft command. This field is read-only.">AlignLeft コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignRight command. This field is read-only.">AlignRight コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignToGrid command. This field is read-only.">AlignToGrid コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignTop">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignTop command. This field is read-only.">AlignTop コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.AlignVerticalCenters">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the AlignVerticalCenters command. This field is read-only.">AlignVerticalCenters コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeBottom">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeBottom command. This field is read-only.">ArrangeBottom コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeIcons command. This field is read-only.">ArrangeIcons コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ArrangeRight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ArrangeRight command. This field is read-only.">ArrangeRight コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringForward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringForward command. This field is read-only.">BringForward コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.BringToFront">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the BringToFront command. This field is read-only.">BringToFront コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterHorizontally">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterHorizontally command. This field is read-only.">CenterHorizontally コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.CenterVertically">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the CenterVertically command. This field is read-only.">CenterVertically コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Copy">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Copy command. This field is read-only.">Copy コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Cut">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Cut command. This field is read-only.">Cut コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Delete">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Delete command. This field is read-only.">Delete コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.DocumentOutline">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Document Outline command. This field is read-only.">Document Outline コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.F1Help">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the F1Help command. This field is read-only.">F1Help コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Group">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Group command. This field is read-only.">Group コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceConcatenate command. This field is read-only.">HorizSpaceConcatenate コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceDecrease command. This field is read-only.">HorizSpaceDecrease コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceIncrease command. This field is read-only.">HorizSpaceIncrease コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.HorizSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the HorizSpaceMakeEqual command. This field is read-only.">HorizSpaceMakeEqual コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LineupIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LineupIcons command. This field is read-only.">LineupIcons コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.LockControls">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the LockControls command. This field is read-only.">LockControls コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelRedo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelRedo command. This field is read-only.">MultiLevelRedo コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.MultiLevelUndo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the MultiLevelUndo command. This field is read-only.">MultiLevelUndo コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Paste">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Paste command. This field is read-only.">Paste コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Properties">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Properties command. This field is read-only.">Properties コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.PropertiesWindow">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the PropertiesWindow command. This field is read-only.">PropertiesWindow コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Redo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Redo command. This field is read-only.">Redo コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Replace">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Replace command. This field is read-only.">Replace コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SelectAll">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SelectAll command. This field is read-only.">SelectAll コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendBackward">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendBackward command. This field is read-only.">SendBackward コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SendToBack">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SendToBack command. This field is read-only.">SendToBack コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowGrid command. This field is read-only.">ShowGrid コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ShowLargeIcons">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ShowLargeIcons command. This field is read-only.">ShowLargeIcons コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControl">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControl command. This field is read-only.">SizeToControl コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlHeight">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlHeight command. This field is read-only.">SizeToControlHeight コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToControlWidth">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToControlWidth command. This field is read-only.">SizeToControlWidth コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToFit">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToFit command. This field is read-only.">SizeToFit コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SizeToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SizeToGrid command. This field is read-only.">SizeToGrid コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.SnapToGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the SnapToGrid command. This field is read-only.">SnapToGrid コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.TabOrder">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the TabOrder command. This field is read-only.">TabOrder コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Undo">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Undo command. This field is read-only.">Undo コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.Ungroup">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the Ungroup command. This field is read-only.">Ungroup コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbFirst">
      <summary vsli:raw="Gets the first of a set of verbs. This field is read-only.">一連の動詞の先頭を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VerbLast">
      <summary vsli:raw="Gets the last of a set of verbs. This field is read-only.">一連の動詞の末尾を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceConcatenate">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceConcatenate command. This field is read-only.">VertSpaceConcatenate コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceDecrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceDecrease command. This field is read-only.">VertSpaceDecrease コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceIncrease">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceIncrease command. This field is read-only.">VertSpaceIncrease コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.VertSpaceMakeEqual">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the VertSpaceMakeEqual command. This field is read-only.">VertSpaceMakeEqual コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewCode command. This field is read-only.">ViewCode コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardCommands.ViewGrid">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.Design.CommandID&quot; /&gt; for the ViewGrid command. This field is read-only.">ViewGrid コマンドの <see cref="T:System.ComponentModel.Design.CommandID" /> を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardCommands.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardCommands&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.StandardCommands" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.StandardToolWindows">
      <summary vsli:raw="Defines GUID identifiers that correspond to the standard set of tool windows that are available in the design environment.">デザイン環境で使用できる一連の標準ツール ウィンドウに対応する GUID 識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ObjectBrowser">
      <summary vsli:raw="Gets the GUID for the object browser. This field is read-only.">オブジェクト ブラウザーの GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.OutputWindow">
      <summary vsli:raw="Gets the GUID for the output window. This field is read-only.">出力ウィンドウの GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ProjectExplorer">
      <summary vsli:raw="Gets the GUID for the solution explorer. This field is read-only.">ソリューション エクスプローラーの GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.PropertyBrowser">
      <summary vsli:raw="Gets the GUID for the Properties window. This field is read-only.">[プロパティ] ウィンドウの GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.RelatedLinks">
      <summary vsli:raw="Gets the GUID for the related links frame. This field is read-only.">関連するリンク フレームの GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.ServerExplorer">
      <summary vsli:raw="Gets the GUID for the server explorer. This field is read-only.">サーバー エクスプローラーの GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.TaskList">
      <summary vsli:raw="Gets the GUID for the task list. This field is read-only.">タスク一覧の GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.StandardToolWindows.Toolbox">
      <summary vsli:raw="Gets the GUID for the Toolbox. This field is read-only.">ツールボックスの GUID を取得します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.StandardToolWindows.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.StandardToolWindows&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.StandardToolWindows" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.Design.TypeDescriptionProviderService">
      <summary vsli:raw="Provides a type description provider for a specified type.">指定された型に対応する型説明のプロバイダーを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Design.TypeDescriptionProviderService&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Design.TypeDescriptionProviderService" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Object)">
      <summary vsli:raw="Gets a type description provider for the specified object.">指定されたオブジェクトに対応する型説明のプロバイダーを取得します。</summary>
      <param name="instance" vsli:raw="The object to get a type description provider for.">型説明のプロバイダーを取得するオブジェクト。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;instance&quot; /&gt;.">
        <paramref name="instance" /> に対応する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.Design.TypeDescriptionProviderService.GetProvider(System.Type)">
      <summary vsli:raw="Gets a type description provider for the specified type.">指定された型に対応する型説明のプロバイダーを取得します。</summary>
      <param name="type" vsli:raw="The type to get a type description provider for.">型説明のプロバイダーを取得する型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that corresponds with &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> に対応する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="T:System.ComponentModel.Design.ViewTechnology">
      <summary vsli:raw="Defines identifiers for a set of technologies that designer hosts support.">デザイナー ホストがサポートする一連の技術の識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Default">
      <summary vsli:raw="Specifies the default view technology support.&#xA;        &#xA;The root designer may return any type of object, but the object must be compatible with an adapter for the technology of the host. Hosting environments such as Visual Studio provide a way to plug in new view technology adapters. The default view object for the Windows Forms designer is a &lt;see cref=&quot;T:System.Windows.Forms.Control&quot; /&gt; instance.">既定のビュー技術サポートを指定します。
        
ルート デザイナーから任意の種類のオブジェクトが返される可能性がありますが、そのオブジェクトはホストのテクノロジに対するアダプターと互換性を持つ必要があります。 Visual Studio などのホスティング環境には、新しいビュー テクノロジ アダプターをプラグインする方法が用意されています。 Windows フォーム デザイナー用の既定のビュー オブジェクトは、<see cref="T:System.Windows.Forms.Control" /> インスタンスです。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.Passthrough">
      <summary vsli:raw="Represents a mode in which the view object is passed directly to the development environment.&#xA;        &#xA;The view object must implement any interfaces the development environment requires. The Visual Studio development environment supports view objects that are either an ActiveX control, active document, or an object that implements the IVsWindowPane interface that is available through the Visual Studio VSI (Visual Studio Integration) program. The Visual Studio development environment provides support for this view technology. Support for this view technology is not necessarily available in all development environments.">ビュー オブジェクトを開発環境に直接渡すモードを表します。
        
ビュー オブジェクトでは、開発環境で求められるインターフェイスを実装する必要があります。 Visual Studio 開発環境でサポートされるビュー・オブジェクトは、ActiveX コントロール、アクティブ ドキュメント、または Visual Studio VSI (Visual Studio Integration) プログラムを介して使用可能な IVsWindowPane インターフェイスを実装するオブジェクトのいずれかです。 Visual Studio 開発環境では、このビューテクノロジに対するサポートが提供されています。 このビュー テクノロジのサポートは、必ずしもすべての開発環境で利用できるわけではありません。</summary>
    </member>
    <member name="F:System.ComponentModel.Design.ViewTechnology.WindowsForms">
      <summary vsli:raw="Represents a mode in which a Windows Forms control object provides the display for the root designer. The designer host fills the development environment document window with the Windows Forms control.">Windows フォーム コントロール オブジェクトがルート デザイナーにおける表示を提供するモードを表します。 デザイナー ホストは、開発環境のドキュメントウィンドウに Windows フォーム コントロールを埋め込みます。</summary>
    </member>
    <member name="T:System.ComponentModel.DesignTimeVisibleAttribute">
      <summary vsli:raw="&lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; marks a component's visibility. If &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Yes&quot; /&gt; is present, a visual designer can show this component on a designer.">
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> は、コンポーネントの可視性をマークします。 <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes" /> が設定されている場合、ビジュアル デザイナーは、このコンポーネントをデザイナーに表示できます。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Default">
      <summary vsli:raw="The default visibility which is &lt;see langword=&quot;Yes&quot; /&gt;.">既定の可視性は <see langword="Yes" /> です。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.No">
      <summary vsli:raw="Marks a component as not visible in a visual designer.">コンポーネントをビジュアル デザイナーで参照できないことをマークします。</summary>
    </member>
    <member name="F:System.ComponentModel.DesignTimeVisibleAttribute.Yes">
      <summary vsli:raw="Marks a component as visible in a visual designer.">コンポーネントをビジュアル デザイナーで参照できることをマークします。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; set to the default value of &lt;see langword=&quot;false&quot; /&gt;.">既定値の <see langword="false" /> に設定した、新しい <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> を作成します。</summary>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.ComponentModel.DesignTimeVisibleAttribute&quot; /&gt; with the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property set to the given value in &lt;paramref name=&quot;visible&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DesignTimeVisibleAttribute" /> プロパティに <paramref name="visible" /> で指定された値を設定して、新しい <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> を作成します。</summary>
      <param name="visible" vsli:raw="The value that the &lt;see cref=&quot;P:System.ComponentModel.DesignTimeVisibleAttribute.Visible&quot; /&gt; property will be set against.">
        <see cref="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible" /> プロパティに設定される値。</param>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="An Object to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">このインスタンスまたは null 参照 (Visual Basic では <see langword="Nothing" />) と比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.DesignTimeVisibleAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value.">このインスタンスが <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 値と等しいかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this instance is equal to the &lt;see cref=&quot;F:System.ComponentModel.DesignTimeVisibleAttribute.Default&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">インスタンスが <see cref="F:System.ComponentModel.DesignTimeVisibleAttribute.Default" /> 値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DesignTimeVisibleAttribute.Visible">
      <summary vsli:raw="Gets or sets whether the component should be shown at design time.">コンポーネントがデザイン時に表示されるかどうかを取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this component should be shown at design time, or &lt;see langword=&quot;false&quot; /&gt; if it shouldn't.">このコンポーネントがデザイン時に表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.DoubleConverter">
      <summary vsli:raw="Provides a type converter to convert double-precision, floating point number objects to and from various other representations.">倍精度浮動小数点数オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DoubleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.DoubleConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.DoubleConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.EnumConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Enum&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.Enum" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EnumConverter&quot; /&gt; class for the given type.">特定の型の <see cref="T:System.ComponentModel.EnumConverter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of enumeration to associate with this enumeration converter.">この列挙体コンバーターに関連付ける列挙体の型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to an enumeration object using the specified context.">このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを列挙オブジェクトに変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to an enumeration object.">指定した値オブジェクトを列挙オブジェクトに変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">値オブジェクトを目的の型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the enumeration.">
        <paramref name="value" /> は、列挙体に対して有効な値ではありません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">検証コントロールがデザインされた対象のデータ型の標準値のコレクションを取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">正しい値の標準セットを保持する <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。データ型が標準値セットをサポートしていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list using the specified context.">指定したコンテキストを使用して、<see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> から返された標準値のリストが排他的リストかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> から返された <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> が、有効値の排他的なリストの場合は <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />。他の値も有効である場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">指定したコンテキストを使用して、リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトがサポートしている標準値セットを見つけるために <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> を呼び出す必要があるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="M:System.ComponentModel.EnumConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Gets a value indicating whether the given object value is valid for this type.">指定したオブジェクトの値がこの型に対して有効かどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test.">テスト対象の <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値がこのオブジェクトに対して有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Comparer">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; that can be used to sort the values of the enumeration.">列挙値を並べ替えるために使用できる <see cref="T:System.Collections.IComparer" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; for sorting the enumeration values.">列挙値を並べ替えるための <see cref="T:System.Collections.IComparer" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.EnumType">
      <summary vsli:raw="Specifies the type of the enumerator this converter is associated with.">このコンバーターが関連付けられている列挙子の型を指定します。</summary>
      <returns vsli:raw="The type of the enumerator this converter is associated with.">このコンバーターが関連付けられている列挙子の型。</returns>
    </member>
    <member name="P:System.ComponentModel.EnumConverter.Values">
      <summary vsli:raw="Gets or sets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">この列挙体の有効な値を指定する <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that specifies the possible values for the enumeration.">この列挙体の有効な値を指定する <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptor">
      <summary vsli:raw="Provides information about an event.">イベントに関する情報を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.EventDescriptor" /> 内の名前と属性を使用して、<see cref="T:System.ComponentModel.MemberDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the event and its attributes.">イベントの名前とその属性を格納している <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">指定した <see cref="T:System.ComponentModel.EventDescriptor" /> 内の名前と、<see cref="T:System.ComponentModel.MemberDescriptor" /> および <see cref="T:System.ComponentModel.MemberDescriptor" /> 配列の両方に格納されている属性を使用して、<see cref="T:System.Attribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">メンバーの名前とその属性を格納している <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes you want to add to this event description.">イベントの説明に追加する属性を格納している <see cref="T:System.Attribute" /> 配列。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; class with the specified name and attribute array.">名前と属性配列を指定して、<see cref="T:System.ComponentModel.EventDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the event.">イベントの名前です。</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the event attributes.">イベントの属性を格納している <see cref="T:System.Attribute" /> 型の配列。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, binds the event to the component.">派生クラスでオーバーライドされた場合、イベントをコンポーネントに関連付けます。</summary>
      <param name="component" vsli:raw="A component that provides events to the delegate.">デリゲートにイベントを提供するコンポーネント。</param>
      <param name="value" vsli:raw="A delegate that represents the method that handles the event.">イベントを処理するメソッドを表すデリゲート。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptor.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived class, unbinds the delegate from the component so that the delegate will no longer receive events from the component.">派生クラスでオーバーライドされた場合、コンポーネントとデリゲートの関連付けを解除し、デリゲートがコンポーネントからイベントを受信しなくなるようにします。</summary>
      <param name="component" vsli:raw="The component that the delegate is bound to.">デリゲートが関連付けられているコンポーネント。</param>
      <param name="value" vsli:raw="The delegate to unbind from the component.">コンポーネントとの関連付けを解除するデリゲート。</param>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of component this event is bound to.">派生クラスでオーバーライドされた場合、イベントが関連付けられているコンポーネントの型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component the event is bound to.">イベントが関連付けられているコンポーネントの型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.EventType">
      <summary vsli:raw="When overridden in a derived class, gets the type of delegate for the event.">派生クラスでオーバーライドされた場合、イベントのデリゲートの型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of delegate for the event.">イベントのデリゲートの型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptor.IsMulticast">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether the event delegate is a multicast delegate.">派生クラスでオーバーライドされた場合、イベント デリゲートがマルチキャスト デリゲートかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event delegate is multicast; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">イベント デリゲートがマルチキャストの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.EventDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.EventDescriptor" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="F:System.ComponentModel.EventDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection to use, rather than creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">項目が格納されていないコレクションを新規作成するのではなく、空のコレクションを使用することを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> オブジェクトの配列を指定して、<see cref="T:System.ComponentModel.EventDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">コレクションにイベントを提供する、<see cref="T:System.ComponentModel.EventDescriptor" /> 型の配列。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.#ctor(System.ComponentModel.EventDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; class with the given array of &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects. The collection is optionally read-only.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> オブジェクトの配列を指定して、<see cref="T:System.ComponentModel.EventDescriptor" /> クラスの新しいインスタンスを初期化します。 このコレクションは、オプションで読み取り専用にできます。</summary>
      <param name="events" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that provides the events for this collection.">コレクションにイベントを提供する、<see cref="T:System.ComponentModel.EventDescriptor" /> 型の配列。</param>
      <param name="readOnly" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify a read-only collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションを読み取り専用に指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Add(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Adds an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the end of the collection.">コレクションの末尾に <see cref="T:System.ComponentModel.EventDescriptor" /> を追加します。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to add to the collection.">コレクションに追加する <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
      <returns vsli:raw="The position of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">コレクション内の <see cref="T:System.ComponentModel.EventDescriptor" /> の位置。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Clear">
      <summary vsli:raw="Removes all objects from the collection.">コレクションからすべてのオブジェクトを削除します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Contains(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.EventDescriptor" /> がコレクションに格納されているかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">コレクション内で検索する <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the &lt;paramref name=&quot;value&quot; /&gt; parameter given; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した <paramref name="value" /> パラメーターがコレクションに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Gets the description of the event with the specified name in the collection.">コレクション内の指定した名前を持つイベントの説明を取得します。</summary>
      <param name="name" vsli:raw="The name of the event to get from the collection.">コレクションから取得するイベントの名前。</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the event; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">イベントの大文字と小文字を区別しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">指定した名前の <see cref="T:System.ComponentModel.EventDescriptor" />。イベントが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator for this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">この <see cref="T:System.ComponentModel.EventDescriptorCollection" /> の列挙子を取得します</summary>
      <returns vsli:raw="An enumerator that implements &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> を実装している列挙子。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.IndexOf(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.EventDescriptor" /> のインデックスを返します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to find within the collection.">コレクション内で検索する <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; within the collection.">コレクション内の指定した <see cref="T:System.ComponentModel.EventDescriptor" /> のインデックス。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Insert(System.Int32,System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Inserts an &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to the collection at a specified index.">コレクション内の指定したインデックス位置に <see cref="T:System.ComponentModel.EventDescriptor" /> を挿入します。</summary>
      <param name="index" vsli:raw="The index within the collection in which to insert the &lt;paramref name=&quot;value&quot; /&gt; parameter.">コレクション内の <paramref name="value" /> パラメーターの挿入位置を示すインデックス。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to insert into the collection.">コレクションに挿入する <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.EventDescriptorCollection" /> を使用して、<see cref="T:System.Collections.IComparer" /> のメンバーを並べ替えます。</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">コレクション内の <see cref="T:System.ComponentModel.EventDescriptor" /> オブジェクトを並べ替えるために使用する比較子。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">
        <see cref="T:System.ComponentModel.EventDescriptorCollection" /> のメンバーを並べ替えます。 指定した順序が最初に適用され、次にコレクションの既定の並べ替え順序が適用されます。既定の並べ替え順序は、通常はアルファベット順です。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">コレクション内の <see cref="T:System.ComponentModel.EventDescriptor" /> オブジェクトを並べ替える順序を記述する文字列の配列。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Remove(System.ComponentModel.EventDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; from the collection.">指定された <see cref="T:System.ComponentModel.EventDescriptor" /> をコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove from the collection.">コレクションから削除する <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; at the specified index from the collection.">指定したインデックスにある <see cref="T:System.ComponentModel.EventDescriptor" /> をコレクションから削除します。</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to remove.">削除する <see cref="T:System.ComponentModel.EventDescriptor" /> のインデックス。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the default sort for this collection, which is usually alphabetical.">コレクションの既定の並べ替え順序を使用して、<see cref="T:System.ComponentModel.EventDescriptorCollection" /> のメンバーを並べ替えます。既定の並べ替え順序は、通常はアルファベット順です。</summary>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">新しい <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.EventDescriptorCollection" /> を使用して、<see cref="T:System.Collections.IComparer" /> のメンバーを並べ替えます。</summary>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">コレクション内の <see cref="T:System.Collections.IComparer" /> オブジェクトを並べ替えるために使用する <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">新しい <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order.">指定した並べ替え順序で、<see cref="T:System.ComponentModel.EventDescriptorCollection" /> のメンバーを並べ替えます。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">コレクション内の <see cref="T:System.ComponentModel.EventDescriptor" /> オブジェクトを並べ替える順序を記述する文字列の配列。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">新しい <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;, given a specified sort order and an &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">指定した並べ替え順序と <see cref="T:System.ComponentModel.EventDescriptorCollection" /> を使用して、<see cref="T:System.Collections.IComparer" /> のメンバーを並べ替えます。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in the collection.">コレクション内の <see cref="T:System.ComponentModel.EventDescriptor" /> オブジェクトを並べ替える順序を記述する文字列の配列。</param>
      <param name="comparer" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt; to use to sort the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; objects in this collection.">コレクション内の <see cref="T:System.Collections.IComparer" /> オブジェクトを並べ替えるために使用する <see cref="T:System.ComponentModel.EventDescriptor" />。</param>
      <returns vsli:raw="The new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt;.">新しい <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">コレクションの要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from collection. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">コレクションから要素がコピーされる 1 次元の <see cref="T:System.Array" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">項目をコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the collection.">コレクションに追加する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
      <returns vsli:raw="The position into which the new element was inserted.">新しい要素が挿入された位置。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all the items from the collection.">コレクションからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">コレクションに特定の値が格納されているかどうかを判断します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">コレクション内で検索する <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Object" /> がコレクション内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the collection.">コレクション内での指定した項目のインデックスを調べます。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">コレクション内で検索する <see cref="T:System.Object" />。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item to the collection at the specified index.">アイテムをコレクション内の指定したインデックスに挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the collection.">コレクションに挿入する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the collection.">特定のオブジェクトの最初に出現したものをコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the collection.">コレクションから削除する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">指定したインデックス位置にある項目を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of event descriptors in the collection.">コレクション内のイベント記述子の数を取得します。</summary>
      <returns vsli:raw="The number of event descriptors in the collection.">コレクション内のイベント記述子の数。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the event with the specified index number.">指定したインデックス番号のイベントを取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index number of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">取得または設定する <see cref="T:System.ComponentModel.EventDescriptor" /> の、0 から始まるインデックス番号。</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)&quot; /&gt;.">
        <paramref name="index" /> が <see cref="P:System.ComponentModel.EventDescriptorCollection.Item(System.Int32)" /> の有効なインデックスではありません。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified index number.">指定したインデックス番号を持つ <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the event with the specified name.">指定した名前を持つイベントを取得または設定します。</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; to get or set.">取得または設定する <see cref="T:System.ComponentModel.EventDescriptor" /> の名前。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the event does not exist.">指定した名前の <see cref="T:System.ComponentModel.EventDescriptor" />。イベントが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">コレクションに格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the collection.">コレクションに含まれる要素の数です。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized.">コレクションへのアクセスが同期されるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションへのアクセスが同期されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">コレクションへのアクセスの同期に使用できるオブジェクトです。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">コレクションが固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.EventDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" /> 以上になっています。</exception>
      <returns vsli:raw="The element at the specified index.">指定したインデックス位置にある要素。</returns>
    </member>
    <member name="T:System.ComponentModel.ExpandableObjectConverter">
      <summary vsli:raw="Provides a type converter to convert expandable objects to and from various other representations.">拡張可能なオブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExpandableObjectConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ExpandableObjectConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Gets a collection of properties for the type of object specified by the value parameter.">value パラメーターに指定されたオブジェクト型のプロパティのコレクションを取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of object to get the properties for.">プロパティを取得する対象となるオブジェクトの型を指定する <see cref="T:System.Object" />。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that will be used as a filter.">フィルターとして使用される、<see cref="T:System.Attribute" /> 型の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for the component, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">指定されたコンポーネントに対して公開されているプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。コレクションにプロパティが格納されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ExpandableObjectConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports properties using the specified context.">指定したコンテキストを使用して、オブジェクトがプロパティをサポートしているかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトのプロパティを見つけるために <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" /> を呼び出す必要があるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="T:System.ComponentModel.ExtenderProvidedPropertyAttribute">
      <summary vsli:raw="Specifies a property that is offered by an extender provider. This class cannot be inherited.">拡張プロバイダーによって提供されるプロパティを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ExtenderProvidedPropertyAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ExtenderProvidedPropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">このインスタンスと比較する <see cref="T:System.Object" /> または null 参照 (Visual Basic では <see langword="Nothing" />)。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.ExtenderProvidedPropertyAttribute.IsDefaultAttribute">
      <summary vsli:raw="Provides an indication whether the value of this instance is the default value for the derived class.">このインスタンスの値が派生クラスの既定値かどうかを示します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスがクラスの既定の属性である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ExtenderProperty">
      <summary vsli:raw="Gets the property that is being provided.">提供されるプロパティを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; encapsulating the property that is being provided.">提供されるプロパティをカプセル化する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.Provider">
      <summary vsli:raw="Gets the extender provider that is providing the property.">プロパティを提供している拡張プロバイダーを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; that is providing the property.">プロパティを提供している <see cref="T:System.ComponentModel.IExtenderProvider" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ExtenderProvidedPropertyAttribute.ReceiverType">
      <summary vsli:raw="Gets the type of object that can receive the property.">プロパティを受け取ることができるオブジェクトの型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; describing the type of object that can receive the property.">プロパティを受け取ることができるオブジェクトの型を示す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ComponentModel.GuidConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Guid&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.Guid" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.GuidConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.GuidConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a GUID object using the context.">このコンバーターが、コンテキストを使用して特定の型のオブジェクトを GUID オブジェクトに変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a GUID object.">特定のオブジェクトを GUID オブジェクトに変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GuidConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">指定したオブジェクトを別の型に変換します。</summary>
      <param name="context" vsli:raw="A formatter context.">フォーマッタ コンテキスト。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">オブジェクトの変換後の型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="The converted object.">変換後のオブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventArgs">
      <summary vsli:raw="Provides data for events that can be handled completely in an event handler.">イベント ハンドラーで完全に処理できるイベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with a default &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property value of &lt;see langword=&quot;false&quot; /&gt;.">既定の <see cref="T:System.ComponentModel.HandledEventArgs" /> プロパティ値である <see langword="false" /> を使用して、<see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.HandledEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; class with the specified default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">
        <see cref="T:System.ComponentModel.HandledEventArgs" /> プロパティの指定した既定値を使用して、<see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="defaultHandledValue" vsli:raw="The default value for the &lt;see cref=&quot;P:System.ComponentModel.HandledEventArgs.Handled&quot; /&gt; property.">
        <see cref="P:System.ComponentModel.HandledEventArgs.Handled" /> プロパティの既定値。</param>
    </member>
    <member name="P:System.ComponentModel.HandledEventArgs.Handled">
      <summary vsli:raw="Gets or sets a value that indicates whether the event handler has completely handled the event or whether the system should continue its own processing.">イベント ハンドラーがイベントを完全に処理したかどうか、またはシステムが独自の処理を継続する必要があるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been completely handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">イベントが完全に処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.HandledEventHandler">
      <summary vsli:raw="Represents a method that can handle events which may or may not require further processing after the event handler has returned.">イベント ハンドラーが戻った後に、さらに処理を必要とする場合と必要がない場合があるイベントを処理できるメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.HandledEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.HandledEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.IBindingList">
      <summary vsli:raw="Provides the features required to support both complex and simple scenarios when binding to a data source.">データ ソースへの連結時の複雑な処理と単純な処理を両方ともサポートするために必要な機能を提供します。</summary>
    </member>
    <member name="E:System.ComponentModel.IBindingList.ListChanged">
      <summary vsli:raw="Occurs when the list changes or an item in the list changes.">リストまたはリスト内の項目が変更された場合に発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the indexes used for searching.">検索に使用されるインデックスに <see cref="T:System.ComponentModel.PropertyDescriptor" /> を追加します。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the indexes used for searching.">検索に使用されるインデックスに追加する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.AddNew">
      <summary vsli:raw="Adds a new item to the list.">リストに新しい項目を追加します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.AllowNew&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.AllowNew" /> が <see langword="false" />です。</exception>
      <returns vsli:raw="The item added to the list.">リストに追加された項目。</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Sorts the list based on a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and a &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> と <see cref="T:System.ComponentModel.ListSortDirection" /> に基づいて並べ替えを行います。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to sort by.">並べ替えのキーとなる <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか 1 つ。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> が <see langword="false" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary vsli:raw="Returns the index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">指定された <see cref="T:System.ComponentModel.PropertyDescriptor" /> を保持する行のインデックスを返します。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to search on.">検索対象の <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="key" vsli:raw="The value of the &lt;paramref name=&quot;property&quot; /&gt; parameter to search for.">検索する <paramref name="property" /> パラメーターの値。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSearching&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" /> が <see langword="false" />です。</exception>
      <returns vsli:raw="The index of the row that has the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">指定された <see cref="T:System.ComponentModel.PropertyDescriptor" /> を保持する行のインデックス。</returns>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the indexes used for searching.">検索に使用されるインデックスから <see cref="T:System.ComponentModel.PropertyDescriptor" /> を削除します。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the indexes used for searching.">検索に使用されるインデックスから削除する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingList.RemoveSort">
      <summary vsli:raw="Removes any sort applied using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt;.">
        <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> を使用して並べ替えを適用した場合は、その並べ替えを削除します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> が <see langword="false" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowEdit">
      <summary vsli:raw="Gets whether you can update items in the list.">リストの項目を更新できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can update the items in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストの項目を更新できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowNew">
      <summary vsli:raw="Gets whether you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;.">
        <see cref="M:System.ComponentModel.IBindingList.AddNew" /> を使用してリストに項目を追加できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can add items to the list using &lt;see cref=&quot;M:System.ComponentModel.IBindingList.AddNew&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.ComponentModel.IBindingList.AddNew" /> を使用してリストに項目を追加できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.AllowRemove">
      <summary vsli:raw="Gets whether you can remove items from the list, using &lt;see cref=&quot;M:System.Collections.IList.Remove(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.Collections.IList.RemoveAt(System.Int32)&quot; /&gt;.">
        <see cref="M:System.Collections.IList.Remove(System.Object)" /> または <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" /> を使用してリストから項目を削除できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you can remove items from the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストから項目を削除できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.IsSorted">
      <summary vsli:raw="Gets whether the items in the list are sorted.">リストの項目が並べ替え済みかどうかを示す値を取得します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> が <see langword="false" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)&quot; /&gt; has been called and &lt;see cref=&quot;M:System.ComponentModel.IBindingList.RemoveSort&quot; /&gt; has not been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" /> が呼び出され、<see cref="M:System.ComponentModel.IBindingList.RemoveSort" /> は呼び出されていない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortDirection">
      <summary vsli:raw="Gets the direction of the sort.">並べ替えの順序を取得します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> が <see langword="false" />です。</exception>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SortProperty">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">並べ替えに使用されている <see cref="T:System.ComponentModel.PropertyDescriptor" /> を取得します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;P:System.ComponentModel.IBindingList.SupportsSorting&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" /> が <see langword="false" />です。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is being used for sorting.">並べ替えに使用されている <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsChangeNotification">
      <summary vsli:raw="Gets whether a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or an item in the list changes.">リストまたはリスト内の項目が変更されたときに、<see cref="E:System.ComponentModel.IBindingList.ListChanged" /> イベントを発生させるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event is raised when the list changes or when an item changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストまたはリスト内の項目が変更されたときに <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSearching">
      <summary vsli:raw="Gets whether the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method.">リストが <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> メソッドを使用した検索をサポートしているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports searching using the &lt;see cref=&quot;M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)&quot; /&gt; method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストが <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" /> メソッドを使用した検索をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingList.SupportsSorting">
      <summary vsli:raw="Gets whether the list supports sorting.">リストが並べ替えをサポートしているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストが並べ替えをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IBindingListView">
      <summary vsli:raw="Extends the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; interface by providing advanced sorting and filtering capabilities.">高度な並べ替えとフィルター処理の機能を提供して、<see cref="T:System.ComponentModel.IBindingList" /> インターフェイスを拡張します。</summary>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary vsli:raw="Sorts the data source based on the given &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> に基づいて、データ ソースを並べ替えます。</summary>
      <param name="sorts" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; containing the sorts to apply to the data source.">データ ソースに適用する並べ替えを格納する <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。</param>
    </member>
    <member name="M:System.ComponentModel.IBindingListView.RemoveFilter">
      <summary vsli:raw="Removes the current filter applied to the data source.">データ ソースに適用されている現在のフィルターを削除します。</summary>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.Filter">
      <summary vsli:raw="Gets or sets the filter to be used to exclude items from the collection of items returned by the data source.">データ ソースによって返された項目のコレクションから項目を除外するときに使用するフィルターを取得または設定します。</summary>
      <returns vsli:raw="The string used to filter items out in the item collection returned by the data source.">データ ソースによって返される項目のコレクションに含まれる項目をフィルター処理するときに使用する文字列。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SortDescriptions">
      <summary vsli:raw="Gets the collection of sort descriptions currently applied to the data source.">現在データ ソースに適用されている並べ替えに関する説明のコレクションを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; currently applied to the data source.">現在データ ソースに適用されている <see cref="T:System.ComponentModel.ListSortDescriptionCollection" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting">
      <summary vsli:raw="Gets a value indicating whether the data source supports advanced sorting.">データ ソースが高度な並べ替えをサポートしているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports advanced sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">データ ソースが高度な並べ替えをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IBindingListView.SupportsFiltering">
      <summary vsli:raw="Gets a value indicating whether the data source supports filtering.">データ ソースがフィルター処理をサポートしているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data source supports filtering; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">データ ソースがフィルター処理をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ICancelAddNew">
      <summary vsli:raw="Adds transactional capability when adding a new item to a collection.">コレクションに新しい項目を追加する際のトランザクション機能を追加します。</summary>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.CancelNew(System.Int32)">
      <summary vsli:raw="Discards a pending new item from the collection.">保留中の新しい項目をコレクションから破棄します。</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">コレクションに既に追加されている項目のインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.ICancelAddNew.EndNew(System.Int32)">
      <summary vsli:raw="Commits a pending new item to the collection.">保留中の新しい項目をコレクションにコミットします。</summary>
      <param name="itemIndex" vsli:raw="The index of the item that was previously added to the collection.">コレクションに既に追加されている項目のインデックス。</param>
    </member>
    <member name="T:System.ComponentModel.IComNativeDescriptorHandler">
      <summary vsli:raw="Provides a top-level mapping layer between a COM object and a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">COM オブジェクトと <see cref="T:System.ComponentModel.TypeDescriptor" /> の間の最上位のマップ レイヤーを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetAttributes(System.Object)">
      <summary vsli:raw="Gets the attributes for the specified component.">指定したコンポーネントの属性を取得します。</summary>
      <param name="component" vsli:raw="The component to get attributes for.">属性を取得する対象のコンポーネント。</param>
      <returns vsli:raw="A collection of attributes for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> の属性のコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetClassName(System.Object)">
      <summary vsli:raw="Gets the class name for the specified component.">指定したコンポーネントのクラス名を取得します。</summary>
      <param name="component" vsli:raw="The component to get the class name for.">クラス名を取得する対象のコンポーネント。</param>
      <returns vsli:raw="The name of the class that corresponds with &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> に対応するクラスの名前。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetConverter(System.Object)">
      <summary vsli:raw="Gets the type converter for the specified component.">指定したコンポーネントの型コンバーターを取得します。</summary>
      <param name="component" vsli:raw="The component to get the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for.">
        <see cref="T:System.ComponentModel.TypeConverter" /> を取得する対象のコンポーネント。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> の <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Gets the default event for the specified component.">指定したコンポーネントの既定のイベントを取得します。</summary>
      <param name="component" vsli:raw="The component to get the default event for.">既定のイベントを取得する対象のコンポーネント。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default event.">
        <paramref name="component" /> の既定のイベントを表す <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Gets the default property for the specified component.">指定したコンポーネントの既定のプロパティを取得します。</summary>
      <param name="component" vsli:raw="The component to get the default property for.">既定のプロパティを取得するコンポーネント。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents &lt;paramref name=&quot;component&quot; /&gt;'s default property.">
        <paramref name="component" /> の既定のプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets the editor for the specified component.">指定したコンポーネントのエディターを取得します。</summary>
      <param name="component" vsli:raw="The component to get the editor for.">取得するエディターの対象のコンポーネント。</param>
      <param name="baseEditorType" vsli:raw="The base type of the editor for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> のエディターの基本型。</param>
      <returns vsli:raw="The editor for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> のエディター。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object)">
      <summary vsli:raw="Gets the events for the specified component.">指定したコンポーネントのイベントを取得します。</summary>
      <param name="component" vsli:raw="The component to get events for.">イベントを取得する対象のコンポーネント。</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> のイベント記述子のコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the events with the specified attributes for the specified component.">指定したコンポーネントの指定した属性を持つイベントを取得します。</summary>
      <param name="component" vsli:raw="The component to get events for.">イベントを取得する対象のコンポーネント。</param>
      <param name="attributes" vsli:raw="The attributes used to filter events.">イベントにフィルターをかけるために使用する属性。</param>
      <returns vsli:raw="A collection of event descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> のイベント記述子のコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component.">指定したコンポーネントの名前を取得します。</summary>
      <param name="component" vsli:raw="The component to get the name of.">名前を取得する対象のコンポーネント。</param>
      <returns vsli:raw="The name of &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> の名前。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Gets the properties with the specified attributes for the specified component.">指定したコンポーネントの指定した属性を持つプロパティを取得します。</summary>
      <param name="component" vsli:raw="The component to get events for.">イベントを取得する対象のコンポーネント。</param>
      <param name="attributes" vsli:raw="The attributes used to filter properties.">プロパティにフィルターをかけるために使用する属性。</param>
      <returns vsli:raw="A collection of property descriptors for &lt;paramref name=&quot;component&quot; /&gt;.">
        <paramref name="component" /> のプロパティ記述子のコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.Int32,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified dispatch identifier.">指定したディスパッチ識別子を持つプロパティの値を取得します。</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">プロパティが属するオブジェクト。</param>
      <param name="dispid" vsli:raw="The dispatch identifier.">ディスパッチ識別子。</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">プロパティが取得されたかどうかを受け取る <see cref="T:System.Boolean" />。参照渡しで指定します。</param>
      <returns vsli:raw="The value of the property that has the specified dispatch identifier.">指定したディスパッチ識別子を持つプロパティの値。</returns>
    </member>
    <member name="M:System.ComponentModel.IComNativeDescriptorHandler.GetPropertyValue(System.Object,System.String,System.Boolean@)">
      <summary vsli:raw="Gets the value of the property that has the specified name.">指定した名前のプロパティの値を取得します。</summary>
      <param name="component" vsli:raw="The object to which the property belongs.">プロパティが属するオブジェクト。</param>
      <param name="propertyName" vsli:raw="The name of the property.">プロパティの名前。</param>
      <param name="success" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt;, passed by reference, that represents whether the property was retrieved.">プロパティが取得されたかどうかを受け取る <see cref="T:System.Boolean" />。参照渡しで指定します。</param>
      <returns vsli:raw="The value of the property that has the specified name.">指定した名前のプロパティの値。</returns>
    </member>
    <member name="T:System.ComponentModel.ICustomTypeDescriptor">
      <summary vsli:raw="Provides an interface that supplies dynamic custom type information for an object.">オブジェクトの動的なカスタム型情報を提供するインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetAttributes">
      <summary vsli:raw="Returns a collection of custom attributes for this instance of a component.">コンポーネントのこのインスタンスのカスタム属性のコレクションを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for this object.">このオブジェクトの属性を格納している <see cref="T:System.ComponentModel.AttributeCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetClassName">
      <summary vsli:raw="Returns the class name of this instance of a component.">コンポーネントのこのインスタンスのクラス名を返します。</summary>
      <returns vsli:raw="The class name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the class does not have a name.">オブジェクトのクラス名。クラスに名前がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetComponentName">
      <summary vsli:raw="Returns the name of this instance of a component.">コンポーネントのこのインスタンスの名前を返します。</summary>
      <returns vsli:raw="The name of the object, or &lt;see langword=&quot;null&quot; /&gt; if the object does not have a name.">オブジェクト名。オブジェクトに名前がない場合は <see langword="null" /> 。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetConverter">
      <summary vsli:raw="Returns a type converter for this instance of a component.">コンポーネントのこのインスタンスの型コンバーターを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is the converter for this object, or &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for this object.">このオブジェクトのコンバーターである <see cref="T:System.ComponentModel.TypeConverter" />。このオブジェクトの <see cref="T:System.ComponentModel.TypeConverter" /> がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultEvent">
      <summary vsli:raw="Returns the default event for this instance of a component.">コンポーネントのこのインスタンスの既定のイベントを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that represents the default event for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have events.">このオブジェクトの既定のイベントを表す <see cref="T:System.ComponentModel.EventDescriptor" /> 。このオブジェクトにイベントがない場合は <see langword="null" /> 。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetDefaultProperty">
      <summary vsli:raw="Returns the default property for this instance of a component.">コンポーネントのこのインスタンスの既定のプロパティを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the default property for this object, or &lt;see langword=&quot;null&quot; /&gt; if this object does not have properties.">このオブジェクトの既定のプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" />。このオブジェクトにプロパティがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Returns an editor of the specified type for this instance of a component.">コンポーネントのこのインスタンスに対して指定されている型のエディターを返します。</summary>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the editor for this object.">このオブジェクトのエディターを表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type that is the editor for this object, or &lt;see langword=&quot;null&quot; /&gt; if the editor cannot be found.">指定した型の、このオブジェクトのエディターとなる <see cref="T:System.Object" />。エディターが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents">
      <summary vsli:raw="Returns the events for this instance of a component.">コンポーネントのこのインスタンスのイベントを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the events for this component instance.">このコンポーネント インスタンスのイベントを表す <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetEvents(System.Attribute[])">
      <summary vsli:raw="Returns the events for this instance of a component using the specified attribute array as a filter.">フィルターとして指定された属性配列を使用して、コンポーネントのこのインスタンスのイベントを返します。</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">フィルターとして使用される <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; that represents the filtered events for this component instance.">このコンポーネント インスタンスのフィルター処理したイベントを表す <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties">
      <summary vsli:raw="Returns the properties for this instance of a component.">コンポーネントのこのインスタンスのプロパティを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties for this component instance.">このコンポーネント インスタンスのプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetProperties(System.Attribute[])">
      <summary vsli:raw="Returns the properties for this instance of a component using the attribute array as a filter.">属性配列をフィルターとして使用して、コンポーネントのこのインスタンスのプロパティを返します。</summary>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">フィルターとして使用される <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the filtered properties for this component instance.">このコンポーネント インスタンスのフィルター処理したプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICustomTypeDescriptor.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns an object that contains the property described by the specified property descriptor.">指定したプロパティ記述子によって記述されたプロパティを含むオブジェクトを返します。</summary>
      <param name="pd" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that represents the property whose owner is to be found.">所有者を見つけるプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the owner of the specified property.">指定したプロパティの所有者を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IDataErrorInfo">
      <summary vsli:raw="Provides the functionality to offer custom error information that a user interface can bind to.">ユーザー インターフェイスをバインドできる、カスタム エラー情報を提示するための機能を提供します。</summary>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Error">
      <summary vsli:raw="Gets an error message indicating what is wrong with this object.">オブジェクトに関する間違いを示すエラー メッセージを取得します。</summary>
      <returns vsli:raw="An error message indicating what is wrong with this object. The default is an empty string (&quot;&quot;).">オブジェクトに関する間違いを示すエラー メッセージ。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="P:System.ComponentModel.IDataErrorInfo.Item(System.String)">
      <summary vsli:raw="Gets the error message for the property with the given name.">指定した名前のプロパティに関するエラー メッセージを取得します。</summary>
      <param name="columnName" vsli:raw="The name of the property whose error message to get.">エラー メッセージを取得する対象のプロパティの名前。</param>
      <returns vsli:raw="The error message for the property. The default is an empty string (&quot;&quot;).">プロパティに関するエラー メッセージ。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="T:System.ComponentModel.IExtenderProvider">
      <summary vsli:raw="Defines the interface for extending properties to other components in a container.">プロパティの適用範囲をコンテナー内のほかのコンポーネントまで拡張するインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.ComponentModel.IExtenderProvider.CanExtend(System.Object)">
      <summary vsli:raw="Specifies whether this object can provide its extender properties to the specified object.">オブジェクトが、指定したオブジェクトに対してエクステンダー プロパティを提供できるかどうかを指定します。</summary>
      <param name="extendee" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to receive the extender properties.">エクステンダー プロパティを受け取る <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can provide extender properties to the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが、指定したオブジェクトに対してエクステンダー プロパティを提供できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IIntellisenseBuilder">
      <summary vsli:raw="Provides an interface to facilitate the retrieval of the builder's name and to display the builder.">効率的にビルダーの名前を検索して、ビルダーを表示するインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.IIntellisenseBuilder.Show(System.String,System.String,System.String@)">
      <summary vsli:raw="Shows the builder.">ビルダーを表示します。</summary>
      <param name="language" vsli:raw="The language service that is calling the builder.">ビルダーを呼び出す言語サービス。</param>
      <param name="value" vsli:raw="The expression being edited.">編集される式。</param>
      <param name="newValue" vsli:raw="The new value.">新しい値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value should be replaced with &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt; (if the user cancels, for example).">値を <paramref name="newValue" /> に置き換える必要がある場合は <see langword="true" />。それ以外の場合 (ユーザーがキャンセルした場合など) は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IIntellisenseBuilder.Name">
      <summary vsli:raw="Gets a localized name.">ローカライズされた名前を取得します。</summary>
      <returns vsli:raw="A localized name.">ローカライズされた名前。</returns>
    </member>
    <member name="T:System.ComponentModel.IListSource">
      <summary vsli:raw="Provides functionality to an object to return a list that can be bound to a data source.">データ ソースに連結できるリストを返す機能をオブジェクトに提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.IListSource.GetList">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from an object that does not implement an &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; itself.">それ自体は <see cref="T:System.Collections.IList" /> を実装していないオブジェクトから、データ ソースに連結できる <see cref="T:System.Collections.IList" /> を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that can be bound to a data source from the object.">オブジェクトからデータ ソースに連結できる <see cref="T:System.Collections.IList" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IListSource.ContainsListCollection">
      <summary vsli:raw="Gets a value indicating whether the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects.">コレクションが <see cref="T:System.Collections.IList" /> オブジェクトのコレクションかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is a collection of &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; objects; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションが <see cref="T:System.Collections.IList" /> オブジェクトのコレクションである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.INestedContainer">
      <summary vsli:raw="Provides functionality for nested containers, which logically contain zero or more other components and are owned by a parent component.">入れ子になったコンテナーを処理する機能を提供します。入れ子になったコンテナーは、論理上 0 個以上のコンポーネントを格納し、親コンポーネントによって所有されています。</summary>
    </member>
    <member name="P:System.ComponentModel.INestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for the nested container.">入れ子になったコンテナーの所有コンポーネントを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns the nested container.">入れ子になったコンテナーを所有している <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="T:System.ComponentModel.INestedSite">
      <summary vsli:raw="Provides the ability to retrieve the full nested name of a component.">コンポーネントの入れ子になった完全名を取得できるようにします。</summary>
    </member>
    <member name="P:System.ComponentModel.INestedSite.FullName">
      <summary vsli:raw="Gets the full name of the component in this site.">このサイト内のコンポーネントの完全名を取得します。</summary>
      <returns vsli:raw="The full name of the component in this site.">このサイト内のコンポーネントの完全名。</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceAttribute">
      <summary vsli:raw="Indicates whether the component associated with this attribute has been inherited from a base class. This class cannot be inherited.">この属性に関連付けられているコンポーネントが基本クラスから継承されたかどうかを示します。 このクラスは継承できません。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Default">
      <summary vsli:raw="Specifies that the default value for &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; is &lt;see cref=&quot;F:System.ComponentModel.InheritanceAttribute.NotInherited&quot; /&gt;. This field is read-only.">
        <see cref="T:System.ComponentModel.InheritanceAttribute" /> の既定値として <see cref="F:System.ComponentModel.InheritanceAttribute.NotInherited" /> を指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.Inherited">
      <summary vsli:raw="Specifies that the component is inherited. This field is read-only.">コンポーネントが継承されることを指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.InheritedReadOnly">
      <summary vsli:raw="Specifies that the component is inherited and is read-only. This field is read-only.">コンポーネントが継承され、読み取り専用であることを指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceAttribute.NotInherited">
      <summary vsli:raw="Specifies that the component is not inherited. This field is read-only.">コンポーネントが継承されないことを指定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.InheritanceAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.#ctor(System.ComponentModel.InheritanceLevel)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt; class with the specified inheritance level.">継承レベルを指定して、<see cref="T:System.ComponentModel.InheritanceAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="inheritanceLevel" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; that indicates the level of inheritance to set this attribute to.">属性に設定する継承のレベルを示す <see cref="T:System.ComponentModel.InheritanceLevel" />。</param>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.Equals(System.Object)">
      <summary vsli:raw="Override to test for equality.">オーバーライドして等しいかどうかを確認します。</summary>
      <param name="value" vsli:raw="The object to test.">テストするオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is the same; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトが同一である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">このオブジェクトのハッシュコードを返します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.InheritanceAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">属性の現在の値が既定値かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">属性の現在の値が既定値である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InheritanceAttribute.ToString">
      <summary vsli:raw="Converts this attribute to a string.">この属性を文字列に変換します。</summary>
      <returns vsli:raw="A string that represents this &lt;see cref=&quot;T:System.ComponentModel.InheritanceAttribute&quot; /&gt;.">この <see cref="T:System.ComponentModel.InheritanceAttribute" /> を表す文字列。</returns>
    </member>
    <member name="P:System.ComponentModel.InheritanceAttribute.InheritanceLevel">
      <summary vsli:raw="Gets or sets the current inheritance level stored in this attribute.">属性に格納されている現在の継承レベルを取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.InheritanceLevel&quot; /&gt; stored in this attribute.">属性に格納されている <see cref="T:System.ComponentModel.InheritanceLevel" />。</returns>
    </member>
    <member name="T:System.ComponentModel.InheritanceLevel">
      <summary vsli:raw="Defines identifiers for types of inheritance levels.">さまざまな種類の継承レベルを示す識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.Inherited">
      <summary vsli:raw="The object is inherited.">オブジェクトは継承されます。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.InheritedReadOnly">
      <summary vsli:raw="The object is inherited, but has read-only access.">オブジェクトは継承されますが、読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.InheritanceLevel.NotInherited">
      <summary vsli:raw="The object is not inherited.">オブジェクトは継承されません。</summary>
    </member>
    <member name="T:System.ComponentModel.InstallerTypeAttribute">
      <summary vsli:raw="Specifies the installer for a type that installs components.">型に対して、コンポーネントをインストールするインストーラーを指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class with the name of the component's installer type.">コンポーネントのインストーラー型の名前を使用して、<see cref="T:System.ComponentModel.InstallerTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName" vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">この属性が連結されているコンポーネントのインストーラーを表す <see cref="T:System.Type" /> の名前。 このクラスは、<see cref="T:System.ComponentModel.Design.IDesigner" /> を実装する必要があります。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt; class, when given a &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for a component.">コンポーネントのインストーラーを表す <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> が指定されている場合、<see cref="T:System.Type" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="installerType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the installer for the component this attribute is bound to. This class must implement &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt;.">この属性が連結されているコンポーネントのインストーラーを表す <see cref="T:System.Type" />。 このクラスは、<see cref="T:System.ComponentModel.Design.IDesigner" /> を実装する必要があります。</param>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">値が等しいかどうかを確認するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したオブジェクトの値が現在の値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.InstallerTypeAttribute.GetHashCode">
      <summary vsli:raw="Returns the hashcode for this object.">このオブジェクトのハッシュコードを返します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.InstallerTypeAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.InstallerTypeAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.InstallerTypeAttribute.InstallerType">
      <summary vsli:raw="Gets the type of installer associated with this attribute.">この属性に関連付けられているインストーラーの型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of installer associated with this attribute, or &lt;see langword=&quot;null&quot; /&gt; if an installer does not exist.">この属性に関連付けられているインストーラーの型を表す <see cref="T:System.Type" />。インストーラーがない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.InstanceCreationEditor">
      <summary vsli:raw="Creates an instance of a particular type of property from a drop-down box within the &lt;see cref=&quot;T:System.Windows.Forms.PropertyGrid&quot; /&gt;.">
        <see cref="T:System.Windows.Forms.PropertyGrid" /> 内のドロップダウン ボックスから特定の型のプロパティのインスタンスを作成します。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.InstanceCreationEditor&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.InstanceCreationEditor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.InstanceCreationEditor.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="When overridden in a derived class, returns an instance of the specified type.">派生クラスでオーバーライドされた場合は、指定した型のインスタンスを返します。</summary>
      <param name="context" vsli:raw="The context information.">コンテキスト情報。</param>
      <param name="instanceType" vsli:raw="The specified type.">指定された型。</param>
      <returns vsli:raw="An instance of the specified type or &lt;see langword=&quot;null&quot; /&gt;.">指定した型のインスタンスまたは <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.InstanceCreationEditor.Text">
      <summary vsli:raw="Gets the specified text.">指定したテキストを取得します。</summary>
      <returns vsli:raw="The specified text.">指定されたテキスト。</returns>
    </member>
    <member name="T:System.ComponentModel.Int16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit signed integer objects to and from other representations.">16 ビット符号付き整数オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Int16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int16Converter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Int16Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.Int32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit signed integer objects to and from other representations.">32 ビット符号付き整数オブジェクトから他のさまざまな表現への変換や、その逆の変換を実行する型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Int32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int32Converter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Int32Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.Int64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit signed integer objects to and from various other representations.">64 ビット符号付き整数オブジェクトから他のさまざまな表現への変換や、その逆の変換を実行する型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.Int64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.Int64Converter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.Int64Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.IRaiseItemChangedEvents">
      <summary vsli:raw="Indicates whether a class converts property change events to &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">クラスがプロパティ変更のイベントを <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> イベントに変換するかどうかを示します。</summary>
    </member>
    <member name="P:System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events.">
        <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> オブジェクトが <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> イベントを発生させるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.IRaiseItemChangedEvents&quot; /&gt; object raises &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; events when one of its property values changes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティ値のいずれかが変更されたときに <see cref="T:System.ComponentModel.IRaiseItemChangedEvents" /> オブジェクトが <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitializeNotification">
      <summary vsli:raw="Allows coordination of initialization for a component and its dependent properties.">コンポーネントとそのコンポーネントに依存するプロパティの初期化を調整できるようにします。</summary>
    </member>
    <member name="E:System.ComponentModel.ISupportInitializeNotification.Initialized">
      <summary vsli:raw="Occurs when initialization of the component is completed.">コンポーネントの初期化が完了したときに発生します。</summary>
    </member>
    <member name="P:System.ComponentModel.ISupportInitializeNotification.IsInitialized">
      <summary vsli:raw="Gets a value indicating whether the component is initialized.">コンポーネントが初期化されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the component has completed initialization; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンポーネントの初期化が完了していることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypeDescriptorContext">
      <summary vsli:raw="Provides contextual information about a component, such as its container and property descriptor.">コンテナーやプロパティ記述子などの、コンポーネントに関するコンテキスト情報を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanged">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanged" /> イベントを発生させます。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypeDescriptorContext.OnComponentChanging">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.Design.IComponentChangeService.ComponentChanging" /> イベントを発生させます。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can be changed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトを変更できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Container">
      <summary vsli:raw="Gets the container representing this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; request.">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> 要求を表すコンテナーを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; with the set of objects for this &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no container or if the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; does not use outside objects.">この <see cref="T:System.ComponentModel.IContainer" /> が使用する一連のオブジェクトを格納する <see cref="T:System.ComponentModel.TypeDescriptor" />。コンテナーがない場合、または <see cref="T:System.ComponentModel.TypeDescriptor" /> が外部オブジェクトを使用しない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.Instance">
      <summary vsli:raw="Gets the object that is connected with this type descriptor request.">この型記述子の要求に関連付けられているオブジェクトを取得します。</summary>
      <returns vsli:raw="The object that invokes the method on the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no object responsible for the call.">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> でメソッドを呼び出すオブジェクト。この呼び出しを行うオブジェクトがない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ITypeDescriptorContext.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is associated with the given context item.">特定のコンテキスト項目に関連付けられている <see cref="T:System.ComponentModel.PropertyDescriptor" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the given context item; otherwise, &lt;see langword=&quot;null&quot; /&gt; if there is no &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; responsible for the call.">特定のコンテキスト項目について説明する <see cref="T:System.ComponentModel.PropertyDescriptor" />。呼び出しを行う <see cref="T:System.ComponentModel.PropertyDescriptor" /> がない場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ITypedList">
      <summary vsli:raw="Provides functionality to discover the schema for a bindable list, where the properties available for binding differ from the public properties of the object to bind to.">バインドに利用できるプロパティがバインド先のオブジェクトのパブリック プロパティと異なる場合に、バインド可能リストのスキーマを検出できるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">データ バインドに使用される各項目のプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> を返します。</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to find in the collection as bindable. This can be &lt;see langword=&quot;null&quot; /&gt;.">コレクションから検索するバインド可能な <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトの配列。 これは <see langword="null" /> でもかまいません。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that represents the properties on each item used to bind data.">データ バインドに使用される各項目のプロパティを表す <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Returns the name of the list.">リストの名前を返します。</summary>
      <param name="listAccessors" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects, for which the list name is returned. This can be &lt;see langword=&quot;null&quot; /&gt;.">リスト名を返す対象の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトの配列。 これは <see langword="null" /> でもかまいません。</param>
      <returns vsli:raw="The name of the list.">リストの名前。</returns>
    </member>
    <member name="T:System.ComponentModel.License">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for all licenses. A license is granted to a specific instance of a component.">すべてのライセンスの <see langword="abstract" /> 基本クラスを提供します。 ライセンスは、コンポーネントの特定のインスタンスに付与されます。</summary>
    </member>
    <member name="M:System.ComponentModel.License.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.License" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.License.Dispose">
      <summary vsli:raw="When overridden in a derived class, disposes of the resources used by the license.">派生クラスでオーバーライドされた場合、ライセンスによって使用されているリソースを破棄します。</summary>
    </member>
    <member name="P:System.ComponentModel.License.LicenseKey">
      <summary vsli:raw="When overridden in a derived class, gets the license key granted to this component.">派生クラスでオーバーライドされた場合、コンポーネントに与えられたライセンス キーを取得します。</summary>
      <returns vsli:raw="A license key granted to this component.">コンポーネントに与えられたライセンス キー。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseContext">
      <summary vsli:raw="Specifies when you can use a licensed object and provides a way of obtaining additional services needed to support licenses running within its domain.">ライセンスを与えられたオブジェクトをいつ使用できるかを指定し、そのドメイン内で実行するライセンスをサポートするために必要な追加のサービスを取得する方法を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.LicenseContext" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetSavedLicenseKey(System.Type,System.Reflection.Assembly)">
      <summary vsli:raw="When overridden in a derived class, returns a saved license key for the specified type, from the specified resource assembly.">派生クラスでオーバーライドされた場合、指定されたリソース アセンブリから、指定された型に対して保存されているライセンス キーを返します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component.">コンポーネントの型を表す <see cref="T:System.Type" />。</param>
      <param name="resourceAssembly" vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; with the license key.">ライセンス キーを持つ <see cref="T:System.Reflection.Assembly" />。</param>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type. This method returns &lt;see langword=&quot;null&quot; /&gt; unless you override it.">指定した型の <see cref="P:System.ComponentModel.License.LicenseKey" />。 このメソッドは、オーバーライドされない限り <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.GetService(System.Type)">
      <summary vsli:raw="Gets the requested service, if it is available.">要求されたサービスがある場合は、そのサービスを取得します。</summary>
      <param name="type" vsli:raw="The type of service to retrieve.">取得するサービスの型。</param>
      <returns vsli:raw="An instance of the service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be found.">サービスのインスタンス。サービスが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseContext.SetSavedLicenseKey(System.Type,System.String)">
      <summary vsli:raw="When overridden in a derived class, sets a license key for the specified type.">派生クラスでオーバーライドされた場合、指定された型のライセンス キーを設定します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component associated with the license key.">ライセンス キーに関連付けられているコンポーネントを表す <see cref="T:System.Type" />。</param>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to save for the type of component.">コンポーネントの型に対して保存する <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
    </member>
    <member name="P:System.ComponentModel.LicenseContext.UsageMode">
      <summary vsli:raw="When overridden in a derived class, gets a value that specifies when you can use a license.">派生クラスでオーバーライドされた場合、ライセンスをいつ使用できるかを指定する値を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values that specifies when you can use a license. The default is &lt;see cref=&quot;F:System.ComponentModel.LicenseUsageMode.Runtime&quot; /&gt;.">ライセンスをいつ使用できるかを指定する <see cref="T:System.ComponentModel.LicenseUsageMode" /> 値の 1 つ。 既定値は、<see cref="F:System.ComponentModel.LicenseUsageMode.Runtime" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseException">
      <summary vsli:raw="Represents the exception thrown when a component cannot be granted a license.">コンポーネントにライセンスが与えられなかった場合にスローされる例外を表します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class with the given &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; and &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.LicenseException" /> と <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を使用して、<see cref="T:System.Runtime.Serialization.StreamingContext" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">逆シリアル化に使用する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">逆シリアル化に使用する転送先。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type of component that was denied a license.">ライセンスを拒否されたコンポーネントの型を指定して、<see cref="T:System.ComponentModel.LicenseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">ライセンスが与えられなかったコンポーネントの型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license.">ライセンスを拒否されたコンポーネントの型とインスタンスを指定して、<see cref="T:System.ComponentModel.LicenseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">ライセンスが与えられなかったコンポーネントの型を表す <see cref="T:System.Type" />。</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">ライセンスが与えられなかったコンポーネントのインスタンス。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display.">ライセンスを拒否されたコンポーネントの型とインスタンス、表示するメッセージを指定して、<see cref="T:System.ComponentModel.LicenseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">ライセンスが与えられなかったコンポーネントの型を表す <see cref="T:System.Type" />。</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">ライセンスが与えられなかったコンポーネントのインスタンス。</param>
      <param name="message" vsli:raw="The exception message to display.">表示する例外メッセージ。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.#ctor(System.Type,System.Object,System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; class for the type and the instance of the component that was denied a license, along with a message to display and the original exception thrown.">ライセンスを拒否されたコンポーネントの型とインスタンス、表示するメッセージ、スローされた元の例外を指定して、<see cref="T:System.ComponentModel.LicenseException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">ライセンスが与えられなかったコンポーネントの型を表す <see cref="T:System.Type" />。</param>
      <param name="instance" vsli:raw="The instance of the component that was not granted a license.">ライセンスが与えられなかったコンポーネントのインスタンス。</param>
      <param name="message" vsli:raw="The exception message to display.">表示する例外メッセージ。</param>
      <param name="innerException" vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the original exception.">元の例外を表す <see cref="T:System.Exception" />。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with information about the exception.">例外に関する情報を含む <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を設定します。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">逆シリアル化に使用する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">逆シリアル化に使用する転送先。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.LicenseException.LicensedType">
      <summary vsli:raw="Gets the type of the component that was not granted a license.">ライセンスが与えられなかったコンポーネントの型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component that was not granted a license.">ライセンスが与えられなかったコンポーネントの型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseManager">
      <summary vsli:raw="Provides properties and methods to add a license to a component and to manage a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. This class cannot be inherited.">コンポーネントにライセンスを追加し、<see cref="T:System.ComponentModel.LicenseProvider" /> を管理するためのプロパティとメソッドを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)">
      <summary vsli:raw="Creates an instance of the specified type, given a context in which you can use the licensed instance.">ライセンス付きのインスタンスを使用できるコンテキストを指定して、指定した型のインスタンスを作成します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">作成する型を表す <see cref="T:System.Type" />。</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">ライセンス付きのインスタンスをいつ使用できるかを指定する <see cref="T:System.ComponentModel.LicenseContext" />。</param>
      <returns vsli:raw="An instance of the specified type.">指定した型のインスタンス。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])">
      <summary vsli:raw="Creates an instance of the specified type with the specified arguments, given a context in which you can use the licensed instance.">引数と、ライセンス付きのインスタンスを使用できるコンテキストを指定して、指定した型のインスタンスを作成します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">作成する型を表す <see cref="T:System.Type" />。</param>
      <param name="creationContext" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed instance.">ライセンス付きのインスタンスをいつ使用できるかを指定する <see cref="T:System.ComponentModel.LicenseContext" />。</param>
      <param name="args" vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the arguments for the type.">型の引数を表す <see cref="T:System.Object" /> 型の配列。</param>
      <returns vsli:raw="An instance of the specified type with the given array of arguments.">指定した配列の引数を持つ、指定した型のインスタンス。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsLicensed(System.Type)">
      <summary vsli:raw="Returns whether the given type has a valid license.">指定した型が有効なライセンスを与えられているかどうかを示す値を返します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to find a valid license for.">有効なライセンスを与えられているかどうかを調べる対象の <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given type is licensed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した型がライセンス付きである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified type.">指定した型に有効なライセンスを与えることができるかどうかを判断します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.Type" /> を要求するオブジェクトの型を表す <see cref="T:System.ComponentModel.License" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid license can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">有効なライセンスを与えることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)">
      <summary vsli:raw="Determines whether a valid license can be granted for the specified instance of the type. This method creates a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">型の指定したインスタンスに対して、有効なライセンスを与えることができるかどうかを判断します。 このメソッドは、有効な <see cref="T:System.ComponentModel.License" /> を作成します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">ライセンスを要求するオブジェクトの型を表す <see cref="T:System.Type" />。</param>
      <param name="instance" vsli:raw="An object of the specified type or a type derived from the specified type.">指定した型、または指定した型から派生した型のオブジェクト。</param>
      <param name="license" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; that is a valid license, or &lt;see langword=&quot;null&quot; /&gt; if a valid license cannot be granted.">有効なライセンスである <see cref="T:System.ComponentModel.License" />。有効なライセンスが与えられない場合は、<see langword="null" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be granted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">有効な <see cref="T:System.ComponentModel.License" /> を与えることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.LockContext(System.Object)">
      <summary vsli:raw="Prevents changes being made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">指定したオブジェクトの現在の <see cref="T:System.ComponentModel.LicenseContext" /> を変更できないようにします。</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to lock.">現在のコンテキストをロックする対象のオブジェクト。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The context is already locked.">コンテキストが既にロックされています。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.UnlockContext(System.Object)">
      <summary vsli:raw="Allows changes to be made to the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; of the given object.">指定したオブジェクトの現在の <see cref="T:System.ComponentModel.LicenseContext" /> を変更できるようにします。</summary>
      <param name="contextUser" vsli:raw="The object whose current context you want to unlock.">現在のコンテキストのロックを解除する対象のオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;contextUser&quot; /&gt; represents a different user than the one specified in a previous call to &lt;see cref=&quot;M:System.ComponentModel.LicenseManager.LockContext(System.Object)&quot; /&gt;.">
        <paramref name="contextUser" /> は、前の <see cref="M:System.ComponentModel.LicenseManager.LockContext(System.Object)" /> 呼び出しで指定されたユーザーとは異なることを表します。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type)">
      <summary vsli:raw="Determines whether a license can be granted for the specified type.">指定した型にライセンスを与えることができるかどうかを判断します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">ライセンスを要求するオブジェクトの型を表す <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">
        <see cref="T:System.ComponentModel.License" /> を与えることができません。</exception>
    </member>
    <member name="M:System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)">
      <summary vsli:raw="Determines whether a license can be granted for the instance of the specified type.">指定した型のインスタンスに対して、ライセンスを与えることができるかどうかを判断します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of object that requests the license.">ライセンスを要求するオブジェクトの型を表す <see cref="T:System.Type" />。</param>
      <param name="instance" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; of the specified type or a type derived from the specified type.">指定した型、または指定した型から派生した型の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ComponentModel.LicenseException" vsli:raw="The type is licensed, but a &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; cannot be granted.">型はライセンス付きですが、<see cref="T:System.ComponentModel.License" /> を与えることができません。</exception>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">有効な <see cref="T:System.ComponentModel.License" />。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.CurrentContext">
      <summary vsli:raw="Gets or sets the current &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt;, which specifies when you can use the licensed object.">ライセンス付きのオブジェクトをいつ使用できるかを指定する現在の <see cref="T:System.ComponentModel.LicenseContext" /> を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property is currently locked and cannot be changed.">
        <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> プロパティは、現在ロックされており、変更できません。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies when you can use the licensed object.">ライセンス付きのオブジェクトをいつ使用できるかを指定する <see cref="T:System.ComponentModel.LicenseContext" />。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseManager.UsageMode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; which specifies when you can use the licensed object for the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt;.">
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> においてライセンス付きのオブジェクトをいつ使用できるかを指定する <see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.LicenseUsageMode&quot; /&gt; values, as specified in the &lt;see cref=&quot;P:System.ComponentModel.LicenseManager.CurrentContext&quot; /&gt; property.">
        <see cref="T:System.ComponentModel.LicenseUsageMode" /> プロパティで指定されている、<see cref="P:System.ComponentModel.LicenseManager.CurrentContext" /> 値の 1 つ。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProvider">
      <summary vsli:raw="Provides the &lt;see langword=&quot;abstract&quot; /&gt; base class for implementing a license provider.">ライセンス プロバイダーを実装するための <see langword="abstract" /> 基本クラスを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.LicenseProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets a license for an instance or type of component, when given a context and whether the denial of a license throws an exception.">派生クラスでオーバーライドされた場合、コンテキストと、ライセンスが拒否された場合に例外がスローされるかどうかが指定されたときに、コンポーネントのインスタンスまたは型に対するライセンスを取得します。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">ライセンス付きのオブジェクトを使用できる位置を指定する <see cref="T:System.ComponentModel.LicenseContext" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the license.">ライセンスを要求しているコンポーネントを表す <see cref="T:System.Type" />。</param>
      <param name="instance" vsli:raw="An object that is requesting the license.">ライセンスを要求しているオブジェクト。</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when the component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンポーネントにライセンスが与えられなかったときに <see cref="T:System.ComponentModel.LicenseException" /> をスローする必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">有効な <see cref="T:System.ComponentModel.License" />。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseProviderAttribute">
      <summary vsli:raw="Specifies the &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt; to use with a class. This class cannot be inherited.">クラスと一緒に使用する <see cref="T:System.ComponentModel.LicenseProvider" /> を指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseProviderAttribute.Default">
      <summary vsli:raw="Specifies the default value, which is no provider. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">プロバイダーなしを意味する既定値を指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class without a license provider.">ライセンス プロバイダーを指定せずに、<see cref="T:System.ComponentModel.LicenseProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type.">型を指定して、<see cref="T:System.ComponentModel.LicenseProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName" vsli:raw="The fully qualified name of the license provider class.">ライセンス プロバイダー クラスの完全修飾名。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt; class with the specified type of license provider.">ライセンス プロバイダーの種類を指定して、<see cref="T:System.ComponentModel.LicenseProviderAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider class.">ライセンス プロバイダー クラスの型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">このインスタンスと指定したオブジェクトが等しいかどうかを示します。</summary>
      <param name="value" vsli:raw="Another object to compare to.">比較対象のもう 1 つのオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> がこのインスタンスと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.LicenseProviderAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LicenseProviderAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.LicenseProviderAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.LicenseProvider">
      <summary vsli:raw="Gets the license provider that must be used with the associated class.">関連付けられているクラスと一緒に使用する必要があるライセンス プロバイダーを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the license provider. The default value is &lt;see langword=&quot;null&quot; /&gt;.">ライセンス プロバイダーの種類を表す <see cref="T:System.Type" />。 既定値は <see langword="null" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.LicenseProviderAttribute.TypeId">
      <summary vsli:raw="Indicates a unique ID for this attribute type.">この属性型の一意の ID を示します。</summary>
      <returns vsli:raw="A unique ID for this attribute type.">この属性型の一意の ID。</returns>
    </member>
    <member name="T:System.ComponentModel.LicenseUsageMode">
      <summary vsli:raw="Specifies when the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; can be used.">
        <see cref="T:System.ComponentModel.License" /> をいつ使用できるかを指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Designtime">
      <summary vsli:raw="Used during design time by a visual designer or the compiler.">ビジュアル デザイナーまたはコンパイラによるデザイン時に使用します。</summary>
    </member>
    <member name="F:System.ComponentModel.LicenseUsageMode.Runtime">
      <summary vsli:raw="Used during runtime.">実行時に使用します。</summary>
    </member>
    <member name="T:System.ComponentModel.LicFileLicenseProvider">
      <summary vsli:raw="Provides an implementation of a &lt;see cref=&quot;T:System.ComponentModel.LicenseProvider&quot; /&gt;. The provider works in a similar fashion to the Microsoft .NET Framework standard licensing model.">
        <see cref="T:System.ComponentModel.LicenseProvider" /> の実装を提供します。 このプロバイダーは、Microsoft .NET Framework の標準ライセンス モデルと同様に機能します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LicFileLicenseProvider&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.LicFileLicenseProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)">
      <summary vsli:raw="Returns a key for the specified type.">指定した型のキーを返します。</summary>
      <param name="type" vsli:raw="The object type to return the key.">キーを返すオブジェクト型。</param>
      <returns vsli:raw="A confirmation that the &lt;paramref name=&quot;type&quot; /&gt; parameter is licensed.">
        <paramref name="type" /> パラメーターの型にライセンスが与えられているかどうかの確認。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)">
      <summary vsli:raw="Returns a license for the instance of the component, if one is available.">コンポーネントのインスタンスに与えられるライセンスがある場合は、そのライセンスを返します。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.LicenseContext&quot; /&gt; that specifies where you can use the licensed object.">ライセンス付きのオブジェクトを使用できる位置を指定する <see cref="T:System.ComponentModel.LicenseContext" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.Type" /> を要求しているコンポーネントを表す <see cref="T:System.ComponentModel.License" />。</param>
      <param name="instance" vsli:raw="An object that requests the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.ComponentModel.License" /> を要求するオブジェクト。</param>
      <param name="allowExceptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.LicenseException&quot; /&gt; should be thrown when a component cannot be granted a license; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンポーネントにライセンスが与えられなかったときに <see cref="T:System.ComponentModel.LicenseException" /> をスローする必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="A valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;. If this method cannot find a valid &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt; or a valid &lt;paramref name=&quot;context&quot; /&gt; parameter, it returns &lt;see langword=&quot;null&quot; /&gt;.">有効な <see cref="T:System.ComponentModel.License" />。 このメソッドは、有効な <see cref="T:System.ComponentModel.License" /> または <paramref name="context" /> パラメーターが見つからなかった場合は <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)">
      <summary vsli:raw="Determines whether the key that the &lt;see cref=&quot;M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)&quot; /&gt; method retrieves is valid for the specified type.">
        <see cref="M:System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)" /> メソッドが取得したキーが、指定した型に対して有効かどうかを判断します。</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; to check.">確認対象の <see cref="P:System.ComponentModel.License.LicenseKey" />。</param>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component requesting the &lt;see cref=&quot;T:System.ComponentModel.License&quot; /&gt;.">
        <see cref="T:System.Type" /> を要求しているコンポーネントを表す <see cref="T:System.ComponentModel.License" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key is a valid &lt;see cref=&quot;P:System.ComponentModel.License.LicenseKey&quot; /&gt; for the specified type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">キーが指定した型に対して有効な <see cref="P:System.ComponentModel.License.LicenseKey" /> である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListBindableAttribute">
      <summary vsli:raw="Specifies that a list can be used as a data source. A visual designer should use this attribute to determine whether to display a particular list in a data-binding picker. This class cannot be inherited.">リストをデータ ソースとして使用できることを指定します。 ビジュアル デザイナーは、この属性を使用して、データ連結ピッカーに特定のリストを表示するかどうかを決定します。 このクラスは継承できません。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Default">
      <summary vsli:raw="Represents the default value for &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ListBindableAttribute" /> の既定値を表します。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.No">
      <summary vsli:raw="Specifies that the list is not bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">リストが連結可能でないことを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.ListBindableAttribute.Yes">
      <summary vsli:raw="Specifies that the list is bindable. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">リストが連結可能であることを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using a value to indicate whether the list is bindable.">リストが連結可能かどうかを示す値を指定して、<see cref="T:System.ComponentModel.ListBindableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="listBindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストが連結可能である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.#ctor(System.ComponentModel.BindableSupport)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt; class using &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; to indicate whether the list is bindable.">リストが連結可能かどうかを示す <see cref="T:System.ComponentModel.ListBindableAttribute" /> を指定して、<see cref="T:System.ComponentModel.BindableSupport" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="flags" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.BindableSupport&quot; /&gt; that indicates whether the list is bindable.">リストが連結可能かどうかを示す <see cref="T:System.ComponentModel.BindableSupport" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">渡されたオブジェクトがこの <see cref="T:System.ComponentModel.ListBindableAttribute" /> と等しいかどうかを返します。</summary>
      <param name="obj" vsli:raw="The object to test equality with.">等しいかどうかを確認する対象のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object passed is equal to this &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">渡されたオブジェクトがこの <see cref="T:System.ComponentModel.ListBindableAttribute" /> に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ListBindableAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.ListBindableAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.ListBindableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns whether &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value.">
        <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> が既定値に設定されているかどうかを示す値を返します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.ComponentModel.ListBindableAttribute.ListBindable&quot; /&gt; is set to the default value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.ListBindableAttribute.ListBindable" /> が既定値に設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListBindableAttribute.ListBindable">
      <summary vsli:raw="Gets whether the list is bindable.">リストが連結可能かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is bindable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストが連結可能である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected.">変更の種類と影響を受ける <see cref="T:System.ComponentModel.ListChangedEventArgs" /> を指定して、<see cref="T:System.ComponentModel.PropertyDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">変更の種類を示す <see cref="T:System.ComponentModel.ListChangedType" /> 値。</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, removed, or changed.">追加、削除、または変更された <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the index of the affected item.">変更の種類と影響を受ける項目のインデックスを指定して、<see cref="T:System.ComponentModel.ListChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">変更の種類を示す <see cref="T:System.ComponentModel.ListChangedType" /> 値。</param>
      <param name="newIndex" vsli:raw="The index of the item that was added, changed, or removed.">追加、変更、または削除された項目のインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change, the index of the affected item, and a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the affected item.">変更の種類、影響を受ける項目のインデックス、および影響を受ける項目を記述する <see cref="T:System.ComponentModel.ListChangedEventArgs" /> を指定して、<see cref="T:System.ComponentModel.PropertyDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">変更の種類を示す <see cref="T:System.ComponentModel.ListChangedType" /> 値。</param>
      <param name="newIndex" vsli:raw="The index of the item that was added or changed.">追加または変更された項目のインデックス。</param>
      <param name="propDesc" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; describing the item.">項目を記述する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.ListChangedEventArgs.#ctor(System.ComponentModel.ListChangedType,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; class given the type of change and the old and new index of the item that was moved.">変更の種類と、移動された項目の古いインデックスと新しいインデックスを指定して、<see cref="T:System.ComponentModel.ListChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="listChangedType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">変更の種類を示す <see cref="T:System.ComponentModel.ListChangedType" /> 値。</param>
      <param name="newIndex" vsli:raw="The new index of the item that was moved.">移動された項目の新しいインデックス。</param>
      <param name="oldIndex" vsli:raw="The old index of the item that was moved.">移動された項目の古いインデックス。</param>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.ListChangedType">
      <summary vsli:raw="Gets the type of change.">変更の種類を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedType&quot; /&gt; value indicating the type of change.">変更の種類を示す <see cref="T:System.ComponentModel.ListChangedType" /> 値。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.NewIndex">
      <summary vsli:raw="Gets the index of the item affected by the change.">変更の影響を受ける項目のインデックスを取得します。</summary>
      <returns vsli:raw="The index of the affected by the change.">変更の影響を受ける項目のインデックス。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.OldIndex">
      <summary vsli:raw="Gets the old index of an item that has been moved.">移動された項目の古いインデックスを取得します。</summary>
      <returns vsli:raw="The old index of the moved item.">移動された項目の古いインデックス。</returns>
    </member>
    <member name="P:System.ComponentModel.ListChangedEventArgs.PropertyDescriptor">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added, changed, or deleted.">追加、変更、または削除された <see cref="T:System.ComponentModel.PropertyDescriptor" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; affected by the change.">変更により影響を受ける <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.ComponentModel.IBindingList.ListChanged&quot; /&gt; event of the &lt;see cref=&quot;T:System.ComponentModel.IBindingList&quot; /&gt; class.">
        <see cref="E:System.ComponentModel.IBindingList.ListChanged" /> クラスの <see cref="T:System.ComponentModel.IBindingList" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListChangedEventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.ComponentModel.ListChangedEventArgs" />。</param>
    </member>
    <member name="T:System.ComponentModel.ListChangedType">
      <summary vsli:raw="Specifies how the list changed.">リストがどのように変更されたかを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemAdded">
      <summary vsli:raw="An item added to the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was added.">リストに項目が追加されました。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> は、追加された項目のインデックスを格納します。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemChanged">
      <summary vsli:raw="An item changed in the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was changed.">リスト内の項目が変更されました。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> は、変更された項目のインデックスを格納します。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemDeleted">
      <summary vsli:raw="An item deleted from the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the index of the item that was deleted.">リストから項目が削除されました。 <see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> は、削除された項目のインデックスを格納します。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.ItemMoved">
      <summary vsli:raw="An item moved within the list. &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.OldIndex&quot; /&gt; contains the previous index for the item, whereas &lt;see cref=&quot;P:System.ComponentModel.ListChangedEventArgs.NewIndex&quot; /&gt; contains the new index for the item.">リスト内で項目が移動しました。 <see cref="P:System.ComponentModel.ListChangedEventArgs.OldIndex" /> は項目の以前のインデックスを格納し、<see cref="P:System.ComponentModel.ListChangedEventArgs.NewIndex" /> は項目の新しいインデックスを格納します。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorAdded">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was added, which changed the schema.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> が追加され、それによってスキーマが変更されました。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorChanged">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was changed, which changed the schema.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> が変更され、それによってスキーマが変更されました。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.PropertyDescriptorDeleted">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; was deleted, which changed the schema.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> が削除され、それによってスキーマが変更されました。</summary>
    </member>
    <member name="F:System.ComponentModel.ListChangedType.Reset">
      <summary vsli:raw="Much of the list has changed. Any listening controls should refresh all their data from the list.">リストの大半部が変更されました。 イベントを待機しているすべてのコントロールで、このリストから取得しているデータをすべて更新する必要があります。</summary>
    </member>
    <member name="T:System.ComponentModel.ListSortDescription">
      <summary vsli:raw="Provides a description of the sort operation applied to a data source.">データ ソースに適用される並べ替え操作に関する説明を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescription.#ctor(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; class with the specified property description and direction.">プロパティの説明および方向を指定して、<see cref="T:System.ComponentModel.ListSortDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that describes the property by which the data source is sorted.">データ ソースの並べ替えに使用するプロパティを説明する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDescription" /> 値のいずれか 1 つ。</param>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.PropertyDescriptor">
      <summary vsli:raw="Gets or sets the abstract description of a class property associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">この <see cref="T:System.ComponentModel.ListSortDescription" /> に関連付けられているクラスのプロパティの概要説明を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">この <see cref="T:System.ComponentModel.PropertyDescriptor" /> に関連付けられている <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescription.SortDirection">
      <summary vsli:raw="Gets or sets the direction of the sort operation associated with this &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">この <see cref="T:System.ComponentModel.ListSortDescription" /> に関連付けられている並べ替え操作の方向を取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; values.">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDescriptionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.ListSortDescription" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.#ctor(System.ComponentModel.ListSortDescription[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; class with the specified array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> オブジェクトの指定した配列を使用して、<see cref="T:System.ComponentModel.ListSortDescription" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="sorts" vsli:raw="The array of &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; objects to be contained in the collection.">コレクションに格納される <see cref="T:System.ComponentModel.ListSortDescription" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.Contains(System.Object)">
      <summary vsli:raw="Determines if the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt; contains a specific value.">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> に特定の値が格納されているかどうかを確認します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">コレクション内で検索する <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Object&quot; /&gt; is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Object" /> がコレクション内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to the specified array, starting at the specified destination array index.">コピー先に指定した配列のインデックスを開始位置として、指定した配列にコレクションの内容をコピーします。</summary>
      <param name="array" vsli:raw="The destination array for the items copied from the collection.">コレクションからコピーされる項目のコピー先配列。</param>
      <param name="index" vsli:raw="The index of the destination array at which copying begins.">コピーを開始する位置のコピー先配列のインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.IndexOf(System.Object)">
      <summary vsli:raw="Returns the index of the specified item in the collection.">コレクション内の指定した項目のインデックスを返します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the collection.">コレクション内で検索する <see cref="T:System.Object" />。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list; otherwise, -1.">リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the collection.">項目をコレクションに追加します。</summary>
      <param name="value" vsli:raw="The item to add to the collection.">コレクションに追加するアイテムです。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">すべての場合。</exception>
      <returns vsli:raw="The position into which the new element was inserted.">新しい要素が挿入された位置。</returns>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">コレクションからすべての項目を削除します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">コレクション内の指定したインデックスの位置に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">コレクション内で取得または設定する <see cref="T:System.ComponentModel.ListSortDescription" /> の、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The item to insert into the collection.">コレクションに挿入する項目。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of an item from the collection.">最初に出現する項目をコレクションから削除します。</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">コレクションから削除する項目。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="M:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes an item from the collection at a specified index.">コレクション内の指定したインデックスの項目を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to remove from the collection.">コレクションから削除する <see cref="T:System.ComponentModel.ListSortDescription" /> の 0 から始まるインデックス。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">すべての場合。</exception>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Count">
      <summary vsli:raw="Gets the number of items in the collection.">コレクション内の項目の数を取得します。</summary>
      <returns vsli:raw="The number of items in the collection.">コレクション内の項目数。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.ListSortDescription" /> を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get or set in the collection.">コレクション内で取得または設定する <see cref="T:System.ComponentModel.ListSortDescription" /> の、0 から始まるインデックス。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An item is set in the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;, which is read-only.">項目が、読み取り専用の <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> に設定されています。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">指定したインデックスを持つ <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is thread safe.">コレクションへのアクセスがスレッド セーフかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets the current instance that can be used to synchronize access to the collection.">コレクションへのアクセスを同期するために使用できる現在のインスタンスを取得します。</summary>
      <returns vsli:raw="The current instance of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescriptionCollection&quot; /&gt;.">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> の現在のインスタンス。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">コレクションが固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">常に <see langword="true" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ListSortDescriptionCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets the specified &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.ListSortDescription" /> を取得します。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; to get in the collection.">コレクション内で取得する <see cref="T:System.ComponentModel.ListSortDescription" /> の 0 から始まるインデックス。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ListSortDescription&quot; /&gt; with the specified index.">指定したインデックスを持つ <see cref="T:System.ComponentModel.ListSortDescription" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ListSortDirection">
      <summary vsli:raw="Specifies the direction of a sort operation.">並べ替え操作の方向を指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Ascending">
      <summary vsli:raw="Sorts in ascending order.">昇順の並べ替えを行います。</summary>
    </member>
    <member name="F:System.ComponentModel.ListSortDirection.Descending">
      <summary vsli:raw="Sorts in descending order.">降順の並べ替えを行います。</summary>
    </member>
    <member name="T:System.ComponentModel.LookupBindingPropertiesAttribute">
      <summary vsli:raw="Specifies the properties that support lookup-based binding. This class cannot be inherited.">検索ベースのバインディングをサポートするプロパティを指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="F:System.ComponentModel.LookupBindingPropertiesAttribute.Default">
      <summary vsli:raw="Represents the default value for the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> クラスの既定値を表します。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class using no parameters.">パラメーターを使用せずに <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.#ctor(System.String,System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dataSource" vsli:raw="The name of the property to be used as the data source.">データ ソースとして使用するプロパティの名前。</param>
      <param name="displayMember" vsli:raw="The name of the property to be used for the display name.">表示名に使用するプロパティの名前。</param>
      <param name="valueMember" vsli:raw="The name of the property to be used as the source for values.">値のソースとして使用するプロパティの名前。</param>
      <param name="lookupMember" vsli:raw="The name of the property to be used for lookups.">検索に使用するプロパティの名前。</param>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">指定した <see cref="T:System.Object" /> が、現在の <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> インスタンスと等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; instance.">現在の <see cref="T:System.Object" /> インスタンスと比較する <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is equal to the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;, indicating they are not equal.">オブジェクトが現在のインスタンスと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" /> で、これらが等しくないことを示します。</returns>
    </member>
    <member name="M:System.ComponentModel.LookupBindingPropertiesAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DataSource">
      <summary vsli:raw="Gets the name of the data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のバインド先となるコンポーネントのデータ ソース プロパティの名前を取得します。</summary>
      <returns vsli:raw="The data source property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のバインド先となるコンポーネントのデータ ソース プロパティ。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.DisplayMember">
      <summary vsli:raw="Gets the name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のバインド先となるコンポーネントの表示メンバー プロパティの名前を取得します。</summary>
      <returns vsli:raw="The name of the display member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のバインド先となるコンポーネントの表示メンバー プロパティの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.LookupMember">
      <summary vsli:raw="Gets the name of the lookup member for the component to which this attribute is bound.">この属性のバインド先となるコンポーネントの検索メンバーの名前を取得します。</summary>
      <returns vsli:raw="The name of the lookup member for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のバインド先となるコンポーネントの検索メンバーの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.LookupBindingPropertiesAttribute.ValueMember">
      <summary vsli:raw="Gets the name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のバインド先となるコンポーネントの値メンバー プロパティの名前を取得します。</summary>
      <returns vsli:raw="The name of the value member property for the component to which the &lt;see cref=&quot;T:System.ComponentModel.LookupBindingPropertiesAttribute&quot; /&gt; is bound.">
        <see cref="T:System.ComponentModel.LookupBindingPropertiesAttribute" /> のバインド先となるコンポーネントの値メンバー プロパティの名前。</returns>
    </member>
    <member name="T:System.ComponentModel.MarshalByValueComponent">
      <summary vsli:raw="Implements &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; and provides the base implementation for remotable components that are marshaled by value (a copy of the serialized object is passed).">
        <see cref="T:System.ComponentModel.IComponent" /> を実装し、値渡しでマーシャリングされた (シリアル化されたオブジェクトのコピーが渡された) リモート処理可能なコンポーネントの基本の実装を提供します。</summary>
    </member>
    <member name="E:System.ComponentModel.MarshalByValueComponent.Disposed">
      <summary vsli:raw="Adds an event handler to listen to the &lt;see cref=&quot;E:System.ComponentModel.MarshalByValueComponent.Disposed&quot; /&gt; event on the component.">コンポーネントの <see cref="E:System.ComponentModel.MarshalByValueComponent.Disposed" /> イベントを待機するイベント ハンドラーを追加します。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.MarshalByValueComponent" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt;.">
        <see cref="T:System.ComponentModel.MarshalByValueComponent" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.ComponentModel.MarshalByValueComponent&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.ComponentModel.MarshalByValueComponent" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.Finalize">
      <summary vsli:raw="Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.">オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.GetService(System.Type)">
      <summary vsli:raw="Gets the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">
        <see cref="T:System.IServiceProvider" /> を実装しているオブジェクトを取得します。</summary>
      <param name="service" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of service you want.">目的のサービスの型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the implementer of the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt;.">
        <see cref="T:System.Object" /> を実装しているオブジェクトを表す <see cref="T:System.IServiceProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MarshalByValueComponent.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any. This method should not be overridden.">
        <see cref="T:System.ComponentModel.Component" /> の名前 (存在する場合) を格納する <see cref="T:System.String" /> を返します。 このメソッドはオーバーライドできません。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt;, if any.  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; is unnamed.">
        <see cref="T:System.String" /> (ある場合) の名前を格納している <see cref="T:System.ComponentModel.Component" />。  
  
 <see cref="T:System.ComponentModel.Component" /> に名前がない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Container">
      <summary vsli:raw="Gets the container for the component.">コンポーネントを格納するコンテナーを取得します。</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.IContainer&quot; /&gt; interface that represents the component's container, or &lt;see langword=&quot;null&quot; /&gt; if the component does not have a site.">コンポーネントのコンテナーを表す、<see cref="T:System.ComponentModel.IContainer" /> インターフェイスを実装しているオブジェクト。コンポーネントにサイトがない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.DesignMode">
      <summary vsli:raw="Gets a value indicating whether the component is currently in design mode.">コンポーネントが現在デザイン モードかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the component is in design mode; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンポーネントがデザイン モードの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Events">
      <summary vsli:raw="Gets the list of event handlers that are attached to this component.">コンポーネントに結び付けられているイベント ハンドラーのリストを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventHandlerList&quot; /&gt; that provides the delegates for this component.">コンポーネントのデリゲートを提供する <see cref="T:System.ComponentModel.EventHandlerList" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MarshalByValueComponent.Site">
      <summary vsli:raw="Gets or sets the site of the component.">コンポーネントのサイトを取得します。値の設定も可能です。</summary>
      <returns vsli:raw="An object implementing the &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface that represents the site of the component.">コンポーネントのサイトを表す、<see cref="T:System.ComponentModel.ISite" /> インターフェイスを実装しているオブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextProvider">
      <summary vsli:raw="Represents a mask-parsing service that can be used by any number of controls that support masking, such as the &lt;see cref=&quot;T:System.Windows.Forms.MaskedTextBox&quot; /&gt; control.">
        <see cref="T:System.Windows.Forms.MaskedTextBox" /> コントロールなど、マスクをサポートする多数のコントロールで使用できるマスク解析サービスを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask.">指定したマスクを使用して、<see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">入力マスクを表す <see cref="T:System.String" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and ASCII restriction value.">指定したマスクと ASCII 制限値を使用して、<see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">入力マスクを表す <see cref="T:System.String" />。</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">入力を ASCII 互換文字に制限する場合は <see langword="true" />。Unicode セット全体を許可する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, password character, and prompt usage value.">指定したマスク、パスワード文字、プロンプト使用値を使用して、<see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">入力マスクを表す <see cref="T:System.String" />。</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">パスワード文字列に入力された文字用に表示される <see cref="T:System.Char" />。</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">プロンプト文字を入力として許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask and culture.">指定したマスクとカルチャを使用して、<see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">入力マスクを表す <see cref="T:System.String" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">地域によって異なる区切り記号の設定に使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, and ASCII restriction value.">指定したマスク、カルチャ、および ASCII 制限値を使用して、<see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">入力マスクを表す <see cref="T:System.String" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">地域によって異なる区切り記号の設定に使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">入力を ASCII 互換文字に制限する場合は <see langword="true" />。Unicode セット全体を許可する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Boolean,System.Char,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, prompt usage value, prompt character, password character, and ASCII restriction value.">指定したマスク、カルチャ、プロンプト使用値、プロンプト文字、パスワード文字、および ASCII 制限値を使用して、<see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">入力マスクを表す <see cref="T:System.String" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">地域によって異なる区切り記号の設定に使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="allowPromptAsInput" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; value that specifies whether the prompt character should be allowed as a valid input character.">プロンプト文字を有効な入力文字として許可する必要があるかどうかを指定する <see cref="T:System.Boolean" /> 値。</param>
      <param name="promptChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed as a placeholder for user input.">ユーザー入力のプレースホルダーとして表示する <see cref="T:System.Char" />。</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">パスワード文字列に入力された文字用に表示される <see cref="T:System.Char" />。</param>
      <param name="restrictToAscii" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to restrict input to ASCII-compatible characters; otherwise &lt;see langword=&quot;false&quot; /&gt; to allow the entire Unicode set.">入力を ASCII 互換文字に制限する場合は <see langword="true" />。Unicode セット全体を許可する場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The mask parameter is &lt;see langword=&quot;null&quot; /&gt; or &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The mask contains one or more non-printable characters.">マスク パラメーターが <see langword="null" /> または <see cref="F:System.String.Empty" /> です。  
  
- または - 
マスクに印字不可能な文字が 1 文字以上含まれています。</exception>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.#ctor(System.String,System.Globalization.CultureInfo,System.Char,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; class using the specified mask, culture, password character, and prompt usage value.">指定したマスク、カルチャ、パスワード文字、およびプロンプト使用値を使用して、<see cref="T:System.ComponentModel.MaskedTextProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="mask" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the input mask.">入力マスクを表す <see cref="T:System.String" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that is used to set region-sensitive separator characters.">地域によって異なる区切り記号の設定に使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="passwordChar" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that will be displayed for characters entered into a password string.">パスワード文字列に入力された文字用に表示される <see cref="T:System.Char" />。</param>
      <param name="allowPromptAsInput" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow the prompt character as input; otherwise &lt;see langword=&quot;false&quot; /&gt;.">プロンプト文字を入力として許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string.">書式設定された文字列の末尾に指定した入力文字を追加します。</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">書式設定された文字列に追加する <see cref="T:System.Char" /> 値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">入力文字が正常に追加された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.Char,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the specified input character to the end of the formatted string, and then outputs position and descriptive information.">書式設定された文字列の末尾に指定した入力文字を追加し、位置と説明の情報を出力します。</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; value to be appended to the formatted string.">書式設定された文字列に追加する <see cref="T:System.Char" /> 値。</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">文字を追加しようとした、書式設定された文字列内のインデックス番号が 0 から始まる位置。 出力パラメーター。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input character was added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt;.">入力文字が正常に追加された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string.">書式設定された文字列の末尾に指定した入力文字列内の文字を追加します。</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">書式設定された文字列に追加する文字値を格納する <see cref="T:System.String" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">入力文字列のすべての文字が正常に追加された場合は <see langword="true" />。それ以外の場合は、文字が追加されなかったことを示す <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Add(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Adds the characters in the specified input string to the end of the formatted string, and then outputs position and descriptive information.">書式設定された文字列の末尾に指定した入力文字列内の文字を追加し、位置と説明の情報を出力します。</summary>
      <param name="input" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing character values to be appended to the formatted string.">書式設定された文字列に追加する文字値を格納する <see cref="T:System.String" />。</param>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the attempt was made to add the character. An output parameter.">文字を追加しようとした、書式設定された文字列内のインデックス番号が 0 から始まる位置。 出力パラメーター。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters from the input string were added successfully; otherwise &lt;see langword=&quot;false&quot; /&gt; to indicate that no characters were added.">入力文字列のすべての文字が正常に追加された場合は <see langword="true" />。それ以外の場合は、文字が追加されなかったことを示す <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters.">書式設定された文字列から、編集可能なすべての入力文字を消去し、プロンプト文字に置き換えます。</summary>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clear(System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Clears all the editable input characters from the formatted string, replacing them with prompt characters, and then outputs descriptive information.">書式設定された文字列から、編集可能なすべての入力文字を消去し、プロンプト文字に置き換えた後、説明の情報を出力します。</summary>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Clone">
      <summary vsli:raw="Creates a copy of the current &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.MaskedTextProvider" /> のコピーを作成します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; object this method creates, cast as an object.">このメソッドが作成し、オブジェクトとしてキャストする <see cref="T:System.ComponentModel.MaskedTextProvider" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position after the specified position using the specified search direction.">指定した検索方向で、指定した位置より後にある、入力が割り当てられた最初の編集可能な位置を返します。</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">検索が成功した場合は、最初に見つかった入力が割り当てられた編集可能な位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindAssignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first assigned editable position between the specified positions using the specified search direction.">指定した検索方向で、指定した 2 つの位置の間にある、入力が割り当てられた最初の編集可能な位置を返します。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">検索を終了する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first assigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">検索が成功した場合は、最初に見つかった入力が割り当てられた編集可能な位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position after the specified position using the specified search direction.">指定した検索方向で、指定した位置より後にある最初の編集可能な位置を返します。</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">検索が成功した場合は、最初に見つかった編集可能な位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first editable position between the specified positions using the specified search direction.">指定した検索方向で、指定した 2 つの位置の間にある最初の編集可能な位置を返します。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">検索を終了する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">検索が成功した場合は、最初に見つかった編集可能な位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position after the specified position using the specified search direction.">指定した検索方向で、指定した位置より後にある最初の編集不可能な位置を返します。</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">検索が成功した場合は、最初に見つかったリテラル位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindNonEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first non-editable position between the specified positions using the specified search direction.">指定した検索方向で、指定した 2 つの位置の間にある最初の編集不可能な位置を返します。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">検索を終了する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first literal position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">検索が成功した場合は、最初に見つかったリテラル位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionFrom(System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position after the specified position using the specified search direction.">指定した検索方向で、指定した位置より後にある、入力が割り当てられていない最初の編集可能な位置を返します。</summary>
      <param name="position" vsli:raw="The zero-based position in the formatted string to start the search.">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">検索が成功した場合は、最初に見つかった、入力が割り当てられていない編集可能な位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.FindUnassignedEditPositionInRange(System.Int32,System.Int32,System.Boolean)">
      <summary vsli:raw="Returns the position of the first unassigned editable position between the specified positions using the specified search direction.">指定した検索方向で、指定した 2 つの位置の間にある、入力が割り当てられていない最初の編集可能な位置を返します。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the search starts.">検索を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the search ends.">検索を終了する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.Boolean&quot; /&gt; indicating the search direction; either &lt;see langword=&quot;true&quot; /&gt; to search forward or &lt;see langword=&quot;false&quot; /&gt; to search backward.">検索方向を示す <see cref="T:System.Boolean" />。前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</param>
      <returns vsli:raw="If successful, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; representing the zero-based position of the first unassigned editable position encountered; otherwise &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">検索が成功した場合は、最初に見つかった、入力が割り当てられていない編集可能な位置のインデックス番号が 0 から始まる位置を表す <see cref="T:System.Int32" />。それ以外の場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.GetOperationResultFromHint(System.ComponentModel.MaskedTextResultHint)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; denotes success or failure.">指定した <see cref="T:System.ComponentModel.MaskedTextResultHint" /> が、成功または失敗のどちらを示しているかを判断します。</summary>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value typically obtained as an output parameter from a previous operation.">以前の操作の出力パラメーターとして通常取得される <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; value represents a success; otherwise, &lt;see langword=&quot;false&quot; /&gt; if it represents failure.">指定した <see cref="T:System.ComponentModel.MaskedTextResultHint" /> 値が成功を表している場合は <see langword="true" />。失敗を表している場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string.">書式設定された文字列内の指定した位置に指定した文字を挿入します。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">挿入する <see cref="T:System.Char" /> です。</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">文字を挿入する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">挿入が正常に実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified character at the specified position within the formatted string, returning the last insertion position and the status of the operation.">書式設定された文字列内の指定した位置に指定した文字を挿入し、最後の挿入位置と操作のステータスを返します。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; to be inserted.">挿入する <see cref="T:System.Char" /> です。</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the character.">文字を挿入する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">メソッドが正常に実行された場合は、文字が挿入された最後の位置。それ以外の場合は、挿入が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">挿入操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">挿入が正常に実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string.">書式設定された文字列内の指定した位置に指定した文字列を挿入します。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">挿入する <see cref="T:System.String" /> です。</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">入力文字列を挿入する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">挿入が正常に実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.InsertAt(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Inserts the specified string at a specified position within the formatted string, returning the last insertion position and the status of the operation.">書式設定された文字列内の指定した位置に指定した文字列を挿入し、最後の挿入位置と操作のステータスを返します。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to be inserted.">挿入する <see cref="T:System.String" /> です。</param>
      <param name="position" vsli:raw="The zero-based position in the formatted string to insert the input string.">入力文字列を挿入する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="testPosition" vsli:raw="If the method is successful, the last position where a character was inserted; otherwise, the first position where the insertion failed. An output parameter.">メソッドが正常に実行された場合は、文字が挿入された最後の位置。それ以外の場合は、挿入が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the insertion operation. An output parameter.">挿入操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the insertion was successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">挿入が正常に実行された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsAvailablePosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is available for assignment.">指定した位置を入力の割り当てに使用できるかどうかを判断します。</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">テスト対象となるマスク内のインデックス番号が 0 から始まる位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable and has not been assigned to yet; otherwise &lt;see langword=&quot;false&quot; /&gt;.">書式設定された文字列内の指定した位置が編集可能であり、入力がまだ割り当てられていない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsEditPosition(System.Int32)">
      <summary vsli:raw="Determines whether the specified position is editable.">指定した位置が編集可能かどうかを判断します。</summary>
      <param name="position" vsli:raw="The zero-based position in the mask to test.">テスト対象となるマスク内のインデックス番号が 0 から始まる位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified position in the formatted string is editable; otherwise &lt;see langword=&quot;false&quot; /&gt;.">書式設定された文字列内の指定した位置が編集可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid input character.">指定した文字が有効な入力文字かどうかを判断します。</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">テストする <see cref="T:System.Char" /> 値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid input value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">指定した文字に有効な入力値が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidMaskChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid mask character.">指定した文字が有効なマスク文字かどうかを判断します。</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">テストする <see cref="T:System.Char" /> 値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid mask value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">指定した文字に有効なマスク値が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)">
      <summary vsli:raw="Determines whether the specified character is a valid password character.">指定した文字が有効なパスワード文字かどうかを判断します。</summary>
      <param name="c" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">テストする <see cref="T:System.Char" /> 値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character contains a valid password value; otherwise &lt;see langword=&quot;false&quot; /&gt;.">指定した文字に有効なパスワード値が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove">
      <summary vsli:raw="Removes the last assigned character from the formatted string.">書式設定された文字列から、割り当てられた最後の文字を削除します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">文字が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Remove(System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the last assigned character from the formatted string, and then outputs the removal position and descriptive information.">書式設定された文字列から、割り当てられた最後の文字を削除し、削除位置と説明の情報を出力します。</summary>
      <param name="testPosition" vsli:raw="The zero-based position in the formatted string where the character was actually removed. An output parameter.">文字が実際に削除された、書式設定された文字列内のインデックス番号が 0 から始まる位置。 出力パラメーター。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">文字が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the assigned character at the specified position from the formatted string.">書式設定された文字列から、指定した位置にある割り当てられた文字を削除します。</summary>
      <param name="position" vsli:raw="The zero-based position of the assigned character to remove.">削除する割り当てられた文字のインデックス番号が 0 から始まる位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">文字が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string.">書式設定された文字列から、指定した 2 つの位置の間にある割り当てられた文字を削除します。</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">削除対象の、割り当てられた最初の文字の 0 から始まるインデックス。</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">削除対象の、割り当てられた最後の文字の 0 から始まるインデックス。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">文字が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.RemoveAt(System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Removes the assigned characters between the specified positions from the formatted string, and then outputs the removal position and descriptive information.">書式設定された文字列から、指定した 2 つの位置の間にある割り当てられた文字を削除し、削除位置と説明の情報を出力します。</summary>
      <param name="startPosition" vsli:raw="The zero-based index of the first assigned character to remove.">削除対象の、割り当てられた最初の文字の 0 から始まるインデックス。</param>
      <param name="endPosition" vsli:raw="The zero-based index of the last assigned character to remove.">削除対象の、割り当てられた最後の文字の 0 から始まるインデックス。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string of where the characters were actually removed; otherwise, the first position where the operation failed. An output parameter.">削除が正常に実行された場合は、文字が実際に削除された、書式設定された文字列内のインデックス番号が 0 から始まる位置。それ以外の場合は、操作が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">文字が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value.">指定した位置以降にある単一の文字を指定した文字値に置き換えます。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">既存の値を置き換える <see cref="T:System.Char" /> 値。</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">置換する最初の編集可能な文字の検索対象となる、インデックス番号が 0 から始まる位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">文字が正常に置き換えられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character between the specified starting and ending positions with the specified character value, and then outputs the removal position and descriptive information.">指定した開始位置と終了位置の間にある単一の文字を指定した文字値に置き換え、削除位置と説明の情報を出力します。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">既存の値を置き換える <see cref="T:System.Char" /> 値。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">置換を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">置換を終了する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">置換が正常に実行された場合は、最後の文字が実際に置き換えられた、書式設定された文字列内のインデックス番号が 0 から始まる位置。それ以外の場合は、操作が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">置換操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">文字が正常に置き換えられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.Char,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a single character at or beyond the specified position with the specified character value, and then outputs the removal position and descriptive information.">指定した位置以降にある単一の文字を指定した文字値に置き換え、削除位置と説明の情報を出力します。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value that replaces the existing value.">既存の値を置き換える <see cref="T:System.Char" /> 値。</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">置換する最初の編集可能な文字の検索対象となる、インデックス番号が 0 から始まる位置。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">置換が正常に実行された場合は、最後の文字が実際に置き換えられた、書式設定された文字列内のインデックス番号が 0 から始まる位置。それ以外の場合は、操作が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">置換操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the character was successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">文字が正常に置き換えられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string.">指定した位置から始まる編集可能な文字の範囲を、指定した文字列に置き換えます。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">既存の編集可能な文字を置き換える <see cref="T:System.String" /> 値。</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">置換する最初の編集可能な文字の検索対象となる、インデックス番号が 0 から始まる位置。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">すべての文字が正常に置き換えられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters between the specified starting and ending positions with the specified string, and then outputs the removal position and descriptive information.">指定した開始位置と終了位置の間にある編集可能な文字の範囲を指定した文字列に置き換え、削除位置と説明の情報を出力します。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">既存の編集可能な文字を置き換える <see cref="T:System.String" /> 値。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the replacement starts.">置換を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="endPosition" vsli:raw="The zero-based position in the formatted string where the replacement ends.">置換を終了する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">置換が正常に実行された場合は、最後の文字が実際に置き換えられた、書式設定された文字列内のインデックス番号が 0 から始まる位置。それ以外の場合は、操作が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">置換操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">すべての文字が正常に置き換えられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Replace(System.String,System.Int32,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Replaces a range of editable characters starting at the specified position with the specified string, and then outputs the removal position and descriptive information.">指定した位置から始まる編集可能な文字の範囲を指定した文字列に置き換え、削除位置と説明の情報を出力します。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to replace the existing editable characters.">既存の編集可能な文字を置き換える <see cref="T:System.String" /> 値。</param>
      <param name="position" vsli:raw="The zero-based position to search for the first editable character to replace.">置換する最初の編集可能な文字の検索対象となる、インデックス番号が 0 から始まる位置。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually replaced; otherwise, the first position where the operation failed. An output parameter.">置換が正常に実行された場合は、最後の文字が実際に置き換えられた、書式設定された文字列内のインデックス番号が 0 から始まる位置。それ以外の場合は、操作が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the replacement operation. An output parameter.">置換操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully replaced; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">すべての文字が正常に置き換えられた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String)">
      <summary vsli:raw="Sets the formatted string to the specified input string.">書式設定された文字列に指定した入力文字列を設定します。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">書式設定された文字列の設定に使用する <see cref="T:System.String" /> 値。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">すべての文字が正常に設定された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.Set(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Sets the formatted string to the specified input string, and then outputs the removal position and descriptive information.">書式設定された文字列に指定した入力文字列を設定し、削除位置と説明の情報を出力します。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value used to set the formatted string.">書式設定された文字列の設定に使用する <see cref="T:System.String" /> 値。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position in the formatted string where the last character was actually set; otherwise, the first position where the operation failed. An output parameter.">設定が正常に実行された場合は、最後の文字が実際に設定された、書式設定された文字列内のインデックス番号が 0 から始まる位置。それ以外の場合は、操作が失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the set operation. An output parameter.">設定操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;input&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="input" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all the characters were successfully set; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">すべての文字が正常に設定された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToDisplayString">
      <summary vsli:raw="Returns the formatted string in a displayable form.">表示できる形式で書式設定された文字列を返します。</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes prompts and mask literals.">プロンプトとマスク リテラルを含む、書式設定された <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString">
      <summary vsli:raw="Returns the formatted string that includes all the assigned character values.">割り当てられたすべての文字値を含む、書式設定された文字列を返します。</summary>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values.">割り当てられたすべての文字値を含む、書式設定された <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including password characters.">書式設定された文字列を返します。パスワード文字が含まれる場合もあります。</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">実際の編集可能な文字を返す場合は <see langword="true" />。<see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> プロパティが有効であることを示す場合は <see langword="false" />。</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes literals, prompts, and optionally password characters.">リテラル、プロンプト、および場合によってはパスワード文字を含む、書式設定された <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean)">
      <summary vsli:raw="Returns the formatted string, optionally including prompt and literal characters.">書式設定された文字列を返します。プロンプト文字やリテラル文字が含まれる場合もあります。</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">返される文字列にプロンプト文字が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">返される文字列にリテラル文字が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="The formatted &lt;see cref=&quot;T:System.String&quot; /&gt; that includes all the assigned character values and optionally includes literals and prompts.">割り当てられたすべての文字値、および場合によってはリテラルまたはプロンプトを含む、書式設定された <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt, literal, and password characters.">書式設定された文字列の部分文字列を返します。プロンプト文字、リテラル文字、およびパスワード文字が含まれる場合もあります。</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">実際の編集可能な文字を返す場合は <see langword="true" />。<see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> プロパティが有効であることを示す場合は <see langword="false" />。</param>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">返される文字列にプロンプト文字が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">返される文字列にリテラル文字が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">出力を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="length" vsli:raw="The number of characters to return.">返される文字の数。</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals, prompts, and password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">正常に実行された場合は、割り当てられたすべての文字値、および場合によってはリテラル、プロンプト、パスワード文字を含む、書式設定された <see cref="T:System.String" /> の部分文字列。それ以外の場合は <see cref="F:System.String.Empty" /> 文字列。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including prompt and literal characters.">書式設定された文字列の部分文字列を返します。プロンプト文字やリテラル文字が含まれる場合もあります。</summary>
      <param name="includePrompt" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include prompt characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">返される文字列にプロンプト文字が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="includeLiterals" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include literal characters in the return string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">返される文字列にリテラル文字が含まれる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">出力を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="length" vsli:raw="The number of characters to return.">返される文字の数。</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values and optionally includes literals and prompts; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">正常に実行された場合は、割り当てられたすべての文字値、および場合によってはリテラルとプロンプトを含む、書式設定された <see cref="T:System.String" /> の部分文字列。それ以外の場合は <see cref="F:System.String.Empty" /> 文字列。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Boolean,System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string, optionally including password characters.">書式設定された文字列の部分文字列を返します。パスワード文字が含まれる場合もあります。</summary>
      <param name="ignorePasswordChar" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return the actual editable characters; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt; property is to be honored.">実際の編集可能な文字を返す場合は <see langword="true" />。<see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> プロパティが有効であることを示す場合は <see langword="false" />。</param>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">出力を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="length" vsli:raw="The number of characters to return.">返される文字の数。</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes literals, prompts, and optionally password characters; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">正常に実行された場合は、リテラル、プロンプト、および場合によってはパスワード文字を含む、書式設定された <see cref="T:System.String" /> の部分文字列。それ以外の場合は <see cref="F:System.String.Empty" /> 文字列。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.ToString(System.Int32,System.Int32)">
      <summary vsli:raw="Returns a substring of the formatted string.">書式設定された文字列の部分文字列を返します。</summary>
      <param name="startPosition" vsli:raw="The zero-based position in the formatted string where the output begins.">出力を開始する、書式設定された文字列内のインデックス番号が 0 から始まる位置。</param>
      <param name="length" vsli:raw="The number of characters to return.">返される文字の数。</param>
      <returns vsli:raw="If successful, a substring of the formatted &lt;see cref=&quot;T:System.String&quot; /&gt;, which includes all the assigned character values; otherwise the &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; string.">正常に実行された場合は、割り当てられたすべての文字値を含む、書式設定された <see cref="T:System.String" /> の部分文字列。それ以外の場合は <see cref="F:System.String.Empty" /> 文字列。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyChar(System.Char,System.Int32,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified character could be set successfully at the specified position.">指定した文字を指定した位置に正常に設定できるかどうかをテストします。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">テストする <see cref="T:System.Char" /> 値。</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">入力文字をテストするマスク内の位置。</param>
      <param name="hint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the operation. An output parameter.">操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character is valid for the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した文字が指定した位置に対して有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)">
      <summary vsli:raw="Tests whether the specified character would be escaped at the specified position.">指定した文字が指定した位置でエスケープされるかどうかをテストします。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value to test.">テストする <see cref="T:System.Char" /> 値。</param>
      <param name="position" vsli:raw="The position in the mask to test the input character against.">入力文字をテストするマスク内の位置。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified character would be escaped at the specified position; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した文字が指定した位置でエスケープされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String)">
      <summary vsli:raw="Tests whether the specified string could be set successfully.">指定した文字列を正常に設定できるかどうかをテストします。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">テストする <see cref="T:System.String" /> 値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した文字列が有効な入力を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MaskedTextProvider.VerifyString(System.String,System.Int32@,System.ComponentModel.MaskedTextResultHint@)">
      <summary vsli:raw="Tests whether the specified string could be set successfully, and then outputs position and descriptive information.">指定した文字列を正常に設定できるかどうかをテストし、位置と説明の情報を出力します。</summary>
      <param name="input" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; value to test.">テストする <see cref="T:System.String" /> 値。</param>
      <param name="testPosition" vsli:raw="If successful, the zero-based position of the last character actually tested; otherwise, the first position where the test failed. An output parameter.">正常に実行された場合は、実際にテストされた最後の文字のインデックス番号が 0 から始まる位置。それ以外の場合は、テストが失敗した最初の位置。 出力パラメーター。</param>
      <param name="resultHint" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MaskedTextResultHint&quot; /&gt; that succinctly describes the result of the test operation. An output parameter.">テスト操作の結果を簡潔に示す <see cref="T:System.ComponentModel.MaskedTextResultHint" />。 出力パラメーター。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string represents valid input; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した文字列が有効な入力を表している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput">
      <summary vsli:raw="Gets a value indicating whether the prompt character should be treated as a valid input character or not.">プロンプト文字を有効な入力文字として扱う必要があるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the user can enter &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt; into the control; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">ユーザーがコントロールに <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> を入力できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AsciiOnly">
      <summary vsli:raw="Gets a value indicating whether the mask accepts characters outside of the ASCII character set.">マスクで ASCII 文字セット以外の文字を受け入れるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if only ASCII is accepted; &lt;see langword=&quot;false&quot; /&gt; if &lt;see cref=&quot;T:System.ComponentModel.MaskedTextProvider&quot; /&gt; can accept any arbitrary Unicode character. The default is &lt;see langword=&quot;false&quot; /&gt;.">ASCII だけを受け入れる場合は <see langword="true" />。<see cref="T:System.ComponentModel.MaskedTextProvider" /> が任意の Unicode 文字を受け入れることができる場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AssignedEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions that have already been successfully assigned an input value.">入力値が既に正常に割り当てられている、編集可能な文字位置の数を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions in the input mask that have already been assigned a character value in the formatted string.">書式設定された文字列で文字値が既に割り当てられている、入力マスク内の編集可能な文字位置の数を格納する <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.AvailableEditPositionCount">
      <summary vsli:raw="Gets the number of editable character positions in the input mask that have not yet been assigned an input value.">入力値がまだ割り当てられていない、入力マスク内の編集可能な文字位置の数を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable character positions that not yet been assigned a character value.">文字値がまだ割り当てられていない、編集可能な文字位置の数を格納する <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Culture">
      <summary vsli:raw="Gets the culture that determines the value of the localizable separators and placeholders in the input mask.">入力マスク内のローカライズ可能な区切り記号とプレースホルダーの値を決定するカルチャを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; containing the culture information associated with the input mask.">入力マスクに関連付けられたカルチャ情報を格納する <see cref="T:System.Globalization.CultureInfo" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.DefaultPasswordChar">
      <summary vsli:raw="Gets the default password character used obscure user input.">ユーザー入力を隠すために使用する既定のパスワード文字を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Char&quot; /&gt; that represents the default password character.">既定のパスワード文字を表す <see cref="T:System.Char" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositionCount">
      <summary vsli:raw="Gets the number of editable positions in the formatted string.">書式設定された文字列内の編集可能な位置の数を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of editable positions in the formatted string.">書式設定された文字列内の編集可能な位置の数を格納する <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.EditPositions">
      <summary vsli:raw="Gets a newly created enumerator for the editable positions in the formatted string.">書式設定された文字列内の編集可能な位置に対して新しく作成された列挙子を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that supports enumeration over the editable positions in the formatted string.">書式設定された文字列内の編集可能な位置に対して列挙体をサポートする <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludeLiterals">
      <summary vsli:raw="Gets or sets a value that indicates whether literal characters in the input mask should be included in the formatted string.">入力マスク内のリテラル文字を、書式設定された文字列に含める必要があるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if literals are included; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">リテラルを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IncludePrompt">
      <summary vsli:raw="Gets or sets a value indicating whether &lt;see cref=&quot;P:System.Windows.Forms.MaskedTextBox.PromptChar&quot; /&gt; is used to represent the absence of user input when displaying the formatted string.">書式設定された文字列を表示するときに、<see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> を使用してユーザー入力がないことを表すかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character is used to represent the positions where no user input was provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">プロンプト文字を使用して、ユーザー入力が行われなかった位置を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.InvalidIndex">
      <summary vsli:raw="Gets the upper bound of the range of invalid indexes.">無効なインデックスの範囲の上限を取得します。</summary>
      <returns vsli:raw="A value representing the largest invalid index, as determined by the provider implementation. For example, if the lowest valid index is 0, this property will return -1.">プロバイダー実装によって判断された無効な最大インデックスを表す値。 たとえば、有効な最小インデックスが 0 の場合、このプロパティは -1 を返します。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.IsPassword">
      <summary vsli:raw="Gets or sets a value that determines whether password protection should be applied to the formatted string.">書式設定された文字列に、パスワードによる保護を適用する必要があるかどうかを決定する値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the input string is to be treated as a password string; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">入力文字列をパスワード文字列として扱う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Item(System.Int32)">
      <summary vsli:raw="Gets the element at the specified position in the formatted string.">書式設定された文字列内の指定した位置にある要素を取得します。</summary>
      <param name="index" vsli:raw="A zero-based index of the element to retrieve.">取得する要素の 0 から始まるインデックス。</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero or greater than or equal to the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.Length&quot; /&gt; of the mask.">
        <paramref name="index" /> が 0 未満か、マスクの <see cref="P:System.ComponentModel.MaskedTextProvider.Length" /> 以上の値です。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; at the specified position in the formatted string.">書式設定された文字列内の指定した位置にある <see cref="T:System.Char" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.LastAssignedPosition">
      <summary vsli:raw="Gets the index in the mask of the rightmost input character that has been assigned to the mask.">マスクに割り当てられている右端の入力文字のマスク内のインデックスを取得します。</summary>
      <returns vsli:raw="If at least one input character has been assigned to the mask, an &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the index of rightmost assigned position; otherwise, if no position has been assigned, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.InvalidIndex&quot; /&gt;.">マスクに入力文字が少なくとも 1 文字割り当てられている場合は、文字が割り当てられている右端の位置のインデックスを格納する <see cref="T:System.Int32" />。文字が割り当てられた位置がない場合は <see cref="P:System.ComponentModel.MaskedTextProvider.InvalidIndex" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Length">
      <summary vsli:raw="Gets the length of the mask, absent any mask modifier characters.">マスク修飾子文字を除いたマスクの長さを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Int32&quot; /&gt; containing the number of positions in the mask, excluding characters that modify mask input.">マスク入力を修飾する文字を除く、マスク内の位置の数を格納する <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.Mask">
      <summary vsli:raw="Gets the input mask.">入力マスクを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the full mask.">フル マスクを格納する <see cref="T:System.String" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskCompleted">
      <summary vsli:raw="Gets a value indicating whether all required inputs have been entered into the formatted string.">すべての必須入力が、書式設定された文字列に入力されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required input has been entered into the mask; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">必須の入力がすべてマスクに入力された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.MaskFull">
      <summary vsli:raw="Gets a value indicating whether all required and optional inputs have been entered into the formatted string.">すべての必須入力と省略可能な入力が、書式設定された文字列に入力されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if all required and optional inputs have been entered; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">必須およびオプションの入力がすべて入力された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PasswordChar">
      <summary vsli:raw="Gets or sets the character to be substituted for the actual input characters.">実際の入力文字を置き換える文字を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The password character specified when setting this property is the same as the current prompt character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PromptChar&quot; /&gt;. The two are required to be different.">このプロパティの設定時に指定したパスワード文字は、現在のプロンプト文字 <see cref="P:System.ComponentModel.MaskedTextProvider.PromptChar" /> と同じです。 この 2 つは異なる必要があります。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">このプロパティの設定時に指定した文字は、<see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> メソッドによって判断された有効なパスワード文字ではありません。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Char&quot; /&gt; value used as the password character.">パスワード文字として使用される <see cref="T:System.Char" /> 値。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.PromptChar">
      <summary vsli:raw="Gets or sets the character used to represent the absence of user input for all available edit positions.">使用できるすべての編集位置に対してユーザー入力がないことを表す際に使用する文字を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The prompt character specified when setting this property is the same as the current password character, &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.PasswordChar&quot; /&gt;. The two are required to be different.">このプロパティの設定時に指定したプロンプト文字は、現在のパスワード文字 <see cref="P:System.ComponentModel.MaskedTextProvider.PasswordChar" /> と同じです。 この 2 つは異なる必要があります。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The character specified when setting this property is not a valid password character, as determined by the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)&quot; /&gt; method.">このプロパティの設定時に指定した文字は、<see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> メソッドによって判断された有効なパスワード文字ではありません。</exception>
      <returns vsli:raw="The character used to prompt the user for input. The default is an underscore (_).">ユーザーに入力を要求するために使用される文字。 既定値はアンダースコア (_) です。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnPrompt">
      <summary vsli:raw="Gets or sets a value that determines how an input character that matches the prompt character should be handled.">プロンプト文字と一致する入力文字を処理する方法を決定する値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the prompt character entered as input causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that the prompt character is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">入力されたプロンプト文字によって、マスク内の現在の編集可能な位置がリセットされる場合は <see langword="true" />。それ以外の場合、プロンプト文字が通常の入力文字として処理されることを示すには <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.ResetOnSpace">
      <summary vsli:raw="Gets or sets a value that determines how a space input character should be handled.">空白の入力文字の処理方法を決定する値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the space input character causes the current editable position in the mask to be reset; otherwise, &lt;see langword=&quot;false&quot; /&gt; to indicate that it is to be processed as a normal input character. The default is &lt;see langword=&quot;true&quot; /&gt;.">空白の入力文字によって、マスク内の現在の編集可能な位置がリセットされる場合は <see langword="true" />。それ以外の場合、通常の入力文字として処理されることを示すには <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.MaskedTextProvider.SkipLiterals">
      <summary vsli:raw="Gets or sets a value indicating whether literal character positions in the mask can be overwritten by their same values.">マスク内のリテラル文字の位置を、同じ値で上書きできるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to allow literals to be added back; otherwise, &lt;see langword=&quot;false&quot; /&gt; to not allow the user to overwrite literal characters. The default is &lt;see langword=&quot;true&quot; /&gt;.">リテラルを再び追加できる場合は <see langword="true" />。ユーザーがリテラル文字を上書きできない場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.MaskedTextResultHint">
      <summary vsli:raw="Specifies values that succinctly describe the results of a masked text parsing operation.">マスクされたテキストの解析操作の結果を簡潔に説明する値を指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AlphanumericCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not alphanumeric. .">操作が成功しませんでした。英数字以外の入力文字が見つかりました。 .</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.AsciiCharacterExpected">
      <summary vsli:raw="Operation did not succeed.An input character was encountered that was not a member of the ASCII character set.">操作が成功しませんでした。ASCII 文字セットにはない入力文字が見つかりました。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.CharacterEscaped">
      <summary vsli:raw="Success. The operation succeeded because a literal, prompt or space character was an escaped character. For more information about escaped characters, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)&quot; /&gt; method.">成功。 リテラル文字、プロンプト文字、または空白文字がエスケープ文字であったため、操作が正常に行われました。 エスケープ文字の詳細については、<see cref="M:System.ComponentModel.MaskedTextProvider.VerifyEscapeChar(System.Char,System.Int32)" /> メソッドのトピックを参照してください。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.DigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a digit.">操作が成功しませんでした。 数字以外の入力文字が見つかりました。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.InvalidInput">
      <summary vsli:raw="Operation did not succeed. The program encountered an input character that was not valid. For more information about characters that are not valid, see the &lt;see cref=&quot;M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)&quot; /&gt; method.">操作が成功しませんでした。 無効な入力文字が見つかりました。 無効な文字の詳細については、<see cref="M:System.ComponentModel.MaskedTextProvider.IsValidInputChar(System.Char)" /> メソッドのトピックを参照してください。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.LetterExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a letter.">操作が成功しませんでした。 文字ではない入力文字が見つかりました。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NoEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed; therefore, no side effect was produced.">成功。 必要がなかったため主要な操作は実行されませんでした。したがって、副作用は発生しませんでした。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.NonEditPosition">
      <summary vsli:raw="Operation did not succeed. The current position in the formatted string is a literal character.">操作が成功しませんでした。 書式設定された文字列内の現在の位置はリテラル文字です。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PositionOutOfRange">
      <summary vsli:raw="Operation did not succeed. The specified position is not in the range of the target string; typically it is either less than zero or greater then the length of the target string.">操作が成功しませんでした。 指定した位置が対象の文字列の範囲外です。通常、これはゼロ未満の値か、対象の文字列の長さより大きい値です。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.PromptCharNotAllowed">
      <summary vsli:raw="Operation did not succeed. The prompt character is not valid at input, perhaps because the &lt;see cref=&quot;P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput&quot; /&gt; property is set to &lt;see langword=&quot;false&quot; /&gt;.">操作が成功しませんでした。 入力時のプロンプト文字が有効ではありません。原因としては、<see cref="P:System.ComponentModel.MaskedTextProvider.AllowPromptAsInput" /> プロパティが <see langword="false" /> に設定されていることが考えられます。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SideEffect">
      <summary vsli:raw="Success. The primary operation was not performed because it was not needed, but the method produced a side effect. For example, the &lt;see cref=&quot;Overload:System.ComponentModel.MaskedTextProvider.RemoveAt&quot; /&gt; method can delete an unassigned edit position, which causes left-shifting of subsequent characters in the formatted string.">成功。 必要がなかったため主要な操作は実行されませんでしたが、メソッドで副作用が発生しました。 たとえば、<see cref="Overload:System.ComponentModel.MaskedTextProvider.RemoveAt" /> メソッドは未割り当ての編集位置を削除できるため、書式設定された文字列で後続文字が左にシフトされます。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.SignedDigitExpected">
      <summary vsli:raw="Operation did not succeed. An input character was encountered that was not a signed digit.">操作が成功しませんでした。 符号付き数値以外の入力文字が見つかりました。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Success">
      <summary vsli:raw="Success. The primary operation succeeded.">成功。 主要な操作が正常に行われました。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.UnavailableEditPosition">
      <summary vsli:raw="Operation did not succeed. There were not enough edit positions available to fulfill the request.">操作が成功しませんでした。 要求を実行するのに十分な編集位置がありませんでした。</summary>
    </member>
    <member name="F:System.ComponentModel.MaskedTextResultHint.Unknown">
      <summary vsli:raw="Unknown. The result of the operation could not be determined.">不明。 操作の結果を判断できませんでした。</summary>
    </member>
    <member name="T:System.ComponentModel.MemberDescriptor">
      <summary vsli:raw="Represents a class member, such as a property or event. This is an abstract base class.">プロパティやイベントなどのクラス メンバーを表します。 これは抽象基本クラスです。</summary>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">
        <see cref="T:System.ComponentModel.MemberDescriptor" /> を指定して、<see cref="T:System.ComponentModel.MemberDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the member and its attributes.">メンバーの名前と属性を格納している <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the old &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">指定した <see cref="T:System.ComponentModel.MemberDescriptor" /> 内の名前と、古い <see cref="T:System.ComponentModel.MemberDescriptor" /> および <see cref="T:System.ComponentModel.MemberDescriptor" /> 配列の両方に格納されている属性を使用して、<see cref="T:System.Attribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="oldMemberDescriptor" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that has the name of the member and its attributes.">メンバーの名前とその属性を格納している <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
      <param name="newAttributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects with the attributes you want to add to the member.">メンバーに追加する属性を格納している、<see cref="T:System.Attribute" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member.">メンバーの名前を指定して、<see cref="T:System.ComponentModel.MemberDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the member.">メンバーの名前。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">この名前は空の文字列 ("") か、または <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; class with the specified name of the member and an array of attributes.">メンバーの名前と属性の配列を指定して、<see cref="T:System.ComponentModel.MemberDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the member.">メンバーの名前。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the member attributes.">メンバーの属性を格納している <see cref="T:System.Attribute" /> 型の配列。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The name is an empty string (&quot;&quot;) or &lt;see langword=&quot;null&quot; /&gt;.">この名前は空の文字列 ("") か、または <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.CreateAttributeCollection">
      <summary vsli:raw="Creates a collection of attributes using the array of attributes passed to the constructor.">コンストラクターに渡された属性配列を使用して、属性のコレクションを作成します。</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that contains the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt; attributes.">
        <see cref="T:System.ComponentModel.AttributeCollection" /> 属性を格納している新しい <see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this instance to the given object to see if they are equivalent.">現在のインスタンスと指定したオブジェクトを比較して、等しいかどうかを確認します。</summary>
      <param name="obj" vsli:raw="The object to compare to the current instance.">現在のインスタンスと比較する対象のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">両者が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="When overridden in a derived class, adds the attributes of the inheriting class to the specified list of attributes in the parent class.">派生クラスでオーバーライドされた場合、親クラスの指定した属性リストに継承クラスの属性を追加します。</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">親クラスの属性を格納している <see cref="T:System.Collections.IList" />。 初期状態では、このリストは空です。</param>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)">
      <summary vsli:raw="Finds the given method through reflection, searching only for public methods.">パブリック メソッドだけを検索対象として、指定したメソッドをリフレクションによって検索します。</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">メソッドを格納しているコンポーネント。</param>
      <param name="name" vsli:raw="The name of the method to find.">検索するメソッドの名前。</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">オーバーロードされたメソッドの中からメソッドを選択するために使用される、メソッドのパラメーターを格納している配列。</param>
      <param name="returnType" vsli:raw="The type to return for the method.">メソッドの戻り値の型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。メソッドが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)">
      <summary vsli:raw="Finds the given method through reflection, with an option to search only public methods.">パブリック メソッドだけを検索対象とすることを指定して、特定のメソッドをリフレクションによって検索します。</summary>
      <param name="componentClass" vsli:raw="The component that contains the method.">メソッドを格納しているコンポーネント。</param>
      <param name="name" vsli:raw="The name of the method to find.">検索するメソッドの名前。</param>
      <param name="args" vsli:raw="An array of parameters for the method, used to choose between overloaded methods.">オーバーロードされたメソッドの中からメソッドを選択するために使用される、メソッドのパラメーターを格納している配列。</param>
      <param name="returnType" vsli:raw="The type to return for the method.">メソッドの戻り値の型。</param>
      <param name="publicOnly" vsli:raw="Whether to restrict search to public methods.">検索対象をパブリック メソッドに限定するかどうかを示します。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the method, or &lt;see langword=&quot;null&quot; /&gt; if the method is not found.">メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。メソッドが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.MemberDescriptor" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="Retrieves the object that should be used during invocation of members.">メンバーの呼び出し中に使用するオブジェクトを取得します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">呼び出し対象の <see cref="T:System.Type" />。</param>
      <param name="instance" vsli:raw="The potential invocation target.">呼び出し対象になる可能性があるインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> または <paramref name="instance" /> が <see langword="null" /> です。</exception>
      <returns vsli:raw="The object to be used during member invocations.">メンバーの呼び出し中に使用するオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)">
      <summary vsli:raw="Gets the component on which to invoke a method.">メソッドを呼び出す対象のコンポーネントを取得します。</summary>
      <param name="componentClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the type of component this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; is bound to. For example, if this &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; describes a property, this parameter should be the class that the property is declared on.">
        <see cref="T:System.Type" /> が関連付けられているコンポーネントの型を表す <see cref="T:System.ComponentModel.MemberDescriptor" />。 たとえば、<see cref="T:System.ComponentModel.MemberDescriptor" /> がプロパティについて説明している場合、このパラメーターはそのプロパティが宣言されているクラスになります。</param>
      <param name="component" vsli:raw="An instance of the object to call.">メソッドを呼び出す対象のオブジェクトのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentClass&quot; /&gt; or &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentClass" /> または <paramref name="component" /> が <see langword="null" /> です。</exception>
      <returns vsli:raw="An instance of the component to invoke. This method returns a visual designer when the property is attached to a visual designer.">メソッドを呼び出す対象のコンポーネントのインスタンス。 このメソッドは、プロパティがビジュアル デザイナーに結び付けられている場合は、ビジュアル デザイナーを返します。</returns>
    </member>
    <member name="M:System.ComponentModel.MemberDescriptor.GetSite(System.Object)">
      <summary vsli:raw="Gets a component site for the given component.">指定したコンポーネントのコンポーネント サイトを取得します。</summary>
      <param name="component" vsli:raw="The component for which you want to find a site.">サイトを検索する対象のコンポーネント。</param>
      <returns vsli:raw="The site of the component, or &lt;see langword=&quot;null&quot; /&gt; if a site does not exist.">コンポーネントのサイト。サイトが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.AttributeArray">
      <summary vsli:raw="Gets or sets an array of attributes.">属性の配列を取得または設定します。</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the attributes of this member.">メンバーの属性を格納している <see cref="T:System.Attribute" /> 型の配列。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Attributes">
      <summary vsli:raw="Gets the collection of attributes for this member.">メンバーの属性のコレクションを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; that provides the attributes for this member, or an empty collection if there are no attributes in the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.AttributeArray&quot; /&gt;.">このメンバーに属性を提供する <see cref="T:System.ComponentModel.AttributeCollection" />。<see cref="P:System.ComponentModel.MemberDescriptor.AttributeArray" /> 内に属性がない場合は、空のコレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Category">
      <summary vsli:raw="Gets the name of the category to which the member belongs, as specified in the &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.CategoryAttribute" /> で指定されている、メンバーが属するカテゴリの名前を取得します。</summary>
      <returns vsli:raw="The name of the category to which the member belongs. If there is no &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;, the category name is set to the default category, &lt;see langword=&quot;Misc&quot; /&gt;.">メンバーが属しているカテゴリの名前。 <see cref="T:System.ComponentModel.CategoryAttribute" /> がない場合、カテゴリ名は既定のカテゴリである <see langword="Misc" /> に設定されます。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Description">
      <summary vsli:raw="Gets the description of the member, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DescriptionAttribute" /> で指定されている、メンバーの説明を取得します。</summary>
      <returns vsli:raw="The description of the member. If there is no &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;, the property value is set to the default, which is an empty string (&quot;&quot;).">メンバーの説明。 <see cref="T:System.ComponentModel.DescriptionAttribute" /> がない場合、このプロパティの値は既定値である空の文字列 ("") に設定されます。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DesignTimeOnly">
      <summary vsli:raw="Gets whether this member should be set only at design time, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignOnlyAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> で指定されている、メンバーを設定できるのがデザイン時だけかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this member should be set only at design time; &lt;see langword=&quot;false&quot; /&gt; if the member can be set during run time.">メンバーを設定できるのがデザイン時だけの場合は <see langword="true" />。実行時に設定できる場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.DisplayName">
      <summary vsli:raw="Gets the name that can be displayed in a window, such as a Properties window.">[プロパティ] ウィンドウなどのウィンドウに表示できる名前を取得します。</summary>
      <returns vsli:raw="The name to display for the member.">表示するメンバー名。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.IsBrowsable">
      <summary vsli:raw="Gets a value indicating whether the member is browsable, as specified in the &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.BrowsableAttribute" /> で指定されている、メンバーが参照可能かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is browsable; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If there is no &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt;, the property value is set to the default, which is &lt;see langword=&quot;true&quot; /&gt;.">メンバーが参照可能である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 <see cref="T:System.ComponentModel.BrowsableAttribute" /> がない場合、プロパティ値は既定値である <see langword="true" /> に設定されます。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.Name">
      <summary vsli:raw="Gets the name of the member.">メンバーの名前を取得します。</summary>
      <returns vsli:raw="The name of the member.">メンバーの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.MemberDescriptor.NameHashCode">
      <summary vsli:raw="Gets the hash code for the name of the member, as specified in &lt;see cref=&quot;M:System.String.GetHashCode&quot; /&gt;.">
        <see cref="M:System.String.GetHashCode" /> で指定されている、メンバーの名前のハッシュ コードを取得します。</summary>
      <returns vsli:raw="The hash code for the name of the member.">メンバーの名前のハッシュ コード。</returns>
    </member>
    <member name="T:System.ComponentModel.MultilineStringConverter">
      <summary vsli:raw="Provides a type converter to convert multiline strings to a simple string.">複数行文字列を単純文字列に変換する型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.MultilineStringConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.MultilineStringConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">指定したコンテキストとカルチャ情報を使用して、指定した値オブジェクトを指定した型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 <see langword="null" /> を渡すと、現在のカルチャが使用されます。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">値パラメーターを変換する <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the &lt;paramref name=&quot;value&quot; /&gt; parameter, using the specified context and attributes.">指定したコンテキストと属性を使用して、<paramref name="value" /> パラメーターで指定された配列型のプロパティのコレクションを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">プロパティを取得する対象となる配列の型を指定する <see cref="T:System.Object" />。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">フィルターとして使用される <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">このデータ型について公開されているプロパティを持つ <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。または、プロパティがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.MultilineStringConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">指定したコンテキストを使用して、このオブジェクトがプロパティをサポートするかどうかを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.ComponentModel.MultilineStringConverter.GetProperties&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトのプロパティを見つけるために <see langword="true" /> を呼び出す必要がある場合は <see cref="Overload:System.ComponentModel.MultilineStringConverter.GetProperties" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.NestedContainer">
      <summary vsli:raw="Provides the base implementation for the &lt;see cref=&quot;T:System.ComponentModel.INestedContainer&quot; /&gt; interface, which enables containers to have an owning component.">
        <see cref="T:System.ComponentModel.INestedContainer" /> インターフェイスの基本実装を提供し、コンテナーが所有コンポーネントを持つことができるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NestedContainer&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.NestedContainer" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="owner" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">この入れ子になったコンテナーを所有している <see cref="T:System.ComponentModel.IComponent" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;owner&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="owner" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)">
      <summary vsli:raw="Creates a site for the component within the container.">コンテナー内にコンポーネント用のサイトを作成します。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; to create a site for.">サイトを作成する <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="name" vsli:raw="The name to assign to &lt;paramref name=&quot;component&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; to skip the name assignment.">
        <paramref name="component" /> に割り当てる名前。名前の割り当てをスキップする場合は <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt;.">新しく作成された <see cref="T:System.ComponentModel.ISite" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the resources used by the nested container.">入れ子になったコンテナーによって使用されているリソースを解放します。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.NestedContainer.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type, if it is available.">指定した型のサービス オブジェクトがある場合は、そのオブジェクトを取得します。</summary>
      <param name="service" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the service to retrieve.">取得するサービスの <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that implements the requested service, or &lt;see langword=&quot;null&quot; /&gt; if the service cannot be resolved.">要求したサービスを実装する <see cref="T:System.Object" />。サービスを解決できない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.Owner">
      <summary vsli:raw="Gets the owning component for this nested container.">この入れ子になったコンテナーの所有コンポーネントを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that owns this nested container.">この入れ子になったコンテナーを所有している <see cref="T:System.ComponentModel.IComponent" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NestedContainer.OwnerName">
      <summary vsli:raw="Gets the name of the owning component.">所有コンポーネントの名前を取得します。</summary>
      <returns vsli:raw="The name of the owning component.">所有コンポーネントの名前。</returns>
    </member>
    <member name="T:System.ComponentModel.NullableConverter">
      <summary vsli:raw="Provides automatic conversion between a nullable type and its underlying primitive type.">null 許容型とその基になるプリミティブ型の間の自動変換を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.NullableConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.NullableConverter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The specified nullable type.">指定された、null 許容型。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is not a nullable type.">
        <paramref name="type" /> が null 許容型ではありません。</exception>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">このコンバーターが、指定したコンテキストを使用して、指定された型のオブジェクトをこのコンバーターの型に変換できるかどうかを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">変換元の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">このコンバーターが指定のコンテキストを使用して、オブジェクトを指定の型に変換できるかどうかを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">変換先の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">指定したコンテキストとカルチャ情報を使用して、指定したオブジェクトをこのコンバーターの型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">指定したコンテキストとカルチャ情報を使用して、指定した値オブジェクトを指定した型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">値パラメーターを変換する <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">この <see cref="T:System.ComponentModel.TypeConverter" /> を関連付ける型のインスタンスを作成します。指定されたコンテキストと、与えられているオブジェクトのプロパティ値のセットを使用します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">新しいプロパティ値の <see cref="T:System.Collections.IDictionary" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">特定の <see cref="T:System.Collections.IDictionary" /> を表す <see cref="T:System.Object" />、またはオブジェクトを作成できない場合は <see langword="null" />。 このメソッドは常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">このオブジェクトの値を変更するときに、指定したコンテキストを使用して <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> を呼び出して、新しい値を作成する必要があるかどうかを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトのプロパティを変更するときに <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> を呼び出して新しい値を作成する必要がある場合は <see langword="true" />、必要がない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">指定されたコンテキストと属性を使用して、値パラメーターで指定された配列型のプロパティのコレクションを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">プロパティを取得する対象となる配列の型を指定する <see cref="T:System.Object" />。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">フィルターとして使用される <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">このデータ型について公開されているプロパティを持つ <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。または、プロパティがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">指定したコンテキストを使用して、このオブジェクトがプロパティをサポートするかどうかを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトのプロパティを見つけるために <see langword="true" /> を呼び出す必要がある場合は <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">フォーマット コンテキストが提供されている場合、この型コンバーターが対象とするデータ型の標準値のコレクションを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">書式コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。これを使用すると、このコンバーターが呼び出される環境についての追加情報を抽出できます。 このパラメーターまたはこのパラメーターのプロパティには、<see langword="null" /> を指定できます。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">正しい値の標準セットを保持する <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。データ型が標準値セットをサポートしていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;Overload:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">指定したコンテキストを使用して、<see cref="Overload:System.ComponentModel.TypeConverter.GetStandardValues" /> から返された標準値のコレクションが有効値の排他的なリストかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> から返された <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> が、有効値の排他的なリストの場合は <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />。他の値も有効である場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">指定したコンテキストを使用して、リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトがサポートしている標準値セットを見つけるために <see langword="true" /> を呼び出す必要がある場合は <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.NullableConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">指定した値オブジェクトが、この型に対して有効か、指定したコンテキストに対して有効かを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">有効性をテストするための <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値がこのオブジェクトに対して有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.NullableType">
      <summary vsli:raw="Gets the nullable type.">null 許容型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the nullable type.">null 許容型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingType">
      <summary vsli:raw="Gets the underlying type.">基になる型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the underlying type.">基になる型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.NullableConverter.UnderlyingTypeConverter">
      <summary vsli:raw="Gets the underlying type converter.">基になる型コンバーターを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that represents the underlying type converter.">基になる型コンバーターを表す <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PasswordPropertyTextAttribute">
      <summary vsli:raw="Indicates that an object's text representation is obscured by characters such as asterisks. This class cannot be inherited.">アスタリスクなどの文字で、オブジェクトのテキスト表記を隠すように指示します。 このクラスは継承できません。</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> の既定値を指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.No">
      <summary vsli:raw="Specifies that a text property is not used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">テキスト プロパティをパスワードとして使用しないことを指定します。 この <see langword="static" /> (Visual Basic では <see langword="Shared" />) フィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.PasswordPropertyTextAttribute.Yes">
      <summary vsli:raw="Specifies that a text property is used as a password. This &lt;see langword=&quot;static&quot; /&gt; (&lt;see langword=&quot;Shared&quot; /&gt; in Visual Basic) field is read-only.">テキスト プロパティをパスワードとして使用することを指定します。 この <see langword="static" /> (Visual Basic では <see langword="Shared" />) フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; class, optionally showing password text.">
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> クラスの新しいインスタンスを初期化して、オプションでパスワード テキストを示します。</summary>
      <param name="password" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">プロパティをパスワード テキストとして表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</param>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; instances are equal.">2 つの <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> インスタンスが等しいかどうかを判断します。</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> と比較する <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した <see langword="true" /> が現在の <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> と等しい場合は <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.PasswordPropertyTextAttribute.IsDefaultAttribute">
      <summary vsli:raw="Returns an indication whether the value of this instance is the default value.">このインスタンスの値が既定値であるかどうかを示す値を返します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスがクラスの既定の属性である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PasswordPropertyTextAttribute.Password">
      <summary vsli:raw="Gets a value indicating if the property for which the &lt;see cref=&quot;T:System.ComponentModel.PasswordPropertyTextAttribute&quot; /&gt; is defined should be shown as password text.">
        <see cref="T:System.ComponentModel.PasswordPropertyTextAttribute" /> が定義されているプロパティをパスワード テキストとして表示するかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be shown as password text; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティをパスワード テキストとして表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptor">
      <summary vsli:raw="Provides an abstraction of a property on a class.">クラスのプロパティの抽象化を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name and attributes in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.PropertyDescriptor" /> 内の名前と属性を使用して、<see cref="T:System.ComponentModel.MemberDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; that contains the name of the property and its attributes.">プロパティの名前と属性を格納している <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the name in the specified &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the attributes in both the &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; and the &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array.">指定した <see cref="T:System.ComponentModel.PropertyDescriptor" /> 内の名前と、<see cref="T:System.ComponentModel.MemberDescriptor" /> および <see cref="T:System.ComponentModel.MemberDescriptor" /> 配列の両方に格納されている属性を使用して、<see cref="T:System.Attribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="descr" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.MemberDescriptor&quot; /&gt; containing the name of the member and its attributes.">メンバーの名前とその属性を格納している <see cref="T:System.ComponentModel.MemberDescriptor" />。</param>
      <param name="attrs" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array containing the attributes you want to associate with the property.">プロパティに関連付ける属性を格納している <see cref="T:System.Attribute" /> 配列。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; class with the specified name and attributes.">名前と属性を指定して、<see cref="T:System.ComponentModel.PropertyDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the property.">プロパティの名前。</param>
      <param name="attrs" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that contains the property attributes.">プロパティの属性を格納している <see cref="T:System.Attribute" /> 型の配列。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">プロパティが変更されたときに、ほかのオブジェクトに通知できるようにします。</summary>
      <param name="component" vsli:raw="The component to add the handler for.">ハンドラーを追加する対象のコンポーネント。</param>
      <param name="handler" vsli:raw="The delegate to add as a listener.">リスナーとして追加されるデリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> または <paramref name="handler" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, returns whether resetting an object changes its value.">派生クラスでオーバーライドされた場合、オブジェクトをリセットしたときに、そのオブジェクトの値が変化するかどうかを示す値を返します。</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">リセット機能について調べる対象のコンポーネント。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes its value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンポーネントをリセットするとコンポーネントの値が変化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)">
      <summary vsli:raw="Creates an instance of the specified type.">指定した型のインスタンスを作成します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to create.">作成する型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A new instance of the type.">指定した型の新しいインスタンス。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares this to another object to see if they are equivalent.">プロパティ記述子を別のオブジェクトと比較して、等しいかどうかを確認します。</summary>
      <param name="obj" vsli:raw="The object to compare to this &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">この <see cref="T:System.ComponentModel.PropertyDescriptor" /> と比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">両方の値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)">
      <summary vsli:raw="Adds the attributes of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the specified list of attributes in the parent class.">指定した親クラスの属性リストに <see cref="T:System.ComponentModel.PropertyDescriptor" /> の属性を追加します。</summary>
      <param name="attributeList" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that lists the attributes in the parent class. Initially, this is empty.">親クラスの属性を格納している <see cref="T:System.Collections.IList" />。 初期状態では、このリストは空です。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties">
      <summary vsli:raw="Returns the default &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt;.">既定の <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> を返します。</summary>
      <returns vsli:raw="A collection of property descriptor.">プロパティ記述子のコレクション。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; using a specified array of attributes as a filter.">指定した属性配列をフィルターとして使用して、<see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> を返します。</summary>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">フィルターとして使用する型 <see cref="T:System.Attribute" /> の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes.">指定した属性に一致するプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object.">指定したオブジェクトの <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> を返します。</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">プロパティを取得する対象のコンポーネント。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">指定されたコンポーネントのプロパティを持つ <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; for a given object using a specified array of attributes as a filter.">指定した属性配列をフィルターとして使用して、指定したオブジェクトの <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> を返します。</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">プロパティを取得する対象のコンポーネント。</param>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">フィルターとして使用する型 <see cref="T:System.Attribute" /> の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">指定のコンポーネントの指定した属性と一致するプロパティを持つ <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Gets an editor of the specified type.">指定した型のエディターを取得します。</summary>
      <param name="editorBaseType" vsli:raw="The base type of editor, which is used to differentiate between multiple editors that a property supports.">プロパティがサポートしている複数のエディターを区別するために使用される、エディターの基本型。</param>
      <returns vsli:raw="An instance of the requested editor type, or &lt;see langword=&quot;null&quot; /&gt; if an editor cannot be found.">要求したエディター型のインスタンス。エディターが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this object.">このオブジェクトのハッシュ コードを返します。</summary>
      <returns vsli:raw="The hash code for this object.">このオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)">
      <summary vsli:raw="This method returns the object that should be used during invocation of members.">このメソッドでは、メンバーの呼び出し中に使用するオブジェクトが返されます。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the invocation target.">呼び出し対象の <see cref="T:System.Type" />。</param>
      <param name="instance" vsli:raw="The potential invocation target.">呼び出し対象になる可能性があるインスタンス。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; that should be used during invocation of members.">メンバーの呼び出し中に使用する <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)">
      <summary vsli:raw="Returns a type using its name.">型名を使用して型を返します。</summary>
      <param name="typeName" vsli:raw="The assembly-qualified name of the type to retrieve.">取得する型のアセンブリ修飾名。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that matches the given type name, or &lt;see langword=&quot;null&quot; /&gt; if a match cannot be found.">指定した型名と一致する <see cref="T:System.Type" />。一致する型が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, gets the current value of the property on a component.">派生クラスでオーバーライドされた場合、コンポーネントのプロパティの現在の値を取得します。</summary>
      <param name="component" vsli:raw="The component with the property for which to retrieve the value.">値の取得対象であるプロパティを持つコンポーネント。</param>
      <returns vsli:raw="The value of a property for a given component.">指定したコンポーネントのプロパティの値。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)">
      <summary vsli:raw="Retrieves the current set of &lt;c&gt;ValueChanged&lt;/c&gt; event handlers for a specific component.">特定のコンポーネントについて現在の <c>ValueChanged</c> イベント ハンドラー セットを取得します。</summary>
      <param name="component" vsli:raw="The component for which to retrieve event handlers.">イベント ハンドラーの取得対象のコンポーネント。</param>
      <returns vsli:raw="A combined multicast event handler, or &lt;see langword=&quot;null&quot; /&gt; if no event handlers are currently assigned to &lt;paramref name=&quot;component&quot; /&gt;.">結合されたマルチキャスト イベント ハンドラー。現在イベント ハンドラーが <paramref name="component" /> に関連付けられていない場合は、<see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)">
      <summary vsli:raw="Raises the &lt;c&gt;ValueChanged&lt;/c&gt; event that you implemented.">実装した <c>ValueChanged</c> イベントを発生させます。</summary>
      <param name="component" vsli:raw="The object that raises the event.">イベントを発生させるオブジェクト。</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">プロパティが変更されたときに、ほかのオブジェクトに通知できるようにします。</summary>
      <param name="component" vsli:raw="The component to remove the handler for.">ハンドラーを削除する対象のコンポーネント。</param>
      <param name="handler" vsli:raw="The delegate to remove as a listener.">リスナーとして削除されるデリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> または <paramref name="handler" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, resets the value for this property of the component to the default value.">派生クラスでオーバーライドされた場合、コンポーネントのプロパティの値を既定値にリセットします。</summary>
      <param name="component" vsli:raw="The component with the property value that is to be reset to the default value.">既定値にリセットする対象のプロパティ値を持つコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary vsli:raw="When overridden in a derived class, sets the value of the component to a different value.">派生クラスでオーバーライドされた場合、コンポーネントの値を別の値に設定します。</summary>
      <param name="component" vsli:raw="The component with the property value that is to be set.">設定する対象のプロパティ値を持つコンポーネント。</param>
      <param name="value" vsli:raw="The new value.">新しい値。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="When overridden in a derived class, determines a value indicating whether the value of this property needs to be persisted.">派生クラスでオーバーライドされた場合、プロパティの値を永続化する必要があるかどうかを示す値を決定します。</summary>
      <param name="component" vsli:raw="The component with the property to be examined for persistence.">永続性について調べる対象のプロパティを持つコンポーネント。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be persisted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティを永続化する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.ComponentType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the component this property is bound to.">派生クラスでオーバーライドされた場合、プロパティが関連付けられているコンポーネントの型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component this property is bound to. When the &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt; methods are invoked, the object specified might be an instance of this type.">プロパティが関連付けられているコンポーネントの型を表す <see cref="T:System.Type" />。 <see cref="M:System.ComponentModel.PropertyDescriptor.GetValue(System.Object)" /> メソッドまたは <see cref="M:System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)" /> メソッドが呼び出される場合、指定されたオブジェクトはこの型のインスタンスである可能性があります。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.Converter">
      <summary vsli:raw="Gets the type converter for this property.">プロパティの型コンバーターを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is used to convert the &lt;see cref=&quot;T:System.Type&quot; /&gt; of this property.">プロパティの <see cref="T:System.ComponentModel.TypeConverter" /> を変換するために使用する <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsLocalizable">
      <summary vsli:raw="Gets a value indicating whether this property should be localized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt;.">プロパティをローカライズする必要があるかどうかを示す、<see cref="T:System.ComponentModel.LocalizableAttribute" /> で指定されている値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is marked with the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt; set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メンバーの <see cref="T:System.ComponentModel.LocalizableAttribute" /> が <see langword="true" /> に設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.IsReadOnly">
      <summary vsli:raw="When overridden in a derived class, gets a value indicating whether this property is read-only.">派生クラスでオーバーライドされた場合、プロパティが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.PropertyType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the property.">派生クラスでオーバーライドされた場合、プロパティの型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">プロパティの型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SerializationVisibility">
      <summary vsli:raw="Gets a value indicating whether this property should be serialized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibilityAttribute&quot; /&gt;.">プロパティをシリアル化する必要があるかどうかを示す、<see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> で指定されている値を取得します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.ComponentModel.DesignerSerializationVisibility&quot; /&gt; enumeration values that specifies whether this property should be serialized.">プロパティをシリアル化する必要があるかどうかを指定する <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 列挙値の 1 つ。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptor.SupportsChangeEvents">
      <summary vsli:raw="Gets a value indicating whether value change notifications for this property may originate from outside the property descriptor.">このプロパティの値変更通知をプロパティ記述子以外から発生させてよいかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if value change notifications may originate from outside the property descriptor; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">値変更通知をプロパティ記述子以外から発生させてよい場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyDescriptorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyDescriptorCollection.Empty">
      <summary vsli:raw="Specifies an empty collection that you can use instead of creating a new one with no items. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">項目のない新しいコレクションを作成する代わりに使用できる、空のコレクションを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">コレクションのプロパティを提供する <see cref="T:System.ComponentModel.PropertyDescriptor" /> 型の配列。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.#ctor(System.ComponentModel.PropertyDescriptor[],System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; class, which is optionally read-only.">オプションで読み取り専用にできる <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> クラスの新しい空のインスタンスを初期化します。</summary>
      <param name="properties" vsli:raw="An array of type &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that provides the properties for this collection.">コレクションのプロパティを提供する <see cref="T:System.ComponentModel.PropertyDescriptor" /> 型の配列。</param>
      <param name="readOnly" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, specifies that the collection cannot be modified.">
        <see langword="true" /> の場合、コレクションを変更できません。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Add(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection.">指定された <see cref="T:System.ComponentModel.PropertyDescriptor" /> をコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">コレクションに追加する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
      <returns vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that was added to the collection.">コレクションに追加された <see cref="T:System.ComponentModel.PropertyDescriptor" /> のインデックス。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Clear">
      <summary vsli:raw="Removes all &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects from the collection.">コレクションからすべての <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトを削除します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Contains(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns whether the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.PropertyDescriptor" /> がコレクションに格納されているかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to find in the collection.">コレクション内で検索する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.PropertyDescriptor" /> がコレクションに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the entire collection to an array, starting at the specified index number.">指定したインデックス番号を開始位置として、配列にコレクション全体をコピーします。</summary>
      <param name="array" vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects to copy elements of the collection to.">コレクションの要素のコピー先である <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトの配列。</param>
      <param name="index" vsli:raw="The index of the &lt;paramref name=&quot;array&quot; /&gt; parameter at which copying begins.">コピーの開始位置を示す、<paramref name="array" /> パラメーターのインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Find(System.String,System.Boolean)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, using a Boolean to indicate whether to ignore case.">大文字と小文字の違いを無視するかどうかを示すブール値を使用して、指定した名前の <see cref="T:System.ComponentModel.PropertyDescriptor" /> を返します。</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return from the collection.">コレクションから返す <see cref="T:System.ComponentModel.PropertyDescriptor" /> の名前。</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if you want to ignore the case of the property name; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティ名の大文字と小文字を区別しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">指定した名前の <see cref="T:System.ComponentModel.PropertyDescriptor" />。そのようなプロパティが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">クラスの列挙子を返します。</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 型の列挙子。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.IndexOf(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns the index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.PropertyDescriptor" /> のインデックスを返します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to return the index of.">インデックスを返す対象の <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns vsli:raw="The index of the given &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.PropertyDescriptor" /> のインデックス。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Insert(System.Int32,System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Adds the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to the collection at the specified index number.">コレクション内の指定したインデックス番号の位置に <see cref="T:System.ComponentModel.PropertyDescriptor" /> を追加します。</summary>
      <param name="index" vsli:raw="The index at which to add the &lt;paramref name=&quot;value&quot; /&gt; parameter to the collection.">
        <paramref name="value" /> パラメーターに指定されたプロパティ記述子を追加する位置を示す、コレクション内のインデックス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to add to the collection.">コレクションに追加する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">指定した <see cref="T:System.Collections.IComparer" /> を使用して、コレクションのメンバーを並べ替えます。</summary>
      <param name="sorter" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">コレクション内の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトを並べ替えるために使用する比較子。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.InternalSort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">このコレクションのメンバーを並べ替えます。 指定した順序が最初に適用され、次にコレクションの既定の並べ替え順序が適用されます。既定の並べ替え順序は、通常はアルファベット順です。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">コレクション内の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトを並べ替える順序を記述する文字列の配列。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Remove(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; from the collection.">指定された <see cref="T:System.ComponentModel.PropertyDescriptor" /> をコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">コレクションから削除する <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index from the collection.">指定したインデックスにある <see cref="T:System.ComponentModel.PropertyDescriptor" /> をコレクションから削除します。</summary>
      <param name="index" vsli:raw="The index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to remove from the collection.">コレクションから削除する <see cref="T:System.ComponentModel.PropertyDescriptor" /> のインデックス。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort">
      <summary vsli:raw="Sorts the members of this collection, using the default sort for this collection, which is usually alphabetical.">このコレクションの既定の並べ替えを使用して、このコレクションのメンバーを並べ替えます。既定の並べ替えは、通常はアルファベット順です。</summary>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">並べ替えられた <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> オブジェクトを格納している新しい <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection, using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">指定した <see cref="T:System.Collections.IComparer" /> を使用して、コレクションのメンバーを並べ替えます。</summary>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">コレクション内の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトを並べ替えるために使用する比較子。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">並べ替えられた <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> オブジェクトを格納している新しい <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[])">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the default sort for this collection, which is usually alphabetical.">このコレクションのメンバーを並べ替えます。 指定した順序が最初に適用され、次にコレクションの既定の並べ替え順序が適用されます。既定の並べ替え順序は、通常はアルファベット順です。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">コレクション内の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトを並べ替える順序を記述する文字列の配列。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">並べ替えられた <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> オブジェクトを格納している新しい <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.Sort(System.String[],System.Collections.IComparer)">
      <summary vsli:raw="Sorts the members of this collection. The specified order is applied first, followed by the sort using the specified &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">このコレクションのメンバーを並べ替えます。 指定した順序が最初に適用され、指定した <see cref="T:System.Collections.IComparer" /> を使用した並べ替えが次に行われます。</summary>
      <param name="names" vsli:raw="An array of strings describing the order in which to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">コレクション内の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトを並べ替える順序を記述する文字列の配列。</param>
      <param name="comparer" vsli:raw="A comparer to use to sort the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects in this collection.">コレクション内の <see cref="T:System.ComponentModel.PropertyDescriptor" /> オブジェクトを並べ替えるために使用する比較子。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; objects.">並べ替えられた <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> オブジェクトを格納している新しい <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds an element with the provided key and value to the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">指定したキーおよび値を持つ要素を <see cref="T:System.Collections.IDictionary" /> オブジェクトに追加します。</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the key of the element to add.">追加する要素のキーとして使用する <see cref="T:System.Object" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to use as the value of the element to add.">追加する要素の値として使用する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Clear">
      <summary vsli:raw="Removes all elements from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> からすべての要素を削除します。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the specified key.">指定したキーの要素が <see cref="T:System.Collections.IDictionary" /> に格納されているかどうかを確認します。</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IDictionary" /> 内で検索されるキー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; contains an element with the key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したキーを持つ要素を <see langword="true" /> が保持している場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this class.">クラスの列挙子を返します。</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 型の列挙子。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">指定したキーを持つ要素を <see cref="T:System.Collections.IDictionary" /> から削除します。</summary>
      <param name="key" vsli:raw="The key of the element to remove.">削除する要素のキー。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Collections.IDictionary" /> を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> の <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an item to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> に項目を追加します。</summary>
      <param name="value" vsli:raw="The item to add to the collection.">コレクションに追加するアイテムです。</param>
      <returns vsli:raw="The position into which the new element was inserted.">新しい要素が挿入された位置。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the collection.">コレクションからすべての項目を削除します。</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the collection contains a specific value.">コレクションに特定の値が格納されているかどうかを判断します。</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">コレクション内で検索する項目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is found in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">項目がコレクション内で見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specified item in the collection.">コレクション内で指定した項目のインデックスを調べます。</summary>
      <param name="value" vsli:raw="The item to locate in the collection.">コレクション内で検索する項目。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if found in the list, otherwise -1.">リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item into the collection at a specified index.">コレクション内の指定したインデックスの位置に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The item to insert into the collection.">コレクションに挿入する項目。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specified value from the collection.">最初に出現する指定値をコレクションから削除します。</summary>
      <param name="value" vsli:raw="The item to remove from the collection.">コレクションから削除する項目。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index.">指定したインデックス位置にある項目を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to remove.">削除する項目の 0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Count">
      <summary vsli:raw="Gets the number of property descriptors in the collection.">コレクション内のプロパティ記述子の数を取得します。</summary>
      <returns vsli:raw="The number of property descriptors in the collection.">コレクション内のプロパティ記述子の数。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; at the specified index number.">指定したインデックス番号にある <see cref="T:System.ComponentModel.PropertyDescriptor" /> を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get or set.">取得または設定する <see cref="T:System.ComponentModel.PropertyDescriptor" /> の 0 から始まるインデックス番号。</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is not a valid index for &lt;see cref=&quot;P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)&quot; /&gt;.">
        <paramref name="index" /> パラメーターが、<see cref="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.Int32)" /> に対して有効なインデックスではありません。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified index number.">指定したインデックス番号を持つ <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.Item(System.String)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name.">指定した名前の <see cref="T:System.ComponentModel.PropertyDescriptor" /> を取得または設定します。</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to get from the collection.">コレクションから取得する <see cref="T:System.ComponentModel.PropertyDescriptor" /> の名前。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if the property does not exist.">指定した名前の <see cref="T:System.ComponentModel.PropertyDescriptor" />。そのようなプロパティが存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">コレクションに格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the collection.">コレクションに含まれる要素の数です。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the collection is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションへのアクセスが同期されている (スレッド セーフである) 場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the collection.">コレクションへのアクセスの同期に使用できるオブジェクトです。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IDictionary" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.IDictionary" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the element with the specified key.">指定したキーを持つ要素を取得または設定します。</summary>
      <param name="key" vsli:raw="The key of the element to get or set.">取得または設定する要素のキー。</param>
      <returns vsli:raw="The element with the specified key.">指定したキーを持つ要素。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the keys of the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> のキーを保持している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" /> を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; containing the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> 内の値を格納している <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the collection has a fixed size.">コレクションが固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションが固定サイズの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyDescriptorCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets an item from the collection at a specified index.">コレクション内の指定したインデックス位置の項目を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the item to get or set.">取得または設定する項目の、0 から始まるインデックス。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The collection is read-only.">コレクションは読み取り専用です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">
        <paramref name="value" /> が <see cref="T:System.ComponentModel.PropertyDescriptor" /> ではありません。</exception>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than &lt;see cref=&quot;P:System.ComponentModel.EventDescriptorCollection.Count&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <see cref="P:System.ComponentModel.EventDescriptorCollection.Count" /> 以上になっています。</exception>
      <returns vsli:raw="The element at the specified index.">指定したインデックス位置にある要素。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabAttribute">
      <summary vsli:raw="Identifies the property tab or tabs to display for the specified class or classes.">指定したクラスに対して表示するプロパティ タブを識別します。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.PropertyTabAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name.">タブ クラスの名前を指定して、<see cref="T:System.ComponentModel.PropertyTabAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">作成するタブの型のアセンブリ修飾名。 この書式指定規則の例については、<see cref="P:System.Type.AssemblyQualifiedName" /> のトピックを参照してください。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.String,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified tab class name and tab scope.">タブ クラスの名前とタブのスコープを指定して、<see cref="T:System.ComponentModel.PropertyTabAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tabClassName" vsli:raw="The assembly qualified name of the type of tab to create. For an example of this format convention, see &lt;see cref=&quot;P:System.Type.AssemblyQualifiedName&quot; /&gt;.">作成するタブの型のアセンブリ修飾名。 この書式指定規則の例については、<see cref="P:System.Type.AssemblyQualifiedName" /> のトピックを参照してください。</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">
        <see cref="T:System.ComponentModel.PropertyTabScope" />このタブのスコープを示す。スコープがの場合は、 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> 対応するを持つコンポーネントに対してのみ表示され <see cref="T:System.ComponentModel.PropertyTabAttribute" /> ます。 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> の場合は、ドキュメント上のすべてのコンポーネントに対して表示されます。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" /> が、<see cref="F:System.ComponentModel.PropertyTabScope.Document" /> でも <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> でもありません。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab.">タブの型を指定して、<see cref="T:System.ComponentModel.PropertyTabAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">作成するタブの型。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.#ctor(System.Type,System.ComponentModel.PropertyTabScope)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; class using the specified type of tab and tab scope.">タブの型とタブのスコープを指定して、<see cref="T:System.ComponentModel.PropertyTabAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tabClass" vsli:raw="The type of tab to create.">作成するタブの型。</param>
      <param name="tabScope" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; that indicates the scope of this tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">
        <see cref="T:System.ComponentModel.PropertyTabScope" />このタブのスコープを示す。スコープがの場合は、 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> 対応するを持つコンポーネントに対してのみ表示され <see cref="T:System.ComponentModel.PropertyTabAttribute" /> ます。 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> の場合は、ドキュメント上のすべてのコンポーネントに対して表示されます。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;tabScope&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.">
        <paramref name="tabScope" /> が、<see cref="F:System.ComponentModel.PropertyTabScope.Document" /> でも <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> でもありません。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.ComponentModel.PropertyTabAttribute)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified attribute.">対象のインスタンスが、指定した属性に等しいかどうかを示す値を返します。</summary>
      <param name="other" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">このインスタンスと比較する <see cref="T:System.ComponentModel.PropertyTabAttribute" />。または、<see langword="null" />。</param>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter cannot be found.">
        <paramref name="other" /> パラメーターの <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> プロパティで指定された型が見つかりません。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyTabAttribute" /> インスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value indicating whether this instance is equal to a specified object.">このインスタンスが指定されたオブジェクトに等しいかどうかを示す値を返します。</summary>
      <param name="other" vsli:raw="An object to compare to this instance, or &lt;see langword=&quot;null&quot; /&gt;.">このインスタンスと比較するオブジェクト、または <see langword="null" />。</param>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property of the &lt;paramref name=&quot;other&quot; /&gt; parameter could not be found.">
        <paramref name="other" /> パラメーターの <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> プロパティで指定された型が見つかりませんでした。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;other&quot; /&gt; refers to the same &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt; instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="other" /> が同じ <see cref="T:System.ComponentModel.PropertyTabAttribute" /> インスタンスを参照している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.GetHashCode">
      <summary vsli:raw="Gets the hash code for this object.">オブジェクトのハッシュ コードを取得します。</summary>
      <returns vsli:raw="The hash code for the object the attribute belongs to.">属性が属しているオブジェクトのハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.String[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">タブ クラスの名前とタブのスコープの配列を指定して、属性を初期化します。</summary>
      <param name="tabClassNames" vsli:raw="An array of fully qualified type names of the types to create for tabs on the Properties window.">[プロパティ] ウィンドウのタブに対して作成する型の完全修飾型名の配列。</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">各タブのスコープ。スコープがの場合は、 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> 対応するを持つコンポーネントに対してのみ表示され <see cref="T:System.ComponentModel.PropertyTabAttribute" /> ます。 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> の場合は、ドキュメント上のすべてのコンポーネントに対して表示されます。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="tabScopes" /> 内の値に、<see cref="F:System.ComponentModel.PropertyTabScope.Document" /> または <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> のいずれでもないものがあります。  
  
- または - 
<paramref name="tabClassNames" /> 配列と <paramref name="tabScopes" /> 配列の長さが違います。  
  
- または - 
 <paramref name="tabClassNames" /> または <paramref name="tabScopes" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyTabAttribute.InitializeArrays(System.Type[],System.ComponentModel.PropertyTabScope[])">
      <summary vsli:raw="Initializes the attribute using the specified names of tab classes and array of tab scopes.">タブ クラスの名前とタブのスコープの配列を指定して、属性を初期化します。</summary>
      <param name="tabClasses" vsli:raw="The types of tabs to create.">作成するタブの型。</param>
      <param name="tabScopes" vsli:raw="The scope of each tab. If the scope is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;, it is shown only for components with the corresponding &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;. If it is &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt;, it is shown for all components on the document.">各タブのスコープ。スコープがの場合は、 <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> 対応するを持つコンポーネントに対してのみ表示され <see cref="T:System.ComponentModel.PropertyTabAttribute" /> ます。 <see cref="F:System.ComponentModel.PropertyTabScope.Document" /> の場合は、ドキュメント上のすべてのコンポーネントに対して表示されます。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="One or more of the values in &lt;paramref name=&quot;tabScopes&quot; /&gt; is not &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Document&quot; /&gt; or &lt;see cref=&quot;F:System.ComponentModel.PropertyTabScope.Component&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of the &lt;paramref name=&quot;tabClassNames&quot; /&gt; and &lt;paramref name=&quot;tabScopes&quot; /&gt; arrays do not match.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;tabClassNames&quot; /&gt; or &lt;paramref name=&quot;tabScopes&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="tabScopes" /> 内の値に、<see cref="F:System.ComponentModel.PropertyTabScope.Document" /> または <see cref="F:System.ComponentModel.PropertyTabScope.Component" /> のいずれでもないものがあります。  
  
- または - 
<paramref name="tabClassNames" /> 配列と <paramref name="tabScopes" /> 配列の長さが違います。  
  
- または - 
 <paramref name="tabClassNames" /> または <paramref name="tabScopes" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClasses">
      <summary vsli:raw="Gets the types of tabs that this attribute uses.">属性が使用するタブの型を取得します。</summary>
      <exception cref="T:System.TypeLoadException" vsli:raw="The types specified by the &lt;see cref=&quot;P:System.ComponentModel.PropertyTabAttribute.TabClassNames&quot; /&gt; property could not be found.">
        <see cref="P:System.ComponentModel.PropertyTabAttribute.TabClassNames" /> プロパティで指定された型が見つかりませんでした。</exception>
      <returns vsli:raw="An array of types indicating the types of tabs that this attribute uses.">属性が使用するタブの型を示す型配列。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabClassNames">
      <summary vsli:raw="Gets the names of the tab classes that this attribute uses.">属性が使用するタブ クラスの名前を取得します。</summary>
      <returns vsli:raw="The names of the tab classes that this attribute uses.">属性が使用するタブ クラスの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyTabAttribute.TabScopes">
      <summary vsli:raw="Gets an array of tab scopes of each tab of this &lt;see cref=&quot;T:System.ComponentModel.PropertyTabAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyTabAttribute" /> の各タブのスコープの配列を取得します。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.ComponentModel.PropertyTabScope&quot; /&gt; objects that indicate the scopes of the tabs.">タブのスコープを示す <see cref="T:System.ComponentModel.PropertyTabScope" /> オブジェクトの配列。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyTabScope">
      <summary vsli:raw="Defines identifiers that indicate the persistence scope of a tab in the Properties window.">[プロパティ] ウィンドウにあるタブのスコープの永続性を示す識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Component">
      <summary vsli:raw="This tab is specific to the current component. This tab is added to the Properties window for the current component only and is removed when the component is no longer selected.">このタブは、現在のコンポーネントに固有のタブです。 このタブは、現在のコンポーネントに関してだけ [プロパティ] ウィンドウに追加され、そのコンポーネントが選択されなくなった時点で削除されます。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Document">
      <summary vsli:raw="This tab is specific to the current document. This tab is added to the Properties window and is removed when the currently selected document changes.">このタブは、現在のドキュメントに固有のタブです。 このタブは [プロパティ] ウィンドウに追加され、現在選択されているドキュメントが変更された時点で削除されます。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Global">
      <summary vsli:raw="This tab is added to the Properties window and can only be removed explicitly by a parent component.">このタブは [プロパティ] ウィンドウに追加され、親コンポーネントだけが明示的に削除できます。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyTabScope.Static">
      <summary vsli:raw="This tab is added to the Properties window and cannot be removed.">このタブは [プロパティ] ウィンドウに追加され、削除はできません。</summary>
    </member>
    <member name="T:System.ComponentModel.ProvidePropertyAttribute">
      <summary vsli:raw="Specifies the name of the property that an implementer of &lt;see cref=&quot;T:System.ComponentModel.IExtenderProvider&quot; /&gt; offers to other components. This class cannot be inherited.">
        <see cref="T:System.ComponentModel.IExtenderProvider" /> の実装側が他のコンポーネントに提供するプロパティの名前を指定します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and the type of its receiver.">プロパティの名前とそのプロパティを受け取る側の型を指定して、<see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">指定した型のオブジェクトに拡張するプロパティの名前。</param>
      <param name="receiverTypeName" vsli:raw="The name of the data type this property can extend.">このプロパティが拡張できるデータ型の名前。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.#ctor(System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt; class with the name of the property and its &lt;see cref=&quot;T:System.Type&quot; /&gt;.">プロパティの名前とその <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> を指定して、<see cref="T:System.Type" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyName" vsli:raw="The name of the property extending to an object of the specified type.">指定した型のオブジェクトに拡張するプロパティの名前。</param>
      <param name="receiverType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the data type of the object that can receive the property.">プロパティを受け取ることができるオブジェクトのデータ型の <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns whether the value of the given object is equal to the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">指定したオブジェクトの値が現在の <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> と等しいかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="The object to test the value equality of.">値が等しいかどうかを確認するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the given object is equal to that of the current; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したオブジェクトの値が現在の値と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ProvidePropertyAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.ProvidePropertyAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.ProvidePropertyAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.PropertyName">
      <summary vsli:raw="Gets the name of a property that this class provides.">このクラスが提供するプロパティの名前を取得します。</summary>
      <returns vsli:raw="The name of a property that this class provides.">このクラスが提供するプロパティの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.ReceiverTypeName">
      <summary vsli:raw="Gets the name of the data type this property can extend.">このプロパティが拡張できるデータ型の名前を取得します。</summary>
      <returns vsli:raw="The name of the data type this property can extend.">このプロパティが拡張できるデータ型の名前。</returns>
    </member>
    <member name="P:System.ComponentModel.ProvidePropertyAttribute.TypeId">
      <summary vsli:raw="Gets a unique identifier for this attribute.">この属性の一意の識別子を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that is a unique identifier for the attribute.">この属性の一意の識別子である <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RecommendedAsConfigurableAttribute">
      <summary vsli:raw="Specifies that the property can be used as an application setting.">プロパティをアプリケーションの設定値として使用できることを指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Default">
      <summary vsli:raw="Specifies the default value for the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;, which is &lt;see cref=&quot;F:System.ComponentModel.RecommendedAsConfigurableAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">
        <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> の既定値 (<see cref="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No" />) を指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.No">
      <summary vsli:raw="Specifies that a property cannot be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">プロパティをアプリケーションの設定値として使用できないことを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.RecommendedAsConfigurableAttribute.Yes">
      <summary vsli:raw="Specifies that a property can be used as an application setting. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">プロパティをアプリケーションの設定値として使用できることを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="recommendedAsConfigurable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この属性が関連付けられているプロパティをアプリケーションの設定値として使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.Equals(System.Object)">
      <summary vsli:raw="Indicates whether this instance and a specified object are equal.">このインスタンスと指定したオブジェクトが等しいかどうかを示します。</summary>
      <param name="obj" vsli:raw="Another object to compare to.">比較対象のもう 1 つのオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" /> がこのインスタンスと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RecommendedAsConfigurableAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.RecommendedAsConfigurableAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.RecommendedAsConfigurableAttribute.IsDefaultAttribute">
      <summary vsli:raw="Indicates whether the value of this instance is the default value for the class.">このインスタンス内の値がクラスの既定値であるかどうかを示します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is the default attribute for the class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスがクラスの既定の属性である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.RecommendedAsConfigurableAttribute.RecommendedAsConfigurable">
      <summary vsli:raw="Gets a value indicating whether the property this attribute is bound to can be used as an application setting.">この属性が関連付けられているプロパティをアプリケーション設定値として使用できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property this attribute is bound to can be used as an application setting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この属性が関連付けられているプロパティをアプリケーションの設定値として使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ReferenceConverter">
      <summary vsli:raw="Provides a type converter to convert object references to and from other representations.">オブジェクト参照のほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ReferenceConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ReferenceConverter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to associate with this reference converter.">この参照コンバーターに関連付ける型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a reference object using the specified context.">このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを参照オブジェクトに変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトが変換を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the reference type.">指定したオブジェクトを参照型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">フォントを表すときに使用するカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the reference type using the specified context and arguments.">指定したコンテキストと引数を使用して、値オブジェクトを参照型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">フォントを表すときに使用するカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">オブジェクトの変換後の型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="The converted object.">変換後のオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the reference data type.">参照データ型の標準値コレクションを取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">正しい値の標準セットを保持する <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。データ型が標準値セットをサポートしていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exclusive list.">
        <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> から返された標準値のコレクションが、排他的リストかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> から返された <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> が有効値の排他的リストであるため、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list.">リストから選択できる標準値セットをこのオブジェクトがサポートしているかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; can be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトがサポートしている標準値セットを見つけるために <see cref="M:System.ComponentModel.ReferenceConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> を呼び出すことができるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="M:System.ComponentModel.ReferenceConverter.IsValueAllowed(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value indicating whether a particular value can be added to the standard values collection.">特定の値を標準値コレクションに追加できるかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides an additional context.">追加コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The value to check.">確認する値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is allowed and can be added to the standard values collection; &lt;see langword=&quot;false&quot; /&gt; if the value cannot be added to the standard values collection.">標準値コレクションに値を追加できる場合は <see langword="true" />。標準値コレクションに値を追加できない場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> イベントのデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the component that has changed.">変更されたコンポーネントを使用して、<see cref="T:System.ComponentModel.RefreshEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="componentChanged" vsli:raw="The component that changed.">変更されたコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.RefreshEventArgs.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; class with the type of component that has changed.">変更されたコンポーネントの型を使用して、<see cref="T:System.ComponentModel.RefreshEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeChanged" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">変更された <see cref="T:System.Type" />。</param>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.ComponentChanged">
      <summary vsli:raw="Gets the component that changed its properties, events, or extenders.">プロパティ、イベント、またはエクステンダーが変更されたコンポーネントを取得します。</summary>
      <returns vsli:raw="The component that changed its properties, events, or extenders, or &lt;see langword=&quot;null&quot; /&gt; if all components of the same type have changed.">プロパティ、イベント、またはエクステンダーが変更されたコンポーネント。同じ型のコンポーネントがすべて変更された場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshEventArgs.TypeChanged">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">プロパティまたはイベントが変更された <see cref="T:System.Type" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed its properties or events.">プロパティまたはイベントが変更された <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.ComponentModel.TypeDescriptor.Refreshed&quot; /&gt; event raised when a &lt;see cref=&quot;T:System.Type&quot; /&gt; or component is changed during design time.">デザイン時に <see cref="E:System.ComponentModel.TypeDescriptor.Refreshed" /> またはコンポーネントが変更された場合に発生する <see cref="T:System.Type" /> イベントを処理するメソッドを表します</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.RefreshEventArgs&quot; /&gt; that contains the component or &lt;see cref=&quot;T:System.Type&quot; /&gt; that changed.">変更されたコンポーネントまたは <see cref="T:System.ComponentModel.RefreshEventArgs" /> を格納する <see cref="T:System.Type" />。</param>
    </member>
    <member name="T:System.ComponentModel.RunInstallerAttribute">
      <summary vsli:raw="Specifies whether the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed.">アセンブリのインストール時に、Visual Studio の Custom Action Installer または Installutil.exe (インストーラー ツール) が起動されるかどうかを指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Default">
      <summary vsli:raw="Specifies the default visibility, which is &lt;see cref=&quot;F:System.ComponentModel.RunInstallerAttribute.No&quot; /&gt;. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">既定の可視性である <see cref="F:System.ComponentModel.RunInstallerAttribute.No" /> を指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.No">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should not be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">アセンブリのインストール時に、Visual Studio の Custom Action Installer または Installutil.exe (インストーラー ツール) を起動しないことを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.RunInstallerAttribute.Yes">
      <summary vsli:raw="Specifies that the Visual Studio Custom Action Installer or the Installutil.exe (Installer Tool) should be invoked when the assembly is installed. This &lt;see langword=&quot;static&quot; /&gt; field is read-only.">アセンブリのインストール時に、Visual Studio の Custom Action Installer または Installutil.exe (インストーラー ツール) を起動することを指定します。 <see langword="static" /> フィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.RunInstallerAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="runInstaller" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">アセンブリのインストール中にインストーラーを起動する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the value of the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">指定した <see cref="T:System.ComponentModel.RunInstallerAttribute" /> の値が、現在の <see cref="T:System.ComponentModel.RunInstallerAttribute" /> と等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The object to compare.">比較対象のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した <see langword="true" /> が現在の <see cref="T:System.ComponentModel.RunInstallerAttribute" /> と等しい場合は <see cref="T:System.ComponentModel.RunInstallerAttribute" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.GetHashCode">
      <summary vsli:raw="Generates a hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.RunInstallerAttribute" /> のハッシュ コードを生成します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.ComponentModel.RunInstallerAttribute&quot; /&gt;.">現在の <see cref="T:System.ComponentModel.RunInstallerAttribute" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.RunInstallerAttribute.IsDefaultAttribute">
      <summary vsli:raw="Determines if this attribute is the default.">この属性が既定値かどうかを判断します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the attribute is the default value for this attribute class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">属性がこの属性クラスの既定値の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.RunInstallerAttribute.RunInstaller">
      <summary vsli:raw="Gets a value indicating whether an installer should be invoked during installation of an assembly.">アセンブリのインストール中にインストーラーを起動するかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an installer should be invoked during installation of an assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">アセンブリのインストール中にインストーラーを起動する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.SByteConverter">
      <summary vsli:raw="Provides a type converter to convert 8-bit unsigned integer objects to and from a string.">8 ビット符号なし整数オブジェクトから文字列への変換や、その逆の変換を実行する型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.SByteConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SByteConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.SByteConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.SettingsBindableAttribute">
      <summary vsli:raw="Specifies when a component property can be bound to an application setting.">コンポーネント プロパティをアプリケーション設定にバインドできる場合を指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.No">
      <summary vsli:raw="Specifies that a property is not appropriate to bind settings to.">プロパティが設定のバインド先として適切ではないことを指定します。</summary>
    </member>
    <member name="F:System.ComponentModel.SettingsBindableAttribute.Yes">
      <summary vsli:raw="Specifies that a property is appropriate to bind settings to.">プロパティが設定のバインド先として適切であることを指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SettingsBindableAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.SettingsBindableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="bindable" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that a property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティが設定のバインド先として適切であること指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">このインスタンスと比較する <see cref="T:System.Object" /> または null 参照 (Visual Basic では <see langword="Nothing" />)。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SettingsBindableAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="P:System.ComponentModel.SettingsBindableAttribute.Bindable">
      <summary vsli:raw="Gets a value indicating whether a property is appropriate to bind settings to.">プロパティが設定のバインド先として適切であるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is appropriate to bind settings to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティが設定のバインド先として適切である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.SingleConverter">
      <summary vsli:raw="Provides a type converter to convert single-precision, floating point number objects to and from various other representations.">単精度浮動小数点数オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.SingleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SingleConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.SingleConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.StringConverter">
      <summary vsli:raw="Provides a type converter to convert string objects to and from other representations.">文字列オブジェクトから他のさまざまな表現への変換や、その逆の変換を実行する型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.StringConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.StringConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.StringConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a string using the specified context.">このコンバーターで、指定したコンテキストを使用して、指定したソース型のオブジェクトを文字列に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.StringConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified value object to a &lt;see cref=&quot;T:System.String&quot; /&gt; object.">指定した値オブジェクトを <see cref="T:System.String" /> オブジェクトに変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use.">使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">変換できませんでした。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.ComponentModel.SyntaxCheck">
      <summary vsli:raw="Provides methods to verify the machine name and path conform to a specific syntax. This class cannot be inherited.">コンピューター名とパスが特定の構文に準拠しているかどうかを検証するメソッドを提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckMachineName(System.String)">
      <summary vsli:raw="Checks the syntax of the machine name to confirm that it does not contain &quot;\&quot;.">コンピューター名の構文をチェックして、"\" が含まれていないことを確認します。</summary>
      <param name="value" vsli:raw="A string containing the machine name to check.">チェックするコンピューター名が含まれている文字列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper machine name format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> が適切なコンピューター名の形式に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see whether it starts with &quot;\\&quot;.">パスの構文をチェックして、"\\" で始まるかどうかを確認します。</summary>
      <param name="value" vsli:raw="A string containing the path to check.">チェックするパスが含まれている文字列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> が適切なパスの形式に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SyntaxCheck.CheckRootedPath(System.String)">
      <summary vsli:raw="Checks the syntax of the path to see if it starts with &quot;\&quot; or drive letter &quot;C:&quot;.">パスの構文をチェックして、"\" またはドライブ文字 "C:" で始まるかどうかを確認します。</summary>
      <param name="value" vsli:raw="A string containing the path to check.">チェックするパスが含まれている文字列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; matches the proper path format; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> が適切なパスの形式に一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TimeSpanConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; objects to and from other representations.">
        <see cref="T:System.TimeSpan" /> 型オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TimeSpanConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.TimeSpanConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; using the specified context.">このコンバーターが、指定したコンテキストを使用して特定の型のオブジェクトを <see cref="T:System.TimeSpan" /> に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">変換後の型を表す <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;.">指定したオブジェクトを <see cref="T:System.TimeSpan" /> に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid value for the target type.">
        <paramref name="value" /> は、変換後の型として有効な値ではありません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TimeSpanConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given object to another type.">指定したオブジェクトを別の型に変換します。</summary>
      <param name="context" vsli:raw="A formatter context.">フォーマッタ コンテキスト。</param>
      <param name="culture" vsli:raw="The culture into which &lt;paramref name=&quot;value&quot; /&gt; will be converted.">
        <paramref name="value" /> の変換後のカルチャ。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">オブジェクトの変換後の型。</param>
      <returns vsli:raw="The converted object.">変換後のオブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemAttribute">
      <summary vsli:raw="Represents an attribute of a toolbox item.">ツールボックス項目の属性を表します。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.Default">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to the default, &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;. This field is read-only.">
        <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> クラスの新しいインスタンスを初期化し、ツールボックス項目の型を既定の <see cref="T:System.Drawing.Design.ToolboxItem" /> に設定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemAttribute.None">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and sets the type to &lt;see langword=&quot;null&quot; /&gt;. This field is read-only.">
        <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> クラスの新しいインスタンスを初期化し、ツールボックス項目の型を <see langword="null" /> に設定します。 このフィールドは読み取り専用です。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class and specifies whether to use default initialization values.">
        <see cref="T:System.ComponentModel.ToolboxItemAttribute" /> クラスの新しいインスタンスを初期化し、既定の初期値を使用するかどうかを指定します。</summary>
      <param name="defaultType" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to create a toolbox item attribute for a default type; &lt;see langword=&quot;false&quot; /&gt; to associate no default toolbox item support for this attribute.">既定の型でツールボックス項目の属性を作成する場合は <see langword="true" />。この属性に既定のツールボックス項目のサポートを関連付けない場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified name of the type.">指定した名前と型を使用して、<see cref="T:System.ComponentModel.ToolboxItemAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="toolboxItemTypeName" vsli:raw="The names of the type of the toolbox item and of the assembly that contains the type.">ツールボックス項目の型名と、その型を格納するアセンブリの名前。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemAttribute&quot; /&gt; class using the specified type of the toolbox item.">指定したツールボックス項目の型を使用して、<see cref="T:System.ComponentModel.ToolboxItemAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="toolboxItemType" vsli:raw="The type of the toolbox item.">ツールボックス項目の型。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">このインスタンスと比較する <see cref="T:System.Object" /> または null 参照 (Visual Basic では <see langword="Nothing" />)。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemAttribute.IsDefaultAttribute">
      <summary vsli:raw="Gets a value indicating whether the current value of the attribute is the default value for the attribute.">属性の現在の値が既定値かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current value of the attribute is the default; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">属性の現在の値が既定値である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemType">
      <summary vsli:raw="Gets or sets the type of the toolbox item.">ツールボックス項目の型を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The type cannot be found.">型が見つかりません。</exception>
      <returns vsli:raw="The type of the toolbox item.">ツールボックス項目の型。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemAttribute.ToolboxItemTypeName">
      <summary vsli:raw="Gets or sets the name of the type of the current &lt;see cref=&quot;T:System.Drawing.Design.ToolboxItem&quot; /&gt;.">現在の <see cref="T:System.Drawing.Design.ToolboxItem" /> の型名を取得または設定します。</summary>
      <returns vsli:raw="The fully qualified type name of the current toolbox item.">現在のツールボックス項目の完全限定型名。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterAttribute">
      <summary vsli:raw="Specifies the filter string and filter type to use for a toolbox item.">ツールボックスの項目のために使用するフィルター文字列およびフィルターの種類を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string.">フィルター文字列を指定して、<see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">ツールボックス項目のフィルター文字列。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.#ctor(System.String,System.ComponentModel.ToolboxItemFilterType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; class using the specified filter string and type.">フィルター文字列とフィルターの種類を指定して、<see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="filterString" vsli:raw="The filter string for the toolbox item.">ツールボックス項目のフィルター文字列。</param>
      <param name="filterType" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; indicating the type of the filter.">フィルターの種類を示す <see cref="T:System.ComponentModel.ToolboxItemFilterType" />。</param>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to a specified object.">このインスタンスが、指定されたオブジェクトと等価であるかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare with this instance or a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">このインスタンスと比較する <see cref="T:System.Object" /> または null 参照 (Visual Basic では <see langword="Nothing" />)。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> がこのインスタンスの型および値に等しい場合は <paramref name="obj" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">このインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.Match(System.Object)">
      <summary vsli:raw="Indicates whether the specified object has a matching filter string.">指定したオブジェクトが一致するフィルター文字列を持っているかどうかを示します。</summary>
      <param name="obj" vsli:raw="The object to test for a matching filter string.">一致するフィルター文字列のテストを行うオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object has a matching filter string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したオブジェクトが一致するフィルター文字列を持っている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ToolboxItemFilterAttribute.ToString">
      <summary vsli:raw="Returns a string that represents the current object.">現在のオブジェクトを表す文字列を返します。</summary>
      <returns vsli:raw="A string that represents the current object.">現在のオブジェクトを表す文字列。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterString">
      <summary vsli:raw="Gets the filter string for the toolbox item.">ツールボックス項目のフィルター文字列を取得します。</summary>
      <returns vsli:raw="The filter string for the toolbox item.">ツールボックス項目のフィルター文字列。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.FilterType">
      <summary vsli:raw="Gets the type of the filter.">フィルターの種類を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterType&quot; /&gt; that indicates the type of the filter.">フィルターの種類を示す <see cref="T:System.ComponentModel.ToolboxItemFilterType" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ToolboxItemFilterAttribute.TypeId">
      <summary vsli:raw="Gets the type ID for the attribute.">属性の型 ID を取得します。</summary>
      <returns vsli:raw="The type ID for this attribute. All &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; objects with the same filter string return the same type ID.">属性の型 ID。 同じフィルター文字列を持つすべての <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> オブジェクトは、同じ型 ID を返します。</returns>
    </member>
    <member name="T:System.ComponentModel.ToolboxItemFilterType">
      <summary vsli:raw="Defines identifiers used to indicate the type of filter that a &lt;see cref=&quot;T:System.ComponentModel.ToolboxItemFilterAttribute&quot; /&gt; uses.">
        <see cref="T:System.ComponentModel.ToolboxItemFilterAttribute" /> が使用するフィルターの種類を示すために使用される識別子を定義します。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Allow">
      <summary vsli:raw="Indicates that a toolbox item filter string is allowed, but not required.">ツールボックス項目のフィルター文字列は許容されるが必須ではないことを示します。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Custom">
      <summary vsli:raw="Indicates that custom processing is required to determine whether to use a toolbox item filter string. It is typically specified on a root designer class to indicate that the designer wishes to accept or reject a toolbox item through code. The designer must implement the &lt;see cref=&quot;M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)&quot; /&gt; method of the &lt;see cref=&quot;T:System.Drawing.Design.IToolboxUser&quot; /&gt; interface.">ツールボックス項目のフィルター文字列を使用するかどうかを判断するために、カスタム処理が必要であることを示します。 デザイナーがコードを介してツールボックス項目の受け入れるか拒否するかを示すために、通常はルート デザイナー クラス上で指定されます。 デザイナーは、<see cref="T:System.Drawing.Design.IToolboxUser" /> インターフェイスの <see cref="M:System.Drawing.Design.IToolboxUser.GetToolSupported(System.Drawing.Design.ToolboxItem)" /> メソッドを実装する必要があります。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Prevent">
      <summary vsli:raw="Indicates that a toolbox item filter string is not allowed. If a designer and a component class both have a filter string and the value of one is &lt;c&gt;ToolboxItemFilterType.Prevent&lt;/c&gt;, the toolbox item will not be available.">ツールボックス項目のフィルター文字列が使用できないことを示します。 デザイナーとコンポーネント クラスの両方にフィルター文字列があり、その値が <c> ToolboxItemFilterType.Prevent </c> である場合、ツールボックス項目は使用できません。</summary>
    </member>
    <member name="F:System.ComponentModel.ToolboxItemFilterType.Require">
      <summary vsli:raw="Indicates that a toolbox item filter string must be present for a toolbox item to be enabled.  For a toolbox item with a filter type of &lt;c&gt;Require&lt;/c&gt; to be enabled, the designer and the component class must have a matching filter string. Additionally, neither the designer or component class can have a filter type of &lt;c&gt;Prevent&lt;/c&gt; for the toolbox item to be enabled.">有効にするツールボックス項目のフィルター文字列が存在する必要があることを示します。  フィルターの種類が<c>必須</c>であるツールボックス項目を有効にする場合は、デザイナーとコンポーネント クラスのフィルター文字列が一致している必要があります。 さらに、デザイナクラスとコンポーネント クラスどちらもにおいても、有効にするツールボックス項目のフィルターの種類を<c>防止</c>にすることはできません。</summary>
    </member>
    <member name="T:System.ComponentModel.TypeConverter">
      <summary vsli:raw="Provides a unified way of converting types of values to other types, as well as for accessing standard values and subproperties.">値の型を他の型に変換し、標準値とサブプロパティにアクセスするための統一的な方法を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.TypeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter, using the specified context.">このコンバーターが、指定したコンテキストを使用して、指定された型のオブジェクトをこのコンバーターの型に変換できるかどうかを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">変換元の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertFrom(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">コンバーターが特定の型のオブジェクトをコンバーターの型に変換できるかどうかを示す値を返します。</summary>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">変換元の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">このコンバーターが指定のコンテキストを使用して、オブジェクトを指定の型に変換できるかどうかを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">変換先の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CanConvertTo(System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">コンバーターがオブジェクトを指定した型に変換できるかどうかを示す値を返します。</summary>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">変換先の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">指定したコンテキストとカルチャ情報を使用して、指定したオブジェクトをこのコンバーターの型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFrom(System.Object)">
      <summary vsli:raw="Converts the given value to the type of this converter.">指定した値をコンバーターの型に変換します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture and the specified context.">インバリアント カルチャと指定したコンテキストを使用して、指定した文字列をコンバーターの型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">変換対象の <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">変換後のテキストを表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromInvariantString(System.String)">
      <summary vsli:raw="Converts the given string to the type of this converter, using the invariant culture.">インバリアント カルチャを使用して、指定した文字列をコンバーターの型に変換します。</summary>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">変換対象の <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">変換後のテキストを表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context and culture information.">指定したコンテキストとカルチャ情報を使用して、指定したテキストをオブジェクトに変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 <see langword="null" /> を渡すと、現在のカルチャが使用されます。</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">変換対象の <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">変換後のテキストを表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.ComponentModel.ITypeDescriptorContext,System.String)">
      <summary vsli:raw="Converts the given text to an object, using the specified context.">指定したコンテキストを使用して、指定したテキストをオブジェクトに変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="text" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; to convert.">変換対象の <see cref="T:System.String" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">変換後のテキストを表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertFromString(System.String)">
      <summary vsli:raw="Converts the specified text to an object.">指定したテキストをオブジェクトに変換します。</summary>
      <param name="text" vsli:raw="The text representation of the object to convert.">変換対象のオブジェクトのテキスト形式。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The string cannot be converted into the appropriate object.">文字列を適切なオブジェクトに変換できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted text.">変換後のテキストを表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">指定したコンテキストとカルチャ情報を使用して、指定した値オブジェクトを指定した型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 <see langword="null" /> を渡すと、現在のカルチャが使用されます。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <paramref name="value" /> パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertTo(System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the arguments.">引数を使用して、指定した値オブジェクトを、指定した型に変換します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <paramref name="value" /> パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation, using the specified context.">指定したコンテキストを使用して、指定した値をインバリアント カルチャを使用した文字列形式に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToInvariantString(System.Object)">
      <summary vsli:raw="Converts the specified value to a culture-invariant string representation.">指定した値を、インバリアント カルチャを使用した文字列形式に変換します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the specified context and culture information.">指定したコンテキストとカルチャ情報を使用して、指定した値を文字列形式に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 <see langword="null" /> を渡すと、現在のカルチャが使用されます。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Converts the given value to a string representation, using the given context.">指定したコンテキストを使用して、指定した値を文字列形式に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.ConvertToString(System.Object)">
      <summary vsli:raw="Converts the specified value to a string representation.">指定した値を文字列形式に変換します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)">
      <summary vsli:raw="Re-creates an &lt;see cref=&quot;T:System.Object&quot; /&gt; given a set of property values for the object.">
        <see cref="T:System.Object" /> の一連のプロパティ値を指定して、そのオブジェクトを再作成します。</summary>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; that represents a dictionary of new property values.">新しいプロパティ値のディクショナリを表す <see cref="T:System.Collections.IDictionary" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">特定の <see cref="T:System.Collections.IDictionary" /> を表す <see cref="T:System.Object" />、またはオブジェクトを作成できない場合は <see langword="null" />。 このメソッドは常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of the type that this &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; is associated with, using the specified context, given a set of property values for the object.">この <see cref="T:System.ComponentModel.TypeConverter" /> を関連付ける型のインスタンスを作成します。指定されたコンテキストと、与えられているオブジェクトのプロパティ値のセットを使用します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of new property values.">新しいプロパティ値の <see cref="T:System.Collections.IDictionary" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the given &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created. This method always returns &lt;see langword=&quot;null&quot; /&gt;.">特定の <see cref="T:System.Collections.IDictionary" /> を表す <see cref="T:System.Object" />、またはオブジェクトを作成できない場合は <see langword="null" />。 このメソッドは常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertFromException(System.Object)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">変換を実行できないときにスローする例外を返します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">変換対象の <see cref="T:System.Object" />。オブジェクトを使用できない場合は、<see langword="null" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">このメソッドによって自動的にスローされます。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">変換を実行できなかった場合にスローされる例外を表す <see cref="T:System.Exception" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetConvertToException(System.Object,System.Type)">
      <summary vsli:raw="Returns an exception to throw when a conversion cannot be performed.">変換を実行できないときにスローする例外を返します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert, or &lt;see langword=&quot;null&quot; /&gt; if the object is not available.">変換対象の <see cref="T:System.Object" />。オブジェクトを使用できない場合は、<see langword="null" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type the conversion was trying to convert to.">変換しようとした型を表す <see cref="T:System.Type" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="Automatically thrown by this method.">このメソッドによって自動的にスローされます。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Exception&quot; /&gt; that represents the exception to throw when a conversion cannot be performed.">変換を実行できなかった場合にスローされる例外を表す <see cref="T:System.Exception" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to the &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; method to create a new value.">このオブジェクトの値を変更するときに <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> メソッドを呼び出して、新しい値を作成する必要があるかどうかを返します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトのプロパティを変更するときに <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> を呼び出して新しい値を作成する必要がある場合は <see langword="true" />、必要がない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether changing a value on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value, using the specified context.">このオブジェクトの値を変更するときに、指定したコンテキストを使用して <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> を呼び出して、新しい値を作成する必要があるかどうかを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if changing a property on this object requires a call to &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)&quot; /&gt; to create a new value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトのプロパティを変更するときに <see cref="M:System.ComponentModel.TypeConverter.CreateInstance(System.Collections.IDictionary)" /> を呼び出して新しい値を作成する必要がある場合は <see langword="true" />、必要がない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context.">指定したコンテキストを使用して、value パラメーターで指定された配列型のプロパティのコレクションを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">プロパティを取得する対象となる配列の型を指定する <see cref="T:System.Object" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">このデータ型について公開されているプロパティを持つ <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。または、プロパティがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter, using the specified context and attributes.">指定されたコンテキストと属性を使用して、値パラメーターで指定された配列型のプロパティのコレクションを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">プロパティを取得する対象となる配列の型を指定する <see cref="T:System.Object" />。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that is used as a filter.">フィルターとして使用される <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">このデータ型について公開されているプロパティを持つ <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。または、プロパティがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)">
      <summary vsli:raw="Returns a collection of properties for the type of array specified by the value parameter.">value パラメーターに指定された配列型のプロパティのコレクションを返します。</summary>
      <param name="value" vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that specifies the type of array for which to get properties.">プロパティを取得する対象となる配列の型を指定する <see cref="T:System.Object" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that are exposed for this data type, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">このデータ型について公開されているプロパティを持つ <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。または、プロパティがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported">
      <summary vsli:raw="Returns whether this object supports properties.">オブジェクトがプロパティをサポートしているかどうかを示す値を返します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトのプロパティを見つけるために <see langword="true" /> を呼び出す必要がある場合は <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports properties, using the specified context.">指定したコンテキストを使用して、このオブジェクトがプロパティをサポートするかどうかを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetProperties(System.Object)&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトのプロパティを見つけるために <see langword="true" /> を呼び出す必要がある場合は <see cref="M:System.ComponentModel.TypeConverter.GetProperties(System.Object)" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues">
      <summary vsli:raw="Returns a collection of standard values from the default context for the data type this type converter is designed for.">型コンバーターがデザインされた対象であるデータ型の既定のコンテキストから、標準値のコレクションを返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; containing a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">有効値の標準セットを格納している <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。データ型が標準値セットをサポートしていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a collection of standard values for the data type this type converter is designed for when provided with a format context.">フォーマット コンテキストが提供されている場合、この型コンバーターが対象とするデータ型の標準値のコレクションを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be &lt;see langword=&quot;null&quot; /&gt;.">書式コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。これを使用すると、このコンバーターが呼び出される環境についての追加情報を抽出できます。 このパラメーターまたはこのパラメーターのプロパティには、<see langword="null" /> を指定できます。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">正しい値の標準セットを保持する <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。データ型が標準値セットをサポートしていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list.">
        <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> から返された標準値のコレクションが、排他的なリストかどうかを示す値を返します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> から返された <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> が、有効値の排他的なリストの場合は <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />。他の値も有効である場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the collection of standard values returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exclusive list of possible values, using the specified context.">指定したコンテキストを使用して、<see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" /> から返された標準値のコレクションが有効値の排他的なリストかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; is an exhaustive list of possible values; &lt;see langword=&quot;false&quot; /&gt; if other values are possible.">
        <see langword="true" /> から返された <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> が、有効値の排他的なリストの場合は <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />。他の値も有効である場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list.">リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を返します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトがサポートしている標準値セットを見つけるために <see langword="true" /> を呼び出す必要がある場合は <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether this object supports a standard set of values that can be picked from a list, using the specified context.">指定したコンテキストを使用して、リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.ComponentModel.TypeConverter.GetStandardValues&quot; /&gt; should be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトがサポートしている標準値セットを見つけるために <see langword="true" /> を呼び出す必要がある場合は <see cref="M:System.ComponentModel.TypeConverter.GetStandardValues" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type and for the specified context.">指定した値オブジェクトが、この型に対して有効か、指定したコンテキストに対して有効かを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">有効性をテストするための <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値がこのオブジェクトに対して有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.IsValid(System.Object)">
      <summary vsli:raw="Returns whether the given value object is valid for this type.">指定した値オブジェクトが型に対して有効かどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="The object to test for validity.">有効かどうかを確認する対象のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値がこのオブジェクトに対して有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SortProperties(System.ComponentModel.PropertyDescriptorCollection,System.String[])">
      <summary vsli:raw="Sorts a collection of properties.">プロパティのコレクションを並べ替えます。</summary>
      <param name="props" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that has the properties to sort.">並べ替える対象のプロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</param>
      <param name="names" vsli:raw="An array of names in the order you want the properties to appear in the collection.">コレクション内でプロパティを並べ替える順序で並べた名前の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; that contains the sorted properties.">並べ替えられたプロパティを格納した <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor">
      <summary vsli:raw="Represents an &lt;see langword=&quot;abstract&quot; /&gt; class that provides properties for objects that do not have properties.">プロパティを持たないオブジェクトにプロパティを提供する <see langword="abstract" /> クラスを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">プロパティ記述子が関連付けられているコンポーネントの型を表す <see cref="T:System.Type" />。</param>
      <param name="name" vsli:raw="The name of the property.">プロパティの名前。</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">プロパティのデータ型を表す <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.#ctor(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.TypeConverter.SimplePropertyDescriptor" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property descriptor binds.">プロパティ記述子が関連付けられているコンポーネントの型を表す <see cref="T:System.Type" />。</param>
      <param name="name" vsli:raw="The name of the property.">プロパティの名前。</param>
      <param name="propertyType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the data type for this property.">プロパティのデータ型を表す <see cref="T:System.Type" />。</param>
      <param name="attributes" vsli:raw="An &lt;see cref=&quot;T:System.Attribute&quot; /&gt; array with the attributes to associate with the property.">プロパティに関連付ける属性を格納している <see cref="T:System.Attribute" /> 配列。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="Returns whether resetting the component changes the value of the component.">コンポーネントをリセットするとコンポーネントの値が変更されるかどうかを示す値を返します。</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">リセット機能について調べる対象のコンポーネント。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes the value of the component; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンポーネントをリセットするとコンポーネントの値が変更される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="Resets the value for this property of the component.">コンポーネントの特定のプロパティの値をリセットします。</summary>
      <param name="component" vsli:raw="The component with the property value to be reset.">リセットする対象のプロパティ値を持つコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="Returns whether the value of this property can persist.">プロパティの値を永続化できるかどうかを示す値を返します。</summary>
      <param name="component" vsli:raw="The component with the property that is to be examined for persistence.">永続性について調べる対象のプロパティを持つコンポーネント。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of the property can persist; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティの値を永続化できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.ComponentType">
      <summary vsli:raw="Gets the type of component to which this property description binds.">プロパティ記述子が関連付けられているコンポーネントの型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component to which this property binds.">プロパティが関連付けられているコンポーネントの型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this property is read-only.">プロパティが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; &lt;see langword=&quot;false&quot; /&gt; if the property is read/write.">プロパティが読み取り専用の場合は <see langword="true" />。プロパティが読み書き可能の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.SimplePropertyDescriptor.PropertyType">
      <summary vsli:raw="Gets the type of the property.">プロパティの型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of the property.">プロパティの型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeConverter.StandardValuesCollection">
      <summary vsli:raw="Represents a collection of values.">値のコレクションを表します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.#ctor(System.Collections.ICollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="values" vsli:raw="An &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that represents the objects to put into the collection.">コレクションに格納するオブジェクトを表す <see cref="T:System.Collections.ICollection" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the contents of this collection to an array.">コレクションの内容を配列にコピーします。</summary>
      <param name="array" vsli:raw="An &lt;see cref=&quot;T:System.Array&quot; /&gt; that represents the array to copy to.">コピー先の配列を表す <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index to start from.">コピーの開始位置を示すインデックス。</param>
    </member>
    <member name="M:System.ComponentModel.TypeConverter.StandardValuesCollection.GetEnumerator">
      <summary vsli:raw="Returns an enumerator for this collection.">コレクションの列挙子を返します。</summary>
      <returns vsli:raw="An enumerator of type &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt;.">
        <see cref="T:System.Collections.IEnumerator" /> 型の列挙子。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Count">
      <summary vsli:raw="Gets the number of objects in the collection.">コレクション内のオブジェクトの数を取得します。</summary>
      <returns vsli:raw="The number of objects in the collection.">コレクションに含まれる オブジェクトの数。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.Item(System.Int32)">
      <summary vsli:raw="Gets the object at the specified index number.">指定したインデックス番号にあるオブジェクトを取得します。</summary>
      <param name="index" vsli:raw="The zero-based index of the &lt;see cref=&quot;T:System.Object&quot; /&gt; to get from the collection.">コレクションから取得する <see cref="T:System.Object" /> の 0 から始まるインデックス。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; with the specified index.">指定したインデックスを持つ <see cref="T:System.Object" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.IsSynchronized&quot; /&gt;.">このメンバーの詳細については、「<see cref="P:System.Collections.ICollection.IsSynchronized" />」をご覧ください。</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">常に <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeConverter.StandardValuesCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;P:System.Collections.ICollection.SyncRoot&quot; /&gt;.">このメンバーの詳細については、「<see cref="P:System.Collections.ICollection.SyncRoot" />」をご覧ください。</summary>
      <returns vsli:raw="&lt;see langword=&quot;null&quot; /&gt; in all cases.">常に <see langword="null" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptionProvider">
      <summary vsli:raw="Provides supplemental metadata to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeDescriptor" /> に追加メタデータを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; class using a parent type description provider.">親の型説明のプロバイダーを使用して、<see cref="T:System.ComponentModel.TypeDescriptionProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parent" vsli:raw="The parent type description provider.">親の型説明のプロバイダー。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">別のデータ型の代わりに使用できるオブジェクトを作成します。</summary>
      <param name="provider" vsli:raw="An optional service provider.">省略可能なサービス プロバイダー。</param>
      <param name="objectType" vsli:raw="The type of object to create. This parameter is never &lt;see langword=&quot;null&quot; /&gt;.">作成するオブジェクトの型です。 このパラメーターは、<see langword="null" /> にはできません。</param>
      <param name="argTypes" vsli:raw="An optional array of types that represent the parameter types to be passed to the object's constructor. This array can be &lt;see langword=&quot;null&quot; /&gt; or of zero length.">オブジェクトのコンストラクターに渡されるパラメーター型を表す型の配列 (省略可能)。 この配列は、<see langword="null" /> にすることも、長さ 0 にすることもできます。</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor.">オブジェクトのコンストラクターに渡すパラメーターの値の省略可能な配列。</param>
      <returns vsli:raw="The substitute &lt;see cref=&quot;T:System.Object&quot; /&gt;.">代替の <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)">
      <summary vsli:raw="Gets a per-object cache, accessed as an &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; of key/value pairs.">キーと値のペアの <see cref="T:System.Collections.IDictionary" /> としてアクセスされる、オブジェクトごとのキャッシュを取得します。</summary>
      <param name="instance" vsli:raw="The object for which to get the cache.">キャッシュの取得対象となるオブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; if the provided object supports caching; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">提供されるオブジェクトがキャッシュをサポートしている場合は <see cref="T:System.Collections.IDictionary" />。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets an extended custom type descriptor for the given object.">指定されたオブジェクトの拡張されたカスタムの型記述子を取得します。</summary>
      <param name="instance" vsli:raw="The object for which to get the extended type descriptor.">拡張された型記述子の取得対象となるオブジェクト。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide extended metadata for the object.">オブジェクトの拡張されたメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)">
      <summary vsli:raw="Gets the extender providers for the specified object.">指定したオブジェクトの拡張プロバイダーを取得します。</summary>
      <param name="instance" vsli:raw="The object to get extender providers for.">拡張プロバイダーを取得する対象のオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="An array of extender providers for &lt;paramref name=&quot;instance&quot; /&gt;.">
        <paramref name="instance" /> の拡張プロバイダーの配列。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)">
      <summary vsli:raw="Gets the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">指定したコンポーネントの名前を取得します。コンポーネントに名前がない場合は <see langword="null" /> を取得します。</summary>
      <param name="component" vsli:raw="The specified component.">指定したコンポーネント。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The name of the specified component.">指定したコンポーネントの名前。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object.">指定されたオブジェクトに対して通常のリフレクションを実行します。</summary>
      <param name="instance" vsli:raw="An instance of the type (should not be &lt;see langword=&quot;null&quot; /&gt;).">型のインスタンス (<see langword="null" /> にはできません)。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;instance&quot; /&gt;.">この <paramref name="instance" /> のリフレクションの型です。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)">
      <summary vsli:raw="Performs normal reflection against a type.">型に対して通常のリフレクションを実行します。</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">
        <see cref="T:System.Reflection.IReflect" /> の取得対象となるオブジェクトの型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">この <paramref name="objectType" /> のリフレクションの型です。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)">
      <summary vsli:raw="Performs normal reflection against the given object with the given type.">指定された型の指定されたオブジェクトに対して通常のリフレクションを実行します。</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the &lt;see cref=&quot;T:System.Reflection.IReflect&quot; /&gt;.">
        <see cref="T:System.Reflection.IReflect" /> の取得対象となるオブジェクトの型。</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt;.">型のインスタンス。 <see langword="null" /> の可能性があります。</param>
      <returns vsli:raw="The type of reflection for this &lt;paramref name=&quot;objectType&quot; /&gt;.">この <paramref name="objectType" /> のリフレクションの型です。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)">
      <summary vsli:raw="Converts a reflection type into a runtime type.">リフレクション型をランタイム型に変換します。</summary>
      <param name="reflectionType" vsli:raw="The type to convert to its runtime equivalent.">等価のランタイム型に変換する型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;reflectionType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="reflectionType" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the runtime equivalent of &lt;paramref name=&quot;reflectionType&quot; /&gt;.">
        <paramref name="reflectionType" /> に等価のランタイム型を表す <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given object.">指定されたオブジェクトのカスタムの型記述子を取得します。</summary>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">型のインスタンス。 <see cref="T:System.ComponentModel.TypeDescriptor" /> にインスタンスが渡されなかった場合、<see langword="null" /> でもかまいません。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">型のメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)">
      <summary vsli:raw="Gets a custom type descriptor for the given type.">指定された型のカスタムの型記述子を取得します。</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">型記述子の取得対象となるオブジェクトの型。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">型のメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)">
      <summary vsli:raw="Gets a custom type descriptor for the given type and object.">指定された型およびオブジェクトのカスタムの型記述子を取得します。</summary>
      <param name="objectType" vsli:raw="The type of object for which to retrieve the type descriptor.">型記述子の取得対象となるオブジェクトの型。</param>
      <param name="instance" vsli:raw="An instance of the type. Can be &lt;see langword=&quot;null&quot; /&gt; if no instance was passed to the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">型のインスタンス。 <see cref="T:System.ComponentModel.TypeDescriptor" /> にインスタンスが渡されなかった場合、<see langword="null" /> でもかまいません。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt; that can provide metadata for the type.">型のメタデータを提供できる <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether the specified type is compatible with the type description and its chain of type description providers.">指定した型が型説明および型説明のプロバイダーのチェーンと互換性があるかどうかを示す値を取得します。</summary>
      <param name="type" vsli:raw="The type to test for compatibility.">互換性をテストする型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;type&quot; /&gt; is compatible with the type description and its chain of type description providers; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="type" /> が型説明および型説明のプロバイダーのチェーンと互換性がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeDescriptor">
      <summary vsli:raw="Provides information about the characteristics for a component, such as its attributes, properties, and events. This class cannot be inherited.">属性、プロパティ、イベントなど、コンポーネントの特性に関する情報を提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="E:System.ComponentModel.TypeDescriptor.Refreshed">
      <summary vsli:raw="Occurs when the cache for a component is cleared.">コンポーネントのキャッシュが消去されると発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Object,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component instance.">対象コンポーネントのインスタンスにクラス レベルの属性を追加します。</summary>
      <param name="instance" vsli:raw="An instance of the target component.">対象コンポーネントのインスタンス。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">コンポーネントのクラスに追加する <see cref="T:System.Attribute" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">一方または両方のパラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">指定された属性の追加に使用された、新しく作成された <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddAttributes(System.Type,System.Attribute[])">
      <summary vsli:raw="Adds class-level attributes to the target component type.">対象コンポーネントの型にクラス レベルの属性を追加します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects to add to the component's class.">コンポーネントのクラスに追加する <see cref="T:System.Attribute" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters is &lt;see langword=&quot;null&quot; /&gt;.">一方または両方のパラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; that was used to add the specified attributes.">指定された属性の追加に使用された、新しく作成された <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddEditorTable(System.Type,System.Collections.Hashtable)">
      <summary vsli:raw="Adds an editor table for the given editor base type.">指定されたエディターの基本型のエディター テーブルを追加します。</summary>
      <param name="editorBaseType" vsli:raw="The editor base type to add the editor table for. If a table already exists for this type, this method will do nothing.">エディター テーブルを追加する対象のエディター基本型。 この型のテーブルが既存の場合、このメソッドは何もしません。</param>
      <param name="table" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Hashtable&quot; /&gt; to add.">追加する <see cref="T:System.Collections.Hashtable" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">コンポーネントの単一インスタンスの型説明の提供元を追加します。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">追加する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance" vsli:raw="An instance of the target component.">対象コンポーネントのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">コンポーネント クラスの型説明プロバイダーを追加します。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">追加する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Adds a type description provider for a single instance of a component.">コンポーネントの単一インスタンスの型説明の提供元を追加します。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">追加する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance" vsli:raw="An instance of the target component.">対象コンポーネントのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.AddProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Adds a type description provider for a component class.">コンポーネント クラスの型説明プロバイダーを追加します。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to add.">追加する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateAssociation(System.Object,System.Object)">
      <summary vsli:raw="Creates a primary-secondary association between two objects.">2 つのオブジェクトの間のプライマリとセカンダリの関連付けを作成します。</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">プライマリ <see cref="T:System.Object" />。</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">セカンダリ <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">一方または両方のパラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is equal to &lt;paramref name=&quot;secondary&quot; /&gt;.">
        <paramref name="primary" /> と <paramref name="secondary" /> が等価です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateDesigner(System.ComponentModel.IComponent,System.Type)">
      <summary vsli:raw="Creates an instance of the designer associated with the specified component and of the specified type of designer.">指定したコンポーネントに関連するデザイナーおよび指定した型のデザイナーのインスタンスを作成します。</summary>
      <param name="component" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComponent&quot; /&gt; that specifies the component to associate with the designer.">デザイナーに関連付けるコンポーネントを指定する <see cref="T:System.ComponentModel.IComponent" />。</param>
      <param name="designerBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of designer to create.">作成するデザイナーの型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.Design.IDesigner&quot; /&gt; that is an instance of the designer for the component, or &lt;see langword=&quot;null&quot; /&gt; if no designer can be found.">コンポーネントのデザイナーのインスタンスである <see cref="T:System.ComponentModel.Design.IDesigner" />。デザイナーが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.ComponentModel.EventDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor, when passed the existing &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt;.">既存の <see cref="T:System.ComponentModel.EventDescriptor" /> が渡された場合、既存のイベント記述子と同じである新しいイベント記述子を作成します。</summary>
      <param name="componentType" vsli:raw="The type of the component for which to create the new event.">新しいイベントを作成する対象のコンポーネントの種類。</param>
      <param name="oldEventDescriptor" vsli:raw="The existing event information.">既存のイベント情報。</param>
      <param name="attributes" vsli:raw="The new attributes.">新しい属性。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that has merged the specified metadata attributes with the existing metadata attributes.">指定されたメタデータ属性と既存のメタデータ属性をマージした新しい <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateEvent(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates a new event descriptor that is identical to an existing event descriptor by dynamically generating descriptor information from a specified event on a type.">型で指定したイベントから記述子情報を動的に生成することによって既存のイベント記述子と同じになる新しいイベント記述子を作成します。</summary>
      <param name="componentType" vsli:raw="The type of the component the event lives on.">イベントが存在するコンポーネントの型。</param>
      <param name="name" vsli:raw="The name of the event.">イベントの名前です。</param>
      <param name="type" vsli:raw="The type of the delegate that handles the event.">イベントを処理するデリゲートの型。</param>
      <param name="attributes" vsli:raw="The attributes for this event.">このイベントの属性。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; that is bound to a type.">型にバインドされている <see cref="T:System.ComponentModel.EventDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])">
      <summary vsli:raw="Creates an object that can substitute for another data type.">別のデータ型の代わりに使用できるオブジェクトを作成します。</summary>
      <param name="provider" vsli:raw="The service provider that provides a &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; service. This parameter can be &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> サービスを提供するサービス プロバイダー。 このパラメーターは、<see langword="null" /> に設定できます。</param>
      <param name="objectType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of object to create.">作成するオブジェクトの <see cref="T:System.Type" />。</param>
      <param name="argTypes" vsli:raw="An optional array of parameter types to be passed to the object's constructor. This parameter can be &lt;see langword=&quot;null&quot; /&gt; or an array of zero length.">オブジェクトのコンストラクターに渡されるパラメーターの型の省略可能な配列。 このパラメーターには <see langword="null" /> か、長さがゼロの配列を設定することができます。</param>
      <param name="args" vsli:raw="An optional array of parameter values to pass to the object's constructor. If not &lt;see langword=&quot;null&quot; /&gt;, the number of elements must be the same as &lt;paramref name=&quot;argTypes&quot; /&gt;.">オブジェクトのコンストラクターに渡すパラメーターの値の省略可能な配列。 <see langword="null" /> でない場合、要素の数は <paramref name="argTypes" /> と同じでなければなりません。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;objectType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, or &lt;paramref name=&quot;args&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; when &lt;paramref name=&quot;argTypes&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="objectType" /> は <see langword="null" /> です。<paramref name="argTypes" /> が <see langword="null" /> でない場合、<paramref name="args" /> は <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;argTypes&quot; /&gt; and &lt;paramref name=&quot;args&quot; /&gt; have different number of elements.">
        <paramref name="argTypes" /> と <paramref name="args" /> の要素数が異なります。</exception>
      <returns vsli:raw="An instance of the substitute data type if an associated &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; is found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">関連付けられた <see cref="T:System.ComponentModel.TypeDescriptionProvider" /> が検出される場合は代替のデータ型のインスタンス。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.ComponentModel.PropertyDescriptor,System.Attribute[])">
      <summary vsli:raw="Creates a new property descriptor from an existing property descriptor, using the specified existing &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; and attribute array.">指定された既存の <see cref="T:System.ComponentModel.PropertyDescriptor" /> と属性の配列を指定を使用して、既存のプロパティ記述子から新しいプロパティ記述子を作成します。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">プロパティのメンバーであるコンポーネントの <see cref="T:System.Type" />。</param>
      <param name="oldPropertyDescriptor" vsli:raw="The existing property descriptor.">既存のプロパティ記述子。</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">このプロパティの新しい属性。</param>
      <returns vsli:raw="A new &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that has the specified metadata attributes merged with the existing metadata attributes.">既存のメタデータ属性とマージされた指定されたメタデータ属性を持つ新しい <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.CreateProperty(System.Type,System.String,System.Type,System.Attribute[])">
      <summary vsli:raw="Creates and dynamically binds a property descriptor to a type, using the specified property name, type, and attribute array.">指定したプロパティ名、型、属性の配列を使用して、プロパティ記述子を作成し、型に動的にバインドします。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the component that the property is a member of.">プロパティのメンバーであるコンポーネントの <see cref="T:System.Type" />。</param>
      <param name="name" vsli:raw="The name of the property.">プロパティの名前。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the property.">プロパティの <see cref="T:System.Type" /> です。</param>
      <param name="attributes" vsli:raw="The new attributes for this property.">このプロパティの新しい属性。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that is bound to the specified type and that has the specified metadata attributes merged with the existing metadata attributes.">既存のメタデータ属性とマージされた指定されたメタデータ属性を持つ、指定された型にバインドされた <see cref="T:System.ComponentModel.PropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAssociation(System.Type,System.Object)">
      <summary vsli:raw="Returns an instance of the type associated with the specified primary object.">指定されたプライマリ オブジェクトに関連付けられている型のインスタンスを返します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <param name="primary" vsli:raw="The primary object of the association.">関連付けのプライマリ オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">一方または両方のパラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="An instance of the secondary type that has been associated with the primary object if an association exists; otherwise, &lt;paramref name=&quot;primary&quot; /&gt; if no specified association exists.">関連付けが存在する場合は、プライマリ オブジェクトに関連付けられているセカンダリの型のインスタンス。それ以外で、関連付けが指定されていない場合は、<paramref name="primary" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object)">
      <summary vsli:raw="Returns the collection of attributes for the specified component.">指定されたコンポーネントの属性のコレクションを返します。</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">属性を取得するコンポーネント。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; containing the attributes for the component. If &lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">コンポーネントの属性を格納している <see cref="T:System.ComponentModel.AttributeCollection" />。 <paramref name="component" /> が <see langword="null" /> の場合、このメソッドは空のコレクションを返します。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a collection of attributes for the specified component and a Boolean indicating that a custom type descriptor has been created.">指定されたコンポーネントの属性のコレクション、およびカスタム型記述子が作成されたことを示すブール値を返します。</summary>
      <param name="component" vsli:raw="The component for which you want to get attributes.">属性を取得するコンポーネント。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to use a baseline set of attributes from the custom type descriptor if &lt;paramref name=&quot;component&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.ICustomTypeDescriptor&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="component" /> が <see cref="T:System.ComponentModel.ICustomTypeDescriptor" /> 型であるときにカスタム型記述子の基準となる属性セットを使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">コンポーネントの属性を使用する <see cref="T:System.ComponentModel.AttributeCollection" />。 コンポーネントが <see langword="null" /> の場合、このメソッドは空のコレクションを返します。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetAttributes(System.Type)">
      <summary vsli:raw="Returns a collection of attributes for the specified type of component.">指定されたコンポーネントの型の属性のコレクションを返します。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; with the attributes for the type of the component. If the component is &lt;see langword=&quot;null&quot; /&gt;, this method returns an empty collection.">このコンポーネントの型の属性を持つ <see cref="T:System.ComponentModel.AttributeCollection" />。 コンポーネントが <see langword="null" /> の場合、このメソッドは空のコレクションを返します。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object)">
      <summary vsli:raw="Returns the name of the class for the specified component using the default type descriptor.">既定の型記述子を使用して、指定されたコンポーネントのクラスの名前を返します。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">必要なクラス名に対応する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">指定したコンポーネントのクラス名を含む <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the class for the specified component using a custom type descriptor.">カスタムの型記述子を使用して、指定されたコンポーネントのクラスの名前を返します。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">必要なクラス名に対応する <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">カスタム型説明情報を検討する <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component.">指定したコンポーネントのクラス名を含む <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetClassName(System.Type)">
      <summary vsli:raw="Returns the name of the class for the specified type.">指定した型のクラス名を返します。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the class for the specified component type.">指定したコンポーネント型のクラス名を含む <see cref="T:System.String" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object)">
      <summary vsli:raw="Returns the name of the specified component using the default type descriptor.">既定の型記述子を使用して、指定されたコンポーネントの名前を返します。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">必要なクラス名に対応する <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">指定したコンポーネントの名前を内容とする <see cref="T:System.String" />。コンポーネント名が存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetComponentName(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the name of the specified component using a custom type descriptor.">カスタムの型記述子を使用して、指定されたコンポーネントの名前を返します。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; for which you want the class name.">必要なクラス名に対応する <see cref="T:System.Object" />。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">カスタム型説明情報を検討する <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="The name of the class for the specified component, or &lt;see langword=&quot;null&quot; /&gt; if there is no component name.">指定したコンポーネントのクラスの名前、またはコンポーネント名が存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object)">
      <summary vsli:raw="Returns a type converter for the type of the specified component.">指定したコンポーネントの型の型コンバーターを返します。</summary>
      <param name="component" vsli:raw="A component to get the converter for.">コンバーターを取得する対象のコンポーネント。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">指定されたコンポーネントの <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Object,System.Boolean)">
      <summary vsli:raw="Returns a type converter for the type of the specified component with a custom type descriptor.">カスタム型記述子を使用して、指定されたコンポーネントの型の型コンバーターを返します。</summary>
      <param name="component" vsli:raw="A component to get the converter for.">コンバーターを取得する対象のコンポーネント。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">カスタム型説明情報を検討する <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified component.">指定されたコンポーネントの <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetConverter(System.Type)">
      <summary vsli:raw="Returns a type converter for the specified type.">指定した型の型コンバーターを返します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">指定した型の <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object)">
      <summary vsli:raw="Returns the default event for the specified component.">指定したコンポーネントの既定のイベントを返します。</summary>
      <param name="component" vsli:raw="The component to get the event for.">取得するイベントの対象のコンポーネント。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">既定のイベントを伴う <see cref="T:System.ComponentModel.EventDescriptor" />。イベントがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default event for a component with a custom type descriptor.">カスタム型記述子を使用して、コンポーネントの既定のイベントを返します。</summary>
      <param name="component" vsli:raw="The component to get the event for.">取得するイベントの対象のコンポーネント。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">カスタム型説明情報を検討する <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">既定のイベントを伴う <see cref="T:System.ComponentModel.EventDescriptor" />。イベントがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultEvent(System.Type)">
      <summary vsli:raw="Returns the default event for the specified type of component.">指定した型のコンポーネントの既定のイベントを返します。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;componentType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="componentType" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptor&quot; /&gt; with the default event, or &lt;see langword=&quot;null&quot; /&gt; if there are no events.">既定のイベントを伴う <see cref="T:System.ComponentModel.EventDescriptor" />。イベントがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object)">
      <summary vsli:raw="Returns the default property for the specified component.">指定したコンポーネントの既定のプロパティを返します。</summary>
      <param name="component" vsli:raw="The component to get the default property for.">既定のプロパティを取得するコンポーネント。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">既定のプロパティがある場合は <see cref="T:System.ComponentModel.PropertyDescriptor" />。プロパティがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the default property for the specified component with a custom type descriptor.">カスタム型記述子を使用して、指定したコンポーネントの既定のプロパティを返します。</summary>
      <param name="component" vsli:raw="The component to get the default property for.">既定のプロパティを取得するコンポーネント。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">カスタム型説明情報を検討する <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">既定のプロパティがある場合は <see cref="T:System.ComponentModel.PropertyDescriptor" />。プロパティがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetDefaultProperty(System.Type)">
      <summary vsli:raw="Returns the default property for the specified type of component.">指定した型のコンポーネントの既定のプロパティを返します。</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the class to get the property for.">取得したプロパティの適用先となるクラスを表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; with the default property, or &lt;see langword=&quot;null&quot; /&gt; if there are no properties.">既定のプロパティがある場合は <see cref="T:System.ComponentModel.PropertyDescriptor" />。プロパティがない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type)">
      <summary vsli:raw="Gets an editor with the specified base type for the specified component.">指定した基本型を持ち、指定したコンポーネントで使用されるエディターを取得します。</summary>
      <param name="component" vsli:raw="The component to get the editor for.">取得するエディターの対象のコンポーネント。</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">検索するエディターの基本型を表す <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> または <paramref name="editorBaseType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">指定したエディターの型にキャストできるエディターのインスタンス。要求された型のエディターが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Object,System.Type,System.Boolean)">
      <summary vsli:raw="Returns an editor with the specified base type and with a custom type descriptor for the specified component.">指定したコンポーネント用のカスタムの型記述子が関連付けられている、指定した基本データ型のエディターを返します。</summary>
      <param name="component" vsli:raw="The component to get the editor for.">取得するエディターの対象のコンポーネント。</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you want to find.">検索するエディターの基本型を表す <see cref="T:System.Type" />。</param>
      <param name="noCustomTypeDesc" vsli:raw="A flag indicating whether custom type description information should be considered.">カスタムの型の記述情報を考慮する必要があるかどうかを示すフラグ。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> または <paramref name="editorBaseType" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="An instance of the editor that can be cast to the specified editor type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">指定したエディターの型にキャストできるエディターのインスタンス。要求された型のエディターが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEditor(System.Type,System.Type)">
      <summary vsli:raw="Returns an editor with the specified base type for the specified type.">指定した基本型を持つ、指定した型に関するエディターを返します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <param name="editorBaseType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the base type of the editor you are trying to find.">検索を試みているエディターの基本型を表わす <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; or &lt;paramref name=&quot;editorBaseType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> または <paramref name="editorBaseType" /> が <see langword="null" /> です。</exception>
      <returns vsli:raw="An instance of the editor object that can be cast to the given base type, or &lt;see langword=&quot;null&quot; /&gt; if no editor of the requested type can be found.">指定した基本型にキャストできるエディター オブジェクトのインスタンス。要求された型のエディターが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object)">
      <summary vsli:raw="Returns the collection of events for the specified component.">指定されたコンポーネントのイベントのコレクションを返します。</summary>
      <param name="component" vsli:raw="A component to get the events for.">イベントを取得する対象のコンポーネント。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">このコンポーネントのイベントを伴う <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter.">指定された属性配列をフィルターとして使用して、指定されたコンポーネントのイベント コレクションを返します。</summary>
      <param name="component" vsli:raw="A component to get the events for.">イベントを取得する対象のコンポーネント。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">フィルターとして使用できる <see cref="T:System.Attribute" /> 型の配列。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">このコンポーネントの指定した属性と一致するイベントを持つ <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">指定された属性配列をフィルターとして使用し、カスタム型記述子を使用して、指定されたコンポーネントのイベントのコレクションを返します。</summary>
      <param name="component" vsli:raw="A component to get the events for.">イベントを取得する対象のコンポーネント。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">フィルターとして使用する型 <see cref="T:System.Attribute" /> の配列。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">カスタム型説明情報を検討する <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">このコンポーネントの指定した属性と一致するイベントを持つ <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of events for a specified component with a custom type descriptor.">カスタム型記述子を持つ、指定されたコンポーネントのイベントのコレクションを返します。</summary>
      <param name="component" vsli:raw="A component to get the events for.">イベントを取得する対象のコンポーネント。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">カスタム型説明情報を検討する <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">このコンポーネントのイベントを伴う <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type)">
      <summary vsli:raw="Returns the collection of events for a specified type of component.">指定されたコンポーネント型のイベントのコレクションを返します。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events for this component.">このコンポーネントのイベントを伴う <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetEvents(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of events for a specified type of component using a specified array of attributes as a filter.">指定された属性配列をフィルターとして使用して、指定されたコンポーネント型のイベント コレクションを返します。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; that you can use as a filter.">フィルターとして使用できる <see cref="T:System.Attribute" /> 型の配列。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.EventDescriptorCollection&quot; /&gt; with the events that match the specified attributes for this component.">このコンポーネントの指定した属性と一致するイベントを持つ <see cref="T:System.ComponentModel.EventDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetFullComponentName(System.Object)">
      <summary vsli:raw="Returns the fully qualified name of the component.">コンポーネントの完全修飾名を返します。</summary>
      <param name="component" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.Component&quot; /&gt; to find the name for.">名前を検索する <see cref="T:System.ComponentModel.Component" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="component" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The fully qualified name of the specified component, or &lt;see langword=&quot;null&quot; /&gt; if the component has no name.">指定されたコンポーネントの完全修飾名。コンポーネントに名前がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)">
      <summary vsli:raw="Returns the collection of properties for a specified component.">指定されたコンポーネントのプロパティのコレクションを返します。</summary>
      <param name="component" vsli:raw="A component to get the properties for.">プロパティを取得する対象のコンポーネント。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for the specified component.">指定されたコンポーネントのプロパティを持つ <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter.">指定された属性配列をフィルターとして使用して、指定されたコンポーネントのプロパティのコレクションを返します。</summary>
      <param name="component" vsli:raw="A component to get the properties for.">プロパティを取得する対象のコンポーネント。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">フィルターとして使用する型 <see cref="T:System.Attribute" /> の配列。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">指定のコンポーネントの指定した属性と一致するプロパティを持つ <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Attribute[],System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using a specified array of attributes as a filter and using a custom type descriptor.">指定された属性配列をフィルターとして使用し、カスタム型記述子を使用して、指定されたコンポーネントのプロパティのコレクションを返します。</summary>
      <param name="component" vsli:raw="A component to get the properties for.">プロパティを取得する対象のコンポーネント。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">フィルターとして使用する型 <see cref="T:System.Attribute" /> の配列。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">カスタム型説明情報を検討する <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the events that match the specified attributes for the specified component.">指定のコンポーネントの指定した属性と一致するイベントを持つ <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object,System.Boolean)">
      <summary vsli:raw="Returns the collection of properties for a specified component using the default type descriptor.">既定の型記述子を使用して、指定されたコンポーネントのプロパティのコレクションを返します。</summary>
      <param name="component" vsli:raw="A component to get the properties for.">プロパティを取得する対象のコンポーネント。</param>
      <param name="noCustomTypeDesc" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to not consider custom type description information; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">カスタム型の説明情報を検討しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;component&quot; /&gt; is a cross-process remoted object.">
        <paramref name="component" /> はプロセス間リモート オブジェクトです。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified component.">指定されたコンポーネントのプロパティを持つ <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type)">
      <summary vsli:raw="Returns the collection of properties for a specified type of component.">指定された型のコンポーネントのプロパティ コレクションを返します。</summary>
      <param name="componentType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the component to get properties for.">プロパティを取得する対象のコンポーネントを表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties for a specified type of component.">指定された型のコンポーネントのプロパティを格納する <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Type,System.Attribute[])">
      <summary vsli:raw="Returns the collection of properties for a specified type of component using a specified array of attributes as a filter.">指定された属性配列をフィルターとして使用して、指定されたコンポーネント型のプロパティのコレクションを返します。</summary>
      <param name="componentType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <param name="attributes" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">フィルターとして使用する型 <see cref="T:System.Attribute" /> の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for this type of component.">この型のコンポーネントの指定された属性に一致するプロパティを伴う <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Object)">
      <summary vsli:raw="Returns the type description provider for the specified component.">指定されたコンポーネントの型説明プロバイダーを返します。</summary>
      <param name="instance" vsli:raw="An instance of the target component.">対象コンポーネントのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified component.">指定されたコンポーネントに関連付けられた <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetProvider(System.Type)">
      <summary vsli:raw="Returns the type description provider for the specified type.">指定した型の型説明プロバイダーを返します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; associated with the specified type.">指定した型に関連付けられた <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Object)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given an object.">特定のオブジェクトについて、リフレクションを実行するために使用できる <see cref="T:System.Type" /> を返します。</summary>
      <param name="instance" vsli:raw="An instance of the target component.">対象コンポーネントのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;instance&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="instance" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; for the specified object.">指定されたオブジェクトの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.GetReflectionType(System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; that can be used to perform reflection, given a class type.">クラス型で指定された、リフレクションを実行するために使用できる <see cref="T:System.Type" /> を返します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; of the specified class.">指定したクラスの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Object)">
      <summary vsli:raw="Clears the properties and events for the specified component from the cache.">指定されたコンポーネントのプロパティとイベントをキャッシュからクリアします。</summary>
      <param name="component" vsli:raw="A component for which the properties or events have changed.">プロパティまたはイベントが変更されているコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Assembly)">
      <summary vsli:raw="Clears the properties and events for the specified assembly from the cache.">指定されたアセンブリのプロパティとイベントをキャッシュからクリアします。</summary>
      <param name="assembly" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that represents the assembly to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this assembly will be refreshed.">更新するアセンブリを表す <see cref="T:System.Reflection.Assembly" />。 このアセンブリの各 <see cref="T:System.Type" /> が更新されます。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Reflection.Module)">
      <summary vsli:raw="Clears the properties and events for the specified module from the cache.">指定されたモジュールのプロパティとイベントをキャッシュからクリアします。</summary>
      <param name="module" vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the module to refresh. Each &lt;see cref=&quot;T:System.Type&quot; /&gt; in this module will be refreshed.">更新するモジュールを表す <see cref="T:System.Reflection.Module" />。 このモジュールの各 <see cref="T:System.Type" /> が更新されます。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.Refresh(System.Type)">
      <summary vsli:raw="Clears the properties and events for the specified type of component from the cache.">コンポーネントの指定された型のプロパティとイベントをキャッシュからクリアします。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociation(System.Object,System.Object)">
      <summary vsli:raw="Removes an association between two objects.">2 つのオブジェクトの間の関連付けを削除します。</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">プライマリ <see cref="T:System.Object" />。</param>
      <param name="secondary" vsli:raw="The secondary &lt;see cref=&quot;T:System.Object&quot; /&gt;.">セカンダリ <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveAssociations(System.Object)">
      <summary vsli:raw="Removes all associations for a primary object.">プライマリ オブジェクトのすべての関連付けを削除します。</summary>
      <param name="primary" vsli:raw="The primary &lt;see cref=&quot;T:System.Object&quot; /&gt; in an association.">関連付けのプライマリ <see cref="T:System.Object" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;primary&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="primary" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">指定したオブジェクトに関連付けられている、以前に追加された型説明プロバイダーを削除します。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">削除する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance" vsli:raw="An instance of the target component.">対象コンポーネントのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProvider(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">指定した型に関連付けられている、以前に追加された型説明プロバイダーを削除します。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">削除する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Object)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified object.">指定したオブジェクトに関連付けられている、以前に追加された型説明プロバイダーを削除します。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">削除する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="instance" vsli:raw="An instance of the target component.">対象コンポーネントのインスタンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.RemoveProviderTransparent(System.ComponentModel.TypeDescriptionProvider,System.Type)">
      <summary vsli:raw="Removes a previously added type description provider that is associated with the specified type.">指定した型に関連付けられている、以前に追加された型説明プロバイダーを削除します。</summary>
      <param name="provider" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptionProvider&quot; /&gt; to remove.">削除する <see cref="T:System.ComponentModel.TypeDescriptionProvider" />。</param>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the target component.">対象コンポーネントの <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or both of the parameters are &lt;see langword=&quot;null&quot; /&gt;.">一方または両方のパラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.ComponentModel.TypeDescriptor.SortDescriptorArray(System.Collections.IList)">
      <summary vsli:raw="Sorts descriptors using the name of the descriptor.">記述子の名前を使用して、記述子を並べ替えます。</summary>
      <param name="infos" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; that contains the descriptors to sort.">並べ替える記述子が含まれている <see cref="T:System.Collections.IList" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;infos&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="infos" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComNativeDescriptorHandler">
      <summary vsli:raw="Gets or sets the provider for the Component Object Model (COM) type information for the target component.">ターゲット コンポーネントの Component Object Model (COM) 型情報のプロバイダーを取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.IComNativeDescriptorHandler&quot; /&gt; instance representing the COM type information provider.">COM 型情報プロバイダーを表す <see cref="T:System.ComponentModel.IComNativeDescriptorHandler" /> インスタンス。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.ComObjectType">
      <summary vsli:raw="Gets the type of the Component Object Model (COM) object represented by the target component.">対象となるコンポーネントによって表されるコンポーネント オブジェクト モデル (COM) の型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the COM object represented by this component, or &lt;see langword=&quot;null&quot; /&gt; for non-COM objects.">このコンポーネントによって表される COM オブジェクトの <see cref="T:System.Type" />。COM 以外のオブジェクトの場合 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.TypeDescriptor.InterfaceType">
      <summary vsli:raw="Gets a type that represents a type description provider for all interface types.">すべてのインターフェイスの種類について型説明のプロバイダーを表す型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents a custom type description provider for all interface types.">すべてのインターフェイスの種類についてカスタム型説明のプロバイダーを表す <see cref="T:System.Type" /> を取得します。</returns>
    </member>
    <member name="T:System.ComponentModel.TypeListConverter">
      <summary vsli:raw="Provides a type converter that can be used to populate a list box with available types.">利用可能な型でリスト ボックスの内容を設定するために使用できる型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.#ctor(System.Type[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.TypeListConverter&quot; /&gt; class using the type array as the available types.">使用可能な型として型の配列を使用して、<see cref="T:System.ComponentModel.TypeListConverter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="types" vsli:raw="The array of type &lt;see cref=&quot;T:System.Type&quot; /&gt; to use as the available types.">使用可能な型として使用する <see cref="T:System.Type" /> 型の配列。</param>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object using the given context.">このコンバーターが、特定のコンテキストを使用してソース オブジェクトの特定の <see cref="T:System.Type" /> を変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source object.">ソース オブジェクトの <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the native type of the converter.">指定したオブジェクトをコンバーターのネイティブな型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture used to represent the font.">フォントを表すときに使用するカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified destination type.">値オブジェクトを目的の型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="An optional &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If not supplied, the current culture is assumed.">オプションの <see cref="T:System.Globalization.CultureInfo" />。 指定されなかった場合は、現在のカルチャが使用されます。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value to.">値の変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt;.">変換後の <paramref name="value" /> を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a collection of standard values for the data type this validator is designed for.">検証コントロールがデザインされた対象のデータ型の標準値のコレクションを取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; that holds a standard set of valid values, or &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">正しい値の標準セットを保持する <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" />。データ型が標準値セットをサポートしていない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether the list of standard values returned from the &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; method is an exclusive list.">
        <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> メソッドから返された標準値のリストが、排他的リストかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because the &lt;see cref=&quot;T:System.ComponentModel.TypeConverter.StandardValuesCollection&quot; /&gt; returned from &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; is an exhaustive list of possible values. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> から返された <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> が有効値の排他的リストであるため、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="M:System.ComponentModel.TypeListConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Gets a value indicating whether this object supports a standard set of values that can be picked from a list using the specified context.">指定したコンテキストを使用して、リストから選択できる標準値セットをオブジェクトがサポートするかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; because &lt;see cref=&quot;M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)&quot; /&gt; should be called to find a common set of values the object supports. This method never returns &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトがサポートしている標準値セットを見つけるために <see cref="M:System.ComponentModel.TypeListConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> を呼び出す必要があるので、<see langword="true" />。 このメソッドが <see langword="false" /> を返すことはありません。</returns>
    </member>
    <member name="T:System.ComponentModel.UInt16Converter">
      <summary vsli:raw="Provides a type converter to convert 16-bit unsigned integer objects to and from other representations.">16 ビット符号なし整数オブジェクトから他のさまざまな表現への変換や、その逆の変換を実行する型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt16Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt16Converter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.UInt16Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt32Converter">
      <summary vsli:raw="Provides a type converter to convert 32-bit unsigned integer objects to and from various other representations.">32 ビット符号なし整数オブジェクトから他のさまざまな表現への変換や、その逆の変換を実行する型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt32Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt32Converter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.UInt32Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.UInt64Converter">
      <summary vsli:raw="Provides a type converter to convert 64-bit unsigned integer objects to and from other representations.">64 ビット符号なし整数オブジェクトのほかの表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.UInt64Converter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.UInt64Converter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.UInt64Converter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.ComponentModel.VersionConverter">
      <summary vsli:raw="Provides a type converter to convert &lt;see cref=&quot;T:System.Version&quot; /&gt; objects to and from various other representations.">
        <see cref="T:System.Version" /> 型オブジェクトのさまざまな表現への変換や、その逆の変換を行う型コンバーターを提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.VersionConverter&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.VersionConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object in the given source type to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">このコンバーターが、特定の変換元の型のオブジェクトを <see cref="T:System.Version" /> に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">コンテキスト情報を提供するオブジェクト。</param>
      <param name="sourceType" vsli:raw="The type of the object to be converted.">変換するオブジェクトの型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can convert sourceType to a &lt;see cref=&quot;T:System.Version&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが sourceType を <see cref="T:System.Version" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">コンテキスト情報を提供するオブジェクト。</param>
      <param name="destinationType" vsli:raw="The target type for the conversion.">変換後の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the converter can convert an object to the given destination type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このコンバーターがオブジェクトを目的の型に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">指定したオブジェクトを <see cref="T:System.Version" /> に変換します。</summary>
      <param name="context" vsli:raw="An object that provides contextual information.">コンテキスト情報を提供するオブジェクト。</param>
      <param name="culture" vsli:raw="The culture to use for the conversion.">変換に使用するカルチャ。</param>
      <param name="value" vsli:raw="The value to convert to a &lt;see cref=&quot;T:System.Version&quot; /&gt;.">
        <see cref="T:System.Version" /> へと変換する値。</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Version&quot; /&gt; string.">
        <paramref name="value" /> は有効な <see cref="T:System.Version" /> 文字列ではありません。</exception>
      <returns vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; converted to a &lt;see cref=&quot;T:System.Version&quot; /&gt; value.">
        <see cref="T:System.Version" /> 値に変換された <paramref name="value" />。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified value to the specified destination type using the specified context and arguments.">指定したコンテキストと引数を使用して、指定した値を指定した目的の型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The culture that supplies formatting information for the conversion.">変換のために書式設定情報を提供するカルチャ。</param>
      <param name="value" vsli:raw="The value to be converted.">変換する値。</param>
      <param name="destinationType" vsli:raw="The type to convert the value parameter to.">値パラメーターの変換先となる型。</param>
      <returns vsli:raw="An object that represents the converted value.">変換後の値を表すオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.VersionConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the given value object is valid for this type and for the specified context.">この型、および指定されたコンテキストに対して、指定された値オブジェクトが有効であるかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The object to test for validity.">有効かどうかを確認する対象のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is valid for this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値がこのオブジェクトに対して有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.WarningException">
      <summary vsli:raw="Specifies an exception that is handled as a warning instead of an error.">エラーではなく警告として処理される例外を指定します。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.WarningException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class using the specified serialization data and context.">指定したシリアル化データとコンテキストを使用して、<see cref="T:System.ComponentModel.WarningException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; to be used for deserialization.">逆シリアル化に使用する <see cref="T:System.Runtime.Serialization.SerializationInfo" />。</param>
      <param name="context" vsli:raw="The destination to be used for deserialization.">逆シリアル化に使用する転送先。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message and no Help file.">指定したメッセージを使用し、ヘルプ ファイルは指定せずに <see cref="T:System.ComponentModel.WarningException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The message to display to the end user.">エンド ユーザーに表示するメッセージ。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified detailed description and the specified exception.">詳細説明と例外を指定して、<see cref="T:System.ComponentModel.WarningException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="A detailed description of the error.">エラーの詳細説明。</param>
      <param name="innerException" vsli:raw="A reference to the inner exception that is the cause of this exception.">この例外の原因である内部例外への参照。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file.">指定したメッセージを用意し、特定のヘルプ ファイルにアクセスできるように指定して、<see cref="T:System.ComponentModel.WarningException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The message to display to the end user.">エンド ユーザーに表示するメッセージ。</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">ユーザーがヘルプを要求した場合に表示するヘルプ ファイル。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.WarningException&quot; /&gt; class with the specified message, and with access to the specified Help file and topic.">指定したメッセージを用意し、指定したヘルプ ファイルやヘルプ トピックへアクセスできるようにして、<see cref="T:System.ComponentModel.WarningException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="The message to display to the end user.">エンド ユーザーに表示するメッセージ。</param>
      <param name="helpUrl" vsli:raw="The Help file to display if the user requests help.">ユーザーがヘルプを要求した場合に表示するヘルプ ファイル。</param>
      <param name="helpTopic" vsli:raw="The Help topic to display if the user requests help.">ユーザーがヘルプを要求した場合に表示するヘルプ トピック。</param>
    </member>
    <member name="M:System.ComponentModel.WarningException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; with the parameter name and additional exception information.">パラメーター名と追加の例外情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo" /> を設定します。</summary>
      <param name="info" vsli:raw="Stores the data that was being used to serialize or deserialize the object that the &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.CodeDomSerializer&quot; /&gt; was serializing or deserializing.">
        <see cref="T:System.ComponentModel.Design.Serialization.CodeDomSerializer" /> がシリアル化または逆シリアル化していたオブジェクトを、シリアル化または逆シリアル化するために使用したデータを格納します。</param>
      <param name="context" vsli:raw="Describes the source and destination of the stream that generated the exception, as well as a means for serialization to retain that context and an additional caller-defined context.">例外を生成したストリームの転送元および転送先を記述し、そのコンテキストと追加の呼び出し元定義のコンテキストを保持するためのシリアル化の手段を提供します。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpTopic">
      <summary vsli:raw="Gets the Help topic associated with the warning.">警告に関連付けられているヘルプ トピックを取得します。</summary>
      <returns vsli:raw="The Help topic associated with the warning.">警告に関連付けられたヘルプ トピック。</returns>
    </member>
    <member name="P:System.ComponentModel.WarningException.HelpUrl">
      <summary vsli:raw="Gets the Help file associated with the warning.">警告に関連付けられているヘルプ ファイルを取得します。</summary>
      <returns vsli:raw="The Help file associated with the warning.">警告に関連付けられたヘルプ ファイル。</returns>
    </member>
    <member name="T:System.Drawing.ColorConverter">
      <summary vsli:raw="Converts colors from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">あるデータ型の色を別の色に変換します。 このクラスには <see cref="T:System.ComponentModel.TypeDescriptor" /> を使用してアクセスします。</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.ColorConverter&quot; /&gt; class.">
        <see cref="T:System.Drawing.ColorConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">このコンバーターが、任意の型のオブジェクトをコンバーターのネイティブな型に変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 このオブジェクトを使用すると、コンバーターが呼び出されている環境についての追加情報を取得できます。</param>
      <param name="sourceType" vsli:raw="The type from which you want to convert.">変換する型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトが変換を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether this converter can convert an object to the given destination type using the context.">このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type to which you want to convert.">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the operation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このコンバーターが操作を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the converter's native type.">特定のオブジェクトをコンバーターのネイティブな型に変換します。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; that provides a format context. You can use this object to get additional information about the environment from which this converter is being invoked.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.TypeDescriptor" />。 このオブジェクトを使用すると、コンバーターが呼び出されている環境についての追加情報を取得できます。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">色を表すカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to another type.">指定したオブジェクトを別の型に変換します。</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">フォーマッタ コンテキスト。 このコンバーターが呼び出される環境に関する追加情報を抽出するには、このオブジェクトを使用します。 この値が <see langword="null" /> であるかどうかを常に確認してください。 また、コンテキスト オブジェクトのプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that specifies the culture to represent the color.">色を表すカルチャを指定する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">オブジェクトの変換後の型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationtype" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Retrieves a collection containing a set of standard values for the data type for which this validator is designed. This will return &lt;see langword=&quot;null&quot; /&gt; if the data type does not support a standard set of values.">この検証コントロールがデザインされた対象のデータ型の標準値セットを含むコレクションを取得します。 データ型が値の標準セットをサポートしていない場合は、<see langword="null" /> が返されます。</summary>
      <param name="context" vsli:raw="A formatter context. Use this object to extract additional information about the environment from which this converter is being invoked. Always check whether this value is &lt;see langword=&quot;null&quot; /&gt;. Also, properties on the context object may return &lt;see langword=&quot;null&quot; /&gt;.">フォーマッタ コンテキスト。 このコンバーターが呼び出される環境に関する追加情報を抽出するには、このオブジェクトを使用します。 この値が <see langword="null" /> であるかどうかを常に確認してください。 また、コンテキスト オブジェクトのプロパティも <see langword="null" /> を返す場合があります。</param>
      <returns vsli:raw="A collection containing &lt;see langword=&quot;null&quot; /&gt; or a standard set of valid values. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="null" /> または有効な値の標準セットを含むコレクション。 既定の実装では、常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.ColorConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports a standard set of values that can be chosen from a list.">リストから選択できる値の標準セットをこのオブジェクトがサポートしているかどうかを判断します。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;Overload:System.Drawing.ColorConverter.GetStandardValues&quot; /&gt; must be called to find a common set of values the object supports; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">オブジェクトがサポートしている標準値セットを見つけるために <see cref="Overload:System.Drawing.ColorConverter.GetStandardValues" /> を呼び出す必要がある場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="T:System.Drawing.PointConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object from one data type to another.">
        <see cref="T:System.Drawing.Point" /> オブジェクトのデータ型を別のデータ型に変換します。</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.PointConverter&quot; /&gt; class.">
        <see cref="T:System.Drawing.PointConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">このコンバーターが、任意の型のオブジェクトをコンバーターのネイティブな型に変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">フォーマッタ コンテキスト。 このオブジェクトを使用して、このコンバーターを呼び出している環境についての追加情報を取得できます。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">変換前の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトが変換を実行できる場合は <see langword="true" />、それ以外の場合は <see langword="false" /> です。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> オブジェクト。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">変換後の型を表す <see cref="T:System.Type" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Drawing.Point&quot; /&gt; object.">指定のオブジェクトを <see cref="T:System.Drawing.Point" /> オブジェクトに変換します。</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">フォーマッタ コンテキスト。 このオブジェクトを使用して、このコンバーターを呼び出している環境についての追加情報を取得できます。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">特定のカルチャと関連付けられた言語、暦、文化的な慣例などのカルチャ固有の情報を格納するオブジェクト。 これは RFC 1766 標準に準拠しています。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">変換を完了できません。</exception>
      <returns vsli:raw="The converted object.">変換後のオブジェクト。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">指定したオブジェクトを指定した型に変換します。</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">フォーマッタ コンテキスト。 このオブジェクトを使用して、このコンバーターを呼び出している環境についての追加情報を取得できます。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="culture" vsli:raw="An object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">特定のカルチャと関連付けられた言語、暦、文化的な慣例などのカルチャ固有の情報を格納するオブジェクト。 これは RFC 1766 標準に準拠しています。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">オブジェクトの変換後の型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">変換を完了できません。</exception>
      <returns vsli:raw="The converted object.">変換後のオブジェクト。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object.">オブジェクトのプロパティ値が設定された、この型のインスタンスを作成します。</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">追加のコンテキストが提供されるときに使用する型記述子。</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt;.">新しいプロパティ値のディクショナリ。 ディクショナリは、<see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> から返された各プロパティに 1 つずつある、名前と値の一連の組み合わせを格納しています。</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">新しく作成したオブジェクト。オブジェクトを作成できなかった場合は <see langword="null" />。 既定の実装では、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">このオブジェクトの値を変更するために、<see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> を呼び出して新しい値を作成する必要があるかどうかを判断します。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトの 1 つ以上のプロパティを変更するときに、<see cref="M:System.Drawing.PointConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> メソッドを呼び出す必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">この型のプロパティ セットを取得します。 既定では、型はプロパティを返しません。</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">追加のコンテキストが提供されるときに使用する型記述子。</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">プロパティを取得する対象となるオブジェクトの値。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">プロパティを説明する <see cref="T:System.Attribute" /> オブジェクトの配列。</param>
      <returns vsli:raw="The set of properties that are exposed for this data type. If no properties are exposed, this method might return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">このデータ型で公開するプロパティ セット。 公開するプロパティがない場合、このメソッドは <see langword="null" /> を返します。 既定の実装では、常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.PointConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトがプロパティをサポートするかどうかを判断します。 既定値は <see langword="false" /> です。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトのプロパティを見つけるために <see langword="true" /> を呼び出す必要がある場合は <see cref="M:System.Drawing.PointConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Drawing.RectangleConverter">
      <summary vsli:raw="Converts rectangles from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt;.">四角形のデータ型を別のデータ型に変換します。 このクラスには <see cref="T:System.ComponentModel.TypeDescriptor" /> を使用してアクセスします。</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.RectangleConverter&quot; /&gt; class.">
        <see cref="T:System.Drawing.RectangleConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines if this converter can convert an object in the given source type to the native type of the converter.">このコンバーターが、任意の型のオブジェクトをコンバーターのネイティブな型に変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="A formatter context. This object can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">フォーマッタ コンテキスト。 このオブジェクトを使用して、このコンバーターを呼び出している環境についての追加情報を取得できます。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">変換前の型。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このメソッドは、オブジェクトが変換を実行できる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; object that provides a format context. This can be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object can also return &lt;see langword=&quot;null&quot; /&gt;.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> オブジェクト。 この値は <see langword="null" /> になる場合があるため、必ず確認してください。 また、コンテキスト オブジェクトのプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type you want to convert to.">変換後の型を表す <see cref="T:System.Type" /> オブジェクト。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このメソッドは、コンバーターが変換を実行できる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to a &lt;see cref=&quot;T:System.Drawing.Rectangle&quot; /&gt; object.">特定のオブジェクトを <see cref="T:System.Drawing.Rectangle" /> オブジェクトに変換します。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">このコンバーターの呼び出し元の環境についての追加情報を取得するために使用できる <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">特定のカルチャと関連付けられた言語、暦、文化的な慣例などのカルチャ固有の情報を格納する <see cref="T:System.Globalization.CultureInfo" />。 これは RFC 1766 標準に準拠しています。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">変換を完了できません。</exception>
      <returns vsli:raw="The converted object.">変換後のオブジェクト。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">指定したオブジェクトを指定した型に変換します。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">このコンバーターの呼び出し元の環境についての追加情報を取得するために使用できる <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">特定のカルチャと関連付けられた言語、暦、文化的な慣例などのカルチャ固有の情報を格納する <see cref="T:System.Globalization.CultureInfo" />。 これは RFC 1766 標準に準拠しています。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">オブジェクトの変換後の型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">変換を完了できません。</exception>
      <returns vsli:raw="The converted object.">変換後のオブジェクト。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of this type given a set of property values for the object. This is useful for objects that are immutable but still want to provide changeable properties.">オブジェクトのプロパティ値が設定された、この型のインスタンスを作成します。 これは、変更可能なプロパティを提供する必要のある不変のオブジェクトには便利です。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from a call to the &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">新しいプロパティ値のディクショナリ。 このディクショナリは、<see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> メソッドの呼び出しで返された各プロパティに 1 つずつある、名前と値の一連の組み合わせを格納しています。</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">新しく作成したオブジェクト。オブジェクトを作成できなかった場合は <see langword="null" />。 既定の実装では、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if changing a value on this object should require a call to &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; to create a new value.">このオブジェクトの値を変更するために、<see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> を呼び出して新しい値を作成する必要があるかどうかを判断します。</summary>
      <param name="context" vsli:raw="A type descriptor through which additional context can be provided.">追加のコンテキストが提供されるときに使用する型記述子。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; should be called when a change is made to one or more properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトの 1 つ以上のプロパティを変更するときに、<see cref="M:System.Drawing.RectangleConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> を呼び出す必要がある場合、このメソッドは <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not return any properties.">この型のプロパティ セットを取得します。 既定では、型はプロパティを返しません。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">プロパティを取得する対象となるオブジェクトの値。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">プロパティを説明する <see cref="T:System.Attribute" /> オブジェクトの配列。</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">このデータ型で公開する必要があるプロパティ セット。 プロパティを公開する必要がない場合は、<see langword="null" /> を返すことがあります。 既定の実装では、常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.RectangleConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines if this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトがプロパティをサポートするかどうかを判断します。 既定値は <see langword="false" /> です。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be provided.">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; should be called to find the properties of this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトのプロパティを見つけるために <see cref="M:System.Drawing.RectangleConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> を呼び出す必要がある場合、このメソッドは <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="T:System.Drawing.SizeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; class is used to convert from one data type to another. Access this class through the &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; object.">
        <see cref="T:System.Drawing.SizeConverter" /> クラスは、あるデータ型を別のデータ型に変換する場合に使用します。 <see cref="T:System.ComponentModel.TypeDescriptor" /> オブジェクトを通じてこのクラスにアクセスします。</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Drawing.SizeConverter&quot; /&gt; object.">新しい <see cref="T:System.Drawing.SizeConverter" /> オブジェクトを初期化します。</summary>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether this converter can convert an object in the specified source type to the native type of the converter.">対象のコンバーターが、指定した変換前の型のオブジェクトをそのコンバーターのネイティブな型に変換できるかどうかを確認します。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">このコンバーターの呼び出し元の環境についての追加情報を取得するために使用できる <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="sourceType" vsli:raw="The type you want to convert from.">変換前の型。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this object can perform the conversion.">オブジェクトが変換を実行できる場合、このメソッドは <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Gets a value indicating whether this converter can convert an object to the given destination type using the context.">このコンバーターが、コンテキストを使用してオブジェクトを特定の目的の型に変換できるかどうかを示す値を取得します。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This can be &lt;see langword=&quot;null&quot; /&gt;, so always check. Also, properties on the context object can return &lt;see langword=&quot;null&quot; /&gt;.">このコンバーターの呼び出し元の環境についての追加情報を取得するために使用できる <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 これは <see langword="null" /> の場合があるため、常に確認してください。 また、コンテキスト オブジェクトのプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">変換先の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="This method returns &lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このメソッドは、コンバーターが変換を実行できる場合は <see langword="true" /> を返します。それ以外の場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to the converter's native type.">指定したオブジェクトをコンバーターのネイティブな型に変換します。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">このコンバーターの呼び出し元の環境についての追加情報を取得するために使用できる <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">特定のカルチャと関連付けられた言語、暦、文化的な慣例などのカルチャ固有の情報を格納する <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。 これは RFC 1766 標準に準拠しています。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">変換を完了できません。</exception>
      <returns vsli:raw="The converted object.">変換後のオブジェクト。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified object to the specified type.">指定したオブジェクトを指定した型に変換します。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that can be used to get additional information about the environment this converter is being called from. This may be &lt;see langword=&quot;null&quot; /&gt;, so you should always check. Also, properties on the context object may also return &lt;see langword=&quot;null&quot; /&gt;.">このコンバーターの呼び出し元の環境についての追加情報を取得するために使用できる <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 この値は <see langword="null" /> になる場合があるため、常に確認してください。 また、コンテキスト オブジェクト上のプロパティも <see langword="null" /> を返す場合があります。</param>
      <param name="culture" vsli:raw="An &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object that contains culture specific information, such as the language, calendar, and cultural conventions associated with a specific culture. It is based on the RFC 1766 standard.">特定のカルチャと関連付けられた言語、暦、文化的な慣例などのカルチャ固有の情報を格納する <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。 これは RFC 1766 標準に準拠しています。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">オブジェクトの変換後の型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be completed.">変換を完了できません。</exception>
      <returns vsli:raw="The converted object.">変換後のオブジェクト。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an object of this type by using a specified set of property values for the object. This is useful for creating non-changeable objects that have changeable properties.">この型のオブジェクトそのオブジェクトのプロパティ値の指定のセットを使用して作成します。 これは、変更できるプロパティを持つ変更できない、オブジェクトを作成する場合に便利です。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <param name="propertyValues" vsli:raw="A dictionary of new property values. The dictionary contains a series of name-value pairs, one for each property returned from the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method.">新しいプロパティ値のディクショナリ。 このディクショナリには、名前と値の一連のペアが格納されています。各プロパティに対する名前と値のペアは、<see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> メソッドから返されます。</param>
      <returns vsli:raw="The newly created object, or &lt;see langword=&quot;null&quot; /&gt; if the object could not be created. The default implementation returns &lt;see langword=&quot;null&quot; /&gt;.">新しく作成したオブジェクト。オブジェクトを作成できなかった場合は <see langword="null" />。 既定の実装では、<see langword="null" /> が返されます。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether changing a value on this object should require a call to the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; method to create a new value.">このオブジェクトの値を変更するために、<see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> メソッドを呼び出して新しい値を作成する必要があるかどうかを判断します。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)&quot; /&gt; object should be called when a change is made to one or more properties of this object.">このオブジェクトの 1 つ以上のプロパティを変更するときに、<see cref="M:System.Drawing.SizeConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)" /> オブジェクトを呼び出す必要がある場合は <see langword="true" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves the set of properties for this type. By default, a type does not have any properties to return.">この型のプロパティ セットを取得します。 既定では、型はプロパティを返しません。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <param name="value" vsli:raw="The value of the object to get the properties for.">プロパティを取得する対象となるオブジェクトの値。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">プロパティを説明する <see cref="T:System.Attribute" /> オブジェクトの配列。</param>
      <returns vsli:raw="The set of properties that should be exposed for this data type. If no properties should be exposed, this may return &lt;see langword=&quot;null&quot; /&gt;. The default implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">このデータ型で公開する必要があるプロパティ セット。 プロパティを公開する必要がない場合は、<see langword="null" /> を返すことがあります。 既定の実装では、常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.SizeConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Determines whether this object supports properties. By default, this is &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトがプロパティをサポートしているかどうかを確認します。 既定値は <see langword="false" /> です。</summary>
      <param name="context" vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeDescriptor&quot; /&gt; through which additional context can be provided.">追加のコンテキストを指定できる場合に使用する <see cref="T:System.ComponentModel.TypeDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])&quot; /&gt; method should be called to find the properties of this object.">このオブジェクトのプロパティを見つけるために <see cref="M:System.Drawing.SizeConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])" /> メソッドを呼び出す必要がある場合は <see langword="true" />。</returns>
    </member>
    <member name="T:System.Drawing.SizeFConverter">
      <summary vsli:raw="Converts &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; objects from one type to another.">ある型の <see cref="T:System.Drawing.SizeF" /> オブジェクトを別の型に変換します。</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; class.">
        <see cref="T:System.Drawing.SizeFConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the converter can convert from the type specified to the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type, using the specified context.">コンバーターが、指定したコンテキストを使用して、指定した型を <see cref="T:System.Drawing.SizeF" /> 型に変換できるかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">追加のコンテキストを指定するときに使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; the represents the type you wish to convert from.">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate the conversion can be performed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns a value indicating whether the &lt;see cref=&quot;T:System.Drawing.SizeFConverter&quot; /&gt; can convert a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; to the specified type.">
        <see cref="T:System.Drawing.SizeFConverter" /> が <see cref="T:System.Drawing.SizeF" /> を指定した型に変換できるかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">追加のコンテキストを指定するときに使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert from.">変換元の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">指定したコンテキストとカルチャ情報を使用して、指定したオブジェクトをこのコンバーターの型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the given value object to the specified type, using the specified context and culture information.">指定したコンテキストとカルチャ情報を使用して、指定した値オブジェクトを指定した型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If null is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 null 値を渡すと、現在のカルチャが使用されます。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">値パラメーターを変換する <see cref="T:System.Type" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.CreateInstance(System.ComponentModel.ITypeDescriptorContext,System.Collections.IDictionary)">
      <summary vsli:raw="Creates an instance of a &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; with the specified property values using the specified context.">指定したコンテキストを使用して、指定したプロパティ値を持つ <see cref="T:System.Drawing.SizeF" /> のインスタンスを作成します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">追加のコンテキストを指定するときに使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="propertyValues" vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing property names and values.">プロパティの名前と値を格納している <see cref="T:System.Collections.IDictionary" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; representing the new &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if the object cannot be created.">新しい <see cref="T:System.Object" /> を表す <see cref="T:System.Drawing.SizeF" />。オブジェクトを作成できない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetCreateInstanceSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns a value indicating whether changing a value on this object requires a call to the &lt;see cref=&quot;Overload:System.Drawing.SizeFConverter.CreateInstance&quot; /&gt; method to create a new value.">このオブジェクトの値を変更するときに、<see cref="Overload:System.Drawing.SizeFConverter.CreateInstance" /> メソッドを呼び出して新しい値を作成する必要があるかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context. This may be &lt;see langword=&quot;null&quot; /&gt;.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。 <see langword="null" /> でもかまいません。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
      <summary vsli:raw="Retrieves a set of properties for the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type using the specified context and attributes.">指定したコンテキストおよび属性を使用して、<see cref="T:System.Drawing.SizeF" /> 型の一連のプロパティを取得します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">追加のコンテキストを指定するときに使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to return properties for.">プロパティを返す <see cref="T:System.Object" />。</param>
      <param name="attributes" vsli:raw="An array of &lt;see cref=&quot;T:System.Attribute&quot; /&gt; objects that describe the properties.">プロパティを説明する <see cref="T:System.Attribute" /> オブジェクトの配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; containing the properties.">プロパティを格納している <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.Drawing.SizeFConverter.GetPropertiesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary vsli:raw="Returns whether the &lt;see cref=&quot;T:System.Drawing.SizeF&quot; /&gt; type supports properties.">
        <see cref="T:System.Drawing.SizeF" /> 型がプロパティをサポートしているかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; through which additional context can be supplied.">追加のコンテキストを指定するときに使用する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class represents the type converter for extended protection policy used by the server to validate incoming client connections.">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> クラスは、受信クライアント接続を検証するためにサーバーで使用される拡張保護ポリシーの型コンバーターを表します。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter&quot; /&gt; class.">
        <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type.">コンバーターがオブジェクトを指定した型に変換できるかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you want to convert to.">変換先の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this converter can perform the conversion; otherwise &lt;see langword=&quot;false&quot; /&gt;.">コンバーターが変換を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicyTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Convert the object to the specified type.">オブジェクトを指定した型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; object. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" /> オブジェクト。 <see langword="null" /> を渡すと、現在のカルチャが使用されます。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert. This should be a &lt;see cref=&quot;T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy&quot; /&gt; object.">変換対象の <see cref="T:System.Object" />。 これは <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> オブジェクトである必要があります。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the value parameter to.">値パラメーターを変換する <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion could not be performed.">変換できませんでした。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted &lt;paramref name=&quot;value&quot; /&gt; parameter.">変換後の <paramref name="value" /> パラメーターを表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">
        <see cref="E:System.Timers.Timer.Elapsed" /> イベントのデータを提供します。</summary>
    </member>
    <member name="P:System.Timers.ElapsedEventArgs.SignalTime">
      <summary vsli:raw="Gets the date/time when the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">
        <see cref="E:System.Timers.Timer.Elapsed" /> イベントが発生した日付/時刻を取得します。</summary>
      <returns vsli:raw="The time the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event was raised.">
        <see cref="E:System.Timers.Timer.Elapsed" /> イベントが発生した時刻。</returns>
    </member>
    <member name="T:System.Timers.ElapsedEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">
        <see cref="E:System.Timers.Timer.Elapsed" /> の <see cref="T:System.Timers.Timer" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="An &lt;see cref=&quot;T:System.Timers.ElapsedEventArgs&quot; /&gt; object that contains the event data.">イベント データを格納している <see cref="T:System.Timers.ElapsedEventArgs" /> オブジェクト。</param>
    </member>
    <member name="T:System.Timers.Timer">
      <summary vsli:raw="Generates an event after a set interval, with an option to generate recurring events.">一定の間隔の経過後にイベントを生成します。オプションとして、反復イベントを生成することもできます。</summary>
    </member>
    <member name="E:System.Timers.Timer.Elapsed">
      <summary vsli:raw="Occurs when the interval elapses.">間隔が経過すると発生します。</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets all the properties to their initial values.">
        <see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、すべてのプロパティを初期値に設定します。</summary>
    </member>
    <member name="M:System.Timers.Timer.#ctor(System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; class, and sets the &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property to the specified number of milliseconds.">
        <see cref="T:System.Timers.Timer" /> クラスの新しいインスタンスを初期化し、<see cref="P:System.Timers.Timer.Interval" /> プロパティを指定したミリ秒数に設定します。</summary>
      <param name="interval" vsli:raw="The time, in milliseconds, between events. The value must be greater than zero and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">ミリ秒単位でのイベントの発生間隔。 この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The value of the &lt;paramref name=&quot;interval&quot; /&gt; parameter is less than or equal to zero, or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="interval" /> パラメーターの値は 0 以下か、または <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Timers.Timer.BeginInit">
      <summary vsli:raw="Begins the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を開始します。</summary>
    </member>
    <member name="M:System.Timers.Timer.Close">
      <summary vsli:raw="Releases the resources used by the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">
        <see cref="T:System.Timers.Timer" /> で使用したリソースを解放します。</summary>
    </member>
    <member name="M:System.Timers.Timer.Dispose(System.Boolean)">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt;.">現在の <see cref="T:System.Timers.Timer" /> によって使用されているすべてのリソースを解放します。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Timers.Timer.EndInit">
      <summary vsli:raw="Ends the run-time initialization of a &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; that is used on a form or by another component.">フォームまたは別のコンポーネントで使用する <see cref="T:System.Timers.Timer" /> の実行時の初期化を終了します。</summary>
    </member>
    <member name="M:System.Timers.Timer.Start">
      <summary vsli:raw="Starts raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="P:System.Timers.Timer.Enabled" /> を <see langword="true" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を開始します。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; is created with an interval equal to or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; + 1, or set to an interval less than zero.">
        <see cref="T:System.Timers.Timer" /> の作成時に設定された間隔が <see cref="F:System.Int32.MaxValue" /> + 1 以上か、0 未満に設定されています。</exception>
    </member>
    <member name="M:System.Timers.Timer.Stop">
      <summary vsli:raw="Stops raising the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event by setting &lt;see cref=&quot;P:System.Timers.Timer.Enabled&quot; /&gt; to &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.Timers.Timer.Enabled" /> を <see langword="false" /> に設定して、<see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生を停止します。</summary>
    </member>
    <member name="P:System.Timers.Timer.AutoReset">
      <summary vsli:raw="Gets or sets a Boolean indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once (&lt;see langword=&quot;false&quot; /&gt;) or repeatedly (&lt;see langword=&quot;true&quot; /&gt;).">
        <see cref="T:System.Timers.Timer" /> が <see cref="E:System.Timers.Timer.Elapsed" /> イベントを一度のみ発生させる (<see langword="false" />) か、または繰り返し発生させる (<see langword="true" />) かを示すブール値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event each time the interval elapses; &lt;see langword=&quot;false&quot; /&gt; if it should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event only once, after the first time the interval elapses. The default is &lt;see langword=&quot;true&quot; /&gt;.">指定した間隔が経過するたびに <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。最初の間隔が経過した後に 1 回だけ <see langword="false" /> イベントを発生させる場合は <see cref="E:System.Timers.Timer.Elapsed" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Timers.Timer.Enabled">
      <summary vsli:raw="Gets or sets a value indicating whether the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">
        <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる必要があるかどうかを示す値を取得または設定します。</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This property cannot be set because the timer has been disposed.">タイマーが破棄されたため、このプロパティは設定できません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Timers.Timer.Interval&quot; /&gt; property was set to a value greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; before the timer was enabled.">
        <see cref="P:System.Timers.Timer.Interval" /> プロパティは、タイマーが有効になる前に <see cref="F:System.Int32.MaxValue" /> より大きい値に設定されました。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; should raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Timers.Timer" /> で <see cref="E:System.Timers.Timer.Elapsed" /> イベントを発生させる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Timers.Timer.Interval">
      <summary vsli:raw="Gets or sets the interval, expressed in milliseconds, at which to raise the &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; event.">
        <see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="The interval is less than or equal to zero.&#xA;&#xA; -or-&#xA;&#xA; The interval is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;, and the timer is currently enabled. (If the timer is not currently enabled, no exception is thrown until it becomes enabled.)">間隔が 0 以下です。  
  
- または - 
間隔が <see cref="F:System.Int32.MaxValue" /> よりも大きく、タイマーが現在有効になっています。 (タイマーが現在有効になっていない場合は、有効になるまで例外はスローされません。)</exception>
      <returns vsli:raw="The time, in milliseconds, between &lt;see cref=&quot;E:System.Timers.Timer.Elapsed&quot; /&gt; events. The value must be greater than zero, and less than or equal to &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;. The default is 100 milliseconds.">ミリ秒単位での <see cref="E:System.Timers.Timer.Elapsed" /> イベントの発生間隔。 この値はゼロより大きく、<see cref="F:System.Int32.MaxValue" /> 以下である必要があります。 既定値は 100 ミリ秒です。</returns>
    </member>
    <member name="P:System.Timers.Timer.Site">
      <summary vsli:raw="Gets or sets the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; to its container in design mode.">デザイン モードで <see cref="T:System.Timers.Timer" /> をコンテナーにバインドするサイトを取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ISite&quot; /&gt; interface representing the site that binds the &lt;see cref=&quot;T:System.Timers.Timer&quot; /&gt; object to its container.">
        <see cref="T:System.Timers.Timer" /> オブジェクトをコンテナーにバインドするサイトを表す <see cref="T:System.ComponentModel.ISite" /> インターフェイス。</returns>
    </member>
    <member name="P:System.Timers.Timer.SynchronizingObject">
      <summary vsli:raw="Gets or sets the object used to marshal event-handler calls that are issued when an interval has elapsed.">指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.ISynchronizeInvoke&quot; /&gt; representing the object used to marshal the event-handler calls that are issued when an interval has elapsed. The default is &lt;see langword=&quot;null&quot; /&gt;.">指定した間隔が経過したときに発行されるイベント ハンドラー呼び出しをマーシャリングするために使用するオブジェクトを表す <see cref="T:System.ComponentModel.ISynchronizeInvoke" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="T:System.Timers.TimersDescriptionAttribute">
      <summary vsli:raw="Sets the description that visual designers can display when referencing an event, extender, or property.">イベント、エクステンダー、またはプロパティの参照時に、ビジュアルなデザイナーで表示できる説明を設定します。</summary>
    </member>
    <member name="M:System.Timers.TimersDescriptionAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Timers.TimersDescriptionAttribute&quot; /&gt; class.">
        <see cref="T:System.Timers.TimersDescriptionAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="description" vsli:raw="The description to use.">使用する説明。</param>
    </member>
    <member name="P:System.Timers.TimersDescriptionAttribute.Description">
      <summary vsli:raw="Gets the description that visual designers can display when referencing an event, extender, or property.">イベント、エクステンダー、またはプロパティの参照時に、ビジュアルなデザイナーで表示できる説明を取得します。</summary>
      <returns vsli:raw="The description for the event, extender, or property.">イベント、エクステンダー、またはプロパティの説明。</returns>
    </member>
    <member name="T:System.UriTypeConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; type to a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type, and vice versa.">
        <see cref="T:System.String" /> 型から <see cref="T:System.Uri" /> 型、またはその逆の変換を実行します。</summary>
    </member>
    <member name="M:System.UriTypeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.UriTypeConverter&quot; /&gt; class.">
        <see cref="T:System.UriTypeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an object of the given type to the type of this converter.">コンバーターが特定の型のオブジェクトをコンバーターの型に変換できるかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert from.">変換前の型を表す <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;sourceType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="sourceType" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;sourceType&quot; /&gt; is a &lt;see cref=&quot;T:System.String&quot; /&gt; type or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; type can be assigned from &lt;paramref name=&quot;sourceType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="sourceType" /> が <see cref="T:System.String" /> 型の場合、または <paramref name="sourceType" /> から <see cref="T:System.Uri" /> 型への代入が可能である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.UriTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert the object to the specified type, using the specified context.">このコンバーターが指定のコンテキストを使用して、オブジェクトを指定の型に変換できるかどうかを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type that you want to convert to.">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;destinationType&quot; /&gt; is of type &lt;see cref=&quot;T:System.ComponentModel.Design.Serialization.InstanceDescriptor&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Uri&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="destinationType" /> が <see cref="T:System.ComponentModel.Design.Serialization.InstanceDescriptor" /> 型、<see cref="T:System.String" /> 型、または <see cref="T:System.Uri" /> 型の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the given object to the type of this converter, using the specified context and culture information.">指定したコンテキストとカルチャ情報を使用して、指定したオブジェクトをこのコンバーターの型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.UriTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts a given value object to the specified type, using the specified context and culture information.">指定したコンテキストとカルチャ情報を使用して、指定した値オブジェクトを、指定した型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt;. If &lt;see langword=&quot;null&quot; /&gt; is passed, the current culture is assumed.">
        <see cref="T:System.Globalization.CultureInfo" />。 <see langword="null" /> を渡すと、現在のカルチャが使用されます。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to convert.">変換対象の <see cref="T:System.Object" />。</param>
      <param name="destinationType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to convert the &lt;paramref name=&quot;value&quot; /&gt; parameter to.">
        <paramref name="value" /> パラメーターの変換後の <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;destinationType&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The conversion cannot be performed.">変換を実行できません。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; that represents the converted value.">変換後の値を表す <see cref="T:System.Object" />。</returns>
    </member>
    <member name="M:System.UriTypeConverter.IsValid(System.ComponentModel.ITypeDescriptorContext,System.Object)">
      <summary vsli:raw="Returns whether the given value object is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created from it.">指定された値オブジェクトが <see cref="T:System.Uri" /> であるかどうか、または、そのオブジェクトから <see cref="T:System.Uri" /> を生成できるかどうかを返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to test for validity.">有効性をテストするための <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; is a &lt;see cref=&quot;T:System.Uri&quot; /&gt; or a &lt;see cref=&quot;T:System.String&quot; /&gt; from which a &lt;see cref=&quot;T:System.Uri&quot; /&gt; can be created; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> が <see cref="T:System.Uri" /> である場合、または <see cref="T:System.String" /> を生成可能な <see cref="T:System.Uri" /> である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
  </members>
</doc>
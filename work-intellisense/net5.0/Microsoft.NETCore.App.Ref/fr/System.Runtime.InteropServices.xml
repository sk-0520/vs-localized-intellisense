<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.DataMisalignedException">
      <summary>Exception levée lors de la lecture ou de l'écriture d'une unité de données dans une adresse qui n'est pas un multiple de la taille de données. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.DataMisalignedException" />.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.DataMisalignedException" /> en utilisant le message d’erreur spécifié.</summary>
      <param name="message">Objet <see cref="T:System.String" /> qui décrit l’erreur. Le contenu de <paramref name="message" /> doit être compréhensible par les utilisateurs. L'appelant de ce constructeur est requis pour vérifier que cette chaîne a été localisée pour la culture système actuelle.</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.DataMisalignedException" /> à l'aide du message d'erreur spécifié et de l'exception sous-jacente.</summary>
      <param name="message">Objet <see cref="T:System.String" /> qui décrit l’erreur. Le contenu de <paramref name="message" /> doit être compréhensible par les utilisateurs. L'appelant de ce constructeur est requis pour vérifier que cette chaîne a été localisée pour la culture système actuelle.</param>
      <param name="innerException">Exception qui constitue la cause de l'actuel <see cref="T:System.DataMisalignedException" />. Si le paramètre <paramref name="innerException" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary>Exception levée lorsqu'une DLL spécifiée dans une importation de DLL est introuvable.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.DllNotFoundException" /> avec des propriétés par défaut.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.DllNotFoundException" /> avec des données sérialisées.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les données d'objet sérialisées concernant l'exception levée.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient des informations contextuelles relatives à la source ou à la destination.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.DllNotFoundException" /> avec un message d'erreur spécifié.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.DllNotFoundException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary>Fournit l'accès aléatoire aux blocs non managés de la mémoire à partir du code managé.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.UnmanagedMemoryAccessor" />.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.UnmanagedMemoryAccessor" /> avec une mémoire tampon, un décalage et une capacité spécifiés.</summary>
      <param name="buffer">Mémoire tampon devant contenir l’accesseur.</param>
      <param name="offset">Octet auquel commencer l’accesseur.</param>
      <param name="capacity">Taille, en octets, de la mémoire à allouer.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> plus <paramref name="capacity" /> est supérieur à <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="capacity" /> est inférieur à zéro.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> plus <paramref name="capacity" /> encapsuleraient autour de la valeur la plus élevée de l’espace d’adressage.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.IO.UnmanagedMemoryAccessor" /> avec une mémoire tampon, un décalage, une capacité et des droits d'accès spécifiés.</summary>
      <param name="buffer">Mémoire tampon devant contenir l’accesseur.</param>
      <param name="offset">Octet auquel commencer l’accesseur.</param>
      <param name="capacity">Taille, en octets, de la mémoire à allouer.</param>
      <param name="access">Type d'accès autorisé à la mémoire. La valeur par défaut est <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> plus <paramref name="capacity" /> est supérieur à <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="capacity" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="access" /> n’est pas une valeur d’énumération <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> valide.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> plus <paramref name="capacity" /> encapsuleraient autour de la valeur la plus élevée de l’espace d’adressage.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary>Libère toutes les ressources utilisées par <see cref="T:System.IO.UnmanagedMemoryAccessor" />.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary>Libère les ressources non managées utilisées par <see cref="T:System.IO.UnmanagedMemoryAccessor" /> et libère éventuellement les ressources managées.</summary>
      <param name="disposing">
        <see langword="true" /> pour libérer les ressources managées et non managées ; <see langword="false" /> pour libérer uniquement les ressources non managées.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary>Définit les valeurs initiales de l'accesseur.</summary>
      <param name="buffer">Mémoire tampon devant contenir l’accesseur.</param>
      <param name="offset">Octet auquel commencer l’accesseur.</param>
      <param name="capacity">Taille, en octets, de la mémoire à allouer.</param>
      <param name="access">Type d'accès autorisé à la mémoire. La valeur par défaut est <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> plus <paramref name="capacity" /> est supérieur à <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="buffer" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> ou <paramref name="capacity" /> est inférieur à zéro.  
  
- ou - 
 <paramref name="access" /> n’est pas une valeur d’énumération <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" /> valide.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="offset" /> plus <paramref name="capacity" /> encapsuleraient autour de la valeur la plus élevée de l’espace d’adressage.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary>Lit une structure de type <paramref name="T" /> de l'accesseur dans une référence fournie.</summary>
      <param name="position">Position dans l'accesseur à laquelle la lecture doit commencer.</param>
      <param name="structure">Structure destinée à contenir les données de lecture.</param>
      <typeparam name="T">Type de structure.</typeparam>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une structure de type <paramref name="T" />.  
  
- ou - 
 <see langword="T" /> est un type valeur qui contient un ou plusieurs types référence.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>Lit les structures de type <paramref name="T" /> de l'accesseur dans un tableau de type <paramref name="T" />.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel la lecture doit commencer.</param>
      <param name="array">Tableau destiné à contenir les structures lues dans l'accesseur.</param>
      <param name="offset">Dans <paramref name="array" />, index dans lequel placer la première structure copiée.</param>
      <param name="count">Nombre de structures de type <c>T</c> à lire dans l’accesseur.</param>
      <typeparam name="T">Type de structure.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="array" /> n’est pas assez grand pour contenir <paramref name="count" /> structures (démarrage à partir de <paramref name="position" />).</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
      <returns>Nombre de structures lues dans <paramref name="array" />. Cette valeur peut être inférieure à <paramref name="count" /> si moins de structures sont disponibles, ou zéro si la fin de l'accesseur est atteinte.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary>Lit une valeur booléenne de l’accesseur.</summary>
      <param name="position">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
      <returns>
        <see langword="true" /> ou <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary>Lit une valeur d'octet dans l'accesseur.</summary>
      <param name="position">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
      <returns>Valeur qui a été lue.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary>Lit un caractère dans l'accesseur.</summary>
      <param name="position">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
      <returns>Valeur qui a été lue.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary>Lit une valeur décimale dans l’accesseur.</summary>
      <param name="position">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.  
  
- ou - 
Le décimal à lire n’est pas valide.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
      <returns>Valeur qui a été lue.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary>Lit une valeur à virgule flottante double précision dans l’accesseur.</summary>
      <param name="position">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
      <returns>Valeur qui a été lue.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary>Lit un entier 16 bits dans l’accesseur.</summary>
      <param name="position">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
      <returns>Valeur qui a été lue.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary>Lit un entier 32 bits dans l’accesseur.</summary>
      <param name="position">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
      <returns>Valeur qui a été lue.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary>Lit un entier 64 bits dans l’accesseur.</summary>
      <param name="position">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
      <returns>Valeur qui a été lue.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary>Lit un entier signé 8 bits dans l'accesseur.</summary>
      <param name="position">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
      <returns>Valeur qui a été lue.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary>Lit une valeur à virgule flottante simple précision dans l'accesseur.</summary>
      <param name="position">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
      <returns>Valeur qui a été lue.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary>Lit un entier non signé 16 bits dans l’accesseur.</summary>
      <param name="position">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
      <returns>Valeur qui a été lue.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary>Lit un entier non signé 32 bits dans l’accesseur.</summary>
      <param name="position">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
      <returns>Valeur qui a été lue.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary>Lit un entier non signé 64 bits dans l'accesseur.</summary>
      <param name="position">Nombre d’octets dans l’accesseur auquel commencer la lecture.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour lire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge la lecture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
      <returns>Valeur qui a été lue.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary>Écrit une valeur booléenne dans l'accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary>Écrit une valeur d’octet dans l’accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary>Écrit un caractère dans l'accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary>Écrit une valeur décimale dans l'accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.  
  
- ou - 
Le décimal n’est pas valide.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary>Écrit une valeur <see cref="T:System.Double" /> dans l'accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary>Écrit un entier 16 bits dans l’accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary>Écrit un entier 32 bits dans l'accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary>Écrit un entier 64 bits dans l’accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après la position pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary>Écrit un entier 8 bits dans l’accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary>Écrit <see cref="T:System.Single" /> dans l’accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary>Écrit un entier non signé 16 bits dans l’accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary>Écrit un entier non signé 32 bits dans l’accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary>Écrit un entier non signé 64 bits dans l'accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="value">Valeur à écrire.</param>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets après <paramref name="position" /> pour écrire une valeur.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary>Écrit une structure dans l’accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="structure">Structure à écrire.</param>
      <typeparam name="T">Type de structure.</typeparam>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets dans l’accesseur après <paramref name="position" /> pour écrire une structure de type <paramref name="T" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary>Écrit les structures d’un tableau de type <paramref name="T" /> dans l’accesseur.</summary>
      <param name="position">Nombre d'octets dans l'accesseur auquel commencer l'écriture.</param>
      <param name="array">Tableau à écrire dans l’accesseur.</param>
      <param name="offset">Dans <paramref name="array" />, index à partir duquel commencer l'écriture.</param>
      <param name="count">Nombre de structures dans <paramref name="array" /> à écrire.</param>
      <typeparam name="T">Type de structure.</typeparam>
      <exception cref="T:System.ArgumentException">Il n’y a pas assez d’octets dans l’accesseur après <paramref name="position" /> pour écrire le nombre de structures spécifié par <paramref name="count" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="position" /> est inférieur à zéro ou supérieur à la capacité de l’accesseur.  
  
- ou - 
 <paramref name="offset" /> ou <paramref name="count" /> est inférieur à zéro.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="array" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">L’accesseur ne prend pas en charge l’écriture.</exception>
      <exception cref="T:System.ObjectDisposedException">L’accesseur a été supprimé.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary>Détermine si l’accesseur est accessible en lecture.</summary>
      <returns>
        <see langword="true" /> si l'accesseur est accessible en lecture ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary>Détermine si l’accesseur est accessible en écriture.</summary>
      <returns>
        <see langword="true" /> si l'accesseur est accessible en écriture ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary>Obtient la capacité de l’accesseur.</summary>
      <returns>Capacité de l’accesseur.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary>Détermine si l’accesseur est actuellement ouvert par un processus.</summary>
      <returns>
        <see langword="true" /> si l'accesseur est ouvert ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary>Indique que la valeur par défaut pour le champ ou paramètre avec attributs est une instance de <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />, où <see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" /> est <see langword="null" />.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" />.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary>Obtient la constante <see langword="IDispatch" /> stockée dans cet attribut.</summary>
      <returns>Constante <see langword="IDispatch" /> stockée dans cet attribut. <see langword="null" /> est la seule valeur autorisée pour une valeur de constante <see langword="IDispatch" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary>Indique que la valeur par défaut pour le champ ou paramètre avec attributs est une instance de <see cref="T:System.Runtime.InteropServices.UnknownWrapper" />, où <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> est <see langword="null" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" />.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary>Obtient la constante <see langword="IUnknown" /> stockée dans cet attribut.</summary>
      <returns>Constante <see langword="IUnknown" /> stockée dans cet attribut. <see langword="null" /> est la seule valeur autorisée pour une valeur de constante <see langword="IUnknown" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary>Permet à une méthode non managée d’appeler une méthode managée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary>Encapsule un tableau et un offset dans le tableau spécifié.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary>Initialise une nouvelle instance de la structure <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</summary>
      <param name="array">Tableau managé.</param>
      <param name="offset">Décalage en octets de l’élément à passer par appel de plateforme.</param>
      <exception cref="T:System.ArgumentException">La taille du tableau est supérieure à 2 gigaoctets (Go).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary>Indique si l’objet spécifié correspond à l’objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> actif.</summary>
      <param name="obj">Objet à comparer à cette instance.</param>
      <returns>
        <see langword="true" /> si l’objet correspond à <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Indique si l’objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> spécifié correspond à l’instance active.</summary>
      <param name="obj">Objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> à comparer à cette instance.</param>
      <returns>
        <see langword="true" /> si l’objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> spécifié correspond à l’instance active ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary>Retourne le tableau managé référencé par ce <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</summary>
      <returns>Tableau managé référencé par cette instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary>Retourne un code de hachage pour ce type valeur.</summary>
      <returns>Code de hachage de cette instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary>Retourne le décalage fourni quand ce <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> a été construit.</summary>
      <returns>Décalage pour cette instance.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Détermine si deux objets <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> spécifiés ont la même valeur.</summary>
      <param name="a">Objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> à comparer au paramètre <paramref name="b" />.</param>
      <param name="b">Objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> à comparer au paramètre <paramref name="a" />.</param>
      <returns>
        <see langword="true" /> si la valeur de <paramref name="a" /> est égale à la valeur de <paramref name="b" /> ; sinon <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary>Détermine si deux objets <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> spécifiés n’ont pas la même valeur.</summary>
      <param name="a">Objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> à comparer au paramètre <paramref name="b" />.</param>
      <param name="b">Objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> à comparer au paramètre <paramref name="a" />.</param>
      <returns>
        <see langword="true" /> si la valeur de l'objet <paramref name="a" /> est différente de celle de l'objet <paramref name="b" /> ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary>Indique si le type doit être marshalé en utilisant Automation Marshaler ou un proxy et un stub personnalisés.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" />.</summary>
      <param name="val">
        <see langword="true" /> si la classe doit être marshalée à l'aide de Automation Marshaler ; <see langword="false" /> si un marshaleur de proxy/stub doit être utilisé.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary>Obtient une valeur indiquant le type de marshaleur à utiliser.</summary>
      <returns>
        <see langword="true" /> si la classe doit être marshalée à l'aide de Automation Marshaler ; <see langword="false" /> si un marshaleur de proxy/stub doit être utilisé.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary>Détermine si les caractères Unicode sont convertis en caractères ANSI équivalents les plus proches.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary>Active ou désactive la levée d'une exception sur un caractère Unicode non mappable converti en caractère ANSI '?'.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" /> à laquelle est attribuée la valeur de la propriété <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" />.</summary>
      <param name="BestFitMapping">
        <see langword="true" /> pour indiquer que le mappage ajusté est activé ; sinon <see langword="false" />. La valeur par défaut est <see langword="true" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary>Obtient le comportement de mappage ajusté lors de la conversion de caractères Unicode en caractères ANSI.</summary>
      <returns>
        <see langword="true" /> si le mappage ajusté est activé ; sinon <see langword="false" />. La valeur par défaut est <see langword="true" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary>Marshale des données de type <see langword="VT_BSTR" /> de code managé en code non managé. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> avec l'objet <see cref="T:System.Object" /> spécifié.</summary>
      <param name="value">Objet à inclure dans un wrapper et à marshaler en tant que <see langword="VT_BSTR" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> avec l'objet <see cref="T:System.String" /> spécifié.</summary>
      <param name="value">Objet à inclure dans un wrapper et à marshaler en tant que <see langword="VT_BSTR" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary>Obtient l'objet <see cref="T:System.String" /> encapsulé à marshaler comme type <see langword="VT_BSTR" />.</summary>
      <returns>Objet inclus dans un wrapper par <see cref="T:System.Runtime.InteropServices.BStrWrapper" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary>Spécifie la convention d’appel nécessaire pour appeler des méthodes implémentées dans du code non managé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary>L'appelant nettoie la pile. Cette procédure active les fonctions d'appel avec <see langword="varargs" /> qu'il convient d'utiliser pour les méthodes qui acceptent un nombre variable de paramètres tels que <see langword="Printf" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary>Cette conversion d'appel n'est pas prise en charge.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary>L'appelé nettoie la pile.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary>Le premier paramètre est le pointeur <see langword="this" /> et est stocké dans le Registre ECX. D'autres paramètres font l'objet d'un push sur la pile. Cette convention d'appel est utilisée pour appeler des méthodes sur des classes exportées à partir d'une DLL non managée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary>Ce membre n'est pas réellement une convention d'appel mais il utilise en revanche la convention d'appel de code non managé par défaut. Par exemple, sur Windows x86, le champ par défaut est <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" /> et sur Linux x86, il s'agit du champ <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary>Indique le type d'interface de classe à générer pour une classe exposée à COM, si une interface est effectivement générée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> avec la valeur d'énumération <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> spécifiée.</summary>
      <param name="classInterfaceType">Décrit le type d'interface qui est généré pour une classe.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> avec le membre de l'énumération <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> spécifié.</summary>
      <param name="classInterfaceType">Une des valeurs <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> qui décrit le type d'interface qui est généré pour une classe.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary>Obtient la valeur <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> qui décrit le type d'interface qui doit être généré pour la classe.</summary>
      <returns>Valeur <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" /> qui décrit le type d'interface qui doit être généré pour la classe.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary>Identifie le type d'interface de classe qui est généré pour une classe.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary>
        <para>Indique que la classe ne prend en charge que la liaison tardive pour des clients COM. Une <see langword="dispinterface" /> pour la classe est automatiquement exposée aux clients COM à la demande. La bibliothèque de types générée par l’outil Tlbexp.exe (exportateur de bibliothèques de types) ne contient pas d’informations de type pour la <see langword="dispinterface" /> afin d’empêcher les clients de mettre en cache les DISPID de l’interface. La <see langword="dispinterface" /> ne présente pas les problèmes de versioning décrits dans <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> car les clients ne peuvent se lier à l'interface que par liaison tardive.</para>
        <para>Il s’agit d’un paramètre par défaut pour <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary>Indique qu'une interface de classe double est automatiquement générée pour la classe et exposée à COM. Les informations de type sont générées pour l'interface de classe et publiées dans la bibliothèque de types. L'utilisation de <see langword="AutoDual" /> est fortement déconseillée en raison des limitations de versioning décrites dans <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary>Indique qu'aucune interface de classe n'est générée pour la classe. Si aucune interface n'est explicitement implémentée, la classe ne permet que l'accès par liaison tardive à l'aide de l'interface <see langword="IDispatch" />. Il s'agit du paramètre recommandé pour <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />. L'utilisation de <see langword="ClassInterfaceType.None" /> est la seule manière d'exposer les fonctionnalités via des interfaces implémentées explicitement par la classe.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary>Spécifie l'identificateur de classe d'une coclasse importée à partir d'une bibliothèque de types.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> avec l'identificateur de classe de la coclasse d'origine.</summary>
      <param name="coClass">
        <see cref="T:System.Type" /> contenant l'identificateur de classe de la coclasse d'origine.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary>Obtient l'identificateur de classe de la coclasse d'origine.</summary>
      <returns>
        <see cref="T:System.Type" /> contenant l'identificateur de classe de la coclasse d'origine.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CollectionsMarshal">
      <summary>Classe non sécurisé qui fournit un ensemble de méthodes pour accéder aux représentations de données sous-jacentes des collections.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})">
      <summary>Obtient une vue <see cref="T:System.Span`1" /> sur les données dans une liste.
Les éléments ne doivent pas être ajoutés ou supprimés du <see cref="T:System.Collections.Generic.List`1" /> lorsque <see cref="T:System.Span`1" /> est en cours d’utilisation.</summary>
      <param name="list">Liste à partir de laquelle créer le <see cref="T:System.Span`1" /></param>
      <typeparam name="T">Type des éléments de la liste.</typeparam>
      <returns>Instance <see cref="T:System.Span`1" /> sur le <see cref="T:System.Collections.Generic.List`1" /></returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary>Indique l’alias COM pour un type de paramètre ou de champ.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" /> avec l'alias du champ ou du paramètre avec attributs.</summary>
      <param name="alias">L'alias du champ ou du paramètre tel qu'il figurait dans la bibliothèque de types au moment de son importation.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary>Obtient l'alias du champ ou du paramètre tel qu'il figurait dans la bibliothèque de types au moment de son importation.</summary>
      <returns>L'alias du champ ou du paramètre tel qu'il figurait dans la bibliothèque de types au moment de son importation.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary>Autorise l’inscription à liaison tardive d’un gestionnaire d’événements.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> en utilisant le type spécifié et un nom d’événement sur le type.</summary>
      <param name="type">Type d’objet.</param>
      <param name="eventName">Nom d’un événement sur <paramref name="type" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary>Joint un gestionnaire d’événements à un objet COM.</summary>
      <param name="target">Objet cible avec lequel le délégué d’événement doit créer une liaison.</param>
      <param name="handler">Délégué d’événement.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary>Obtient la méthode utilisée pour ajouter un délégué de gestionnaires d’événements à la source de l’événement.</summary>
      <param name="nonPublic">
        <see langword="true" /> pour retourner des méthodes non publiques ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> est <see langword="true" />, la méthode utilisée pour ajouter un délégué de gestionnaire d’événements est non publique mais l’appelant n’est pas autorisé à refléter les méthodes non publiques.</exception>
      <returns>Méthode utilisée pour ajouter un délégué de gestionnaires d’événements à la source de l’événement.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary>En cas de substitution dans une classe dérivée, obtient un tableau qui contient tous les attributs personnalisés appliqués à ce membre.</summary>
      <param name="inherit">
        <see langword="true" /> pour rechercher la chaîne d’héritage de ce membre afin de trouver les attributs ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.InvalidOperationException">Ce membre appartient à un type qui est chargé dans le contexte de réflexion uniquement. Voir Guide pratique pour charger des assemblys dans le contexte de réflexion uniquement.</exception>
      <exception cref="T:System.TypeLoadException">Un type d’attribut personnalisé ne peut pas être chargé.</exception>
      <returns>Tableau contenant tous les attributs personnalisés ou tableau ne contenant aucun élément si aucun attribut n’a été défini.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary>En cas de substitution dans une classe dérivée, obtient un tableau qui contient tous les attributs personnalisés du type spécifié qui sont appliqués à ce membre.</summary>
      <param name="attributeType">Type d’attribut à rechercher. Seuls les attributs pouvant être assignés à ce type peuvent être retournés.</param>
      <param name="inherit">
        <see langword="true" /> pour rechercher la chaîne d’héritage de ce membre afin de trouver les attributs ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="attributeType" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Ce membre appartient à un type qui est chargé dans le contexte de réflexion uniquement. Consultez Guide pratique pour charger des assemblys dans le contexte de réflexion uniquement</exception>
      <exception cref="T:System.TypeLoadException">Un type d’attribut personnalisé ne peut pas être chargé.</exception>
      <returns>Tableau contenant tous les attributs personnalisés du type spécifié ou tableau ne contenant aucun élément si aucun attribut n’a été défini.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData">
      <summary>Retourne une liste d’objets <see cref="T:System.Reflection.CustomAttributeData" /> pour le <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> actif.</summary>
      <returns>Liste générique d’objets <see cref="T:System.Reflection.CustomAttributeData" /> représentant des données sur les attributs qui ont été appliqués au <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> actif.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)">
      <summary>Retourne les méthodes publiques ou non publiques qui ont été associées à un événement dans les métadonnées.</summary>
      <param name="nonPublic">
        <see langword="true" /> pour inclure les méthodes non publiques ; sinon, <see langword="false" />.</param>
      <returns>Tableau représentant les méthodes qui ont été associées à l’événement dans les métadonnées. En l’absence de telles méthodes, un tableau vide est retourné.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary>En cas de substitution dans une classe dérivée, retourne la méthode appelée lorsque l’événement a été déclenché.</summary>
      <param name="nonPublic">
        <see langword="true" /> pour retourner des méthodes non publiques ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> est <see langword="true" />, la méthode utilisée pour ajouter un délégué de gestionnaire d’événements est non publique mais l’appelant n’est pas autorisé à refléter les méthodes non publiques.</exception>
      <returns>Objet appelé lorsque l’événement a été déclenché.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary>En cas de substitution dans une classe dérivée, récupère l’objet <see cref="T:System.Reflection.MethodInfo" /> pour supprimer une méthode de l’événement.</summary>
      <param name="nonPublic">
        <see langword="true" /> pour retourner des méthodes non publiques ; sinon, <see langword="false" />.</param>
      <exception cref="T:System.MethodAccessException">
        <paramref name="nonPublic" /> est <see langword="true" />, la méthode utilisée pour ajouter un délégué de gestionnaire d’événements est non publique mais l’appelant n’est pas autorisé à refléter les méthodes non publiques.</exception>
      <returns>Méthode utilisée pour supprimer un délégué de gestionnaires d’événements de la source d’événements.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary>Indique si une ou plusieurs instances de l’attribut spécifié sont appliquées à ce membre.</summary>
      <param name="attributeType">Type d’attribut à rechercher.</param>
      <param name="inherit">
        <see langword="true" /> pour rechercher la chaîne d’héritage de ce membre afin de trouver les attributs ; sinon, <see langword="false" />.</param>
      <returns>
        <see langword="true" /> si l’attribut spécifié a été appliqué à ce membre ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary>Détache un gestionnaire d’événements à partir d’un objet COM.</summary>
      <param name="target">Objet cible auquel le délégué d’événement est lié.</param>
      <param name="handler">Délégué d’événement.</param>
      <exception cref="T:System.InvalidOperationException">L’événement ne dispose pas d’un accesseur <see langword="remove" /> public.</exception>
      <exception cref="T:System.ArgumentException">Impossible d’utiliser le gestionnaire qui a été transmis.</exception>
      <exception cref="T:System.Reflection.TargetException">
        <block subset="none" type="note">
          <para>  
 Dans .NET pour les applications du Windows Store ou la Bibliothèque de classes portable, interceptez <see cref="T:System.Exception" /> à la place.</para>
        </block>  
  
 Le paramètre <paramref name="target" /> a la valeur <see langword="null" /> et l’événement n’est pas statique.  
  
- ou - 
Le <see cref="T:System.Reflection.EventInfo" /> n’est pas déclaré dans la cible.</exception>
      <exception cref="T:System.MethodAccessException">
        <block subset="none" type="note">
          <para>  
 Dans .NET pour les applications du Windows Store ou la Bibliothèque de classes portable, interceptez l’exception de la classe de base, <see cref="T:System.MemberAccessException" />, à la place.</para>
        </block>  
  
 L’appelant n’est pas autorisé à accéder au membre.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary>Obtient les attributs de cet événement.</summary>
      <returns>Attributs en lecture seule de cet événement.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary>Obtient la classe qui déclare ce membre.</summary>
      <returns>Objet <see cref="T:System.Type" /> de la classe qui déclare ce membre.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.MetadataToken">
      <summary>Obtient le jeton de métadonnées associé à l’objet <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> actif.</summary>
      <returns>Entier 32 bits qui représente le jeton de métadonnées.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Module">
      <summary>Obtient le module associé à l’objet <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> actif.</summary>
      <returns>Module associé à l’objet en cours <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> .</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary>Obtient le nom du membre actuel.</summary>
      <returns>Nom de ce membre.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary>Obtient l’objet de classe utilisé pour initialiser cette instance.</summary>
      <returns>Objet <see cref="T:System.Type" /> qui a été utilisé pour initialiser l'objet actif.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary>Indique à un client COM que toutes les classes de la version actuelle d'un assembly sont compatibles avec les classes d'une version précédente de l'assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" /> avec les numéros de version principale, de version secondaire, de build et de révision de l'assembly.</summary>
      <param name="major">Numéro de version principale de l'assembly.</param>
      <param name="minor">Numéro de version secondaire de l'assembly.</param>
      <param name="build">Numéro de build de l'assembly.</param>
      <param name="revision">Numéro de révision de l'assembly.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary>Obtient le numéro de build de l'assembly.</summary>
      <returns>Numéro de build de l'assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary>Obtient le numéro de version principale de l'assembly.</summary>
      <returns>Numéro de version principale de l'assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary>Obtient le numéro de version secondaire de l'assembly.</summary>
      <returns>Numéro de version secondaire de l'assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary>Obtient le numéro de révision de l'assembly.</summary>
      <returns>Numéro de révision de l'assembly.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary>Indique que des informations se rapportant à une classe ou à une interface ont été perdues lors de l’importation d’une bibliothèque de types vers un assembly.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see langword="ComConversionLossAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary>Spécifie une interface par défaut à exposer à COM. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" /> avec l'objet <see cref="T:System.Type" /> spécifié comme interface par défaut exposée à COM.</summary>
      <param name="defaultInterface">Valeur <see cref="T:System.Type" /> indiquant l'interface par défaut à exposer à COM.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary>Obtient l'objet <see cref="T:System.Type" /> qui spécifie l'interface par défaut à exposer à COM.</summary>
      <returns>Objet <see cref="T:System.Type" /> qui spécifie l'interface par défaut à exposer à COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary>Identifie l'interface source et la classe implémentant les méthodes de l'interface d'événement qui est générée quand une coclasse est importée à partir d'une bibliothèque de types COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" /> avec l'interface source et la classe du fournisseur d'événements.</summary>
      <param name="SourceInterface">
        <see cref="T:System.Type" /> contenant l'interface source d'origine de la bibliothèque de types. COM utilise cette interface pour rappeler la classe managée.</param>
      <param name="EventProvider">
        <see cref="T:System.Type" /> qui contient la classe implémentant les méthodes de l'interface d'événement.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary>Obtient la classe qui implémente les méthodes de l'interface d'événement.</summary>
      <returns>
        <see cref="T:System.Type" /> qui contient la classe implémentant les méthodes de l'interface d'événement.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary>Obtient l'interface source d'origine de la bibliothèque de types.</summary>
      <returns>
        <see cref="T:System.Type" /> contenant l'interface source.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary>Fournit des méthodes qui permettent d'ajouter à des objets COM, et de supprimer de ces derniers, les délégués .NET Framework qui gèrent des événements.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>Ajoute un délégué à la liste d'appel des événements provenant d'un objet COM.</summary>
      <param name="rcw">Objet COM qui déclenche les événements auxquels l'appelant veut répondre.</param>
      <param name="iid">Identificateur de l'interface source utilisée par l'objet COM pour déclencher des événements.</param>
      <param name="dispid">Identificateur de dispatch de la méthode pour l'interface source.</param>
      <param name="d">Délégué à appeler lorsque l'événement COM est déclenché.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary>Supprime un délégué dans la liste d'appel des événements provenant d'un objet COM.</summary>
      <param name="rcw">Objet COM auquel le délégué est attaché.</param>
      <param name="iid">Identificateur de l'interface source utilisée par l'objet COM pour déclencher des événements.</param>
      <param name="dispid">Identificateur de dispatch de la méthode pour l'interface source.</param>
      <param name="d">Délégué à supprimer dans la liste d'appel.</param>
      <returns>Délégué supprimé de la liste d'appel.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary>Exception levée quand un HRESULT non reconnu est retourné d'un appel de méthode COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.COMException" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.COMException" /> à partir de données de sérialisation.</summary>
      <param name="info">Objet <see cref="T:System.Runtime.Serialization.SerializationInfo" /> qui contient les données sérialisées de l'objet.</param>
      <param name="context">Objet <see cref="T:System.Runtime.Serialization.StreamingContext" /> qui contient des informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.COMException" /> avec le message spécifié.</summary>
      <param name="message">Message qui indique la raison de l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.COMException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.COMException" /> avec un message et un code d'erreur spécifiés.</summary>
      <param name="message">Message indiquant la raison pour laquelle l'exception s'est produite.</param>
      <param name="errorCode">Valeur de code d'erreur (HRESULT) associée à cette exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary>Convertit le contenu de l'exception en chaîne.</summary>
      <returns>Chaîne contenant les propriétés <see cref="P:System.Exception.HResult" />, <see cref="P:System.Exception.Message" />, <see cref="P:System.Exception.InnerException" /> et <see cref="P:System.Exception.StackTrace" /> de l'exception.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary>Indique que le type avec attributs a déjà été défini dans COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary>Initialise une nouvelle instance de l'objet <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary>Identifie comment exposer une interface à COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary>Indique que l’interface est exposée à COM en tant qu’interface double, ce qui permet à la fois une liaison anticipée et une liaison tardive. <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" /> est la valeur par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary>Indique que l’interface est exposée à COM en tant qu’interface dispinterface, ce qui permet uniquement la liaison tardive.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary>Indique que l’interface est exposée à COM en tant qu’interface Windows Runtime.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary>Indique qu’une interface est exposée à COM en tant qu’interface dérivée de IUnknown, ce qui permet uniquement une liaison anticipée.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary>Décrit le type d'un membre COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary>Le membre est une méthode normale.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary>Le membre obtient des propriétés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary>Le membre définit des propriétés.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary>Spécifie la méthode à appeler quand vous inscrivez un assembly pour utilisation à partir de COM ; cela permet l'exécution de code écrit par l'utilisateur pendant le processus d'inscription.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary>Identifie une liste d'interfaces qui sont exposées en tant que sources d'événements COM pour la classe avec attributs.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> avec le nom de l'interface de source d'événements.</summary>
      <param name="sourceInterfaces">Liste délimitée par une valeur null de noms qualifiés complets d'interfaces de source d'événements.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> avec le type à utiliser comme interface source.</summary>
      <param name="sourceInterface">Type <see cref="T:System.Type" /> de l'interface source.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> avec les types à utiliser comme interfaces sources.</summary>
      <param name="sourceInterface1">Type <see cref="T:System.Type" /> de l'interface source par défaut.</param>
      <param name="sourceInterface2">Type <see cref="T:System.Type" /> d'une interface source.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see langword="ComSourceInterfacesAttribute" /> avec les types à utiliser comme interfaces sources.</summary>
      <param name="sourceInterface1">Type <see cref="T:System.Type" /> de l'interface source par défaut.</param>
      <param name="sourceInterface2">Type <see cref="T:System.Type" /> d'une interface source.</param>
      <param name="sourceInterface3">Type <see cref="T:System.Type" /> d'une interface source.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" /> avec les types à utiliser comme interfaces sources.</summary>
      <param name="sourceInterface1">Type <see cref="T:System.Type" /> de l'interface source par défaut.</param>
      <param name="sourceInterface2">Type <see cref="T:System.Type" /> d'une interface source.</param>
      <param name="sourceInterface3">Type <see cref="T:System.Type" /> d'une interface source.</param>
      <param name="sourceInterface4">Type <see cref="T:System.Type" /> d'une interface source.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary>Obtient le nom qualifié complet de l'interface de source d'événements.</summary>
      <returns>Nom qualifié complet de l'interface de source d'événements.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary>Spécifie le comportement demandé au moment de la configuration d'un récepteur de notifications ou d'une connexion de mise en cache avec un objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary>Pour les connexions de notifications de données, vérifiez l'accessibilité des données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary>Pour les connexions de notifications de données (<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> ou <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />), cet indicateur demande à l'objet de données de ne pas envoyer de données lorsqu'il appelle <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary>Demande que l'objet effectue une seule notification de modifications ou mise à jour de cache avant de supprimer la connexion.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary>Demande que l'objet n'attende pas la modification des données ou de l'affichage pour lancer un appel initial à <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> (pour les connexions de notifications de données ou d'affichage) ou pour mettre à mettre à jour le cache (pour les connexions de cache).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary>Cette valeur est utilisée par les applications d'objet DLL et les gestionnaires d'objets qui dessinent leurs objets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary>Synonyme de <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" />, qui est utilisé le plus fréquemment.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary>Pour les connexions de cache, cet indicateur ne met à jour la représentation mise en cache que si l'objet qui contient le cache est enregistré.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary>Stocke les paramètres utilisés pendant une opération de liaison de moniker.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary>Spécifie la taille de la structure <see langword="BIND_OPTS" /> en octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary>Indique la période (heure de l'horloge en millisecondes, telle que retournée par la fonction <see langword="GetTickCount" />) afin que l'appelant spécifié termine l'opération de liaison.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary>Contrôle les aspects des opérations de liaison de moniker.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary>Représente les indicateurs devant être utilisés lors de l'ouverture du fichier qui contient l'objet identifié par le moniker.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary>Contient un pointeur vers une structure <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> liée, une structure <see cref="T:System.Runtime.InteropServices.VARDESC" /> ou une interface <see langword="ITypeComp" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary>Représente un pointeur vers une structure <see cref="T:System.Runtime.InteropServices.FUNCDESC" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary>Représente un pointeur vers une interface <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary>Représente un pointeur vers une structure <see cref="T:System.Runtime.InteropServices.VARDESC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary>Identifie la convention d’appel utilisée par une méthode décrite dans une structure METHODDATA.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary>Indique que la convention d’appel de déclaration C (CDECL) est utilisée pour une méthode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary>Indique que la convention d’appel Macintosh Pascal (MACPASCAL) est utilisée pour une méthode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary>Indique la fin de l’énumération <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary>Indique que la convention d’appel Macintosh Programmers’ Workbench (MPW) CDECL est utilisée pour une méthode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary>Indique que la convention d’appel Macintosh Programmers’ Workbench (MPW) PASCAL est utilisée pour une méthode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary>Indique que la convention d’appel MSC Pascal (MSCPASCAL) est utilisée pour une méthode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary>Indique que la convention d’appel Pascal est utilisée pour une méthode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary>Cette valeur est réservée à une utilisation ultérieure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary>Indique que la convention d’appel standard (STDCALL) est utilisée pour une méthode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary>Indique que la convention d’appel SYSCALL standard est utilisée pour une méthode.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary>Décrit une connexion existante à un point de connexion donnée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary>Représente un jeton de connexion retourné à partir d'un appel à <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary>Représente un pointeur vers l'interface <see langword="IUnknown" /> sur un récepteur de notifications connecté. L'appelant doit appeler <see langword="IUnknown::Release" /> sur ce pointeur lorsque la structure <see langword="CONNECTDATA" /> n'est plus nécessaire.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary>Spécifie la direction du flux de données dans le paramètre <paramref name="dwDirection" /> de la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" />. Ce paramètre détermine les formats que l'énumérateur résultant peut énumérer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary>Demande que <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> fournisse un énumérateur pour les formats pouvant être spécifiés dans <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary>Demande que <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> fournisse un énumérateur pour les formats pouvant être spécifiés dans <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary>Identifie la description de type liée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary>Indique qu'une structure <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> a été retournée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary>Indique que <see langword="IMPLICITAPPOBJ" /> a été retourné.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary>Indique un marqueur de fin d'énumération.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary>Indique qu'aucune correspondance n'a été trouvée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary>Indique que <see langword="TYPECOMP" /> a été retourné.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary>Indique que <see langword="VARDESC" /> a été retourné.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary>Contient les arguments passés à une méthode ou propriété par <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary>Représente le nombre d'arguments.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary>Représente le nombre d’arguments nommés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary>Représente les ID de dispatch des arguments nommés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary>Représente une référence à un tableau d'arguments.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary>Spécifie l'aspect des données ou de l'affichage voulu de l'objet pendant le dessin ou l'obtention de données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary>Représentation d'un objet qui permet son affichage en tant qu'objet incorporé dans un conteneur. Cette valeur est généralement spécifiée pour des objets de document composé. La présentation peut être fournie pour l'écran ou l'imprimante.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary>Représentation d’un objet à l’écran comme s’il était reproduit sur une imprimante à l’aide de la commande Imprimer du menu Fichier. Les données décrites peuvent représenter une séquence de pages.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary>Représentation iconique d'un objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary>Représentation miniature d'un objet qui permet son affichage dans un outil de navigation. La miniature est une bitmap d'environ 120 x 120 pixels, 16 couleurs (recommandé), indépendant du périphérique éventuellement encapsulé dans un métafichier.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary>Contient la description de type et les informations de transfert de processus pour une variable, une fonction ou un paramètre de fonction.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary>Contient des informations sur un élément.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary>Identifie le type de l'élément.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary>Contient des informations sur un élément.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary>Contient des informations de communication à distance avec l'élément.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary>Contient des informations sur le paramètre.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary>Décrit les exceptions qui se produisent pendant <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary>Décrit l'erreur destinée au client.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary>Contient le lecteur, le chemin d'accès et le nom de fichier complets d'un fichier d'aide contenant davantage d'informations sur l'erreur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary>Indique le nom de la source de l'exception. Généralement, il s'agit d'un nom d'application.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary>Indique l'ID de contexte d'aide de la rubrique dans le fichier d'aide.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary>Représente un pointeur vers une fonction qui accepte une structure <see cref="T:System.Runtime.InteropServices.EXCEPINFO" /> comme argument et retourne une valeur HRESULT. Si un remplissage différé n'est pas souhaité, ce champ a la valeur <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary>Ce champ est réservé ; il doit avoir la valeur <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary>Valeur de retour décrivant l'erreur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary>Représente un code d'erreur identifiant l'erreur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary>Ce champ est réservé ; il doit avoir la valeur 0.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary>Représente le nombre d'intervalles de 100 nanosecondes depuis le 1er janvier 1601. Cette structure est une valeur 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary>Spécifie 32 bits de poids fort de <see langword="FILETIME" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary>Spécifie 32 bits de poids faible de <see langword="FILETIME" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary>Représente un format de Presse-papiers généralisé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary>Spécifie le format Presse-papiers pertinent.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary>Spécifie une des constantes d'énumération <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" /> indiquant la quantité de détails qui doit être contenue dans le rendu.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary>Spécifie une partie de l'aspect lorsqu'un saut de page doit être inséré à l'intérieur des données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary>Spécifie un pointeur vers une structure <see langword="DVTARGETDEVICE" /> contenant des informations relatives au périphérique cible pour lequel les données sont composées.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary>Spécifie l'une des constantes d'énumération <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> qui indiquent le type de support de stockage utilisé pour transférer les données de l'objet.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary>Définit une description de fonction.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary>Retourne la convention d'appel d'une fonction.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary>Compte le nombre total de paramètres.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary>Compte les paramètres facultatifs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary>Compte les valeurs de retour permises.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary>Contient le type de retour de la fonction.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary>Spécifie si la fonction est virtuelle, statique ou de répartition uniquement.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary>Spécifie le type d'une fonction de propriété.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary>Indique la taille de <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary>Stocke le nombre d'erreurs qu'une fonction peut retourner sur un système 16 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary>Identifie l'ID d'une fonction membre.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary>Spécifie l'offset dans la VTBL pour <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary>Indique le <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> d'une fonction.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary>Identifie les constantes qui définissent les propriétés d'une fonction.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary>Fonction qui prend en charge la liaison de données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary>Fonction qui représente le mieux l'objet. Seule une fonction de type peut posséder cet attribut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary>Permet une optimisation dans laquelle le compilateur recherche un membre nommé « xyz » sur le type « abc ». Si ce membre est trouvé et s'il est marqué comme fonction d'accesseur pour un élément de la collection par défaut, un appel à cette fonction membre est généré. Autorisé sur les membres dans des dispinterfaces et des interfaces ; non autorisé sur des modules.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary>Fonction qui est affichée à l'utilisateur comme pouvant être liée. Vous devez également définir <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary>La fonction existe et elle peut être liée mais elle ne doit pas être visible à l'utilisateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary>Mappé comme des propriétés individuelles pouvant être liées.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary>La propriété est affichée dans un explorateur d'objets, mais pas dans un explorateur de propriétés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary>Marque l’interface comme ayant des comportements par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary>Lorsque défini, tout appel à une méthode définissant la propriété résulte d'abord en un appel à <see langword="IPropertyNotifySink::OnRequestEdit" />. L'implémentation de <see langword="OnRequestEdit" /> détermine si l'appel a l'autorisation de définir la propriété.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary>La fonction ne doit pas être accessible à partir de langages de macro. Cet indicateur est destiné à des fonctions de niveau système ou à des fonctions que les explorateurs de types ne doivent pas afficher.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary>Cette fonction retourne un objet qui est une source d'événements.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary>Le membre d'informations de type est le membre par défaut à afficher dans l'interface utilisateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary>La fonction prend en charge <see langword="GetLastError" />. Si une erreur se produit pendant la fonction, l'appelant peut appeler <see langword="GetLastError" /> pour récupérer le code d'erreur.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary>Définit comment accéder à une fonction.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary>La fonction est accessible uniquement par l'intermédiaire de <see langword="IDispatch" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary>La fonction est accessible par une adresse <see langword="static" /> et accepte un pointeur <see langword="this" /> implicite.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary>La fonction est accessible par l'intermédiaire de la table de fonctions virtuelles (VTBL, virtual function table) et accepte un pointeur <see langword="this" /> implicite.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary>La fonction est accessible par une adresse <see langword="static" /> et n'accepte pas de pointeur <see langword="this" /> implicite.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary>La fonction est accessible de la même manière que <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" /> sauf qu'elle possède une implémentation.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary>Fournit une définition managée de l'interface <see langword="IAdviseSink" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary>Avertit tous les récepteurs de notifications enregistrés que l'objet n'est plus exécuté, mais simplement chargé.  Cette méthode est appelée par un serveur.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Avertit tous les récepteurs de notifications actuellement enregistré des objets de données que des données contenues dans l'objet ont été modifiées.</summary>
      <param name="format">
        <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passé par référence, qui décrit les informations sur le format, le périphérique cible, le rendu et le stockage de l'objet de données appelant.</param>
      <param name="stgmedium">
        <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passé par référence, qui définit le support de stockage (mémoire globale, fichier sur disque, objet de stockage, objet de flux, l'interface graphique GDI (Graphics Device Interface) ou indéfini) ainsi que la propriété de ce support pour l'objet de données appelant.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Avertit tous les récepteurs de notifications enregistrés que l'objet a été renommé. Cette méthode est appelée par un serveur.</summary>
      <param name="moniker">Pointeur vers l'interface <see langword="IMoniker" /> sur le nouveau moniker complet de l'objet.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary>Avertit tous les récepteurs de notifications enregistrés que l'objet a été enregistré. Cette méthode est appelée par un serveur.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary>Avertit les récepteurs de notifications enregistrés d'un objet que son affichage a été modifié. Cette méthode est appelée par un serveur.</summary>
      <param name="aspect">Aspect, ou affichage, de l'objet. Contient une valeur extraite de l'énumération <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" />.</param>
      <param name="index">Partie de l'affichage qui a été modifiée. Actuellement, seule la valeur -1 est valide.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary>Fournit la définition managée de l'interface <see langword="IBindCtx" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>Énumère les chaînes correspondant aux clés de la table de paramètres d'objets contextuels mise à jour en interne.</summary>
      <param name="ppenum">Lorsque cette méthode retourne une valeur, contient une référence à l'énumérateur du paramètre de l'objet. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>Retourne les options de liaison en cours stockées dans le contexte de liaison actuel.</summary>
      <param name="pbindopts">Pointeur vers la structure qui doit recevoir les options de liaison.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary>Recherche la clé donnée dans la table de paramètres d'objets contextuels mise à jour en interne et retourne l'objet correspondant, s'il existe.</summary>
      <param name="pszKey">Nom de l'objet à rechercher.</param>
      <param name="ppunk">Lorsque cette méthode retourne une valeur, contient le pointeur d'interface de l'objet. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary>Retourne l'accès à la table ROT (Running Object Table) appropriée pour ce processus de liaison.</summary>
      <param name="pprot">Lorsque cette méthode retourne une valeur, contient une référence à la table ROT (Running Object Table). Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary>Inscrit l'objet passé comme l'un des objets liés durant une opération de moniker et devant être libéré à la fin de l'opération.</summary>
      <param name="punk">Objet à inscrire comme devant être libéré.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary>Inscrit le pointeur d'objet spécifié sous le nom donné dans la table de pointeurs d'objets mise à jour en interne.</summary>
      <param name="pszKey">Nom sous lequel inscrire <paramref name="punk" />.</param>
      <param name="punk">Objet à inscrire.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary>Libère tous les objets actuellement inscrits dans le contexte de liaison par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary>Supprime l'objet du jeu d'objets inscrits à libérer.</summary>
      <param name="punk">Objet dont l'inscription doit être annulée pour sa libération.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary>Révoque l'inscription de l'objet figurant actuellement sous la clé spécifiée dans la table de paramètres d'objets contextuels mise à jour en interne, si cette clé est inscrite actuellement.</summary>
      <param name="pszKey">Clé dont l'inscription doit être annulée.</param>
      <returns>Valeur <see langword="S_OK" /><see langword="HRESULT" /> si la clé spécifiée a été supprimée de la table ; sinon, valeur <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary>Stocke un bloc de paramètres dans le contexte de liaison. Ces paramètres s'appliqueront aux opérations <see langword="UCOMIMoniker" /> ultérieures utilisant ce contexte de liaison.</summary>
      <param name="pbindopts">Structure contenant les options de liaison à définir.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary>Fournit la définition managée de l'interface <see langword="IConnectionPoint" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary>Établit une connexion de notifications entre le point de connexion et l'objet récepteur de l'appelant.</summary>
      <param name="pUnkSink">Référence au récepteur qui doit recevoir les appels pour l'interface sortante gérée par ce point de connexion.</param>
      <param name="pdwCookie">Lorsque cette méthode est retournée, contient le cookie de connexion. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>Crée un objet énumérateur pour l'itération par le biais des connexions qui existent avec ce point de connexion.</summary>
      <param name="ppEnum">Lorsque cette méthode retourne une valeur, contient le nouvel énumérateur créé. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary>Retourne l'IID pour l'interface sortante managée par ce point de connexion.</summary>
      <param name="pIID">Lorsque ce paramètre retourne une valeur, contient l'IID de l'interface sortante gérée par ce point de connexion. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary>Récupère le pointeur d'interface <see langword="IConnectionPointContainer" /> vers l'objet connectable qui est le propriétaire conceptuel de ce point de connexion.</summary>
      <param name="ppCPC">Lorsque ce paramètre retourne une valeur, contient l'interface <see langword="IConnectionPointContainer" /> de l'objet connectable. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary>Arrête une connexion de notifications précédemment établie par le biais de la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />.</summary>
      <param name="dwCookie">Cookie de connexion précédemment retourné par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary>Fournit la définition managée de l'interface <see langword="IConnectionPointContainer" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>Crée un énumérateur de tous les points de connexion pris en charge dans l'objet connectable, avec un point de connexion par IID.</summary>
      <param name="ppEnum">Lorsque cette méthode retourne une valeur, contient le pointeur d'interface de l'énumérateur. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary>Vérifie si l'objet connectable possède un point de connexion pour un IID spécifique et, si tel est le cas, retourne l'interface de pointeur <see langword="IConnectionPoint" /> pour ce point de connexion.</summary>
      <param name="riid">Référence à l'IID d'interface sortante dont le point de connexion est demandé.</param>
      <param name="ppCP">Lorsque cette méthode retourne une valeur, contient le point de connexion qui gère l'interface sortante <paramref name="riid" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary>Fournit la définition managée de l'interface <see langword="IDataObject" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary>Crée une connexion entre un objet de données et un récepteur de notifications. Cette méthode est appelée par un objet qui prend en charge un récepteur de notifications et elle lui permet d'être averti des modifications apportées aux données de l'objet.</summary>
      <param name="pFormatetc">Structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passée par référence, qui définit le format, le périphérique cible, l'aspect et le support qui seront utilisés pour les futures notifications.</param>
      <param name="advf">L'une des valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> spécifiant un groupe d'indicateurs pour le contrôle de la connexion de notifications.</param>
      <param name="adviseSink">Pointeur vers l'interface <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> sur le récepteur de notifications qui recevra la notification de modifications.</param>
      <param name="connection">Cette méthode retourne un pointeur vers un jeton DWORD qui identifie cette connexion. Vous pouvez utiliser ultérieurement ce jeton pour supprimer la connexion de notifications en le passant à <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" />. Si cette valeur est nulle, la connexion n'a pas été établie. Ce paramètre est passé sans être initialisé.</param>
      <returns>Cette méthode prend en charge les valeurs de retour E_INVALIDARG, E_UNEXPECTED et E_OUTOFMEMORY standard, ainsi que les suivantes : 
 <list type="table"><listheader><term> Valeur</term><description> Description</description></listheader><item><term> S_OK</term><description> La connexion de notifications a été créée.</description></item><item><term> E_NOTIMPL</term><description> Cette méthode n'est pas implémentée sur l'objet de données.</description></item><item><term> DV_E_LINDEX</term><description> Il existe une valeur non valide pour <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> ; actuellement, seule la valeur -1 est prise en charge.</description></item><item><term> DV_E_FORMATETC</term><description> Il existe une valeur non valide pour le paramètre <paramref name="pFormatetc" />.</description></item><item><term> OLE_E_ADVISENOTSUPPORTED</term><description> L'objet de données ne prend pas en charge la notification de modifications.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary>Détruit une connexion de notifications qui avait été établie précédemment.</summary>
      <param name="connection">Jeton DWORD spécifiant la connexion à supprimer. Utilisez la valeur retournée par <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> quand la connexion a été initialement établie.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>Crée un objet qui peut être utilisé pour énumérer les connexions de notifications actuelles.</summary>
      <param name="enumAdvise">Cette méthode retourne un <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" /> qui reçoit le pointeur d'interface vers le nouvel objet énumérateur. Si l'implémentation définit <paramref name="enumAdvise" /> à <see langword="null" />, il n'existe actuellement aucune connexion aux récepteurs de notifications. Ce paramètre est passé sans être initialisé.</param>
      <returns>Cette méthode prend en charge la valeur de retour E_OUTOFMEMORY standard, ainsi que les suivantes :  
  
 <list type="table"><listheader><term> Valeur</term><description> Description</description></listheader><item><term> S_OK</term><description> L'objet énumérateur est instancié avec succès ou il n'existe aucune connexion.</description></item><item><term> OLE_E_ADVISENOTSUPPORTED</term><description> Cet objet ne prend pas en charge les notifications consultatives.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary>Crée un objet pour l'énumération des structures <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> d'un objet de données. Ces structures sont utilisées dans les appels à <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> ou à <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />.</summary>
      <param name="direction">L'une des valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" /> spécifiant la direction des données.</param>
      <returns>Cette méthode prend en charge les valeurs de retour E_INVALIDARG et E_OUTOFMEMORY standard, ainsi que les suivantes : 
 <list type="table"><listheader><term> Valeur</term><description> Description</description></listheader><item><term> S_OK</term><description> L'objet énumérateur a été créé avec succès.</description></item><item><term> E_NOTIMPL</term><description> La direction spécifiée par le paramètre <paramref name="direction" /> n'est pas prise en charge.</description></item><item><term> OLE_S_USEREG</term><description> Demande qu'OLE énumère les formats à partir du Registre.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Fournit une structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> standard qui équivaut logiquement à une structure plus complexe. Utilisez cette méthode pour déterminer si deux structures <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> différentes retourneraient les mêmes données, rendant ainsi superflu le rendu en double.</summary>
      <param name="formatIn">Pointeur vers une structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passée par référence, qui définit le format, le support et le périphérique cible que l'appelant souhaite utiliser pour récupérer des données dans un appel suivant, tel que <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. Le membre <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> n'est pas significatif dans ce cas et doit être ignoré.</param>
      <param name="formatOut">Quand cette méthode retourne une valeur, contient un pointeur vers une structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> qui contient les informations les plus générales possibles pour un rendu spécifique, en le rendant canoniquement équivalent à <c>formatetcIn</c>. L'appelant doit allouer cette structure et la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" /> doit remplir les données. Pour récupérer des données dans un appel suivant, tel que <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />, l'appelant utilise la valeur fournie de <paramref name="formatOut" />, à moins que la valeur fournie ne soit <see langword="null" />. Cette valeur est <see langword="null" /> si la méthode retourne <see langword="DATA_S_SAMEFORMATETC" />. Le membre <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> n'est pas significatif dans ce cas et doit être ignoré. Ce paramètre est passé sans être initialisé.</param>
      <returns>Cette méthode prend en charge les valeurs de retour E_INVALIDARG, E_UNEXPECTED et E_OUTOFMEMORY standard, ainsi que les suivantes : 
 <list type="table"><listheader><term> Valeur</term><description> Description</description></listheader><item><term> S_OK</term><description> La structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> retournée est différente de celle qui a été passée.</description></item><item><term> DATA_S_SAMEFORMATETC</term><description> Les structures <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> sont identiques et la valeur <see langword="null" /> est retournée dans le paramètre <paramref name="formatOut" />.</description></item><item><term> DV_E_LINDEX</term><description> Il existe une valeur non valide pour <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> ; actuellement, seule la valeur -1 est prise en charge.</description></item><item><term> DV_E_FORMATETC</term><description> Il existe une valeur non valide pour le paramètre <paramref name="pFormatetc" />.</description></item><item><term> OLE_E_NOTRUNNING</term><description> L'application n'est pas en cours d'exécution.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtient des données à partir d'un objet de données source. La méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> qui est appelée par un consommateur de données rend les données décrites dans la structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> spécifiée et les transfère par l'intermédiaire de la structure <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> spécifiée. L'appelant est ensuite chargé de libérer la structure <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />.</summary>
      <param name="format">Pointeur vers une structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passée par référence, qui définit le format, le support et le périphérique cible à utiliser lors du passage des données. Il est possible de spécifier plusieurs supports à l'aide de l'opérateur booléen OR, en autorisant la méthode à choisir le support le mieux adapté parmi ceux spécifiés.</param>
      <param name="medium">Cette méthode retourne un pointeur vers la structure <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> qui indique le support de stockage contenant les données retournées via son membre <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" />, ainsi que la responsabilité de libérer le support via la valeur de son membre <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" />. Si <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> est <see langword="null" />, le récepteur du support est chargé de le libérer ; sinon, <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> pointe vers l'interface <see langword="IUnknown" /> sur l'objet approprié afin que sa méthode <see langword="Release" /> puisse être appelée. Le support doit être alloué et rempli par <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary>Obtient des données à partir d'un objet de données source. Cette méthode, qui est appelée par un consommateur de données, diffère de la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> en ce sens que l'appelant doit allouer et libérer le support de stockage spécifié.</summary>
      <param name="format">Pointeur vers une structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passée par référence, qui définit le format, le support et le périphérique cible à utiliser lors du passage des données. Un seul support peut être spécifié dans <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />, et seules les valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> suivantes sont valides : <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" /> ou <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />.</param>
      <param name="medium">
        <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passé par référence, qui définit le support de stockage contenant les données transférées. Le support doit être alloué par l'appelant et rempli par <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. L'appelant doit également libérer le support. L'implémentation de cette méthode doit toujours fournir une valeur <see langword="null" /> pour le membre <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> de la structure <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /> vers lequel ce paramètre pointe.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary>Détermine si l'objet de données est capable de rendre les données décrites dans la structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />. Les objets qui tentent une opération de collage ou de déplacement peuvent appeler cette méthode avant d'appeler <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> pour obtenir savoir si l'opération a des chances de réussir.</summary>
      <param name="format">Pointeur vers une structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passée par référence, qui définit le format, le support et le périphérique cible à utiliser pour la requête.</param>
      <returns>Cette méthode prend en charge les valeurs de retour E_INVALIDARG, E_UNEXPECTED et E_OUTOFMEMORY standard, ainsi que les suivantes : 
 <list type="table"><listheader><term> Valeur</term><description> Description</description></listheader><item><term> S_OK</term><description> Un appel ultérieur à <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> réussira probablement.</description></item><item><term> DV_E_LINDEX</term><description> Valeur non valide pour <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> ; actuellement, seule la valeur -1 est prise en charge.</description></item><item><term> DV_E_FORMATETC</term><description> Valeur non valide pour le paramètre <paramref name="pFormatetc" />.</description></item><item><term> DV_E_TYMED</term><description> Valeur <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" /> non valide.</description></item><item><term> DV_E_DVASPECT</term><description> Valeur <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" /> non valide.</description></item><item><term> OLE_E_NOTRUNNING</term><description> L'application n'est pas en cours d'exécution.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary>Transfère des données vers l'objet qui implémente cette méthode. Cette méthode est appelée par un objet qui contient une source de données.</summary>
      <param name="formatIn">Structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, passée par référence, qui définit le format utilisé par l'objet de données lors de l'interprétation des données contenues dans le support de stockage.</param>
      <param name="medium">Structure <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, passée par référence, qui définit le support de stockage dans lequel les données sont passées.</param>
      <param name="release">
        <see langword="true" /> pour spécifier que l'objet de données appelé, qui implémente <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" />, possède le support de stockage après le retour d'appel. Cela signifie que l'objet de données doit libérer le support après qu'il a été utilisé en appelant la fonction <see langword="ReleaseStgMedium" />. <see langword="false" /> pour spécifier que l'appelant conserve la propriété du support de stockage, et que l'objet de données appelé n'utilise le support de stockage que pendant la durée de l'appel.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary>Contient les informations nécessaires pour transférer un élément de structure, un paramètre ou une valeur de retour de fonction entre des processus.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary>Réservé ; a la valeur <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary>Indique une valeur <see cref="T:System.Runtime.InteropServices.IDLFLAG" /> décrivant le type.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary>Décrit comment transférer un élément de structure, un paramètre ou une valeur de retour de fonction entre des processus.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary>Le paramètre passe des informations de l'appelant à l'appelé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary>Le paramètre est l'identificateur local d'une application cliente.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary>Le paramètre retourne des informations de l'appelé à l'appelant.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary>Le paramètre est la valeur de retour du membre.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary>Ne spécifie pas si le paramètre passe ou reçoit des informations.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary>Gère la définition de l'interface <see langword="IEnumConnectionPoints" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary>Crée un autre énumérateur qui contient le même état d'énumération que l'énumérateur en cours.</summary>
      <param name="ppenum">Cette méthode retourne une référence à l'énumérateur créé récemment. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary>Récupère un nombre spécifié d’éléments dans la séquence d’énumération.</summary>
      <param name="celt">Nombre de références <see langword="IConnectionPoint" /> à retourner dans <paramref name="rgelt" />.</param>
      <param name="rgelt">Lorsque cette méthode retourne une valeur, contient une référence aux connexions énumérées. Ce paramètre est passé sans être initialisé.</param>
      <param name="pceltFetched">Lorsque cette méthode retourne une valeur, contient une référence au nombre réel de connexions énumérées dans <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> si le paramètre <paramref name="pceltFetched" /> est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary>Réinitialise la séquence d'énumération au début.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary>Ignore un nombre défini d'éléments dans la séquence d'énumération.</summary>
      <param name="celt">Nombre d’éléments à ignorer dans l’énumération.</param>
      <returns>
        <see langword="S_OK" /> si le nombre d'éléments ignorés est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary>Gère la définition de l'interface <see langword="IEnumConnections" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary>Crée un autre énumérateur qui contient le même état d'énumération que l'énumérateur en cours.</summary>
      <param name="ppenum">Cette méthode retourne une référence à l'énumérateur créé récemment. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary>Récupère un nombre spécifié d’éléments dans la séquence d’énumération.</summary>
      <param name="celt">Nombre de structures <see cref="T:System.Runtime.InteropServices.CONNECTDATA" /> à retourner dans <paramref name="rgelt" />.</param>
      <param name="rgelt">Lorsque cette méthode retourne une valeur, contient une référence aux connexions énumérées. Ce paramètre est passé sans être initialisé.</param>
      <param name="pceltFetched">Lorsque cette méthode retourne une valeur, contient une référence au nombre réel de connexions énumérées dans <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> si le paramètre <paramref name="pceltFetched" /> est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary>Réinitialise la séquence d'énumération au début.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary>Ignore un nombre défini d'éléments dans la séquence d'énumération.</summary>
      <param name="celt">Nombre d’éléments à ignorer dans l’énumération.</param>
      <returns>
        <see langword="S_OK" /> si le nombre d'éléments ignorés est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary>Fournit la définition managée de l'interface <see langword="IEnumFORMATETC" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary>Crée un autre énumérateur qui contient le même état d'énumération que l'énumérateur en cours.</summary>
      <param name="newEnum">Cette méthode retourne une référence à l'énumérateur créé récemment. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary>Récupère un nombre spécifié d’éléments dans la séquence d’énumération.</summary>
      <param name="celt">Nombre de références <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> à retourner dans <paramref name="rgelt" />.</param>
      <param name="rgelt">Cette méthode retourne une référence aux références <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> énumérés. Ce paramètre est passé sans être initialisé.</param>
      <param name="pceltFetched">Cette méthode retourne une référence au nombre réel de références énumérées dans <paramref name="rgelt" />. Ce paramètre est passé sans être initialisé.</param>
      <returns>
        <see langword="S_OK" /> si le paramètre <paramref name="pceltFetched" /> est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary>Réinitialise la séquence d'énumération au début.</summary>
      <returns>HRESULT avec la valeur <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary>Ignore un nombre défini d'éléments dans la séquence d'énumération.</summary>
      <param name="celt">Nombre d’éléments à ignorer dans l’énumération.</param>
      <returns>
        <see langword="S_OK" /> si le nombre d'éléments ignorés est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary>Gère la définition de l'interface <see langword="IEnumMoniker" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Crée un autre énumérateur qui contient le même état d'énumération que l'énumérateur en cours.</summary>
      <param name="ppenum">Cette méthode retourne une référence à l'énumérateur créé récemment. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary>Récupère un nombre spécifié d’éléments dans la séquence d’énumération.</summary>
      <param name="celt">Nombre de monikers à retourner dans <paramref name="rgelt" />.</param>
      <param name="rgelt">Lorsque cette méthode retourne une valeur, contient une référence aux monikers énumérés. Ce paramètre est passé sans être initialisé.</param>
      <param name="pceltFetched">Lorsque cette méthode retourne une valeur, contient une référence au nombre réel de monikers énumérés dans <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> si le paramètre <paramref name="pceltFetched" /> est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary>Réinitialise la séquence d'énumération au début.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary>Ignore un nombre défini d'éléments dans la séquence d'énumération.</summary>
      <param name="celt">Nombre d’éléments à ignorer dans l’énumération.</param>
      <returns>
        <see langword="S_OK" /> si le nombre d'éléments ignorés est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary>Fournit la définition managée de l'interface <see langword="IEnumSTATDATA" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary>Crée un autre énumérateur qui contient le même état d'énumération que l'énumérateur en cours.</summary>
      <param name="newEnum">Cette méthode retourne une référence à l'énumérateur créé récemment. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary>Récupère un nombre spécifié d’éléments dans la séquence d’énumération.</summary>
      <param name="celt">Nombre de références <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> à retourner dans <paramref name="rgelt" />.</param>
      <param name="rgelt">Cette méthode retourne une référence aux références <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" /> énumérés. Ce paramètre est passé sans être initialisé.</param>
      <param name="pceltFetched">Lorsque ce paramètre est retourné, contient une référence au nombre réel de références énumérées dans <paramref name="rgelt" />. Ce paramètre est passé sans être initialisé.</param>
      <returns>
        <see langword="S_OK" /> si le paramètre <paramref name="pceltFetched" /> est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary>Réinitialise la séquence d'énumération au début.</summary>
      <returns>HRESULT avec la valeur <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary>Ignore un nombre défini d'éléments dans la séquence d'énumération.</summary>
      <param name="celt">Nombre d’éléments à ignorer dans l’énumération.</param>
      <returns>
        <see langword="S_OK" /> si le nombre d'éléments ignorés est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary>Gère la définition de l'interface <see langword="IEnumString" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary>Crée un autre énumérateur qui contient le même état d'énumération que l'énumérateur en cours.</summary>
      <param name="ppenum">Cette méthode retourne une référence à l'énumérateur créé récemment. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary>Récupère un nombre spécifié d’éléments dans la séquence d’énumération.</summary>
      <param name="celt">Nombre de chaînes à retourner dans <paramref name="rgelt" />.</param>
      <param name="rgelt">Lorsque cette méthode retourne une valeur, contient une référence aux chaînes énumérées. Ce paramètre est passé sans être initialisé.</param>
      <param name="pceltFetched">Lorsque cette méthode retourne une valeur, contient une référence au nombre réel de chaînes énumérées dans <paramref name="rgelt" />.</param>
      <returns>
        <see langword="S_OK" /> si le paramètre <paramref name="pceltFetched" /> est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary>Réinitialise la séquence d'énumération au début.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary>Ignore un nombre défini d'éléments dans la séquence d'énumération.</summary>
      <param name="celt">Nombre d’éléments à ignorer dans l’énumération.</param>
      <returns>
        <see langword="S_OK" /> si le nombre d'éléments ignorés est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary>Gère la définition de l'interface <see langword="IEnumVARIANT" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary>Crée un autre énumérateur qui contient le même état d'énumération que l'énumérateur en cours.</summary>
      <returns>Référence <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" /> à l'énumérateur nouvellement créé.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary>Récupère un nombre spécifié d’éléments dans la séquence d’énumération.</summary>
      <param name="celt">Nombre d’éléments à retourner dans <c>rgelt</c>.</param>
      <param name="rgVar">Lorsque cette méthode retourne une valeur, contient une référence aux éléments énumérés. Ce paramètre est passé sans être initialisé.</param>
      <param name="pceltFetched">Quand cette méthode retourne une valeur, contient une référence au nombre réel d’éléments énumérés dans <c>rgelt</c>.</param>
      <returns>
        <see langword="S_OK" /> si le paramètre <paramref name="pceltFetched" /> est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary>Réinitialise la séquence d'énumération au début.</summary>
      <returns>HRESULT avec la valeur <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary>Ignore un nombre défini d'éléments dans la séquence d'énumération.</summary>
      <param name="celt">Nombre d’éléments à ignorer dans l’énumération.</param>
      <returns>
        <see langword="S_OK" /> si le nombre d’éléments ignorés est égal au paramètre <paramref name="celt" /> ; sinon, <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary>Fournit la définition managée de l'interface <see langword="IMoniker" />, avec une fonctionnalité COM provenant de <see langword="IPersist" /> et <see langword="IPersistStream" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>Utilise le moniker pour établir une liaison à l'objet qu'il identifie.</summary>
      <param name="pbc">Référence à l'interface <see langword="IBindCtx" /> sur l'objet de contexte de liaison utilisé dans cette opération de liaison.</param>
      <param name="pmkToLeft">Référence au moniker à gauche du moniker en cours, si le moniker fait partie d'un moniker composite.</param>
      <param name="riidResult">IID (ID d'interface) de l'interface que le client a l'intention d'utiliser pour communiquer avec l'objet que le moniker identifie.</param>
      <param name="ppvResult">Lorsque cette méthode retourne une valeur, contient une référence à l'interface demandée par <paramref name="riidResult" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary>Récupère un pointeur d'interface vers le stockage qui contient l'objet identifié par le moniker.</summary>
      <param name="pbc">Référence à l'interface <see langword="IBindCtx" /> sur l'objet de contexte de liaison utilisé dans cette opération de liaison.</param>
      <param name="pmkToLeft">Référence au moniker à gauche du moniker en cours, si le moniker fait partie d'un moniker composite.</param>
      <param name="riid">ID d'interface (IID, interface identifier) de l'interface de stockage demandée.</param>
      <param name="ppvObj">Lorsque cette méthode retourne une valeur, contient une référence à l'interface demandée par <paramref name="riid" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Crée un nouveau moniker basé sur le préfixe commun que ce moniker partage avec un autre moniker.</summary>
      <param name="pmkOther">Référence à l'interface <see langword="IMoniker" /> sur un autre moniker à comparer avec le moniker en cours pour identifier un préfixe commun.</param>
      <param name="ppmkPrefix">Lorsque cette méthode retourne une valeur, contient le moniker qui est le préfixe commun du moniker actuel et de <paramref name="pmkOther" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Combine le moniker en cours à un autre moniker, créant un nouveau moniker composite.</summary>
      <param name="pmkRight">Référence à l'interface <see langword="IMoniker" /> sur un moniker à ajouter à la fin du moniker actuel.</param>
      <param name="fOnlyIfNotGeneric">
        <see langword="true" /> pour indiquer que l'appelant exige une composition non générique. L'opération ne continue que si <paramref name="pmkRight" /> est une classe de moniker avec laquelle le moniker actuel peut se combiner d'une certaine manière, autrement qu'en constituant un composite générique. <see langword="false" /> pour indiquer que la méthode peut créer un composite générique si nécessaire.</param>
      <param name="ppmkComposite">Lorsque cette méthode retourne une valeur, contient une référence au moniker composite résultant. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Fournit un pointeur à un énumérateur pouvant énumérer les composants d'un moniker composite.</summary>
      <param name="fForward">
        <see langword="true" /> pour énumérer les monikers de gauche à droite. <see langword="false" /> pour énumérer de droite à gauche.</param>
      <param name="ppenumMoniker">Lorsque cette méthode retourne une valeur, contient une référence à l'objet énumérateur du moniker. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary>Récupère le CLSID (identificateur de classe).</summary>
      <param name="pClassID">Lorsque cette méthode est retournée, contient le CLSID. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary>Obtient le nom complet, qui est une représentation lisible par l'utilisateur du moniker actuel.</summary>
      <param name="pbc">Référence au contexte de liaison à utiliser dans cette opération.</param>
      <param name="pmkToLeft">Référence au moniker à gauche du moniker en cours, si le moniker fait partie d'un moniker composite.</param>
      <param name="ppszDisplayName">Lorsque cette méthode retourne une valeur, contient la chaîne du nom complet. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary>Retourne la taille en octets du flux requis pour enregistrer l'objet.</summary>
      <param name="pcbSize">Lorsque cette méthode retourne une valeur, contient une valeur <see langword="long" /> indiquant la taille en octets du flux requis pour enregistrer cet objet. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Fournit un nombre représentant l'heure de la dernière modification de l'objet identifié par le moniker actuel.</summary>
      <param name="pbc">Référence au contexte de liaison à utiliser dans l'opération de liaison.</param>
      <param name="pmkToLeft">Référence au moniker à gauche du moniker en cours, si le moniker fait partie d'un moniker composite.</param>
      <param name="pFileTime">Lorsque cette méthode retourne une valeur, contient l'heure de la dernière modification. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary>Calcule un entier 32 bits utilisant l'état interne du moniker.</summary>
      <param name="pdwHash">Lorsque cette méthode retourne une valeur, contient la valeur de hachage de ce moniker. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Fournit un moniker qui, lorsqu'il est composé à la droite du moniker actuel ou d'un moniker de structure similaire, produit une composition nulle.</summary>
      <param name="ppmk">Lorsque cette méthode retourne une valeur, contient un moniker qui est l'inverse du moniker actuel. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary>Vérifie si l'objet a subi des modifications depuis son dernier enregistrement.</summary>
      <returns>Valeur <see langword="S_OK" /><see langword="HRESULT" /> si l’objet a été modifié ; sinon, valeur <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Compare le moniker actuel à un moniker spécifié et indique s'ils sont identiques.</summary>
      <param name="pmkOtherMoniker">Référence au moniker à utiliser pour comparaison.</param>
      <returns>Valeur <see langword="S_OK" /><see langword="HRESULT" /> si les monikers sont identiques ; sinon, valeur <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Détermine si l'objet qui est identifié par le moniker en cours est actuellement chargé et en service.</summary>
      <param name="pbc">Référence au contexte de liaison à utiliser dans l'opération de liaison.</param>
      <param name="pmkToLeft">Référence au moniker à gauche du moniker en cours, si ce dernier fait partie d'un composite.</param>
      <param name="pmkNewlyRunning">Référence au dernier moniker ajouté à la table ROT (Running Object Table).</param>
      <returns>Valeur <see langword="S_OK" /><see langword="HRESULT" /> si le moniker est en service ; valeur <see langword="S_FALSE" /><see langword="HRESULT" /> si le moniker n’est pas en service ; ou valeur <see langword="E_UNEXPECTED" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary>Indique si ce moniker correspond à l'une des classes de moniker fournies par le système.</summary>
      <param name="pdwMksys">Lorsque cette méthode retourne une valeur, contient un pointeur vers un entier faisant partie des valeurs de l'énumération <see langword="MKSYS" /> et faisant référence à l'une des classes de moniker COM. Ce paramètre est passé sans être initialisé.</param>
      <returns>Valeur <see langword="S_OK" /><see langword="HRESULT" /> si le moniker est un moniker système ; sinon, valeur <see langword="S_FALSE" /><see langword="HRESULT" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary>Initialise un objet à partir du flux ayant été précédemment enregistré.</summary>
      <param name="pStm">Flux à partir duquel l'objet est chargé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Lit autant de caractères du nom complet spécifié que <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" /> peut interpréter et construit un moniker correspondant à la partie lue.</summary>
      <param name="pbc">Référence au contexte de liaison à utiliser dans l'opération de liaison.</param>
      <param name="pmkToLeft">Référence au moniker qui a été construit à partir du nom complet jusqu'à ce point.</param>
      <param name="pszDisplayName">Référence à la chaîne contenant le reste du nom complet à analyser.</param>
      <param name="pchEaten">Lorsque cette méthode retourne une valeur, contient le nombre de caractères utilisés pendant l'analyse de <paramref name="pszDisplayName" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="ppmkOut">Lorsque cette méthode retourne une valeur, contient une référence au moniker généré à partir de <paramref name="pszDisplayName" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Retourne un moniker réduit correspondant à un autre moniker qui se réfère au même objet que le moniker actuel, mais peut être lié avec une efficacité équivalente ou supérieure.</summary>
      <param name="pbc">Référence à l'interface <see langword="IBindCtx" /> sur le contexte de liaison à utiliser dans cette opération de liaison.</param>
      <param name="dwReduceHowFar">Valeur spécifiant l'importance de la réduction du moniker actuel.</param>
      <param name="ppmkToLeft">Référence au moniker à gauche du moniker actuel.</param>
      <param name="ppmkReduced">Lorsque cette méthode retourne une valeur, contient une référence à la forme réduite de ce moniker, pouvant être <see langword="null" /> si une erreur se produit ou si le moniker actuel est réduit à une taille nulle. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary>Fournit un moniker qui, lorsqu'il est ajouté au moniker actuel (ou à un moniker de structure similaire), produit le moniker spécifié.</summary>
      <param name="pmkOther">Référence au moniker vers lequel un chemin relatif doit être pris.</param>
      <param name="ppmkRelPath">Lorsque cette méthode retourne une valeur, contient une référence au moniker relatif. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary>Enregistre un objet dans le flux spécifié.</summary>
      <param name="pStm">Flux dans lequel l'objet est enregistré.</param>
      <param name="fClearDirty">
        <see langword="true" /> pour désactiver l'indicateur modifié à la fin de l'enregistrement ; sinon, <see langword="false" /></param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary>Définit les attributs d'une interface implémentée ou héritée d'un type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary>L'interface ou la dispinterface représente la valeur par défaut de la source ou du récepteur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary>Les récepteurs reçoivent des événements par l'intermédiaire de la table de fonctions virtuelles (VTBL, virtual function table).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary>Le membre ne doit pas pouvoir être affiché ou programmé par des utilisateurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary>Ce membre d'une coclasse est appelé et non implémenté.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary>Spécifie la façon d'appeler une fonction par <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary>Le membre est appelé en utilisant une syntaxe d'appel de fonction normale.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary>La fonction est appelée en utilisant une syntaxe de propriété d'accès normale.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary>La fonction est appelée en utilisant une syntaxe d'assignation de valeur de propriété.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary>La fonction est appelée en utilisant une syntaxe d'assignation de référence de propriété.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary>Fournit la définition managée de l'interface <see langword="IPersistFile" />, avec une fonctionnalité provenant de <see langword="IPersist" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary>Récupère le CLSID (identificateur de classe).</summary>
      <param name="pClassID">Lorsque cette méthode retourne une valeur, contient une référence au CLSID. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary>Récupère le chemin d'accès absolu au fichier de travail actuel de l'objet, ou s'il n'y a actuellement pas de fichiers de travail, l'invite du nom de fichier par défaut de l'objet.</summary>
      <param name="ppszFileName">Lorsque cette méthode retourne une valeur, contient l'adresse d'un pointeur vers une chaîne se terminant par zéro contenant le chemin d'accès au fichier en cours, ou l'invite du nom de fichier par défaut (par exemple *.txt). Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary>Vérifie si l'objet a subi des modifications depuis son dernier enregistrement dans son fichier en cours.</summary>
      <returns>
        <see langword="S_OK" /> si le fichier a changé depuis son dernier enregistrement ; <see langword="S_FALSE" /> dans le cas contraire.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary>Ouvre le fichier spécifié et initialise un objet à partir du contenu du fichier.</summary>
      <param name="pszFileName">Chaîne se terminant par zéro contenant le chemin d'accès absolu au fichier à ouvrir.</param>
      <param name="dwMode">Combinaison de valeurs de l'énumération <see langword="STGM" /> servant à indiquer le mode d'accès pour l'ouverture de <paramref name="pszFileName" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary>Enregistre une copie de l'objet dans le fichier spécifié.</summary>
      <param name="pszFileName">Chaîne se terminant par zéro contenant le chemin d'accès absolu au fichier dans lequel l'objet est enregistré.</param>
      <param name="fRemember">
        <see langword="true" /> pour utiliser le paramètre <paramref name="pszFileName" /> comme fichier de travail actuel ; sinon, <see langword="false" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary>Indique à l'objet qu'il peut écrire dans son fichier.</summary>
      <param name="pszFileName">Le chemin d'accès absolu au fichier dans lequel l'objet a été précédemment enregistré.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary>Fournit la définition managée de l'interface <see langword="IRunningObjectTable" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary>Énumère les objets actuellement inscrits comme en cours d'exécution.</summary>
      <param name="ppenumMoniker">Lorsque cette méthode retourne une valeur, contient le nouvel énumérateur de la table ROT (Running Object Table). Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary>Retourne l'objet inscrit si le nom d'objet fourni est inscrit comme en cours d'exécution.</summary>
      <param name="pmkObjectName">Référence au moniker à rechercher dans la table ROT (Running Object Table).</param>
      <param name="ppunkObject">Lorsque cette méthode retourne une valeur, contient l'objet en cours d'exécution demandé. Ce paramètre est passé sans être initialisé.</param>
      <returns>Valeur <see langword="HRESULT" /> indiquant le succès ou l'échec de l'opération.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Recherche ce moniker dans la table ROT (Running Object Table) et indique l'heure de modification enregistrée, le cas échéant.</summary>
      <param name="pmkObjectName">Référence au moniker à rechercher dans la table ROT (Running Object Table).</param>
      <param name="pfiletime">Lorsque cet objet retourne une valeur, contient l'heure de la dernière modification de l'objet. Ce paramètre est passé sans être initialisé.</param>
      <returns>Valeur <see langword="HRESULT" /> indiquant le succès ou l'échec de l'opération.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Détermine si le moniker spécifié est inscrit dans la table ROT (Running Object Table) actuellement.</summary>
      <param name="pmkObjectName">Référence au moniker à rechercher dans la table ROT (Running Object Table).</param>
      <returns>Valeur <see langword="HRESULT" /> indiquant le succès ou l'échec de l'opération.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary>Consigne l'heure à laquelle un objet spécifique a été modifié pour que <see langword="IMoniker::GetTimeOfLastChange" /> indique l'heure de modification appropriée.</summary>
      <param name="dwRegister">Entrée de la table ROT (Running Object Table) correspondant à l'objet modifié.</param>
      <param name="pfiletime">Référence à l'heure de la dernière modification de l'objet.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary>Inscrit que l'objet fourni est en état d'exécution.</summary>
      <param name="grfFlags">Spécifie si la référence de la table ROT (Running Object Table) à <paramref name="punkObject" /> est faible ou forte et contrôle l'accès à l'objet via l'entrée correspondante dans la table ROT (Running Object Table).</param>
      <param name="punkObject">Référence à l'objet inscrit comme étant en cours d'exécution.</param>
      <param name="pmkObjectName">Référence au moniker qui identifie <paramref name="punkObject" />.</param>
      <returns>Valeur qui peut être utilisée pour identifier cette entrée de la table ROT (Running Object Table) dans des appels ultérieurs à  <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> ou à <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary>Annule l'inscription de l'objet spécifié dans la table ROT (Running Object Table).</summary>
      <param name="dwRegister">Entrée de la table ROT (Running Object Table) à révoquer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary>Fournit la définition managée de l’interface <see langword="IStream" />, avec la fonctionnalité <see langword="ISequentialStream" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary>Crée un objet de flux avec son propre pointeur de recherche qui référence les mêmes octets que le flux d'origine.</summary>
      <param name="ppstm">Cette méthode retourne le nouvel objet de flux. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary>Garantit que toutes les modifications apportées à un objet de flux ouvert en mode transactionnel sont répercutées dans le stockage parent.</summary>
      <param name="grfCommitFlags">Valeur qui contrôle la validation des modifications de l'objet de flux.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary>Copie un nombre spécifié d'octets à partir du pointeur de recherche actuel d'un flux vers le pointeur de recherche actuel d'un autre flux.</summary>
      <param name="pstm">Référence au flux de destination.</param>
      <param name="cb">Nombre d'octets à copier à partir du flux source.</param>
      <param name="pcbRead">Après appel réussi de la méthode, contient le nombre réel d'octets lus à partir de la source.</param>
      <param name="pcbWritten">Après appel réussi de la méthode, contient le nombre réel d'octets écrits dans la destination.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>Limite l'accès à une plage d'octets spécifiée dans le flux.</summary>
      <param name="libOffset">Décalage d'octets pour le début de la plage.</param>
      <param name="cb">Longueur de la plage, en octets, à limiter.</param>
      <param name="dwLockType">Restrictions demandées pour l'accès à la plage.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary>Lit un nombre spécifié d'octets à partir de l'objet de flux dans la mémoire en commençant au niveau du pointeur de recherche actuel.</summary>
      <param name="pv">Cette méthode retourne les données lues à partir du flux. Ce paramètre est passé sans être initialisé.</param>
      <param name="cb">Nombre d'octets à lire à partir de l'objet de flux.</param>
      <param name="pcbRead">Pointeur vers une variable <see langword="ULONG" /> qui reçoit le nombre réel d'octets lus à partir de l'objet de flux.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary>Ignore toutes les modifications apportées à un flux transactionnel depuis le dernier appel de <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary>Modifie le pointeur de recherche vers un nouvel emplacement relatif au début du flux, à la fin du flux, ou au pointeur de recherche actuel.</summary>
      <param name="dlibMove">Déplacement à ajouter à <paramref name="dwOrigin" />.</param>
      <param name="dwOrigin">Origine de la recherche. Il peut s'agir du début du fichier, de la position du pointeur de recherche actif ou de la fin du fichier.</param>
      <param name="plibNewPosition">Retourne, le cas échéant, le décalage du pointeur de recherche à partir du début du flux.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary>Modifie la taille de l'objet de flux.</summary>
      <param name="libNewSize">Nouvelle taille du flux en nombre d'octets.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary>Récupère la structure <see cref="T:System.Runtime.InteropServices.STATSTG" /> pour ce flux.</summary>
      <param name="pstatstg">Lorsque cette méthode retourne une valeur, contient une structure <see langword="STATSTG" /> qui décrit cet objet de flux. Ce paramètre est passé sans être initialisé.</param>
      <param name="grfStatFlag">Membres de la structure <see langword="STATSTG" /> que cette méthode ne retourne pas, ce qui évite quelques opérations d'allocation de mémoire.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary>Supprime la restriction d'accès à une plage d'octets précédemment limitée par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" /> .</summary>
      <param name="libOffset">Décalage d'octets pour le début de la plage.</param>
      <param name="cb">Longueur, en octets, de la plage à limiter.</param>
      <param name="dwLockType">Restrictions d'accès précédemment appliquées à la plage.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary>Écrit un nombre spécifié d'octets dans l'objet de flux en démarrant au niveau du pointeur de recherche actuel.</summary>
      <param name="pv">Mémoire tampon dans laquelle écrire ce flux.</param>
      <param name="cb">Nombre d'octets à écrire dans le flux.</param>
      <param name="pcbWritten">Retourne, le cas échéant, le nombre réel d'octets écrits dans l'objet de flux. Si l'appelant affecte la valeur <see cref="F:System.IntPtr.Zero" /> à ce pointeur, cette méthode ne fournit pas le nombre réel d'octets écrits.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary>Fournit la définition managée de l'interface <see langword="ITypeComp" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary>Mappe un nom à un membre d'un type, ou lie des variables et des fonctions globales contenues dans une bibliothèque de types.</summary>
      <param name="szName">Nom à lier.</param>
      <param name="lHashVal">Valeur de hachage pour <paramref name="szName" /> calculée par <see langword="LHashValOfNameSys" />.</param>
      <param name="wFlags">Mot indicateur contenant un ou plusieurs indicateurs d'appel définis dans l'énumération <see langword="INVOKEKIND" />.</param>
      <param name="ppTInfo">Lorsque cette méthode retourne une valeur, contient une référence à la description de type comprenant l'élément auquel elle est liée, si <see langword="FUNCDESC" /> ou <see langword="VARDESC" /> a été retourné. Ce paramètre est passé sans être initialisé.</param>
      <param name="pDescKind">Lorsque cette méthode retourne une valeur, contient une référence à un énumérateur <see langword="DESCKIND" /> qui indique si le nom lié est <see langword="VARDESC" />, <see langword="FUNCDESC" /> ou <see langword="TYPECOMP" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="pBindPtr">Lorsque cette méthode retourne une valeur, contient une référence à l'interface <see langword="VARDESC" />, <see langword="FUNCDESC" /> ou <see langword="ITypeComp" /> liée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Lie les descriptions de type contenues dans une bibliothèque de types.</summary>
      <param name="szName">Nom à lier.</param>
      <param name="lHashVal">Valeur de hachage pour <paramref name="szName" /> déterminée par <see langword="LHashValOfNameSys" />.</param>
      <param name="ppTInfo">Lorsque cette méthode retourne une valeur, contient une référence à un <see langword="ITypeInfo" /> du type auquel <paramref name="szName" /> était lié. Ce paramètre est passé sans être initialisé.</param>
      <param name="ppTComp">Lorsque cette méthode retourne une valeur, contient une référence à une variable <see langword="ITypeComp" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary>Fournit la définition managée de l’interface ITypeInfo d’automatisation des composants.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>Récupère les adresses de fonctions statiques ou de variables, telles que celles définies dans une DLL.</summary>
      <param name="memid">ID de membre de l'adresse de membre <see langword="static" /> à récupérer.</param>
      <param name="invKind">L'une des valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> qui indique si le membre est une propriété et dans ce cas, de quel type est cette propriété.</param>
      <param name="ppv">Lorsque cette méthode retourne une valeur, contient une référence au membre <see langword="static" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>Crée une nouvelle instance d'un type décrivant une classe Component (coclasse).</summary>
      <param name="pUnkOuter">Objet qui joue le rôle du <see langword="IUnknown" /> contrôleur.</param>
      <param name="riid">IID de l'interface utilisée par l'appelant pour communiquer avec l'objet obtenu.</param>
      <param name="ppvObj">Lorsque cette méthode retourne une valeur, contient une référence à l'objet créé. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>Récupère la bibliothèque de types qui contient cette description de type ainsi que l'index correspondant dans cette bibliothèque.</summary>
      <param name="ppTLB">Lorsque cette méthode retourne une valeur, contient une référence à la bibliothèque de types conteneur. Ce paramètre est passé sans être initialisé.</param>
      <param name="pIndex">Lorsque cette méthode retourne une valeur, contient une référence à l'index de la description de type dans la bibliothèque de types conteneur. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Récupère une description ou une spécification d'un point d'entrée pour une fonction dans une DLL.</summary>
      <param name="memid">ID de la fonction membre dont la description d'entrée de DLL doit être retournée.</param>
      <param name="invKind">Une des valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> qui spécifie le type de membre identifié par <paramref name="memid" />.</param>
      <param name="pBstrDllName">Si la valeur n'est pas <see langword="null" />, la fonction définit <paramref name="pBstrDllName" /> avec un <see langword="BSTR" /> qui contient le nom de la DLL.</param>
      <param name="pBstrName">Si la valeur n’est pas <see langword="null" />, la fonction définit <c>lpbstrName</c> avec un <see langword="BSTR" /> qui contient le nom du point d’entrée.</param>
      <param name="pwOrdinal">Si la valeur n’est pas <see langword="null" /> et que la fonction est définie par un ordinal, <c>lpwOrdinal</c> est défini de manière à pointer vers l’ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Récupère la chaîne de documentation, le nom et le chemin d'accès complets du fichier d'aide et l'ID de contexte de la rubrique d'aide se rapportant à une description de type spécifiée.</summary>
      <param name="index">ID du membre dont la documentation doit être retournée.</param>
      <param name="strName">Lorsque cette méthode retourne une valeur, contient le nom de la méthode de l'élément. Ce paramètre est passé sans être initialisé.</param>
      <param name="strDocString">Cette méthode retourne la chaîne de documentation pour l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="dwHelpContext">Lorsque cette méthode retourne une valeur, contient une référence au contexte d'aide associé à l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="strHelpFile">Lorsque cette méthode retourne une valeur, contient le nom qualifié complet du fichier d'aide. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>Récupère la structure <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> qui contient des informations sur une fonction spécifiée.</summary>
      <param name="index">Index de la description de fonction à retourner.</param>
      <param name="ppFuncDesc">Lorsque cette méthode retourne une valeur, contient une référence à une structure <see langword="FUNCDESC" /> qui décrit la fonction spécifiée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>Effectue un mappage entre les noms et les ID de membres, ainsi qu'entre les noms et les ID de paramètres.</summary>
      <param name="rgszNames">Tableau de noms à mapper.</param>
      <param name="cNames">Nombre de noms à mapper.</param>
      <param name="pMemId">Lorsque cette méthode retourne une valeur, contient une référence à un tableau dans lequel les mappages des noms sont insérés. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>Récupère la valeur <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> pour une interface implémentée ou une interface de base dans une description de type.</summary>
      <param name="index">Index de l'interface implémentée ou de l'interface de base.</param>
      <param name="pImplTypeFlags">Lorsque cette méthode retourne une valeur, contient une référence à l'énumération <see langword="IMPLTYPEFLAGS" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary>Récupère des informations de marshaling.</summary>
      <param name="memid">ID de membre qui indique les informations de marshaling nécessaires.</param>
      <param name="pBstrMops">Lorsque cette méthode retourne une valeur, contient une référence à la chaîne <see langword="opcode" /> utilisée pour marshaler les champs de la structure décrite par la description de type référencée, ou retourne <see langword="null" /> s'il n'y a aucune information à retourner. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>Récupère la variable avec l'ID de membre spécifié (ou le nom de la propriété ou de la méthode et ses paramètres) correspondant à l'ID de fonction spécifié.</summary>
      <param name="memid">ID du membre dont le nom (ou les noms) doit être retourné.</param>
      <param name="rgBstrNames">Lorsque cette méthode retourne une valeur, contient le ou les noms associés au membre. Ce paramètre est passé sans être initialisé.</param>
      <param name="cMaxNames">Longueur du tableau <paramref name="rgBstrNames" />.</param>
      <param name="pcNames">Lorsque cette méthode retourne une valeur, contient le nombre de noms contenus dans le tableau <paramref name="rgBstrNames" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Récupère les descriptions de type référencées, si une description de type fait référence à d'autres descriptions de type.</summary>
      <param name="hRef">Handle de la description de type référencée à retourner.</param>
      <param name="ppTI">Lorsque cette méthode retourne une valeur, contient la description de type référencée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>Récupère la description des types d'interfaces implémentés, si une description de type décrit une classe COM.</summary>
      <param name="index">Index du type implémenté dont le handle est retourné.</param>
      <param name="href">Lorsque cette méthode retourne une valeur, contient une référence à un handle pour l'interface implémentée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary>Récupère une structure <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> qui contient les attributs de la description de type.</summary>
      <param name="ppTypeAttr">Lorsque cette méthode retourne une valeur, contient une référence à la structure qui contient les attributs de cette description de type. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Récupère l'interface <see langword="ITypeComp" /> pour la description de type qui permet à un compilateur client d'effectuer une liaison avec les membres de la description de type.</summary>
      <param name="ppTComp">Lorsque cette méthode retourne une valeur, contient une référence à l'interface <see langword="ITypeComp" /> de la bibliothèque de types conteneur. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>Récupère une structure <see langword="VARDESC" /> qui décrit la variable spécifiée.</summary>
      <param name="index">Index de la description de variable à retourner.</param>
      <param name="ppVarDesc">Lorsque cette méthode retourne une valeur, contient une référence à la structure <see langword="VARDESC" /> qui décrit la variable spécifiée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>Appelle une méthode ou accède à une propriété d'un objet qui implémente l'interface décrite par la description de type.</summary>
      <param name="pvInstance">Référence à l'interface décrite par cette description de type.</param>
      <param name="memid">Valeur identifiant le membre d'interface.</param>
      <param name="wFlags">Indicateurs décrivant le contexte de l'appel Invoke.</param>
      <param name="pDispParams">Référence à une structure qui contient un tableau d'arguments, un tableau de DISPID pour des arguments nommés et le nombre d'éléments de chaque tableau.</param>
      <param name="pVarResult">Référence à l'emplacement où le résultat doit être stocké. Si <paramref name="wFlags" /> spécifie <see langword="DISPATCH_PROPERTYPUT" /> ou <see langword="DISPATCH_PROPERTYPUTREF" />, <paramref name="pVarResult" /> est ignoré. Affectez <see langword="null" /> si aucun résultat n'est requis.</param>
      <param name="pExcepInfo">Pointeur vers une structure d'informations d'exception qui est remplie uniquement lorsque <see langword="DISP_E_EXCEPTION" /> est retourné.</param>
      <param name="puArgErr">Si <see langword="Invoke" /> retourne <see langword="DISP_E_TYPEMISMATCH" />, <paramref name="puArgErr" /> indique l’index de l’argument <c>rgvarg</c> dont le type est incorrect. Si plusieurs arguments retournent une erreur, <paramref name="puArgErr" /> indique uniquement le premier argument contenant une erreur. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary>Libère une structure <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> précédemment retournée par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pFuncDesc">Référence à la structure <see langword="FUNCDESC" /> à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary>Libère une structure <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> précédemment retournée par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" />.</summary>
      <param name="pTypeAttr">Référence à la structure <see langword="TYPEATTR" /> à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary>Libère une structure <see langword="VARDESC" /> précédemment retournée par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pVarDesc">Référence à la structure <see langword="VARDESC" /> à libérer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary>Fournit la définition managée de l'interface <see langword="ITypeInfo2" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary>Récupère les adresses de fonctions statiques ou de variables, telles que celles définies dans une DLL.</summary>
      <param name="memid">ID de membre de l'adresse de membre <see langword="static" /> à récupérer.</param>
      <param name="invKind">L'une des valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> qui indique si le membre est une propriété et dans ce cas, de quel type est cette propriété.</param>
      <param name="ppv">Lorsque cette méthode retourne une valeur, contient une référence au membre <see langword="static" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary>Crée une nouvelle instance d'un type décrivant une classe Component (coclasse).</summary>
      <param name="pUnkOuter">Objet qui joue le rôle du <see langword="IUnknown" /> contrôleur.</param>
      <param name="riid">IID de l'interface utilisée par l'appelant pour communiquer avec l'objet obtenu.</param>
      <param name="ppvObj">Lorsque cette méthode retourne une valeur, contient une référence à l'objet créé. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary>Obtient tous les éléments de données personnalisés de la bibliothèque.</summary>
      <param name="pCustData">Pointeur vers <see langword="CUSTDATA" /> qui contient tous les éléments de données personnalisés.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary>Obtient toutes les données personnalisées de la fonction spécifiée.</summary>
      <param name="index">Index de la fonction pour laquelle obtenir les données personnalisées.</param>
      <param name="pCustData">Pointeur vers <see langword="CUSTDATA" /> qui contient tous les éléments de données personnalisés.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary>Obtient toutes les données personnalisées pour le type d’implémentation spécifié.</summary>
      <param name="index">Index de type d’implémentation pour les données personnalisées.</param>
      <param name="pCustData">Pointeur vers <see langword="CUSTDATA" /> qui contient tous les éléments de données personnalisés.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary>Obtient toutes les données personnalisées pour le paramètre de fonction spécifiée.</summary>
      <param name="indexFunc">Index de la fonction pour laquelle obtenir les données personnalisées.</param>
      <param name="indexParam">Index du paramètre de fonction pour lequel obtenir les données personnalisées.</param>
      <param name="pCustData">Pointeur vers <see langword="CUSTDATA" /> qui contient tous les éléments de données personnalisés.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary>Obtient la variable des données personnalisées.</summary>
      <param name="index">Index de la variable pour laquelle obtenir les données personnalisées.</param>
      <param name="pCustData">Pointeur vers <see langword="CUSTDATA" /> qui contient tous les éléments de données personnalisés.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary>Récupère la bibliothèque de types qui contient cette description de type ainsi que l'index correspondant dans cette bibliothèque.</summary>
      <param name="ppTLB">Lorsque cette méthode retourne une valeur, contient une référence à la bibliothèque de types conteneur. Ce paramètre est passé sans être initialisé.</param>
      <param name="pIndex">Lorsque cette méthode retourne une valeur, contient une référence à l'index de la description de type dans la bibliothèque de types conteneur. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary>Obtient les données personnalisées.</summary>
      <param name="guid">GUID utilisé pour identifier les données.</param>
      <param name="pVarVal">Lorsque cette méthode est retournée, elle contient un objet <see langword="Object" /> qui spécifie l’emplacement auquel placer les données récupérées. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary>Récupère une description ou une spécification d'un point d'entrée pour une fonction dans une DLL.</summary>
      <param name="memid">ID de la fonction membre dont la description d'entrée de DLL doit être retournée.</param>
      <param name="invKind">Une des valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> qui spécifie le type de membre identifié par <paramref name="memid" />.</param>
      <param name="pBstrDllName">Si la valeur n'est pas <see langword="null" />, la fonction définit <paramref name="pBstrDllName" /> avec un <see langword="BSTR" /> qui contient le nom de la DLL.</param>
      <param name="pBstrName">Si la valeur n’est pas <see langword="null" />, la fonction définit <c>lpbstrName</c> avec un <see langword="BSTR" /> qui contient le nom du point d’entrée.</param>
      <param name="pwOrdinal">Si la valeur n’est pas <see langword="null" /> et que la fonction est définie par un ordinal, <c>lpwOrdinal</c> est défini de manière à pointer vers l’ordinal.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Récupère la chaîne de documentation, le nom et le chemin d'accès complets du fichier d'aide et l'ID de contexte de la rubrique d'aide se rapportant à une description de type spécifiée.</summary>
      <param name="index">ID du membre dont la documentation doit être retournée.</param>
      <param name="strName">Lorsque cette méthode retourne une valeur, contient le nom de la méthode de l'élément. Ce paramètre est passé sans être initialisé.</param>
      <param name="strDocString">Cette méthode retourne la chaîne de documentation pour l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="dwHelpContext">Lorsque cette méthode retourne une valeur, contient une référence au contexte d'aide associé à l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="strHelpFile">Lorsque cette méthode retourne une valeur, contient le nom qualifié complet du fichier d'aide. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>Récupère la chaîne de documentation, le nom et le chemin complets du fichier d'aide, le contexte de localisation à utiliser, et l’ID de contexte pour la rubrique d’aide de la bibliothèque dans le fichier d’aide.</summary>
      <param name="memid">L’identificateur du membre pour le type de description.</param>
      <param name="pbstrHelpString">Cette méthode retourne un objet <see langword="BSTR" /> qui contient le nom de l'élément spécifié. Si l’appelant n’a pas besoin du nom de l’élément, <paramref name="pbstrHelpString" /> peut être <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="pdwHelpStringContext">Quand cette méthode est retournée, contient le contexte de localisation d'aide. Si l’appelant n’a pas besoin du contexte d’aide, <paramref name="pdwHelpStringContext" /> peut être <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="pbstrHelpStringDll">Lorsque cette méthode est retournée, contient un objet <see langword="BSTR" /> incluant le nom qualifié complet du fichier contenant la DLL utilisée pour le fichier d’aide. Si l’appelant n’a pas besoin du nom de fichier, <paramref name="pbstrHelpStringDll" /> peut être <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Obtient les données personnalisées à partir de la fonction spécifiée.</summary>
      <param name="index">Index de la fonction pour laquelle obtenir les données personnalisées.</param>
      <param name="guid">GUID utilisé pour identifier les données.</param>
      <param name="pVarVal">Lorsque cette méthode est retournée, elle contient un objet <see langword="Object" /> qui spécifie l’emplacement auquel placer les données. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary>Récupère la structure <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> qui contient des informations sur une fonction spécifiée.</summary>
      <param name="index">Index de la description de fonction à retourner.</param>
      <param name="ppFuncDesc">Lorsque cette méthode retourne une valeur, contient une référence à une structure <see langword="FUNCDESC" /> qui décrit la fonction spécifiée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary>Lie à un membre spécifique en fonction d’une valeur DISPID connue, lorsque le nom du membre est inconnu (par exemple, lors de la liaison à un membre par défaut).</summary>
      <param name="memid">Identificateur du membre.</param>
      <param name="invKind">L’une des valeurs <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" /> qui spécifient le type de membre identifié par memid.</param>
      <param name="pFuncIndex">Lorsque cette méthode est retournée, elle contient un index dans la fonction. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary>Effectue un mappage entre les noms et les ID de membres, ainsi qu'entre les noms et les ID de paramètres.</summary>
      <param name="rgszNames">Tableau de noms à mapper.</param>
      <param name="cNames">Nombre de noms à mapper.</param>
      <param name="pMemId">Lorsque cette méthode retourne une valeur, contient une référence à un tableau dans lequel les mappages des noms sont insérés. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Obtient le type d'implémentation des données personnalisées.</summary>
      <param name="index">Index de type d’implémentation pour les données personnalisées.</param>
      <param name="guid">GUID utilisé pour identifier les données.</param>
      <param name="pVarVal">Lorsque cette méthode est retournée, elle contient un objet <see langword="Object" /> qui spécifie l’emplacement auquel placer les données récupérées. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary>Récupère la valeur <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" /> pour une interface implémentée ou une interface de base dans une description de type.</summary>
      <param name="index">Index de l'interface implémentée ou de l'interface de base.</param>
      <param name="pImplTypeFlags">Lorsque cette méthode retourne une valeur, contient une référence à l'énumération <see langword="IMPLTYPEFLAGS" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary>Récupère des informations de marshaling.</summary>
      <param name="memid">ID de membre qui indique les informations de marshaling nécessaires.</param>
      <param name="pBstrMops">Lorsque cette méthode retourne une valeur, contient une référence à la chaîne <see langword="opcode" /> utilisée pour marshaler les champs de la structure décrite par la description de type référencée, ou retourne <see langword="null" /> s'il n'y a aucune information à retourner. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary>Récupère la variable avec l'ID de membre spécifié (ou le nom de la propriété ou de la méthode et ses paramètres) correspondant à l'ID de fonction spécifié.</summary>
      <param name="memid">ID du membre dont le nom (ou les noms) doit être retourné.</param>
      <param name="rgBstrNames">Lorsque cette méthode retourne une valeur, contient le ou les noms associés au membre. Ce paramètre est passé sans être initialisé.</param>
      <param name="cMaxNames">Longueur du tableau <paramref name="rgBstrNames" />.</param>
      <param name="pcNames">Lorsque cette méthode retourne une valeur, contient le nombre de noms contenus dans le tableau <paramref name="rgBstrNames" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary>Obtient le paramètre de données personnalisé spécifié.</summary>
      <param name="indexFunc">Index de la fonction pour laquelle obtenir les données personnalisées.</param>
      <param name="indexParam">Index du paramètre de fonction pour lequel obtenir les données personnalisées.</param>
      <param name="guid">GUID utilisé pour identifier les données.</param>
      <param name="pVarVal">Lorsque cette méthode est retournée, elle contient un objet <see langword="Object" /> qui spécifie l’emplacement auquel placer les données récupérées. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Récupère les descriptions de type référencées, si une description de type fait référence à d'autres descriptions de type.</summary>
      <param name="hRef">Handle de la description de type référencée à retourner.</param>
      <param name="ppTI">Lorsque cette méthode retourne une valeur, contient la description de type référencée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary>Récupère la description des types d'interfaces implémentés, si une description de type décrit une classe COM.</summary>
      <param name="index">Index du type implémenté dont le handle est retourné.</param>
      <param name="href">Lorsque cette méthode retourne une valeur, contient une référence à un handle pour l'interface implémentée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary>Récupère une structure <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> qui contient les attributs de la description de type.</summary>
      <param name="ppTypeAttr">Lorsque cette méthode retourne une valeur, contient une référence à la structure qui contient les attributs de cette description de type. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Récupère l'interface <see langword="ITypeComp" /> pour la description de type qui permet à un compilateur client d'effectuer une liaison avec les membres de la description de type.</summary>
      <param name="ppTComp">Cette méthode retourne une référence au <see langword="ITypeComp" /> de la bibliothèque de types conteneur. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary>Retourne les indicateurs de type sans allocation. Cette méthode retourne un indicateur de type <see langword="DWORD" />, qui développe les indicateurs de type sans augmenter le <see langword="TYPEATTR" /> (attribut de type).</summary>
      <param name="pTypeFlags">Cette méthode retourne une référence <see langword="DWORD" /> à un <see langword="TYPEFLAG" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Retourne l’énumération <see langword="TYPEKIND" /> rapidement, sans effectuer d’allocation.</summary>
      <param name="pTypeKind">Cette méthode retourne une référence à une énumération <see langword="TYPEKIND" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary>Obtient la variable des données personnalisées.</summary>
      <param name="index">Index de la variable pour laquelle obtenir les données personnalisées.</param>
      <param name="guid">GUID utilisé pour identifier les données.</param>
      <param name="pVarVal">Lorsque cette méthode est retournée, elle contient un objet <see langword="Object" /> qui spécifie l’emplacement auquel placer les données récupérées. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary>Récupère une structure <see langword="VARDESC" /> qui décrit la variable spécifiée.</summary>
      <param name="index">Index de la description de variable à retourner.</param>
      <param name="ppVarDesc">Lorsque cette méthode retourne une valeur, contient une référence à la structure <see langword="VARDESC" /> qui décrit la variable spécifiée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary>Lie à un membre spécifique en fonction d’une valeur <see langword="DISPID" /> connue, lorsque le nom du membre est inconnu (par exemple, lors de la liaison à un membre par défaut).</summary>
      <param name="memid">Identificateur du membre.</param>
      <param name="pVarIndex">Lorsque cette méthode est retournée, elle contient un index de <paramref name="memid" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary>Appelle une méthode ou accède à une propriété d'un objet qui implémente l'interface décrite par la description de type.</summary>
      <param name="pvInstance">Référence à l'interface décrite par cette description de type.</param>
      <param name="memid">Identificateur du membre d'interface.</param>
      <param name="wFlags">Indicateurs décrivant le contexte de l'appel Invoke.</param>
      <param name="pDispParams">Référence à une structure qui contient un tableau d'arguments, un tableau de DISPID pour des arguments nommés et le nombre d'éléments de chaque tableau.</param>
      <param name="pVarResult">Référence à l'emplacement où le résultat doit être stocké. Si <paramref name="wFlags" /> spécifie <see langword="DISPATCH_PROPERTYPUT" /> ou <see langword="DISPATCH_PROPERTYPUTREF" />, <paramref name="pVarResult" /> est ignoré. Affectez <see langword="null" /> si aucun résultat n'est requis.</param>
      <param name="pExcepInfo">Pointeur vers une structure d'informations d'exception qui est remplie uniquement lorsque <see langword="DISP_E_EXCEPTION" /> est retourné.</param>
      <param name="puArgErr">Si <see langword="Invoke" /> retourne <see langword="DISP_E_TYPEMISMATCH" />, <paramref name="puArgErr" /> indique l'index de l'argument de type incorrect. Si plusieurs arguments retournent une erreur, <paramref name="puArgErr" /> indique uniquement le premier argument contenant une erreur.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary>Libère une structure <see cref="T:System.Runtime.InteropServices.FUNCDESC" /> précédemment retournée par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pFuncDesc">Référence à la structure <see langword="FUNCDESC" /> à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary>Libère une structure <see cref="T:System.Runtime.InteropServices.TYPEATTR" /> précédemment retournée par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" />.</summary>
      <param name="pTypeAttr">Référence à la structure <see langword="TYPEATTR" /> à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary>Libère une structure <see langword="VARDESC" /> précédemment retournée par la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" />.</summary>
      <param name="pVarDesc">Référence à la structure <see langword="VARDESC" /> à libérer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary>Fournit la définition managée de l'interface <see langword="ITypeLib" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>Recherche les occurrences d’une description de type dans une bibliothèque de types.</summary>
      <param name="szNameBuf">Nom à rechercher. Il s'agit d'un paramètre entrée/sortie.</param>
      <param name="lHashVal">Valeur de hachage servant à accélérer la recherche, calculée par la fonction <see langword="LHashValOfNameSys" />. Si <paramref name="lHashVal" /> est égal à 0, une valeur est calculée.</param>
      <param name="ppTInfo">Lorsque cette méthode retourne une valeur, contient un tableau de pointeurs vers les descriptions de types contenant le nom spécifié dans <paramref name="szNameBuf" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="rgMemId">Tableau de <see langword="MEMBERID" /> des éléments trouvés ; <paramref name="rgMemId" />[i] est le <see langword="MEMBERID" /> qui indexe dans la description de type spécifiée par <paramref name="ppTInfo" />[i]. Ne peut pas être <see langword="null" />.</param>
      <param name="pcFound">À l’entrée, indique combien d’instances sont à rechercher. Par exemple, <paramref name="pcFound" /> = 1 peut être appelé pour rechercher la première occurrence. La recherche s’interrompt quand une instance est trouvée.  
  
En quittant, indique le nombre d’instances trouvées. Si les valeurs <see langword="in" /> et <see langword="out" /> de <paramref name="pcFound" /> sont identiques, cela signifie que d'autres descriptions de types peuvent contenir le nom.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Récupère la chaîne de documentation de la bibliothèque, le nom et le chemin complets du fichier d’aide, et l’ID de contexte de la rubrique d’aide de la bibliothèque dans le fichier d’aide.</summary>
      <param name="index">Index de la description de type dont la documentation doit être retournée.</param>
      <param name="strName">Lorsque cette méthode retourne une valeur, contient une chaîne représentant le nom de l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="strDocString">Lorsque cette méthode retourne une valeur, contient une chaîne qui représente la chaîne de documentation pour l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="dwHelpContext">Lorsque cette méthode retourne une valeur, contient l'identificateur du contexte d'aide associé à l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="strHelpFile">Lorsque cette méthode retourne une valeur, contient une chaîne représentant le nom qualifié complet du fichier d'aide. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary>Récupère la structure qui contient les attributs de la bibliothèque.</summary>
      <param name="ppTLibAttr">Lorsque cette méthode retourne une valeur, contient une structure comprenant les attributs de la bibliothèque. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Permet à un compilateur client d’effectuer une liaison aux types, variables, constantes et fonctions globales d’une bibliothèque.</summary>
      <param name="ppTComp">Lorsque cette méthode retourne une valeur, contient une instance d'une instance de <see langword="ITypeComp" /> pour ce <see langword="ITypeLib" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Récupère la description de type spécifiée dans la bibliothèque.</summary>
      <param name="index">Index de l'interface <see langword="ITypeInfo" /> à retourner.</param>
      <param name="ppTI">Lorsque cette méthode retourne une valeur, contient un <see langword="ITypeInfo" /> décrivant le type référencé par <paramref name="index" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary>Retourne le nombre de descriptions de types de la bibliothèque de types.</summary>
      <returns>Nombre de descriptions de types de la bibliothèque de types.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Récupère la description de type qui correspond au GUID spécifié.</summary>
      <param name="guid">IID de l'interface ou CLSID de la classe dont les informations de type sont demandées.</param>
      <param name="ppTInfo">Lorsque cette méthode retourne une valeur, contient l'interface <see langword="ITypeInfo" /> demandée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Récupère le type d’une description de type.</summary>
      <param name="index">Index de la description de type dans la bibliothèque de types.</param>
      <param name="pTKind">Lorsque cette méthode retourne une valeur, contient une référence à l'énumération <see langword="TYPEKIND" /> pour la description de type. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary>Indique si une chaîne passée contient le nom d’un type ou d’un membre décrit dans la bibliothèque.</summary>
      <param name="szNameBuf">Chaîne à tester. Il s'agit d'un paramètre entrée/sortie.</param>
      <param name="lHashVal">Valeur de hachage de <paramref name="szNameBuf" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="szNameBuf" /> a été trouvé dans la bibliothèque de types ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary>Libère la structure <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> obtenue à l'origine à partir de la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" />.</summary>
      <param name="pTLibAttr">Structure <see langword="TLIBATTR" /> à libérer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary>Fournit une définition managée de l'interface <see langword="ITypeLib2" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary>Recherche les occurrences d’une description de type dans une bibliothèque de types.</summary>
      <param name="szNameBuf">Nom à rechercher.</param>
      <param name="lHashVal">Valeur de hachage servant à accélérer la recherche, calculée par la fonction <see langword="LHashValOfNameSys" />. Si <paramref name="lHashVal" /> est égal à 0, une valeur est calculée.</param>
      <param name="ppTInfo">Lorsque cette méthode retourne une valeur, contient un tableau de pointeurs vers les descriptions de types contenant le nom spécifié dans <paramref name="szNameBuf" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="rgMemId">Cette méthode retourne un tableau de <see langword="MEMBERID" />des éléments trouvés ; <paramref name="rgMemId" /> [i] est le <see langword="MEMBERID" /> qui indexe dans la description de type spécifiée par <paramref name="ppTInfo" /> [i]. Ce paramètre ne peut pas être <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="pcFound">À l'entrée, valeur passée par référence qui indique le nombre d'instances à rechercher. Par exemple, <paramref name="pcFound" /> = 1 peut être appelé pour rechercher la première occurrence. La recherche s’interrompt quand une instance est trouvée.  
  
En quittant, indique le nombre d’instances trouvées. Si les valeurs <see langword="in" /> et <see langword="out" /> de <paramref name="pcFound" /> sont identiques, cela signifie que d'autres descriptions de types peuvent contenir le nom.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary>Obtient tous les éléments de données personnalisés de la bibliothèque.</summary>
      <param name="pCustData">Pointeur vers <see langword="CUSTDATA" /> qui contient tous les éléments de données personnalisés.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary>Obtient les données personnalisées.</summary>
      <param name="guid">
        <see cref="T:System.Guid" />, passé par référence, utilisé pour identifier les données.</param>
      <param name="pVarVal">Lorsque cette méthode est retournée, elle contient un objet qui spécifie l’emplacement auquel placer les données récupérées. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary>Récupère la chaîne de documentation de la bibliothèque, le nom et le chemin complets du fichier d’aide, et l’ID de contexte de la rubrique d’aide de la bibliothèque dans le fichier d’aide.</summary>
      <param name="index">Index de la description de type dont la documentation doit être retournée.</param>
      <param name="strName">Cette méthode retourne une chaîne qui indique le nom de l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="strDocString">Cette méthode retourne la chaîne de documentation pour l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="dwHelpContext">Lorsque cette méthode retourne une valeur, contient l'identificateur du contexte d'aide associé à l'élément spécifié. Ce paramètre est passé sans être initialisé.</param>
      <param name="strHelpFile">Cette méthode retourne une chaîne qui indique le nom qualifié complet du fichier d'aide. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary>Récupère la chaîne de documentation de la bibliothèque, le nom de fichier complet et chemin d’accès, le contexte de localisation à utiliser et l’ID de contexte pour la rubrique d’aide de bibliothèque dans le fichier d’aide.</summary>
      <param name="index">Un index de la description de type dont la documentation doit être retournée ; si <paramref name="index" /> est -1, la documentation de la bibliothèque est retournée.</param>
      <param name="pbstrHelpString">Cette méthode retourne un BSTR qui spécifie le nom de l’élément spécifié. Si l’appelant n’a pas besoin du nom de l’élément, <paramref name="pbstrHelpString" /> peut être <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="pdwHelpStringContext">Quand cette méthode est retournée, contient le contexte de localisation d'aide. Si l’appelant n’a pas besoin du contexte d’aide, <paramref name="pdwHelpStringContext" /> peut être <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
      <param name="pbstrHelpStringDll">Cette méthode retourne un BSTR qui spécifie le nom qualifié complet du fichier contenant la DLL utilisée pour le fichier d’aide. Si l’appelant n’a pas besoin du nom de fichier, <paramref name="pbstrHelpStringDll" /> peut être <see langword="null" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary>Récupère la structure qui contient les attributs de la bibliothèque.</summary>
      <param name="ppTLibAttr">Lorsque cette méthode retourne une valeur, contient une structure comprenant les attributs de la bibliothèque. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary>Retourne des statistiques relatives à une bibliothèque de types qui sont requises pour un dimensionnement efficace des tables de hachage.</summary>
      <param name="pcUniqueNames">Pointeur vers un nombre de noms uniques. Si l'appelant n'a pas besoin de cette information, affectez-lui la valeur <see langword="null" />.</param>
      <param name="pcchUniqueNames">Cette méthode retourne un pointeur vers une modification du nombre de noms uniques. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary>Permet à un compilateur client d’effectuer une liaison aux types, variables, constantes et fonctions globales d’une bibliothèque.</summary>
      <param name="ppTComp">Cette méthode retourne une instance de <see langword="ITypeComp" /> pour <see langword="ITypeLib" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Récupère la description de type spécifiée dans la bibliothèque.</summary>
      <param name="index">Index de l'interface <see langword="ITypeInfo" /> à retourner.</param>
      <param name="ppTI">Lorsque cette méthode retourne une valeur, contient un <see langword="ITypeInfo" /> décrivant le type référencé par <paramref name="index" />. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary>Retourne le nombre de descriptions de types de la bibliothèque de types.</summary>
      <returns>Nombre de descriptions de types de la bibliothèque de types.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary>Récupère la description de type qui correspond au GUID spécifié.</summary>
      <param name="guid">
        <see cref="T:System.Guid" /> passé par référence, qui représente l'IID de l'interface <see langword="CLSID" /> de la classe dont les informations de type sont demandées.</param>
      <param name="ppTInfo">Lorsque cette méthode retourne une valeur, contient l'interface <see langword="ITypeInfo" /> demandée. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary>Récupère le type d’une description de type.</summary>
      <param name="index">Index de la description de type dans la bibliothèque de types.</param>
      <param name="pTKind">Lorsque cette méthode retourne une valeur, contient une référence à l'énumération <see langword="TYPEKIND" /> pour la description de type. Ce paramètre est passé sans être initialisé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary>Indique si une chaîne passée contient le nom d’un type ou d’un membre décrit dans la bibliothèque.</summary>
      <param name="szNameBuf">Chaîne à tester.</param>
      <param name="lHashVal">Valeur de hachage de <paramref name="szNameBuf" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="szNameBuf" /> a été trouvé dans la bibliothèque de types ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary>Libère la structure <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" /> obtenue à l'origine à partir de la méthode <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" />.</summary>
      <param name="pTLibAttr">Structure <see langword="TLIBATTR" /> à libérer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary>Définit les indicateurs applicables aux bibliothèques de types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary>La bibliothèque de types décrit des contrôles ; elle ne doit pas être affichée dans des explorateurs de types conçus pour des objets non visuels.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary>La bibliothèque de types existe sur le disque sous une forme persistante.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary>La bibliothèque de types ne doit pas être visible aux utilisateurs, même lorsque son utilisation n'est pas restreinte. Elle doit être utilisée par des contrôles. Les hôtes doivent créer une nouvelle bibliothèque de types qui encapsule le contrôle avec des propriétés étendues.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary>La bibliothèque de types est restreinte et elle ne doit pas être affichée aux utilisateurs.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary>Indique comment transférer un élément de structure, un paramètre ou une valeur de retour de fonction entre des processus.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary>Représente un pointeur vers une valeur passée entre des processus.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary>Représente des valeurs de masque de bits qui décrivent l'élément de structure, le paramètre ou la valeur de retour.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary>Décrit comment transférer un élément de structure, un paramètre ou une valeur de retour de fonction entre des processus.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary>Le paramètre a des données personnalisées.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary>Le paramètre a des comportements par défaut définis.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary>Le paramètre passe des informations de l'appelant à l'appelé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary>Le paramètre est l'identificateur local d'une application cliente.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary>Le paramètre est facultatif.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary>Le paramètre retourne des informations de l'appelé à l'appelant.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary>Le paramètre est la valeur de retour du membre.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary>Ne spécifie pas si le paramètre passe ou reçoit des informations.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary>Fournit la définition managée de la structure <see langword="STATDATA" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary>Représente la valeur d'énumération <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" /> qui détermine le moment auquel le récepteur de notifications est averti des modifications apportées aux données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary>Représente l'interface <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" /> qui recevra les notifications de modifications.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary>Représente le jeton qui identifie de manière unique la connexion de notifications. Ce jeton est retourné par la méthode qui configure la connexion de notifications.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary>Représente la structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" /> des données dignes d'intérêt pour le récepteur de notifications. Le récepteur de notifications est averti des modifications apportées aux données spécifiées par cette structure <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary>Contient des informations statistiques relatives à un objet de stockage, de flux ou de tableau d'octets ouvert.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary>Spécifie l'heure du dernier accès à ce stockage, flux ou tableau d'octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary>Spécifie la taille en octets du flux ou du tableau d'octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary>Indique l'identificateur de classe de l'objet de stockage.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary>Indique l'heure de création de ce stockage, flux ou tableau d'octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary>Indique les types de verrouillage de région pris en charge par le flux ou le tableau d'octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary>Indique le mode d'accès spécifié à l'ouverture de l'objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary>Indique les bits d'état actuels de l'objet de stockage (la dernière valeur définie par la méthode <see langword="IStorage::SetStateBits" />).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary>Indique l'heure de la dernière modification de ce stockage, flux ou tableau d'octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary>Représente un pointeur vers une chaîne se terminant par un caractère null qui contient le nom de l'objet décrit par cette structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary>Réservé à un usage ultérieur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary>Indique le type d'objet de stockage qui est une des valeurs de l'énumération <see langword="STGTY" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary>Fournit la définition managée de la structure <see langword="STGMEDIUM" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary>Représente un pointeur vers une instance d'interface permettant au processus émetteur de contrôler la manière dont le stockage est libéré lorsque le processus récepteur appelle la fonction <see langword="ReleaseStgMedium" />. Si <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> est <see langword="null" />, <see langword="ReleaseStgMedium" /> utilise des procédures par défaut pour libérer le stockage ; sinon, <see langword="ReleaseStgMedium" /> utilise l'interface <see langword="IUnknown" /> spécifiée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary>Spécifie le type de support de stockage. Les routines de marshaling et d'unmarshaling utilisent cette valeur pour déterminer le membre de l'union qui a été utilisé. Cette valeur doit être l'un des éléments de l'énumération <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary>Représente un handle, une chaîne ou un pointeur d'interface que le processus récepteur peut utiliser pour accéder aux données transférées.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary>Identifie la plateforme du système d'exploitation cible.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary>Le système d'exploitation cible de la bibliothèque de types est Apple Macintosh. Par défaut, tous les champs de données sont alignés sur des limites d'octet pair.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary>Le système d'exploitation cible de la bibliothèque de types est un système Windows 16 bits. Par défaut, les champs de données sont compactés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary>Le système d’exploitation cible de la bibliothèque de types est un système Windows 32 bits. Par défaut, les champs de données sont alignés naturellement (par exemple, un entier sur 2 octets est aligné sur une limite d'octet pair, un entier sur 4 octets est aligné sur une limite de mot quadruple, et ainsi de suite).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary>Le système d’exploitation cible de la bibliothèque de types est un système Windows 64 bits.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary>Fournit la définition managée de la structure <see langword="TYMED" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary>Le support de stockage est un métafichier amélioré. Si le membre <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> a la valeur <see langword="null" />, le processus de destination doit utiliser <see langword="DeleteEnhMetaFile" /> pour supprimer la bitmap.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary>Le support de stockage est un fichier sur disque identifié par un chemin d'accès. Si le membre <see langword="STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> a la valeur <see langword="null" />, le processus de destination doit utiliser <see langword="OpenFile" /> pour supprimer le fichier.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary>Le support de stockage est un composant GDI (Graphics Device Interface) (HBITMAP). Si le membre <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> a la valeur <see langword="null" />, le processus de destination doit utiliser <see langword="DeleteObject" /> pour supprimer la bitmap.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary>Le support de stockage est un handle de mémoire globale (HGLOBAL). Allouez le handle global possédant l'indicateur GMEM_SHARE. Si le membre <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> a la valeur <see langword="null" />, le processus de destination doit utiliser <see langword="GlobalFree" /> pour libérer la mémoire.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary>Le support de stockage est un composant de stockage identifié par un pointeur <see langword="IStorage" />. Les données se trouvent dans les flux et les stockages contenus dans cette instance de <see langword="IStorage" />. Si le membre <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> n’a pas la valeur <see langword="null" />, le processus de destination doit utiliser <see langword="IStorage::Release" /> pour libérer le composant de stockage.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary>Le support de stockage est un objet de flux identifié par un pointeur <see langword="IStream" />. Utilisez <see langword="ISequentialStream::Read" /> pour lire les données. Si le membre <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> n’a pas la valeur <see langword="null" />, le processus de destination doit utiliser <see langword="IStream::Release" /> pour libérer le composant de flux.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary>Le support de stockage est un métafichier (HMETAFILE). Utilisez les fonctions Windows ou WIN32 pour accéder aux données du métafichier. Si le membre <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" /><see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> a la valeur <see langword="null" />, le processus de destination doit utiliser <see langword="DeleteMetaFile" /> pour supprimer la bitmap.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary>Aucune donnée n'est passée.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary>Contient des attributs d'un <see langword="UCOMITypeInfo" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary>Spécifie l'alignement des octets pour une instance de ce type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary>Taille d'une instance de ce type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary>Taille de la table de méthodes virtuelles (VTBL) de ce type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary>Indique le nombre de fonctions sur l'interface décrite par cette structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary>Indique le nombre d'interfaces implémentées sur l'interface décrite par cette structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary>Indique le nombre de variables et de champs de données sur l'interface décrite par cette structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary>Réservé à un usage ultérieur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary>GUID des informations de type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary>Attributs IDL du type décrit.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary>Paramètres régionaux des noms de membres et des chaînes de documentation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary>Réservé à un usage ultérieur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary>Constante utilisée avec les champs <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" /> et <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary>ID du constructeur ou <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> en l'absence d'un identificateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary>ID du destructeur ou <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" /> en l'absence d'un identificateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary>Si <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" />, spécifie le type pour lequel ce type est un alias.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary>Valeur <see cref="T:System.Runtime.InteropServices.TYPEKIND" /> décrivant le type décrit par ces informations.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary>Numéro de version principale.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary>Numéro de version secondaire.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary>Valeur <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> décrivant ces informations.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary>Décrit le type d’une variable, le type de retour d’une fonction ou le type d’un paramètre de fonction.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary>Si la variable est <see langword="VT_SAFEARRAY" /> ou <see langword="VT_PTR" />, le champ <see langword="lpValue" /> contient un pointeur vers un <see langword="TYPEDESC" /> spécifiant le type d'élément.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary>Indique le type de variante de l'élément décrit par ce <see langword="TYPEDESC" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary>Définit les propriétés et les attributs d'une description de type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary>La classe prend en charge l'agrégation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary>Description de type qui décrit un objet <see langword="Application" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary>Les instances du type peuvent être créées à l'aide de <see langword="ITypeInfo::CreateInstance" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary>Le type est un contrôle à partir duquel les autres types sont dérivés ; il ne doit pas être affiché aux utilisateurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary>Indique que l'interface dérive directement ou indirectement de <see langword="IDispatch" />. Cet indicateur est calculé ; il n'existe pas de langage de description d'objet pour celui-ci.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary>L'interface fournit à la fois une liaison <see langword="IDispatch" /> et VTBL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary>Le type ne doit pas être affiché aux navigateurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary>Le type est sous licence.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary>L'interface ne peut pas ajouter de membres au moment de l'exécution.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary>Les types utilisés dans l'interface sont totalement compatibles avec Automation, y compris la prise en charge de la liaison VTBL. Si une interface est de type dual, cet indicateur et <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" /> sont tous les deux définis. Cet indicateur n'est pas autorisé sur les dispinterfaces.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary>Le type est prédéfini. L'application cliente doit automatiquement créer une instance unique de l'objet doté de cet attribut. Le nom de la variable pointant vers l'objet est identique au nom de classe de l'objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary>Indique que l'interface va utiliser une bibliothèque de liens dynamiques proxy/stub. Cet indicateur spécifie que l'inscription du proxy de la bibliothèque de types ne doit pas être annulée lors de l'annulation de l'inscription de la bibliothèque de types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary>L'objet prend en charge <see langword="IConnectionPointWithDefault" /> et il a des comportements par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary>Ne doit pas être accessible à partir de langages de macro. Cet indicateur est destiné à des types de niveau système ou à des types que les explorateurs de types ne doivent pas afficher.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary>Indique que la résolution de noms doit être vérifiée avant les enfants dans les interfaces de base, ce qui est l'inverse du comportement par défaut.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary>Spécifie les différents types de données et de fonctions.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary>Type qui est un alias d'un autre type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary>Un ensemble d'interfaces de composants implémentés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary>Ensemble de méthodes et de propriétés accessibles par l'intermédiaire de <see langword="IDispatch::Invoke" />. Par défaut, les interfaces doubles retournent <see langword="TKIND_DISPATCH" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary>Ensemble d'énumérateurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary>Type comportant des fonctions virtuelles, toutes pures.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary>Marqueur de fin d'énumération.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary>Module pouvant uniquement comporter des fonctions et des données statiques (par exemple, une DLL).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary>Structure sans méthodes.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary>Union de tous les membres ayant un offset de zéro.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary>Identifie une bibliothèque de types particulière et fournit la prise en charge de la localisation des noms de membres.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary>Représente un identificateur global unique de bibliothèque d'une bibliothèque de types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary>Représente l'ID des paramètres régionaux d'une bibliothèque de types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary>Représente la plateforme matérielle cible d'une bibliothèque de types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary>Représente des indicateurs de bibliothèque.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary>Représente le numéro de version principale d'une bibliothèque de types.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary>Représente le numéro de version secondaire d'une bibliothèque de types.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary>Décrit une variable, une constante ou des données membres.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary>Contient des informations sur une variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary>Contient le type de variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary>Ce champ est réservé à une utilisation ultérieure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary>Indique l'ID de membre d'une variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary>Définit comment marshaler une variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary>Définit les propriétés d'une variable.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary>Contient des informations sur une variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary>Décrit une constante symbolique.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary>Indique l'offset de cette variable dans l'instance.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary>Identifie les constantes qui définissent les propriétés d'une variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary>La variable prend en charge la liaison de données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary>La variable est la propriété unique qui représente le mieux l’objet. Seule une variable dans les informations de type peut avoir cet attribut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary>Permet une optimisation dans laquelle le compilateur recherche un membre nommé « xyz » sur le type « abc ». Si ce membre est trouvé et s’il est marqué comme fonction d’accesseur pour un élément de la collection par défaut, un appel à cette fonction membre est généré. Autorisé sur les membres dans des dispinterfaces et des interfaces ; non autorisé sur des modules.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary>La variable est affichée à l'utilisateur comme pouvant être liée. Vous devez également définir <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary>Même si elle existe et peut être liée, la variable ne doit pas être visible pour l'utilisateur dans un explorateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary>La variable est mappée comme propriétés individuelles pouvant être liées.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary>La variable s’affiche dans un explorateur d’objets, mais pas dans un explorateur de propriétés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary>L’affectation à la variable ne doit pas être autorisée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary>Marque l’interface comme ayant des comportements par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary>Lorsque défini, toute tentative de modification directe de la propriété entraîne un appel à <see langword="IPropertyNotifySink::OnRequestEdit" />. L'implémentation de <see langword="OnRequestEdit" /> détermine si la modification est acceptée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary>La variable ne doit pas être accessible à partir de langages de macro. Cet indicateur est destiné à des variables de niveau système ou à des variables dont vous ne souhaitez pas permettre l'affichage dans des explorateurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary>La variable retourne un objet qui est une source d’événements.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary>La variable est l'affichage par défaut dans l'interface utilisateur.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary>Définit le type de variable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary>La structure <see langword="VARDESC" /> décrit une constante symbolique. Aucune mémoire ne lui est associée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary>La variable est accessible uniquement par l'intermédiaire de <see langword="IDispatch::Invoke" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary>La variable est un champ ou un membre du type. Elle existe à un offset fixe au sein de chaque instance du type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary>Il n'existe qu'une instance de la variable.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary>Spécifie la méthode à appeler quand vous annulez l'inscription d'un assembly pour utilisation à partir de COM ; cela permet l'exécution de code écrit par l'utilisateur pendant le processus d'annulation d'inscription.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers">
      <summary>Classe pour la gestion des wrappers de types COM IUnknown.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.#ctor">
      <summary>Constructeur d'instance.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ComputeVtables(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags,System.Int32@)">
      <summary>Calcule la Vtable souhaitée pour <paramref name="obj" />, en respectant les valeurs de <paramref name="flags" />.</summary>
      <param name="obj">Cible des Vtables retournées.</param>
      <param name="flags">Indicateurs utilisés pour calculer des Vtables.</param>
      <param name="count">Nombre d’éléments contenus dans la mémoire retournée.</param>
      <returns>
        <see cref="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry" /> pointeur contenant la mémoire pour toutes les entrées de l’interface COM.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.CreateObject(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)">
      <summary>Crée un objet managé pour l’objet vers lequel <paramref name="externalComObject" /> pointe, en respectant les valeurs de <paramref name="flags" />.</summary>
      <param name="externalComObject">Objet à importer pour une utilisation dans le Runtime .NET.</param>
      <param name="flags">Indicateurs utilisés pour décrire l’objet externe.</param>
      <returns>Objet managé associé à l’objet COM externe fourni.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetIUnknownImpl(System.IntPtr@,System.IntPtr@,System.IntPtr@)">
      <summary>Obtient l’implémentation IUnknown fournie par le Runtime.</summary>
      <param name="fpQueryInterface">Pointeur de fonction vers QueryInterface.</param>
      <param name="fpAddRef">Pointeur de fonction vers AddRef.</param>
      <param name="fpRelease">Pointeur de fonction vers Version.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)">
      <summary>Crée une représentation COM de l’objet fourni qui peut être passé à un environnement non managé.</summary>
      <param name="instance">Objet managé à exposer en dehors du Runtime .NET.</param>
      <param name="flags">Indicateurs utilisés pour configurer l’interface générée.</param>
      <returns>Interface COM générée qui peut être passée en dehors du Runtime .NET.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)">
      <summary>Obtient l’objet managé actuellement inscrit ou crée un nouvel objet managé et l’inscrit.</summary>
      <param name="externalComObject">Objet à importer pour une utilisation dans le Runtime .NET.</param>
      <param name="flags">Indicateurs utilisés pour décrire l’objet externe.</param>
      <returns>Objet managé associé à l’objet COM externe fourni.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrRegisterObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags,System.Object)">
      <summary>Obtient l’objet managé actuellement inscrit ou utilise l’objet managé fourni et l’inscrit.</summary>
      <param name="externalComObject">Objet à importer pour une utilisation dans le Runtime .NET.</param>
      <param name="flags">Indicateurs utilisés pour décrire l’objet externe.</param>
      <param name="wrapper">Objet à utiliser comme wrapper pour l’objet externe.</param>
      <exception cref="T:System.NotSupportedException">L’instance de wrapper est déjà associée à un objet externe.</exception>
      <returns>Objet managé associé à l’objet COM externe fourni.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.RegisterForMarshalling(System.Runtime.InteropServices.ComWrappers)">
      <summary>Inscrit une instance <see cref="T:System.Runtime.InteropServices.ComWrappers" /> à utiliser comme instance globale pour le marshaling dans le Runtime.</summary>
      <param name="instance">L'instance à enregistrer.</param>
      <exception cref="T:System.InvalidOperationException">La méthode a été appelée plusieurs fois.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.RegisterForTrackerSupport(System.Runtime.InteropServices.ComWrappers)">
      <summary>Inscrit une instance <see cref="T:System.Runtime.InteropServices.ComWrappers" /> à utiliser comme instance globale pour la prise en charge du dispositif de suivi de référence.</summary>
      <param name="instance">L'instance à enregistrer.</param>
      <exception cref="T:System.InvalidOperationException">La méthode a été appelée plusieurs fois.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ReleaseObjects(System.Collections.IEnumerable)">
      <summary>Met en production une collection d’objets en dehors de la durée de vie de l’interface COM ou de l’objet normal.</summary>
      <param name="objects">Collection d’objets à mettre en production.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch">
      <summary>Interface binaire d’application pour la répartition de fonctions d’une interface COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.Vtable">
      <summary>Champ qui représente la table de fonctions virtuelles (vtable) dans la disposition de l’instance IUnknown.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.GetInstance``1(System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch*)">
      <summary>En fonction d’un <see cref="T:System.IntPtr" /> d’une Vtable générée, le convertit en type cible.</summary>
      <param name="dispatchPtr">Pointeur vers l’entrée de la fonction Vtable.</param>
      <typeparam name="T">Type souhaité.</typeparam>
      <returns>Instance du type associé à l’appel de fonction distribué.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry">
      <summary>Type d’interface et pointeur vers la VTable ciblée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry.IID">
      <summary>Identificateur d’interface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry.Vtable">
      <summary>Pointeur vers la table de recherche virtuelle des fonctions.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CreateComInterfaceFlags">
      <summary>Spécifie les indicateurs de la méthode <see cref="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.CallerDefinedIUnknown">
      <summary>L’appelant fournira une Vtable IUnknown.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.None">
      <summary>Indicateur utilisé pour indiquer qu’aucun indicateur n’est défini.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.TrackerSupport">
      <summary>Indicateur utilisé pour indiquer que l’interface COM doit implémenter IReferenceTrackerTarget.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CreateObjectFlags">
      <summary>Spécifie les indicateurs de la méthode <see cref="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.None">
      <summary>Indicateur utilisé pour indiquer qu’aucun indicateur n’est défini.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.TrackerObject">
      <summary>Indique que l’objet COM externe fourni implémente le IReferenceTracker.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.UniqueInstance">
      <summary>Indique qu’il faut ignorer la mise en cache interne et toujours créer une instance unique.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary>Encapsule des objets que le marshaleur doit marshaler comme <see langword="VT_CY" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> avec le <see langword="Decimal" /> à encapsuler et marshaler comme <see langword="VT_CY" /> de type.</summary>
      <param name="obj">
        <see langword="Decimal" /> à encapsuler et marshaler comme <see langword="VT_CY" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" /> avec l'objet contenant le <see langword="Decimal" /> à encapsuler et marshaler comme <see langword="VT_CY" /> de type.</summary>
      <param name="obj">Objet contenant le <see langword="Decimal" /> à encapsuler et marshaler comme <see langword="VT_CY" />.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="obj" /> n'est pas un type <see cref="T:System.Decimal" />.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary>Obtient l'objet encapsulé à marshaler comme <see langword="VT_CY" /> de type.</summary>
      <returns>Objet encapsulé à marshaler comme <see langword="VT_CY" /> de type.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary>Indique si les appels IUnknown::QueryInterface de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> peuvent utiliser l’interface <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary>Les appels de méthode IUnknown::QueryInterface peuvent utiliser l’interface <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />. Lorsque vous utilisez cette valeur, la surcharge de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" /> fonctionne comme la surcharge de <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary>Les appels de méthode IUnknown::QueryInterface doivent ignorer l’interface <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary>Fournit des valeurs de retour pour la méthode <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary>L’interface d’un ID d’interface spécifique n’est pas disponible. Dans ce cas, l’interface retournée est <see langword="null" />. E_NOINTERFACE est retourné à l’appelant de IUnknown::QueryInterface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary>Le pointeur d’interface retourné par la méthode <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" /> peut être utilisé comme résultat de IUnknown::QueryInterface.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary>Le <see langword="QueryInterface" /> personnalisé n’a pas été utilisé. Au lieu de cela, l’implémentation par défaut de IUnknown::QueryInterface doit être utilisée.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary>Spécifie la valeur de l’énumération <see cref="T:System.Runtime.InteropServices.CharSet" />. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.CharSet" /> spécifiée.</summary>
      <param name="charSet">Une des valeurs de l'objet <see cref="T:System.Runtime.InteropServices.CharSet" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary>Obtient la valeur par défaut de <see cref="T:System.Runtime.InteropServices.CharSet" /> pour n’importe quel appel à <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</summary>
      <returns>Valeur par défaut de <see cref="T:System.Runtime.InteropServices.CharSet" /> pour tout appel à <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary>Spécifie les chemins d'accès utilisés pour rechercher les DLL qui fournissent des fonctions pour les appels de plateforme.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />, en spécifiant les chemins d'accès à utiliser lors de la recherche des cibles des appels de plateforme.</summary>
      <param name="paths">Combinaison de bits de valeurs d’énumération qui spécifie les chemins que la fonction <c>LoadLibraryEx</c> recherche lors des appels de code non managé.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary>Obtient une combinaison de bits de valeurs d’énumération qui spécifie les chemins que la fonction <c>LoadLibraryEx</c> recherche lors des appels de code non managé.</summary>
      <returns>Combinaison d'opérations de bits des valeurs de l'énumération qui spécifient des chemins de recherche pour les appels de code non managé.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary>Définit la valeur par défaut d'un paramètre quand il est appelé à partir d'un langage qui prend en charge les paramètres par défaut. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" /> avec la valeur par défaut d'un paramètre.</summary>
      <param name="value">Objet qui représente la valeur par défaut d'un paramètre.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary>Obtient la valeur par défaut d'un paramètre.</summary>
      <returns>Objet qui représente la valeur par défaut d'un paramètre.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary>Encapsule des objets que le marshaleur doit marshaler comme <see langword="VT_DISPATCH" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> avec l'objet à encapsuler.</summary>
      <param name="obj">Objet à encapsuler et à convertir en <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> n'est ni une classe ni un tableau.  
  
- ou - 
 <paramref name="obj" /> ne prend pas en charge <see langword="IDispatch" />.</exception>
      <exception cref="T:System.InvalidOperationException">Le paramètre <paramref name="obj" /> a été marqué avec un attribut <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> à qui une valeur <see langword="false" /> a été passée.  
  
- ou - 
Le paramètre <paramref name="obj" /> hérite d'un type marqué avec un attribut <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" /> à qui une valeur <see langword="false" /> a été passée.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary>Obtient l'objet encapsulé par <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</summary>
      <returns>Objet encapsulé par <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary>Spécifie l'identificateur de distribution COM (DISPID) d'une méthode, d'un champ ou d'une propriété.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see langword="DispIdAttribute" /> avec le DISPID spécifié.</summary>
      <param name="dispId">DISPID du membre.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary>Obtient le DISPID du membre.</summary>
      <returns>DISPID du membre.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary>Indique que la méthode avec attributs est exposée par une bibliothèque de liens dynamiques (DLL) non managée comme point d'entrée statique.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary>Active ou désactive le comportement de mappage ajusté lors de la conversion de caractères Unicode en caractères ANSI.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary>Indique la convention d'appel d'un point d'entrée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary>Indique comment marshaler les paramètres de chaîne vers la méthode et contrôle la composition des noms.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary>Indique le nom ou le numéro du point d'entrée de DLL à appeler.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary>Contrôle si le champ <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" /> déclenche la recherche de noms, par le Common Language Runtime, de points d'entrée autres que celui spécifié dans la DLL non managée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary>Indique si les méthodes non managées qui ont les valeurs de retour <see langword="HRESULT" /> ou <see langword="retval" /> sont traduites directement ou si les valeurs de retour <see langword="HRESULT" /> ou <see langword="retval" /> sont automatiquement converties en exceptions.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary>Indique si l'appelé appelle la fonction API Windows <see langword="SetLastError" /> avant de retourner la valeur à partir de la méthode avec attributs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary>Active ou désactive la levée d'une exception sur un caractère Unicode non mappable converti en caractère ANSI "?".</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> avec le nom de la DLL contenant la méthode à importer.</summary>
      <param name="dllName">Nom de la DLL contenant la méthode non managée. Cela peut inclure le nom complet d'un assembly, si la DLL est incluse dans un assembly.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary>Obtient le nom du fichier DLL contenant le point d'entrée.</summary>
      <returns>Nom du fichier DLL contenant le point d'entrée.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportResolver">
      <summary>Fournit un délégué utilisé pour résoudre des bibliothèques natives via un rappel.</summary>
      <param name="libraryName">Bibliothèque native à résoudre.</param>
      <param name="assembly">Assembly qui demande la résolution.</param>
      <param name="searchPath">
        <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> sur le PInvoke, le cas échéant. Sinon, <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> sur l’assembly, le cas échéant. Sinon, <see langword="null" />.</param>
      <returns>Descripteur de la bibliothèque native chargée en cas de réussite, ou <see cref="F:System.IntPtr.Zero" /> en cas d’échec.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary>Spécifie les chemins d'accès utilisés pour rechercher les DLL qui fournissent des fonctions pour les appels de plateforme.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary>Inclure le répertoire d'application dans le chemin de recherche de DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary>Lors de la recherche de dépendances d'assembly, inclut le répertoire qui contient l'assembly lui-même et commence par rechercher dans ce répertoire. Cette valeur est utilisée par le .NET Framework, avant la transmission des chemins à la fonction Win32 LoadLibraryEx.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary>Recherche dans le répertoire de l’application, puis appelle la fonction Win32 LoadLibraryEx avec l’indicateur <c>LOAD_WITH_ALTERED_SEARCH_PATH</c>. Cette valeur est ignorée si une autre valeur est spécifiée. Les systèmes d'exploitation qui ne prennent pas en charge l'attribut <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" /> utilisent cette valeur et ignorent d'autres valeurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary>Inclure le répertoire d'application, le répertoire <see langword="%WinDir%\System32" /> et les répertoires utilisateur dans le chemin de recherche de DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary>Inclure le répertoire <see langword="%WinDir%\System32" /> dans le chemin de recherche de DLL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary>Recherche les dépendances d'une DLL dans le dossier où la DLL se trouve avant d'explorer d'autres dossiers.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary>Inclure tout chemin qui a été explicitement ajouté au chemin de recherche au niveau du processus à l’aide de la fonction Win32 <c>AddDllDirectory</c>.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute">
      <summary>Attribut exigé par tout type retourné par <see cref="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute.#ctor">
      <summary>Constructeur d'instance.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary>Encapsule des objets que le marshaleur doit marshaler comme <see langword="VT_ERROR" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> avec le HRESULT correspondant à l'exception spécifiée.</summary>
      <param name="e">L'exception à convertir en code d'erreur.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> avec le HRESULT de l'erreur.</summary>
      <param name="errorCode">HRESULT de l'erreur.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ErrorWrapper" /> avec un objet contenant le HRESULT de l'erreur.</summary>
      <param name="errorCode">Objet contenant le HRESULT de l'erreur.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="errorCode" /> n'est pas un type <see cref="T:System.Int32" />.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary>Obtient le code d'erreur du wrapper.</summary>
      <returns>HRESULT de l'erreur.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary>Fournit un <see cref="T:System.Guid" /> explicite quand un GUID automatique n’est pas souhaité.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.GuidAttribute" /> avec le GUID spécifié.</summary>
      <param name="guid">
        <see cref="T:System.Guid" /> à affecter.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary>Obtient le <see cref="T:System.Guid" /> de la classe.</summary>
      <returns>
        <see cref="T:System.Guid" /> de la classe.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary>Effectue le suivi des handles en attente et force un garbage collection quand le seuil spécifié est atteint.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.HandleCollector" /> à l'aide d'un nom et d'un seuil auquel commencer la collection de handles.</summary>
      <param name="name">Nom du collecteur. Ce paramètre vous permet de nommer des collecteurs qui assurent le suivi des types de handles séparément.</param>
      <param name="initialThreshold">Valeur qui spécifie le point auquel les collections doivent commencer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="initialThreshold" /> est inférieur à 0.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.HandleCollector" /> à l'aide d'un nom, d'un seuil auquel commencer la collection de handles et d'un seuil auquel la collection de handles doit avoir lieu.</summary>
      <param name="name">Nom du collecteur.  Ce paramètre vous permet de nommer des collecteurs qui assurent le suivi des types de handles séparément.</param>
      <param name="initialThreshold">Valeur qui spécifie le point auquel les collections doivent commencer.</param>
      <param name="maximumThreshold">Valeur qui spécifie le point auquel les collections doivent avoir lieu. Ce paramètre doit avoir pour valeur le nombre maximal de handles disponibles.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="initialThreshold" /> est inférieur à 0.  
  
- ou - 
Le paramètre <paramref name="maximumThreshold" /> est inférieur à 0.</exception>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="maximumThreshold" /> est inférieur au paramètre <paramref name="initialThreshold" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary>Incrémente le compte de handle actuel.</summary>
      <exception cref="T:System.InvalidOperationException">La valeur de la propriété <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> est inférieure à 0.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary>Décrémente le compte de handle actuel.</summary>
      <exception cref="T:System.InvalidOperationException">La valeur de la propriété <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" /> est inférieure à 0.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary>Obtient le nombre de handles collectés.</summary>
      <returns>Nombre de handles collectés.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary>Obtient une valeur qui spécifie le point auquel les collections doivent commencer.</summary>
      <returns>Valeur qui spécifie le point auquel les collections doivent commencer.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary>Obtient une valeur qui spécifie le point auquel les collections doivent avoir lieu.</summary>
      <returns>Valeur qui spécifie le point auquel les collections doivent avoir lieu.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary>Obtient le nom d'un objet <see cref="T:System.Runtime.InteropServices.HandleCollector" />.</summary>
      <returns>Cette propriété <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" /> vous permet de nommer des collecteurs qui assurent le suivi des types de handles séparément.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary>Inclut dans un wrapper un objet managé contenant un handle vers une ressource transmise au code non managé à l’aide de l’appel de code non managé.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.HandleRef" /> avec l'objet à encapsuler et un handle vers la ressource utilisée par le code non managé.</summary>
      <param name="wrapper">Objet managé qui ne doit pas être finalisé avant le retour de l'appel de plateforme.</param>
      <param name="handle">
        <see cref="T:System.IntPtr" /> indiquant un handle vers une ressource.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary>Retourne le handle vers une ressource de l'objet <see cref="T:System.Runtime.InteropServices.HandleRef" /> spécifié.</summary>
      <param name="value">Objet qui nécessite un handle.</param>
      <returns>Handle vers une ressource de l'objet <see cref="T:System.Runtime.InteropServices.HandleRef" /> spécifié.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary>Retourne la représentation interne sous forme d'entier d'un objet <see cref="T:System.Runtime.InteropServices.HandleRef" />.</summary>
      <param name="value">Objet <see cref="T:System.Runtime.InteropServices.HandleRef" /> duquel récupérer une représentation interne sous forme d'entier.</param>
      <returns>Objet <see cref="T:System.IntPtr" /> qui représente un objet <see cref="T:System.Runtime.InteropServices.HandleRef" />.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary>Obtient le handle vers une ressource.</summary>
      <returns>Handle vers une ressource.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary>Obtient l'objet contenant le handle vers une ressource.</summary>
      <returns>Objet contenant le handle vers une ressource.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary>Permet aux clients d’accéder à l’objet réel, plutôt qu’à l’objet adaptateur fourni par un marshaleur personnalisé.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary>Permet d’accéder à l’objet sous-jacent encapsulé par un marshaleur personnalisé.</summary>
      <returns>Objet contenu dans l’objet adaptateur.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary>Permet aux utilisateurs d'écrire un code d'activation pour des objets managés qui étendent <see cref="T:System.MarshalByRefObject" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary>Crée une instance du type spécifié.</summary>
      <param name="serverType">Type à activer.</param>
      <returns>
        <see cref="T:System.MarshalByRefObject" /> associé au type spécifié.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary>Fournit des wrappers personnalisés permettant de gérer les appels de méthodes.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary>Effectue le nettoyage des données managées quand elles ne sont plus nécessaires.</summary>
      <param name="ManagedObj">Objet managé à détruire.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary>Effectue le nettoyage des données non managées quand elles ne sont plus nécessaires.</summary>
      <param name="pNativeData">Pointeur vers les données non managées à détruire.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary>Retourne la taille des données natives à marshaler.</summary>
      <returns>Taille des données natives, en octets.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary>Convertit les données managées en données non managées.</summary>
      <param name="ManagedObj">Objet managé à convertir.</param>
      <returns>Pointeur vers la vue COM de l'objet managé.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary>Convertit les données non managées en données managées.</summary>
      <param name="pNativeData">Pointeur vers les données non managées à encapsuler.</param>
      <returns>Objet qui représente la vue managée des données COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary>Permet aux développeurs de fournir une implémentation managée et personnalisée de la méthode IUnknown::QueryInterface(REFIID riid, void **ppvObject).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary>Retourne une interface en fonction de l'ID d'interface spécifié.</summary>
      <param name="iid">GUID de l'interface demandée.</param>
      <param name="ppv">Référence à l'interface demandée, lorsque cette méthode est retournée.</param>
      <returns>Une des valeurs d’énumération qui indique si une implémentation personnalisée de IUnknown::QueryInterface a été utilisée.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.IDynamicInterfaceCastable">
      <summary>Interface utilisée pour participer à un échec de conversion de type.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)">
      <summary>Appelé pendant le dispatch de l’interface quand le type d’interface donné est introuvable dans les métadonnées de la classe.</summary>
      <param name="interfaceType">Type de l'interface.</param>
      <exception cref="T:System.InvalidOperationException">Le type retourné n’est pas un type d’interface ou il n’a pas été marqué avec le <see cref="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute" />.</exception>
      <returns>Type qui doit être utilisé dans le dispatch pour <paramref name="interfaceType" /> sur l’objet actif.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented(System.RuntimeTypeHandle,System.Boolean)">
      <summary>Appelé quand une instance de classe en cours d’implémentation est castée en type d’interface qui n’est pas contenu dans les métadonnées de la classe.</summary>
      <param name="interfaceType">Type de l'interface.</param>
      <param name="throwIfNotImplemented">Indique si la fonction doit lever une exception au lieu de retourner <see langword="false" />.</param>
      <returns>
        <see langword="true" /> si cet objet peut être casté dans l’interface donnée ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary>Indique que les types définis dans un assembly ont été définis dans une bibliothèque de types à l'origine.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" /> avec le nom du fichier bibliothèque de types d'origine.</summary>
      <param name="tlbFile">Emplacement du fichier bibliothèque de types d'origine.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary>Obtient le nom du fichier bibliothèque de types d'origine.</summary>
      <returns>Nom du fichier bibliothèque de types d'origine.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary>Indique si une interface managée est double, de dispatch uniquement ou <see langword="IUnknown" /> uniquement lorsqu'elle est exposée à COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> avec le membre de l'énumération <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> spécifié.</summary>
      <param name="interfaceType">Décrit comment l'interface doit être exposée aux clients COM.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" /> avec le membre de l'énumération <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> spécifié.</summary>
      <param name="interfaceType">Une des valeurs <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> qui décrit comment l'interface doit être exposée aux clients COM.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary>Obtient la valeur <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> qui décrit comment l'interface doit être exposée à COM.</summary>
      <returns>Valeur <see cref="T:System.Runtime.InteropServices.ComInterfaceType" /> qui décrit comment l'interface doit être exposée à COM.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary>Exception levée lorsqu'un objet COM non valide est utilisé.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary>Initialise une instance de <see langword="InvalidComObjectException" /> avec les propriétés par défaut.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see langword="COMException" /> à partir de données de sérialisation.</summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary>Initialise une instance de <see langword="InvalidComObjectException" /> avec un message.</summary>
      <param name="message">Message qui indique la raison de l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary>Exception levée par le marshaleur quand il rencontre un argument dont le type de variante ne peut pas être marshalé en code managé.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see langword="InvalidOleVariantTypeException" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see langword="InvalidOleVariantTypeException" /> à partir de données de sérialisation.</summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see langword="InvalidOleVariantTypeException" /> avec le message spécifié.</summary>
      <param name="message">Message qui indique la raison de l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary>Indique que la signature non managée d'une méthode attend un paramètre LCID (Locale Identifier, identificateur de paramètres régionaux).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see langword="LCIDConversionAttribute" /> avec la position du LCID dans la signature non managée.</summary>
      <param name="lcid">Indique la position de l'argument LCID dans la signature non managée, dans laquelle le premier argument est 0.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary>Obtient la position de l'argument LCID dans la signature non managée.</summary>
      <returns>Position de l'argument LCID dans la signature non managée, dans laquelle le premier argument est 0.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary>Prend en charge la personnalisation par l'utilisateur des stubs d'interopérabilité dans les scénarios COM Interop managés.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" /> avec le type de classe et le nom de méthode spécifiés.</summary>
      <param name="classType">Classe qui contient la méthode stub requise.</param>
      <param name="methodName">Nom de la méthode stub.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="methodName" /> est introuvable.  
  
- ou - 
La méthode n'est pas statique ou non générique.  
  
- ou - 
La liste de paramètres de la méthode ne correspond pas à la liste de paramètres attendue pour le stub.</exception>
      <exception cref="T:System.MethodAccessException">L'interface qui contient la méthode d'interopérabilité managée n'a aucun accès à la méthode stub, parce que la méthode stub a l'accessibilité privée ou protégée, ou à cause d'un problème de sécurité.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary>Obtient la classe qui contient la méthode stub requise.</summary>
      <returns>Classe qui contient le stub d'interopérabilité personnalisé.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary>Obtient le nom de la méthode stub.</summary>
      <returns>Nom d'un stub d'interopérabilité personnalisé.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary>Fournit une collection de méthodes pour l’allocation de mémoire non managée, la copie de blocs de mémoire non managée et la conversion de types managés en types non managés, ainsi que diverses autres méthodes utilisées lors de l’interaction avec du code non managé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary>Représente la taille de caractère par défaut dans le système ; il s'agit de la valeur 2 pour les systèmes Unicode et de la valeur 1 pour les systèmes ANSI. Ce champ est en lecture seule.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary>Représente la taille maximale, en octets, d'un jeu de caractères à deux octets (DBSC) pour le système d'exploitation actuel. Ce champ est en lecture seule.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary>Incrémente le décompte de références sur l'interface spécifiée.</summary>
      <param name="pUnk">Décompte de références d'interface à incrémenter.</param>
      <returns>Nouvelle valeur du décompte de références sur le paramètre <paramref name="pUnk" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary>Alloue un bloc de mémoire de la taille spécifiée à partir de l'allocateur de mémoire de tâche COM.</summary>
      <param name="cb">Taille du bloc de mémoire à allouer.</param>
      <exception cref="T:System.OutOfMemoryException">La mémoire est insuffisante pour répondre à la demande.</exception>
      <returns>Entier représentant l'adresse du bloc de mémoire alloué. Cette mémoire doit être libérée avec <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary>Alloue de la mémoire à partir de la mémoire non managée du processus à l'aide du nombre d'octets spécifié.</summary>
      <param name="cb">Nombre d'octets requis en mémoire.</param>
      <exception cref="T:System.OutOfMemoryException">La mémoire est insuffisante pour répondre à la demande.</exception>
      <returns>Pointeur vers la mémoire nouvellement allouée. Cette mémoire doit être libérée en utilisant la méthode <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary>Alloue de la mémoire à partir de la mémoire non managée du processus à l'aide du pointeur vers le nombre d'octets spécifié.</summary>
      <param name="cb">Nombre d'octets requis en mémoire.</param>
      <exception cref="T:System.OutOfMemoryException">La mémoire est insuffisante pour répondre à la demande.</exception>
      <returns>Pointeur vers la mémoire nouvellement allouée. Cette mémoire doit être libérée en utilisant la méthode <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary>Indique si des wrappers RCW (Runtime Callable Wrapper) d'un contexte quelconque sont disponibles pour le nettoyage.</summary>
      <returns>
        <see langword="true" /> si des wrappers RCW sont disponibles pour le nettoyage ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary>Obtient un pointeur d'interface identifié par le moniker spécifié.</summary>
      <param name="monikerName">Moniker correspondant au pointeur d'interface voulu.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">Un HRESULT non reconnu a été retourné par la méthode <see langword="BindToMoniker" /> non managée.</exception>
      <returns>Objet contenant une référence au pointeur d’interface identifié par le paramètre <paramref name="monikerName" />. Un moniker est un nom et dans ce cas, le moniker est défini par une interface.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary>Modifie la force du handle CCW (COM Callable Wrapper) d’un objet.</summary>
      <param name="otp">Objet dont le wrapper CCW (COM Callable Wrapper) contient un handle de références comptabilisées. Le handle est fort si le décompte de références sur le wrapper CCW (COM Callable Wrapper) est supérieur à zéro ; sinon, il est faible.</param>
      <param name="fIsWeak">
        <see langword="true" /> pour changer la force du handle sur le paramètre <paramref name="otp" /> afin de l'affaiblir quel que soit son décompte de références ; <see langword="false" /> afin que la force du handle sur <paramref name="otp" /> soit fonction du décompte de références.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary>Indique au runtime de nettoyer tous les wrappers RCW (Runtime Callable Wrapper) alloués dans le contexte actuel.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copie des données d'un tableau d'entiers 8 bits non signés managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination">Pointeur mémoire de destination de la copie.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> et <paramref name="length" /> ne sont pas valides.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copie des données d'un tableau de caractères managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination">Pointeur mémoire de destination de la copie.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> et <paramref name="length" /> ne sont pas valides.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copie des données d'un tableau de nombres à virgule flottante double précision managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination">Pointeur mémoire de destination de la copie.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> et <paramref name="length" /> ne sont pas valides.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copie des données à partir d'un tableau d'entiers 16 bits signés managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination">Pointeur mémoire de destination de la copie.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> et <paramref name="length" /> ne sont pas valides.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copie des données à partir d'un tableau d'entiers 32 bits signés managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination">Pointeur mémoire de destination de la copie.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> et <paramref name="length" /> ne sont pas valides.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="startIndex" /> ou <paramref name="length" /> est <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copie des données à partir d'un tableau d'entiers 64 bits signés managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination">Pointeur mémoire de destination de la copie.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> et <paramref name="length" /> ne sont pas valides.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary>Copie des données d'un pointeur mémoire non managé dans un tableau d'entiers 8 bits non signés managé.</summary>
      <param name="source">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary>Copie des données d'un pointeur mémoire non managé dans un tableau de caractères managé.</summary>
      <param name="source">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary>Copie des données d'un pointeur mémoire non managé dans un tableau de nombres à virgule flottante double précision managé.</summary>
      <param name="source">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary>Copie des données à partir d'un pointeur mémoire non managé vers un tableau d'entiers 16 bits signés managé.</summary>
      <param name="source">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary>Copie des données à partir d'un pointeur mémoire non managé vers un tableau d'entiers 32 bits signés managé.</summary>
      <param name="source">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary>Copie des données à partir d'un pointeur mémoire non managé vers un tableau d'entiers 64 bits signés managé.</summary>
      <param name="source">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary>Copie des données d’un pointeur mémoire non managé dans un tableau de <see cref="T:System.IntPtr" /> managé.</summary>
      <param name="source">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary>Copie des données d'un pointeur mémoire non managé dans un tableau de nombres à virgule flottante simple précision managé.</summary>
      <param name="source">Pointeur mémoire à partir duquel effectuer la copie.</param>
      <param name="destination">Tableau dans lequel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau de destination où la copie doit commencer.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copie des données d’un tableau de <see cref="T:System.IntPtr" /> managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination">Pointeur mémoire de destination de la copie.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary>Copie des données d'un tableau de nombres à virgule flottante simple précision managé et unidimensionnel vers un pointeur mémoire non managé.</summary>
      <param name="source">Tableau unidimensionnel à partir duquel effectuer la copie.</param>
      <param name="startIndex">Index de base zéro dans le tableau source où la copie doit commencer.</param>
      <param name="destination">Pointeur mémoire de destination de la copie.</param>
      <param name="length">Nombre d'éléments de tableau à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="startIndex" /> et <paramref name="length" /> ne sont pas valides.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> ou <paramref name="length" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary>Agrège un objet managé avec l'objet COM spécifié.</summary>
      <param name="pOuter">Le pointeur <see langword="IUnknown" /> externe.</param>
      <param name="o">Objet à agréger.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> est un objet Windows Runtime.</exception>
      <returns>Le pointeur <see langword="IUnknown" /> interne de l’objet managé.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Agrège un objet managé du type spécifié avec l'objet COM spécifié.</summary>
      <param name="pOuter">Pointeur IUnknown externe.</param>
      <param name="o">Objet managé à agréger.</param>
      <typeparam name="T">Type de l'objet managé à agréger.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> est un objet Windows Runtime.</exception>
      <returns>Pointeur IUnknown interne de l’objet managé.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary>Encapsule l'objet COM spécifié dans un objet du type spécifié.</summary>
      <param name="o">L’objet à encapsuler.</param>
      <param name="t">Le type de wrapper à créer.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> doit provenir de <see langword="__ComObject" />.  
  
- ou - 
 <paramref name="t" /> est un type Windows Runtime.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="t" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException">Impossible de convertir <paramref name="o" /> dans le type de destination, car il ne prend pas en charge toutes les interfaces requises.</exception>
      <returns>Objet récemment encapsulé constituant une instance du type requis.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Encapsule l'objet COM spécifié dans un objet du type spécifié.</summary>
      <param name="o">L’objet à encapsuler.</param>
      <typeparam name="T">Type d'objet à encapsuler.</typeparam>
      <typeparam name="TWrapper">Type d'objet à retourner.</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> doit provenir de <see langword="__ComObject" />.  
  
- ou - 
 <typeparamref name="T" /> est un type Windows Runtime.</exception>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> ne peut pas être converti dans <paramref name="TWrapper" /> puisqu'il ne prend pas en charge toutes les interfaces requises.</exception>
      <returns>Objet récemment encapsulé.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary>Libère toutes les sous-structures vers lesquelles pointe le bloc de mémoire non managée spécifié.</summary>
      <param name="ptr">Pointeur vers un bloc de mémoire non managée.</param>
      <param name="structuretype">Type d'une classe mise en forme. Ceci fournit les informations relatives à la disposition nécessaires pour supprimer la mémoire tampon dans le paramètre <paramref name="ptr" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structureType" /> possède une disposition automatique. Optez plutôt pour séquentiel ou explicite.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Libère toutes les sous-structures d'un type spécifié vers lesquelles pointe le bloc de mémoire non managé spécifié.</summary>
      <param name="ptr">Pointeur vers un bloc de mémoire non managée.</param>
      <typeparam name="T">Type de la structure mise en forme. Ceci fournit les informations relatives à la disposition nécessaires pour supprimer la mémoire tampon dans le paramètre <paramref name="ptr" />.</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> possède une disposition automatique. Optez plutôt pour séquentiel ou explicite.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary>Libère toutes les références à un wrapper RCW (Runtime Callable Wrapper) en affectant la valeur 0 à son décompte de références.</summary>
      <param name="o">Wrapper RCW à libérer.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> n'est pas un objet COM valide.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> est <see langword="null" />.</exception>
      <returns>Nouvelle valeur du décompte de références du wrapper RCW associé au paramètre <paramref name="o" />, qui est 0 (zéro) si la libération réussit.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary>Libère un <see langword="BSTR" /> à l’aide de la fonction COM SysFreeString.</summary>
      <param name="ptr">Adresse du BSTR à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary>Libère un bloc de mémoire alloué par l'allocateur de mémoire de tâche COM non managé.</summary>
      <param name="ptr">Adresse de la mémoire à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary>Libère la mémoire précédemment allouée de la mémoire non managée du processus.</summary>
      <param name="hglobal">Handle retourné par l'appel correspondant d'origine à <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary>Retourne le GUID (identificateur global unique) du type spécifié, ou génère un GUID en utilisant l'algorithme employé par l'exportateur de bibliothèques de types (TlbExp.exe).</summary>
      <param name="type">Type pour lequel un GUID doit être généré.</param>
      <returns>Identificateur du type spécifié.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary>Retourne un ProgID (identificateur programmatique) pour le type spécifié.</summary>
      <param name="type">Type pour lequel un ProgID doit être obtenu.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="type" /> n'est pas une classe qui peut être créée par COM. La classe doit être publique, disposer d’un constructeur public sans paramètre et être visible par COM.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="type" /> a la valeur <see langword="null" />.</exception>
      <returns>ProgID pour le type spécifié.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary>Retourne un pointeur vers une interface IUnknown qui représente l’interface spécifiée de l’objet spécifié. L'accès à l'interface de requête personnalisée est activé par défaut.</summary>
      <param name="o">Objet qui fournit l'interface.</param>
      <param name="T">Type d'interface demandé.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <typeparamref name="T" /> n'est pas une interface.  
  
- ou - 
Le type n'est pas visible par COM.  
  
- ou - 
Le paramètre <typeparamref name="T" /> est une définition de type générique.</exception>
      <exception cref="T:System.InvalidCastException">Le paramètre <paramref name="o" /> ne prend pas en charge l'interface demandée.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="o" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <typeparamref name="T" /> a la valeur <see langword="null" />.</exception>
      <returns>Pointeur d'interface qui représente l'interface spécifiée de l'objet.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary>Retourne un pointeur vers une interface IUnknown qui représente l’interface spécifiée de l’objet spécifié. L'accès à l'interface de requête personnalisée est contrôlé par le mode de personnalisation spécifié.</summary>
      <param name="o">Objet qui fournit l'interface.</param>
      <param name="T">Type d'interface demandé.</param>
      <param name="mode">Une des valeurs d'énumération qui indique s'il faut appliquer une personnalisation <see langword="IUnknown::QueryInterface" /> fournie par un <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <typeparamref name="T" /> n'est pas une interface.  
  
- ou - 
Le type n'est pas visible par COM.  
  
- ou - 
Le paramètre <typeparamref name="T" /> est une définition de type générique.</exception>
      <exception cref="T:System.InvalidCastException">L'objet <paramref name="o" /> ne prend pas en charge l'interface demandée.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="o" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <typeparamref name="T" /> a la valeur <see langword="null" />.</exception>
      <returns>Pointeur d'interface qui représente l'interface de l'objet.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures] 
Retourne un pointeur vers une interface IUnknown qui représente l’interface spécifiée d’un objet du type spécifié. L'accès à l'interface de requête personnalisée est activé par défaut.</summary>
      <param name="o">Objet qui fournit l'interface.</param>
      <typeparam name="T">Type d'élément <paramref name="o" />.</typeparam>
      <typeparam name="TInterface">Type d'interface à retourner.</typeparam>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="TInterface" /> n'est pas une interface.  
  
- ou - 
Le type n'est pas visible par COM.  
  
- ou - 
Le paramètre <typeparamref name="T" /> est un type générique ouvert.</exception>
      <exception cref="T:System.InvalidCastException">Le paramètre <paramref name="o" /> ne prend pas en charge l'interface <paramref name="TInterface" />.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="o" /> a la valeur <see langword="null" />.</exception>
      <returns>Pointeur d'interface qui représente l'interface <paramref name="TInterface" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary>Récupère des données référencées par la clé spécifiée à partir de l'objet COM spécifié.</summary>
      <param name="obj">Objet COM qui contient les données souhaitées.</param>
      <param name="key">Clé dans la table de hachage interne de <paramref name="obj" /> dans laquelle récupérer les données.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="key" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> n’est pas un objet COM.  
  
- ou - 
 <paramref name="obj" /> est un objet Windows Runtime.</exception>
      <returns>Données représentées par le paramètre <paramref name="key" /> dans la table de hachage interne du paramètre <paramref name="obj" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary>Convertit un pointeur fonction non managé en un délégué.</summary>
      <param name="ptr">Pointeur vers la fonction non managée à convertir.</param>
      <param name="t">Type du délégué à retourner.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="t" /> n'est pas un délégué ou est générique.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="ptr" /> a la valeur <see langword="null" />.  
  
- ou - 
Le paramètre <paramref name="t" /> a la valeur <see langword="null" />.</exception>
      <returns>Instance de délégué qui peut être castée en type délégué approprié.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Convertit un pointeur fonction non managé en un délégué d'un type spécifié.</summary>
      <param name="ptr">Pointeur vers la fonction non managée à convertir.</param>
      <typeparam name="TDelegate">Type de délégué à retourner.</typeparam>
      <exception cref="T:System.ArgumentException">Le paramètre générique <paramref name="TDelegate" /> n'est pas un délégué ou il s'agit d'un type générique ouvert.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="ptr" /> a la valeur <see langword="null" />.</exception>
      <returns>Instance du type délégué spécifié.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary>Récupère le dernier emplacement dans la table de fonctions virtuelles (v-table ou VTBL) d'un type en cas d'exposition à COM.</summary>
      <param name="t">Type qui représente une interface ou une classe.</param>
      <returns>Dernier emplacement VTBL de l'interface en cas d'exposition à COM. Si le paramètre <paramref name="t" /> est une classe, l'emplacement VTBL retourné est le dernier emplacement dans l'interface qui est générée à partir de la classe.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary>Récupère un code qui identifie le type de l'exception qui s'est produite.</summary>
      <returns>Type de l'exception.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary>Convertit le code d’erreur HRESULT spécifié en objet <see cref="T:System.Exception" /> correspondant.</summary>
      <param name="errorCode">HRESULT à convertir.</param>
      <returns>Objet qui représente le HRESULT converti, ou <see langword="null" /> si la valeur HRESULT ne représente pas un code d’erreur (par exemple, <see langword="S_OK" /> et <see langword="S_FALSE" />).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary>Convertit le code d’erreur HRESULT spécifié en objet <see cref="T:System.Exception" /> correspondant, avec des informations supplémentaires sur l’erreur passées dans une interface IErrorInfo pour l’objet exception.</summary>
      <param name="errorCode">HRESULT à convertir.</param>
      <param name="errorInfo">Pointeur vers l’interface <see langword="IErrorInfo" /> qui fournit plus d’informations sur l’erreur. Vous pouvez spécifier <c>IntPtr(0)</c> pour utiliser l’interface <see langword="IErrorInfo" /> actuelle ou <c>IntPtr(-1)</c> pour ignorer l’interface <see langword="IErrorInfo" /> actuelle et construire l’exception uniquement à partir du code d’erreur.</param>
      <returns>Objet qui représente le HRESULT converti et les informations obtenues de <paramref name="errorInfo" />, ou <see langword="null" /> si la valeur HRESULT ne représente pas un code d’erreur (par exemple, <see langword="S_OK" /> et <see langword="S_FALSE" />).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary>Récupère une description indépendante de l'ordinateur d'une exception, ainsi que des informations sur l'état de l'ordinateur qui existait pour le thread lorsque l'exception s'est produite.</summary>
      <returns>Pointeur vers une structure EXCEPTION_POINTERS.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary>Convertit un délégué en pointeur fonction pouvant être appelé à partir du code non managé.</summary>
      <param name="d">Délégué à passer au code non managé.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="d" /> est une définition de type générique.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="d" /> a la valeur <see langword="null" />.</exception>
      <returns>Valeur qui peut être passée à du code non managé, qui peut à son tour l'utiliser pour appeler le délégué managé sous-jacent.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Convertit un délégué d'un type spécifié en pointeur fonction pouvant être appelé à partir du code non managé.</summary>
      <param name="d">Délégué à passer au code non managé.</param>
      <typeparam name="TDelegate">Type de délégué à convertir.</typeparam>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="d" /> est une définition de type générique.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="d" /> a la valeur <see langword="null" />.</exception>
      <returns>Valeur qui peut être passée à du code non managé, qui peut à son tour l'utiliser pour appeler le délégué managé sous-jacent.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary>Retourne le handle d'instance (HINSTANCE) pour le module spécifié.</summary>
      <param name="m">Module dont HINSTANCE est souhaité.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="m" /> a la valeur <see langword="null" />.</exception>
      <returns>HINSTANCE de <paramref name="m" /> ou -1 si le module n'a pas de HINSTANCE.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary>Convertit l'exception spécifiée en HRESULT.</summary>
      <param name="e">Exception à convertir en HRESULT.</param>
      <returns>HRESULT mappé en l'exception fournie.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary>Retourne le HRESULT correspondant à la dernière erreur provoquée par du code Win32 exécuté en utilisant <see cref="T:System.Runtime.InteropServices.Marshal" />.</summary>
      <returns>HRESULT correspondant au dernier code d'erreur Win32.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary>Retourne une interface IDispatch à partir d’un objet managé.</summary>
      <param name="o">Objet dont l'interface <see langword="IDispatch" /> est demandée.</param>
      <exception cref="T:System.InvalidCastException">
        <paramref name="o" /> ne prend pas en charge l'interface demandée.</exception>
      <returns>Pointeur <see langword="IDispatch" /> pour le paramètre <paramref name="o" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary>Retourne une interface IUnknown à partir d’un objet managé.</summary>
      <param name="o">Objet dont l'interface <see langword="IUnknown" /> est demandée.</param>
      <returns>Pointeur <see langword="IUnknown" /> pour le paramètre <paramref name="o" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary>Retourne le code d'erreur retourné par la dernière fonction non managée appelée en utilisant l'appel de code non managé dont l'indicateur <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" /> est activé.</summary>
      <returns>Dernier code d’erreur défini par un appel à la fonction Win32 SetLastError.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary>Convertit un objet en COM VARIANT.</summary>
      <param name="obj">Objet pour lequel obtenir un VARIANT COM.</param>
      <param name="pDstNativeVariant">Pointeur devant recevoir le VARIANT et qui correspond au paramètre <paramref name="obj" />.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="obj" /> est une instance d’un type générique.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Convertit un objet d’un type spécifié en COM VARIANT.</summary>
      <param name="obj">Objet pour lequel obtenir un VARIANT COM.</param>
      <param name="pDstNativeVariant">Pointeur devant recevoir le VARIANT et qui correspond au paramètre <paramref name="obj" />.</param>
      <typeparam name="T">Type de l’objet à convertir.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary>Retourne une instance d’un type qui représente un objet COM par un pointeur vers son interface IUnknown.</summary>
      <param name="pUnk">Pointeur vers l'interface <see langword="IUnknown" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="pUnk" /> est <see cref="F:System.IntPtr.Zero" />.</exception>
      <returns>Objet qui représente l'objet COM non managé spécifié.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary>Convertit COM VARIANT en un objet.</summary>
      <param name="pSrcNativeVariant">Pointeur vers un VARIANT COM.</param>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> n'est pas un type VARIANT valide.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> a un type non pris en charge.</exception>
      <returns>Objet qui correspond au paramètre <paramref name="pSrcNativeVariant" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Convertit COM VARIANT en un objet de type spécifié.</summary>
      <param name="pSrcNativeVariant">Pointeur vers un VARIANT COM.</param>
      <typeparam name="T">Type dans lequel convertir COM VARIANT.</typeparam>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
        <paramref name="pSrcNativeVariant" /> n'est pas un type VARIANT valide.</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="pSrcNativeVariant" /> a un type non pris en charge.</exception>
      <returns>Objet du type spécifié qui correspond au paramètre <paramref name="pSrcNativeVariant" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary>Convertit un tableau de VARIANT COM en un tableau d’objets.</summary>
      <param name="aSrcNativeVariant">Pointeur vers le premier élément d'un tableau de VARIANT COM.</param>
      <param name="cVars">Nombre de VARIANT COM dans <paramref name="aSrcNativeVariant" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> est un nombre négatif.</exception>
      <returns>Tableau d'objets qui correspond à <paramref name="aSrcNativeVariant" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Convertit un tableau de COM VARIANT en un tableau d'un type spécifié.</summary>
      <param name="aSrcNativeVariant">Pointeur vers le premier élément d'un tableau de VARIANT COM.</param>
      <param name="cVars">Nombre de VARIANT COM dans <paramref name="aSrcNativeVariant" />.</param>
      <typeparam name="T">Type de tableau à retourner.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cVars" /> est un nombre négatif.</exception>
      <returns>Tableau d'objets <typeparamref name="T" /> qui correspond à <paramref name="aSrcNativeVariant" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary>Obtient le premier emplacement dans la table de fonctions virtuelles (v-table ou VTBL) contenant des méthodes définies par l'utilisateur.</summary>
      <param name="t">Type qui représente une interface ou une classe.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> n'est pas visible par COM.</exception>
      <returns>Premier emplacement VTBL qui contient des méthodes définies par l'utilisateur. Le premier emplacement est 3 si l’interface est basée sur IUnknown et 7 si l’interface est basée sur IDispatch.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary>Retourne un objet managé d'un type spécifié qui représente un objet COM.</summary>
      <param name="pUnk">Pointeur vers l’interface <see langword="IUnknown" /> de l’objet non géré.</param>
      <param name="t">Type de la classe managée demandée.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="t" /> n’est pas attribué avec <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.  
  
- ou - 
 <paramref name="t" /> est un type Windows Runtime.</exception>
      <returns>Instance de la classe correspondant à l’objet <see cref="T:System.Type" /> qui représente l’objet COM non géré demandé.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary>Retourne le type associé à l'identificateur de classe (CLSID) spécifié.</summary>
      <param name="clsid">CLSID du type à retourner.</param>
      <returns>
        <see langword="System.__ComObject" /> que le CLSID soit valide ou non.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary>Récupère le nom du type représenté par un objet ITypeInfo.</summary>
      <param name="typeInfo">Objet qui représente un pointeur <see langword="ITypeInfo" />.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="typeInfo" /> a la valeur <see langword="null" />.</exception>
      <returns>Nom du type vers lequel pointe le paramètre <paramref name="typeInfo" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary>Crée un objet de wrapper RCW (Runtime Callable Wrapper) unique pour une interface IUnknown donnée.</summary>
      <param name="unknown">Pointeur managé vers une interface <see langword="IUnknown" />.</param>
      <returns>Wrapper RCW (Runtime Callable Wrapper) unique pour l'interface <see langword="IUnknown" /> spécifiée.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary>Indique si un objet spécifié représente un objet COM.</summary>
      <param name="o">Objet à vérifier.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="o" /> est <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> si le paramètre <paramref name="o" /> est un type COM ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary>Indique si un type est visible par les clients COM.</summary>
      <param name="t">Type à vérifier pour la visibilité COM.</param>
      <returns>
        <see langword="true" /> si le type est visible par COM ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary>Retourne l'offset de champ de la forme non managée de la classe managée.</summary>
      <param name="t">Type valeur ou type référence mis en forme qui spécifie la classe managée. Vous devez appliquer l'attribut <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> à la classe.</param>
      <param name="fieldName">Champ dans le paramètre <paramref name="t" />.</param>
      <exception cref="T:System.ArgumentException">La classe ne peut pas être exportée sous forme de structure ou le champ n'est pas public. À compter de .NET Framework version 2.0, le champ peut être privé.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="t" /> a la valeur <see langword="null" />.</exception>
      <returns>Offset, en octets, du paramètre <paramref name="fieldName" /> au sein de la classe spécifiée déclarée par l'appel de code non managé.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Retourne l'offset de champ de la forme non managée d'une classe managée spécifiée.</summary>
      <param name="fieldName">Nom du champ dans le type <paramref name="T" />.</param>
      <typeparam name="T">Type valeur managé ou type référence mis en forme. Vous devez appliquer l'attribut <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> à la classe.</typeparam>
      <returns>Offset, en octets, du paramètre <paramref name="fieldName" /> au sein de la classe spécifiée déclarée par l'appel de code non managé.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary>Exécute les tâches de configuration de méthode effectuées une seule fois sans appeler la méthode.</summary>
      <param name="m">Méthode à vérifier.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="m" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="m" /> n'est pas un objet <see cref="T:System.Reflection.MethodInfo" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary>Exécute un contrôle avant l'édition des liens pour toutes les méthodes sur une classe.</summary>
      <param name="c">Classe dont les méthodes doivent être vérifiées.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="c" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary>Copie tous les caractères jusqu’au premier caractère NULL d’une chaîne ANSI ou UTF-8 non managée dans un objet <see cref="T:System.String" /> managé et élargit chaque caractère au format UTF-16.</summary>
      <param name="ptr">Adresse du premier caractère de la chaîne non managée.</param>
      <returns>Chaîne managée qui contient une copie de la chaîne non managée. Si <paramref name="ptr" /> est <see langword="null" />, la méthode retourne une chaîne vide.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary>Alloue un objet <see cref="T:System.String" /> managé, y copie un nombre spécifié de caractères d'une chaîne ANSI ou UTF-8 non managée et élargit chaque caractère au format UTF-16.</summary>
      <param name="ptr">Adresse du premier caractère de la chaîne non managée.</param>
      <param name="len">Nombre d'octets de la chaîne d'entrée à copier.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> est inférieur à zéro.</exception>
      <returns>Chaîne managée qui contient une copie de la chaîne native si la valeur du paramètre <paramref name="ptr" /> n'est pas <see langword="null" /> ; sinon, cette méthode retourne <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary>Alloue un objet <see cref="T:System.String" /> managé et copie tous les caractères - jusqu'au premier caractère null - d'une chaîne stockée dans de la mémoire non managée dans cet objet.</summary>
      <param name="ptr">Pour les plateformes Unicode, adresse du premier caractère Unicode.  
  
 - ou -  
  
 Pour les plateformes ANSI, adresse du premier caractère ANSI.</param>
      <returns>Chaîne managée qui contient une copie de la chaîne non managée si la valeur du paramètre <paramref name="ptr" /> n’est pas <see langword="null" /> ; sinon, cette méthode retourne <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary>Alloue un <see cref="T:System.String" /> managé afin d'y copier le nombre spécifié de caractères d'une chaîne stockée dans la mémoire non managée.</summary>
      <param name="ptr">Pour les plateformes Unicode, adresse du premier caractère Unicode.  
  
 - ou -  
  
 Pour les plateformes ANSI, adresse du premier caractère ANSI.</param>
      <param name="len">Nombre de caractères à copier.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="len" /> est inférieur à zéro.</exception>
      <returns>Chaîne managée qui contient une copie de la chaîne native si la valeur du paramètre <paramref name="ptr" /> n'est pas <see langword="null" /> ; sinon, cette méthode retourne <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary>Alloue un <see cref="T:System.String" /> managé pour y copier une chaîne binaire (BSTR) dans la mémoire non managée.</summary>
      <param name="ptr">Adresse du premier caractère de la chaîne non managée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="ptr" /> est égal à <see cref="F:System.IntPtr.Zero" />.</exception>
      <returns>Chaîne managée qui contient une copie de la chaîne non managée.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary>Alloue un objet <see cref="T:System.String" /> managé et copie tous les caractères - jusqu'au premier caractère null - d'une chaîne Unicode non managée dans cet objet.</summary>
      <param name="ptr">Adresse du premier caractère de la chaîne non managée.</param>
      <returns>Chaîne managée qui contient une copie de la chaîne non managée si la valeur du paramètre <paramref name="ptr" /> n’est pas <see langword="null" /> ; sinon, cette méthode retourne <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary>Alloue un objet <see cref="T:System.String" /> managé et copie un nombre spécifié de caractères d'une chaîne Unicode non managée dans cet objet.</summary>
      <param name="ptr">Adresse du premier caractère de la chaîne non managée.</param>
      <param name="len">Nombre de caractères Unicode à copier.</param>
      <returns>Chaîne managée qui contient une copie de la chaîne non managée si la valeur du paramètre <paramref name="ptr" /> n’est pas <see langword="null" /> ; sinon, cette méthode retourne <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <summary>Alloue un objet <see cref="T:System.String" /> managé et copie tous les caractères - jusqu'au premier caractère null d’une chaîne UTF-8 non managée dans cet objet.</summary>
      <param name="ptr">Adresse du premier caractère de la chaîne non managée.</param>
      <returns>Chaîne managée qui contient une copie de la chaîne non managée si la valeur du paramètre <paramref name="ptr" /> n’est pas <see langword="null" /> ; sinon, cette méthode retourne <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <summary>Alloue un objet <see cref="T:System.String" /> managé et y copie un nombre spécifié d’octets d’une chaîne UTF8 non managée.</summary>
      <param name="ptr">Adresse du premier caractère de la chaîne non managée.</param>
      <param name="byteLen">Nombre d'octets à copier.</param>
      <returns>Chaîne managée qui contient une copie de la chaîne non managée si la valeur du paramètre <paramref name="ptr" /> n’est pas <see langword="null" /> ; sinon, cette méthode retourne <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary>Marshale les données d'un bloc de mémoire non managée dans un objet managé.</summary>
      <param name="ptr">Pointeur vers un bloc de mémoire non managée.</param>
      <param name="structure">Objet dans lequel les données doivent être copiées. Il doit s'agir d'une instance d'une classe mise en forme.</param>
      <exception cref="T:System.ArgumentException">La disposition de structure n'est ni séquentielle ni explicite.  
  
 - ou -  
  
 La structure est un type valeur boxed.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary>Marshale, dans un nouvel objet managé alloué du type spécifié, les données d'un bloc de mémoire non managée.</summary>
      <param name="ptr">Pointeur vers un bloc de mémoire non managée.</param>
      <param name="structureType">Type d'objet à créer. Cet objet doit représenter une classe mise en forme ou une structure.</param>
      <exception cref="T:System.ArgumentException">La disposition du paramètre <paramref name="structureType" /> n'est ni séquentielle ni explicite.  
  
- ou - 
Le paramètre <paramref name="structureType" /> est une définition de type générique.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="structureType" /> est <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException">La classe spécifiée par <paramref name="structureType" /> n’a pas de constructeur sans paramètre accessible.</exception>
      <returns>Objet managé contenant les données vers lesquelles pointe le paramètre <paramref name="ptr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Marshale, dans un nouvel objet managé alloué du type spécifié par un paramètre de type générique, les données d'un bloc de mémoire non managée.</summary>
      <param name="ptr">Pointeur vers un bloc de mémoire non managée.</param>
      <typeparam name="T">Type de l'objet dans lequel les données doivent être copiées. Il doit s'agir d'une classe ou d'une structure mise en forme.</typeparam>
      <exception cref="T:System.ArgumentException">La disposition de <typeparamref name="T" /> n'est ni séquentielle ni explicite.</exception>
      <exception cref="T:System.MissingMethodException">La classe spécifiée par <typeparamref name="T" /> n’a pas de constructeur sans paramètre accessible.</exception>
      <returns>Objet managé contenant les données vers lesquelles pointe le paramètre <paramref name="ptr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Marshale les données d'un bloc de mémoire non managée dans un objet managé d'un type spécifié.</summary>
      <param name="ptr">Pointeur vers un bloc de mémoire non managée.</param>
      <param name="structure">Objet dans lequel les données doivent être copiées.</param>
      <typeparam name="T">Type d'élément <paramref name="structure" />. Il doit s'agir d'une classe formatée.</typeparam>
      <exception cref="T:System.ArgumentException">La disposition de structure n'est ni séquentielle ni explicite.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary>Demande un pointeur vers une interface spécifiée à partir d'un objet COM.</summary>
      <param name="pUnk">Interface à interroger.</param>
      <param name="iid">Identificateur d'interface (IID) de l'interface demandée.</param>
      <param name="ppv">Lorsque cette méthode est retournée, contient une référence à l'interface retournée.</param>
      <returns>HRESULT indiquant la réussite ou l'échec de l'appel.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary>Lit un octet unique à partir de la mémoire non managée.</summary>
      <param name="ptr">Adresse de début de lecture dans la mémoire non managée.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> n'est pas un format reconnu.  
  
- ou - 
 <paramref name="ptr" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="ptr" /> n'est pas valide.</exception>
      <returns>Octet lu dans la mémoire non managée.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary>Lit un seul octet à un offset (ou index) donné dans la mémoire managée.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée où commencer la lecture.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <returns>Octet lu dans la mémoire non managée à l'offset donné.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary>Lit un seul octet à un offset (ou index) donné dans la mémoire managée.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée de l'objet source.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
      <returns>Octet lu dans la mémoire non managée à l'offset donné.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary>Lit un entier 16 bits signé à partir de la mémoire non managée.</summary>
      <param name="ptr">Adresse de début de lecture dans la mémoire non managée.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> n'est pas un format reconnu.  
  
- ou - 
 <paramref name="ptr" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="ptr" /> n'est pas valide.</exception>
      <returns>Entier signé 16 bits lu dans la mémoire non managée.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary>Lit un entier signé 16 bits à un offset donné dans la mémoire non managée.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée où commencer la lecture.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <returns>Entier signé 16 bits lu dans la mémoire non managée à l'offset donné.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary>Lit un entier signé 16 bits à un offset donné dans la mémoire non managée.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée de l'objet source.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
      <returns>Entier signé 16 bits lu dans la mémoire non managée à l'offset donné.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary>Lit un entier 32 bits signé à partir de la mémoire non managée.</summary>
      <param name="ptr">Adresse de début de lecture dans la mémoire non managée.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> n'est pas un format reconnu.  
  
- ou - 
 <paramref name="ptr" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="ptr" /> n'est pas valide.</exception>
      <returns>Entier signé 32 bits lu dans la mémoire non managée.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary>Lit un entier signé 32 bits à un offset donné dans la mémoire non managée.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée où commencer la lecture.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <returns>Entier signé 32 bits lu dans la mémoire non managée.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary>Lit un entier signé 32 bits à un offset donné dans la mémoire non managée.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée de l'objet source.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
      <returns>Entier signé 32 bits lu dans la mémoire non managée à l'offset donné.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary>Lit un entier 64 bits signé à partir de la mémoire non managée.</summary>
      <param name="ptr">Adresse de début de lecture dans la mémoire non managée.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> n'est pas un format reconnu.  
  
- ou - 
 <paramref name="ptr" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="ptr" /> n'est pas valide.</exception>
      <returns>Entier signé 64 bits lu dans la mémoire non managée.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary>Lit un entier signé 64 bits à un offset donné dans la mémoire non managée.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée où commencer la lecture.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <returns>Entier signé 64 bits lu dans la mémoire non managée à l'offset donné.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary>Lit un entier signé 64 bits à un offset donné dans la mémoire non managée.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée de l'objet source.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
      <returns>Entier signé 64 bits lu dans la mémoire non managée à l'offset donné.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary>Lit un entier natif dimensionné par processeur dans la mémoire non managée.</summary>
      <param name="ptr">Adresse de début de lecture dans la mémoire non managée.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> n'est pas un format reconnu.  
  
- ou - 
 <paramref name="ptr" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="ptr" /> n'est pas valide.</exception>
      <returns>Entier lu dans la mémoire non managée. Un entier 32 bits est retourné sur les ordinateurs 32 bits et un entier 64 bits est retourné sur les ordinateurs 64 bits.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary>Lit un entier natif dimensionné par processeur à un offset donné dans la mémoire non managée.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée où commencer la lecture.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <returns>Entier lu dans la mémoire non managée à l'offset donné.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary>Lit un entier natif dimensionné par processeur à partir de la mémoire non managée.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée de l'objet source.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant la lecture.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
      <returns>Entier lu dans la mémoire non managée à l'offset donné.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary>Redimensionne un bloc de mémoire précédemment alloué avec <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</summary>
      <param name="pv">Pointeur vers la mémoire allouée avec <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" />.</param>
      <param name="cb">Nouvelle taille du bloc alloué.</param>
      <exception cref="T:System.OutOfMemoryException">La mémoire est insuffisante pour répondre à la demande.</exception>
      <returns>Entier représentant l'adresse du bloc de mémoire réalloué. Cette mémoire doit être libérée avec <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary>Redimensionne un bloc de mémoire précédemment alloué avec <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</summary>
      <param name="pv">Pointeur vers la mémoire allouée avec <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" />.</param>
      <param name="cb">Nouvelle taille du bloc alloué. Ce n’est pas un pointeur ; c’est le nombre d’octets que vous demandez, cast vers type <see cref="T:System.IntPtr" />. Si vous passez un pointeur, il est traité comme une taille.</param>
      <exception cref="T:System.OutOfMemoryException">La mémoire est insuffisante pour répondre à la demande.</exception>
      <returns>Pointeur vers la mémoire réallouée. Cette mémoire doit être libérée avec <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary>Décrémente le décompte de références sur l'interface spécifiée.</summary>
      <param name="pUnk">Interface à libérer.</param>
      <returns>Nouvelle valeur du décompte de références sur l'interface spécifiée par le paramètre <paramref name="pUnk" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary>Décrémente le décompte de références du wrapper RCW (Runtime Callable Wrapper) associé à l’objet COM indiqué.</summary>
      <param name="o">Objet COM à libérer.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="o" /> n'est pas un objet COM valide.</exception>
      <exception cref="T:System.NullReferenceException">
        <paramref name="o" /> est <see langword="null" />.</exception>
      <returns>Nouvelle valeur du décompte de références du wrapper RCW (Runtime Callable Wrapper) associé à <paramref name="o" />. Cette valeur est généralement zéro puisque le wrapper RCW (Runtime Callable Wrapper) ne conserve qu'une seule référence à l'objet COM inclus dans un wrapper indépendamment du nombre de clients managés qui l'appellent.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary>Alloue une chaîne binaire (BSTR) non managée et y copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé.</summary>
      <param name="s">Objet managé à copier.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <returns>Adresse, dans la mémoire non managée, où le paramètre <paramref name="s" /> a été copié, ou 0 si un objet null a été fourni.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans un bloc de mémoire alloué à partir de l’allocateur de tâche COM non managé.</summary>
      <param name="s">Objet managé à copier.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <returns>Adresse, dans la mémoire non managée, où le paramètre <paramref name="s" /> a été copié, ou 0 si un objet null a été fourni.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans un bloc de mémoire alloué à partir de l’allocateur de tâche COM non managé.</summary>
      <param name="s">Objet managé à copier.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <returns>Adresse, dans la mémoire non managée, où le paramètre <paramref name="s" /> a été copié, ou 0 si un objet null a été fourni.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans la mémoire non managée, avec conversion au format ANSI pendant la copie.</summary>
      <param name="s">Objet managé à copier.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <returns>Adresse (dans la mémoire non managée) où le paramètre <paramref name="s" /> a été copié, ou 0 si un objet null a été fourni.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans la mémoire non managée.</summary>
      <param name="s">Objet managé à copier.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <returns>Adresse, dans la mémoire non managée, où <paramref name="s" /> a été copié, ou 0 si <paramref name="s" /> est un objet <see cref="T:System.Security.SecureString" /> dont la longueur est 0.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary>Définit des données référencées par la clé spécifiée dans l'objet COM spécifié.</summary>
      <param name="obj">Objet COM dans lequel stocker les données.</param>
      <param name="key">Clé dans la table de hachage interne de l'objet COM dans lequel stocker les données.</param>
      <param name="data">Données à définir.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="obj" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="key" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="obj" /> n’est pas un objet COM.  
  
- ou - 
 <paramref name="obj" /> est un objet Windows Runtime.</exception>
      <returns>
        <see langword="true" /> si les données ont été correctement définies ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary>Retourne la taille non managée d'un objet en octets.</summary>
      <param name="structure">Objet dont la taille doit être retournée.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="structure" /> a la valeur <see langword="null" />.</exception>
      <returns>Taille de l'objet spécifié dans le code non managé.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary>Retourne la taille d'un type non managé en octets.</summary>
      <param name="t">Type dont la taille doit être retournée.</param>
      <exception cref="T:System.ArgumentException">Le paramètre <paramref name="t" /> est une définition de type générique.</exception>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="t" /> a la valeur <see langword="null" />.</exception>
      <returns>Taille du type spécifié dans le code non managé.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Retourne la taille d'un type non managé en octets.</summary>
      <typeparam name="T">Type dont la taille doit être retournée.</typeparam>
      <returns>Taille, en octets, du type spécifié par le paramètre de type générique <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Retourne la taille non managée en octets d'un objet d'un type spécifié.</summary>
      <param name="structure">Objet dont la taille doit être retournée.</param>
      <typeparam name="T">Type du paramètre <paramref name="structure" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="structure" /> a la valeur <see langword="null" />.</exception>
      <returns>Taille, en octets, de l'objet spécifié dans le code non managé.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary>Alloue une chaîne BSTR pour y copier le contenu d’un <see cref="T:System.String" /> managé.</summary>
      <param name="s">Chaîne managée à copier.</param>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La longueur de <paramref name="s" /> est hors limites.</exception>
      <returns>Pointeur non managé vers le <see langword="BSTR" /> ou 0 si <paramref name="s" /> a la valeur null.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary>Copie le contenu d'un <see cref="T:System.String" /> managé dans un bloc de mémoire alloué à partir de l'allocateur de tâche COM non managé.</summary>
      <param name="s">Chaîne managée à copier.</param>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="s" /> dépasse la longueur maximale autorisée par le système d'exploitation.</exception>
      <returns>Entier représentant un pointeur vers le bloc de mémoire alloué pour la chaîne, ou 0 si <paramref name="s" /> est <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary>Copie le contenu d'un <see cref="T:System.String" /> managé dans un bloc de mémoire alloué à partir de l'allocateur de tâche COM non managé.</summary>
      <param name="s">Chaîne managée à copier.</param>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">La longueur de <paramref name="s" /> est hors limites.</exception>
      <returns>Bloc de mémoire alloué, ou 0 si <paramref name="s" /> est <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary>Copie le contenu d'un <see cref="T:System.String" /> managé dans un bloc de mémoire alloué à partir de l'allocateur de tâche COM non managé.</summary>
      <param name="s">Chaîne managée à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="s" /> dépasse la longueur maximale autorisée par le système d'exploitation.</exception>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <returns>Entier représentant un pointeur vers le bloc de mémoire alloué pour la chaîne, ou 0 si s est <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <summary>Copie le contenu d'un <see cref="T:System.String" /> managé dans un bloc de mémoire alloué à partir de l'allocateur de tâche COM non managé.</summary>
      <param name="s">Chaîne managée à copier.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="s" /> dépasse la longueur maximale autorisée par le système d'exploitation.</exception>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <returns>Entier représentant un pointeur vers le bloc de mémoire alloué pour la chaîne, ou 0 si <paramref name="s" /> est <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary>Copie le contenu d’un objet <see cref="T:System.String" /> managé dans la mémoire non managée, avec conversion au format ANSI pendant la copie.</summary>
      <param name="s">Chaîne managée à copier.</param>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="s" /> dépasse la longueur maximale autorisée par le système d'exploitation.</exception>
      <returns>Adresse, dans la mémoire non managée, où <paramref name="s" /> a été copié, ou 0 si <paramref name="s" /> est <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary>Copie le contenu d'un objet <see cref="T:System.String" /> managé dans la mémoire non managée, avec conversion au format ANSI le cas échéant.</summary>
      <param name="s">Chaîne managée à copier.</param>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <returns>Adresse, dans la mémoire non managée, où la chaîne a été copiée, ou 0 si <paramref name="s" /> est <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary>Copie le contenu d'un objet <see cref="T:System.String" /> managé dans la mémoire non managée.</summary>
      <param name="s">Chaîne managée à copier.</param>
      <exception cref="T:System.OutOfMemoryException">La méthode n'a pas pu allouer suffisamment de mémoire de tas natif.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Le paramètre <paramref name="s" /> dépasse la longueur maximale autorisée par le système d'exploitation.</exception>
      <returns>Adresse, dans la mémoire non managée, où <paramref name="s" /> a été copié, ou 0 si <paramref name="s" /> est <see langword="null" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary>Marshale les données d’un objet managé dans un bloc de mémoire non managée.</summary>
      <param name="structure">Objet managé contenant les données à marshaler. Cet objet doit être une structure ou une instance d'une classe mise en forme.</param>
      <param name="ptr">Pointeur vers un bloc de mémoire non managée qui doit être alloué avant l'appel de cette méthode.</param>
      <param name="fDeleteOld">
        <see langword="true" /> pour appeler la méthode <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" /> sur le paramètre <paramref name="ptr" /> avant que cette méthode copie les données. Le bloc doit contenir des données valides. Notez que passer <see langword="false" /> lorsque le bloc de mémoire contient déjà des données peut entraîner une fuite de mémoire.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> est un type référence qui n’est pas une classe mise en forme.  
  
- ou - 
 <paramref name="structure" /> est une instance d’un type générique (dans le .NET Framework 4.5 et les versions antérieures uniquement).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Marshale les données d'un objet managé d'un type spécifié dans un bloc de mémoire non managée.</summary>
      <param name="structure">Objet managé contenant les données à marshaler. L'objet doit être une structure ou une instance d'une classe mise en forme.</param>
      <param name="ptr">Pointeur vers un bloc de mémoire non managée qui doit être alloué avant l'appel de cette méthode.</param>
      <param name="fDeleteOld">
        <see langword="true" /> pour appeler la méthode <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" /> sur le paramètre <paramref name="ptr" /> avant que cette méthode copie les données. Le bloc doit contenir des données valides. Notez que passer <see langword="false" /> lorsque le bloc de mémoire contient déjà des données peut entraîner une fuite de mémoire.</param>
      <typeparam name="T">Type de l'objet managé.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="structure" /> est un type référence qui n’est pas une classe mise en forme.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary>Lève une exception avec une valeur HRESULT d'échec spécifique.</summary>
      <param name="errorCode">HRESULT correspondant à l'exception souhaitée.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary>Lève une exception avec un HRESULT d’échec spécifique, en fonction de l’interface IErrorInfo spécifiée.</summary>
      <param name="errorCode">HRESULT correspondant à l'exception souhaitée.</param>
      <param name="errorInfo">Pointeur vers l’interface IErrorInfo qui fournit plus d’informations sur l’erreur. Spécifiez <c>IntPtr(0)</c> pour utiliser l’interface IErrorInfo actuelle ou <c>IntPtr(-1)</c> pour ignorer l’interface IErrorInfo actuelle et construire l’exception uniquement à partir du code d’erreur.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary>Obtient l'adresse de l'élément à l'index spécifié dans le tableau spécifié.</summary>
      <param name="arr">Tableau qui contient l'élément souhaité.</param>
      <param name="index">Index dans le paramètre <paramref name="arr" /> de l'élément souhaité.</param>
      <returns>Adresse de <paramref name="index" /> dans <paramref name="arr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary>[Pris en charge dans le .NET Framework 4.5.1 et versions ultérieures]  
  
 Obtient l'adresse de l'élément à l'index spécifié dans un tableau du type spécifié.</summary>
      <param name="arr">Tableau qui contient l'élément souhaité.</param>
      <param name="index">Index de l'élément souhaité dans le tableau <paramref name="arr" />.</param>
      <typeparam name="T">Type de tableau.</typeparam>
      <returns>Adresse de <paramref name="index" /> dans <paramref name="arr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary>Écrit une valeur d'octet unique dans la mémoire non managée.</summary>
      <param name="ptr">Adresse où écrire dans la mémoire non managée.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> n'est pas un format reconnu.  
  
- ou - 
 <paramref name="ptr" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary>Écrit une valeur d'octet unique dans la mémoire non managée à l'offset spécifié.</summary>
      <param name="ptr">Adresse de base où écrire dans la mémoire non managée.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary>Écrit une valeur d'octet unique dans la mémoire non managée à l'offset spécifié.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée de l'objet cible.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary>Écrit un caractère en tant que valeur entière 16 bits dans la mémoire non managée.</summary>
      <param name="ptr">Adresse où écrire dans la mémoire non managée.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> n'est pas un format reconnu.  
  
- ou - 
 <paramref name="ptr" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary>Écrit une valeur entière 16 bits dans la mémoire non managée.</summary>
      <param name="ptr">Adresse où écrire dans la mémoire non managée.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> n'est pas un format reconnu.  
  
- ou - 
 <paramref name="ptr" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary>Écrit une valeur entière signée 16 bits dans la mémoire non managée à un offset spécifié.</summary>
      <param name="ptr">Adresse de base où écrire dans le tas natif.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary>Écrit une valeur entière signée 16 bits dans la mémoire non managée à l'offset spécifié.</summary>
      <param name="ptr">Adresse de base où écrire dans la mémoire non managée.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary>Écrit une valeur entière signée 16 bits dans la mémoire non managée à un offset spécifié.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée de l'objet cible.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary>Écrit une valeur entière signée 16 bits dans la mémoire non managée à un offset spécifié.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée de l'objet cible.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary>Écrit une valeur d'entier 32 bits signé dans la mémoire non managée.</summary>
      <param name="ptr">Adresse où écrire dans la mémoire non managée.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> n'est pas un format reconnu.  
  
- ou - 
 <paramref name="ptr" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary>Écrit une valeur entière signée 32 bits dans la mémoire non managée à l'offset spécifié.</summary>
      <param name="ptr">Adresse de base où écrire dans la mémoire non managée.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary>Écrit une valeur entière signée 32 bits dans la mémoire non managée à un offset spécifié.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée de l'objet cible.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary>Écrit une valeur entière signée 64 bits dans la mémoire non managée à un offset spécifié.</summary>
      <param name="ptr">Adresse de base de la mémoire non managée à écrire.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary>Écrit une valeur d'entier 64 bits signé dans la mémoire non managée.</summary>
      <param name="ptr">Adresse où écrire dans la mémoire non managée.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> n'est pas un format reconnu.  
  
- ou - 
 <paramref name="ptr" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary>Écrit une valeur entière signée 64 bits dans la mémoire non managée à un offset spécifié.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée de l'objet cible.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary>Écrit une valeur entière native dimensionnée par processeur dans la mémoire non managée à l'offset spécifié.</summary>
      <param name="ptr">Adresse de base où écrire dans la mémoire non managée.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary>Écrit une valeur entière native dimensionnée par processeur dans la mémoire non managée.</summary>
      <param name="ptr">Adresse où écrire dans la mémoire non managée.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">
        <paramref name="ptr" /> n'est pas un format reconnu.  
  
- ou - 
 <paramref name="ptr" /> est <see langword="null" />.  
  
- ou - 
 <paramref name="ptr" /> n'est pas valide.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary>Écrit une valeur entière native dimensionnée par processeur dans la mémoire non managée.</summary>
      <param name="ptr">Adresse de base dans la mémoire non managée de l'objet cible.</param>
      <param name="ofs">Offset d'octet supplémentaire, qui est ajouté au paramètre <paramref name="ptr" /> avant l'écriture.</param>
      <param name="val">Valeur à écrire.</param>
      <exception cref="T:System.AccessViolationException">L'adresse de base (<paramref name="ptr" />) plus l'octet d'offset (<paramref name="ofs" />) produisent une adresse null ou non valide.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="ptr" /> est un objet <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />. Cette méthode n'accepte pas les paramètres <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary>Libère un pointeur BSTR qui a été alloué à l’aide de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" />.</summary>
      <param name="s">Adresse du pointeur <see langword="BSTR" /> à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary>Libère un pointeur de chaîne non managé qui a été alloué à l'aide de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" />.</summary>
      <param name="s">Adresse de la chaîne non managée à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary>Libère un pointeur de chaîne non managé qui a été alloué à l'aide de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" />.</summary>
      <param name="s">Adresse de la chaîne non managée à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <summary>Libère un pointeur de chaîne non managé qui a été alloué à l'aide de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)" />.</summary>
      <param name="s">Adresse de la chaîne non managée à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary>Libère un pointeur de chaîne non managé qui a été alloué à l'aide de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" />.</summary>
      <param name="s">Adresse de la chaîne non managée à libérer.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary>Libère un pointeur de chaîne non managé qui a été alloué à l'aide de la méthode <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" />.</summary>
      <param name="s">Adresse de la chaîne non managée à libérer.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary>Indique comment marshaler les données entre du code managé et du code non managé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary>Spécifie le type d'élément des champs <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> ou <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" /> managés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary>Spécifie l'index de paramètre de l'attribut <see langword="iid_is" /> non managé utilisé par COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary>Fournit des informations supplémentaires à un marshaleur personnalisé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary>Spécifie le nom qualifié complet d'un marshaleur personnalisé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary>Implémente <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> en tant que type.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary>Indique le type d'élément de <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary>Indique le type d'élément défini par l'utilisateur de <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary>Indique le nombre d'éléments dans le tableau de longueur fixe ou le nombre de caractères (non d'octets) dans une chaîne à importer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary>Indique le paramètre de base zéro qui contient le nombre d'éléments de tableau, semblable à <see langword="size_is" /> dans COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> spécifiée.</summary>
      <param name="unmanagedType">Valeur sous laquelle les données doivent être marshalées.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> avec le membre de l'énumération <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> spécifié.</summary>
      <param name="unmanagedType">Valeur sous laquelle les données doivent être marshalées.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary>Obtient la valeur <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> sous laquelle les données doivent être marshalées.</summary>
      <returns>Valeur <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> sous laquelle les données doivent être marshalées.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary>Exception qui est levée par le marshaleur quand il rencontre un <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> qu'il ne prend pas en charge.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see langword="MarshalDirectiveException" /> avec des propriétés par défaut.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see langword="MarshalDirectiveException" /> à partir de données de sérialisation.</summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see langword="MarshalDirectiveException" /> avec un message d'erreur spécifié.</summary>
      <param name="message">Message d'erreur qui spécifie la raison de l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.NativeLibrary">
      <summary>Fournit des API pour la gestion des bibliothèques natives.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)">
      <summary>Libère une bibliothèque chargée avec le descripteur de système d’exploitation spécifié, ou n’effectue aucune action si le descripteur d’entrée est <see cref="F:System.IntPtr.Zero" />.</summary>
      <param name="handle">Le descripteur de système d’exploitation de la bibliothèque native doit être libéré.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)">
      <summary>Obtient l’adresse d’un symbole exporté.</summary>
      <param name="handle">Descripteur de système d’exploitation de la bibliothèque native.</param>
      <param name="name">Nom du symbole exporté.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handle" /> ou <paramref name="name" /> est <see langword="null" />.</exception>
      <exception cref="T:System.EntryPointNotFoundException">Le symbole est introuvable.</exception>
      <returns>Adresse du symbole.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)">
      <summary>Fournit une API simple pour le chargement d’une bibliothèque native qui encapsule le chargeur du système d’exploitation et utilise des indicateurs par défaut.</summary>
      <param name="libraryPath">Nom de la bibliothèque native à charger.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.DllNotFoundException">La bibliothèque est introuvable.</exception>
      <exception cref="T:System.BadImageFormatException">La bibliothèque n’est pas valide.</exception>
      <returns>Descripteur de système d’exploitation de la bibliothèque native chargée.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
      <summary>Fournit une API de haut niveau pour le chargement d’une bibliothèque native.</summary>
      <param name="libraryName">Nom de la bibliothèque native à charger.</param>
      <param name="assembly">Assembly chargeant la bibliothèque native.</param>
      <param name="searchPath">Chemin de recherche.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryName" /> ou <paramref name="assembly" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> n’est pas un <see langword="RuntimeAssembly" />.</exception>
      <exception cref="T:System.DllNotFoundException">La bibliothèque est introuvable.</exception>
      <exception cref="T:System.BadImageFormatException">La bibliothèque n’est pas valide.</exception>
      <returns>Descripteur de système d’exploitation de la bibliothèque chargée.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)">
      <summary>Définit un rappel pour la résolution des importations de bibliothèque native à partir d’un assembly.</summary>
      <param name="assembly">Assembly pour lequel le résolveur est inscrit.</param>
      <param name="resolver">Rappel du résolveur à inscrire.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="assembly" /> ou <paramref name="resolver" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Un résolveur est déjà défini pour cet assembly.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)">
      <summary>Obtient l’adresse d’un symbole exporté et retourne une valeur qui indique si l’appel de méthode a réussi.</summary>
      <param name="handle">Descripteur de système d’exploitation de la bibliothèque native.</param>
      <param name="name">Nom du symbole exporté.</param>
      <param name="address">Quand la méthode retourne, contient l’adresse du symbole, s’il existe.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handle" /> ou <paramref name="name" /> est <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> si la méthode a retourné correctement ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)">
      <summary>Fournit une API simple pour le chargement d’une bibliothèque native et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="libraryPath">Nom de la bibliothèque native à charger.</param>
      <param name="handle">Quand la méthode est retournée, descripteur de système d’exploitation de la bibliothèque native chargée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> a la valeur <see langword="null" />.</exception>
      <returns>
        <see langword="true" /> si la bibliothèque native a été chargée correctement ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)">
      <summary>Fournit une API de haut niveau qui charge une bibliothèque native et retourne une valeur qui indique si l’opération a réussi.</summary>
      <param name="libraryName">Nom de la bibliothèque native à charger.</param>
      <param name="assembly">Assembly chargeant la bibliothèque native.</param>
      <param name="searchPath">Chemin de recherche.</param>
      <param name="handle">Quand la méthode est retournée, descripteur de système d’exploitation de la bibliothèque native chargée.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="libraryPath" /> ou <paramref name="assembly" /> est <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="assembly" /> n’est pas un <see langword="RuntimeAssembly" />.</exception>
      <returns>
        <see langword="true" /> si l’opération de chargement a réussi ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary>Indique qu'un paramètre est facultatif.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see langword="OptionalAttribute" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary>Indique que la transformation de signature HRESULT ou <see langword="retval" /> qui a lieu durant les appels COM Interop doit être supprimée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary>Indique que l'assembly avec attributs est un assembly PIA (Primary Interop Assembly).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" /> avec les numéros de versions principale et secondaire de la bibliothèque de types pour laquelle l'assembly est l'assembly PIA (Primary Interop Assembly).</summary>
      <param name="major">Version principale de la bibliothèque de types pour laquelle cet assembly est l'assembly PIA (Primary Interop Assembly).</param>
      <param name="minor">Version secondaire de la bibliothèque de types pour laquelle cet assembly est l'assembly PIA (Primary Interop Assembly).</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary>Obtient le numéro de version principale de la bibliothèque de types pour laquelle cet assembly est l'assembly PIA (Primary Interop Assembly).</summary>
      <returns>Numéro de version principale de la bibliothèque de types pour laquelle cet assembly est l'assembly PIA (Primary Interop Assembly).</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary>Obtient le numéro de version secondaire de la bibliothèque de types pour laquelle cet assembly est l'assembly PIA (Primary Interop Assembly).</summary>
      <returns>Numéro de version secondaire de la bibliothèque de types pour laquelle cet assembly est l'assembly PIA (Primary Interop Assembly).</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary>Permet à l'utilisateur de spécifier le ProgID d'une classe.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de <see langword="ProgIdAttribute" /> avec le ProgID spécifié.</summary>
      <param name="progId">ProgID à assigner à la classe.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary>Obtient le ProgID de la classe.</summary>
      <returns>ProgID de la classe.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary>Fournit une collection de méthodes <see langword="static" /> qui retournent des informations sur l’environnement du Common Language Runtime.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary>Teste si l’assembly spécifié est chargé dans le Global Assembly Cache.</summary>
      <param name="a">Assembly à tester.</param>
      <returns>
        <see langword="true" /> si l’assembly est chargé dans le Global Assembly Cache ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary>Retourne le répertoire d’installation du Common Language Runtime.</summary>
      <returns>Chaîne qui contient le chemin du répertoire d’installation du Common Language Runtime.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary>Retourne l’interface spécifiée pour la classe spécifiée.</summary>
      <param name="clsid">Identificateur de la classe souhaitée.</param>
      <param name="riid">Identificateur de l’interface souhaitée.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">Échec de IUnknown::QueryInterface.</exception>
      <returns>Pointeur non managé vers l’interface demandée.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary>Retourne une instance d’un type qui représente un objet COM par un pointeur vers son interface <see langword="IUnknown" />.</summary>
      <param name="clsid">Identificateur de la classe souhaitée.</param>
      <param name="riid">Identificateur de l’interface souhaitée.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException">Échec de IUnknown::QueryInterface.</exception>
      <returns>Objet qui représente l'objet COM non managé spécifié.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary>Obtient le numéro de version du Common Language Runtime qui exécute le processus actif.</summary>
      <returns>Chaîne contenant le numéro de version du Common Language Runtime.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary>Obtient le chemin du fichier de configuration système.</summary>
      <returns>Chemin d'accès au fichier de configuration système.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary>Exception levée lorsque le rang d'un <see langword="SAFEARRAY" /> entrant ne correspond pas au rang spécifié dans la signature managée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see langword="SafeArrayTypeMismatchException" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see langword="SafeArrayTypeMismatchException" /> à partir de données de sérialisation.</summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see langword="SafeArrayRankMismatchException" /> avec le message spécifié.</summary>
      <param name="message">Message qui indique la raison de l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary>Exception levée lorsque le type du <see langword="SAFEARRAY" /> entrant ne correspond pas au type spécifié dans la signature managée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see langword="SafeArrayTypeMismatchException" /> avec des valeurs par défaut.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see langword="SafeArrayTypeMismatchException" /> à partir de données de sérialisation.</summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see langword="SafeArrayTypeMismatchException" /> avec le message spécifié.</summary>
      <param name="message">Message qui indique la raison de l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary>Représente des erreurs SEH (Structured Exception Handling).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.SEHException" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.SEHException" /> à partir de données de sérialisation.</summary>
      <param name="info">Objet qui contient les données sérialisées de l'objet.</param>
      <param name="context">Informations contextuelles sur la source ou la destination.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> a la valeur <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.SEHException" /> avec le message spécifié.</summary>
      <param name="message">Message qui indique la raison de l'exception.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.SEHException" /> avec un message d'erreur spécifié et une référence à l'exception interne ayant provoqué cette exception.</summary>
      <param name="message">Message d'erreur qui explique la raison de l'exception.</param>
      <param name="inner">Exception ayant provoqué l'exception actuelle. Si le paramètre <paramref name="inner" /> n'est pas <see langword="null" />, l'exception actuelle est levée dans un bloc <see langword="catch" /> qui gère l'exception interne.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary>Indique si l'exception est récupérable et si l'exécution du code peut se poursuivre à partir de l'emplacement où l'exception a été levée.</summary>
      <returns>Toujours <see langword="false" />, car les exceptions susceptibles d'être récupérées ne sont pas implémentées.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary>Remplace le marshaleur libre de threads (FTM) standard du Common Language Runtime par le marshaleur STA OLE standard.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary>Fournit la prise en charge de l'équivalence de type.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary>Crée une instance de la classe <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary>Crée une instance de la classe <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" /> avec la portée et l'identificateur spécifiés.</summary>
      <param name="scope">Première chaîne d'équivalence de type.</param>
      <param name="identifier">Seconde chaîne d'équivalence de type.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary>Obtient la valeur du paramètre <paramref name="identifier" /> passé au constructeur <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" />.</summary>
      <returns>Valeur du paramètre <paramref name="identifier" /> du constructeur.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary>Obtient la valeur du paramètre <paramref name="scope" /> passé au constructeur <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" />.</summary>
      <returns>Valeur du paramètre <paramref name="scope" /> du constructeur.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary>Contient les <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> importés à l'origine pour cette méthode à partir de la bibliothèque de types COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary>Initialise une nouvelle instance de la classe <see langword="TypeLibFuncAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> spécifiée.</summary>
      <param name="flags">Valeur <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> de la méthode avec attributs, telle qu'elle figure dans la bibliothèque de types à partir de laquelle elle a été importée.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary>Initialise une nouvelle instance de la classe <see langword="TypeLibFuncAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> spécifiée.</summary>
      <param name="flags">Valeur <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> de la méthode avec attributs, telle qu'elle figure dans la bibliothèque de types à partir de laquelle elle a été importée.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary>Obtient la valeur <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> de cette méthode.</summary>
      <returns>Valeur <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" /> de cette méthode.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary>Décrit les paramètres d'origine de <see langword="FUNCFLAGS" /> dans la bibliothèque de types COM à partir de l'endroit où cette méthode a été importée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary>Fonction qui prend en charge la liaison de données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary>Fonction qui représente le mieux l'objet. Seule une fonction d'informations de type peut avoir cet attribut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary>Permet une optimisation dans laquelle le compilateur recherche un membre nommé « xyz » sur le type « abc ». Si ce membre est trouvé et s’il est marqué comme fonction d’accesseur pour un élément de la collection par défaut, un appel à cette fonction membre est généré.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary>Fonction qui est affichée à l'utilisateur comme pouvant être liée. Vous devez également définir <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary>La fonction existe et elle peut être liée mais elle ne doit pas être visible à l'utilisateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary>La fonction est mappée comme des propriétés individuelles pouvant être liées.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary>La propriété est affichée dans un explorateur d'objets, mais pas dans un explorateur de propriétés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary>Marque l’interface comme ayant des comportements par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary>Lorsque défini, tout appel à une méthode définissant la propriété résulte d'abord en un appel à <see langword="IPropertyNotifySink::OnRequestEdit" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary>Cet indicateur est destiné à des fonctions de niveau système ou à des fonctions que les explorateurs de types ne doivent pas afficher.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary>Cette fonction retourne un objet qui est une source d'événements.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary>Le membre d'informations de type est le membre par défaut à afficher dans l'interface utilisateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary>La fonction prend en charge <see langword="GetLastError" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary>Spécifie le <see cref="T:System.Type" /> qui utilise une interface en mode exclusif. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute" /> en spécifiant le <see cref="T:System.Type" /> qui utilise une interface en mode exclusif.</summary>
      <param name="importClass">Objet <see cref="T:System.Type" /> qui utilise une interface en mode exclusif.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary>Obtient le nom d'un objet <see cref="T:System.Type" /> qui utilise une interface en mode exclusif.</summary>
      <returns>Nom d'un objet <see cref="T:System.Type" /> qui utilise une interface en mode exclusif.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary>Contient les <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> importés à l’origine pour ce type depuis la bibliothèque de types COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary>Initialise une nouvelle instance de la classe <see langword="TypeLibTypeAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> spécifiée.</summary>
      <param name="flags">Valeur de <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> pour le type avec attributs, telle qu’elle figure dans la bibliothèque de types d’où il a été importé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary>Initialise une nouvelle instance de la classe <see langword="TypeLibTypeAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> spécifiée.</summary>
      <param name="flags">Valeur de <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> pour le type avec attributs, telle qu’elle figure dans la bibliothèque de types d’où il a été importé.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary>Obtient la valeur de <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> pour ce type.</summary>
      <returns>Valeur <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" /> de ce type.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary>Décrit les paramètres d'origine de <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> dans la bibliothèque de types COM à partir de l'endroit où ce type a été importé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary>La classe prend en charge l'agrégation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary>Description de type qui décrit un objet <see langword="Application" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary>Les instances du type peuvent être créées à l'aide de <see langword="ITypeInfo::CreateInstance" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary>Le type est un contrôle à partir duquel les autres types sont dérivés ; il ne doit pas être affiché aux utilisateurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary>Indique que l'interface dérive directement ou indirectement de <see langword="IDispatch" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary>L'interface fournit à la fois une liaison <see langword="IDispatch" /> et une liaison par vtable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary>Le type ne doit pas être affiché aux navigateurs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary>Le type est sous licence.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary>L'interface ne peut pas ajouter de membres au moment de l'exécution.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary>Les types utilisés dans l'interface sont totalement compatibles avec Automation, y compris la prise en charge de la liaison par vtable.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary>Le type est prédéfini. L'application cliente doit automatiquement créer une instance unique de l'objet doté de cet attribut. Le nom de la variable pointant vers l'objet est identique au nom de classe de l'objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary>L'objet prend en charge <see langword="IConnectionPointWithDefault" /> et il a des comportements par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary>Cet indicateur est destiné à des types de niveau système ou à des types que les explorateurs de types ne doivent pas afficher.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary>Indique que les interfaces de base doivent être testées pour la résolution de noms avant de le faire pour les interfaces enfants. Il s'agit du comportement inverse au comportement par défaut.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary>Contient les <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> importés à l'origine pour ce champ à partir de la bibliothèque de types COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> spécifiée.</summary>
      <param name="flags">Valeur <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> du champ avec attributs, telle qu'elle figure dans la bibliothèque de types à partir de laquelle il a été importé.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" /> avec la valeur <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> spécifiée.</summary>
      <param name="flags">Valeur <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> du champ avec attributs, telle qu'elle figure dans la bibliothèque de types à partir de laquelle il a été importé.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary>Obtient la valeur <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> pour ce champ.</summary>
      <returns>Valeur <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" /> de ce champ.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary>Décrit les paramètres d’origine de <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> dans la bibliothèque de types COM d’où cette variable a été importée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary>La variable prend en charge la liaison de données.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary>La variable est la propriété unique qui représente le mieux l’objet. Une seule variable dans les informations de type peut avoir cette valeur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary>Permet une optimisation dans laquelle le compilateur recherche un membre nommé « xyz » sur le type « abc ». Si ce membre est trouvé et s’il est marqué comme fonction d’accesseur pour un élément de la collection par défaut, un appel à cette fonction membre est généré.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary>La variable est affichée comme pouvant être liée. Vous devez également définir <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary>La variable ne doit pas être affichée dans un navigateur, même si elle existe et peut être liée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary>La variable est mappée comme propriétés individuelles pouvant être liées.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary>La variable s’affiche dans un explorateur d’objets, mais pas dans un explorateur de propriétés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary>L’affectation à la variable ne doit pas être autorisée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary>Marque l’interface comme ayant des comportements par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary>Indique que la propriété prend en charge la notification <see langword="OnRequestEdit" /> COM.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary>Cet indicateur est destiné à des fonctions de niveau système ou à des fonctions que les explorateurs de types ne doivent pas afficher.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary>La variable retourne un objet qui est une source d’événements.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary>L’affichage par défaut dans l’interface utilisateur.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary>Spécifie le numéro de version d'une bibliothèque de types exportée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" /> avec les numéros de version principale et secondaire de la bibliothèque de types.</summary>
      <param name="major">Numéro de version principale de la bibliothèque de types.</param>
      <param name="minor">Numéro de version secondaire de la bibliothèque de types.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary>Obtient le numéro de version principale de la bibliothèque de types.</summary>
      <returns>Numéro de version principale de la bibliothèque de types.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary>Obtient le numéro de version secondaire de la bibliothèque de types.</summary>
      <returns>Numéro de version secondaire de la bibliothèque de types.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary>Encapsule des objets que le marshaleur doit marshaler comme <see langword="VT_UNKNOWN" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> avec l'objet à encapsuler.</summary>
      <param name="obj">Objet à encapsuler.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary>Obtient l'objet contenu dans ce wrapper.</summary>
      <returns>Objet encapsulé.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute">
      <summary>Toute méthode marquée avec <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> peut être directement appelée à partir du code natif. Le jeton de fonction peut être chargé dans une variable locale à l’aide de l’opérateur C# address-of et passé comme rappel à une méthode native.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.CallConvs">
      <summary>Optionnel. En cas d’omission, le runtime utilise la convention d’appel de la plateforme par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.EntryPoint">
      <summary>Optionnel. En cas d’omission, aucune exportation nommée n’est émise pendant la compilation.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.#ctor">
      <summary>Initialise une nouvelle instance de <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary>Contrôle le comportement de marshaling d'une signature de délégué passée comme pointeur de fonction non managée vers ou depuis du code non managé. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary>Active ou désactive le comportement de mappage ajusté lors de la conversion de caractères Unicode en caractères ANSI.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary>Indique comment marshaler les paramètres de chaîne vers la méthode et contrôle la composition des noms.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary>Indique si l'appelé appelle la fonction API Windows <see langword="SetLastError" /> avant de retourner la valeur à partir de la méthode avec attributs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary>Active ou désactive la levée d'une exception sur un caractère Unicode non mappable converti en caractère ANSI "?".</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" /> avec la convention d'appel spécifiée.</summary>
      <param name="callingConvention">Convention d'appel spécifiée.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary>Obtient la valeur de la convention d'appel.</summary>
      <returns>Valeur de la convention d'appel spécifiée par le constructeur <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>Indique comment marshaler les paramètres ou les champs en code non managé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>Chaîne de caractères ANSI sur un octet, préfixée par sa longueur. Vous pouvez utiliser ce membre sur le type de données <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>Type dynamique qui détermine le type d’un objet au moment de l’exécution et marshale l’objet comme ce type. Ce membre est valide pour les méthodes d'appel de plateforme uniquement.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>Valeur booléenne sur 4 octets (<see langword="true" /> != 0, <see langword="false" /> = 0). Il s'agit du type BOOL Win32.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>Chaîne de caractères Unicode sur deux octets, préfixée par sa longueur. Vous pouvez utiliser ce membre, qui est la chaîne par défaut dans COM, sur le type de données <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>Quand la propriété <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" /> a la valeur <see langword="ByValArray" />, le champ <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> doit être défini pour indiquer le nombre d'éléments dans le tableau. Le champ <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> peut éventuellement contenir le <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> des éléments du tableau, quand les types de chaîne doivent être différenciés. Vous pouvez utiliser ce <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> uniquement sur un tableau dont les éléments apparaissent sous la forme de champs dans une structure.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>Utilisé pour des tableaux de caractères de longueur fixe inline affichés dans une structure. Les types <see langword="ByValTStr" /> se comportent comme des chaînes de style C de taille fixe à l’intérieur d’une structure (par exemple, <c>char s[5]</c>). Le type de caractère utilisé avec <see langword="ByValTStr" /> est déterminé par l'argument <see cref="T:System.Runtime.InteropServices.CharSet" /> de l'attribut <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> appliqué à la structure conteneur. Utilisez toujours le champ <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> pour indiquer la taille du tableau.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>Type de devise. Utilisé sur un <see cref="T:System.Decimal" /> pour marshaler la valeur décimale en tant que type de devise COM, au lieu d'un <see langword="Decimal" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>Spécifie la classe de marshaleur personnalisé dans le cas d'une utilisation avec le champ <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> ou <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" />. Le champ <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> permet de passer des informations supplémentaires au marshaleur personnalisé. Vous pouvez utiliser ce membre sur n'importe quel type de référence. Ce membre est valide pour les paramètres et valeurs de retour uniquement. Il ne peut pas être utilisé sur les champs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>Type natif associé à <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> ou à <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> et qui entraîne l'exportation du paramètre en tant que HRESULT dans la bibliothèque de types exportée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>Entier pouvant être utilisé comme pointeur fonction de type C. Vous pouvez utiliser ce membre sur un type de données <see cref="T:System.Delegate" /> ou sur un type qui hérite d'un <see cref="T:System.Delegate" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>Chaîne Windows Runtime. Vous pouvez utiliser ce membre sur le type de données <see cref="T:System.String" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>Entier signé sur 1 octet. Vous pouvez utiliser ce membre pour transformer une valeur booléenne en valeur <see langword="bool" /> sur 1 octet de type C (<see langword="true" /> = 1, <see langword="false" /> = 0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>Entier signé sur 2 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>Entier signé sur 4 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>Entier signé sur 8 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>Pointeur <see langword="IDispatch" /> COM (<see langword="Object" /> dans Microsoft Visual Basic 6.0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>Pointeur d'interface Windows Runtime. Vous pouvez utiliser ce membre sur le type de données <see cref="T:System.Object" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>Pointeur d'interface COM. Le <see cref="T:System.Guid" /> de l'interface est obtenu à partir des métadonnées de classe. Utilisez ce membre pour spécifier le type exact d'interface ou le type d'interface par défaut si vous l'appliquez à une classe. Ce membre produit le même comportement que <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" /> quand vous l'appliquez au type de données <see cref="T:System.Object" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>Pointeur <see langword="IUnknown" /> COM. Vous pouvez utiliser ce membre sur le type de données <see cref="T:System.Object" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>Pointeur vers le premier élément d'un tableau de style C. Lors du marshaling du code managé au code non managé, la longueur du tableau est déterminée par la longueur du tableau managé. Lors du marshaling du code non managé au code managé, la longueur du tableau est déterminée par les champs <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> et <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" />, suivis éventuellement par le type non managé des éléments du tableau quand les types de chaîne doivent être différenciés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>Chaîne de caractères ANSI sur un octet. Vous pouvez utiliser ce membre sur les types de données <see cref="T:System.String" /> et <see cref="T:System.Text.StringBuilder" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>Pointeur vers une structure de type C que vous utilisez pour marshaler les classes mises en forme managées. Ce membre est valide pour les méthodes d'appel de plateforme uniquement.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>Chaîne de caractères dépendante de la plateforme, à savoir ANSI sous Windows 98 et Unicode sous Windows NT et Windows XP. Cette valeur est uniquement prise en charge pour un appel de code non managé uniquement, elle ne l'est pas pour COM Interop, l'exportation d'une chaîne de type <see langword="LPTStr" /> n'étant pas prise en charge.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>Pointeur vers une chaîne encodée en UTF-8.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>Chaîne de caractères Unicode se terminant par null sur 2 octets. Vous ne pouvez pas utiliser la valeur <see langword="LPWStr" /> avec une chaîne non managée, sauf si la chaîne a été créée à l’aide de la fonction <see langword="CoTaskMemAlloc" /> non managée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>Nombre à virgule flottante sur 4 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>Nombre à virgule flottante sur 8 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>Un <see langword="SafeArray" /> est un tableau autodescriptif qui inclut le type, le rang et les limites des données de tableau associées. Vous pouvez utiliser ce membre avec le champ <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> pour substituer le type d'élément par défaut.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>VARIANT utilisé pour marshaler des classes et des types de valeur mis en forme managés.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>Entier signé qui dépend de la plateforme sur : 4 octets sous Windows 32 bits et 8 octets sous Windows 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>Entier non signé qui dépend de la plateforme sur : 4 octets sous Windows 32 bits et 8 octets sous Windows 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>Chaîne <see langword="char" /> préfixée par sa longueur et dépendante de la plateforme : ANSI sous Windows 98, Unicode sous Windows NT. Ce membre similaire à BSTR est rarement utilisé.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>Entier non signé sur 1 octet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>Entier non signé sur 2 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>Entier non signé sur 4 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>Entier non signé sur 8 octets.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>Type VARIANT_BOOL sur 2 octets défini par OLE (<see langword="true" /> = -1, <see langword="false" /> = 0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>Valeur qui permet à Visual Basic de changer une chaîne en code non managé et de répercuter les résultats dans du code managé. Cette valeur est uniquement prise en charge pour l'appel de code non managé.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary>Indique comment marshaler les éléments de tableau lorsqu'un tableau est marshalé de code managé en code non managé sous la forme de <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary>Indique un pointeur <see langword="SAFEARRAY" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary>Indique des octets préfixés par leur longueur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary>Indique qu'un blob contient un objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary>Indique une valeur booléenne.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary>Indique une chaîne BSTR.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary>Indique qu'une valeur est une référence.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary>Indique un tableau de style C.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary>Indique le format du Presse-papiers.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary>Indique un ID de classe.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary>Indique une valeur monétaire.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary>Indique une valeur DATE.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary>Indique une valeur <see langword="decimal" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary>Indique un pointeur <see langword="IDispatch" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary>Indique qu'aucune valeur n'a été spécifiée.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary>Indique un SCODE.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary>Indique une valeur FILETIME.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary>Indique un HRESULT.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary>Indique une valeur <see langword="char" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary>Indique un entier <see langword="short" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary>Indique un entier <see langword="long" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary>Indique un entier 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary>Indique une valeur entière.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary>Indique une chaîne terminée par le caractère NULL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary>Indique une chaîne large terminée par <see langword="null" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary>Indique une valeur null, similaire à une valeur null dans SQL.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary>Indique un type de pointeur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary>Indique une valeur <see langword="float" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary>Indique une valeur <see langword="double" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary>Indique un type défini par l'utilisateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary>Indique un SAFEARRAY. Non valide dans un VARIANT.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary>Indique que le nom d'un stockage suit.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary>Indique qu'un stockage contient un objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary>Indique que le nom d'un flux suit</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary>Indique qu'un flux contient un objet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary>Indique <see langword="byte" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary>Indique un <see langword="unsigned" /><see langword="short" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary>Indique un <see langword="unsigned" /><see langword="long" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary>Indique un entier non signé 64 bits.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary>Indique une valeur entière <see langword="unsigned" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary>Indique un pointeur <see langword="IUnknown" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary>Indique un type défini par l'utilisateur.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary>Indique un pointeur VARIANT <see langword="far" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary>Indique un tableau à nombre d'éléments simple.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary>Indique un <see langword="void" /> de style C.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary>Marshale des données de type <see langword="VT_VARIANT | VT_BYREF" /> de code managé en code non managé. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> pour le paramètre <see cref="T:System.Object" /> spécifié.</summary>
      <param name="obj">Objet à marshaler.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary>Obtient l'objet encapsulé par l'objet <see cref="T:System.Runtime.InteropServices.VariantWrapper" />.</summary>
      <returns>Objet encapsulé par l'objet <see cref="T:System.Runtime.InteropServices.VariantWrapper" />.</returns>
    </member>
    <member name="T:System.Security.SecureString">
      <summary>Représente le texte qui doit rester confidentiel, par exemple en le supprimant de la mémoire de l'ordinateur quand il n'est plus nécessaire. Cette classe ne peut pas être héritée.</summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.SecureString" />.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Une erreur s’est produite au moment de la protection ou de l’annulation de la protection de la valeur de cette instance.</exception>
      <exception cref="T:System.NotSupportedException">Cette opération n’est pas prise en charge sur cette plateforme.</exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary>Initialise une nouvelle instance de la classe <see cref="T:System.Security.SecureString" /> à partir d'un sous-tableau d'objets <see cref="T:System.Char" />.  
  
Ce constructeur n’est pas conforme CLS. L’alternative conforme CLS est <see cref="M:System.Security.SecureString.#ctor" />.</summary>
      <param name="value">Pointeur vers un tableau d'objets <see cref="T:System.Char" />.</param>
      <param name="length">Nombre d'éléments de <paramref name="value" /> à inclure dans la nouvelle instance.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="length" /> est inférieur à 0 ou supérieur à 65 536.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Une erreur s’est produite lors de la protection ou de l’annulation de la protection de la valeur de cette chaîne sécurisée.</exception>
      <exception cref="T:System.NotSupportedException">Cette opération n’est pas prise en charge sur cette plateforme.</exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary>Ajoute un caractère à la fin de la chaîne sécurisée actuelle.</summary>
      <param name="c">Caractère à ajouter à cette chaîne sécurisée.</param>
      <exception cref="T:System.ObjectDisposedException">Cette chaîne sécurisée a déjà été supprimée.</exception>
      <exception cref="T:System.InvalidOperationException">Cette chaîne sécurisée est en lecture seule.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">L’exécution de cette opération rendrait la longueur de cette chaîne sécurisée supérieure à 65 536 caractères.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Une erreur s’est produite lors de la protection ou de l’annulation de la protection de la valeur de cette chaîne sécurisée.</exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary>Supprime la valeur de la chaîne sécurisée actuelle.</summary>
      <exception cref="T:System.ObjectDisposedException">Cette chaîne sécurisée a déjà été supprimée.</exception>
      <exception cref="T:System.InvalidOperationException">Cette chaîne sécurisée est en lecture seule.</exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary>Crée une copie de la chaîne sécurisée actuelle.</summary>
      <exception cref="T:System.ObjectDisposedException">Cette chaîne sécurisée a déjà été supprimée.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Une erreur s’est produite lors de la protection ou de l’annulation de la protection de la valeur de cette chaîne sécurisée.</exception>
      <returns>Doublon de cette chaîne sécurisée.</returns>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary>Libère toutes les ressources utilisées par l’objet <see cref="T:System.Security.SecureString" /> actuel.</summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary>Insère un caractère dans cette chaîne sécurisée à la position d'index spécifiée.</summary>
      <param name="index">Position d'index à laquelle le paramètre <paramref name="c" /> est inséré.</param>
      <param name="c">Caractère à insérer.</param>
      <exception cref="T:System.ObjectDisposedException">Cette chaîne sécurisée a déjà été supprimée.</exception>
      <exception cref="T:System.InvalidOperationException">Cette chaîne sécurisée est en lecture seule.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro ou supérieur à la longueur de cette chaîne sécurisée.  
  
- ou - 
L’exécution de cette opération rendrait la longueur de cette chaîne sécurisée supérieure à 65 536 caractères.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Une erreur s’est produite lors de la protection ou de l’annulation de la protection de la valeur de cette chaîne sécurisée.</exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary>Indique si cette chaîne sécurisée est en lecture seule.</summary>
      <exception cref="T:System.ObjectDisposedException">Cette chaîne sécurisée a déjà été supprimée.</exception>
      <returns>
        <see langword="true" /> si cette chaîne sécurisée est en lecture seule ; sinon, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary>Met en lecture seule la valeur texte de cette chaîne sécurisée.</summary>
      <exception cref="T:System.ObjectDisposedException">Cette chaîne sécurisée a déjà été supprimée.</exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary>Supprime de cette chaîne sécurisée le caractère situé à la position d'index spécifiée.</summary>
      <param name="index">Position d'index d'un caractère dans cette chaîne sécurisée.</param>
      <exception cref="T:System.ObjectDisposedException">Cette chaîne sécurisée a déjà été supprimée.</exception>
      <exception cref="T:System.InvalidOperationException">Cette chaîne sécurisée est en lecture seule.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro, ou encore supérieur ou égal à la longueur de cette chaîne sécurisée.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Une erreur s’est produite lors de la protection ou de l’annulation de la protection de la valeur de cette chaîne sécurisée.</exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary>Remplace le caractère existant à la position d'index spécifiée par un autre caractère.</summary>
      <param name="index">Position d'index d'un caractère existant dans cette chaîne sécurisée.</param>
      <param name="c">Caractère qui remplace le caractère existant.</param>
      <exception cref="T:System.ObjectDisposedException">Cette chaîne sécurisée a déjà été supprimée.</exception>
      <exception cref="T:System.InvalidOperationException">Cette chaîne sécurisée est en lecture seule.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" /> est inférieur à zéro, ou encore supérieur ou égal à la longueur de cette chaîne sécurisée.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Une erreur s’est produite lors de la protection ou de l’annulation de la protection de la valeur de cette chaîne sécurisée.</exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary>Obtient le nombre de caractères dans la chaîne sécurisée actuelle.</summary>
      <exception cref="T:System.ObjectDisposedException">Cette chaîne sécurisée a déjà été supprimée.</exception>
      <returns>Nombre d'objets <see cref="T:System.Char" /> de cette chaîne sécurisée.</returns>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      <summary>Fournit une collection de méthodes pour l’allocation de mémoire non managée et la copie de blocs de mémoire non managée.</summary>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary>Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans un bloc de mémoire alloué à partir de l’allocateur de tâche COM non managé.</summary>
      <param name="s">Objet managé à copier.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <returns>Adresse, dans la mémoire non managée, où le paramètre <paramref name="s" /> a été copié, ou 0 si un objet null a été fourni.</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary>Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans un bloc de mémoire alloué à partir de l’allocateur de tâche COM non managé.</summary>
      <param name="s">Objet managé à copier.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <returns>Adresse, dans la mémoire non managée, où le paramètre <paramref name="s" /> a été copié, ou 0 si un objet null a été fourni.</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary>Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans la mémoire non managée, avec conversion au format ANSI pendant la copie.</summary>
      <param name="s">Objet managé à copier.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <returns>Adresse (dans la mémoire non managée) où le paramètre <paramref name="s" /> a été copié, ou 0 si un objet null a été fourni.</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary>Copie le contenu d’un objet <see cref="T:System.Security.SecureString" /> managé dans la mémoire non managée.</summary>
      <param name="s">Objet managé à copier.</param>
      <exception cref="T:System.ArgumentNullException">Le paramètre <paramref name="s" /> a la valeur <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException">Il n’y a pas suffisamment de mémoire disponible.</exception>
      <returns>Adresse, dans la mémoire non managée, où <paramref name="s" /> a été copié, ou 0 si <paramref name="s" /> est un objet <see cref="T:System.Security.SecureString" /> dont la longueur est 0.</returns>
    </member>
  </members>
</doc>
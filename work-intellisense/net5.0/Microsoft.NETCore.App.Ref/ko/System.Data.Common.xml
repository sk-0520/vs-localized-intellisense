<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Data.Common</name>
  </assembly>
  <members>
    <member name="T:System.Data.AcceptRejectRule">
      <summary>
        <see cref="M:System.Data.DataSet.AcceptChanges" />가 적용된 <see cref="M:System.Data.DataTable.RejectChanges" />에 대해 <see cref="T:System.Data.DataTable" /> 또는 <see cref="T:System.Data.ForeignKeyConstraint" /> 메서드를 호출할 때 수행되는 작업을 결정합니다.</summary>
    </member>
    <member name="F:System.Data.AcceptRejectRule.Cascade">
      <summary>변경 내용이 관계 전체에 적용됩니다.</summary>
    </member>
    <member name="F:System.Data.AcceptRejectRule.None">
      <summary>작업이 수행되지 않습니다(기본값).</summary>
    </member>
    <member name="T:System.Data.CommandBehavior">
      <summary>쿼리의 결과와 데이터베이스에 미치는 영향을 설명합니다.</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.CloseConnection">
      <summary>명령을 실행하면 관련 <see langword="Connection" /> 개체는 관련 <see langword="DataReader" /> 개체가 닫힐 때 함께 닫힙니다.</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.Default">
      <summary>쿼리는 여러 결과 집합을 반환할 수 있습니다. 쿼리 실행 시 데이터베이스 상태에 영향을 주지 않습니다. <see langword="Default" />는 <see cref="T:System.Data.CommandBehavior" /> 플래그를 설정하지 않으므로 <see langword="ExecuteReader(CommandBehavior.Default)" /> 호출과  <see langword="ExecuteReader()" /> 호출은 기능적으로 동일합니다.</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.KeyInfo">
      <summary>쿼리는 열과 기본 키 정보를 반환하며 공급자는 기존의 기본 키 및 타임스탬프 열의 결과 세트에 추가 열을 추가합니다.</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SchemaOnly">
      <summary>쿼리에서 열 정보만 반환합니다. <see cref="F:System.Data.CommandBehavior.SchemaOnly" />를 사용할 때 .NET Framework Data Provider for SQL Server에서는 실행되는 문 앞에 SET FMTONLY ON을 배치합니다.</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SequentialAccess">
      <summary>
        <see langword="DataReader" />에서 대형 이진 값을 갖는 열이 포함된 행을 처리하는 방법을 제공합니다. 전체 행을 로드하지 않고 <see langword="SequentialAccess" />를 사용하여 <see langword="DataReader" />에서 데이터를 스트림으로 로드할 수 있습니다. 그런 다음 <see langword="GetBytes" /> 또는 <see langword="GetChars" /> 메서드를 사용하여 읽기 작업을 시작할 바이트 위치와 반환될 데이터의 제한된 버퍼 크기를 지정할 수 있습니다.</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SingleResult">
      <summary>이 쿼리는 단일 결과 집합을 반환합니다.</summary>
    </member>
    <member name="F:System.Data.CommandBehavior.SingleRow">
      <summary>쿼리가 첫 번째 결과 집합의 단일 행을 반환해야 합니다. 쿼리 실행 시 데이터베이스 상태에 영향을 주지 않습니다. 일부 .NET Framework 데이터 공급자에서는 이 정보를 사용하여 명령의 성능을 최적화할 수도 있습니다. <see cref="F:System.Data.CommandBehavior.SingleRow" /> 개체의 <see cref="M:System.Data.OleDb.OleDbCommand.ExecuteReader" /> 메서드를 사용하여 <see cref="T:System.Data.OleDb.OleDbCommand" />를 지정할 때 .NET Framework Data Provider for OLE DB에서는 OLE DB <see langword="IRow" /> 인터페이스가 사용 가능하면 이 인터페이스를 사용하여 바인딩을 수행하고, 그렇지 않으면 <see langword="IRowset" /> 인터페이스를 사용합니다. SQL 문이 단일 행만 반환해야 하는 경우 <see cref="F:System.Data.CommandBehavior.SingleRow" />를 지정하여 애플리케이션의 성능을 향상시킬 수도 있습니다. 여러 결과 집합을 반환해야 하는 쿼리를 실행할 경우 <see langword="SingleRow" />를 지정할 수 있습니다.  이 경우 여러 결과 집합 SQL 쿼리와 단일 행이 둘 다 지정되어 있으면 반환된 결과에 첫 번째 결과 집합의 첫 번째 행만 포함됩니다. 쿼리의 나머지 결과 집합은 반환되지 않습니다.</summary>
    </member>
    <member name="T:System.Data.CommandType">
      <summary>명령 문자열을 해석하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.CommandType.StoredProcedure">
      <summary>저장 프로시저의 이름입니다.</summary>
    </member>
    <member name="F:System.Data.CommandType.TableDirect">
      <summary>테이블의 이름입니다.</summary>
    </member>
    <member name="F:System.Data.CommandType.Text">
      <summary>SQL 텍스트 명령입니다. 이 속성의 기본값입니다.</summary>
    </member>
    <member name="T:System.Data.Common.CatalogLocation">
      <summary>텍스트 명령에 있는 정규화된 테이블 이름에서 카탈로그 이름의 위치를 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.Common.CatalogLocation.End">
      <summary>카탈로그 이름의 위치가 텍스트 명령에서 정규화된 테이블 이름의 스키마 부분 이후임을 나타냅니다. <c>End</c>와 <c>Start</c>는 함께 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Data.Common.CatalogLocation.Start">
      <summary>카탈로그 이름의 위치가 텍스트 명령에서 정규화된 테이블 이름의 스키마 부분 이전임을 나타냅니다. <c>Start</c>와 <c>End</c>는 함께 사용할 수 없습니다.</summary>
    </member>
    <member name="T:System.Data.Common.DataAdapter">
      <summary>
        <see cref="T:System.Data.DataSet" /> 를 채우고 데이터 원본을 업데이트하는 데 사용되는 데이터베이스 연결 및 SQL 명령 집합을 나타냅니다.</summary>
    </member>
    <member name="E:System.Data.Common.DataAdapter.FillError">
      <summary>채우기 작업 도중에 오류가 발생할 때 반환됩니다.</summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.#ctor(System.Data.Common.DataAdapter)">
      <summary>같은 형식의 기존 개체에서 <see cref="T:System.Data.Common.DataAdapter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="from">새 <see cref="T:System.Data.Common.DataAdapter" />를 만드는 데 사용되는 <see cref="T:System.Data.Common.DataAdapter" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.CloneInternals">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" />의 인스턴스 복사본을 만듭니다.</summary>
      <returns>복제된 <see cref="T:System.Data.Common.DataAdapter" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.CreateTableMappings">
      <summary>새 <see cref="T:System.Data.Common.DataTableMappingCollection" />를 만듭니다.</summary>
      <returns>새 테이블 매핑 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)">
      <summary>데이터 소스의 행과 일치하도록 <see cref="T:System.Data.DataSet" />의 행을 추가하거나 새로 고칩니다.</summary>
      <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 <see cref="T:System.Data.DataSet" />입니다.</param>
      <returns>
        <see cref="T:System.Data.DataSet" />에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Data.DataSet" />과 <see cref="T:System.Data.DataSet" /> 이름을 사용하여 지정된 범위에서 데이터 소스의 행과 일치하도록 <see cref="T:System.Data.DataTable" />의 행을 추가하거나 새로 고칩니다.</summary>
      <param name="dataSet">레코드로 채울 <see cref="T:System.Data.DataSet" />입니다.</param>
      <param name="srcTable">소스 테이블의 이름을 나타내는 문자열입니다.</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" />의 인스턴스입니다.</param>
      <param name="startRecord">레코드 시작의 인덱스(0부터 시작)입니다.</param>
      <param name="maxRecords">최대 레코드 수를 나타내는 정수입니다.</param>
      <returns>
        <see cref="T:System.Data.DataSet" />에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)">
      <summary>
        <see cref="T:System.Data.DataTable" /> 이름 및 지정된 <see cref="T:System.Data.DataTable" />를 사용하여 데이터 소스의 행과 일치하도록 <see cref="T:System.Data.IDataReader" />의 행을 추가하거나 새로 고칩니다.</summary>
      <param name="dataTable">레코드로 채울 <see cref="T:System.Data.DataTable" />입니다.</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" />의 인스턴스입니다.</param>
      <returns>
        <see cref="T:System.Data.DataTable" />에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Data.DataTable" /> 개체 컬렉션의 지정된 범위에서 데이터 소스의 행과 일치하도록 행을 추가하거나 새로 고칩니다.</summary>
      <param name="dataTables">레코드로 채울 <see cref="T:System.Data.DataTable" /> 개체의 컬렉션입니다.</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" />의 인스턴스입니다.</param>
      <param name="startRecord">레코드 시작의 인덱스(0부터 시작)입니다.</param>
      <param name="maxRecords">최대 레코드 수를 나타내는 정수입니다.</param>
      <returns>
        <see cref="T:System.Data.DataTable" />에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>지정된 <see cref="T:System.Data.DataTable" /> 에 <see cref="T:System.Data.DataSet" /> 을 추가하고 지정된 <see cref="T:System.Data.SchemaType" />에 따라 데이터 원본의 스키마와 일치하도록 스키마를 구성합니다.</summary>
      <param name="dataSet">데이터 원본의 스키마로 채울 <see cref="T:System.Data.DataSet" />입니다.</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
      <returns>데이터 소스에서 반환된 스키마 정보가 들어 있는 <see cref="T:System.Data.DataTable" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />에 <see cref="T:System.Data.DataSet" />을 추가합니다.</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataTable" />에서 채울 <see cref="T:System.Data.IDataReader" />입니다.</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
      <param name="srcTable">테이블 매핑에 사용할 원본 테이블의 이름입니다.</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" />을 채울 때 데이터 소스로 사용할 <see cref="T:System.Data.DataTable" />입니다.</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> 에 추가된 <see cref="T:System.Data.DataSet" />개체의 컬렉션에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />에 <see cref="T:System.Data.DataSet" />을 추가합니다.</summary>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" />에서 채울 <see cref="T:System.Data.IDataReader" />입니다.</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
      <param name="dataReader">
        <see cref="T:System.Data.IDataReader" />을 채울 때 데이터 소스로 사용할 <see cref="T:System.Data.DataTable" />입니다.</param>
      <returns>데이터 소스에서 반환된 스키마 정보가 들어 있는 <see cref="T:System.Data.DataTable" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.GetFillParameters">
      <summary>SQL SELECT 문을 실행할 때 사용자가 설정한 매개 변수를 가져옵니다.</summary>
      <returns>사용자가 설정한 매개 변수를 포함하는 <see cref="T:System.Data.IDataParameter" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.HasTableMappings">
      <summary>
        <see cref="T:System.Data.Common.DataTableMappingCollection" />이 만들어졌는지 여부를 나타냅니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DataTableMappingCollection" />이 만들어졌으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)">
      <summary>
        <see langword="Fill" />을 수행하는 동안 오류가 발생하면 호출됩니다.</summary>
      <param name="value">
        <see cref="T:System.Data.FillErrorEventArgs" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ResetFillLoadOption">
      <summary>
        <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" />을 기본 상태로 다시 설정하여 <see cref="M:System.Data.Common.DataAdapter.Fill(System.Data.DataSet)" />이 <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" />을 따르도록 합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill">
      <summary>
        <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> 속성을 유지해야 하는지 여부를 결정합니다.</summary>
      <returns>
        <see cref="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill" /> 속성이 유지되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption">
      <summary>
        <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 속성을 유지해야 하는지 여부를 결정합니다.</summary>
      <returns>
        <see cref="P:System.Data.Common.DataAdapter.FillLoadOption" /> 속성이 유지되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.ShouldSerializeTableMappings">
      <summary>하나 이상의 <see cref="T:System.Data.Common.DataTableMapping" /> 개체가 존재하며 유지되어야 하는지 여부를 결정합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 개체가 하나 이상 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)">
      <summary>"Table"이라는 <see cref="T:System.Data.DataSet" />의 지정된 <see cref="T:System.Data.DataTable" />에서 삽입, 업데이트 또는 삭제된 각 행에 대해 각각 INSERT, UPDATE 또는 DELETE 문을 호출합니다.</summary>
      <param name="dataSet">데이터 소스를 업데이트하는 데 사용된 <see cref="T:System.Data.DataSet" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">소스 테이블이 잘못된 경우</exception>
      <exception cref="T:System.Data.DBConcurrencyException">INSERT, UPDATE 또는 DELETE 문을 실행한 결과 영향을 받은 레코드가 없는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataSet" />에서 성공적으로 업데이트된 행의 수를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.AcceptChangesDuringFill">
      <summary>채우기 작업을 수행하는 동안 <see cref="T:System.Data.DataTable" />에 추가된 <see cref="T:System.Data.DataRow" />에 대해 <see cref="M:System.Data.DataRow.AcceptChanges" />가 호출되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="M:System.Data.DataRow.AcceptChanges" />에서 <see cref="T:System.Data.DataRow" />가 호출되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.AcceptChangesDuringUpdate">
      <summary>
        <see cref="M:System.Data.DataRow.AcceptChanges" />를 수행하는 동안 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />가 호출되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="M:System.Data.DataRow.AcceptChanges" />를 수행하는 동안 <see cref="M:System.Data.Common.DataAdapter.Update(System.Data.DataSet)" />가 호출되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.ContinueUpdateOnError">
      <summary>행을 업데이트하는 동안 오류가 발생할 때 예외를 생성할지 여부를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>예외를 생성하지 않고 업데이트를 계속하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.FillLoadOption">
      <summary>어댑터가 <see cref="T:System.Data.LoadOption" />에서 <see cref="T:System.Data.DataTable" />을 채우는 방법을 결정하는 <see cref="T:System.Data.Common.DbDataReader" />을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.LoadOption" /> 값입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.MissingMappingAction">
      <summary>들어오는 데이터와 일치하는 테이블이나 열이 없는 경우 수행할 동작을 결정합니다.</summary>
      <exception cref="T:System.ArgumentException">설정된 값이 <see cref="T:System.Data.MissingMappingAction" /> 값 중 하나가 아닌 경우</exception>
      <returns>
        <see cref="T:System.Data.MissingMappingAction" /> 값 중 하나입니다. 기본값은 <see langword="Passthrough" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.MissingSchemaAction">
      <summary>기존 <see cref="T:System.Data.DataSet" /> 스키마가 들어오는 데이터와 일치하지 않는 경우 수행할 동작을 결정합니다.</summary>
      <exception cref="T:System.ArgumentException">설정된 값이 <see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나가 아닌 경우</exception>
      <returns>
        <see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나입니다. 기본값은 <see langword="Add" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.ReturnProviderSpecificTypes">
      <summary>공급자별 값이나 공용 CLS 규격 값 중에서 <see langword="Fill" /> 메서드가 반환해야 하는 것을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="true" /> 메서드가 공급자별 값을 반환해야 하면 <see langword="Fill" />이고, 공용 CLS 규격 값을 반환해야 하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings">
      <summary>원본 테이블이 데이터 세트 테이블에 매핑되는 방식을 나타냅니다.</summary>
      <returns>반환된 레코드와 <see cref="T:System.Data.DataSet" /> 간의 마스터 매핑을 제공하는 컬렉션입니다. 기본값은 빈 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataAdapter.TableMappings">
      <summary>소스 테이블과 <see cref="T:System.Data.DataTable" /> 사이에 마스터 매핑을 제공하는 컬렉션을 가져옵니다.</summary>
      <returns>반환된 레코드와 <see cref="T:System.Data.DataSet" /> 간의 마스터 매핑을 제공하는 컬렉션입니다. 기본값은 빈 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DataColumnMapping">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" />에서 상속되는 개체의 일반 열 매핑을 포함합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMapping" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.#ctor(System.String,System.String)">
      <summary>지정된 소스 열 이름과 매핑할 <see cref="T:System.Data.Common.DataColumnMapping" /> 열 이름으로 <see cref="T:System.Data.DataSet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sourceColumn">데이터 소스의 대/소문자 구분 열입니다.</param>
      <param name="dataSetColumn">매핑할 <see cref="T:System.Data.DataSet" />의 대/소문자를 구분하지 않는 열 이름입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)">
      <summary>
        <see cref="T:System.Data.DataColumn" />와 <see cref="T:System.Data.DataTable" /> 속성을 이용하여 주어진 <see cref="T:System.Data.MissingSchemaAction" />에서 <see cref="P:System.Data.Common.DataColumnMapping.DataSetColumn" />을 가져옵니다.</summary>
      <param name="dataTable">열을 가져올 <see cref="T:System.Data.DataTable" />입니다.</param>
      <param name="dataType">데이터 열의 <see cref="T:System.Type" />입니다.</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나입니다.</param>
      <returns>데이터 열입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.String,System.String,System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)">
      <summary>
        <see cref="M:System.Data.Common.DataColumnMapping.GetDataColumnBySchemaAction(System.Data.DataTable,System.Type,System.Data.MissingSchemaAction)" /> 개체를 인스턴스화하지 않고 호출할 수 있는 <see cref="T:System.Data.Common.DataColumnMapping" />의 정적 버전입니다.</summary>
      <param name="sourceColumn">데이터 소스의 대/소문자 구분 열입니다.</param>
      <param name="dataSetColumn">매핑할 <see cref="T:System.Data.DataSet" />의 대/소문자를 구분하지 않는 열 이름입니다.</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" />의 인스턴스입니다.</param>
      <param name="dataType">매핑되는 열의 데이터 형식입니다.</param>
      <param name="schemaAction">기존 <see cref="T:System.Data.DataSet" /> 스키마가 들어오는 데이터와 일치하지 않는 경우 수행할 동작을 결정합니다.</param>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.System#ICloneable#Clone">
      <summary>현재 인스턴스의 복사본인 새 개체를 만듭니다.</summary>
      <returns>현재 개체의 복사본입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMapping.ToString">
      <summary>현재 <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" /> 이름을 문자열로 변환합니다.</summary>
      <returns>문자열인 현재 <see cref="P:System.Data.Common.DataColumnMapping.SourceColumn" /> 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMapping.DataSetColumn">
      <summary>
        <see cref="T:System.Data.DataSet" />에서 매핑할 열의 이름을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataSet" />에서 매핑할 열의 이름입니다. 이름은 대/소문자를 구분하지 않습니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMapping.SourceColumn">
      <summary>데이터 소스에서 매핑할 열의 이름을 가져오거나 설정합니다. 이름은 대/소문자를 구분합니다.</summary>
      <returns>데이터 소스의 열 이름(대/소문자 구분)입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DataColumnMappingCollection">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMapping" /> 개체의 컬렉션을 포함합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.#ctor">
      <summary>빈 <see cref="T:System.Data.Common.DataColumnMappingCollection" />를 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Add(System.Object)">
      <summary>컬렉션에 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체를 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 <see langword="DataColumnMapping" /> 개체입니다.</param>
      <exception cref="T:System.InvalidCastException">전달된 개체가 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체가 아닌 경우</exception>
      <returns>컬렉션에 추가된 <see langword="DataColumnMapping" /> 개체의 인덱스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Add(System.String,System.String)">
      <summary>소스 열 이름과 <see cref="T:System.Data.Common.DataColumnMapping" /> 열 이름이 주어지면 <see cref="T:System.Data.DataSet" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="sourceColumn">매핑되는 소스 열의 대/소문자 구분 이름입니다.</param>
      <param name="dataSetColumn">대/소문자를 구분하지 않는 매핑되는 <see cref="T:System.Data.DataSet" /> 열의 이름입니다.</param>
      <returns>컬렉션에 추가된 <see langword="DataColumnMapping" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Array)">
      <summary>지정된 <see cref="T:System.Array" />의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="values">컬렉션에 추가할 <see cref="T:System.Array" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.AddRange(System.Data.Common.DataColumnMapping[])">
      <summary>지정된 <see cref="T:System.Data.Common.DataColumnMapping" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="values">컬렉션에 추가할 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Clear">
      <summary>컬렉션에서 모든 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체를 제거합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Contains(System.Object)">
      <summary>주어진 <see cref="T:System.Data.Common.DataColumnMapping" />가 있는 <see cref="T:System.Object" /> 개체가 컬렉션에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />인 <see cref="T:System.Data.Common.DataColumnMapping" />입니다.</param>
      <exception cref="T:System.InvalidCastException">전달된 개체가 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체가 아닌 경우</exception>
      <returns>컬렉션에 지정된 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Contains(System.String)">
      <summary>주어진 소스 열 이름을 가진 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체가 컬렉션에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 개체의 대/소문자 구분 소스 열 이름입니다.</param>
      <returns>컬렉션에 지정된 소스 열 이름을 가진 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />의 요소를 지정된 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" /> 요소를 복사할 대상 <see cref="T:System.Data.Common.DataColumnMappingCollection" />입니다.</param>
      <param name="index">배열의 시작 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.CopyTo(System.Data.Common.DataColumnMapping[],System.Int32)">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />의 요소를 지정된 <see cref="T:System.Data.Common.DataColumnMapping" /> 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 요소를 복사할 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 배열입니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetByDataSetColumn(System.String)">
      <summary>지정된 <see cref="T:System.Data.Common.DataColumnMapping" /> 열 이름을 가진 <see cref="T:System.Data.DataSet" /> 개체를 가져옵니다.</summary>
      <param name="value">대/소문자를 구분하지 않는 찾을 <see cref="T:System.Data.DataSet" /> 열의 이름입니다.</param>
      <returns>지정된 <see cref="T:System.Data.Common.DataColumnMapping" /> 열 이름을 가진 <see cref="T:System.Data.DataSet" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetColumnMappingBySchemaAction(System.Data.Common.DataColumnMappingCollection,System.String,System.Data.MissingMappingAction)">
      <summary>지정된 <see cref="T:System.Data.Common.DataColumnMapping" />의 <see cref="T:System.Data.Common.DataColumnMappingCollection" />, 소스 열 이름 및 <see cref="T:System.Data.MissingMappingAction" />를 가져옵니다.</summary>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />
      </param>
      <param name="sourceColumn">찾을 대/소문자 구분 소스 열 이름입니다.</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 값 중 하나입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 매개 변수가 <see langword="Error" />로 설정되고, 매핑이 지정되지 않은 경우</exception>
      <returns>
        <see cref="T:System.Data.Common.DataColumnMapping" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetDataColumn(System.Data.Common.DataColumnMappingCollection,System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)">
      <summary>
        <see cref="T:System.Data.DataColumn" /> 개체를 인스턴스화하지 않고 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 개체를 반환하는 정적 메서드입니다.</summary>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />
      </param>
      <param name="sourceColumn">데이터 소스의 대/소문자 구분 열입니다.</param>
      <param name="dataType">매핑되는 열의 데이터 형식입니다.</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataTable" />의 인스턴스입니다.</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 값 중 하나입니다.</param>
      <param name="schemaAction">기존 <see cref="T:System.Data.DataSet" /> 스키마가 들어오는 데이터와 일치하지 않는 경우 수행할 동작을 결정합니다.</param>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.GetEnumerator">
      <summary>컬렉션을 반복할 수 있는 열거자를 가져옵니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.Object)">
      <summary>컬렉션 내의 <see cref="T:System.Object" />인 지정된 <see cref="T:System.Data.Common.DataColumnMapping" />의 위치를 가져옵니다.</summary>
      <param name="value">찾을 <see cref="T:System.Object" />인 <see cref="T:System.Data.Common.DataColumnMapping" />입니다.</param>
      <returns>컬렉션 내의 <see cref="T:System.Object" />인 지정된 <see cref="T:System.Data.Common.DataColumnMapping" /> 의 위치(0부터 시작)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOf(System.String)">
      <summary>지정된 소스 열 이름을 가진 <see cref="T:System.Data.Common.DataColumnMapping" />의 위치입니다.</summary>
      <param name="sourceColumn">소스 열의 이름(대/소문자 구분)입니다.</param>
      <returns>지정된 대/소문자 구분 소스 열 이름을 가진 <see cref="T:System.Data.Common.DataColumnMapping" />의 위치(0부터 시작)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.IndexOfDataSetColumn(System.String)">
      <summary>주어진 <see cref="T:System.Data.Common.DataColumnMapping" /> 열 이름을 가진 <see cref="T:System.Data.DataSet" />의 지정된 위치를 가져옵니다.</summary>
      <param name="dataSetColumn">대/소문자를 구분하지 않는 찾을 데이터 집합 열의 이름입니다.</param>
      <returns>주어진 <see langword="DataSet" /> 열 이름을 가진 지정된 <see cref="T:System.Data.Common.DataColumnMapping" />의 위치(0부터 시작)이거나, <see langword="DataColumnMapping" /> 개체가 컬렉션에 없으면 -1입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Data.Common.DataColumnMapping)">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMapping" />의 지정된 인덱스에 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 개체를 삽입합니다.</summary>
      <param name="index">삽입할 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체의 0부터 시작하는 인덱스입니다.</param>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 개체</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Insert(System.Int32,System.Object)">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMapping" />의 지정된 인덱스에 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 개체를 삽입합니다.</summary>
      <param name="index">삽입할 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체의 0부터 시작하는 인덱스입니다.</param>
      <param name="value">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 개체</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Remove(System.Data.Common.DataColumnMapping)">
      <summary>지정된 <see cref="T:System.Data.Common.DataColumnMapping" />를 컬렉션에서 제거합니다.</summary>
      <param name="value">제거할 <see cref="T:System.Data.Common.DataColumnMapping" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.Remove(System.Object)">
      <summary>
        <see cref="T:System.Object" />인 <see cref="T:System.Data.Common.DataColumnMapping" />를 컬렉션에서 제거합니다.</summary>
      <param name="value">제거할 <see cref="T:System.Object" />인 <see cref="T:System.Data.Common.DataColumnMapping" />입니다.</param>
      <exception cref="T:System.InvalidCastException">지정된 개체가 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체가 아닌 경우</exception>
      <exception cref="T:System.ArgumentException">컬렉션에 지정된 개체가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.Int32)">
      <summary>컬렉션에서 지정된 인덱스를 가진 <see cref="T:System.Data.Common.DataColumnMapping" />개체를 제거합니다.</summary>
      <param name="index">제거할 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 인덱스에 <see cref="T:System.Data.Common.DataColumnMapping" />가 개체가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.RemoveAt(System.String)">
      <summary>컬렉션에서 지정된 소스 열 이름을 가진 <see cref="T:System.Data.Common.DataColumnMapping" />개체를 제거합니다.</summary>
      <param name="sourceColumn">대/소문자 구분 소스 열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 소스 열 이름을 가진 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#Add(System.String,System.String)">
      <summary>소스 열 및 <see cref="T:System.Data.Common.DataColumnMapping" /> 열 이름을 사용하여 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 개체를 <see cref="T:System.Data.DataSet" />에 추가합니다.</summary>
      <param name="sourceColumnName">소스 열의 이름(대/소문자 구분)입니다.</param>
      <param name="dataSetColumnName">
        <see cref="T:System.Data.DataSet" /> 열의 이름입니다.</param>
      <returns>컬렉션에 추가된 ColumnMapping 개체를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#GetByDataSetColumn(System.String)">
      <summary>지정된 <see cref="T:System.Data.Common.DataColumnMapping" /> 열 이름을 가진 <see cref="T:System.Data.DataSet" /> 개체를 가져옵니다.</summary>
      <param name="dataSetColumnName">대/소문자를 구분하지 않는 찾을 <see cref="T:System.Data.DataSet" /> 열의 이름입니다.</param>
      <returns>지정된 <see cref="T:System.Data.Common.DataColumnMapping" /> 열 이름을 가진 <see cref="T:System.Data.DataSet" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Count">
      <summary>컬렉션에 있는 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체의 수를 가져옵니다.</summary>
      <returns>컬렉션의 항목 수입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Item(System.Int32)">
      <summary>지정된 인덱스에서 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">찾을 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체의 인덱스(0부터 시작)입니다.</param>
      <returns>지정된 인덱스의 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.Item(System.String)">
      <summary>지정된 소스 열 이름을 가진 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="sourceColumn">소스 열의 이름(대/소문자 구분)입니다.</param>
      <returns>지정된 소스 열 이름을 가진 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되었는지(스레드로부터 안전한지) 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />가 고정 크기인 경우 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IList" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataColumnMappingCollection.System#Data#IColumnMappingCollection#Item(System.String)">
      <summary>지정된 <see langword="SourceColumn" /> 이름을 가진 <see cref="T:System.Data.IColumnMapping" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">요소의 인덱스입니다.</param>
      <returns>지정된 <see langword="IColumnMapping" /> 이름을 가진 <see langword="SourceColumn" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DataTableMapping">
      <summary>원본 테이블과 <see cref="T:System.Data.DataTable" />간의 매핑된 관계에 대한 설명을 포함합니다. 이 클래스는 <see cref="T:System.Data.Common.DataAdapter" /> 를 채울 때 <see cref="T:System.Data.DataSet" />에서 사용합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String)">
      <summary>소스 테이블과  <see cref="T:System.Data.Common.DataTableMapping" /> 이름이 주어지면 소스를 사용하여 <see cref="T:System.Data.DataTable" /> 클래스의 새 인스턴스를 초기화힙니다.</summary>
      <param name="sourceTable">데이터 소스의 대/소문자 구분 소스 테이블 이름입니다.</param>
      <param name="dataSetTable">
        <see cref="T:System.Data.DataSet" />에서 매핑되는 테이블 이름입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.#ctor(System.String,System.String,System.Data.Common.DataColumnMapping[])">
      <summary>소스 테이블, <see cref="T:System.Data.Common.DataTableMapping" /> 이름 및 <see cref="T:System.Data.DataTable" /> 개체의 배열이 주어지면 <see cref="T:System.Data.Common.DataColumnMapping" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="sourceTable">데이터 소스의 대/소문자 구분 소스 테이블 이름입니다.</param>
      <param name="dataSetTable">
        <see cref="T:System.Data.DataSet" />에서 매핑되는 테이블 이름입니다.</param>
      <param name="columnMappings">
        <see cref="T:System.Data.Common.DataColumnMapping" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetColumnMappingBySchemaAction(System.String,System.Data.MissingMappingAction)">
      <summary>지정된 <see cref="T:System.Data.DataColumn" /> 값과 <see cref="T:System.Data.DataTable" />의 이름을 사용하여 지정된 <see cref="T:System.Data.MissingMappingAction" />에서 <see cref="T:System.Data.DataColumn" />을 가져옵니다.</summary>
      <param name="sourceColumn">
        <see cref="T:System.Data.DataColumn" />의 이름입니다.</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 값 중 하나입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 매개 변수가 <see langword="Error" />로 설정되고, 매핑이 지정되지 않은 경우</exception>
      <returns>데이터 열입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetDataColumn(System.String,System.Type,System.Data.DataTable,System.Data.MissingMappingAction,System.Data.MissingSchemaAction)">
      <summary>지정된 열 이름에 대한 <see cref="T:System.Data.DataColumn" /> 개체를 반환합니다.</summary>
      <param name="sourceColumn">
        <see cref="T:System.Data.DataColumn" />의 이름입니다.</param>
      <param name="dataType">
        <paramref name="sourceColumn" />의 데이터 형식입니다.</param>
      <param name="dataTable">
        <see cref="T:System.Data.DataSet" />에서 매핑되는 테이블 이름입니다.</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 값 중 하나입니다.</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나입니다.</param>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.GetDataTableBySchemaAction(System.Data.DataSet,System.Data.MissingSchemaAction)">
      <summary>지정된 <see cref="T:System.Data.DataTable" /> 값을 사용하여 지정된 <see cref="T:System.Data.DataSet" />의 현재 <see cref="T:System.Data.MissingSchemaAction" />을 가져옵니다.</summary>
      <param name="dataSet">
        <see cref="T:System.Data.DataSet" />을 가져오는 <see cref="T:System.Data.DataTable" />입니다.</param>
      <param name="schemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나입니다.</param>
      <returns>데이터 테이블입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.System#ICloneable#Clone">
      <summary>현재 인스턴스의 복사본인 새 개체를 만듭니다.</summary>
      <returns>현재 인스턴스의 복사본인 새 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMapping.ToString">
      <summary>현재 <see cref="P:System.Data.Common.DataTableMapping.SourceTable" /> 이름을 문자열로 변환합니다.</summary>
      <returns>문자열로 된 현재 <see cref="P:System.Data.Common.DataTableMapping.SourceTable" /> 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.ColumnMappings">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />에 대한 <see cref="T:System.Data.DataTable" />를 가져옵니다.</summary>
      <returns>데이터 열 매핑 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.DataSetTable">
      <summary>
        <see cref="T:System.Data.DataSet" />에서 테이블 이름을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataSet" />의 테이블 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.SourceTable">
      <summary>데이터 소스에서 대/소문자 구분 소스 테이블을 가져오거나 설정합니다.</summary>
      <returns>데이터 소스의 대/소문자 구분 소스 테이블 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMapping.System#Data#ITableMapping#ColumnMappings">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />에 대한 파생 <see cref="T:System.Data.DataTable" />을 가져옵니다.</summary>
      <returns>데이터 열 매핑 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DataTableMappingCollection">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" /> 개체의 컬렉션입니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DataTableMappingCollection" /> 클래스의 새 인스턴스를 초기화합니다. 이 새 인스턴스는 비어 있습니다. 즉, 여기에는 아직 <see cref="T:System.Data.Common.DataTableMapping" /> 개체가 포함되어 있지 않습니다.</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Add(System.Object)">
      <summary>테이블 매핑인 <see cref="T:System.Object" />를 컬렉션에 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 <see langword="DataTableMapping" /> 개체입니다.</param>
      <exception cref="T:System.InvalidCastException">전달된 개체가 <see cref="T:System.Data.Common.DataTableMapping" /> 개체가 아닌 경우</exception>
      <returns>컬렉션에 추가된 <see langword="DataTableMapping" /> 개체의 인덱스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Add(System.String,System.String)">
      <summary>소스 테이블 이름과 <see cref="T:System.Data.Common.DataTableMapping" /> 테이블 이름이 주어지면 <see cref="T:System.Data.DataSet" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="sourceTable">매핑할 소스 테이블의 대/소문자 구분 이름입니다.</param>
      <param name="dataSetTable">대/소문자를 구분하지 않는 매핑되는 <see cref="T:System.Data.DataSet" /> 테이블의 이름입니다.</param>
      <returns>컬렉션에 추가된 <see cref="T:System.Data.Common.DataTableMapping" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.AddRange(System.Array)">
      <summary>지정된 <see cref="T:System.Array" />의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="values">컬렉션에 추가할 값의 <see cref="T:System.Array" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.AddRange(System.Data.Common.DataTableMapping[])">
      <summary>지정된 <see cref="T:System.Data.Common.DataTableMapping" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="values">컬렉션에 추가할 <see cref="T:System.Data.Common.DataTableMapping" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Clear">
      <summary>컬렉션에서 모든 <see cref="T:System.Data.Common.DataTableMapping" /> 개체를 제거합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Contains(System.Object)">
      <summary>지정된 <see cref="T:System.Data.Common.DataTableMapping" /> 개체가 컬렉션에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />인 <see cref="T:System.Data.Common.DataTableMapping" />입니다.</param>
      <returns>이 컬렉션에 지정된 <see cref="T:System.Data.Common.DataTableMapping" />이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Contains(System.String)">
      <summary>지정된 소스 테이블 이름을 가진 <see cref="T:System.Data.Common.DataTableMapping" /> 개체가 컬렉션에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="value">
        <see cref="T:System.Data.Common.DataTableMapping" /> 개체가 포함되어 있는 대/소문자 구분 소스 테이블 이름입니다.</param>
      <returns>컬렉션에 이 소스 테이블 이름을 가진 <see cref="T:System.Data.Common.DataTableMapping" /> 개체가 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Array,System.Int32)">
      <summary>
        <see cref="T:System.Data.Common.DataTableMappingCollection" />의 요소를 지정된 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" /> 요소를 복사할 <see cref="T:System.Data.Common.DataTableMappingCollection" />입니다.</param>
      <param name="index">배열의 시작 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.CopyTo(System.Data.Common.DataTableMapping[],System.Int32)">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" />의 요소를 지정된 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Data.Common.DataTableMapping" /> 요소를 복사할 <see cref="T:System.Data.Common.DataTableMappingCollection" />입니다.</param>
      <param name="index">배열의 시작 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetByDataSetTable(System.String)">
      <summary>지정된 <see cref="T:System.Data.Common.DataTableMapping" /> 테이블 이름을 가진 <see cref="T:System.Data.DataSet" /> 개체를 가져옵니다.</summary>
      <param name="dataSetTable">대/소문자를 구분하지 않는 찾을 <see cref="T:System.Data.DataSet" /> 테이블의 이름입니다.</param>
      <returns>지정된 <see cref="T:System.Data.Common.DataTableMapping" /> 테이블 이름을 가진 <see cref="T:System.Data.DataSet" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetEnumerator">
      <summary>컬렉션을 반복할 수 있는 열거자를 가져옵니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.GetTableMappingBySchemaAction(System.Data.Common.DataTableMappingCollection,System.String,System.String,System.Data.MissingMappingAction)">
      <summary>주어진 <see cref="T:System.Data.Common.DataColumnMapping" />을 사용하여 지정된 소스 테이블 이름과 <see cref="T:System.Data.DataSet" /> 테이블 이름을 가진 <see cref="T:System.Data.MissingMappingAction" /> 개체를 가져옵니다.</summary>
      <param name="tableMappings">검색할 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 컬렉션입니다.</param>
      <param name="sourceTable">매핑된 소스 테이블의 대/소문자 구분 이름입니다.</param>
      <param name="dataSetTable">대/소문자를 구분하지 않는 매핑된 <see cref="T:System.Data.DataSet" /> 테이블의 이름입니다.</param>
      <param name="mappingAction">
        <see cref="T:System.Data.MissingMappingAction" /> 값 중 하나입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="mappingAction" /> 매개 변수가 <see langword="Error" />로 설정되고, 매핑이 지정되지 않은 경우</exception>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOf(System.Object)">
      <summary>컬렉션 내의 지정된 <see cref="T:System.Data.Common.DataTableMapping" /> 개체의 위치를 가져옵니다.</summary>
      <param name="value">찾을 <see cref="T:System.Object" /> 개체인 <see cref="T:System.Data.Common.DataTableMapping" />입니다.</param>
      <returns>컬렉션 내의 지정된 <see cref="T:System.Data.Common.DataTableMapping" /> 개체의 위치(0부터 시작)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOf(System.String)">
      <summary>지정된 소스 테이블 이름을 가진 <see cref="T:System.Data.Common.DataTableMapping" /> 개체의 위치입니다.</summary>
      <param name="sourceTable">소스 테이블의 이름(대/소문자를 구분함)입니다.</param>
      <returns>지정된 소스 테이블 이름을 가진 <see cref="T:System.Data.Common.DataTableMapping" /> 개체의 위치(0부터 시작)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.IndexOfDataSetTable(System.String)">
      <summary>지정된 <see cref="T:System.Data.Common.DataTableMapping" /> 테이블 이름을 가진 <see cref="T:System.Data.DataSet" /> 개체의 위치입니다.</summary>
      <param name="dataSetTable">대/소문자를 구분하지 않는 찾을 <see langword="DataSet" /> 테이블의 이름입니다.</param>
      <returns>주어진 <see cref="T:System.Data.Common.DataTableMapping" /> 테이블 이름을 가진 <see cref="T:System.Data.DataSet" /> 개체의 위치(0부터 시작)이거나, <see cref="T:System.Data.Common.DataTableMapping" /> 개체가 컬렉션에 없으면 -1입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Data.Common.DataTableMapping)">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" />의 지정된 인덱스에 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 개체를 삽입합니다.</summary>
      <param name="index">삽입할 <see cref="T:System.Data.Common.DataTableMapping" /> 개체의 0부터 시작하는 인덱스입니다.</param>
      <param name="value">삽입할 <see cref="T:System.Data.Common.DataTableMapping" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Insert(System.Int32,System.Object)">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" />의 지정된 인덱스에 <see cref="T:System.Data.Common.DataTableMappingCollection" /> 개체를 삽입합니다.</summary>
      <param name="index">삽입할 <see cref="T:System.Data.Common.DataTableMapping" /> 개체의 0부터 시작하는 인덱스입니다.</param>
      <param name="value">삽입할 <see cref="T:System.Data.Common.DataTableMapping" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Remove(System.Data.Common.DataTableMapping)">
      <summary>컬렉션에서 지정된 <see cref="T:System.Data.Common.DataTableMapping" /> 개체를 제거합니다.</summary>
      <param name="value">제거할 <see cref="T:System.Data.Common.DataTableMapping" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.Remove(System.Object)">
      <summary>컬렉션에서 지정된 <see cref="T:System.Data.Common.DataTableMapping" /> 개체를 제거합니다.</summary>
      <param name="value">제거할 <see cref="T:System.Data.Common.DataTableMapping" /> 개체입니다.</param>
      <exception cref="T:System.InvalidCastException">지정된 개체가 <see cref="T:System.Data.Common.DataTableMapping" /> 개체가 아닌 경우</exception>
      <exception cref="T:System.ArgumentException">컬렉션에 지정된 개체가 없는 경우</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.Int32)">
      <summary>컬렉션에서 지정된 인덱스에 위치한 <see cref="T:System.Data.Common.DataTableMapping" /> 개체를 제거합니다.</summary>
      <param name="index">제거할 <see cref="T:System.Data.Common.DataTableMapping" /> 개체의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <see cref="T:System.Data.Common.DataTableMapping" /> 개체가 지정된 인덱스와 함께 존재하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.RemoveAt(System.String)">
      <summary>컬렉션에서 지정된 소스 테이블 이름을 가진 <see cref="T:System.Data.Common.DataTableMapping" />개체를 제거합니다.</summary>
      <param name="sourceTable">찾을 대/소문자 구분 소스 테이블 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <see cref="T:System.Data.Common.DataTableMapping" /> 개체가 지정된 소스 테이블 이름과 함께 존재하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#Add(System.String,System.String)">
      <summary>컬렉션에 테이블 매핑을 추가합니다.</summary>
      <param name="sourceTableName">소스 테이블의 이름(대/소문자를 구분함)입니다.</param>
      <param name="dataSetTableName">
        <see cref="T:System.Data.DataSet" /> 테이블의 이름입니다.</param>
      <returns>새로 매핑된 <see cref="T:System.Data.ITableMapping" /> 개체에 대한 참조를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#GetByDataSetTable(System.String)">
      <summary>지정된 <see cref="T:System.Data.DataSet" /> 테이블 이름을 가진 TableMapping 개체를 가져옵니다.</summary>
      <param name="dataSetTableName">컬렉션 내의 <see langword="DataSet" /> 테이블 이름입니다.</param>
      <returns>지정된 <see langword="DataSet" /> 테이블 이름을 가진 TableMapping 개체를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Count">
      <summary>컬렉션에 있는 <see cref="T:System.Data.Common.DataTableMapping" /> 개체의 수를 가져옵니다.</summary>
      <returns>컬렉션의 <see langword="DataTableMapping" /> 개체 수입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Item(System.Int32)">
      <summary>지정된 인덱스에서 <see cref="T:System.Data.Common.DataTableMapping" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">반환할 <see cref="T:System.Data.Common.DataTableMapping" /> 개체의 0부터 시작하는 인덱스입니다.</param>
      <returns>지정된 인덱스의 <see cref="T:System.Data.Common.DataTableMapping" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.Item(System.String)">
      <summary>지정된 소스 테이블 이름을 가진 <see cref="T:System.Data.Common.DataTableMapping" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="sourceTable">소스 테이블의 이름(대/소문자를 구분함)입니다.</param>
      <returns>지정된 소스 테이블 이름을 가진 <see cref="T:System.Data.Common.DataTableMapping" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#IsFixedSize">
      <summary>
        <see cref="T:System.Collections.IList" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />가 고정 크기인 경우 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#IsReadOnly">
      <summary>
        <see cref="T:System.Collections.IList" />가 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />이 읽기 전용이면 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Collections#IList#Item(System.Int32)">
      <summary>컬렉션에서 지정한 인덱스에 있는 항목을 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 항목의 인덱스(0부터 시작)입니다.</param>
      <returns>지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DataTableMappingCollection.System#Data#ITableMappingCollection#Item(System.String)">
      <summary>지정된 <see cref="T:System.Data.ITableMapping" /> 이름을 가진 <see cref="P:System.Data.ITableMapping.SourceTable" />의 인스턴스를 가져오거나 설정합니다.</summary>
      <param name="index">
        <see cref="T:System.Data.ITableMapping" />의 <see langword="SourceTable" /> 이름입니다.</param>
      <returns>지정된 <see langword="SourceTable" /> 이름을 가진 <see cref="T:System.Data.ITableMapping" />의 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbColumn">
      <summary>데이터 원본 내의 열을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbColumn.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Data.Common.DbColumn.AllowDBNull">
      <summary>
        <see langword="DBNull" /> 값이 이 열에서 허용되는지를 나타내는 null 허용 부울 값을 가져오거나, 값이 설정되어 있지 않은 경우 <see langword="null" />을 반환합니다. <see langword="DBNull" /> 값이 이 열에서 허용되는지를 나타내는 <see langword="true" /> 또는 <see langword="false" />로 설정하거나, 파생 클래스에서 재정의된 경우 <see langword="null" />(Visual Basic의 경우 <see langword="Nothing" />)로 설정할 수 있습니다.</summary>
      <returns>
        <see langword="DBNull" /> 값이 이 열에서 허용되는 경우 <see langword="true" />를 반환하고, 그러지 않은 경우 <see langword="false" />를 반환합니다. 값이 설정되지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseCatalogName">
      <summary>데이터 원본과 연결된 카탈로그 이름을 가져옵니다. 값이 설정되어 있지 않은 경우 <see langword="null" />입니다. 카탈로그 이름으로 설정하거나 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다.</summary>
      <returns>데이터 원본과 연결된 카탈로그 이름입니다. 값이 설정되어 있지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseColumnName">
      <summary>기본 열 이름을 가져옵니다. 값이 설정되어 있지 않은 경우 <see langword="null" />입니다. 열 이름으로 설정하거나 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다.</summary>
      <returns>기본 열 이름입니다. 값이 설정되어 있지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseSchemaName">
      <summary>데이터 원본과 연결된 스키마 이름을 가져옵니다. 값이 설정되어 있지 않은 경우 <see langword="null" />입니다. 스키마 이름으로 설정하거나 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다.</summary>
      <returns>데이터 원본과 연결된 스키마 이름입니다. 값이 설정되어 있지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseServerName">
      <summary>열과 연결된 서버 이름을 가져옵니다. 값이 설정되어 있지 않은 경우 <see langword="null" />입니다. 서버 이름으로 설정하거나 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다.</summary>
      <returns>열과 연결된 서버 이름입니다. 값이 설정되어 있지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.BaseTableName">
      <summary>스키마의 테이블 이름을 가져옵니다. 값이 설정되어 있지 않은 경우 <see langword="null" />입니다. 테이블 이름으로 설정하거나 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다.</summary>
      <returns>스키마의 테이블 이름입니다. 값이 설정되어 있지 않은 경우 null 참조(Visual Basic의 경우<see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnName">
      <summary>열의 이름을 가져옵니다. 파생 클래스에서 재정의된 경우 열 이름으로 설정할 수 있습니다.</summary>
      <returns>열 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnOrdinal">
      <summary>데이터 원본 행의 열 위치(서수)를 가져오거나, 값이 설정되어 있지 않은 경우 <see langword="null" />을 가져옵니다. 열 위치를 지정하기 위해 <see langword="int32" /> 값으로 설정하거나, 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다.</summary>
      <returns>열 서수에 대한 <see langword="int32" /> 값입니다. 값이 설정되어 있지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.ColumnSize">
      <summary>열 크기를 가져옵니다. 값이 설정되어 있지 않은 경우 <see langword="null" />입니다. 열 크기를 지정하기 위해 <see langword="int32" /> 값으로 설정하거나, 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다.</summary>
      <returns>
        <see langword="int32" />열 크기 값입니다. <see langword="Nothing" /> 값이 설정 되어 있지 않은 경우 null 참조 (Visual Basic)입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.DataType">
      <summary>열에 저장된 데이터의 형식을 가져옵니다. 파생 클래스에서 재정의된 경우 열의 데이터 형식을 나타내는 <see cref="T:System.Type" /> 개체로 설정할 수 있습니다.</summary>
      <returns>열에 포함된 데이터 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.DataTypeName">
      <summary>데이터 형식의 이름을 가져옵니다. 값이 설정되어 있지 않은 경우 <see langword="null" />입니다. 데이터 형식 이름으로 설정하거나 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다.</summary>
      <returns>데이터 형식 이름입니다. 값이 설정되어 있지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsAliased">
      <summary>이 열에 별칭이 지정되어 있는지를 나타내는 null 허용 부울 값을 가져오거나, 값이 설정되어 있지 않은 경우 <see langword="null" />을 반환합니다. 이 열에 별칭이 지정되어 있는지를 나타내는 <see langword="true" /> 또는 <see langword="false" />로 설정하거나, 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다(Visual Basic의 경우 <see langword="Nothing" />).</summary>
      <returns>이 열에 별칭이 지정되어 있으면 <see langword="true" />를 반환하고, 그러지 않으면 <see langword="false" />를 반환합니다. 값이 설정되지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsAutoIncrement">
      <summary>이 열의 값이 자동으로 증가하는지를 나타내는 null 허용 부울 값을 가져오거나, 값이 설정되어 있지 않은 경우 <see langword="null" />을 반환합니다. 이 열의 값이 자동으로 증가하는지를 나타내는 <see langword="true" /> 또는 <see langword="false" />로 설정하거나, 파생 클래스에서 재정의된 경우 <see langword="null" />(Visual Basic의 경우 <see langword="Nothing" />)로 설정할 수 있습니다.</summary>
      <returns>이 열의 값이 자동으로 증가하는 경우 <see langword="true" />를 반환하고, 그러지 않은 경우 <see langword="false" />를 반환합니다. 값이 설정되지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsExpression">
      <summary>이 열이 식인지를 나타내는 null 허용 부울 값을 가져오거나, 값이 설정되어 있지 않은 경우 <see langword="null" />을 반환합니다. 이 열이 식인지를 나타내는 <see langword="true" /> 또는 <see langword="false" />로 설정하거나, 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다(Visual Basic의 경우 <see langword="Nothing" />).</summary>
      <returns>이 열이 식이면 <see langword="true" />를 반환하고, 그러지 않으면 <see langword="false" />를 반환합니다. 값이 설정되지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsHidden">
      <summary>이 열이 숨겨져 있는지를 나타내는 null 허용 부울 값을 가져오거나, 값이 설정되어 있지 않은 경우 <see langword="null" />을 반환합니다. 이 열이 숨겨져 있는지를 나타내는 <see langword="true" /> 또는 <see langword="false" />로 설정하거나, 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다(Visual Basic의 경우 <see langword="Nothing" />).</summary>
      <returns>이 열이 숨겨져 있으면 <see langword="true" />를 반환하고, 그러지 않으면 <see langword="false" />를 반환합니다. 값이 설정되지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsIdentity">
      <summary>이 열이 ID인지를 나타내는 null 허용 부울 값을 가져오거나, 값이 설정되어 있지 않은 경우 <see langword="null" />을 반환합니다. 이 열이 ID인지를 나타내는 <see langword="true" /> 또는 <see langword="false" />로 설정하거나, 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다(Visual Basic의 경우 <see langword="Nothing" />).</summary>
      <returns>이 열이 ID이면 <see langword="true" />를 반환하고, 그러지 않으면 <see langword="false" />를 반환합니다. 값이 설정되지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsKey">
      <summary>이 열이 키인지를 나타내는 null 허용 부울 값을 가져오거나, 값이 설정되어 있지 않은 경우 <see langword="null" />을 반환합니다. 이 열이 키인지를 나타내는 <see langword="true" /> 또는 <see langword="false" />로 설정하거나, 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다(Visual Basic의 경우 <see langword="Nothing" />).</summary>
      <returns>이 열이 키인 경우 <see langword="true" />를 반환하고, 그렇지 않은 경우 <see langword="false" />를 반환합니다. 값이 설정되지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsLong">
      <summary>이 열에 Long 데이터가 포함되는지를 나타내는 null 허용 부울 값을 가져오거나, 값이 설정되어 있지 않은 경우 <see langword="null" />을 반환합니다. 이 열에 Long 데이터가 포함되는지를 나타내는 <see langword="true" /> 또는 <see langword="false" />로 설정하거나, 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다(Visual Basic의 경우 <see langword="Nothing" />).</summary>
      <returns>이 열에 Long 데이터가 포함되는 경우 <see langword="true" />를 반환하고, 그러지 않는 경우 <see langword="false" />를 반환합니다. 값이 설정되지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsReadOnly">
      <summary>이 열이 읽기 전용인지를 나타내는 null 허용 부울 값을 가져오거나, 값이 설정되어 있지 않은 경우 <see langword="null" />을 반환합니다. 이 열이 읽기 전용인지를 나타내는 <see langword="true" /> 또는 <see langword="false" />로 설정하거나, 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다(Visual Basic의 경우 <see langword="Nothing" />).</summary>
      <returns>열이 읽기 전용이면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다. 값이 설정되지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.IsUnique">
      <summary>이 열에 고유한 제약 조건이 적용되는지를 나타내는 null 허용 부울 값을 가져오거나, 값이 설정되어 있지 않은 경우 <see langword="null" />을 반환합니다. 이 열에 고유한 제약 조건이 적용되는지를 나타내는 <see langword="true" /> 또는 <see langword="false" />로 설정하거나, 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다(Visual Basic의 경우 <see langword="Nothing" />).</summary>
      <returns>이 열에 고유한 제약 조건이 적용되는 경우 <see langword="true" />를 반환하고, 그러지 않은 경우 <see langword="false" />를 반환합니다. 값이 설정되지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.Item(System.String)">
      <summary>열 속성 이름을 기반으로 개체를 가져옵니다.</summary>
      <param name="property">열 속성 이름입니다.</param>
      <returns>열 속성 이름을 기반으로 하는 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.NumericPrecision">
      <summary>열 데이터의 전체 자릿수를 가져옵니다. 값이 설정되어 있지 않은 경우 <see langword="null" />입니다. 열 데이터의 전체 자릿수를 지정하기 위해 <see langword="int32" /> 값으로 설정하거나, 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다.</summary>
      <returns>
        <see langword="int32" />데이터가 숫자인 경우 열 데이터의 전체 자릿수를 지정 하는 값이 고, 그렇지 않으면 <see langword="Nothing" /> 값이 설정 되지 않은 경우 null 참조 (Visual Basic)입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.NumericScale">
      <summary>
        <see langword="null" /> 또는 열 데이터의 소수 자릿수를 반환하는 null 허용 <see langword="int32" /> 값을 가져옵니다. 파생 클래스에서 재정의된 경우 열 데이터의 소수 자릿수에 대해 <see langword="null" /> 또는 <see langword="int32" /> 값으로 설정할 수 있습니다.</summary>
      <returns>값이 설정되어 있지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)이고, 그렇지 않고 데이터가 숫자인 경우 열 데이터의 소수 자릿수를 지정하는 <see langword="int32" /> 값입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbColumn.UdtAssemblyQualifiedName">
      <summary>열의 데이터 형식을 나타내는 <see cref="T:System.Type" /> 개체의 정규화된 어셈블리 이름을 가져옵니다. 값이 설정되어 있지 않은 경우 <see langword="null" />입니다. 정규화된 어셈블리 이름으로 설정하거나 파생 클래스에서 재정의된 경우 <see langword="null" />로 설정할 수 있습니다.</summary>
      <returns>열의 데이터 형식을 나타내는 <see cref="T:System.Type" /> 개체의 정규화된 어셈블리 이름입니다. 값이 설정되어 있지 않은 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbCommand">
      <summary>SQL 문이나 데이터 소스에 대해 실행할 저장 프로시저를 나타냅니다. 명령을 나타내는 데이터베이스 관련 클래스에 대한 기본 클래스를 제공합니다. <see cref="Overload:System.Data.Common.DbCommand.ExecuteNonQueryAsync" /></summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbCommand" /> 개체의 인스턴스를 생성합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.Cancel">
      <summary>파생 클래스에서 재정의되는 경우 <see cref="T:System.Data.Common.DbCommand" />의 실행을 취소하려고 합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.CreateDbParameter">
      <summary>파생 클래스에서 재정의되는 경우 <see cref="T:System.Data.Common.DbParameter" /> 개체의 새 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.CreateParameter">
      <summary>
        <see cref="T:System.Data.Common.DbParameter" /> 개체의 새 인스턴스를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.DisposeAsync">
      <summary>명령 개체를 비동기적으로 삭제합니다.</summary>
      <returns>비동기 작업을 나타내는 <see cref="T:System.Threading.Tasks.ValueTask" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>파생 클래스에서 재정의되는 경우 연결에 대해 명령 텍스트를 실행합니다.</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" />의 인스턴스입니다.</param>
      <exception cref="T:System.Data.Common.DbException">명령 텍스트를 실행하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 값이 잘못되었습니다.</exception>
      <returns>작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>공급자는 <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" /> 오버로드에 기본값이 아닌 구현을 제공하도록 이 메서드를 구현해야 합니다.  
  
기본 구현은 동기 <see cref="M:System.Data.Common.DbCommand.ExecuteReader" /> 메서드를 호출하고, 호출 스레드를 차단하면서 완료된 작업을 반환합니다. 기본 구현은 이미 취소된 취소 토큰을 전달하는 경우 취소된 작업을 반환합니다. ExecuteReader에서 throw되는 예외는 반환된 Task Exception 속성을 통해 전달됩니다.  
  
이 메서드는 조기에 취소할 작업을 요청하는 데 사용할 수 있는 취소 토큰을 허용합니다. 구현은 이 요청을 무시할 수 있습니다.</summary>
      <param name="behavior">문 실행 및 데이터 검색을 위한 옵션입니다.</param>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 토큰입니다.</param>
      <exception cref="T:System.Data.Common.DbException">명령 텍스트를 실행하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 값이 잘못되었습니다.</exception>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQuery">
      <summary>파생 클래스에서 재정의되는 경우 연결 개체에 대해 SQL 문을 실행합니다.</summary>
      <returns>영향을 받은 행 수입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync">
      <summary>연결 개체에 대해 SQL 문을 실행하는 비동기 버전의 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />입니다.  
  
CancellationToken.None을 사용하여 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)" />를 호출합니다.</summary>
      <exception cref="T:System.Data.Common.DbException">명령 텍스트를 실행하는 동안 오류가 발생했습니다.</exception>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />의 비동기 버전입니다. 공급자는 적절한 구현을 재정의해야 합니다. 취소 토큰은 선택적으로 무시될 수 있습니다.  
  
기본 구현은 동기 <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" /> 메서드를 호출하고, 호출 스레드를 차단하면서 완료된 작업을 반환합니다. 기본 구현은 이미 취소된 취소 토큰을 전달하는 경우 취소된 작업을 반환합니다.  <see cref="M:System.Data.Common.DbCommand.ExecuteNonQuery" />에서 throw되는 예외는 반환된 Task Exception 속성을 통해 전달됩니다.  
  
반환된 작업이 완료될 때까지 <see langword="DbCommand" /> 개체의 다른 메서드 및 속성을 호출하지 마십시오.</summary>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 토큰입니다.</param>
      <exception cref="T:System.Data.Common.DbException">명령 텍스트를 실행하는 동안 오류가 발생했습니다.</exception>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReader">
      <summary>
        <see cref="P:System.Data.Common.DbCommand.CommandText" />에 대해 <see cref="P:System.Data.Common.DbCommand.Connection" />를 실행하고 <see cref="T:System.Data.Common.DbDataReader" />를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>
        <see cref="P:System.Data.Common.DbCommand.CommandText" />에 대해 <see cref="P:System.Data.Common.DbCommand.Connection" />를 실행하고 <see cref="T:System.Data.Common.DbDataReader" /> 값 중 하나를 사용하여 <see cref="T:System.Data.CommandBehavior" />를 반환합니다.</summary>
      <param name="behavior">명령 동작을 지정하는 열거형 값 중 하나입니다.</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync">
      <summary>
        <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />에 대해 <see cref="P:System.Data.Common.DbCommand.CommandText" />를 실행하고 <see cref="P:System.Data.Common.DbCommand.Connection" />를 반환하는 <see cref="T:System.Data.Common.DbDataReader" />의 비동기 버전입니다.  
  
CancellationToken.None을 사용하여 <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />를 호출합니다.</summary>
      <exception cref="T:System.Data.Common.DbException">명령 텍스트를 실행하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 값이 잘못되었습니다.</exception>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>
        <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />에 대해 <see cref="P:System.Data.Common.DbCommand.CommandText" />를 실행하고 <see cref="P:System.Data.Common.DbCommand.Connection" />를 반환하는 <see cref="T:System.Data.Common.DbDataReader" />의 비동기 버전입니다.  
  
<see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />를 호출합니다.</summary>
      <param name="behavior">명령 동작을 지정하는 열거형 값 중 하나입니다.</param>
      <exception cref="T:System.Data.Common.DbException">명령 텍스트를 실행하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 값이 잘못되었습니다.</exception>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />를 호출합니다.</summary>
      <param name="behavior">명령 동작을 지정하는 열거형 값 중 하나입니다.</param>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 토큰입니다.</param>
      <exception cref="T:System.Data.Common.DbException">명령 텍스트를 실행하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 값이 잘못되었습니다.</exception>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="Overload:System.Data.Common.DbCommand.ExecuteReader" />에 대해 <see cref="P:System.Data.Common.DbCommand.CommandText" />를 실행하고 <see cref="P:System.Data.Common.DbCommand.Connection" />를 반환하는 <see cref="T:System.Data.Common.DbDataReader" />의 비동기 버전입니다. 이 메서드는 작업을 취소하지 않아야 한다는 알림을 전파합니다.  
  
<see cref="M:System.Data.Common.DbCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)" />를 호출합니다.</summary>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 토큰입니다.</param>
      <exception cref="T:System.Data.Common.DbException">명령 텍스트를 실행하는 동안 오류가 발생했습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.CommandBehavior" /> 값이 잘못되었습니다.</exception>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalar">
      <summary>파생 클래스에서 재정의되는 경우 쿼리를 실행하고 쿼리에서 반환된 결과 집합의 첫 번째 행의 첫 번째 열을 반환합니다. 다른 모든 열과 행은 무시됩니다.</summary>
      <returns>결과 집합의 첫 번째 행의 첫 번째 열을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalarAsync">
      <summary>쿼리를 실행하고 쿼리에서 반환된 결과 집합의 첫 번째 행의 첫 번째 열을 반환하는 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />의 비동기 버전입니다. 다른 모든 열과 행은 무시됩니다.  
  
CancellationToken.None을 사용하여 <see cref="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)" />를 호출합니다.</summary>
      <exception cref="T:System.Data.Common.DbException">명령 텍스트를 실행하는 동안 오류가 발생했습니다.</exception>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.ExecuteScalarAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" />의 비동기 버전입니다. 공급자는 적절한 구현을 재정의해야 합니다. 취소 토큰은 선택적으로 무시될 수 있습니다.  
  
기본 구현은 동기 <see cref="M:System.Data.Common.DbCommand.ExecuteScalar" /> 메서드를 호출하고, 호출 스레드를 차단하면서 완료된 작업을 반환합니다. 기본 구현은 이미 취소된 취소 토큰을 전달하는 경우 취소된 작업을 반환합니다. ExecuteScalar에서 throw되는 예외는 반환된 Task Exception 속성을 통해 전달됩니다.  
  
반환된 작업이 완료될 때까지 <see langword="DbCommand" /> 개체의 다른 메서드 및 속성을 호출하지 마십시오.</summary>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 토큰입니다.</param>
      <exception cref="T:System.Data.Common.DbException">명령 텍스트를 실행하는 동안 오류가 발생했습니다.</exception>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.Prepare">
      <summary>파생 클래스에서 재정의되는 경우 데이터 소스에 대해 명령의 준비된(또는 컴파일된) 버전을 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbCommand.PrepareAsync(System.Threading.CancellationToken)">
      <summary>데이터 소스에 대해 명령의 준비된(또는 컴파일된) 버전을 비동기적으로 만듭니다.</summary>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 선택적 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 작업을 나타내는 <see cref="T:System.Threading.Tasks.Task" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#CreateParameter">
      <summary>
        <see cref="T:System.Data.IDbDataParameter" /> 개체의 새 인스턴스를 만듭니다.</summary>
      <returns>
        <see langword="IDbDataParameter" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader">
      <summary>
        <see cref="P:System.Data.IDbCommand.Connection" />에 대해 <see cref="P:System.Data.IDbCommand.CommandText" />를 실행하고 <see cref="T:System.Data.IDataReader" />를 빌드합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommand.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
      <summary>
        <see cref="P:System.Data.IDbCommand.Connection" />에 대해 <see cref="P:System.Data.IDbCommand.CommandText" />를 실행하고 <see cref="T:System.Data.CommandBehavior" /> 값 중 하나를 사용하여 <see cref="T:System.Data.IDataReader" />를 빌드합니다.</summary>
      <param name="behavior">명령 동작을 지정하는 열거형 값 중 하나입니다.</param>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandText">
      <summary>파생 클래스에서 재정의되는 경우 데이터 소스에 대해 실행할 텍스트 명령을 가져오거나 설정합니다.</summary>
      <returns>실행할 텍스트 명령입니다. 기본값은 빈 문자열("")입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandTimeout">
      <summary>파생 클래스에서 재정의되는 경우 명령 실행을 종료하고 오류를 생성하기 전 대기 시간(초 단위)을 가져오거나 설정합니다.</summary>
      <returns>명령이 실행될 때까지 대기하는 시간(초)입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.CommandType">
      <summary>파생 클래스에서 재정의되는 경우 <see cref="P:System.Data.Common.DbCommand.CommandText" /> 속성을 해석하는 방법을 가져오거나 설정합니다.</summary>
      <returns>명령 문자열을 해석 하는 방법을 지정 하는 열거형 값 중 하나입니다. 기본값은 <see langword="Text" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Connection">
      <summary>이 <see cref="T:System.Data.Common.DbConnection" />에서 사용하는 <see cref="T:System.Data.Common.DbCommand" />을 가져오거나 설정합니다.</summary>
      <returns>데이터 원본에 대한 연결입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbConnection">
      <summary>파생 클래스에서 재정의되는 경우 이 <see cref="T:System.Data.Common.DbCommand" />에 사용되는 <see cref="T:System.Data.Common.DbConnection" />을 가져오거나 설정합니다.</summary>
      <returns>데이터 원본에 대한 연결입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbParameterCollection">
      <summary>파생 클래스에서 재정의되는 경우 <see cref="T:System.Data.Common.DbParameter" /> 개체의 컬렉션을 가져옵니다.</summary>
      <returns>SQL 문 또는 저장 프로시저의 매개 변수</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DbTransaction">
      <summary>파생 클래스에서 재정의되는 경우 이 <see cref="T:System.Data.Common.DbCommand" /> 개체가 실행되는 <see cref="P:System.Data.Common.DbCommand.DbTransaction" />을 가져오거나 설정합니다.</summary>
      <returns>.NET 데이터 공급자의 명령 개체가 실행 되는 트랜잭션입니다. 기본값은 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.DesignTimeVisible">
      <summary>파생 클래스에서 재정의되는 경우 명령 개체를 사용자 지정된 인터페이스 제어에서 표시할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>명령 개체를 컨트롤에 표시해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Parameters">
      <summary>
        <see cref="T:System.Data.Common.DbParameter" /> 개체의 컬렉션을 가져옵니다. 매개 변수에 대한 자세한 내용은 매개 변수 및 매개 변수 데이터 형식 구성을 참조하세요.</summary>
      <returns>SQL 문 또는 저장 프로시저의 매개 변수</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Connection">
      <summary>
        <see cref="T:System.Data.IDbCommand" />의 이 인스턴스에서 사용되는 <see cref="T:System.Data.IDbConnection" />을 가져오거나 설정합니다.</summary>
      <returns>데이터 원본에 대한 연결입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Parameters">
      <summary>
        <see cref="T:System.Data.IDataParameterCollection" />를 가져옵니다.</summary>
      <returns>SQL 문 또는 저장 프로시저의 매개 변수</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.System#Data#IDbCommand#Transaction">
      <summary>이 <see cref="T:System.Data.Common.DbCommand" /> 개체를 실행할 <see cref="P:System.Data.Common.DbCommand.DbTransaction" />을 가져오거나 설정합니다.</summary>
      <returns>.NET Framework 데이터 공급자의 <see langword="Command" /> 개체가 실행되는 트랜잭션입니다. 기본값은 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.Transaction">
      <summary>이 <see cref="T:System.Data.Common.DbCommand" /> 개체를 실행할 <see cref="T:System.Data.Common.DbTransaction" />을 가져오거나 설정합니다.</summary>
      <returns>.NET Framework 데이터 공급자의 <see langword="Command" /> 개체가 실행되는 트랜잭션입니다. 기본값은 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommand.UpdatedRowSource">
      <summary>파생 클래스에서 재정의되는 경우 <see cref="T:System.Data.Common.DbDataAdapter" />의 Update 메서드에서 사용될 때 명령 결과가 <see cref="T:System.Data.DataRow" />에 적용되는 방법을 가져오거나 설정합니다.</summary>
      <returns>명령 결과가 적용 되는 방법을 나타내는 열거형 값 중 하나입니다. 명령이 자동으로 생성되지 않으면 기본값은 <see langword="Both" />입니다. 그러면 기본값은 <see langword="None" />입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbCommandBuilder">
      <summary>관련 데이터베이스를 사용하여 <see cref="T:System.Data.DataSet" />에 변경한 내용을 조정하는 데 사용되는 단일 테이블 명령을 자동으로 생성합니다. 이 클래스는 상속될 수만 있는 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> 클래스에서 상속하는 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> 클래스의 공급자 구현에서 추가 매개 변수 속성을 처리할 수 있도록 합니다.</summary>
      <param name="parameter">추가 수정 사항이 적용될 <see cref="T:System.Data.Common.DbParameter" />입니다.</param>
      <param name="row">
        <see cref="T:System.Data.DataRow" />에서 제공하는 스키마 테이블의 <see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" />입니다.</param>
      <param name="statementType">생성되는 명령의 형식인 INSERT, UPDATE 또는 DELETE입니다.</param>
      <param name="whereClause">매개 변수가 WHERE 절을 업데이트하거나 삭제하는 데 사용되면 <see langword="true" />이고, 값을 삽입하거나 업데이트하는 데 사용되면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand">
      <summary>데이터 소스에서 삭제하는 데 필요한 자동으로 생성된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 가져옵니다.</summary>
      <returns>삭제하는 데 필요한 자동으로 생성된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)">
      <summary>선택적으로 매개 변수 이름에 열을 사용하여 데이터 소스에서 삭제하는 데 필요한 자동으로 생성된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 가져옵니다.</summary>
      <param name="useColumnsForParameterNames">
        <see langword="true" />인 경우 가능하면 열 이름과 일치하는 매개 변수 이름을 생성합니다. <see langword="false" />이면 <c>@p1</c>, <c>@p2</c> 등을 생성합니다.</param>
      <returns>삭제하는 데 필요한 자동으로 생성된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetInsertCommand">
      <summary>데이터 소스에서 삽입하는 데 필요한 자동으로 생성된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 가져옵니다.</summary>
      <returns>삽입하는 데 필요한 자동으로 생성된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)">
      <summary>선택적으로 매개 변수 이름에 열을 사용하여 데이터 소스에서 삽입하는 데 필요한 자동으로 생성된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 가져옵니다.</summary>
      <param name="useColumnsForParameterNames">
        <see langword="true" />인 경우 가능하면 열 이름과 일치하는 매개 변수 이름을 생성합니다. <see langword="false" />이면 <c>@p1</c>, <c>@p2</c> 등을 생성합니다.</param>
      <returns>삽입하는 데 필요한 자동으로 생성된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)">
      <summary>
        <c>@p#</c> 형식으로 지정된 매개 변수의 이름을 반환합니다. 사용자 지정 명령 작성기를 만들 때 사용합니다.</summary>
      <param name="parameterOrdinal">매개 변수 이름의 일부로 포함될 수입니다.</param>
      <returns>매개 변수 이름의 일부로 지정된 수가 추가된 매개 변수 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterName(System.String)">
      <summary>부분 매개 변수 이름이 제공된 경우 전체 매개 변수 이름을 반환합니다.</summary>
      <param name="parameterName">매개 변수의 부분 이름입니다.</param>
      <returns>요청된 부분 매개 변수 이름에 해당하는 전체 매개 변수 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)">
      <summary>연결된 SQL 문에서 매개 변수의 자리 표시자를 반환합니다.</summary>
      <param name="parameterOrdinal">매개 변수 이름의 일부로 포함될 수입니다.</param>
      <returns>지정된 수가 추가된 매개 변수 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" />의 스키마 테이블을 반환합니다.</summary>
      <param name="sourceCommand">해당 스키마 테이블을 검색할 <see cref="T:System.Data.Common.DbCommand" />입니다.</param>
      <returns>특정 <see cref="T:System.Data.DataTable" />의 스키마를 나타내는 <see cref="T:System.Data.Common.DbCommand" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand">
      <summary>데이터 소스에서 업데이트하는 데 필요한 자동으로 생성된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 가져옵니다.</summary>
      <returns>업데이트하는 데 필요한 자동으로 생성된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)">
      <summary>선택적으로 매개 변수 이름에 열을 사용하여 데이터 소스에서 업데이트하는 데 필요한 자동으로 생성된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 가져옵니다.</summary>
      <param name="useColumnsForParameterNames">
        <see langword="true" />인 경우 가능하면 열 이름과 일치하는 매개 변수 이름을 생성합니다. <see langword="false" />이면 <c>@p1</c>, <c>@p2</c> 등을 생성합니다.</param>
      <returns>업데이트하는 데 필요한 자동으로 생성된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)">
      <summary>
        <see cref="P:System.Data.Common.DbCommand.CommandTimeout" />에 대한 <see cref="P:System.Data.Common.DbCommand.Transaction" />, <see cref="P:System.Data.Common.DbCommand.CommandType" />, <see cref="T:System.Data.UpdateRowSource" /> 및 <see cref="T:System.Data.Common.DbCommand" /> 속성을 다시 설정합니다.</summary>
      <param name="command">명령 작성기가 해당하는 삽입, 업데이트 또는 삭제 명령에 사용할 <see cref="T:System.Data.Common.DbCommand" />입니다.</param>
      <returns>각각의 삽입, 업데이트 또는 삭제 작업에 사용할 <see cref="T:System.Data.Common.DbCommand" /> 인스턴스입니다. null 값을 전달하면 <see cref="M:System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)" /> 메서드에서 <see cref="T:System.Data.Common.DbCommand" />와 연결된 Select 명령에 따라 <see cref="T:System.Data.Common.DbCommandBuilder" /> 개체를 만들 수 있습니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)">
      <summary>올바른 카탈로그 대/소문자로 따옴표 붙지 않은 식별자가 제공되는 경우 따옴표 붙은 올바른 형식의 해당 식별자를 반환합니다. 여기에는 식별자에 포함된 모든 따옴표를 이스케이프하는 작업이 포함됩니다.</summary>
      <param name="unquotedIdentifier">따옴표 붙지 않은 원래 식별자입니다.</param>
      <returns>따옴표를 사용한 식별자입니다. 식별자에 포함된 따옴표가 올바르게 이스케이프되었습니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.RefreshSchema">
      <summary>이 <see cref="T:System.Data.Common.DbCommandBuilder" />와 연결된 명령을 지웁니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)">
      <summary>
        <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 이벤트에 대한 이벤트 처리기를 추가합니다.</summary>
      <param name="rowUpdatingEvent">이벤트에 대한 정보를 포함하는 <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" />에 대한 <see cref="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" /> 이벤트를 처리하기 위해 <see cref="T:System.Data.Common.DbDataAdapter" />를 등록합니다.</summary>
      <param name="adapter">업데이트에 사용할 <see cref="T:System.Data.Common.DbDataAdapter" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)">
      <summary>따옴표 붙은 식별자가 제공되는 경우 따옴표 붙지 않은 올바른 형식의 해당 식별자를 반환합니다. 여기에는 식별자에 포함된 모든 따옴표를 이스케이프 해제하는 작업이 포함됩니다.</summary>
      <param name="quotedIdentifier">포함된 따옴표를 제거할 식별자입니다.</param>
      <returns>포함된 따옴표가 이스케이프 해제된, 따옴표 붙지 않은 식별자입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.CatalogLocation">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> 클래스의 인스턴스에 대한 <see cref="T:System.Data.Common.CatalogLocation" />을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.CatalogLocation" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.CatalogSeparator">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> 클래스의 인스턴스에 대한 카탈로그 구분 기호로 사용되는 문자열을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> 클래스의 인스턴스에서 사용할 카탈로그 구분 기호를 나타내는 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.ConflictOption">
      <summary>
        <see cref="T:System.Data.ConflictOption" />가 사용할 <see cref="T:System.Data.Common.DbCommandBuilder" />을 지정합니다.</summary>
      <returns>이 <see cref="T:System.Data.ConflictOption" />의 동작을 설명하는 <see cref="T:System.Data.Common.DbCommandBuilder" /> 값 중 하나를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.DataAdapter">
      <summary>Transact-SQL 문을 자동으로 생성할 <see cref="T:System.Data.Common.DbDataAdapter" /> 개체를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataAdapter" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.QuotePrefix">
      <summary>이름에 공백 또는 예약된 토큰과 같은 문자가 포함된 데이터베이스 개체(예: 테이블 또는 열)를 지정할 때 사용할 시작 문자를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">삽입, 업데이트 또는 삭제 명령이 생성된 후에 이 속성을 변경할 수 없는 경우</exception>
      <returns>사용할 시작 문자입니다. 기본값은 빈 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.QuoteSuffix">
      <summary>이름에 공백 또는 예약된 토큰과 같은 문자가 포함된 데이터베이스 개체(예: 테이블 또는 열)를 지정할 때 사용할 끝 문자를 가져오거나 설정합니다.</summary>
      <returns>사용할 끝 문자입니다. 기본값은 빈 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.SchemaSeparator">
      <summary>스키마 식별자와 다른 식별자 간의 구분 기호로 사용할 문자를 가져오거나 설정합니다.</summary>
      <returns>스키마 구분 기호로 사용할 문자입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbCommandBuilder.SetAllValues">
      <summary>UPDATE 문에 모든 열 값이 포함되어 있는지 아니면 변경된 열 값만 포함되어 있는지를 지정합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommandBuilder" />가 생성한 UPDATE 문에 모든 열이 포함되면 <see langword="true" />이고, 변경된 열만 포함되면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbConnection">
      <summary>데이터베이스 연결의 핵심 동작을 정의하고 데이터베이스 관련 연결에 대한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="E:System.Data.Common.DbConnection.StateChange">
      <summary>연결 상태가 변경될 때 발생합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbConnection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>파생 클래스에서 재정의되는 경우 데이터베이스 트랜잭션을 시작합니다.</summary>
      <param name="isolationLevel">사용할 트랜잭션의 격리 수준을 지정하는 열거형 값 중 하나입니다.</param>
      <returns>새 트랜잭션을 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginDbTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
      <summary>데이터베이스 트랜잭션을 비동기적으로 시작합니다.</summary>
      <param name="isolationLevel">사용할 트랜잭션의 격리 수준을 지정하는 열거형 값 중 하나입니다.</param>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 토큰입니다.</param>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성이 새 트랜잭션을 나타내는 개체인 작업입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransaction">
      <summary>데이터베이스 트랜잭션을 시작합니다.</summary>
      <returns>새 트랜잭션을 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>지정된 격리 수준으로 데이터베이스 트랜잭션을 시작합니다.</summary>
      <param name="isolationLevel">사용할 트랜잭션의 격리 수준을 지정하는 열거형 값 중 하나입니다.</param>
      <returns>새 트랜잭션을 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Data.IsolationLevel,System.Threading.CancellationToken)">
      <summary>비동기적으로 데이터베이스 트랜잭션을 시작합니다.</summary>
      <param name="isolationLevel">사용할 트랜잭션의 격리 수준을 지정하는 열거형 값 중 하나입니다.</param>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 선택적 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성이 새 트랜잭션을 나타내는 개체인 작업입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.BeginTransactionAsync(System.Threading.CancellationToken)">
      <summary>비동기적으로 데이터베이스 트랜잭션을 시작합니다.</summary>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 선택적 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성이 새 트랜잭션을 나타내는 개체인 작업입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.ChangeDatabase(System.String)">
      <summary>파생 클래스에서 재정의되는 경우 열려 있는 연결의 현재 데이터베이스를 변경합니다.</summary>
      <param name="databaseName">사용할 연결의 데이터베이스 이름입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.ChangeDatabaseAsync(System.String,System.Threading.CancellationToken)">
      <summary>열려 있는 연결의 현재 데이터베이스를 비동기적으로 변경합니다.</summary>
      <param name="databaseName">사용할 연결의 데이터베이스 이름입니다.</param>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 선택적 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.Close">
      <summary>파생 클래스에서 재정의되는 경우 데이터베이스에 대한 연결을 닫습니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.CloseAsync">
      <summary>데이터베이스에 대한 연결을 비동기적으로 닫습니다.</summary>
      <returns>비동기 작업을 나타내는 <see cref="T:System.Threading.Tasks.Task" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.CreateCommand">
      <summary>현재 연결과 관련된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 만들고 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.CreateDbCommand">
      <summary>파생 클래스에서 재정의되는 경우 현재 연결과 관련된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 만들고 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.DisposeAsync">
      <summary>연결 개체를 비동기적으로 삭제합니다.</summary>
      <returns>비동기 작업을 나타내는 <see cref="T:System.Threading.Tasks.ValueTask" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>지정된 트랜잭션에 참여합니다.</summary>
      <param name="transaction">등록할 기존 <see cref="T:System.Transactions.Transaction" />에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema">
      <summary>이 <see cref="T:System.Data.Common.DbConnection" />의 데이터 소스에 대한 구성표 정보를 반환합니다.</summary>
      <returns>스키마 정보를 포함하는 A <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema(System.String)">
      <summary>스키마 이름에 대해 지정된 문자열을 사용하여 이 <see cref="T:System.Data.Common.DbConnection" />의 데이터 소스에 대한 스키마 정보를 반환합니다.</summary>
      <param name="collectionName">반환할 스키마의 이름을 지정합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" />이 null로 지정되어 있습니다.</exception>
      <returns>스키마 정보를 포함하는 A <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])">
      <summary>스키마 이름에 대해 지정된 문자열과 제한 값에 대해 지정된 문자열 배열을 사용하여 이 <see cref="T:System.Data.Common.DbConnection" />의 데이터 소스에 대한 스키마 정보를 반환합니다.</summary>
      <param name="collectionName">반환할 스키마의 이름을 지정합니다.</param>
      <param name="restrictionValues">요청된 스키마에 대한 제한 값의 집합을 지정합니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionName" />이 null로 지정되어 있습니다.</exception>
      <returns>스키마 정보를 포함하는 A <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchemaAsync(System.String,System.String[],System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])" />의 비동기 버전입니다.
공급자는 적절한 구현을 재정의해야 합니다.
<paramref name="cancellationToken" />을 선택적으로 적용할 수 있습니다.
기본 구현은 동기 <see cref="M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])" /> 호출을 호출하고 완료된 작업을 반환합니다.
기본 구현은 이미 취소된 <paramref name="cancellationToken" />을 전달하는 경우 취소된 작업을 반환합니다.
<see cref="M:System.Data.Common.DbConnection.GetSchema(System.String,System.String[])" />에서 throw되는 예외는 반환된 Task Exception 속성을 통해 전달됩니다.</summary>
      <param name="collectionName">반환할 스키마의 이름을 지정합니다.</param>
      <param name="restrictionValues">요청된 스키마에 대한 제한 값의 집합을 지정합니다.</param>
      <param name="cancellationToken">취소 명령입니다.</param>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchemaAsync(System.String,System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.Common.DbConnection.GetSchema(System.String)" />의 비동기 버전입니다.
공급자는 적절한 구현을 재정의해야 합니다.
<paramref name="cancellationToken" />을 선택적으로 적용할 수 있습니다.
기본 구현은 동기 <see cref="M:System.Data.Common.DbConnection.GetSchema(System.String)" /> 호출을 호출하고 완료된 작업을 반환합니다.
기본 구현은 이미 취소된 <paramref name="cancellationToken" />을 전달하는 경우 취소된 작업을 반환합니다.
<see cref="M:System.Data.Common.DbConnection.GetSchema(System.String)" />에서 throw되는 예외는 반환된 Task Exception 속성을 통해 전달됩니다.</summary>
      <param name="collectionName">반환할 스키마의 이름을 지정합니다.</param>
      <param name="cancellationToken">취소 명령입니다.</param>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.GetSchemaAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.Common.DbConnection.GetSchema" />의 비동기 버전입니다.
공급자는 적절한 구현을 재정의해야 합니다.
<paramref name="cancellationToken" />을 선택적으로 적용할 수 있습니다.
기본 구현은 동기 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 호출을 호출하고 완료된 작업을 반환합니다.
기본 구현은 이미 취소된 <paramref name="cancellationToken" />을 전달하는 경우 취소된 작업을 반환합니다.
<see cref="M:System.Data.Common.DbConnection.GetSchema" />에서 throw되는 예외는 반환된 Task Exception 속성을 통해 전달됩니다.</summary>
      <param name="cancellationToken">취소 명령입니다.</param>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.Common.DbConnection.StateChange" /> 이벤트를 발생시킵니다.</summary>
      <param name="stateChange">이벤트 데이터를 포함하는 <see cref="T:System.Data.StateChangeEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbConnection.Open">
      <summary>파생 클래스에서 재정의되는 경우 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />으로 지정된 설정을 사용하여 데이터베이스 연결을 엽니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbConnection.OpenAsync">
      <summary>
        <see cref="M:System.Data.Common.DbConnection.Open" />으로 지정된 설정을 사용하여 데이터베이스 연결을 여는 <see cref="P:System.Data.Common.DbConnection.ConnectionString" />의 비동기 버전입니다. 이 메서드는 CancellationToken.None을 사용하여 가상 메서드 <see cref="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)" />를 호출합니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.Common.DbConnection.Open" />의 비동기 버전입니다. 공급자는 적절한 구현을 재정의해야 합니다. 취소 토큰은 선택적으로 적용될 수 있습니다.  
  
기본 구현은 동기 <see cref="M:System.Data.Common.DbConnection.Open" /> 호출을 호출하고 완료된 작업을 반환합니다. 기본 구현은 이미 취소된 cancellationToken을 전달하는 경우 취소된 작업을 반환합니다. Open에서 throw되는 예외는 반환된 Task Exception 속성을 통해 전달됩니다.  
  
반환된 작업이 완료될 때까지 <see langword="DbConnection" /> 개체의 다른 메서드 및 속성을 호출하지 마십시오.</summary>
      <param name="cancellationToken">취소 명령입니다.</param>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction">
      <summary>데이터베이스 트랜잭션을 시작합니다.</summary>
      <returns>새 트랜잭션을 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)">
      <summary>지정된 격리 수준으로 데이터베이스 트랜잭션을 시작합니다.</summary>
      <param name="isolationLevel">사용할 트랜잭션의 격리 수준을 지정하는 열거형 값 중 하나입니다.</param>
      <returns>새 트랜잭션을 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand">
      <summary>현재 연결과 관련된 <see cref="T:System.Data.Common.DbCommand" /> 개체를 만들고 반환합니다.</summary>
      <returns>연결과 관련된 <see cref="T:System.Data.Common.DbCommand" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ConnectionString">
      <summary>파생 클래스에서 재정의되는 경우 연결을 여는 데 사용되는 문자열을 가져오거나 설정합니다.</summary>
      <returns>초기 연결을 설정하는 데 사용되는 연결 문자열입니다. 연결 문자열의 정확한 내용은 이 연결의 특정 데이터 소스에 따라 달라집니다. 기본값은 빈 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ConnectionTimeout">
      <summary>시도를 종료하고 오류를 생성하기 전까지 연결하기 위해 대기할 시간(초 단위)을 가져옵니다.</summary>
      <returns>연결이 열리기 전까지 대기할 시간(초)입니다. 기본값은 사용하고 있는 특정 형식의 연결에 따라 결정됩니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.Database">
      <summary>파생 클래스에서 재정의되는 경우 연결이 열린 후에 현재 데이터베이스의 이름을 가져오거나 연결이 열리기 전에 연결 문자열에 지정된 데이터베이스 이름을 가져옵니다.</summary>
      <returns>현재 데이터베이스 이름이나 연결이 열린 후 사용할 데이터베이스의 이름입니다. 기본값은 빈 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.DataSource">
      <summary>파생 클래스에서 재정의되는 경우 연결할 데이터베이스 서버의 이름을 가져옵니다.</summary>
      <returns>연결할 데이터베이스 서버의 이름입니다. 기본값은 빈 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.DbProviderFactory">
      <summary>이 <see cref="T:System.Data.Common.DbProviderFactory" />의 <see cref="T:System.Data.Common.DbConnection" />를 가져옵니다.</summary>
      <returns>데이터 소스 클래스의 공급자 구현에 대한 인스턴스를 만드는 데 사용되는 메서드의 집합입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.ServerVersion">
      <summary>파생 클래스에서 재정의되는 경우 개체가 연결된 서버의 버전을 나타내는 문자열을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="Overload:System.Data.Common.DbConnection.OpenAsync" /> 호출 후에 반환된 작업이 완료되지 않았고 연결이 열려 있지 않은 상태에서 <see cref="P:System.Data.Common.DbConnection.ServerVersion" />이 호출되었습니다.</exception>
      <returns>데이터베이스의 버전입니다. 반환되는 문자열 형식은 사용하고 있는 특정 형식의 연결에 따라 달라집니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnection.State">
      <summary>연결의 상태를 설명하는 문자열을 가져옵니다.</summary>
      <returns>연결의 상태입니다. 반환되는 문자열 형식은 사용하고 있는 특정 형식의 연결에 따라 달라집니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbConnectionStringBuilder">
      <summary>강력한 형식의 연결 문자열 작성기에 대한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.#ctor(System.Boolean)">
      <summary>필요에 따라 값을 인용할 때 ODBC 규칙을 사용하여 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="useOdbcRules">{}를 사용하여 필드를 구분하려면 <see langword="true" />이고, 큰따옴표를 사용하려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)">
      <summary>지정한 키와 값을 가지는 엔트리를 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />에 추가합니다.</summary>
      <param name="keyword">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" />에 추가할 키입니다.</param>
      <param name="value">지정된 키의 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" />이 읽기 전용인 경우

또는

<see cref="T:System.Data.Common.DbConnectionStringBuilder" />가 고정 크기입니다.</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)">
      <summary>기존 <see cref="T:System.Text.StringBuilder" /> 개체에 키 및 값을 효율적이고 안전한 방법으로 추가할 수 있도록 합니다.</summary>
      <param name="builder">키/값 쌍을 추가할 <see cref="T:System.Text.StringBuilder" />입니다.</param>
      <param name="keyword">추가할 키입니다.</param>
      <param name="value">제공된 키의 값입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String,System.Boolean)">
      <summary>기존 <see cref="T:System.Text.StringBuilder" /> 개체에 키 및 값을 효율적이고 안전한 방법으로 추가할 수 있도록 합니다.</summary>
      <param name="builder">키/값 쌍을 추가할 <see cref="T:System.Text.StringBuilder" />입니다.</param>
      <param name="keyword">추가할 키입니다.</param>
      <param name="value">제공된 키의 값입니다.</param>
      <param name="useOdbcRules">{}를 사용하여 필드를 구분하려면 <see langword="true" />이고, 큰따옴표를 사용하려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Clear">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 인스턴스의 콘텐츠를 지웁니다.</summary>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" />이 읽기 전용인 경우</exception>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ClearPropertyDescriptors">
      <summary>연결된 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />에서 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 컬렉션을 지웁니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ContainsKey(System.String)">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" />에 특정 키가 들어 있는지 여부를 확인합니다.</summary>
      <param name="keyword">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" />에서 찾을 수 있는 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
      <returns>지정된 키가 있는 항목이 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />에 포함되어 있으면 <see langword="true" />이고, 포함되지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)">
      <summary>이 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 개체의 연결 정보를 제공된 개체의 연결 정보와 비교합니다.</summary>
      <param name="connectionStringBuilder">이 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 개체와 비교할 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 입니다.</param>
      <returns>두<see langword="true" /> 개체의 연결 정보가 동일한 연결 문자열을 발생하면 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.GetProperties(System.Collections.Hashtable)">
      <summary>제공된 <see cref="T:System.Collections.Hashtable" /> 을 이 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />의 모든 속성에 대한 정보로 채웁니다.</summary>
      <param name="propertyDescriptors">이 <see cref="T:System.Collections.Hashtable" /> 에 대한 정보로 채울 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.Remove(System.String)">
      <summary>지정된 키를 가진 항목을 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 인스턴스에서 제거합니다.</summary>
      <param name="keyword">이 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />의 연결 문자열에서 제거할 키/값 쌍의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" />가 null(Visual Basic에서는 <see langword="Nothing" />)입니다.</exception>
      <exception cref="T:System.NotSupportedException">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 가 읽기 전용이거나 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 가 고정된 크기입니다.</exception>
      <returns>연결 문자열에 키가 존재하여 이를 제거했으면 <see langword="true" />이고, 키가 존재하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 인스턴스에 지정된 키가 있는지 여부를 나타냅니다.</summary>
      <param name="keyword">
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" />에서 찾을 수 있는 키입니다.</param>
      <returns>지정된 키가 있는 항목이 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />에 포함되어 있으면 <see langword="true" />이고, 포함되지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary>제공된 키와 값을 가진 요소를 <see cref="T:System.Collections.IDictionary" /> 개체에 추가합니다.</summary>
      <param name="keyword">추가할 요소의 키로 사용하는 <see cref="T:System.Object" />입니다.</param>
      <param name="value">추가할 요소의 값으로 사용하는 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> 개체에 지정한 키를 가진 요소가 포함되어 있는지 여부를 결정합니다.</summary>
      <param name="keyword">
        <see cref="T:System.Collections.IDictionary" /> 개체에서 찾을 키입니다.</param>
      <returns>
        <see langword="true" />에 해당 키가 있는 요소가 포함되어 있으면 <see cref="T:System.Collections.IDictionary" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#GetEnumerator">
      <summary>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체의 <see cref="T:System.Collections.IDictionary" /> 개체를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IDictionaryEnumerator" /> 개체의 <see cref="T:System.Collections.IDictionary" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.IDictionary" /> 개체에서 지정한 키를 가지는 요소를 제거합니다.</summary>
      <param name="keyword">제거할 요소의 키입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>해당 구성 요소 인스턴스에 대한 사용자 지정 특성의 컬렉션을 반환합니다.</summary>
      <returns>해당 개체의 특성이 포함된 <see cref="T:System.ComponentModel.AttributeCollection" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>해당 구성 요소 인스턴스의 클래스 이름을 반환합니다.</summary>
      <returns>개체의 클래스 이름이거나, 클래스에 이름이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>해당 구성 요소 인스턴스의 이름을 반환합니다.</summary>
      <returns>개체의 이름이거나, 개체에 이름이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>해당 구성 요소 인스턴스에 대한 형식 변환기를 반환합니다.</summary>
      <returns>해당 개체의 변환기인 <see cref="T:System.ComponentModel.TypeConverter" />이거나, 개체의 <see cref="T:System.ComponentModel.TypeConverter" />가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>해당 구성 요소 인스턴스의 기본 이벤트를 반환합니다.</summary>
      <returns>이 개체의 기본 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 또는, 이 개체에 이벤트가 없으면 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>해당 구성 요소 인스턴스의 기본 속성을 반환합니다.</summary>
      <returns>해당 개체의 기본 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" />이거나, 개체에 속성이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>해당 구성 요소 인스턴스에 대한 지정된 형식의 편집기를 반환합니다.</summary>
      <param name="editorBaseType">해당 개체의 편집기를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>해당 개체의 편집기인 지정된 형식의 <see cref="T:System.Object" />이거나, 편집기를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>해당 구성 요소 인스턴스의 이벤트를 반환합니다.</summary>
      <returns>해당 구성 요소 인스턴스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>지정된 특성 배열을 필터로 사용하여 해당 구성 요소 인스턴스의 이벤트를 반환합니다.</summary>
      <param name="attributes">필터로 사용되는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>해당 구성 요소 인스턴스의 필터링된 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>해당 구성 요소 인스턴스의 속성을 반환합니다.</summary>
      <returns>해당 구성 요소 인스턴스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>특성 배열을 필터로 사용하여 해당 구성 요소 인스턴스의 속성을 반환합니다.</summary>
      <param name="attributes">필터로 사용되는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>해당 구성 요소 인스턴스의 필터링된 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>지정된 속성 설명자가 설명하는 속성이 포함된 개체를 반환합니다.</summary>
      <param name="pd">소유자가 있는 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <returns>지정된 속성의 소유자를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.ToString">
      <summary>이 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />와 연결된 연결 문자열을 반환합니다.</summary>
      <returns>현재 <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 속성입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>이 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />에서 제공된 키에 해당하는 값을 검색합니다.</summary>
      <param name="keyword">검색할 항목의 키입니다.</param>
      <param name="value">
        <paramref name="keyword" />에 해당하는 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" />에 null 값(Visual Basic에서는 <see langword="Nothing" />)이 포함된 경우</exception>
      <returns>연결 문자열에 <paramref name="keyword" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.BrowsableConnectionString">
      <summary>
        <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 속성이 Visual Studio 디자이너에서 표시되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>연결 문자열이 디자이너 내에 표시되는 경우 <see langword="true" />이고, 그러지 않은 경우 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" />와 연결된 연결 문자열을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">잘못된 연결 문자열 인수가 제공되었습니다.</exception>
      <returns>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 내에 포함된 키/값 쌍에서 만든 현재 연결 문자열입니다. 기본값은 빈 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Count">
      <summary>
        <see cref="P:System.Data.Common.DbConnectionStringBuilder.ConnectionString" /> 속성 내에 포함된 키의 현재 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 인스턴스에 의해 유지 관리되는 연결 문자열 내에 포함된 키의 수입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.IsFixedSize">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" />의 크기가 고정되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 의 크기가 고정되어 있으면 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 이고, 고정되지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.IsReadOnly">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 이 읽기 전용이면 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Item(System.String)">
      <summary>지정된 키에 연결된 값을 가져오거나 설정합니다.</summary>
      <param name="keyword">가져오거나 설정할 항목의 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyword" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</exception>
      <exception cref="T:System.NotSupportedException">속성이 설정되어 있으며 <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 가 읽기 전용입니다.

또는

속성이 설정되어 있고 <paramref name="keyword" />가 컬렉션에 없으며 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />의 크기가 고정된 경우</exception>
      <returns>지정한 키와 연결된 값입니다. 지정한 키가 없는 경우 해당 키를 가져오려고 시도하면 null 참조(Visual Basic의<see langword="Nothing" /> )가 반환되고 해당 키를 설정하려고 시도하면 지정한 키를 사용하여 새 요소가 만들어집니다.

null(Visual Basic의<see langword="Nothing" /> ) 키를 전달하면 <see cref="T:System.ArgumentNullException" />이 throw됩니다. null 값을 할당하면 키/값 쌍이 제거됩니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Keys">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />의 키를 포함하는 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#IsSynchronized">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#SyncRoot">
      <summary>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Item(System.Object)">
      <summary>지정한 키를 가진 요소를 가져오거나 설정합니다.</summary>
      <param name="keyword">가져오거나 설정할 요소의 키입니다.</param>
      <returns>지정한 키가 있는 요소입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbConnectionStringBuilder.Values">
      <summary>
        <see cref="T:System.Collections.ICollection" />의 값을 포함하는 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />의 값을 포함하는 <see cref="T:System.Data.Common.DbConnectionStringBuilder" />입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbDataAdapter">
      <summary>
        <see cref="T:System.Data.IDbDataAdapter" /> 인터페이스의 구현을 지원합니다. <see cref="T:System.Data.Common.DbDataAdapter" />의 상속자는 강력한 형식을 제공하기 위한 함수 집합을 구현하지만 DataAdapter를 완전히 구현하는 데 필요한 대부분의 기능을 상속합니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbDataAdapter.DefaultSourceTableName">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" /> 개체에서 테이블 매핑에 사용하는 기본 이름입니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.#ctor">
      <summary>DataAdapter 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.#ctor(System.Data.Common.DbDataAdapter)">
      <summary>같은 형식의 기존 개체에서 <see langword="DataAdapter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="adapter">새 <see langword="DataAdapter" />를 만드는 데 사용되는 <see langword="DataAdapter" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)">
      <summary>현재 일괄 작업에 <see cref="T:System.Data.IDbCommand" />를 추가합니다.</summary>
      <param name="command">일괄 작업에 추가할 <see cref="T:System.Data.IDbCommand" />입니다.</param>
      <exception cref="T:System.NotSupportedException">어댑터에서 일괄 처리를 지원하지 않는 경우</exception>
      <returns>
        <see cref="T:System.Data.IDbCommand" />를 추가하기 전에 일괄 작업에 포함되어 있는 명령 수입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.ClearBatch">
      <summary>일괄 작업에서 <see cref="T:System.Data.IDbCommand" /> 개체를 모두 제거합니다.</summary>
      <exception cref="T:System.NotSupportedException">어댑터에서 일괄 처리를 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
        <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataRow">데이터 소스를 업데이트하는 데 사용된 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 도중에 실행되는 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />입니다.</param>
      <param name="statementType">명령이 UPDATE, INSERT, DELETE 또는 SELECT 문인지 여부입니다.</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 클래스의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
        <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataRow">데이터 소스를 업데이트하는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 도중 실행할 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />입니다.</param>
      <param name="statementType">명령이 UPDATE, INSERT, DELETE 또는 SELECT 문인지 여부입니다.</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 클래스의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DbDataAdapter" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.ExecuteBatch">
      <summary>현재 일괄 작업을 실행합니다.</summary>
      <returns>일괄 작업에 있는 마지막 명령의 반환 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)">
      <summary>
        <see cref="T:System.Data.DataSet" />의 행을 추가하거나 새로 고칩니다.</summary>
      <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 <see cref="T:System.Data.DataSet" />입니다.</param>
      <returns>
        <see cref="T:System.Data.DataSet" />에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)">
      <summary>
        <see cref="T:System.Data.DataSet" />과 <see cref="T:System.Data.DataSet" /> 이름을 사용하여 지정된 범위에서 데이터 소스의 행과 일치하도록 <see cref="T:System.Data.DataTable" />의 행을 추가하거나 새로 고칩니다.</summary>
      <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 <see cref="T:System.Data.DataSet" />입니다.</param>
      <param name="startRecord">0부터 시작되는 시작 레코드 번호입니다.</param>
      <param name="maxRecords">검색할 수 있는 최대 레코드 수입니다.</param>
      <param name="srcTable">테이블 매핑에 사용할 원본 테이블의 이름입니다.</param>
      <exception cref="T:System.SystemException">
        <see cref="T:System.Data.DataSet" />가 잘못되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">소스 테이블이 잘못된 경우  
  
 또는  
  
 연결이 잘못된 경우</exception>
      <exception cref="T:System.InvalidCastException">연결을 찾을 수 없는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 매개 변수가 0보다 작은 경우  
  
또는 
<paramref name="maxRecords" /> 매개 변수가 0보다 작은 경우</exception>
      <returns>
        <see cref="T:System.Data.DataSet" />에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>
        <see cref="T:System.Data.DataSet" />과 소스 테이블 이름, 명령 문자열과 명령 동작을 사용하여 지정된 범위에서 데이터 소스의 행과 일치하도록 <see cref="T:System.Data.DataSet" />의 행을 추가하거나 새로 고칩니다.</summary>
      <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 <see cref="T:System.Data.DataSet" />입니다.</param>
      <param name="startRecord">0부터 시작되는 시작 레코드 번호입니다.</param>
      <param name="maxRecords">검색할 수 있는 최대 레코드 수입니다.</param>
      <param name="srcTable">테이블 매핑에 사용할 원본 테이블의 이름입니다.</param>
      <param name="command">데이터 소스에서 행을 검색하는 데 사용할 SQL SELECT 문입니다.</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 값 중 하나입니다.</param>
      <exception cref="T:System.InvalidOperationException">소스 테이블이 잘못된 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 매개 변수가 0보다 작은 경우  
  
또는 
<paramref name="maxRecords" /> 매개 변수가 0보다 작은 경우</exception>
      <returns>
        <see cref="T:System.Data.DataSet" />에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)">
      <summary>
        <see cref="T:System.Data.DataSet" />과 <see cref="T:System.Data.DataSet" /> 이름을 사용하여 데이터 소스의 행과 일치하도록 <see cref="T:System.Data.DataTable" />의 행을 추가하거나 새로 고칩니다.</summary>
      <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 <see cref="T:System.Data.DataSet" />입니다.</param>
      <param name="srcTable">테이블 매핑에 사용할 원본 테이블의 이름입니다.</param>
      <exception cref="T:System.SystemException">소스 테이블이 잘못된 경우</exception>
      <returns>
        <see cref="T:System.Data.DataSet" />에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 이름을 사용하여 지정된 범위에서 데이터 소스의 행과 일치하도록 <see cref="T:System.Data.DataTable" />의 행을 추가하거나 새로 고칩니다.</summary>
      <param name="dataTable">테이블 매핑에 사용할 <see cref="T:System.Data.DataTable" />의 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">소스 테이블이 잘못된 경우</exception>
      <returns>
        <see cref="T:System.Data.DataSet" />에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />, <see cref="T:System.Data.DataTable" /> 및 <see cref="T:System.Data.IDbCommand" />를 사용하여 데이터 소스의 행과 일치하도록 <see cref="T:System.Data.CommandBehavior" />의 행을 추가하거나 새로 고칩니다.</summary>
      <param name="dataTable">레코드와 스키마(필요한 경우)로 채울 <see cref="T:System.Data.DataTable" />입니다.</param>
      <param name="command">데이터 소스에서 행을 검색하는 데 사용할 SQL SELECT 문입니다.</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 값 중 하나입니다.</param>
      <returns>
        <see cref="T:System.Data.DataTable" />에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>
        <see cref="T:System.Data.DataSet" />과 <see cref="T:System.Data.DataSet" /> 이름을 사용하여 지정된 범위에서 데이터 소스의 행과 일치하도록 <see cref="T:System.Data.DataTable" />의 행을 추가하거나 새로 고칩니다.</summary>
      <param name="dataTables">데이터 소스에서 채울 <see cref="T:System.Data.DataTable" /> 개체입니다.</param>
      <param name="startRecord">0부터 시작되는 시작 레코드 번호입니다.</param>
      <param name="maxRecords">검색할 수 있는 최대 레코드 수입니다.</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" /> 개체를 채우기 위해 실행되는 <see cref="T:System.Data.DataTable" />입니다.</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 값 중 하나입니다.</param>
      <exception cref="T:System.SystemException">
        <see cref="T:System.Data.DataSet" />가 잘못되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">소스 테이블이 잘못된 경우  
  
 또는  
  
 연결이 잘못된 경우</exception>
      <exception cref="T:System.InvalidCastException">연결을 찾을 수 없는 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="startRecord" /> 매개 변수가 0보다 작은 경우  
  
또는 
<paramref name="maxRecords" /> 매개 변수가 0보다 작은 경우</exception>
      <returns>데이터 테이블에서 추가되거나 새로 고쳐진 행의 수입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])">
      <summary>지정된 레코드에서 시작하여 지정된 최대 레코드 수까지 검색하면서 데이터 소스의 행과 일치하도록 <see cref="T:System.Data.DataTable" />의 행을 추가하거나 새로 고칩니다.</summary>
      <param name="startRecord">0부터 시작되는 시작 레코드 번호입니다.</param>
      <param name="maxRecords">검색할 수 있는 최대 레코드 수입니다.</param>
      <param name="dataTables">데이터 소스에서 채울 <see cref="T:System.Data.DataTable" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.DataTable" />에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 행을 반환하지 않는 문의 영향을 받는 행은 이 값에 포함되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>지정된 <see cref="T:System.Data.DataSet" />에 "Table"이라는 <see cref="T:System.Data.DataTable" />을 추가하고 지정된 <see cref="T:System.Data.SchemaType" />에 따라 데이터 원본의 스키마와 일치하도록 스키마를 구성합니다.</summary>
      <param name="dataSet">스키마를 삽입할 <see cref="T:System.Data.DataSet" /> 입니다.</param>
      <param name="schemaType">스키마를 삽입할 방법을 지정하는 <see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
      <returns>
        <see cref="T:System.Data.DataTable" /> 에 추가된 <see cref="T:System.Data.DataSet" />개체의 컬렉션에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)">
      <summary>지정된 <see cref="T:System.Data.DataTable" /> 에 <see cref="T:System.Data.DataSet" /> 을 추가하고 지정된 <see cref="T:System.Data.SchemaType" />에 따라 데이터 원본의 스키마와 일치하도록 스키마를 구성합니다.</summary>
      <param name="dataSet">데이터 원본의 스키마로 채울 <see cref="T:System.Data.DataSet" />입니다.</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
      <param name="command">데이터 소스에서 행을 검색하는 데 사용할 SQL SELECT 문입니다.</param>
      <param name="srcTable">테이블 매핑에 사용할 원본 테이블의 이름입니다.</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 값 중 하나입니다.</param>
      <returns>데이터 소스에서 반환된 스키마 정보가 들어 있는 <see cref="T:System.Data.DataTable" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)">
      <summary>지정된 <see cref="T:System.Data.DataTable" /> 에 <see cref="T:System.Data.DataSet" /> 을 추가하고 지정된 <see cref="T:System.Data.SchemaType" /> 및 <see cref="T:System.Data.DataTable" />에 따라 데이터 원본의 스키마와 일치하도록 스키마를 구성합니다.</summary>
      <param name="dataSet">스키마를 삽입할 <see cref="T:System.Data.DataSet" /> 입니다.</param>
      <param name="schemaType">스키마를 삽입할 방법을 지정하는 <see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
      <param name="srcTable">테이블 매핑에 사용할 원본 테이블의 이름입니다.</param>
      <exception cref="T:System.ArgumentException">스키마를 가져올 원본 테이블이 없는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataTable" /> 에 추가된 <see cref="T:System.Data.DataSet" />개체의 컬렉션에 대한 참조입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)">
      <summary>지정된 <see cref="T:System.Data.DataTable" /> 을 기반으로 하여 지정된 <see cref="T:System.Data.SchemaType" />의 스키마를 구성합니다.</summary>
      <param name="dataTable">데이터 원본의 스키마로 채울 <see cref="T:System.Data.DataTable" />입니다.</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
      <returns>데이터 원본에서 반환된 스키마 정보를 포함하는 <see cref="T:System.Data.DataTable" /> 입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />, 명령 문자열 및 <see cref="T:System.Data.SchemaType" /> 값을 기반으로 지정된 <see cref="T:System.Data.CommandBehavior" />의 스키마를 구성합니다.</summary>
      <param name="dataTable">데이터 원본의 스키마로 채울 <see cref="T:System.Data.DataTable" />입니다.</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
      <param name="command">데이터 소스에서 행을 검색하는 데 사용할 SQL SELECT 문입니다.</param>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 값 중 하나입니다.</param>
      <returns>데이터 소스에서 반환된 스키마 정보가 들어 있는 <see cref="T:System.Data.DataTable" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)">
      <summary>현재 일괄 작업의 명령 중 하나에서 <see cref="T:System.Data.IDataParameter" />를 반환합니다.</summary>
      <param name="commandIdentifier">매개 변수를 검색할 명령의 인덱스입니다.</param>
      <param name="parameterIndex">명령에 있는 매개 변수의 인덱스입니다.</param>
      <exception cref="T:System.NotSupportedException">어댑터에서 일괄 처리를 지원하지 않는 경우</exception>
      <returns>지정된 <see cref="T:System.Data.IDataParameter" /> 입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)">
      <summary>보다 큰 일괄 처리 업데이트 내에서 개별 업데이트 시도에 대한 정보를 반환합니다.</summary>
      <param name="commandIdentifier">일괄 작업 내에서 개별 명령의 열 서수(0부터 시작)입니다.</param>
      <param name="recordsAffected">일괄 작업 내에서 지정된 명령의 영향을 받는 데이터 저장소의 행 수입니다.</param>
      <param name="error">지정된 명령을 실행하는 도중 throw된 <see cref="T:System.Exception" />입니다. 예외가 throw되지 않은 경우 <see langword="null" />(Visual Basic의 경우 <see langword="Nothing" />)을 반환합니다.</param>
      <returns>보다 큰 일괄 처리 업데이트 내에서 개별 업데이트 시도에 대한 정보입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.GetFillParameters">
      <summary>SQL SELECT 문을 실행할 때 사용자가 설정한 매개 변수를 가져옵니다.</summary>
      <returns>사용자가 설정한 매개 변수를 포함하는 <see cref="T:System.Data.IDataParameter" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.InitializeBatching">
      <summary>
        <see cref="T:System.Data.Common.DbDataAdapter" />의 일괄 처리를 초기화합니다.</summary>
      <exception cref="T:System.NotSupportedException">어댑터에서 일괄 처리를 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)">
      <summary>.NET Framework 데이터 공급자의 <see langword="RowUpdated" /> 이벤트를 발생시킵니다.</summary>
      <param name="value">이벤트 데이터를 포함하는 <see cref="T:System.Data.Common.RowUpdatedEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)">
      <summary>.NET Framework 데이터 공급자의 <see langword="RowUpdating" /> 이벤트를 발생시킵니다.</summary>
      <param name="value">이벤트 데이터가 포함된 <see cref="T:System.Data.Common.RowUpdatingEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.System#ICloneable#Clone">
      <summary>현재 인스턴스의 복사본인 새 개체를 만듭니다.</summary>
      <returns>이 인스턴스의 복사본인 새 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.TerminateBatching">
      <summary>
        <see cref="T:System.Data.Common.DbDataAdapter" />의 일괄 처리를 종료합니다.</summary>
      <exception cref="T:System.NotSupportedException">어댑터에서 일괄 처리를 지원하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])">
      <summary>
        <see cref="T:System.Data.DataSet" />의 지정된 배열에서 삽입, 업데이트 또는 삭제된 각 행마다 INSERT, UPDATE 또는 DELETE 문을 각각 실행하여 데이터베이스의 값을 업데이트합니다.</summary>
      <param name="dataRows">데이터 소스를 업데이트하는 데 사용되는 <see cref="T:System.Data.DataRow" /> 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" />가 잘못되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">소스 테이블이 잘못된 경우</exception>
      <exception cref="T:System.SystemException">업데이트할 <see cref="T:System.Data.DataRow" />이 없는 경우  
  
또는 
업데이트할 <see cref="T:System.Data.DataTable" />이 없는 경우  
  
또는 
소스로 사용할 <see cref="T:System.Data.DataSet" />이 없는 경우</exception>
      <exception cref="T:System.Data.DBConcurrencyException">INSERT, UPDATE 또는 DELETE 문을 실행한 결과 영향을 받은 레코드가 없는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataSet" />에서 성공적으로 업데이트된 행의 수를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)">
      <summary>지정된 <see cref="T:System.Data.DataSet" /> 개체 배열에서 삽입, 업데이트 또는 삭제된 각 행마다 INSERT, UPDATE 또는 DELETE 문을 각각 실행하여 데이터베이스에 있는 값을 업데이트합니다.</summary>
      <param name="dataRows">데이터 소스를 업데이트하는 데 사용되는 <see cref="T:System.Data.DataRow" /> 개체의 배열입니다.</param>
      <param name="tableMapping">사용할 <see cref="P:System.Data.IDataAdapter.TableMappings" /> 컬렉션입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" />가 잘못되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">소스 테이블이 잘못된 경우</exception>
      <exception cref="T:System.SystemException">업데이트할 <see cref="T:System.Data.DataRow" />이 없는 경우  
  
또는 
업데이트할 <see cref="T:System.Data.DataTable" />이 없는 경우  
  
또는 
소스로 사용할 <see cref="T:System.Data.DataSet" />이 없는 경우</exception>
      <exception cref="T:System.Data.DBConcurrencyException">INSERT, UPDATE 또는 DELETE 문을 실행한 결과 영향을 받은 레코드가 없는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataSet" />에서 성공적으로 업데이트된 행의 수를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)">
      <summary>지정된 <see cref="T:System.Data.DataSet" />에서 삽입, 업데이트 또는 삭제된 각 행마다 INSERT, UPDATE 또는 DELETE 문을 각각 실행하여 데이터베이스에 있는 값을 업데이트합니다.</summary>
      <param name="dataSet">데이터 소스를 업데이트하는 데 사용된 <see cref="T:System.Data.DataSet" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">소스 테이블이 잘못된 경우</exception>
      <exception cref="T:System.Data.DBConcurrencyException">INSERT, UPDATE 또는 DELETE 문을 실행한 결과 영향을 받은 레코드가 없는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataSet" />에서 성공적으로 업데이트된 행의 수를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)">
      <summary>
        <see cref="T:System.Data.DataTable" /> 이름이 지정된 <see cref="T:System.Data.DataSet" />에서 삽입, 업데이트 또는 삭제된 각 행마다 INSERT, UPDATE 또는 DELETE 문을 각각 실행하여 데이터베이스에 있는 값을 업데이트합니다.</summary>
      <param name="dataSet">데이터 소스를 업데이트하는 데 사용할 <see cref="T:System.Data.DataSet" />입니다.</param>
      <param name="srcTable">테이블 매핑에 사용할 원본 테이블의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" />가 잘못되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">소스 테이블이 잘못된 경우</exception>
      <exception cref="T:System.Data.DBConcurrencyException">INSERT, UPDATE 또는 DELETE 문을 실행한 결과 영향을 받은 레코드가 없는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataSet" />에서 성공적으로 업데이트된 행의 수를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />에서 삽입, 업데이트 또는 삭제된 각 행마다 INSERT, UPDATE 또는 DELETE 문을 각각 실행하여 데이터베이스에 있는 값을 업데이트합니다.</summary>
      <param name="dataTable">데이터 소스를 업데이트하는 데 사용된 <see cref="T:System.Data.DataTable" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <see cref="T:System.Data.DataSet" />가 잘못되었습니다.</exception>
      <exception cref="T:System.InvalidOperationException">소스 테이블이 잘못된 경우</exception>
      <exception cref="T:System.SystemException">업데이트할 <see cref="T:System.Data.DataRow" />이 없는 경우  
  
또는 
업데이트할 <see cref="T:System.Data.DataTable" />이 없는 경우  
  
또는 
소스로 사용할 <see cref="T:System.Data.DataSet" />이 없는 경우</exception>
      <exception cref="T:System.Data.DBConcurrencyException">INSERT, UPDATE 또는 DELETE 문을 실행한 결과 영향을 받은 레코드가 없는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataTable" />에서 성공적으로 업데이트된 행의 수를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.DeleteCommand">
      <summary>데이터 집합에서 레코드를 삭제하기 위한 명령을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />을 수행하는 동안 데이터 집합의 삭제된 행에 대한 데이터 소스에서 레코드를 삭제하는 데 사용되는 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.FillCommandBehavior">
      <summary>데이터 어댑터를 채우는 데 사용되는 명령의 동작을 가져오거나 설정합니다.</summary>
      <returns>데이터 어댑터를 채우는 데 사용되는 명령의 <see cref="T:System.Data.CommandBehavior" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.InsertCommand">
      <summary>데이터 원본에 새 레코드를 삽입하는 데 사용되는 명령을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />를 수행하는 동안 데이터 집합의 새 행에 대한 레코드를 데이터 소스에 삽입하는 데 사용되는 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.SelectCommand">
      <summary>데이터 소스에서 레코드를 선택하는 데 사용되는 명령을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />를 수행하는 동안 데이터 집합에 배치할 레코드를 데이터 소스에서 선택하는 데 사용되는 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand">
      <summary>데이터 집합에서 레코드를 삭제하기 위한 SQL 문을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />을 수행하는 동안 데이터 집합의 삭제된 행에 대한 데이터 소스에서 레코드를 삭제하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#InsertCommand">
      <summary>데이터 소스에 새 레코드를 삽입하는 데 사용되는 SQL 문을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />을 수행하는 동안 데이터 집합의 새 행에 대한 데이터 소스에 레코드를 삽입하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#SelectCommand">
      <summary>데이터 소스에서 레코드를 선택하는 데 사용되는 SQL 문을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />을 수행하는 동안 데이터 소스에서 데이터 집합에 배치할 레코드를 선택하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand">
      <summary>데이터 소스에서 레코드를 업데이트하는 데 사용되는 SQL 문을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />을 수행하는 동안 데이터 집합의 수정된 행에 대한 데이터 소스에서 레코드를 업데이트하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.UpdateBatchSize">
      <summary>일괄 작업 처리 지원을 활성화하거나 비활성화하는 값을 가져오거나 설정하고 일괄 작업에서 실행할 수 있는 명령의 수를 지정합니다.</summary>
      <returns>일괄 작업당 처리할 행의 수입니다.  
  
 <list type="table"><listheader><term> 값</term><description> 효과</description></listheader><item><term> 0</term><description> 일괄 작업 크기에는 제한이 없습니다.</description></item><item><term> 1</term><description> 일괄 작업 업데이트를 비활성화합니다.</description></item><item><term> &gt; 1(sp1)</term><description><see cref="P:System.Data.Common.DbDataAdapter.UpdateBatchSize" />개의 작업을 일괄적으로 사용하여 변경 내용이 한 번에 전송됩니다.</description></item></list>  

 이 값을 1이 아닌 값으로 설정 하는 경우와 연결 된 모든 명령의 <see cref="T:System.Data.Common.DbDataAdapter" /> 속성은 <see cref="P:System.Data.IDbCommand.UpdatedRowSource" /> None 또는 OutputParameters로 설정 되어야 합니다. 그렇지 않으면 예외가 throw됩니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataAdapter.UpdateCommand">
      <summary>데이터 소스에서 레코드를 업데이트하는 데 사용되는 명령을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />를 수행하는 동안 데이터 집합의 수정된 행에 대한 레코드를 데이터 소스에서 업데이트하는 데 사용되는 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbDataReader">
      <summary>데이터 소스에서 앞으로만 이동 가능한 행 스트림을 읽습니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Close">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> 개체를 닫습니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.CloseAsync">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> 개체를 비동기적으로 닫습니다.</summary>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Dispose">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 해제하려면 <see langword="true" />이고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbDataReader.DisposeAsync">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" /> 클래스의 현재 인스턴스에서 사용하는 모든 리소스를 비동기식으로 해제합니다.</summary>
      <returns>비동기 작업을 나타내는 <see cref="T:System.Threading.Tasks.ValueTask" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetBoolean(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 부울로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetByte(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 바이트로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 인덱스에서 시작하는 지정된 열에서 지정된 바이트 수를 읽은 다음 버퍼의 지정된 위치에서 시작하는 버퍼에 씁니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <param name="dataOffset">읽기 작업을 시작하는 행 내의 인덱스입니다.</param>
      <param name="buffer">데이터를 복사해 넣을 버퍼입니다.</param>
      <param name="bufferOffset">데이터가 복사될 버퍼의 인덱스입니다.</param>
      <param name="length">읽을 최대 바이트 수입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>읽은 실제 바이트 수입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetChar(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 단일 문자로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 인덱스에서 시작하는 지정된 열에서 지정된 수의 문자를 읽은 다음 지정된 위치에서 시작하는 버퍼에 씁니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <param name="dataOffset">읽기 작업을 시작하는 행 내의 인덱스입니다.</param>
      <param name="buffer">데이터를 복사해 넣을 버퍼입니다.</param>
      <param name="bufferOffset">데이터가 복사될 버퍼의 인덱스입니다.</param>
      <param name="length">읽을 최대 문자 수입니다.</param>
      <returns>읽은 실제 문자 수입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetColumnSchemaAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)" />의 비동기 버전입니다.
공급자는 적절한 구현을 재정의해야 합니다.
<paramref name="cancellationToken" />을 선택적으로 적용할 수 있습니다.
기본 구현은 동기 <see cref="M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)" /> 호출을 호출하고 완료된 작업을 반환합니다.
기본 구현은 이미 취소된 <paramref name="cancellationToken" />을 전달하는 경우 취소된 작업을 반환합니다.
<see cref="M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)" />에서 throw되는 예외는 반환된 Task Exception 속성을 통해 전달됩니다.</summary>
      <param name="cancellationToken">취소 명령입니다.</param>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetData(System.Int32)">
      <summary>요청된 열의 중첩된 데이터 판독기를 반환합니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <returns>데이터 판독기입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDataTypeName(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 데이터 형식 이름을 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <returns>데이터 형식의 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDateTime(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 <see cref="T:System.DateTime" /> 개체로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDbDataReader(System.Int32)">
      <summary>요청된 열 서수에 대한 <see cref="T:System.Data.Common.DbDataReader" /> 개체를 반환합니다. 이 개체는 공급자별 구현으로 재정의할 수 있습니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDecimal(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 <see cref="T:System.Decimal" />로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetDouble(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 배정밀도 부동 소수점 숫자로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetEnumerator">
      <summary>파생 클래스에서 재정의되는 경우 데이터 판독기에서 행을 반복하는 데 사용할 수 있는 열거자를 반환합니다.</summary>
      <returns>데이터 판독기에서 행을 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldType(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 데이터 형식을 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 데이터 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValue``1(System.Int32)">
      <summary>지정된 열의 값을 요청된 형식으로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <typeparam name="T">반환될 값의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">데이터를 검색하는 동안 연결이 끊어졌거나 닫혔습니다.  

또는 
데이터를 검색하는 동안 데이터 판독기가 닫혔습니다.  
  
또는

읽을 준비가 된 데이터가 없습니다(예를 들어, 첫 번째 <see cref="M:System.Data.Common.DbDataReader.Read" />가 호출되지 않았거나 <see langword="false" />를 반환함).  

또는

판독기가 순차 모드에서 이전에 읽은 열을 읽으려고 했습니다.  

또는

진행 중인 비동기 작업이 없습니다. 이는 스트림을 읽는 동안 호출할 수 있기 때문에 순차 모드로 실행할 때 모든 Get* 메서드에 적용됩니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">데이터베이스에서 반환되는 값이 일치하지 않거나 이 값을 <typeparamref name="T" />에 캐스팅할 수 없습니다.</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32)">
      <summary>지정된 열의 값을 요청된 형식으로 비동기적으로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <typeparam name="T">반환될 값의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">데이터를 검색하는 동안 연결이 끊어졌거나 닫혔습니다.  
  
또는

데이터를 검색하는 동안 데이터 판독기가 닫혔습니다.  

또는

읽을 준비가 된 데이터가 없습니다(예를 들어, 첫 번째 <see cref="M:System.Data.Common.DbDataReader.Read" />가 호출되지 않았거나 <see langword="false" />를 반환함).

또는

순차 모드에서 이전에 읽은 열을 읽으려고 했습니다.  

또는

진행 중인 비동기 작업이 없습니다. 이는 스트림을 읽는 동안 호출할 수 있기 때문에 순차 모드로 실행할 때 모든 Get_*_ 메서드에 적용됩니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">데이터베이스에서 반환되는 값이 일치하지 않거나 이 값을 <typeparamref name="T" />에 캐스팅할 수 없습니다.</exception>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" />에 지정된 열의 값을 포함하는 작업입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFieldValueAsync``1(System.Int32,System.Threading.CancellationToken)">
      <summary>지정된 열의 값을 요청된 형식으로 비동기적으로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 토큰입니다.</param>
      <typeparam name="T">반환될 값의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">데이터를 검색하는 동안 연결이 끊어졌거나 닫혔습니다.  
  
또는

데이터를 검색하는 동안 데이터 판독기가 닫혔습니다.  

또는

읽을 준비가 된 데이터가 없습니다(예를 들어, 첫 번째 <see cref="M:System.Data.Common.DbDataReader.Read" />가 호출되지 않았거나 <see langword="false" />를 반환함).

또는

순차 모드에서 이전에 읽은 열을 읽으려고 했습니다.  

또는

진행 중인 비동기 작업이 없습니다. 이는 스트림을 읽는 동안 호출할 수 있기 때문에 순차 모드로 실행할 때 모든 Get_*_ 메서드에 적용됩니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">데이터베이스에서 반환되는 값이 일치하지 않거나 이 값을 <typeparamref name="T" />에 캐스팅할 수 없습니다.</exception>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" />에 지정된 열의 값을 포함하는 작업입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetFloat(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 단정밀도 부동 소수점 숫자로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetGuid(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 GUID(Globally Unique Identifier)로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt16(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 16비트 부호 있는 정수로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt32(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 32비트 부호 있는 정수로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetInt64(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 64비트 부호 있는 정수로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetName(System.Int32)">
      <summary>파생 클래스에서 재정의될 때 0부터 시작하는 열 서수가 지정된 경우 열 이름을 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <returns>지정된 열의 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetOrdinal(System.String)">
      <summary>파생 클래스에서 재정의될 때 열 이름이 지정된 경우 열 서수를 가져옵니다.</summary>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <returns>열 서수(0부터 시작)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>지정된 열의 공급자별 형식을 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <returns>공급자별 .NET 형식입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>지정된 열의 값을 공급자별 형식의 인스턴스로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>현재 행의 컬렉션에서 공급자별 특성 열을 모두 가져옵니다.</summary>
      <param name="values">특성 열을 복사해 올 <see cref="T:System.Object" />의 배열입니다.</param>
      <returns>배열에 있는 요소의 인스턴스 수입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetSchemaTable">
      <summary>
        <see cref="T:System.Data.DataTable" />의 열 메타데이터를 정의하는 <see cref="T:System.Data.Common.DbDataReader" />을 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Common.DbDataReader" />가 닫혔습니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.NotSupportedException">.NET Core만 해당: 이 멤버는 지원되지 않습니다.</exception>
      <returns>열 메타데이터를 정의하는 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetSchemaTableAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" />의 비동기 버전입니다.
공급자는 적절한 구현을 재정의해야 합니다.
<paramref name="cancellationToken" />을 선택적으로 적용할 수 있습니다.
기본 구현은 동기 <see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" /> 호출을 호출하고 완료된 작업을 반환합니다.
기본 구현은 이미 취소된 <paramref name="cancellationToken" />을 전달하는 경우 취소된 작업을 반환합니다.
<see cref="M:System.Data.Common.DbDataReader.GetSchemaTable" />에서 throw되는 예외는 반환된 Task Exception 속성을 통해 전달됩니다.</summary>
      <param name="cancellationToken">취소 명령입니다.</param>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetStream(System.Int32)">
      <summary>지정된 열에서 데이터를 검색하는 스트림을 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.InvalidOperationException">데이터를 검색하는 동안 연결이 끊어졌거나 닫혔습니다.  
  
또는

데이터를 검색하는 동안 데이터 판독기가 닫힙니다.  

또는

읽을 준비가 된 데이터가 없는 경우(예를 들어, 첫 번째 <see cref="M:System.Data.Common.DbDataReader.Read" />가 호출되지 않았거나 false를 반환한 경우)  

또는

데이터 판독기가 순차 모드에서 이전에 읽은 열을 읽으려고 했습니다.  

또는

진행 중인 비동기 작업이 없습니다. 이는 스트림을 읽는 동안 호출할 수 있기 때문에 순차 모드로 실행할 때 모든 Get* 메서드에 적용됩니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 열은 <see cref="T:System.IO.Stream" />을 사용한 읽기를 지원하는 이진 유형이 아닙니다.</exception>
      <returns>스트림입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetString(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 <see cref="T:System.String" />의 인스턴스로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetTextReader(System.Int32)">
      <summary>열에서 데이터를 검색하는 텍스트 판독기를 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.InvalidOperationException">데이터를 검색하는 동안 연결이 끊어졌거나 닫혔습니다.  
  
또는

데이터를 검색하는 동안 데이터 판독기가 닫힙니다.  

또는

읽을 준비가 된 데이터가 없는 경우(예를 들어, 첫 번째 <see cref="M:System.Data.Common.DbDataReader.Read" />가 호출되지 않았거나 false를 반환한 경우)  

또는

데이터 판독기가 순차 모드에서 이전에 읽은 열을 읽으려고 했습니다.  

또는

진행 중인 비동기 작업이 없습니다. 이는 스트림을 읽는 동안 호출할 수 있기 때문에 순차 모드로 실행할 때 모든 Get* 메서드에 적용됩니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 열은 <see cref="T:System.IO.TextReader" />를 사용한 읽기를 지원하는 텍스트 유형이 아닙니다.</exception>
      <returns>텍스트 판독기입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetValue(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 <see cref="T:System.Object" />의 인스턴스로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.GetValues(System.Object[])">
      <summary>파생 클래스에서 재정의되는 경우 개체의 배열을 현재 행의 열 값으로 채웁니다.</summary>
      <param name="values">특성 열을 복사해 올 <see cref="T:System.Object" />의 배열입니다.</param>
      <returns>배열에 포함된 <see cref="T:System.Object" /> 인스턴스의 수입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNull(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 열이 존재하지 않거나 누락된 값을 포함하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <returns>지정된 열이 <see cref="T:System.DBNull" />에 해당하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32)">
      <summary>열의 값이 존재하지 않거나 누락되었는지 여부를 나타내는 값을 비동기적으로 가져옵니다.</summary>
      <param name="ordinal">검색할 열입니다(0부터 시작).</param>
      <exception cref="T:System.InvalidOperationException">데이터를 검색하는 동안 연결이 끊어졌거나 닫혔습니다.  
  
또는

데이터를 검색하는 동안 데이터 판독기가 닫힙니다.  

또는

읽을 준비가 된 데이터가 없는 경우(예를 들어, 첫 번째 <see cref="M:System.Data.Common.DbDataReader.Read" />가 호출되지 않았거나 false를 반환한 경우)  

또는

순차 모드에서 이전에 읽은 열을 읽으려고 했습니다.  

또는

진행 중인 비동기 작업이 없습니다. 이는 스트림을 읽는 동안 호출할 수 있기 때문에 순차 모드로 실행할 때 모든 Get* 메서드에 적용됩니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성이 지정된 열 값이 <see langword="DBNull" />와 같으면 <see langword="true" />, 아니면 <see langword="false" />인 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.IsDBNullAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>열의 값이 존재하지 않거나 누락되었는지 여부를 나타내는 값을 비동기적으로 가져옵니다.</summary>
      <param name="ordinal">검색할 열입니다(0부터 시작).</param>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 토큰입니다.</param>
      <exception cref="T:System.InvalidOperationException">데이터를 검색하는 동안 연결이 끊어졌거나 닫혔습니다.  
  
또는

데이터를 검색하는 동안 데이터 판독기가 닫힙니다.  

또는

읽을 준비가 된 데이터가 없는 경우(예를 들어, 첫 번째 <see cref="M:System.Data.Common.DbDataReader.Read" />가 호출되지 않았거나 false를 반환한 경우)  

또는

순차 모드에서 이전에 읽은 열을 읽으려고 했습니다.  

또는 
진행 중인 비동기 작업이 없습니다. 이는 스트림을 읽는 동안 호출할 수 있기 때문에 순차 모드로 실행할 때 모든 Get* 메서드에 적용됩니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성이 지정된 열 값이 <see langword="DBNull" />와 같으면 <see langword="true" />, 아니면 <see langword="false" />인 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResult">
      <summary>파생 클래스에서 재정의되는 경우 일괄 문의 결과를 읽을 때 판독기를 다음 결과로 비동기로 이동합니다.</summary>
      <returns>결과 집합이 더 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResultAsync">
      <summary>일괄 문의 결과를 읽을 때 판독기를 다음 결과로 비동기로 이동합니다.</summary>
      <exception cref="T:System.Data.Common.DbException">명령 텍스트를 실행하는 동안 오류가 발생했습니다.</exception>
      <returns>더 많은 결과 집합이 있으면 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성이 <see langword="true" />인 작업이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>일괄 문의 결과를 읽을 때 판독기를 다음 결과로 비동기로 이동합니다.</summary>
      <param name="cancellationToken">취소 명령입니다.</param>
      <exception cref="T:System.Data.Common.DbException">명령 텍스트를 실행하는 동안 오류가 발생했습니다.</exception>
      <returns>더 많은 결과 집합이 있으면 <see cref="T:System.Threading.Tasks.Task`1" />의 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성이 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.Read">
      <summary>파생 클래스에서 재정의하는 경우 판독기를 결과 집합의 다음 레코드로 이동합니다.</summary>
      <returns>행이 더 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.ReadAsync">
      <summary>판독기를 결과 집합의 다음 레코드로 비동기로 이동합니다.</summary>
      <exception cref="T:System.Data.Common.DbException">명령 텍스트를 실행하는 동안 오류가 발생했습니다.</exception>
      <returns>더 많은 행이 있으면 <see cref="T:System.Threading.Tasks.Task`1" />의 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성이 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>판독기를 결과 집합의 다음 레코드로 비동기로 이동합니다.</summary>
      <param name="cancellationToken">취소 명령입니다.</param>
      <exception cref="T:System.Data.Common.DbException">명령 텍스트를 실행하는 동안 오류가 발생했습니다.</exception>
      <returns>더 많은 행이 있으면 <see cref="T:System.Threading.Tasks.Task`1" />의 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성이 <see langword="true" />, 아니면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReader.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Data.IDataRecord.GetData(System.Int32)" />를 참조하세요.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <returns>필드가 더 많은 원격의 구조화된 데이터를 가리킬 때 사용할 <see cref="T:System.Data.IDataReader" />의 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Depth">
      <summary>현재 행의 중첩 수준을 나타내는 값을 가져옵니다.</summary>
      <returns>현재 행의 중첩 수준입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.FieldCount">
      <summary>파생 클래스에서 재정의되는 경우 현재 행의 열 수를 가져옵니다.</summary>
      <exception cref="T:System.NotSupportedException">SQL Server의 인스턴스에 대한 현재 연결이 없는 경우</exception>
      <returns>현재 행의 열 수입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.HasRows">
      <summary>파생 클래스에서 재정의되는 경우 이 <see cref="T:System.Data.Common.DbDataReader" />가 둘 이상의 행을 포함하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" />에 행이 하나 이상 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.IsClosed">
      <summary>파생 클래스에서 재정의되는 경우 <see cref="T:System.Data.Common.DbDataReader" />가 닫혔는지 여부를 나타내는 값을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Common.DbDataReader" />가 닫혔습니다.</exception>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" />가 닫혔으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Item(System.Int32)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 <see cref="T:System.Object" />의 인스턴스로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">열 인덱스가 범위를 벗어났습니다.</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.Item(System.String)">
      <summary>파생 클래스에서 재정의되는 경우 지정된 열의 값을 <see cref="T:System.Object" />의 인스턴스로 가져옵니다.</summary>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름의 열을 찾을 수 없는 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.RecordsAffected">
      <summary>파생 클래스에서 재정의되는 경우 SQL 문 실행으로 변경, 삽입 또는 삭제된 행 수를 가져옵니다.</summary>
      <returns>변경, 삽입 또는 삭제되는 행의 수입니다. SELECT 문에 대해서는 -1을 반환하고, 영향을 받은 행이 없거나 문이 실패하면 0을 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataReader.VisibleFieldCount">
      <summary>표시되는 <see cref="T:System.Data.Common.DbDataReader" />의 필드 수를 가져옵니다.</summary>
      <returns>표시되는 필드 수입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbDataReaderExtensions">
      <summary>이 클래스에는 <see cref="T:System.Data.Common.DbDataReader" />에 대한 열 스키마 확장 메서드가 포함됩니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbDataReaderExtensions.CanGetColumnSchema(System.Data.Common.DbDataReader)">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" />에서 열 스키마를 가져올 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <param name="reader">열 스키마 지원에 대해 확인할 <see cref="T:System.Data.Common.DbDataReader" />입니다.</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" />에서 열 스키마를 가져올 수 있는 경우 <see langword="true" />이고, 그러지 않은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataReaderExtensions.GetColumnSchema(System.Data.Common.DbDataReader)">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" />에 대한 열 스키마(<see cref="T:System.Data.Common.DbColumn" /> 컬렉션)를 가져옵니다.</summary>
      <param name="reader">열 스키마를 반환하는 <see cref="T:System.Data.Common.DbDataReader" />입니다.</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" />에 대한 열 스키마(<see cref="T:System.Data.Common.DbColumn" /> 컬렉션)입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbDataRecord">
      <summary>
        <see cref="T:System.Data.IDataRecord" /> 및 <see cref="T:System.ComponentModel.ICustomTypeDescriptor" />를 구현하고 <see cref="T:System.Data.Common.DbEnumerator" />에 대한 데이터 바인딩 지원을 제공합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbDataRecord" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetBoolean(System.Int32)">
      <summary>지정된 열의 값에 해당하는 Boolean 값을 반환합니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>해당 부울이 <see langword="true" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetByte(System.Int32)">
      <summary>지정된 열의 값에 해당하는 바이트 값을 반환합니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 열의 값에 해당하는 바이트 배열을 반환합니다.</summary>
      <param name="i">열 서수(0부터 시작)입니다.</param>
      <param name="dataIndex">읽기 작업을 시작할 필드 내의 인덱스입니다.</param>
      <param name="buffer">바이트 스트림을 읽을 버퍼입니다.</param>
      <param name="bufferIndex">읽기 작업을 시작할 <paramref name="buffer" />에 대한 인덱스입니다.</param>
      <param name="length">읽을 바이트 수입니다.</param>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetChar(System.Int32)">
      <summary>지정된 열의 값을 문자로 반환합니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>지정된 열의 값에 해당하는 문자 배열을 반환합니다.</summary>
      <param name="i">열 서수입니다.</param>
      <param name="dataIndex">데이터를 복사해 넣을 버퍼입니다.</param>
      <param name="buffer">버퍼에 복사할 최대 길이입니다.</param>
      <param name="bufferIndex">버퍼 내에서 시작할 지점입니다.</param>
      <param name="length">소스 데이터 내에서 시작할 지점입니다.</param>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetData(System.Int32)">
      <summary>현재 지원되지 않습니다.</summary>
      <param name="i">현재 지원되지 않습니다.</param>
      <returns>현재 지원되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDataTypeName(System.Int32)">
      <summary>백 엔드 데이터 형식의 이름을 반환합니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>백 엔드 데이터 형식의 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDateTime(System.Int32)">
      <summary>지정된 열의 값을 <see cref="T:System.DateTime" /> 개체로 가져옵니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDbDataReader(System.Int32)">
      <summary>요청된 열 서수에 대한 <see cref="T:System.Data.Common.DbDataReader" /> 개체를 반환합니다. 이 개체는 공급자별 구현으로 재정의할 수 있습니다.</summary>
      <param name="i">열 서수(0부터 시작)입니다.</param>
      <returns>
        <see cref="T:System.Data.Common.DbDataReader" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDecimal(System.Int32)">
      <summary>지정된 열의 값을 <see cref="T:System.Decimal" /> 개체로 가져옵니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetDouble(System.Int32)">
      <summary>지정된 열의 값에 해당하는 배정밀도 부동 소수점 숫자를 반환합니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetFieldType(System.Int32)">
      <summary>개체의 데이터 형식인 <see cref="T:System.Type" />을 반환합니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>개체의 데이터 형식인 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetFloat(System.Int32)">
      <summary>지정된 열의 값에 해당하는 단정밀도 부동 소수점 숫자를 반환합니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetGuid(System.Int32)">
      <summary>지정된 필드의 GUID 값을 반환합니다.</summary>
      <param name="i">반환할 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 필드의 GUID 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt16(System.Int32)">
      <summary>지정된 열의 값에 해당하는 16비트 부호 있는 정수를 반환합니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt32(System.Int32)">
      <summary>지정된 열의 값에 해당하는 32비트 부호 있는 정수를 반환합니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetInt64(System.Int32)">
      <summary>지정된 열의 값에 해당하는 64비트 부호 있는 정수를 반환합니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetName(System.Int32)">
      <summary>지정된 열의 이름을 반환합니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>지정된 열의 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetOrdinal(System.String)">
      <summary>열 이름을 사용하여 열 서수(0부터 시작)를 반환합니다.</summary>
      <param name="name">열 이름입니다.</param>
      <returns>열 서수입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetString(System.Int32)">
      <summary>지정된 열의 값을 문자열로 반환합니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetValue(System.Int32)">
      <summary>지정된 열의 값을 네이티브 형식으로 반환합니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>반환할 값입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.GetValues(System.Object[])">
      <summary>현재 레코드의 열 값으로 개체의 배열을 채웁니다.</summary>
      <param name="values">특성 필드를 복사할 <see cref="T:System.Object" />의 배열입니다.</param>
      <returns>배열에 포함된 <see cref="T:System.Object" /> 인스턴스의 수입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.IsDBNull(System.Int32)">
      <summary>존재하지 않는 값을 나타내는 데 사용됩니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>지정된 열이 <see cref="T:System.DBNull" />과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>해당 구성 요소 인스턴스에 대한 사용자 지정 특성의 컬렉션을 반환합니다.</summary>
      <returns>해당 개체의 특성이 들어 있는 <see cref="T:System.ComponentModel.AttributeCollection" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>해당 구성 요소 인스턴스의 클래스 이름을 반환합니다.</summary>
      <returns>개체의 클래스 이름이거나, 클래스에 이름이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>해당 구성 요소 인스턴스의 이름을 반환합니다.</summary>
      <returns>개체의 이름이거나, 개체에 이름이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>해당 구성 요소 인스턴스에 대한 형식 변환기를 반환합니다.</summary>
      <returns>해당 개체의 변환기인 <see cref="T:System.ComponentModel.TypeConverter" />이거나, 개체의 <see cref="T:System.ComponentModel.TypeConverter" />가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>해당 구성 요소 인스턴스의 기본 이벤트를 반환합니다.</summary>
      <returns>이 개체의 기본 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptor" /> 또는, 이 개체에 이벤트가 없으면 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>해당 구성 요소 인스턴스의 기본 속성을 반환합니다.</summary>
      <returns>해당 개체의 기본 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" />이거나, 개체에 속성이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>해당 구성 요소 인스턴스에 대한 지정된 형식의 편집기를 반환합니다.</summary>
      <param name="editorBaseType">해당 개체의 편집기를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>해당 개체의 편집기인 지정된 형식의 <see cref="T:System.Object" />이거나, 편집기를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>해당 구성 요소 인스턴스의 이벤트를 반환합니다.</summary>
      <returns>해당 구성 요소 인스턴스의 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>지정된 특성 배열을 필터로 사용하여 해당 구성 요소 인스턴스의 이벤트를 반환합니다.</summary>
      <param name="attributes">필터로 사용되는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>해당 구성 요소 인스턴스의 필터링된 이벤트를 나타내는 <see cref="T:System.ComponentModel.EventDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>해당 구성 요소 인스턴스의 속성을 반환합니다.</summary>
      <returns>해당 구성 요소 인스턴스의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>특성 배열을 필터로 사용하여 해당 구성 요소 인스턴스의 속성을 반환합니다.</summary>
      <param name="attributes">필터로 사용되는 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>해당 구성 요소 인스턴스의 필터링된 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbDataRecord.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>지정된 속성 설명자가 설명하는 속성이 포함된 개체를 반환합니다.</summary>
      <param name="pd">소유자가 있는 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <returns>지정된 속성의 소유자를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.FieldCount">
      <summary>현재 레코드 내의 필드 수를 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <exception cref="T:System.NotSupportedException">읽을 데이터 소스에 연결되지 않은 경우</exception>
      <returns>현재 레코드 내의 필드 수입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.Item(System.Int32)">
      <summary>지정된 열의 값을 지정된 열 서수에 따라 네이티브 형식으로 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <param name="i">열 서수입니다.</param>
      <returns>네이티브 형식으로 나타낸 지정된 열의 값입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbDataRecord.Item(System.String)">
      <summary>지정된 열의 값을 지정된 열 이름에 따라 네이티브 형식으로 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <param name="name">열 이름입니다.</param>
      <returns>네이티브 형식으로 나타낸 지정된 열의 값입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbDataSourceEnumerator">
      <summary>로컬 네트워크에서 사용할 수 있는 모든 데이터베이스 서버의 인스턴스를 열거하는 메커니즘을 제공합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbDataSourceEnumerator.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 클래스의 새 인스턴스를 만듭니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbDataSourceEnumerator.GetDataSources">
      <summary>이 클래스에 대한 강력한 형식의 인스턴스가 나타내는 서버의 표시되는 모든 인스턴스에 대한 정보를 포함하는 <see cref="T:System.Data.DataTable" />을 검색합니다.</summary>
      <returns>연결된 데이터 원본의 표시되는 인스턴스에 대한 정보를 포함하는 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbEnumerator">
      <summary>.NET Framework 데이터 공급자별로 컬렉션에 대한 단순 반복을 지원하는 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 메서드를 표시합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)">
      <summary>지정된 데이터 판독기를 사용하여 <see cref="T:System.Data.Common.DbEnumerator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="reader">반복할 DataReader입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)">
      <summary>지정된 판독기를 사용하여 <see cref="T:System.Data.Common.DbEnumerator" /> 클래스의 새 인스턴스를 초기화하고 데이터를 반복한 후에 판독기를 자동으로 닫을지 여부를 나타냅니다.</summary>
      <param name="reader">반복할 DataReader입니다.</param>
      <param name="closeReader">자동으로 해당 데이터를 반복한 후 DataReader를 닫으려면 <see langword="true" />이고, 닫지 않으려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)">
      <summary>지정된 <see cref="T:System.Data.Common.DbEnumerator" />를 사용하여 <see langword="DataReader" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="reader">반복할 <see langword="DataReader" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)">
      <summary>지정된 <see langword="DataReader" />를 사용하여 <see cref="T:System.Data.Common.DbEnumerator" /> 클래스의 새 인스턴스를 초기화하고 데이터를 반복한 후에 <see langword="DataReader" />를 자동으로 닫을지 여부를 나타냅니다.</summary>
      <param name="reader">반복할 <see langword="DataReader" />입니다.</param>
      <param name="closeReader">자동으로 해당 데이터를 반복한 후 <see langword="DataReader" />를 닫으려면 <see langword="true" />이고, 닫지 않으려면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.MoveNext">
      <summary>열거자를 컬렉션의 다음 요소로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbEnumerator.Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 만들어진 후에 컬렉션이 수정되었습니다.</exception>
    </member>
    <member name="P:System.Data.Common.DbEnumerator.Current">
      <summary>컬렉션의 현재 요소를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">열거자가 컬렉션의 첫 번째 요소 앞 또는 마지막 요소 뒤에 배치되어 있습니다.</exception>
      <returns>컬렉션에 있는 현재 요소입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbException">
      <summary>데이터 소스를 위해 throw되는 모든 예외에 대한 기본 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 serializatoin 정보와 컨텍스트를 사용하여 <see cref="T:System.Data.Common.DbException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">throw되는 예외에 대해 serialize된 개체 데이터를 보유하는 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context">소스 또는 대상에 대한 컨텍스트 정보를 포함하는 <see cref="T:System.Runtime.Serialization.StreamingContext" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Data.Common.DbException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">이 예외에 표시할 메시지입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 근본 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Data.Common.DbException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류 메시지 문자열입니다.</param>
      <param name="innerException">내부 예외 참조입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbException.#ctor(System.String,System.Int32)">
      <summary>지정된 오류 메시지와 오류 코드를 사용하여 <see cref="T:System.Data.Common.DbException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="errorCode">예외에 대한 오류 코드입니다.</param>
    </member>
    <member name="P:System.Data.Common.DbException.IsTransient">
      <summary>이 <see cref="T:System.Data.Common.DbException" />이 나타내는 오류가 일시적 오류일 수 있는지, 즉 트리거하는 작업을 다시 시도할 경우 다른 변경 작업을 수행하지 않아도 성공할 수 있는지 여부를 나타냅니다.</summary>
      <returns>
        <see langword="true" /> 표시 된 오류가 일시적 오류일 수 있으면이 고, 그렇지 않으면입니다. <see langword="false" /> 그렇지 않으면입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbException.SqlState">
      <summary>
        <para> 이를 지원하는 데이터베이스 공급자의 경우에는 데이터베이스 작업의 성공 또는 실패를 나타내는 표준 SQL 5자 반환 코드가 포함됩니다. 처음 두 자는 반환 코드의 <strong>클래스</strong>(예: 오류, 성공)를 나타내며, 마지막 세 자는 <strong>하위 클래스</strong>를 나타내므로 데이터베이스 이식 가능한 방식으로 오류 시나리오를 검색할 수 있습니다.</para>
        <para> 이를 지원하지 않는 데이터베이스 공급자 또는 적용할 수 없는 오류 시나리오의 경우에는 <see langword="null" />이 포함됩니다.</para>
      </summary>
      <returns>표준 SQL 5 문자 반환 코드 또는 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbMetaDataCollectionNames">
      <summary>잘 알려진 MetaDataCollections: DataSourceInformation, DataTypes, MetaDataCollections, ReservedWords 및 Restrictions에 상수 목록을 제공합니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.DataSourceInformation">
      <summary>DataSourceInformation 컬렉션을 나타내는 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 메서드와 함께 사용할 상수입니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.DataTypes">
      <summary>DataTypes 컬렉션을 나타내는 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 메서드와 함께 사용할 상수입니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.MetaDataCollections">
      <summary>MetaDataCollections 컬렉션을 나타내는 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 메서드와 함께 사용할 상수입니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.ReservedWords">
      <summary>ReservedWords 컬렉션을 나타내는 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 메서드와 함께 사용할 상수입니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataCollectionNames.Restrictions">
      <summary>Restrictions 컬렉션을 나타내는 <see cref="M:System.Data.Common.DbConnection.GetSchema" /> 메서드와 함께 사용할 상수입니다.</summary>
    </member>
    <member name="T:System.Data.Common.DbMetaDataColumnNames">
      <summary>
        <see cref="T:System.Data.DataTable" />에 포함된 MetaDataCollection 개체의 열 이름에 사용되는 정적 값을 제공합니다. <see cref="T:System.Data.DataTable" />은 GetSchema 메서드에서 만들어집니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CollectionName">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 CollectionName 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ColumnSize">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 ColumnSize 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CompositeIdentifierSeparatorPattern">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 CompositeIdentifierSeparatorPattern 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CreateFormat">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 CreateFormat 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.CreateParameters">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 CreateParameters 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductName">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 DataSourceProductName 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductVersion">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 DataSourceProductVersion 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataSourceProductVersionNormalized">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 DataSourceProductVersionNormalized 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.DataType">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 DataType 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.GroupByBehavior">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 GroupByBehavior 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IdentifierCase">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 IdentifierCase 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IdentifierPattern">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 IdentifierPattern 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsAutoIncrementable">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 IsAutoIncrementable 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsBestMatch">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 IsBestMatch 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsCaseSensitive">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 IsCaseSensitive 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsConcurrencyType">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 IsConcurrencyType 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsFixedLength">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 IsFixedLength 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsFixedPrecisionScale">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 IsFixedPrecisionScale 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsLiteralSupported">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 IsLiteralSupported 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsLong">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 IsLong 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsNullable">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 IsNullable 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsSearchable">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 IsSearchable 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsSearchableWithLike">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 IsSearchableWithLike 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.IsUnsigned">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 IsUnsigned 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.LiteralPrefix">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 LiteralPrefix 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.LiteralSuffix">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 LiteralSuffix 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.MaximumScale">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 MaximumScale 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.MinimumScale">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 MinimumScale 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.NumberOfIdentifierParts">
      <summary>GetSchema 메서드에서 MetaDataCollections 컬렉션에 NumberOfIdentifierParts 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.NumberOfRestrictions">
      <summary>GetSchema 메서드에서 MetaDataCollections 컬렉션에 NumberOfRestrictions 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.OrderByColumnsInSelect">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 OrderByColumnsInSelect 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 ParameterMarkerFormat 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerPattern">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 ParameterMarkerPattern 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 ParameterNameMaxLength 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 ParameterNamePattern 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ProviderDbType">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 ProviderDbType 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.QuotedIdentifierCase">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 QuotedIdentifierCase 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.QuotedIdentifierPattern">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 QuotedIdentifierPattern 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.ReservedWord">
      <summary>GetSchema 메서드에서 ReservedWords 컬렉션에 ReservedWord 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.StatementSeparatorPattern">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 StatementSeparatorPattern 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.StringLiteralPattern">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 StringLiteralPattern 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.SupportedJoinOperators">
      <summary>GetSchema 메서드에서 DataSourceInformation 컬렉션에 SupportedJoinOperators 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.Common.DbMetaDataColumnNames.TypeName">
      <summary>GetSchema 메서드에서 DataTypes 컬렉션에 TypeName 열을 만드는 데 사용됩니다.</summary>
    </member>
    <member name="T:System.Data.Common.DbParameter">
      <summary>
        <see cref="T:System.Data.Common.DbCommand" /> 에 대한 매개 변수를 나타내고 필요에 따라 <see cref="T:System.Data.DataSet" /> 열에 대한 매핑도 나타냅니다. 매개 변수에 대한 자세한 내용은 매개 변수 및 매개 변수 데이터 형식 구성을 참조하세요.</summary>
    </member>
    <member name="M:System.Data.Common.DbParameter.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbParameter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbParameter.ResetDbType">
      <summary>DbType 속성을 원래 설정으로 다시 설정합니다.</summary>
    </member>
    <member name="P:System.Data.Common.DbParameter.DbType">
      <summary>매개 변수의 <see cref="T:System.Data.DbType" />을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">속성이 유효한 <see cref="T:System.Data.DbType" />으로 설정되지 않은 경우</exception>
      <returns>
        <see cref="T:System.Data.DbType" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Data.DbType.String" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Direction">
      <summary>매개 변수가 입력 전용, 출력 전용, 양방향 또는 저장 프로시저 반환 값 매개 변수인지 나타내는 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">속성이 유효한 <see cref="T:System.Data.ParameterDirection" /> 값 중의 하나로 설정되지 않은 경우</exception>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 값 중 하나입니다. 기본값은 <see langword="Input" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.IsNullable">
      <summary>매개 변수에 null 값이 허용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>null 값이 허용되면<see langword="true" /> 이고, 그러지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.ParameterName">
      <summary>
        <see cref="T:System.Data.Common.DbParameter" />의 이름을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" />의 이름입니다. 기본값은 빈 문자열("")입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Precision">
      <summary>
        <see cref="P:System.Data.Common.DbParameter.Value" /> 속성을 나타내는 데 사용되는 최대 자릿수를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="P:System.Data.Common.DbParameter.Value" /> 속성을 나타내는 데 사용되는 최대 자릿수입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Scale">
      <summary>
        <see cref="P:System.Data.Common.DbParameter.Value" />가 확인되는 소수점 이하 자릿수를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="P:System.Data.Common.DbParameter.Value" />가 확인되는 소수 자릿수입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Size">
      <summary>열 내의 최대 데이터 크기(바이트)를 가져오거나 설정합니다.</summary>
      <returns>열 내의 최대 데이터 크기(바이트)입니다. 기본값은 매개 변수 값에서 유추됩니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceColumn">
      <summary>
        <see cref="T:System.Data.DataSet" />에 매핑되어 <see cref="P:System.Data.Common.DbParameter.Value" />를 로드하거나 반환하기 위해 사용된 소스 열의 이름을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataSet" />으로 매핑된 소스 열의 이름입니다. 기본값은 빈 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceColumnNullMapping">
      <summary>소스 열에 null이 허용되는지 여부를 나타내는 값을 가져오거나 설정합니다. 이를 통해 <see cref="T:System.Data.Common.DbCommandBuilder" />에서 null 허용 열에 대한 Update 문을 올바르게 생성할 수 있습니다.</summary>
      <returns>원본 열에 null이 허용되면 <see langword="true" />이고, 허용되지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.SourceVersion">
      <summary>
        <see cref="T:System.Data.DataRowVersion" />를 로드할 때 사용할 <see cref="P:System.Data.Common.DbParameter.Value" />을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">이 속성이 <see cref="T:System.Data.DataRowVersion" /> 값 중 하나로 설정되지 않은 경우</exception>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다. 기본값은 <see langword="Current" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDbDataParameter#Precision">
      <summary>숫자 매개 변수의 정밀도를 나타냅니다.</summary>
      <returns>데이터 공급자 <see langword="Parameter" /> 개체의 <see langword="Value" /> 속성을 나타내는 데 사용되는 최대 자릿수입니다. 기본값은 0이며 이는 데이터 공급자가 <see langword="Value" />의 정밀도를 설정함을 나타냅니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.System#Data#IDbDataParameter#Scale">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Data.IDbDataParameter.Scale" />를 참조하세요.</summary>
      <returns>
        <see cref="P:System.Data.OleDb.OleDbParameter.Value" />가 확인되는 소수 자릿수입니다. 기본값은 0입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameter.Value">
      <summary>매개 변수의 값을 가져오거나 설정합니다.</summary>
      <returns>매개 변수의 값인 <see cref="T:System.Object" />입니다. 기본값은 null입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbParameterCollection">
      <summary>기본 클래스는 <see cref="T:System.Data.Common.DbCommand" />와 관련된 매개 변수의 컬렉션입니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbParameterCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Add(System.Object)">
      <summary>
        <see cref="T:System.Data.Common.DbParameter" />에 지정한 <see cref="T:System.Data.Common.DbParameterCollection" /> 개체를 추가합니다.</summary>
      <param name="value">컬렉션에 추가할 <see cref="T:System.Data.Common.DbParameter" />의 <see cref="P:System.Data.Common.DbParameter.Value" />입니다.</param>
      <returns>컬렉션에 있는 <see cref="T:System.Data.Common.DbParameter" /> 개체의 인덱스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.AddRange(System.Array)">
      <summary>지정된 된 값을 가진 항목의 배열을 <see cref="T:System.Data.Common.DbParameterCollection" />에 추가합니다.</summary>
      <param name="values">컬렉션에 추가할 <see cref="T:System.Data.Common.DbParameter" /> 형식의 값 배열입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Clear">
      <summary>
        <see cref="T:System.Data.Common.DbParameterCollection" />에서 모든 <see cref="T:System.Data.Common.DbParameter" /> 값을 제거합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Contains(System.Object)">
      <summary>지정된 <see cref="T:System.Data.Common.DbParameter" /> 의 <see cref="P:System.Data.Common.DbParameter.Value" /> 가 컬렉션에 포함되어 있는지 여부를 나타냅니다.</summary>
      <param name="value">컬렉션에서 검색할 <see cref="P:System.Data.Common.DbParameter.Value" /> 의 <see cref="T:System.Data.Common.DbParameter" /> 입니다.</param>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" />가 컬렉션에 있으면 <see langword="true" />이고, 있지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Contains(System.String)">
      <summary>지정된 이름을 갖는 <see cref="T:System.Data.Common.DbParameter" />가 컬렉션에 있는지 여부를 나타냅니다.</summary>
      <param name="value">컬렉션에서 검색할 <see cref="T:System.Data.Common.DbParameter" />의 이름입니다.</param>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" />가 컬렉션에 있으면 <see langword="true" />이고, 있지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>지정된 인덱스에서 시작하는 컬렉션에 항목 배열을 복사합니다.</summary>
      <param name="array">컬렉션에 복사할 항목의 배열입니다.</param>
      <param name="index">항목을 복사할 컬렉션의 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetEnumerator">
      <summary>.NET Framework 데이터 공급자별로 컬렉션에 대한 단순 반복을 지원하는 <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> 메서드를 표시합니다.</summary>
      <returns>컬렉션에서 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetParameter(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.Data.Common.DbParameter" /> 개체를 반환합니다.</summary>
      <param name="index">컬렉션에 있는 <see cref="T:System.Data.Common.DbParameter" /> 의 인덱스입니다.</param>
      <returns>컬렉션의 지정된 인덱스에 있는 <see cref="T:System.Data.Common.DbParameter" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.GetParameter(System.String)">
      <summary>지정된 이름의 <see cref="T:System.Data.Common.DbParameter" /> 개체를 반환합니다.</summary>
      <param name="parameterName">컬렉션의 <see cref="T:System.Data.Common.DbParameter" /> 이름입니다.</param>
      <returns>지정된 이름의 <see cref="T:System.Data.Common.DbParameter" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.IndexOf(System.Object)">
      <summary>지정된 <see cref="T:System.Data.Common.DbParameter" /> 개체의 인덱스를 반환합니다.</summary>
      <param name="value">컬렉션의 <see cref="T:System.Data.Common.DbParameter" /> 개체입니다.</param>
      <returns>지정된 <see cref="T:System.Data.Common.DbParameter" /> 개체의 인덱스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.IndexOf(System.String)">
      <summary>지정된 이름의 <see cref="T:System.Data.Common.DbParameter" /> 개체의 인덱스를 반환합니다.</summary>
      <param name="parameterName">컬렉션에서 <see cref="T:System.Data.Common.DbParameter" /> 개체의 이름입니다.</param>
      <returns>지정된 이름의 <see cref="T:System.Data.Common.DbParameter" /> 개체의 인덱스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Insert(System.Int32,System.Object)">
      <summary>지정된 이름을 갖는 <see cref="T:System.Data.Common.DbParameter" /> 개체의 지정한 인덱스를 지정한 컬렉션의 컬렉션에 삽입합니다.</summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> 개체를 삽입할 인덱스입니다.</param>
      <param name="value">컬렉션에 삽입할 <see cref="T:System.Data.Common.DbParameter" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.Remove(System.Object)">
      <summary>컬렉션에서 지정된 <see cref="T:System.Data.Common.DbParameter" /> 개체를 제거합니다.</summary>
      <param name="value">제거할 <see cref="T:System.Data.Common.DbParameter" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.RemoveAt(System.Int32)">
      <summary>지정된 <see cref="T:System.Data.Common.DbParameter" /> 개체를 컬렉션에서 제거합니다.</summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> 개체가 있는 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.RemoveAt(System.String)">
      <summary>컬렉션에서 지정된 이름의 <see cref="T:System.Data.Common.DbParameter" /> 개체를 제거합니다.</summary>
      <param name="parameterName">제거할 <see cref="T:System.Data.Common.DbParameter" /> 개체의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.SetParameter(System.Int32,System.Data.Common.DbParameter)">
      <summary>지정된 인덱스에 있는 <see cref="T:System.Data.Common.DbParameter" /> 개체를 새 값으로 설정합니다.</summary>
      <param name="index">
        <see cref="T:System.Data.Common.DbParameter" /> 개체가 있는 인덱스입니다.</param>
      <param name="value">새 <see cref="T:System.Data.Common.DbParameter" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.SetParameter(System.String,System.Data.Common.DbParameter)">
      <summary>지정된 이름의 <see cref="T:System.Data.Common.DbParameter" /> 개체를 새 값으로 설정합니다.</summary>
      <param name="parameterName">컬렉션에서 <see cref="T:System.Data.Common.DbParameter" /> 개체의 이름입니다.</param>
      <param name="value">새 <see cref="T:System.Data.Common.DbParameter" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.System#Collections#IList#Add(System.Object)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Add(System.Object)" />를 참조하세요.</summary>
      <param name="value">이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Add(System.Object)" />를 참조하세요.</param>
      <returns>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Add(System.Object)" />를 참조하세요.</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.System#Collections#IList#Contains(System.Object)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Contains(System.Object)" />를 참조하세요.</summary>
      <param name="value">이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Contains(System.Object)" />를 참조하세요.</param>
      <returns>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Contains(System.Object)" />를 참조하세요.</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />를 참조하세요.</summary>
      <param name="value">이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />를 참조하세요.</param>
      <returns>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />를 참조하세요.</returns>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />를 참조하세요.</summary>
      <param name="index">이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />를 참조하세요.</param>
      <param name="value">이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />를 참조하세요.</param>
    </member>
    <member name="M:System.Data.Common.DbParameterCollection.System#Collections#IList#Remove(System.Object)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Remove(System.Object)" />를 참조하세요.</summary>
      <param name="value">이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Remove(System.Object)" />를 참조하세요.</param>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Count">
      <summary>컬렉션의 항목 수를 지정합니다.</summary>
      <returns>컬렉션의 항목 수입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsFixedSize">
      <summary>컬렉션이 고정 크기인지 여부를 지정합니다.</summary>
      <returns>컬렉션이 고정 크기이면<see langword="true" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsReadOnly">
      <summary>컬렉션이 읽기 전용인지 여부를 지정합니다.</summary>
      <returns>컬렉션이 읽기 전용이면<see langword="true" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.IsSynchronized">
      <summary>컬렉션이 동기화되었는지 여부를 지정합니다.</summary>
      <returns>컬렉션이 동기화되면<see langword="true" /> 이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Item(System.Int32)">
      <summary>지정된 인덱스에 있는 <see cref="T:System.Data.Common.DbParameter" />를 가져오거나 설정합니다.</summary>
      <param name="index">이 매개 변수의 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 인덱스가 없는 경우</exception>
      <returns>지정한 인덱스에 있는 <see cref="T:System.Data.Common.DbParameter" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.Item(System.String)">
      <summary>지정된 이름을 가진 <see cref="T:System.Data.Common.DbParameter" />를 가져오거나 설정합니다.</summary>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 인덱스가 없는 경우</exception>
      <returns>지정된 이름을 가진 <see cref="T:System.Data.Common.DbParameter" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.SyncRoot">
      <summary>컬렉션에 대한 액세스를 동기화하는 데 사용될 <see cref="T:System.Object" /> 를 지정합니다.</summary>
      <returns>
        <see cref="T:System.Object" /> 에 대한 액세스를 동기화하는 데 사용될 <see cref="T:System.Data.Common.DbParameterCollection" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Collections#IList#Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbParameterCollection.System#Data#IDataParameterCollection#Item(System.String)">
      <summary>지정한 인덱스에 있는 매개 변수를 가져오거나 설정합니다.</summary>
      <param name="parameterName">검색할 매개 변수의 이름입니다.</param>
      <returns>지정한 인덱스에 있는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderFactories">
      <summary>
        <see cref="T:System.Data.Common.DbProviderFactory" /> 클래스의 인스턴스를 하나 이상 만드는 데 사용되는 정적 메서드의 집합을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.Data.Common.DbConnection)">
      <summary>
        <see cref="T:System.Data.Common.DbProviderFactory" />의 인스턴스를 반환합니다.</summary>
      <param name="connection">사용하는 연결입니다.</param>
      <returns>지정된 연결에 대한 <see cref="T:System.Data.Common.DbProviderFactory" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.Data.DataRow)">
      <summary>
        <see cref="T:System.Data.Common.DbProviderFactory" />의 인스턴스를 반환합니다.</summary>
      <param name="providerRow">공급자의 구성 정보를 포함하는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <returns>지정된 <see cref="T:System.Data.Common.DbProviderFactory" />에 대한 <see cref="T:System.Data.DataRow" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactory(System.String)">
      <summary>
        <see cref="T:System.Data.Common.DbProviderFactory" />의 인스턴스를 반환합니다.</summary>
      <param name="providerInvariantName">공급자의 고정 이름입니다.</param>
      <returns>지정된 공급자 이름에 대한 <see cref="T:System.Data.Common.DbProviderFactory" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetFactoryClasses">
      <summary>
        <see cref="T:System.Data.DataTable" />를 구현하는 설치된 모든 공급자에 대한 정보를 포함하는 <see cref="T:System.Data.Common.DbProviderFactory" />을 반환합니다.</summary>
      <returns>다음 데이터가 들어 있는 <see cref="T:System.Data.DataTable" /> 개체를 포함하는 <see cref="T:System.Data.DataRow" />입니다. 
 <list type="table"><listheader><term> 열 서수</term><description> 열 이름</description><description> 설명</description></listheader><item><term> 0</term><description> Name</description><description> 사용자가 읽을 수 있는 데이터 공급자의 이름입니다.</description></item><item><term> 1</term><description> 설명</description><description> 사용자가 읽을 수 있는 데이터 공급자에 대한 설명입니다.</description></item><item><term> 2</term><description> InvariantName</description><description> 데이터 공급자를 참조하기 위해 프로그래밍 방식으로 사용할 수 있는 이름입니다.</description></item><item><term> 3</term><description> AssemblyQualifiedName</description><description> 개체를 인스턴스화하기에 충분한 정보를 포함하는 팩터리 클래스의 정규화된 이름입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.GetProviderInvariantNames">
      <summary>
        <see cref="T:System.Data.Common.DbProviderFactory" />의 등록된 모든 인스턴스에 대한 고정 공급자 이름을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbProviderFactory" />의 등록된 모든 인스턴스에 대한 고정 공급자 이름입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.Data.Common.DbProviderFactory)">
      <summary>지정된 고정 공급자 이름으로 <see cref="T:System.Data.Common.DbProviderFactory" />의 인스턴스를 등록합니다.</summary>
      <param name="providerInvariantName">공급자를 등록할 고정 공급자 이름입니다.</param>
      <param name="factory">등록될 공급자 팩터리의 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.String)">
      <summary>주어진 정규화된 어셈블리 이름을 사용하여 지정된 고정 공급자 이름으로 <see cref="T:System.Data.Common.DbProviderFactory" />를 등록합니다.</summary>
      <param name="providerInvariantName">공급자를 등록할 고정 공급자 이름입니다.</param>
      <param name="factoryTypeAssemblyQualifiedName">
        <see cref="T:System.Data.Common.DbProviderFactory" />에 대한 정규화된 어셈블리 이름입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.RegisterFactory(System.String,System.Type)">
      <summary>주어진 형식을 사용하여 지정된 고정 공급자 이름으로 <see cref="T:System.Data.Common.DbProviderFactory" />를 등록합니다.</summary>
      <param name="providerInvariantName">공급자를 등록할 고정 공급자 이름입니다.</param>
      <param name="providerFactoryClass">
        <see cref="T:System.Data.Common.DbProviderFactory" />를 나타내는 형식입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.TryGetFactory(System.String,System.Data.Common.DbProviderFactory@)">
      <summary>지정된 고정 공급자 이름으로 등록된 <see cref="T:System.Data.Common.DbProviderFactory" /> 가져오기를 시도합니다.</summary>
      <param name="providerInvariantName">조회할 고정 공급자 이름입니다.</param>
      <param name="factory">이 메서드가 반환될 때 이름이 있으면 지정된 고정 공급자 이름과 연관된 <see cref="T:System.Data.Common.DbProviderFactory" />를 포함하고, 그렇지 않으면 <see langword="null" />을 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns>지정된 고정 공급자 이름으로 공급자가 등록되어 있으면, <see langword="true" />, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactories.UnregisterFactory(System.String)">
      <summary>지정된 공급자 고정 이름에 대한 <see cref="T:System.Data.Common.DbProviderFactory" /> 등록을 제거합니다.</summary>
      <param name="providerInvariantName">제거할 등록의 고정 공급자 이름입니다.</param>
      <returns>등록을 성공적으로 찾아서 제거한 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. <paramref name="providerInvariantName" />에 대한 등록을 찾을 수 없는 경우 이 메서드는 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderFactory">
      <summary>데이터 소스 클래스의 공급자 구현에 대한 인스턴스를 만드는 데 사용되는 메서드의 집합을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Data.Common.DbProviderFactory" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateCommand">
      <summary>
        <see cref="T:System.Data.Common.DbCommand" /> 클래스를 구현하는 공급자 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommand" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateCommandBuilder">
      <summary>
        <see cref="T:System.Data.Common.DbCommandBuilder" /> 클래스를 구현하는 공급자 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbCommandBuilder" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateConnection">
      <summary>
        <see cref="T:System.Data.Common.DbConnection" /> 클래스를 구현하는 공급자 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnection" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateConnectionStringBuilder">
      <summary>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" /> 클래스를 구현하는 공급자 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbConnectionStringBuilder" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateDataAdapter">
      <summary>
        <see cref="T:System.Data.Common.DbDataAdapter" /> 클래스를 구현하는 공급자 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataAdapter" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateDataSourceEnumerator">
      <summary>
        <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 클래스를 구현하는 공급자 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbDataSourceEnumerator" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbProviderFactory.CreateParameter">
      <summary>
        <see cref="T:System.Data.Common.DbParameter" /> 클래스를 구현하는 공급자 클래스의 새 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DbParameter" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateCommandBuilder">
      <summary>이 <see cref="T:System.Data.Common.DbProviderFactory" /> 인스턴스가 <see cref="T:System.Data.Common.DbCommandBuilder" /> 클래스를 지원하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 이 인스턴스가 클래스를 지원 하면이 <see cref="T:System.Data.Common.DbCommandBuilder" /> 고, 그렇지 않으면 <see langword="false" /> 입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateDataAdapter">
      <summary>이 <see cref="T:System.Data.Common.DbProviderFactory" /> 인스턴스가 <see cref="T:System.Data.Common.DbDataAdapter" /> 클래스를 지원하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 인스턴스가 클래스를 지원 하면 <see cref="T:System.Data.Common.DbDataAdapter" /> 이 고, 그렇지 않으면 <see langword="false" /> 입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbProviderFactory.CanCreateDataSourceEnumerator">
      <summary>이 <see cref="T:System.Data.Common.DbProviderFactory" /> 인스턴스가 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 클래스를 지원하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 인스턴스가 클래스를 지원 하면 <see cref="T:System.Data.Common.DbDataSourceEnumerator" /> 이 고, 그렇지 않으면 <see langword="false" /> 입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute">
      <summary>공급자별 형식을 설정할 때 사용할 강력한 형식의 매개 변수 클래스에 있는 공급자별 속성을 식별합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbProviderSpecificTypePropertyAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DbProviderSpecificTypePropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="isProviderSpecificTypeProperty">이 속성이 공급자별 속성인지 여부를 지정합니다.</param>
    </member>
    <member name="P:System.Data.Common.DbProviderSpecificTypePropertyAttribute.IsProviderSpecificTypeProperty">
      <summary>특성 사용 속성이 공급자별 형식인지 여부를 나타냅니다.</summary>
      <returns>이 특성이 적용되는 속성이 공급자별 형식 속성이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Data.Common.DbTransaction">
      <summary>데이터베이스 트랜잭션의 핵심 동작을 정의하고 데이터베이스 관련 트랜잭션에 대한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.#ctor">
      <summary>새 <see cref="T:System.Data.Common.DbTransaction" /> 개체를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Commit">
      <summary>파생 클래스에서 재정의되는 경우 데이터베이스 트랜잭션을 커밋합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.CommitAsync(System.Threading.CancellationToken)">
      <summary>데이터베이스 트랜잭션을 비동기적으로 커밋합니다.</summary>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 선택적 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 작업을 나타내는 <see cref="T:System.Threading.Tasks.Task" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Dispose">
      <summary>
        <see cref="T:System.Data.Common.DbTransaction" />에서 사용하는 관리되지 않는 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.Common.DbTransaction" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">
        <see langword="true" />인 경우 이 메서드는 이 <see cref="T:System.Data.Common.DbTransaction" />에서 참조하는 관리되는 개체가 보유하고 있는 리소스를 모두 해제합니다.</param>
    </member>
    <member name="M:System.Data.Common.DbTransaction.DisposeAsync">
      <summary>트랜잭션 개체를 비동기적으로 삭제합니다.</summary>
      <returns>비동기 작업을 나타내는 <see cref="T:System.Threading.Tasks.ValueTask" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Release(System.String)">
      <summary>현재 트랜잭션에 이전에 정의된 저장점을 제거합니다. 이렇게 하면 트랜잭션이 종료되기 전에 시스템에서 일부 리소스를 회수할 수 있습니다.</summary>
      <param name="savepointName">해제할 저장점의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbTransaction.ReleaseAsync(System.String,System.Threading.CancellationToken)">
      <summary>현재 트랜잭션에 이전에 정의된 저장점을 제거합니다. 이렇게 하면 트랜잭션이 종료되기 전에 시스템에서 일부 리소스를 회수할 수 있습니다.</summary>
      <param name="savepointName">해제할 저장점의 이름입니다.</param>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 선택적 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 작업을 나타내는 <see cref="T:System.Threading.Tasks.Task" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Rollback">
      <summary>파생 클래스에서 재정의되는 경우 보류 중 상태에서 트랜잭션을 롤백합니다.</summary>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Rollback(System.String)">
      <summary>지정된 저장점이 설정된 후에 실행된 모든 명령을 롤백합니다.</summary>
      <param name="savepointName">롤백할 저장점의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbTransaction.RollbackAsync(System.String,System.Threading.CancellationToken)">
      <summary>지정된 저장점이 설정된 후에 실행된 모든 명령을 롤백합니다.</summary>
      <param name="savepointName">롤백할 저장점의 이름입니다.</param>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 선택적 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 작업을 나타내는 <see cref="T:System.Threading.Tasks.Task" />입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.RollbackAsync(System.Threading.CancellationToken)">
      <summary>보류 중 상태에서 트랜잭션을 비동기적으로 롤백합니다.</summary>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 선택적 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 작업(operation)을 나타내는 작업(task)입니다.</returns>
    </member>
    <member name="M:System.Data.Common.DbTransaction.Save(System.String)">
      <summary>트랜잭션에 저장점을 만듭니다. 이렇게 하면 저장점이 설정된 후에 실행되는 모든 명령을 롤백하여 트랜잭션 상태를 저장점 시점의 상태로 복원할 수 있습니다.</summary>
      <param name="savepointName">만들 저장점의 이름입니다.</param>
    </member>
    <member name="M:System.Data.Common.DbTransaction.SaveAsync(System.String,System.Threading.CancellationToken)">
      <summary>트랜잭션에 저장점을 만듭니다. 이렇게 하면 저장점이 설정된 후에 실행되는 모든 명령을 롤백하여 트랜잭션 상태를 저장점 시점의 상태로 복원할 수 있습니다.</summary>
      <param name="savepointName">만들 저장점의 이름입니다.</param>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 선택적 토큰입니다. 기본값은 <see cref="P:System.Threading.CancellationToken.None" />입니다.</param>
      <returns>비동기 작업을 나타내는 <see cref="T:System.Threading.Tasks.Task" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.Connection">
      <summary>트랜잭션과 관련된 <see cref="T:System.Data.Common.DbConnection" /> 개체를 지정합니다.</summary>
      <returns>트랜잭션과 연결된 <see cref="T:System.Data.Common.DbConnection" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.DbConnection">
      <summary>파생 클래스에서 재정의되는 경우 트랜잭션과 연결된 <see cref="T:System.Data.Common.DbConnection" /> 개체를 가져옵니다.</summary>
      <returns>트랜잭션과 연결된 <see cref="T:System.Data.Common.DbConnection" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.IsolationLevel">
      <summary>파생 클래스에서 재정의되는 경우 이 트랜잭션의 격리 수준을 가져옵니다.</summary>
      <returns>이 트랜잭션의 격리 수준입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.SupportsSavepoints">
      <summary>이 <see cref="T:System.Data.Common.DbTransaction" /> 인스턴스가 데이터베이스 저장점을 지원하는지 여부를 나타내는 값을 가져옵니다.
<see langword="false" />인 경우 <see cref="M:System.Data.Common.DbTransaction.SaveAsync(System.String,System.Threading.CancellationToken)" />, <see cref="M:System.Data.Common.DbTransaction.RollbackAsync(System.String,System.Threading.CancellationToken)" /> 및 <see cref="M:System.Data.Common.DbTransaction.ReleaseAsync(System.String,System.Threading.CancellationToken)" /> 메서드와 해당 동기 메서드에서 <see cref="T:System.NotSupportedException" />을 throw할 것으로 예상됩니다.</summary>
      <returns>
        <see langword="true" /> 이 <see cref="T:System.Data.Common.DbTransaction" /> 인스턴스에서 데이터베이스 저장점을 지원 하면이 고, 그렇지 않으면 <see langword="false" /> 입니다.</returns>
    </member>
    <member name="P:System.Data.Common.DbTransaction.System#Data#IDbTransaction#Connection">
      <summary>트랜잭션과 연결된 <see cref="T:System.Data.Common.DbConnection" /> 개체를 가져오거나, 트랜잭션이 더 이상 유효하지 않을 경우 null 참조를 가져옵니다.</summary>
      <returns>트랜잭션과 연결된 <see cref="T:System.Data.Common.DbConnection" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Data.Common.GroupByBehavior">
      <summary>GROUP BY 절의 열과 SELECT 문의 SELECT 목록에 있는 집계되지 않은 열 간의 관계를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.ExactMatch">
      <summary>GROUP BY 절에 SELECT 목록의 집계되지 않은 열이 모두 포함되어야 하고 SELECT 목록에 없는 다른 열은 포함되지 않아야 합니다.</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.MustContainAll">
      <summary>GROUP BY 절에 SELECT 목록의 집계되지 않은 열이 모두 포함되어야 하고 SELECT 목록에 없는 다른 열도 포함될 수 있습니다.</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.NotSupported">
      <summary>GROUP BY 절이 지원되지 않습니다.</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.Unknown">
      <summary>GROUP BY 절에 대한 지원을 알 수 없습니다.</summary>
    </member>
    <member name="F:System.Data.Common.GroupByBehavior.Unrelated">
      <summary>GROUP BY 절의 열과 SELECT 목록의 집계되지 않은 열이 관련되어 있지 않습니다. 어떠한 열로도 그룹화할 수 있습니다.</summary>
    </member>
    <member name="T:System.Data.Common.IDbColumnSchemaGenerator">
      <summary>열 스키마를 생성합니다.</summary>
    </member>
    <member name="M:System.Data.Common.IDbColumnSchemaGenerator.GetColumnSchema">
      <summary>열 스키마(<see cref="T:System.Data.Common.DbColumn" /> 컬렉션)를 가져옵니다.</summary>
      <returns>열 스키마(<see cref="T:System.Data.Common.DbColumn" /> 컬렉션)입니다.</returns>
    </member>
    <member name="T:System.Data.Common.IdentifierCase">
      <summary>시스템 카탈로그를 검색할 때 데이터 소스에서 식별자를 처리하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Insensitive">
      <summary>데이터 소스에서 시스템 카탈로그를 검색할 때 식별자의 대/소문자를 무시합니다. 식별자 "ab"와 "AB"는 일치합니다.</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Sensitive">
      <summary>데이터 소스에서 시스템 카탈로그를 검색할 때 식별자의 대/소문자를 구별합니다. 식별자 "ab"와 "AB"는 일치하지 않습니다.</summary>
    </member>
    <member name="F:System.Data.Common.IdentifierCase.Unknown">
      <summary>데이터 소스에서 식별자 대/소문자와 관련하여 모호한 규칙을 갖고 있으므로 이 정보를 구별할 수 없습니다.</summary>
    </member>
    <member name="T:System.Data.Common.RowUpdatedEventArgs">
      <summary>.NET Framework 데이터 공급자의 <see langword="RowUpdated" /> 이벤트에 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
        <see cref="T:System.Data.Common.RowUpdatedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" />로 보내는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" />가 호출될 때 실행되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</param>
      <param name="statementType">실행되는 SQL 문 형식입니다.</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" />로 보내는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</param>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[])">
      <summary>수정한 행에 대한 참조를 제공된 배열에 복사합니다.</summary>
      <param name="array">복사해 넣을 <see cref="T:System.Data.DataRow" />의 배열입니다.</param>
    </member>
    <member name="M:System.Data.Common.RowUpdatedEventArgs.CopyToRows(System.Data.DataRow[],System.Int32)">
      <summary>수정한 행에 대한 참조를 제공된 배열에 복사합니다.</summary>
      <param name="array">복사해 넣을 <see cref="T:System.Data.DataRow" />의 배열입니다.</param>
      <param name="arrayIndex">복사를 시작할 배열의 인덱스입니다.</param>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Command">
      <summary>
        <see cref="T:System.Data.IDbCommand" />가 호출될 때 실행되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />가 호출될 때 실행되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Errors">
      <summary>
        <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />가 실행될 때 .NET Framework 데이터 공급자가 생성하는 오류를 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />가 실행될 때 .NET Framework 데이터 공급자가 생성하는 오류입니다.</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.RecordsAffected">
      <summary>SQL 문을 실행하여 변경, 삽입 또는 삭제된 행 수를 가져옵니다.</summary>
      <returns>변경, 삽입 또는 삭제된 행 수입니다. 영향을 받은 행이 없거나 문이 실패하면 0이고, SELECT 문의 경우는 -1입니다.</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Row">
      <summary>
        <see cref="T:System.Data.DataRow" />로 보내는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRow" />로 보내는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.RowCount">
      <summary>업데이트된 레코드의 일괄 처리에서 처리된 행의 수를 가져옵니다.</summary>
      <returns>처리된 행의 수를 지정하는 <see langword="int" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.StatementType">
      <summary>실행되는 SQL 문 형식을 가져옵니다.</summary>
      <returns>실행되는 SQL 문 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.Status">
      <summary>
        <see cref="T:System.Data.UpdateStatus" /> 속성의 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.UpdateStatus" /> 값 중 하나입니다. 기본값은 <see langword="Continue" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatedEventArgs.TableMapping">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" />로 보내는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" />로 보내는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="T:System.Data.Common.RowUpdatingEventArgs">
      <summary>.NET Framework 데이터 공급자의 RowUpdating 이벤트에 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.Common.RowUpdatingEventArgs.#ctor(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)">
      <summary>
        <see cref="T:System.Data.Common.RowUpdatingEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataRow">
        <see cref="T:System.Data.DataRow" />할 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</param>
      <param name="command">
        <see cref="T:System.Data.IDbCommand" />가 호출될 때 실행할 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</param>
      <param name="statementType">실행할 SQL 문 형식입니다.</param>
      <param name="tableMapping">
        <see cref="T:System.Data.Common.DataTableMapping" />로 보낼 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</param>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.BaseCommand">
      <summary>이 클래스의 인스턴스에 대한 <see cref="T:System.Data.IDbCommand" /> 개체를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 도중 실행할 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Command">
      <summary>
        <see cref="T:System.Data.IDbCommand" /> 작업 도중 실행할 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" /> 도중 실행할 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Errors">
      <summary>
        <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />가 실행할 때 .NET Framework 데이터 공급자가 생성하는 오류를 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />가 실행할 때 .NET Framework 데이터 공급자가 생성하는 오류입니다.</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Row">
      <summary>INSERT, UPDATE 또는 DELETE 작업의 일부로 서버에 전송될 <see cref="T:System.Data.DataRow" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRow" />로 보낼 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.StatementType">
      <summary>실행할 SQL 문 형식을 가져옵니다.</summary>
      <returns>실행할 SQL 문 형식입니다.</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.Status">
      <summary>
        <see cref="T:System.Data.UpdateStatus" /> 속성의 <see cref="P:System.Data.Common.RowUpdatedEventArgs.Command" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.UpdateStatus" /> 값 중 하나입니다. 기본값은 <see langword="Continue" />입니다.</returns>
    </member>
    <member name="P:System.Data.Common.RowUpdatingEventArgs.TableMapping">
      <summary>
        <see cref="T:System.Data.Common.DataTableMapping" />로 보낼 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.Common.DataTableMapping" />로 보낼 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="T:System.Data.Common.SchemaTableColumn">
      <summary>데이터베이스 테이블에 대한 스키마의 열 메타데이터를 설명합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.AllowDBNull">
      <summary>
        <see langword="DBNull" /> 값이 허용되는지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseColumnName">
      <summary>스키마 테이블의 열 이름을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseSchemaName">
      <summary>스키마 테이블의 스키마 이름을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.BaseTableName">
      <summary>스키마 테이블의 테이블 이름을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnName">
      <summary>스키마 테이블의 열 이름을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnOrdinal">
      <summary>열의 서수를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ColumnSize">
      <summary>열의 크기를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.DataType">
      <summary>열의 데이터 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsAliased">
      <summary>이 열에 별칭이 지정되어 있는지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsExpression">
      <summary>이 열이 식인지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsKey">
      <summary>이 열이 테이블의 키인지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsLong">
      <summary>이 열에 긴 데이터가 포함되어 있는지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.IsUnique">
      <summary>고유 제약 조건이 이 열에 적용되는지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NonVersionedProviderType">
      <summary>버전이 없는 공급자별 열 데이터 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NumericPrecision">
      <summary>데이터가 숫자인 경우 열 데이터의 전체 자릿수를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.NumericScale">
      <summary>데이터가 숫자인 경우 열 데이터의 소수 자릿수를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableColumn.ProviderType">
      <summary>열의 공급자별 데이터 형식을 지정합니다.</summary>
    </member>
    <member name="T:System.Data.Common.SchemaTableOptionalColumn">
      <summary>데이터베이스 테이블에 대한 스키마의 선택적 열 메타데이터를 설명합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementSeed">
      <summary>새 ID 열의 시리즈에 할당되는 값을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.AutoIncrementStep">
      <summary>ID열의 값 간의 증분을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseCatalogName">
      <summary>최신 쿼리의 결과와 연결된 카탈로그의 이름입니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseColumnNamespace">
      <summary>열의 네임스페이스입니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseServerName">
      <summary>열의 서버 이름입니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.BaseTableNamespace">
      <summary>열이 포함된 테이블의 네임스페이스입니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.ColumnMapping">
      <summary>열의 매핑을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.DefaultValue">
      <summary>열의 기본값입니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.Expression">
      <summary>열을 컴퓨팅하는 데 사용되는 식입니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsAutoIncrement">
      <summary>열의 값이 자동으로 증가하는지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsHidden">
      <summary>이 열이 숨겨져 있는지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsReadOnly">
      <summary>이 열이 읽기 전용인지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.IsRowVersion">
      <summary>이 열에 행 버전 정보가 포함되어 있는지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SchemaTableOptionalColumn.ProviderSpecificDataType">
      <summary>열의 공급자별 데이터 형식을 지정합니다.</summary>
    </member>
    <member name="T:System.Data.Common.SupportedJoinOperators">
      <summary>데이터 소스에서 지원하는 Transact-SQL 조인 문의 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.FullOuter">
      <summary>데이터 소스에서 완전 외부 조인을 지원합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.Inner">
      <summary>데이터 소스에서 내부 조인을 지원합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.LeftOuter">
      <summary>데이터 소스에서 왼쪽 우선 외부 조인을 지원합니다.</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.None">
      <summary>데이터 소스에서 조인 쿼리를 지원하지 않습니다.</summary>
    </member>
    <member name="F:System.Data.Common.SupportedJoinOperators.RightOuter">
      <summary>데이터 소스에서 오른쪽 우선 외부 조인을 지원합니다.</summary>
    </member>
    <member name="T:System.Data.ConflictOption">
      <summary>데이터 소스의 변경 사항에 대한 충돌을 감지하고 이를 해결하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.ConflictOption.CompareAllSearchableValues">
      <summary>Update 및 Delete 문의 WHERE 절에는 테이블에서 검색할 수 있는 열이 모두 포함됩니다. 이는 <see langword="CompareAllValuesUpdate" /> | <see langword="CompareAllValuesDelete" />를 지정하는 것과 같습니다.</summary>
    </member>
    <member name="F:System.Data.ConflictOption.CompareRowVersion">
      <summary>테이블에 타임스탬프 열이 있으면 생성된 모든 Update 문의 WHERE 절에 이러한 열이 사용됩니다. 이는 <see langword="CompareRowVersionUpdate" /> | <see langword="CompareRowVersionDelete" />를 지정하는 것과 같습니다.</summary>
    </member>
    <member name="F:System.Data.ConflictOption.OverwriteChanges">
      <summary>모든 Update 및 Delete 문의 WHERE 절에는 <see cref="P:System.Data.DataTable.PrimaryKey" /> 열만 포함됩니다. <see cref="P:System.Data.DataTable.PrimaryKey" />를 정의하지 않으면 검색할 수 있는 열이 모두 WHERE 절에 포함됩니다. <see langword="OverwriteChangesUpdate" /> | <see langword="OverwriteChangesDelete" />와 동일합니다.</summary>
    </member>
    <member name="T:System.Data.ConnectionState">
      <summary>데이터 소스에 대한 현재 연결 상태를 설명합니다.</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Broken">
      <summary>데이터 소스 연결이 끊어집니다. 이 상황은 연결이 열린 이후에만 발생할 수 있습니다. 이 경우 연결이 닫힌 다음 다시 열릴 수 있습니다. 이 값은 이후에 릴리스되는 제품 버전에 사용하기 위해 예약되었습니다.</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Closed">
      <summary>연결이 닫힌 경우</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Connecting">
      <summary>연결 개체가 데이터 소스에 연결됩니다.</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Executing">
      <summary>연결 개체가 명령을 실행하고 있습니다. 이 값은 이후에 릴리스되는 제품 버전에 사용하기 위해 예약되었습니다.</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Fetching">
      <summary>연결 개체가 데이터를 검색하고 있습니다. 이 값은 이후에 릴리스되는 제품 버전에 사용하기 위해 예약되었습니다.</summary>
    </member>
    <member name="F:System.Data.ConnectionState.Open">
      <summary>연결이 열립니다.</summary>
    </member>
    <member name="T:System.Data.Constraint">
      <summary>하나 이상의 <see cref="T:System.Data.DataColumn" /> 개체에 적용할 수 있는 제약 조건을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.Constraint.CheckStateForProperty">
      <summary>이 제약 조건이 속한 <see cref="T:System.Data.DataSet" />를 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.Constraint.SetDataSet(System.Data.DataSet)">
      <summary>제약 조건의 <see cref="T:System.Data.DataSet" />을 설정합니다.</summary>
      <param name="dataSet">이 제약 조건이 속할 <see cref="T:System.Data.DataSet" />입니다.</param>
    </member>
    <member name="M:System.Data.Constraint.ToString">
      <summary>
        <see cref="P:System.Data.Constraint.ConstraintName" />이 있는 경우 문자열로 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Data.Constraint.ConstraintName" />의 문자열 값을 반환합니다.</returns>
    </member>
    <member name="P:System.Data.Constraint._DataSet">
      <summary>이 제약 조건이 속한 <see cref="T:System.Data.DataSet" />를 가져옵니다.</summary>
      <returns>제약 조건이 속한 <see cref="T:System.Data.DataSet" />입니다.</returns>
    </member>
    <member name="P:System.Data.Constraint.ConstraintName">
      <summary>
        <see cref="T:System.Data.ConstraintCollection" />의 제약 조건 이름입니다.</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.Constraint" /> 이름이 null 값이거나 빈 문자열인 경우</exception>
      <exception cref="T:System.Data.DuplicateNameException">
        <see cref="T:System.Data.ConstraintCollection" />에 이름이 같은 <see cref="T:System.Data.Constraint" />가 이미 있는 경우(대/소문자 구분 안 함)</exception>
      <returns>
        <see cref="T:System.Data.Constraint" />의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.Constraint.ExtendedProperties">
      <summary>사용자 정의 제약 조건 속성 컬렉션을 가져옵니다.</summary>
      <returns>사용자 지정 정보의 <see cref="T:System.Data.PropertyCollection" />입니다.</returns>
    </member>
    <member name="P:System.Data.Constraint.Table">
      <summary>제약 조건이 적용될 <see cref="T:System.Data.DataTable" />을 가져옵니다.</summary>
      <returns>제약 조건이 적용되는 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="T:System.Data.ConstraintCollection">
      <summary>
        <see cref="T:System.Data.DataTable" />에 대한 제약 조건 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="E:System.Data.ConstraintCollection.CollectionChanged">
      <summary>
        <see cref="T:System.Data.ConstraintCollection" /> 개체가 추가되거나 제거되어 <see cref="T:System.Data.Constraint" />이 변경될 때마다 발생합니다.</summary>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.Data.Constraint)">
      <summary>지정된 <see cref="T:System.Data.Constraint" /> 개체를 컬렉션에 추가합니다.</summary>
      <param name="constraint">추가할 <see langword="Constraint" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 인수가 null입니다.</exception>
      <exception cref="T:System.ArgumentException">제약 조건이 이미 이 컬렉션에 속해 있거나 다른 컬렉션에 속해 있는 경우</exception>
      <exception cref="T:System.Data.DuplicateNameException">컬렉션에 이미 같은 이름의 제약 조건이 있는 경우 (대/소문자를 구분하지 않고 비교합니다.)</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Boolean)">
      <summary>지정된 이름, <see cref="T:System.Data.UniqueConstraint" /> 및 해당 열이 기본 키인지 여부를 나타내는 값이 있는 새 <see cref="T:System.Data.DataColumn" />를 생성하여 컬렉션에 추가합니다.</summary>
      <param name="name">
        <see langword="UniqueConstraint" />의 이름입니다.</param>
      <param name="column">제약 조건이 적용되는 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <param name="primaryKey">열이 기본 키인지 여부를 지정합니다. <see langword="true" />이면 기본 키 열이 됩니다.</param>
      <exception cref="T:System.ArgumentException">제약 조건이 이미 이 컬렉션에 속해 있는 경우  
  
 -또는-  
  
 제약 조건이 다른 컬렉션에 속한 경우</exception>
      <exception cref="T:System.Data.DuplicateNameException">컬렉션에 지정된 이름의 제약 조건이 이미 있는 경우. (대/소문자를 구분하지 않고 비교합니다.)</exception>
      <returns>새 <see langword="UniqueConstraint" />입니다.</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>지정된 이름, 부모 열 및 자식 열을 사용하여 새 <see cref="T:System.Data.ForeignKeyConstraint" />를 만들어 컬렉션에 추가합니다.</summary>
      <param name="name">
        <see cref="T:System.Data.ForeignKeyConstraint" />의 이름입니다.</param>
      <param name="primaryKeyColumn">기본 키 또는 부모 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <param name="foreignKeyColumn">외래 키 또는 자식 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <returns>새 <see langword="ForeignKeyConstraint" />입니다.</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Boolean)">
      <summary>지정된 이름, <see cref="T:System.Data.UniqueConstraint" /> 개체의 배열 및 열이 기본 키인지 여부를 나타내는 값이 있는 새 <see cref="T:System.Data.DataColumn" />를 생성하여 컬렉션에 추가합니다.</summary>
      <param name="name">
        <see cref="T:System.Data.UniqueConstraint" />의 이름입니다.</param>
      <param name="columns">제약 조건이 적용되는 <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</param>
      <param name="primaryKey">열이 기본 키인지 여부를 지정합니다. <see langword="true" />이면 기본 키 열이 됩니다.</param>
      <exception cref="T:System.ArgumentException">제약 조건이 이미 이 컬렉션에 속해 있는 경우  
  
 -또는-  
  
 제약 조건이 다른 컬렉션에 속한 경우</exception>
      <exception cref="T:System.Data.DuplicateNameException">컬렉션에 지정된 이름의 제약 조건이 이미 있는 경우. (대/소문자를 구분하지 않고 비교합니다.)</exception>
      <returns>새 <see langword="UniqueConstraint" />입니다.</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>부모 열과 자식 열의 지정된 배열을 사용하여 새 <see cref="T:System.Data.ForeignKeyConstraint" />를 만들어 컬렉션에 추가합니다.</summary>
      <param name="name">
        <see cref="T:System.Data.ForeignKeyConstraint" />의 이름입니다.</param>
      <param name="primaryKeyColumns">기본 키 열 또는 부모 열인 <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</param>
      <param name="foreignKeyColumns">외래 키 열 또는 자식 열인 <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</param>
      <returns>새 <see langword="ForeignKeyConstraint" />입니다.</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])">
      <summary>지정된 <see cref="T:System.Data.ConstraintCollection" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="constraints">컬렉션에 추가할 <see cref="T:System.Data.ConstraintCollection" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.CanRemove(System.Data.Constraint)">
      <summary>
        <see cref="T:System.Data.Constraint" />를 제거할 수 있는지 나타냅니다.</summary>
      <param name="constraint">컬렉션에서 제거할 수 있는지 테스트할 <see cref="T:System.Data.Constraint" />입니다.</param>
      <returns>
        <see cref="T:System.Data.Constraint" />를 컬렉션에서 제거할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Clear">
      <summary>
        <see cref="T:System.Data.Constraint" /> 개체의 컬렉션을 지웁니다.</summary>
    </member>
    <member name="M:System.Data.ConstraintCollection.Contains(System.String)">
      <summary>이름으로 지정된 <see cref="T:System.Data.Constraint" />개체가 컬렉션에 있는지 여부를 나타냅니다.</summary>
      <param name="name">제약 조건의 <see cref="P:System.Data.Constraint.ConstraintName" />입니다.</param>
      <returns>컬렉션에 지정한 제약 조건이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.CopyTo(System.Data.Constraint[],System.Int32)">
      <summary>지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.IndexOf(System.Data.Constraint)">
      <summary>지정된 <see cref="T:System.Data.Constraint" />의 인덱스를 가져옵니다.</summary>
      <param name="constraint">검색할 <see cref="T:System.Data.Constraint" />입니다.</param>
      <returns>항목이 컬렉션에 있으면 <see cref="T:System.Data.Constraint" />의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.IndexOf(System.String)">
      <summary>이름으로 지정된 <see cref="T:System.Data.Constraint" />의 인덱스를 가져옵니다.</summary>
      <param name="constraintName">
        <see cref="T:System.Data.Constraint" />의 이름입니다.</param>
      <returns>인덱스가 컬렉션에 있으면 <see cref="T:System.Data.Constraint" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Data.ConstraintCollection.Remove(System.Data.Constraint)">
      <summary>지정된 <see cref="T:System.Data.Constraint" />를 컬렉션에서 제거합니다.</summary>
      <param name="constraint">제거할 <see cref="T:System.Data.Constraint" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="constraint" /> 인수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">제약 조건이 컬렉션에 속하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.ConstraintCollection.Remove(System.String)">
      <summary>컬렉션에서 이름으로 지정된 <see cref="T:System.Data.Constraint" /> 개체를 제거합니다.</summary>
      <param name="name">제거할 <see cref="T:System.Data.Constraint" />의 이름입니다.</param>
    </member>
    <member name="M:System.Data.ConstraintCollection.RemoveAt(System.Int32)">
      <summary>컬렉션의 지정한 인덱스에서 <see cref="T:System.Data.Constraint" /> 개체를 제거합니다.</summary>
      <param name="index">제거할 <see cref="T:System.Data.Constraint" />의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">컬렉션에 이 인덱스의 제약 조건이 없는 경우</exception>
    </member>
    <member name="P:System.Data.ConstraintCollection.Item(System.Int32)">
      <summary>컬렉션에서 지정된 인덱스의 <see cref="T:System.Data.Constraint" />을 가져옵니다.</summary>
      <param name="index">반환할 제약 조건의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">인덱스 값이 컬렉션의 항목 수보다 큰 경우</exception>
      <returns>지정한 인덱스에 있는 <see cref="T:System.Data.Constraint" />입니다.</returns>
    </member>
    <member name="P:System.Data.ConstraintCollection.Item(System.String)">
      <summary>컬렉션에서 지정된 이름을 가진 <see cref="T:System.Data.Constraint" />을 가져옵니다.</summary>
      <param name="name">반환할 제약 조건의 <see cref="P:System.Data.Constraint.ConstraintName" />입니다.</param>
      <returns>지정된 이름을 가진 <see cref="T:System.Data.Constraint" />이고, <see cref="T:System.Data.Constraint" />가 없는 경우 null 값입니다.</returns>
    </member>
    <member name="T:System.Data.ConstraintException">
      <summary>제약 조건을 위반하는 작업을 시도할 때 throw 되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor">
      <summary>
        <see cref="T:System.Data.ConstraintException" /> 클래스의 새 인스턴스를 초기화합니다. 이는 매개 변수가 없는 생성자입니다.</summary>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 직렬화 및 스트리밍 컨텍스트를 사용하여 <see cref="T:System.Data.ConstraintException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화 또는 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스 및 대상에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.ConstraintException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.ConstraintException.#ctor(System.String,System.Exception)">
      <summary>지정된 문자열과 내부 예외를 사용하여 <see cref="T:System.Data.ConstraintException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외가 throw되었을 때 표시할 문자열입니다.</param>
      <param name="innerException">현재 예외를 발생시킨 <see langword="Exception" /> 인스턴스를 가져옵니다.</param>
    </member>
    <member name="T:System.Data.DataColumn">
      <summary>
        <see cref="T:System.Data.DataTable" />에 있는 열의 스키마를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.DataColumn.#ctor">
      <summary>
        <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 형식 문자열로 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String)">
      <summary>지정된 열 이름을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 형식 문자열로 초기화합니다.</summary>
      <param name="columnName">만들 열의 이름을 나타내는 문자열입니다. 이 속성 값이 <see langword="null" /> 또는 빈 문자열("")로 설정되면 열 컬렉션에 추가될 때 기본 이름이 지정됩니다.</param>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type)">
      <summary>지정된 열 이름과 데이터 형식을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="columnName">만들 열의 이름을 나타내는 문자열입니다. 이 속성 값이 <see langword="null" /> 또는 빈 문자열("")로 설정되면 열 컬렉션에 추가될 때 기본 이름이 지정됩니다.</param>
      <param name="dataType">지원되는 <see cref="P:System.Data.DataColumn.DataType" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataType" />이 지정되지 않은 경우</exception>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String)">
      <summary>지정된 이름, 데이터 형식 및 식을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="columnName">만들 열의 이름을 나타내는 문자열입니다. 이 속성 값이 <see langword="null" /> 또는 빈 문자열("")로 설정되면 열 컬렉션에 추가될 때 기본 이름이 지정됩니다.</param>
      <param name="dataType">지원되는 <see cref="P:System.Data.DataColumn.DataType" />입니다.</param>
      <param name="expr">이 열을 만드는 데 사용되는 식입니다. 자세한 내용은 <see cref="P:System.Data.DataColumn.Expression" /> 속성을 참조하세요.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataType" />이 지정되지 않은 경우</exception>
    </member>
    <member name="M:System.Data.DataColumn.#ctor(System.String,System.Type,System.String,System.Data.MappingType)">
      <summary>열이 특성 열인지 여부를 결정하는 값, 지정된 이름, 데이터 형식 및 식을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="columnName">만들 열의 이름을 나타내는 문자열입니다. 이 속성 값이 <see langword="null" /> 또는 빈 문자열("")로 설정되면 열 컬렉션에 추가될 때 기본 이름이 지정됩니다.</param>
      <param name="dataType">지원되는 <see cref="P:System.Data.DataColumn.DataType" />입니다.</param>
      <param name="expr">이 열을 만드는 데 사용되는 식입니다. 자세한 내용은 <see cref="P:System.Data.DataColumn.Expression" /> 속성을 참조하세요.</param>
      <param name="type">
        <see cref="T:System.Data.MappingType" /> 값 중 하나입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataType" />이 지정되지 않은 경우</exception>
    </member>
    <member name="M:System.Data.DataColumn.CheckNotAllowNull">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="M:System.Data.DataColumn.CheckUnique">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="M:System.Data.DataColumn.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="pcevent">매개 변수 참조입니다.</param>
    </member>
    <member name="M:System.Data.DataColumn.RaisePropertyChanging(System.String)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="name">매개 변수 참조입니다.</param>
    </member>
    <member name="M:System.Data.DataColumn.SetOrdinal(System.Int32)">
      <summary>
        <see cref="T:System.Data.DataColumn" />의 서수나 위치를 지정된 서수나 위치로 변경합니다.</summary>
      <param name="ordinal">지정한 서수입니다.</param>
    </member>
    <member name="M:System.Data.DataColumn.ToString">
      <summary>열의 <see cref="P:System.Data.DataColumn.Expression" />이 있으면 가져옵니다.</summary>
      <returns>속성이 설정되어 있으면 <see cref="P:System.Data.DataColumn.Expression" /> 값을 반환하고, 그렇지 않으면 <see cref="P:System.Data.DataColumn.ColumnName" /> 속성을 반환합니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.AllowDBNull">
      <summary>테이블에 속해 있는 행의 이 열에 null 값이 허용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="true" /> null 값이 허용 되 면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" /> 입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrement">
      <summary>테이블에 추가되는 새 행의 열 값이 자동으로 증가되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">열이 계산 열인 경우</exception>
      <returns>열 값이 자동으로 증가되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrementSeed">
      <summary>
        <see cref="P:System.Data.DataColumn.AutoIncrement" /> 속성이 <see langword="true" />로 설정된 열의 시작 값을 가져오거나 설정합니다. 기본값은 0입니다.</summary>
      <returns>
        <see cref="P:System.Data.DataColumn.AutoIncrement" />의 시작 값입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.AutoIncrementStep">
      <summary>
        <see cref="P:System.Data.DataColumn.AutoIncrement" /> 속성이 <see langword="true" />로 설정된 열에 사용되는 증분을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">설정된 값이 0인 경우</exception>
      <returns>열 값이 자동으로 증가되는 정도를 나타내는 숫자입니다. 기본값은 1입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.Caption">
      <summary>열의 캡션을 가져오거나 설정합니다.</summary>
      <returns>열의 캡션입니다. 설정하지 않은 경우 <see cref="P:System.Data.DataColumn.ColumnName" /> 값이 반환됩니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.ColumnMapping">
      <summary>열의 <see cref="T:System.Data.MappingType" />을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.MappingType" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.ColumnName">
      <summary>
        <see cref="T:System.Data.DataColumnCollection" />의 열 이름을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">속성이 <see langword="null" /> 또는 빈 문자열로 설정되어 있고 열이 컬렉션에 속한 경우</exception>
      <exception cref="T:System.Data.DuplicateNameException">이름이 같은 열이 컬렉션에 이미 있는 경우. 대/소문자를 구분하지 않고 이름을 비교합니다.</exception>
      <returns>열 이름입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.DataType">
      <summary>열에 저장된 데이터 형식을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">열에 저장된 데이터가 이미 있는 경우</exception>
      <returns>열 데이터 형식을 나타내는 <see cref="T:System.Type" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.DateTimeMode">
      <summary>열의 <see langword="DateTimeMode" />를 가져오거나 설정합니다.</summary>
      <returns>지정된 열의 <see cref="T:System.Data.DataSetDateTime" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.DefaultValue">
      <summary>새 행을 만들 때 열의 기본값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidCastException">행을 추가할 때 기본값이 열 데이터 형식의 인스턴스가 아닌 경우</exception>
      <returns>열의 <see cref="P:System.Data.DataColumn.DataType" />에 적합한 값입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.Expression">
      <summary>행을 필터링하거나 열의 값을 계산하거나 집계 열을 만드는 데 사용되는 식을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Data.DataColumn.AutoIncrement" /> 또는 <see cref="P:System.Data.DataColumn.Unique" /> 속성이 <see langword="true" />로 설정되어 있는 경우</exception>
      <exception cref="T:System.FormatException">CONVERT 함수를 사용하는 동안 식은 문자열로 계산되지만 문자열에 형식 매개 변수로 변환될 수 있는 표현이 포함되지 않은 경우</exception>
      <exception cref="T:System.InvalidCastException">CONVERT 함수를 사용하는 동안 요청된 캐스팅을 수행할 수 없는 경우. 가능한 캐스팅에 대한 자세한 내용은 다음 섹션에서 변환 함수를 참조하십시오.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">SUBSTRING 함수를 사용하는 동안 시작 인수가 범위를 벗어난 경우  
  
 -또는-  
  
 SUBSTRING 함수를 사용하는 동안 길이 인수가 범위를 벗어난 경우</exception>
      <exception cref="T:System.Exception">LEN 또는 TRIM 함수를 사용하는 동안 식이 문자열로 계산되지 않는 경우. 여기에는 <see cref="T:System.Char" />로 계산되는 식이 포함됩니다.</exception>
      <returns>열의 값을 계산하거나 집계 열을 만드는 식입니다. 식의 반환 형식은 열의 <see cref="P:System.Data.DataColumn.DataType" />에 의해 결정됩니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.ExtendedProperties">
      <summary>
        <see cref="T:System.Data.DataColumn" />과 관련된 사용자 지정 사용자 정보 컬렉션을 가져옵니다.</summary>
      <returns>사용자 지정 정보의 <see cref="T:System.Data.PropertyCollection" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.MaxLength">
      <summary>텍스트 열의 최대 길이를 가져오거나 설정합니다.</summary>
      <returns>열의 최대 길이(문자 수)입니다. 열에 최대 길이가 없으면 값은-1 (기본값)입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.Namespace">
      <summary>
        <see cref="T:System.Data.DataColumn" />의 네임스페이스를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">네임스페이스에 데이터가 이미 있는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataColumn" />의 네임스페이스입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.Ordinal">
      <summary>
        <see cref="T:System.Data.DataColumnCollection" /> 컬렉션에서 0부터 시작하는 열의 위치를 가져옵니다.</summary>
      <returns>열 위치입니다. 열이 컬렉션의 멤버가 아니면 -1을 가져옵니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.Prefix">
      <summary>
        <see cref="T:System.Data.DataTable" /> 네임스페이스의 별칭인 XML 접두사를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 네임스페이스의 XML 접두사입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.ReadOnly">
      <summary>테이블에 행을 추가한 후 열을 변경할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">속성이 계산 열에서 <see langword="false" />로 설정된 경우</exception>
      <returns>열이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.Table">
      <summary>열이 속한 <see cref="T:System.Data.DataTable" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataTable" />이 속한 <see cref="T:System.Data.DataColumn" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumn.Unique">
      <summary>열의 각 행에 있는 값이 고유해야 하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">열이 계산 열인 경우</exception>
      <returns>값이 고유해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Data.DataColumnChangeEventArgs">
      <summary>
        <see cref="E:System.Data.DataTable.ColumnChanging" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.DataColumnChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataColumn,System.Object)">
      <summary>
        <see cref="T:System.Data.DataColumnChangeEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="row">변경 값이 있는 열의 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="column">변경 값이 있는 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <param name="value">새 값입니다.</param>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.Column">
      <summary>변경 값이 있는 <see cref="T:System.Data.DataColumn" />을 가져옵니다.</summary>
      <returns>변경 값이 있는 <see cref="T:System.Data.DataColumn" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.ProposedValue">
      <summary>열에 대해 제안된 새 값을 가져오거나 설정합니다.</summary>
      <returns>형식이 <see cref="T:System.Object" />인 제안된 값입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumnChangeEventArgs.Row">
      <summary>변경 값이 있는 열의 <see cref="T:System.Data.DataRow" />를 가져옵니다.</summary>
      <returns>변경 값이 있는 열의 <see cref="T:System.Data.DataRow" />입니다.</returns>
    </member>
    <member name="T:System.Data.DataColumnChangeEventHandler">
      <summary>
        <see cref="E:System.Data.DataTable.ColumnChanging" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.DataColumnChangeEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Data.DataColumnCollection">
      <summary>
        <see cref="T:System.Data.DataColumn" />에 대한 <see cref="T:System.Data.DataTable" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="E:System.Data.DataColumnCollection.CollectionChanged">
      <summary>열을 추가하거나 제거하여 열 컬렉션이 변경되는 경우 발생합니다.</summary>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add">
      <summary>
        <see cref="T:System.Data.DataColumn" /> 개체를 만든 다음 <see cref="T:System.Data.DataColumnCollection" />에 추가합니다.</summary>
      <returns>새로 만든 <see cref="T:System.Data.DataColumn" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.Data.DataColumn)">
      <summary>지정된 <see cref="T:System.Data.DataColumn" /> 개체를 만든 다음 <see cref="T:System.Data.DataColumnCollection" />에 추가합니다.</summary>
      <param name="column">추가할 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">열이 이 컬렉션이나 다른 컬렉션에 이미 속해 있는 경우</exception>
      <exception cref="T:System.Data.DuplicateNameException">지정된 이름의 열이 컬렉션에 이미 있는 경우. (대/소문자를 구분하지 않고 비교합니다.)</exception>
      <exception cref="T:System.Data.InvalidExpressionException">식이 잘못되었습니다. 식을 만드는 방법에 대한 자세한 내용은 <see cref="P:System.Data.DataColumn.Expression" /> 속성을 참조하십시오.</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String)">
      <summary>지정된 이름의 <see cref="T:System.Data.DataColumn" /> 개체를 만들어 <see cref="T:System.Data.DataColumnCollection" />에 추가합니다.</summary>
      <param name="columnName">열 이름입니다.</param>
      <exception cref="T:System.Data.DuplicateNameException">지정된 이름의 열이 컬렉션에 이미 있는 경우. (대/소문자를 구분하지 않고 비교합니다.)</exception>
      <returns>새로 만든 <see cref="T:System.Data.DataColumn" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type)">
      <summary>지정된 이름과 형식의 <see cref="T:System.Data.DataColumn" /> 개체를 만들어 <see cref="T:System.Data.DataColumnCollection" />에 추가합니다.</summary>
      <param name="columnName">열을 만들 때 사용할 <see cref="P:System.Data.DataColumn.ColumnName" />입니다.</param>
      <param name="type">새 열의 <see cref="P:System.Data.DataColumn.DataType" />입니다.</param>
      <exception cref="T:System.Data.DuplicateNameException">지정된 이름의 열이 컬렉션에 이미 있는 경우. (대/소문자를 구분하지 않고 비교합니다.)</exception>
      <exception cref="T:System.Data.InvalidExpressionException">식이 잘못되었습니다. 식을 만드는 방법에 대한 자세한 내용은 <see cref="P:System.Data.DataColumn.Expression" /> 속성을 참조하십시오.</exception>
      <returns>새로 만든 <see cref="T:System.Data.DataColumn" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Add(System.String,System.Type,System.String)">
      <summary>지정된 이름, 형식 및 식의 <see cref="T:System.Data.DataColumn" /> 개체를 만들어 <see cref="T:System.Data.DataColumnCollection" />에 추가합니다.</summary>
      <param name="columnName">열을 만들 때 사용할 이름입니다.</param>
      <param name="type">새 열의 <see cref="P:System.Data.DataColumn.DataType" />입니다.</param>
      <param name="expression">
        <see cref="P:System.Data.DataColumn.Expression" /> 속성에 할당할 식입니다.</param>
      <exception cref="T:System.Data.DuplicateNameException">지정된 이름의 열이 컬렉션에 이미 있는 경우. (대/소문자를 구분하지 않고 비교합니다.)</exception>
      <exception cref="T:System.Data.InvalidExpressionException">식이 잘못되었습니다. 식을 만드는 방법에 대한 자세한 내용은 <see cref="P:System.Data.DataColumn.Expression" /> 속성을 참조하십시오.</exception>
      <returns>새로 만든 <see cref="T:System.Data.DataColumn" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.AddRange(System.Data.DataColumn[])">
      <summary>지정된 <see cref="T:System.Data.DataColumn" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="columns">컬렉션에 추가할 <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Data.DataColumnCollection.CanRemove(System.Data.DataColumn)">
      <summary>특정 열을 컬렉션에서 제거할 수 있는지 여부를 확인합니다.</summary>
      <param name="column">컬렉션의 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 매개 변수가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">열이 이 컬렉션에 속하지 않는 경우
        
또는

열이 관계의 일부인 경우

또는

다른 열의 식이 이 열에 종속되는 경우</exception>
      <returns>열을 제거할 수 있으면 <see langword="true" />입니다. <see langword="false" /> 만일, 
-  <paramref name="column" /> 매개 변수가 <see langword="null" />인 경우  
  
-  열이 이 컬렉션에 속하지 않는 경우  
  
-  열이 관계의 일부인 경우  
  
-  다른 열의 식이 이 열에 종속되는 경우</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Clear">
      <summary>모든 열의 컬렉션을 지웁니다.</summary>
    </member>
    <member name="M:System.Data.DataColumnCollection.Contains(System.String)">
      <summary>컬렉션에 이름이 지정된 열이 있는지 여부를 확인합니다.</summary>
      <param name="name">찾으려는 열의 <see cref="P:System.Data.DataColumn.ColumnName" />입니다.</param>
      <returns>이름이 지정된 열이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.CopyTo(System.Data.DataColumn[],System.Int32)">
      <summary>전체 컬렉션을 기존 배열 내의 지정된 인덱스에서 시작하는 위치에 복사합니다.</summary>
      <param name="array">컬렉션을 복사할 <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</param>
      <param name="index">복사를 시작할 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.DataColumnCollection.IndexOf(System.Data.DataColumn)">
      <summary>이름이 지정된 열의 인덱스를 가져옵니다.</summary>
      <param name="column">반환할 열의 이름입니다.</param>
      <returns>
        <paramref name="column" />로 지정된 열이 있으면 해당 열의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.IndexOf(System.String)">
      <summary>특정 이름을 가진 열의 인덱스를 가져옵니다. 이 이름은 대/소문자를 구분하지 않습니다.</summary>
      <param name="columnName">찾을 열의 이름입니다.</param>
      <returns>지정된 이름을 가지는 열이 컬렉션에 있으면 반환 값이 해당 열의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Data.DataColumnCollection.Remove(System.Data.DataColumn)">
      <summary>컬렉션에서 지정된 <see cref="T:System.Data.DataColumn" /> 개체를 제거합니다.</summary>
      <param name="column">제거할 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">열이 이 컬렉션에 속하지 않는 경우  
  
 -또는-  
  
 열이 관계의 일부인 경우  
  
 -또는-  
  
 다른 열의 식이 이 열에 종속되는 경우</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.Remove(System.String)">
      <summary>컬렉션에서 지정된 이름의 <see cref="T:System.Data.DataColumn" /> 개체를 제거합니다.</summary>
      <param name="name">제거할 열의 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 이름의 열이 컬렉션에 없는 경우</exception>
    </member>
    <member name="M:System.Data.DataColumnCollection.RemoveAt(System.Int32)">
      <summary>컬렉션에서 지정된 인덱스의 열을 제거합니다.</summary>
      <param name="index">제거할 열의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">컬렉션에 지정된 인덱스의 열이 없는 경우</exception>
    </member>
    <member name="P:System.Data.DataColumnCollection.Item(System.Int32)">
      <summary>컬렉션에서 지정된 인덱스의 <see cref="T:System.Data.DataColumn" />을 가져옵니다.</summary>
      <param name="index">반환할 열의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">인덱스 값이 컬렉션의 항목 수보다 큰 경우</exception>
      <returns>지정한 인덱스에 있는 <see cref="T:System.Data.DataColumn" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataColumnCollection.Item(System.String)">
      <summary>컬렉션에서 지정된 이름을 가진 <see cref="T:System.Data.DataColumn" />을 가져옵니다.</summary>
      <param name="name">반환할 열의 <see cref="P:System.Data.DataColumn.ColumnName" />입니다.</param>
      <returns>컬렉션에 지정된 <see cref="T:System.Data.DataColumn" />이 있으면 <see cref="P:System.Data.DataColumn.ColumnName" />이 반환되고, <see cref="T:System.Data.DataColumn" />이 없으면 null이 반환됩니다.</returns>
    </member>
    <member name="T:System.Data.DataException">
      <summary>ADO.NET 구성 요소를 사용하여 오류가 생성될 때 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.DataException.#ctor">
      <summary>
        <see cref="T:System.Data.DataException" /> 클래스의 새 인스턴스를 초기화합니다. 이는 매개 변수가 없는 생성자입니다.</summary>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 serializatoin 정보와 컨텍스트를 사용하여 <see cref="T:System.Data.DataException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화 또는 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스 및 대상에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.DataException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.DataException.#ctor(System.String,System.Exception)">
      <summary>지정된 문자열과 내부 예외를 사용하여 <see cref="T:System.Data.DataException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
      <param name="innerException">내부 예외에 대한 참조입니다.</param>
    </member>
    <member name="T:System.Data.DataReaderExtensions">
      <summary>
        <see cref="T:System.Data.Common.DbDataReader" />에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetBoolean(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열의 값에 해당하는 Boolean 값을 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetByte(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열의 값에 해당하는 바이트 값을 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetBytes(System.Data.Common.DbDataReader,System.String,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 인덱스에서 시작하는 지정된 열에서 지정된 바이트 수를 읽은 다음 버퍼의 지정된 위치에서 시작하는 버퍼에 씁니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <param name="dataOffset">읽기 작업을 시작하는 행 내의 인덱스입니다.</param>
      <param name="buffer">데이터를 복사해 넣을 버퍼입니다.</param>
      <param name="bufferOffset">데이터가 복사될 버퍼의 인덱스입니다.</param>
      <param name="length">읽을 최대 문자 수입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>읽은 실제 바이트 수입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetChar(System.Data.Common.DbDataReader,System.String)">
      <summary>지정한 열의 값을 단일 문자로 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetChars(System.Data.Common.DbDataReader,System.String,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>지정된 인덱스에서 시작하는 지정된 열에서 지정된 수의 문자를 읽은 다음 지정된 위치에서 시작하는 버퍼에 씁니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <param name="dataOffset">읽기 작업을 시작하는 행 내의 인덱스입니다.</param>
      <param name="buffer">데이터를 복사해 넣을 버퍼입니다.</param>
      <param name="bufferOffset">데이터가 복사될 버퍼의 인덱스입니다.</param>
      <param name="length">읽을 최대 문자 수입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <returns>읽은 실제 문자 수입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetData(System.Data.Common.DbDataReader,System.String)">
      <summary>요청된 열의 중첩된 데이터 판독기를 반환합니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <returns>데이터 판독기입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDataTypeName(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열의 데이터 형식 이름을 가져옵니다.</summary>
      <param name="reader">열 형식 이름을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <returns>데이터 형식의 이름입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDateTime(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열의 값에 해당하는 <see cref="T:System.DateTime" /> 개체를 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDecimal(System.Data.Common.DbDataReader,System.String)">
      <summary>
        <see cref="T:System.Decimal" />으로 지정된 열 값을 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetDouble(System.Data.Common.DbDataReader,System.String)">
      <summary>지정한 열의 값을 배정밀도 부동 소수점 숫자로 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFieldType(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열의 데이터 형식을 가져옵니다.</summary>
      <param name="reader">필드 형식을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 데이터 형식입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFieldValue``1(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열의 값을 요청된 형식으로 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <typeparam name="T">반환될 값의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">데이터를 검색하는 동안 연결이 끊어졌거나 닫혔습니다.  

또는 
데이터를 검색하는 동안 데이터 판독기가 닫혔습니다.  
  
또는

읽을 준비가 된 데이터가 없습니다(예를 들어, 첫 번째 <see cref="M:System.Data.Common.DbDataReader.Read" />가 호출되지 않았거나 <see langword="false" />를 반환함).  

또는

판독기가 순차 모드에서 이전에 읽은 열을 읽으려고 했습니다.  

또는

진행 중인 비동기 작업이 없습니다. 이는 스트림을 읽는 동안 호출할 수 있기 때문에 순차 모드로 실행할 때 모든 Get* 메서드에 적용됩니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">데이터베이스에서 반환되는 값이 일치하지 않거나 이 값을 <typeparamref name="T" />에 캐스팅할 수 없습니다.</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFieldValueAsync``1(System.Data.Common.DbDataReader,System.String,System.Threading.CancellationToken)">
      <summary>지정된 열의 값을 요청된 형식으로 비동기적으로 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 선택적 토큰입니다.</param>
      <typeparam name="T">반환될 값의 형식입니다.</typeparam>
      <exception cref="T:System.InvalidOperationException">데이터를 검색하는 동안 연결이 끊어졌거나 닫혔습니다.  
  
또는

데이터를 검색하는 동안 데이터 판독기가 닫혔습니다.  

또는

읽을 준비가 된 데이터가 없습니다(예를 들어, 첫 번째 <see cref="M:System.Data.Common.DbDataReader.Read" />가 호출되지 않았거나 <see langword="false" />를 반환함).

또는

순차 모드에서 이전에 읽은 열을 읽으려고 했습니다.  

또는

진행 중인 비동기 작업이 없습니다. 이는 스트림을 읽는 동안 호출할 수 있기 때문에 순차 모드로 실행할 때 모든 Get_*_ 메서드에 적용됩니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">데이터베이스에서 반환되는 값이 일치하지 않거나 이 값을 <typeparamref name="T" />에 캐스팅할 수 없습니다.</exception>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" />에 지정된 열의 값을 포함하는 작업입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetFloat(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열의 값에 해당하는 단정밀도 부동 소수점 숫자를 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetGuid(System.Data.Common.DbDataReader,System.String)">
      <summary>지정한 열의 값을 GUID(Globally Unique Identifier)로 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetInt16(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열의 값을 16비트 부호 있는 정수로 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetInt32(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열의 값에 해당하는 32비트 부호 있는 정수를 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetInt64(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열의 값에 해당하는 64비트 부호 있는 정수를 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetProviderSpecificFieldType(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열의 공급자별 형식을 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <returns>공급자별 .NET 형식입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetProviderSpecificValue(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열의 값을 공급자별 형식의 인스턴스로 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetStream(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열에서 데이터를 검색하는 스트림을 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">데이터를 검색하는 동안 연결이 끊어졌거나 닫혔습니다.  
  
또는

데이터를 검색하는 동안 데이터 판독기가 닫힙니다.  

또는

읽을 준비가 된 데이터가 없는 경우(예를 들어, 첫 번째 <see cref="M:System.Data.Common.DbDataReader.Read" />가 호출되지 않았거나 false를 반환한 경우)  

또는

데이터 판독기가 순차 모드에서 이전에 읽은 열을 읽으려고 했습니다.  

또는

진행 중인 비동기 작업이 없습니다. 이는 스트림을 읽는 동안 호출할 수 있기 때문에 순차 모드로 실행할 때 모든 Get* 메서드에 적용됩니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 열은 <see cref="T:System.IO.Stream" />을 사용한 읽기를 지원하는 이진 유형이 아닙니다.</exception>
      <returns>스트림입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetString(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열의 값을 <see cref="T:System.String" />의 인스턴스로 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 캐스트가 잘못된 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetTextReader(System.Data.Common.DbDataReader,System.String)">
      <summary>열에서 데이터를 검색하는 텍스트 판독기를 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">데이터를 검색하는 동안 연결이 끊어졌거나 닫혔습니다.  
  
또는

데이터를 검색하는 동안 데이터 판독기가 닫힙니다.  

또는

읽을 준비가 된 데이터가 없는 경우(예를 들어, 첫 번째 <see cref="M:System.Data.Common.DbDataReader.Read" />가 호출되지 않았거나 false를 반환한 경우)  

또는

데이터 판독기가 순차 모드에서 이전에 읽은 열을 읽으려고 했습니다.  

또는

진행 중인 비동기 작업이 없습니다. 이는 스트림을 읽는 동안 호출할 수 있기 때문에 순차 모드로 실행할 때 모든 Get* 메서드에 적용됩니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 열은 <see cref="T:System.IO.TextReader" />를 사용한 읽기를 지원하는 텍스트 유형이 아닙니다.</exception>
      <returns>텍스트 판독기입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.GetValue(System.Data.Common.DbDataReader,System.String)">
      <summary>지정된 열의 값을 <see cref="T:System.Object" />의 인스턴스로 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.IsDBNull(System.Data.Common.DbDataReader,System.String)">
      <summary>존재하지 않거나 누락된 값이 열에 포함되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <returns>지정된 열이 <see cref="T:System.DBNull" />에 해당하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataReaderExtensions.IsDBNullAsync(System.Data.Common.DbDataReader,System.String,System.Threading.CancellationToken)">
      <summary>열의 값이 존재하지 않거나 누락되었는지 여부를 나타내는 값을 비동기적으로 가져옵니다.</summary>
      <param name="reader">열 값을 가져올 데이터 판독기입니다.</param>
      <param name="name">열 이름입니다.</param>
      <param name="cancellationToken">비동기 작업을 취소하기 위한 선택적 토큰입니다.</param>
      <exception cref="T:System.InvalidOperationException">데이터를 검색하는 동안 연결이 끊어졌거나 닫혔습니다.  
  
또는

데이터를 검색하는 동안 데이터 판독기가 닫힙니다.  

또는

읽을 준비가 된 데이터가 없는 경우(예를 들어, 첫 번째 <see cref="M:System.Data.Common.DbDataReader.Read" />가 호출되지 않았거나 false를 반환한 경우)  

또는

순차 모드에서 이전에 읽은 열을 읽으려고 했습니다.  

또는 
진행 중인 비동기 작업이 없습니다. 이는 스트림을 읽는 동안 호출할 수 있기 때문에 순차 모드로 실행할 때 모든 Get* 메서드에 적용됩니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <returns>
        <see cref="P:System.Threading.Tasks.Task`1.Result" /> 속성이 지정된 열 값이 <see langword="DBNull" />와 같으면 <see langword="true" />, 아니면 <see langword="false" />인 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</returns>
    </member>
    <member name="T:System.Data.DataRelation">
      <summary>두 <see cref="T:System.Data.DataTable" /> 개체 사이의 부모/자식 관계를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>지정된 <see cref="T:System.Data.DataRelation" /> 이름과 부모 및 자식 <see cref="T:System.Data.DataRelation" /> 개체를 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" />의 이름입니다. <see langword="null" /> 또는 빈 문자열("")의 경우 만든 개체가 <see cref="T:System.Data.DataRelationCollection" />에 추가될 때 기본 이름이 지정됩니다.</param>
      <param name="parentColumn">관계의 부모 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <param name="childColumn">관계의 자식 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">두 개의 <see cref="T:System.Data.DataColumn" /> 개체 중 하나 이상에 <see langword="null" />이 포함된 경우</exception>
      <exception cref="T:System.Data.InvalidConstraintException">열의 데이터 형식이 다른 경우 
-또는- 
테이블이 동일한 <see cref="T:System.Data.DataSet" />에 속하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
      <summary>지정된 이름, 부모 및 자식 <see cref="T:System.Data.DataRelation" /> 개체, 제약 조건을 만들지 여부를 나타내는 값 등을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="relationName">관계의 이름입니다. <see langword="null" /> 또는 빈 문자열("")의 경우 만든 개체가 <see cref="T:System.Data.DataRelationCollection" />에 추가될 때 기본 이름이 지정됩니다.</param>
      <param name="parentColumn">관계의 부모 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <param name="childColumn">관계의 자식 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <param name="createConstraints">제약 조건이 만들어지는지 여부를 나타내는 값입니다. 제약 조건이 만들어지면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">두 개의 <see cref="T:System.Data.DataColumn" /> 개체 중 하나 이상에 <see langword="null" />이 포함된 경우</exception>
      <exception cref="T:System.Data.InvalidConstraintException">열의 데이터 형식이 다른 경우 
-또는- 
테이블이 동일한 <see cref="T:System.Data.DataSet" />에 속하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>부모 및 자식 <see cref="T:System.Data.DataRelation" /> 개체의 일치되는 배열과 지정된 <see cref="T:System.Data.DataRelation" /> 이름을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="relationName">관계의 이름입니다. <see langword="null" /> 또는 빈 문자열("")의 경우 만든 개체가 <see cref="T:System.Data.DataRelationCollection" />에 추가될 때 기본 이름이 지정됩니다.</param>
      <param name="parentColumns">부모 <see cref="T:System.Data.DataColumn" /> 개체로 이루어진 배열입니다.</param>
      <param name="childColumns">자식 <see cref="T:System.Data.DataColumn" /> 개체로 이루어진 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">두 개의 <see cref="T:System.Data.DataColumn" /> 개체 중 하나 이상에 <see langword="null" />이 포함된 경우</exception>
      <exception cref="T:System.Data.InvalidConstraintException">
        <see cref="T:System.Data.DataColumn" /> 개체의 데이터 형식이 다른 경우 
-또는- 
두 개의 배열 중 하나 이상이 동일한 테이블의 고유 열들로 구성되지 않은 경우  
  
-또는- 
테이블이 동일한 <see cref="T:System.Data.DataSet" />에 속하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
      <summary>지정된 이름, 부모 및 자식 <see cref="T:System.Data.DataRelation" /> 개체의 일치되는 배열, 제약 조건을 만들지 여부를 나타내는 값 등을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="relationName">관계의 이름입니다. <see langword="null" /> 또는 빈 문자열("")의 경우 만든 개체가 <see cref="T:System.Data.DataRelationCollection" />에 추가될 때 기본 이름이 지정됩니다.</param>
      <param name="parentColumns">부모 <see cref="T:System.Data.DataColumn" /> 개체로 이루어진 배열입니다.</param>
      <param name="childColumns">자식 <see cref="T:System.Data.DataColumn" /> 개체로 이루어진 배열입니다.</param>
      <param name="createConstraints">제약 조건을 만들지 여부를 나타내는 값입니다. 제약 조건이 만들어지면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">두 <see cref="T:System.Data.DataColumn" /> 개체 중 하나 이상이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.InvalidConstraintException">열의 데이터 형식이 다른 경우 
-또는- 
테이블이 동일한 <see cref="T:System.Data.DataSet" />에 속하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String,System.String,System.String[],System.String[],System.Boolean)">
      <summary>이 생성자는 Visual Studio 환경에서 디자인 타임 지원을 위해 제공됩니다.</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" />의 이름입니다. <see langword="null" /> 또는 빈 문자열("")의 경우 만든 개체가 <see cref="T:System.Data.DataRelationCollection" />에 추가될 때 기본 이름이 지정됩니다.</param>
      <param name="parentTableName">관계의 부모 테이블인 <see cref="T:System.Data.DataTable" />의 이름입니다.</param>
      <param name="parentTableNamespace">부모 테이블 네임스페이스의 이름입니다.</param>
      <param name="childTableName">관계의 자식 테이블인 <see cref="T:System.Data.DataTable" />의 이름입니다.</param>
      <param name="childTableNamespace">자식 테이블 네임스페이스의 이름입니다.</param>
      <param name="parentColumnNames">관계의 부모 <see cref="T:System.Data.DataColumn" />에 있는 <see cref="T:System.Data.DataTable" /> 개체 이름으로 이루어진 배열입니다.</param>
      <param name="childColumnNames">관계의 자식 <see cref="T:System.Data.DataColumn" />에 있는 <see cref="T:System.Data.DataTable" /> 개체 이름으로 이루어진 배열입니다.</param>
      <param name="nested">관계가 중첩되는지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.DataRelation.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Boolean)">
      <summary>이 생성자는 Visual Studio 환경에서 디자인 타임 지원을 위해 제공됩니다.</summary>
      <param name="relationName">관계의 이름입니다. <see langword="null" /> 또는 빈 문자열("")의 경우 만든 개체가 <see cref="T:System.Data.DataRelationCollection" />에 추가될 때 기본 이름이 지정됩니다.</param>
      <param name="parentTableName">관계의 부모 테이블인 <see cref="T:System.Data.DataTable" />의 이름입니다.</param>
      <param name="childTableName">관계의 자식 테이블인 <see cref="T:System.Data.DataTable" />의 이름입니다.</param>
      <param name="parentColumnNames">관계의 부모 <see cref="T:System.Data.DataColumn" />에 있는 <see cref="T:System.Data.DataTable" /> 개체 이름으로 이루어진 배열입니다.</param>
      <param name="childColumnNames">관계의 자식 <see cref="T:System.Data.DataColumn" />에 있는 <see cref="T:System.Data.DataTable" /> 개체 이름으로 이루어진 배열입니다.</param>
      <param name="nested">관계가 중첩되는지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="M:System.Data.DataRelation.CheckStateForProperty">
      <summary>이 메서드는 .NET Framework 인프라를 지원하며 코드에서 직접 사용할 수 없습니다.</summary>
      <exception cref="T:System.Data.DataException">부모 테이블과 자식 테이블이 서로 다른 <see cref="T:System.Data.DataSet" /> 개체에 속한 경우  
  
-또는- 
하나 이상의 부모/자식 <see cref="T:System.Data.DataColumn" /> 개체 쌍이 일치하는 데이터 형식을 가지는 경우  
  
-또는- 
부모 및 자식 <see cref="T:System.Data.DataColumn" /> 개체가 동일한 경우</exception>
    </member>
    <member name="M:System.Data.DataRelation.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="pcevent">매개 변수 참조입니다.</param>
    </member>
    <member name="M:System.Data.DataRelation.RaisePropertyChanging(System.String)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="name">매개 변수 참조입니다.</param>
    </member>
    <member name="M:System.Data.DataRelation.ToString">
      <summary>
        <see cref="P:System.Data.DataRelation.RelationName" />이 있는 경우 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Data.DataRelation.RelationName" /> 속성 값</returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildColumns">
      <summary>이 관계의 자식 <see cref="T:System.Data.DataColumn" /> 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildKeyConstraint">
      <summary>관계의 <see cref="T:System.Data.ForeignKeyConstraint" />를 가져옵니다.</summary>
      <returns>
        <see langword="ForeignKeyConstraint" />
      </returns>
    </member>
    <member name="P:System.Data.DataRelation.ChildTable">
      <summary>이 관계의 자식 테이블을 가져옵니다.</summary>
      <returns>관계의 자식 테이블인 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRelation.DataSet">
      <summary>
        <see cref="T:System.Data.DataSet" />이 속하는 <see cref="T:System.Data.DataRelation" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataSet" />이 속하는 <see cref="T:System.Data.DataRelation" />을 가져옵니다.</returns>
    </member>
    <member name="P:System.Data.DataRelation.ExtendedProperties">
      <summary>사용자 지정 속성을 저장하는 컬렉션을 가져옵니다.</summary>
      <returns>사용자 지정 속성이 포함된 <see cref="T:System.Data.PropertyCollection" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRelation.Nested">
      <summary>
        <see cref="T:System.Data.DataRelation" /> 개체가 중첩되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRelation" /> 개체가 중첩되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentColumns">
      <summary>이 <see cref="T:System.Data.DataColumn" />의 부모 열인 <see cref="T:System.Data.DataRelation" /> 개체로 이루어진 배열을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.DataColumn" />의 부모 열인 <see cref="T:System.Data.DataRelation" /> 개체로 이루어진 배열입니다.</returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentKeyConstraint">
      <summary>
        <see cref="T:System.Data.UniqueConstraint" />의 부모 열에 있는 값을 고유하게 하는 <see cref="T:System.Data.DataRelation" />를 가져옵니다.</summary>
      <returns>부모 열의 값을 고유하게 하는 <see cref="T:System.Data.UniqueConstraint" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRelation.ParentTable">
      <summary>이 <see cref="T:System.Data.DataTable" />의 부모 <see cref="T:System.Data.DataRelation" />를 가져옵니다.</summary>
      <returns>이 관계의 부모 테이블인 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRelation.RelationName">
      <summary>
        <see cref="T:System.Data.DataRelation" />에서 <see cref="T:System.Data.DataRelationCollection" />을 검색하는 데 사용되는 이름을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">
        <see langword="null" /> 또는 빈 문자열("")이 <see cref="T:System.Data.DataColumn" />인 <see cref="T:System.Data.DataRelation" />에 전달된 경우</exception>
      <exception cref="T:System.Data.DuplicateNameException">같은 이름을 가진 <see cref="T:System.Data.DataRelation" />이 이미 들어 있는 컬렉션에 <see cref="T:System.Data.DataRelation" />이 속한 경우</exception>
      <returns>
        <see cref="T:System.Data.DataRelation" />의 이름입니다.</returns>
    </member>
    <member name="T:System.Data.DataRelationCollection">
      <summary>이 <see cref="T:System.Data.DataRelation" />에 대한 <see cref="T:System.Data.DataSet" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="E:System.Data.DataRelationCollection.CollectionChanged">
      <summary>컬렉션이 변경될 때 발생합니다.</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.#ctor">
      <summary>
        <see cref="T:System.Data.DataRelationCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>지정된 부모 및 자식 열을 사용하여 <see cref="T:System.Data.DataRelation" />을 만든 다음 이를 컬렉션에 추가합니다.</summary>
      <param name="parentColumn">이 관계의 부모 열입니다.</param>
      <param name="childColumn">해당 관계의 자식 열입니다.</param>
      <returns>만든 관계를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>지정된 부모 및 자식 열을 사용하여 <see cref="T:System.Data.DataRelation" />을 만든 다음 이를 컬렉션에 추가합니다.</summary>
      <param name="parentColumns">이 관계의 부모 열입니다.</param>
      <param name="childColumns">해당 관계의 자식 열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 인수가 null 값인 경우</exception>
      <exception cref="T:System.ArgumentException">관계가 이 컬렉션에 이미 속해 있거나 다른 컬렉션에 속한 경우</exception>
      <exception cref="T:System.Data.DuplicateNameException">컬렉션에 이름이 같은 관계가 이미 있는 경우. 대/소문자를 구분하지 않고 비교합니다.</exception>
      <exception cref="T:System.Data.InvalidConstraintException">관계를 만든 후 관계에 잘못된 상태를 입력한 경우</exception>
      <returns>만든 관계를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.Data.DataRelation)">
      <summary>
        <see cref="T:System.Data.DataRelation" />에 <see cref="T:System.Data.DataRelationCollection" />를 추가합니다.</summary>
      <param name="relation">컬렉션에 추가할 <see langword="DataRelation" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" /> 매개 변수가 null 값인 경우</exception>
      <exception cref="T:System.ArgumentException">관계가 이 컬렉션에 이미 속해 있거나 다른 컬렉션에 속한 경우</exception>
      <exception cref="T:System.Data.DuplicateNameException">지정된 이름의 관계가 컬렉션에 이미 있는 경우. 대/소문자를 구분하지 않고 비교합니다.</exception>
      <exception cref="T:System.Data.InvalidConstraintException">관계를 만든 후 관계에 잘못된 상태를 입력한 경우</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>지정된 이름, 부모 및 자식 열을 사용하여 <see cref="T:System.Data.DataRelation" />을 만든 다음 이를 컬렉션에 추가합니다.</summary>
      <param name="name">관계의 이름입니다.</param>
      <param name="parentColumn">이 관계의 부모 열입니다.</param>
      <param name="childColumn">해당 관계의 자식 열입니다.</param>
      <returns>만든 관계를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn,System.Data.DataColumn,System.Boolean)">
      <summary>지정된 이름, 부모 및 자식 열, <paramref name="createConstraints" /> 매개 변수의 값에 따른 추가 제약 조건을 사용하여 <see cref="T:System.Data.DataRelation" />을 만든 다음 이를 컬렉션에 추가합니다.</summary>
      <param name="name">관계의 이름입니다.</param>
      <param name="parentColumn">이 관계의 부모 열입니다.</param>
      <param name="childColumn">해당 관계의 자식 열입니다.</param>
      <param name="createConstraints">제약 조건을 만들려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 여기에서 기본값은 <see langword="true" />입니다.</param>
      <returns>만든 관계를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>지정된 이름과 부모 및 자식 열로 이루어진 배열을 가지는 <see cref="T:System.Data.DataRelation" />을 만들어 컬렉션에 추가합니다.</summary>
      <param name="name">만들 <see langword="DataRelation" />의 이름입니다.</param>
      <param name="parentColumns">부모 <see cref="T:System.Data.DataColumn" /> 개체로 이루어진 배열입니다.</param>
      <param name="childColumns">자식 <see langword="DataColumn" /> 개체로 이루어진 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">관계 이름이 null 값인 경우</exception>
      <exception cref="T:System.ArgumentException">관계가 이 컬렉션에 이미 속해 있거나 다른 컬렉션에 속한 경우</exception>
      <exception cref="T:System.Data.DuplicateNameException">컬렉션에 이름이 같은 관계가 이미 있는 경우. 대/소문자를 구분하지 않고 비교합니다.</exception>
      <exception cref="T:System.Data.InvalidConstraintException">관계를 만든 후 관계에 잘못된 상태를 입력한 경우</exception>
      <returns>만든 <see langword="DataRelation" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Add(System.String,System.Data.DataColumn[],System.Data.DataColumn[],System.Boolean)">
      <summary>지정된 이름, 부모 및 자식 열로 이루어진 배열, 제약 조건을 만들지 여부를 지정하는 값을 가지는 <see cref="T:System.Data.DataRelation" />을 만들어 컬렉션에 추가합니다.</summary>
      <param name="name">만들 <see langword="DataRelation" />의 이름입니다.</param>
      <param name="parentColumns">부모 <see cref="T:System.Data.DataColumn" /> 개체로 이루어진 배열입니다.</param>
      <param name="childColumns">자식 <see langword="DataColumn" /> 개체로 이루어진 배열입니다.</param>
      <param name="createConstraints">제약 조건을 만들려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">관계 이름이 null 값인 경우</exception>
      <exception cref="T:System.ArgumentException">관계가 이 컬렉션에 이미 속해 있거나 다른 컬렉션에 속한 경우</exception>
      <exception cref="T:System.Data.DuplicateNameException">컬렉션에 이름이 같은 관계가 이미 있는 경우. 대/소문자를 구분하지 않고 비교합니다.</exception>
      <exception cref="T:System.Data.InvalidConstraintException">관계를 만든 후 관계에 잘못된 상태를 입력한 경우</exception>
      <returns>만든 관계를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.AddCore(System.Data.DataRelation)">
      <summary>테이블의 유효성을 확인합니다.</summary>
      <param name="relation">확인할 관계입니다.</param>
      <exception cref="T:System.ArgumentNullException">관계가 null인 경우</exception>
      <exception cref="T:System.ArgumentException">관계가 이 컬렉션에 이미 속해 있거나 다른 컬렉션에 속한 경우</exception>
      <exception cref="T:System.Data.DuplicateNameException">컬렉션에 이름이 같은 관계가 이미 있는 경우. 대/소문자를 구분하지 않고 비교합니다.</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.AddRange(System.Data.DataRelation[])">
      <summary>지정된 <see cref="T:System.Data.DataRelation" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="relations">컬렉션에 추가할 <see cref="T:System.Data.DataRelation" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.CanRemove(System.Data.DataRelation)">
      <summary>지정된 <see cref="T:System.Data.DataRelation" />를 컬렉션에서 제거할 수 있는지 여부를 확인합니다.</summary>
      <param name="relation">확인할 관계입니다.</param>
      <returns>
        <see cref="T:System.Data.DataRelation" />을 제거할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.Clear">
      <summary>모든 관계의 컬렉션을 지웁니다.</summary>
    </member>
    <member name="M:System.Data.DataRelationCollection.Contains(System.String)">
      <summary>특정 이름(대/소문자 구분)의 <see cref="T:System.Data.DataRelation" />이 컬렉션에 있는지 여부를 확인합니다.</summary>
      <param name="name">찾을 관계의 이름입니다.</param>
      <returns>지정된 이름의 관계가 있으면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.CopyTo(System.Data.DataRelation[],System.Int32)">
      <summary>
        <see cref="T:System.Data.DataRelation" /> 개체의 컬렉션을 지정된 인덱스에서 시작하는 위치에 복사합니다.</summary>
      <param name="array">컬렉션을 복사할 대상인 <see cref="T:System.Data.DataRelation" /> 개체의 배열입니다.</param>
      <param name="index">복사를 시작할 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.GetDataSet">
      <summary>이 메서드는 .NET Framework 인프라를 지원하며 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>참조된 DataSet입니다.</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.IndexOf(System.Data.DataRelation)">
      <summary>지정된 <see cref="T:System.Data.DataRelation" /> 개체의 인덱스를 가져옵니다.</summary>
      <param name="relation">검색할 관계입니다.</param>
      <returns>관계의 인덱스(0부터 시작)이거나, 컬렉션에 관계가 없으면 -1입니다.</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.IndexOf(System.String)">
      <summary>이름으로 지정된 <see cref="T:System.Data.DataRelation" />의 인덱스를 가져옵니다.</summary>
      <param name="relationName">찾을 관계의 이름입니다.</param>
      <returns>지정된 이름을 가진 관계의 인덱스(0부터 시작)이거나, 관계가 컬렉션에 없으면 -1입니다.</returns>
    </member>
    <member name="M:System.Data.DataRelationCollection.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="ccevent">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.OnCollectionChanging(System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataRelationCollection.CollectionChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="ccevent">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataRelationCollection.Remove(System.Data.DataRelation)">
      <summary>컬렉션에서 지정된 관계를 제거합니다.</summary>
      <param name="relation">제거할 관계입니다.</param>
      <exception cref="T:System.ArgumentNullException">관계가 null 값인 경우</exception>
      <exception cref="T:System.ArgumentException">관계가 컬렉션에 속하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.Remove(System.String)">
      <summary>컬렉션에서 지정된 이름의 관계를 제거합니다.</summary>
      <param name="name">제거할 관계의 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">컬렉션에 지정된 이름의 관계가 없는 경우</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.RemoveAt(System.Int32)">
      <summary>컬렉션에서 지정된 인덱스의 관계를 제거합니다.</summary>
      <param name="index">제거할 관계의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 인덱스의 관계가 컬렉션에 없는 경우</exception>
    </member>
    <member name="M:System.Data.DataRelationCollection.RemoveCore(System.Data.DataRelation)">
      <summary>지정된 <see cref="T:System.Data.DataRelation" /> 개체에 대한 유효성을 확인합니다.</summary>
      <param name="relation">확인할 <see langword="DataRelation" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">지정된 인덱스의 관계가 컬렉션에 없는 경우</exception>
      <exception cref="T:System.ArgumentException">지정된 관계가 이 컬렉션에 속하지 않거나 다른 컬렉션에 속한 경우</exception>
    </member>
    <member name="P:System.Data.DataRelationCollection.Item(System.Int32)">
      <summary>지정된 인덱스의 <see cref="T:System.Data.DataRelation" /> 개체를 가져옵니다.</summary>
      <param name="index">찾을 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">인덱스 값이 컬렉션의 항목 수보다 큰 경우</exception>
      <returns>지정된 <see cref="T:System.Data.DataRelation" />이 있으면 <see cref="T:System.Data.DataRelation" />이고, 그렇지 않으면 null 값입니다.</returns>
    </member>
    <member name="P:System.Data.DataRelationCollection.Item(System.String)">
      <summary>이름으로 지정된 <see cref="T:System.Data.DataRelation" /> 개체를 가져옵니다.</summary>
      <param name="name">찾을 관계의 이름입니다.</param>
      <returns>지정된 <see cref="T:System.Data.DataRelation" />이 있으면 명명된 <see cref="T:System.Data.DataRelation" />이고, 그렇지 않으면 null 값입니다.</returns>
    </member>
    <member name="T:System.Data.DataRow">
      <summary>
        <see cref="T:System.Data.DataTable" />의 데이터 행을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.DataRow.#ctor(System.Data.DataRowBuilder)">
      <summary>DataRow의 새 인스턴스를 초기화합니다. 작성기에서 행을 생성합니다. 내부 전용입니다.</summary>
      <param name="builder">작성기입니다</param>
    </member>
    <member name="M:System.Data.DataRow.AcceptChanges">
      <summary>
        <see cref="M:System.Data.DataRow.AcceptChanges" />가 마지막으로 호출된 이후 이 행에서 변경된 내용을 모두 커밋합니다.</summary>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.DataRow.BeginEdit">
      <summary>
        <see cref="T:System.Data.DataRow" /> 개체에 대한 편집 작업을 시작합니다.</summary>
      <exception cref="T:System.Data.InRowChangingEventException">
        <see cref="E:System.Data.DataTable.RowChanging" /> 이벤트 내부에서 메서드를 호출한 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 메서드를 호출한 경우</exception>
    </member>
    <member name="M:System.Data.DataRow.CancelEdit">
      <summary>행의 현재 편집을 취소합니다.</summary>
      <exception cref="T:System.Data.InRowChangingEventException">
        <see cref="E:System.Data.DataTable.RowChanging" /> 이벤트 내부에서 메서드를 호출한 경우</exception>
    </member>
    <member name="M:System.Data.DataRow.ClearErrors">
      <summary>행의 오류를 지웁니다. 여기에는 <see cref="P:System.Data.DataRow.RowError" /> 및 <see cref="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)" />와 함께 설정된 오류가 포함됩니다.</summary>
    </member>
    <member name="M:System.Data.DataRow.Delete">
      <summary>
        <see cref="T:System.Data.DataRow" />를 삭제합니다.</summary>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">
        <see cref="T:System.Data.DataRow" />가 이미 삭제된 경우</exception>
    </member>
    <member name="M:System.Data.DataRow.EndEdit">
      <summary>행에서 수행 중인 편집을 끝냅니다.</summary>
      <exception cref="T:System.Data.InRowChangingEventException">
        <see cref="E:System.Data.DataTable.RowChanging" /> 이벤트 내부에서 메서드를 호출한 경우</exception>
      <exception cref="T:System.Data.ConstraintException">제약 조건을 위반하여 편집한 경우</exception>
      <exception cref="T:System.Data.ReadOnlyException">행이 테이블에 속해 있으며 편집 중에 읽기 전용 열의 값을 변경하려고 한 경우</exception>
      <exception cref="T:System.Data.NoNullAllowedException">편집 중에 <see cref="P:System.Data.DataColumn.AllowDBNull" />이 false인 열에 null 값을 지정하려고 한 경우</exception>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.Data.DataRelation)">
      <summary>지정된 <see cref="T:System.Data.DataRow" />을 사용하여 이 <see cref="T:System.Data.DataRelation" />의 자식 행을 가져옵니다.</summary>
      <param name="relation">사용할 <see cref="T:System.Data.DataRelation" />입니다.</param>
      <exception cref="T:System.ArgumentException">관계와 행이 같은 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">관계가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.VersionNotFoundException">행에 이 버전의 데이터가 없는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataRow" /> 개체로 이루어진 배열 또는 길이가 0인 배열입니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>지정된 <see cref="T:System.Data.DataRow" />과 <see cref="T:System.Data.DataRelation" />을 사용하여 <see cref="T:System.Data.DataRowVersion" />의 자식 행을 가져옵니다.</summary>
      <param name="relation">사용할 <see cref="T:System.Data.DataRelation" />입니다.</param>
      <param name="version">가져올 데이터의 버전을 지정하는 <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다. 가능한 값은 <see langword="Default" />, <see langword="Original" />, <see langword="Current" /> 및 <see langword="Proposed" />입니다.</param>
      <exception cref="T:System.ArgumentException">관계와 행이 같은 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.VersionNotFoundException">행에 요청한 <see cref="T:System.Data.DataRowVersion" />이 없는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataRow" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.String)">
      <summary>
        <see cref="T:System.Data.DataRow" />의 지정된 <see cref="P:System.Data.DataRelation.RelationName" />을 사용하여 <see cref="T:System.Data.DataRelation" />의 자식 행을 가져옵니다.</summary>
      <param name="relationName">사용할 <see cref="P:System.Data.DataRelation.RelationName" />의 <see cref="T:System.Data.DataRelation" />입니다.</param>
      <exception cref="T:System.ArgumentException">관계와 행이 같은 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataRow" /> 개체로 이루어진 배열 또는 길이가 0인 배열입니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetChildRows(System.String,System.Data.DataRowVersion)">
      <summary>
        <see cref="T:System.Data.DataRow" />의 지정된 <see cref="P:System.Data.DataRelation.RelationName" />과 <see cref="T:System.Data.DataRelation" />을 사용하여 <see cref="T:System.Data.DataRowVersion" />의 자식 행을 가져옵니다.</summary>
      <param name="relationName">사용할 <see cref="P:System.Data.DataRelation.RelationName" />의 <see cref="T:System.Data.DataRelation" />입니다.</param>
      <param name="version">가져올 데이터의 버전을 지정하는 <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다. 가능한 값은 <see langword="Default" />, <see langword="Original" />, <see langword="Current" /> 및 <see langword="Proposed" />입니다.</param>
      <exception cref="T:System.ArgumentException">관계와 행이 같은 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.VersionNotFoundException">행에 요청한 <see cref="T:System.Data.DataRowVersion" />이 없는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataRow" /> 개체로 이루어진 배열 또는 길이가 0인 배열입니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.Data.DataColumn)">
      <summary>지정된 <see cref="T:System.Data.DataColumn" />의 오류 설명을 가져옵니다.</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />
      </param>
      <returns>오류 설명 텍스트를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.Int32)">
      <summary>지정된 인덱스를 가진 열의 오류 설명을 가져옵니다.</summary>
      <param name="columnIndex">열의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 인수가 범위를 벗어난 경우</exception>
      <returns>오류 설명 텍스트를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnError(System.String)">
      <summary>지정된 이름을 가진 열의 오류 설명을 가져옵니다.</summary>
      <param name="columnName">열 이름입니다.</param>
      <returns>오류 설명 텍스트를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetColumnsInError">
      <summary>오류가 있는 열로 이루어진 배열을 가져옵니다.</summary>
      <returns>오류가 있는 <see cref="T:System.Data.DataColumn" /> 개체로 이루어진 배열을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.Data.DataRelation)">
      <summary>지정된 <see cref="T:System.Data.DataRow" />을 사용하여 <see cref="T:System.Data.DataRelation" />의 부모 행을 가져옵니다.</summary>
      <param name="relation">사용할 <see cref="T:System.Data.DataRelation" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" />이 <see cref="T:System.Data.DataTable" />에 속하지 않는 경우  
  
또는

행이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.DataException">자식 행에 여러 부모가 있습니다.</exception>
      <exception cref="T:System.Data.InvalidConstraintException">이 행이 <see cref="T:System.Data.DataRelation" /> 개체의 자식 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
      <returns>현재 행의 부모 <see cref="T:System.Data.DataRow" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>지정된 <see cref="T:System.Data.DataRow" />과 <see cref="T:System.Data.DataRelation" />을 사용하여 <see cref="T:System.Data.DataRowVersion" />의 부모 행을 가져옵니다.</summary>
      <param name="relation">사용할 <see cref="T:System.Data.DataRelation" />입니다.</param>
      <param name="version">가져올 데이터의 버전을 지정하는 <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다.</param>
      <exception cref="T:System.ArgumentNullException">행이 <see langword="null" />인 경우  
  
또는

<paramref name="relation" />이 이 테이블의 부모 관계에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DataException">자식 행에 여러 부모가 있습니다.</exception>
      <exception cref="T:System.Data.InvalidConstraintException">관계의 자식 테이블이 행이 속한 테이블이 아닌 경우</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.VersionNotFoundException">행에 이 버전의 데이터가 없는 경우</exception>
      <returns>현재 행의 부모 <see cref="T:System.Data.DataRow" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.String)">
      <summary>
        <see cref="T:System.Data.DataRow" />의 지정된 <see cref="P:System.Data.DataRelation.RelationName" />을 사용하여 <see cref="T:System.Data.DataRelation" />의 부모 행을 가져옵니다.</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" />의 <see cref="T:System.Data.DataRelation" /></param>
      <exception cref="T:System.ArgumentException">관계와 행이 같은 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DataException">자식 행에 여러 부모가 있습니다.</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
      <returns>현재 행의 부모 <see cref="T:System.Data.DataRow" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRow(System.String,System.Data.DataRowVersion)">
      <summary>
        <see cref="T:System.Data.DataRow" />의 지정된 <see cref="P:System.Data.DataRelation.RelationName" />과 <see cref="T:System.Data.DataRelation" />을 사용하여 <see cref="T:System.Data.DataRowVersion" />의 부모 행을 가져옵니다.</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" />의 <see cref="T:System.Data.DataRelation" /></param>
      <param name="version">
        <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다.</param>
      <exception cref="T:System.ArgumentException">관계와 행이 같은 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.DataException">자식 행에 여러 부모가 있습니다.</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.VersionNotFoundException">행에 요청한 <see cref="T:System.Data.DataRowVersion" />이 없는 경우</exception>
      <returns>현재 행의 부모 <see cref="T:System.Data.DataRow" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.Data.DataRelation)">
      <summary>지정된 <see cref="T:System.Data.DataRow" />을 사용하여 <see cref="T:System.Data.DataRelation" />의 부모 행을 가져옵니다.</summary>
      <param name="relation">사용할 <see cref="T:System.Data.DataRelation" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.DataRelation" />이 이 행의 <see cref="T:System.Data.DataSet" />에 속하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">행이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.InvalidConstraintException">관계의 자식 테이블이 행이 속한 테이블이 아닌 경우</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 <see cref="T:System.Data.DataTable" />에 속하지 않는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataRow" /> 개체로 이루어진 배열 또는 길이가 0인 배열입니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.Data.DataRelation,System.Data.DataRowVersion)">
      <summary>지정된 <see cref="T:System.Data.DataRow" />과 <see cref="T:System.Data.DataRelation" />을 사용하여 <see cref="T:System.Data.DataRowVersion" />의 부모 행을 가져옵니다.</summary>
      <param name="relation">사용할 <see cref="T:System.Data.DataRelation" />입니다.</param>
      <param name="version">가져올 데이터의 버전을 지정하는 <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다.</param>
      <exception cref="T:System.ArgumentException">
        <see cref="T:System.Data.DataRelation" />이 이 행의 <see cref="T:System.Data.DataSet" />에 속하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">행이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.InvalidConstraintException">관계의 자식 테이블이 행이 속한 테이블이 아닌 경우</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 <see cref="T:System.Data.DataTable" />에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.VersionNotFoundException">행에 요청한 <see cref="T:System.Data.DataRowVersion" />이 없는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataRow" /> 개체로 이루어진 배열 또는 길이가 0인 배열입니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.String)">
      <summary>
        <see cref="T:System.Data.DataRow" />의 지정된 <see cref="P:System.Data.DataRelation.RelationName" />을 사용하여 <see cref="T:System.Data.DataRelation" />의 부모 행을 가져옵니다.</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" />의 <see cref="T:System.Data.DataRelation" /></param>
      <exception cref="T:System.ArgumentException">관계와 행이 같은 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataRow" /> 개체로 이루어진 배열 또는 길이가 0인 배열입니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.GetParentRows(System.String,System.Data.DataRowVersion)">
      <summary>
        <see cref="T:System.Data.DataRow" />의 지정된 <see cref="P:System.Data.DataRelation.RelationName" />과 <see cref="T:System.Data.DataRelation" />을 사용하여 <see cref="T:System.Data.DataRowVersion" />의 부모 행을 가져옵니다.</summary>
      <param name="relationName">
        <see cref="P:System.Data.DataRelation.RelationName" />의 <see cref="T:System.Data.DataRelation" /></param>
      <param name="version">가져올 데이터의 버전을 지정하는 <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다. 가능한 값은 <see langword="Default" />, <see langword="Original" />, <see langword="Current" /> 및 <see langword="Proposed" />입니다.</param>
      <exception cref="T:System.ArgumentException">관계와 행이 같은 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="relation" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.VersionNotFoundException">행에 요청한 <see cref="T:System.Data.DataRowVersion" />이 없는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataRow" /> 개체로 이루어진 배열 또는 길이가 0인 배열입니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.HasVersion(System.Data.DataRowVersion)">
      <summary>지정된 버전이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="version">행 버전을 지정하는 <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다.</param>
      <returns>버전이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Data.DataColumn)">
      <summary>지정된 <see cref="T:System.Data.DataColumn" />에 null 값이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />
      </param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
      <returns>열에 null 값이 있으면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>지정된 <see cref="T:System.Data.DataColumn" />과 <see cref="T:System.Data.DataRowVersion" />에 null 값이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />
      </param>
      <param name="version">행 버전을 지정하는 <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다. 가능한 값은 <see langword="Default" />, <see langword="Original" />, <see langword="Current" /> 및 <see langword="Proposed" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.VersionNotFoundException">행에 요청한 <paramref name="version" />이 없는 경우</exception>
      <returns>열에 null 값이 있으면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.Int32)">
      <summary>지정된 인덱스의 열에 null 값이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="columnIndex">열의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" />에 지정된 인덱스에 해당하는 열이 없습니다.</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
      <returns>열에 null 값이 있으면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.IsNull(System.String)">
      <summary>명명된 열에 null 값이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="columnName">열 이름입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnName" />에서 지정한 열을 찾을 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="columnName" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
      <returns>열에 null 값이 있으면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRow.RejectChanges">
      <summary>
        <see cref="M:System.Data.DataRow.AcceptChanges" />를 마지막으로 호출한 이후에 수행된 행의 모든 변경 내용을 취소합니다.</summary>
      <exception cref="T:System.Data.RowNotInTableException">행이 테이블에 속하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.DataRow.SetAdded">
      <summary>
        <see cref="P:System.Data.DataRow.RowState" />의 <see cref="T:System.Data.DataRow" />를 <see langword="Added" />로 변경합니다.</summary>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.Data.DataColumn,System.String)">
      <summary>
        <see cref="T:System.Data.DataColumn" />으로 지정된 열에 대한 오류 설명을 설정합니다.</summary>
      <param name="column">오류 설명을 설정할 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <param name="error">오류 설명입니다.</param>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.Int32,System.String)">
      <summary>지정된 인덱스를 가진 열에 대한 오류 설명을 설정합니다.</summary>
      <param name="columnIndex">열의 인덱스(0부터 시작)입니다.</param>
      <param name="error">오류 설명입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 인수가 범위를 벗어난 경우</exception>
    </member>
    <member name="M:System.Data.DataRow.SetColumnError(System.String,System.String)">
      <summary>지정된 이름을 가진 열에 대한 오류 설명을 설정합니다.</summary>
      <param name="columnName">열 이름입니다.</param>
      <param name="error">오류 설명입니다.</param>
    </member>
    <member name="M:System.Data.DataRow.SetModified">
      <summary>
        <see cref="P:System.Data.DataRow.RowState" />의 <see cref="T:System.Data.DataRow" />를 <see langword="Modified" />로 변경합니다.</summary>
    </member>
    <member name="M:System.Data.DataRow.SetNull(System.Data.DataColumn)">
      <summary>지정된 <see cref="T:System.Data.DataColumn" />의 값을 null 값으로 설정합니다.</summary>
      <param name="column">
        <see cref="T:System.Data.DataColumn" />
      </param>
    </member>
    <member name="M:System.Data.DataRow.SetParentRow(System.Data.DataRow)">
      <summary>지정된 새 부모 <see cref="T:System.Data.DataRow" />를 가지는 <see cref="T:System.Data.DataRow" />의 부모 행을 설정합니다.</summary>
      <param name="parentRow">새 부모 <see cref="T:System.Data.DataRow" />입니다.</param>
    </member>
    <member name="M:System.Data.DataRow.SetParentRow(System.Data.DataRow,System.Data.DataRelation)">
      <summary>지정된 새 부모 <see cref="T:System.Data.DataRow" />와 <see cref="T:System.Data.DataRow" />을 가지는 <see cref="T:System.Data.DataRelation" />의 부모 행을 설정합니다.</summary>
      <param name="parentRow">새 부모 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="relation">사용할 관계 <see cref="T:System.Data.DataRelation" />입니다.</param>
      <exception cref="T:System.Data.RowNotInTableException">행 중의 하나가 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">행 중 하나가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">관계가 <see cref="T:System.Data.DataRelationCollection" /> 개체의 <see cref="T:System.Data.DataSet" />에 속하지 않은 경우</exception>
      <exception cref="T:System.Data.InvalidConstraintException">관계의 자식 <see cref="T:System.Data.DataTable" />이 이 행이 속한 테이블이 아닌 경우</exception>
    </member>
    <member name="P:System.Data.DataRow.HasErrors">
      <summary>행에 오류가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션에 오류가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Data.DataColumn)">
      <summary>지정된 <see cref="T:System.Data.DataColumn" />에 저장된 데이터를 가져오거나 설정합니다.</summary>
      <param name="column">데이터가 들어 있는 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <exception cref="T:System.ArgumentException">열이 이 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" />가 null인 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에 값을 설정하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">값과 열의 데이터 형식이 일치하지 않는 경우</exception>
      <returns>데이터가 포함된 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>지정된 <see cref="T:System.Data.DataColumn" />에 저장된 특정 버전의 데이터를 가져옵니다.</summary>
      <param name="column">열에 대한 정보가 들어 있는 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <param name="version">원하는 행 버전을 지정하는 <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다. 가능한 값은 <see langword="Default" />, <see langword="Original" />, <see langword="Current" /> 및 <see langword="Proposed" />입니다.</param>
      <exception cref="T:System.ArgumentException">열이 테이블에 속하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" /> 인수에 null이 포함된 경우</exception>
      <exception cref="T:System.Data.VersionNotFoundException">행에 이 버전의 데이터가 없는 경우</exception>
      <returns>데이터가 포함된 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Int32)">
      <summary>지정된 인덱스를 가진 열에 저장된 데이터를 가져오거나 설정합니다.</summary>
      <param name="columnIndex">열의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에 값을 설정하려고 하는 경우</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 인수가 범위를 벗어난 경우</exception>
      <exception cref="T:System.InvalidCastException">값과 새 값의 <see cref="T:System.Type" /> 설정이 <see cref="P:System.Data.DataColumn.DataType" />과 일치하지 않는 경우</exception>
      <returns>데이터가 포함된 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRow.Item(System.Int32,System.Data.DataRowVersion)">
      <summary>검색할 데이터의 지정된 버전 및 인덱스를 가진 열에 저장된 데이터를 가져옵니다.</summary>
      <param name="columnIndex">열의 인덱스(0부터 시작)입니다.</param>
      <param name="version">원하는 행 버전을 지정하는 <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다. 가능한 값은 <see langword="Default" />, <see langword="Original" />, <see langword="Current" /> 및 <see langword="Proposed" />입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnIndex" /> 인수가 범위를 벗어난 경우</exception>
      <exception cref="T:System.InvalidCastException">값과 열의 데이터 형식이 일치하지 않는 경우</exception>
      <exception cref="T:System.Data.VersionNotFoundException">행에 이 버전의 데이터가 없는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에 값을 설정하려고 한 경우</exception>
      <returns>데이터가 포함된 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRow.Item(System.String)">
      <summary>지정된 이름을 가진 열에 저장된 데이터를 가져오거나 설정합니다.</summary>
      <param name="columnName">열 이름입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnName" />에서 지정한 열을 찾을 수 없는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에 값을 설정하려고 하는 경우</exception>
      <exception cref="T:System.InvalidCastException">설정한 값에 대해 해당 <see cref="T:System.Type" />이 <see cref="P:System.Data.DataColumn.DataType" />과 일치하지 않는 경우</exception>
      <exception cref="T:System.Data.NoNullAllowedException">
        <see cref="P:System.Data.DataColumn.AllowDBNull" />이 <see langword="false" />로 설정된 열에 null 값을 삽입하려고 할 때 발생합니다.</exception>
      <returns>데이터가 포함된 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRow.Item(System.String,System.Data.DataRowVersion)">
      <summary>명명된 열에 저장된 특정 버전의 데이터를 가져옵니다.</summary>
      <param name="columnName">열 이름입니다.</param>
      <param name="version">원하는 행 버전을 지정하는 <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다. 가능한 값은 <see langword="Default" />, <see langword="Original" />, <see langword="Current" /> 및 <see langword="Proposed" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnName" />에서 지정한 열을 찾을 수 없는 경우</exception>
      <exception cref="T:System.InvalidCastException">값과 열의 데이터 형식이 일치하지 않는 경우</exception>
      <exception cref="T:System.Data.VersionNotFoundException">행에 이 버전의 데이터가 없는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">행이 삭제된 경우</exception>
      <returns>데이터가 포함된 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRow.ItemArray">
      <summary>배열을 통해 이 행의 모든 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">배열이 테이블의 열 수보다 큰 경우</exception>
      <exception cref="T:System.InvalidCastException">배열의 값이 해당 <see cref="P:System.Data.DataColumn.DataType" />의 <see cref="T:System.Data.DataColumn" />과 일치하지 않는 경우</exception>
      <exception cref="T:System.Data.ConstraintException">제약 조건을 위반하여 편집한 경우</exception>
      <exception cref="T:System.Data.ReadOnlyException">편집 중에 읽기 전용 열의 값을 변경하려고 한 경우</exception>
      <exception cref="T:System.Data.NoNullAllowedException">편집 중에 <see cref="P:System.Data.DataColumn.AllowDBNull" /> 개체의 <see cref="T:System.Data.DataColumn" />이 <see langword="false" />인 열에 null 값을 지정하려고 한 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">행이 삭제된 경우</exception>
      <returns>
        <see cref="T:System.Object" /> 형식의 배열입니다.</returns>
    </member>
    <member name="P:System.Data.DataRow.RowError">
      <summary>행에 대한 사용자 지정 오류 설명을 가져오거나 설정합니다.</summary>
      <returns>오류를 설명하는 텍스트입니다.</returns>
    </member>
    <member name="P:System.Data.DataRow.RowState">
      <summary>
        <see cref="T:System.Data.DataRowCollection" />과의 관계와 관련하여 행의 현재 상태를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRowState" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Data.DataRow.Table">
      <summary>이 행에 스키마가 있는 <see cref="T:System.Data.DataTable" />을 가져옵니다.</summary>
      <returns>이 행이 속한 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="T:System.Data.DataRowAction">
      <summary>
        <see cref="T:System.Data.DataRow" />에서 수행된 작업을 설명합니다.</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Add">
      <summary>행이 테이블에 추가되었습니다.</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Change">
      <summary>행이 변경되었습니다.</summary>
    </member>
    <member name="F:System.Data.DataRowAction.ChangeCurrentAndOriginal">
      <summary>행의 원래 버전과 현재 버전이 변경되었습니다.</summary>
    </member>
    <member name="F:System.Data.DataRowAction.ChangeOriginal">
      <summary>행의 원래 버전이 변경되었습니다.</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Commit">
      <summary>행의 변경 내용이 커밋되었습니다.</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Delete">
      <summary>테이블에서 행을 삭제했습니다.</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Nothing">
      <summary>행이 변경되지 않았습니다.</summary>
    </member>
    <member name="F:System.Data.DataRowAction.Rollback">
      <summary>행에 대한 가장 최근의 변경이 롤백되었습니다.</summary>
    </member>
    <member name="T:System.Data.DataRowBuilder">
      <summary>
        <see langword="DataRowBuilder" /> 형식은 .NET Framework 인프라를 지원하며 사용자의 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="T:System.Data.DataRowChangeEventArgs">
      <summary>
        <see cref="E:System.Data.DataTable.RowChanged" />, <see cref="E:System.Data.DataTable.RowChanging" />, <see cref="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)" /> 및 <see cref="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.DataRowChangeEventArgs.#ctor(System.Data.DataRow,System.Data.DataRowAction)">
      <summary>
        <see cref="T:System.Data.DataRowChangeEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="row">작업을 수행할 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="action">
        <see cref="T:System.Data.DataRowAction" /> 값 중 하나입니다.</param>
    </member>
    <member name="P:System.Data.DataRowChangeEventArgs.Action">
      <summary>
        <see cref="T:System.Data.DataRow" />에서 수행한 작업을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRowAction" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Data.DataRowChangeEventArgs.Row">
      <summary>작업을 수행한 행을 가져옵니다.</summary>
      <returns>작업을 수행한 <see cref="T:System.Data.DataRow" />입니다.</returns>
    </member>
    <member name="T:System.Data.DataRowChangeEventHandler">
      <summary>
        <see cref="E:System.Data.DataTable.RowChanging" />의 <see cref="E:System.Data.DataTable.RowChanged" />, <see cref="E:System.Data.DataTable.RowDeleting" />, <see cref="E:System.Data.DataTable.RowDeleted" /> 및 <see cref="T:System.Data.DataTable" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.DataRowChangeEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Data.DataRowCollection">
      <summary>
        <see cref="T:System.Data.DataTable" />에 대한 행 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.DataRowCollection.Add(System.Data.DataRow)">
      <summary>지정된 <see cref="T:System.Data.DataRow" />를 <see cref="T:System.Data.DataRowCollection" /> 개체에 추가합니다.</summary>
      <param name="row">추가할 <see cref="T:System.Data.DataRow" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">행이 null인 경우</exception>
      <exception cref="T:System.ArgumentException">이 행이 다른 테이블에 속하거나 이 테이블에 이미 속해 있는 경우</exception>
      <exception cref="T:System.Data.ConstraintException">추가로 인해 제약 조건이 무효화되는경우</exception>
      <exception cref="T:System.Data.NoNullAllowedException">추가하는 동안 <see cref="T:System.Data.DataColumn" />이 false인 <see cref="P:System.Data.DataColumn.AllowDBNull" />에 null을 삽입하려고 하는 경우</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Add(System.Object[])">
      <summary>지정한 값을 사용하여 행을 만들고 그 행을 <see cref="T:System.Data.DataRowCollection" />에 추가합니다.</summary>
      <param name="values">새 행을 만드는데 사용하는 값 배열입니다.</param>
      <exception cref="T:System.ArgumentException">배열이 테이블의 열 수보다 큰 경우</exception>
      <exception cref="T:System.InvalidCastException">값이 해당 열 형식과 일치하지 않는 경우</exception>
      <exception cref="T:System.Data.ConstraintException">행을 추가하여 제약 조건을 무효화한 경우</exception>
      <exception cref="T:System.Data.NoNullAllowedException">
        <see cref="P:System.Data.DataColumn.AllowDBNull" />이 false인 열에 null을 설정하려고 한 경우</exception>
      <returns>없음</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.Clear">
      <summary>모든 행의 컬렉션을 지웁니다.</summary>
      <exception cref="T:System.Data.InvalidConstraintException">
        <see cref="T:System.Data.ForeignKeyConstraint" />에 <see cref="T:System.Data.DataRowCollection" />가 적용되는 경우</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Contains(System.Object)">
      <summary>컬렉션에 있는 모든 행의 기본 키에 지정한 값이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="key">테스트할 기본 키 값입니다.</param>
      <exception cref="T:System.Data.MissingPrimaryKeyException">이 테이블에 기본 키가 없는 경우</exception>
      <returns>지정한 기본 키 값이 있는 <see cref="T:System.Data.DataRow" />가 컬렉션에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.Contains(System.Object[])">
      <summary>컬렉션에 있는 모든 행의 기본 키 열에 개체 배열에 지정한 값이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="keys">테스트할 기본 키 값 배열입니다.</param>
      <exception cref="T:System.Data.MissingPrimaryKeyException">이 테이블에 기본 키가 없는 경우</exception>
      <returns>지정한 키 값이 있는 <see cref="T:System.Data.DataRowCollection" />가 <see cref="T:System.Data.DataRow" />에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.CopyTo(System.Array,System.Int32)">
      <summary>컬렉션의 모든 <see cref="T:System.Data.DataRow" /> 개체를 지정된 배열의 지정된 대상 배열 인덱스에서 시작하는 위치에 복사합니다.</summary>
      <param name="ar">
        <see langword="DataRowCollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">복사를 시작할 배열의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.DataRowCollection.CopyTo(System.Data.DataRow[],System.Int32)">
      <summary>컬렉션의 모든 <see cref="T:System.Data.DataRow" /> 개체를 지정된 배열의 지정된 대상 배열 인덱스에서 시작하는 위치에 복사합니다.</summary>
      <param name="array">
        <see langword="DataRowCollection" />에서 복사한 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">복사를 시작할 배열의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.DataRowCollection.Find(System.Object)">
      <summary>기본 키 값으로 지정한 행을 가져옵니다.</summary>
      <param name="key">찾을 <see cref="T:System.Data.DataRow" />의 기본 키 값입니다.</param>
      <exception cref="T:System.Data.MissingPrimaryKeyException">이 테이블에 기본 키가 없는 경우</exception>
      <returns>지정한 기본 키 값이 있는 <see cref="T:System.Data.DataRow" />이거나, 기본 키가 <see cref="T:System.Data.DataRowCollection" />에 없으면 null 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.Find(System.Object[])">
      <summary>지정한 기본 키 값이 있는 행을 가져옵니다.</summary>
      <param name="keys">찾을 기본 키 값 배열입니다. 이 배열의 형식은 <see langword="Object" />입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">그 인덱스 값에 일치하는 행이 없는 경우</exception>
      <exception cref="T:System.Data.MissingPrimaryKeyException">이 테이블에 기본 키가 없는 경우</exception>
      <returns>지정한 기본 키 값이 있는 <see cref="T:System.Data.DataRow" /> 개체이거나, 기본 키 값이 <see cref="T:System.Data.DataRowCollection" />에 없으면 null 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.GetEnumerator">
      <summary>이 컬렉션의 <see cref="T:System.Collections.IEnumerator" />를 가져옵니다.</summary>
      <returns>이 컬렉션의 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.IndexOf(System.Data.DataRow)">
      <summary>지정된 <see cref="T:System.Data.DataRow" /> 개체의 인덱스를 가져옵니다.</summary>
      <param name="row">검색할 <see langword="DataRow" />입니다.</param>
      <returns>행의 인덱스(0부터 시작)이거나, 행이 컬렉션에 없으면 -1입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowCollection.InsertAt(System.Data.DataRow,System.Int32)">
      <summary>컬렉션의 지정한 위치에 새 행을 삽입합니다.</summary>
      <param name="row">추가할 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="pos">
        <see langword="DataRow" />를 추가하려는 컬렉션에 있는 0에서 시작하는 위치입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="pos" />가 0보다 작은 경우</exception>
    </member>
    <member name="M:System.Data.DataRowCollection.Remove(System.Data.DataRow)">
      <summary>지정된 <see cref="T:System.Data.DataRow" />를 컬렉션에서 제거합니다.</summary>
      <param name="row">제거할 <see cref="T:System.Data.DataRow" />입니다.</param>
    </member>
    <member name="M:System.Data.DataRowCollection.RemoveAt(System.Int32)">
      <summary>컬렉션에서 지정된 인덱스의 행을 제거합니다.</summary>
      <param name="index">제거할 행의 인덱스입니다.</param>
    </member>
    <member name="P:System.Data.DataRowCollection.Count">
      <summary>이 컬렉션에 있는 <see cref="T:System.Data.DataRow" /> 개체의 총 수를 가져옵니다.</summary>
      <returns>이 컬렉션에 있는 <see cref="T:System.Data.DataRow" /> 개체의 총 수입니다.</returns>
    </member>
    <member name="P:System.Data.DataRowCollection.Item(System.Int32)">
      <summary>지정된 인덱스의 행을 가져옵니다.</summary>
      <param name="index">반환할 행의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">인덱스 값이 컬렉션의 항목 수보다 큰 경우</exception>
      <returns>지정된 <see cref="T:System.Data.DataRow" />입니다.</returns>
    </member>
    <member name="T:System.Data.DataRowComparer">
      <summary>
        <see cref="T:System.Data.DataRowComparer`1" /> 클래스의 singleton 인스턴스를 반환합니다.</summary>
    </member>
    <member name="P:System.Data.DataRowComparer.Default">
      <summary>
        <see cref="T:System.Data.DataRowComparer`1" />의 singleton 인스턴스를 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRowComparer`1" />의 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Data.DataRowComparer`1">
      <summary>값 기반 비교를 사용하여 두 <see cref="T:System.Data.DataRow" /> 개체가 같은지 비교합니다.</summary>
      <typeparam name="TRow">비교할 개체의 형식으로 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
    </member>
    <member name="M:System.Data.DataRowComparer`1.Equals(`0,`0)">
      <summary>열 단위 값 기반 비교를 사용하여 두 <see cref="T:System.Data.DataRow" /> 개체를 비교합니다.</summary>
      <param name="leftRow">비교할 첫 번째 <see cref="T:System.Data.DataRow" /> 개체입니다.</param>
      <param name="rightRow">비교할 두 번째 <see cref="T:System.Data.DataRow" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">소스 <see cref="T:System.Data.DataRow" /> 개체 중 하나 또는 모두가 <see langword="null" />인 경우</exception>
      <returns>두 <see cref="T:System.Data.DataRow" /> 개체에 동일한 열 값으로 구성된 순서 있는 집합이 들어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowComparer`1.GetHashCode(`0)">
      <summary>지정된 <see cref="T:System.Data.DataRow" /> 개체의 해시 코드를 반환합니다.</summary>
      <param name="row">해시 코드를 컴퓨팅할 <see cref="T:System.Data.DataRow" />입니다.</param>
      <exception cref="T:System.ArgumentException">소스 <see cref="T:System.Data.DataRow" /> 개체가 <see cref="T:System.Data.DataTable" />에 속하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">소스 <see cref="T:System.Data.DataRow" /> 개체가 <see langword="null" />인 경우</exception>
      <returns>행의 해시 코드를 나타내는 <see cref="T:System.Int32" /> 값입니다.</returns>
    </member>
    <member name="P:System.Data.DataRowComparer`1.Default">
      <summary>
        <see cref="T:System.Data.DataRowComparer`1" />의 singleton 인스턴스를 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRowComparer`1" />의 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Data.DataRowExtensions">
      <summary>
        <see cref="T:System.Data.DataRow" /> 클래스에 대한 확장 메서드를 정의합니다. 이 클래스는 static 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)">
      <summary>지정된 행의 각 열 값에 대해 강력한 형식의 액세스를 제공합니다. <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn)" /> 메서드는 nullable 형식도 지원합니다.</summary>
      <param name="row">확장 메서드에서 <see langword="this" /> 인스턴스 역할을 하는 입력 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="column">값을 반환할 열을 지정하는 입력 <see cref="T:System.Data.DataColumn" /> 개체입니다.</param>
      <typeparam name="T">열의 반환 형식을 지정하는 제네릭 매개 변수입니다.</typeparam>
      <exception cref="T:System.InvalidCastException">내부 열의 값 형식을 제네릭 매개 변수 <paramref name="T" />에 지정된 형식으로 캐스팅할 수 없는 경우</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="column" />에 지정된 열이 <see cref="T:System.Data.DataTable" />가 속한 <see cref="T:System.Data.DataRow" />에 없는 경우</exception>
      <exception cref="T:System.NullReferenceException">nullable이 아닌 형식에 null 값이 할당됩니다.</exception>
      <returns>
        <paramref name="T" />으로 지정된 <see cref="T:System.Data.DataColumn" />의 <paramref name="column" /> 형식 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)">
      <summary>지정된 행의 각 열 값에 대해 강력한 형식의 액세스를 제공합니다. <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Data.DataColumn,System.Data.DataRowVersion)" /> 메서드는 nullable 형식도 지원합니다.</summary>
      <param name="row">확장 메서드에서 <see langword="this" /> 인스턴스 역할을 하는 입력 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="column">값을 반환할 열을 지정하는 입력 <see cref="T:System.Data.DataColumn" /> 개체입니다.</param>
      <param name="version">반환할 열 값의 버전을 지정하는 <see langword="Current" /> 또는 <see langword="Original" /> 버전 등의 <see cref="T:System.Data.DataRowVersion" /> 열거형입니다.</param>
      <typeparam name="T">열의 반환 형식을 지정하는 제네릭 매개 변수입니다.</typeparam>
      <exception cref="T:System.InvalidCastException">내부 열의 값 형식을 제네릭 매개 변수 <paramref name="T" />에 지정된 형식으로 캐스팅할 수 없는 경우</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="column" />에 지정된 열이 <see cref="T:System.Data.DataTable" />가 속한 <see cref="T:System.Data.DataRow" />에 없는 경우</exception>
      <exception cref="T:System.NullReferenceException">nullable이 아닌 형식에 null 값이 할당됩니다.</exception>
      <returns>
        <paramref name="T" /> 및 <paramref name="column" />에 지정된 <see cref="T:System.Data.DataColumn" />의 <paramref name="version" /> 형식 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)">
      <summary>지정된 행의 각 열 값에 대해 강력한 형식의 액세스를 제공합니다. <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32)" /> 메서드는 nullable 형식도 지원합니다.</summary>
      <param name="row">확장 메서드에서 <see langword="this" /> 인스턴스 역할을 하는 입력 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="columnIndex">열 인덱스입니다.</param>
      <typeparam name="T">열의 반환 형식을 지정하는 제네릭 매개 변수입니다.</typeparam>
      <exception cref="T:System.InvalidCastException">내부 열의 값 형식을 제네릭 매개 변수 <paramref name="T" />에 지정된 형식으로 캐스팅할 수 없는 경우</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" />에 지정된 열이 <see cref="T:System.Data.DataTable" />가 속한 <see cref="T:System.Data.DataRow" />에 없는 경우</exception>
      <exception cref="T:System.NullReferenceException">nullable이 아닌 형식에 null 값이 할당됩니다.</exception>
      <returns>
        <paramref name="T" />으로 지정된 <see cref="T:System.Data.DataColumn" />의 <paramref name="columnIndex" /> 형식 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)">
      <summary>지정된 행의 각 열 값에 대해 강력한 형식의 액세스를 제공합니다. <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.Int32,System.Data.DataRowVersion)" /> 메서드는 nullable 형식도 지원합니다.</summary>
      <param name="row">확장 메서드에서 <see langword="this" /> 인스턴스 역할을 하는 입력 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="columnIndex">값을 반환할 열의 서수(0부터 시작)입니다.</param>
      <param name="version">반환할 열 값의 버전을 지정하는 <see langword="Current" /> 또는 <see langword="Original" /> 버전 등의 <see cref="T:System.Data.DataRowVersion" /> 열거형입니다.</param>
      <typeparam name="T">열의 반환 형식을 지정하는 제네릭 매개 변수입니다.</typeparam>
      <exception cref="T:System.InvalidCastException">내부 열의 값 형식을 제네릭 매개 변수 <paramref name="T" />에 지정된 형식으로 캐스팅할 수 없는 경우</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" />에 지정된 열이 <see cref="T:System.Data.DataTable" />가 속한 <see cref="T:System.Data.DataRow" />에 없는 경우</exception>
      <exception cref="T:System.NullReferenceException">nullable이 아닌 형식에 null 값이 할당됩니다.</exception>
      <returns>
        <paramref name="T" /> 및 <paramref name="ordinal" />에 지정된 <see cref="T:System.Data.DataColumn" />의 <paramref name="version" /> 형식 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)">
      <summary>지정된 행의 각 열 값에 대해 강력한 형식의 액세스를 제공합니다. <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String)" /> 메서드는 nullable 형식도 지원합니다.</summary>
      <param name="row">확장 메서드에서 <see langword="this" /> 인스턴스 역할을 하는 입력 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="columnName">값을 반환할 열의 이름입니다.</param>
      <typeparam name="T">열의 반환 형식을 지정하는 제네릭 매개 변수입니다.</typeparam>
      <exception cref="T:System.InvalidCastException">내부 열의 값 형식을 제네릭 매개 변수 <paramref name="T" />에 지정된 형식으로 캐스팅할 수 없는 경우</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnName" />에 지정된 열이 <see cref="T:System.Data.DataTable" />가 속한 <see cref="T:System.Data.DataRow" />에 없는 경우</exception>
      <exception cref="T:System.NullReferenceException">nullable이 아닌 형식에 <see langword="null" /> 값이 할당된 경우</exception>
      <returns>
        <paramref name="T" />으로 지정된 <see cref="T:System.Data.DataColumn" />의 <paramref name="columnName" /> 형식 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)">
      <summary>지정된 행의 각 열 값에 대해 강력한 형식의 액세스를 제공합니다. <see cref="M:System.Data.DataRowExtensions.Field``1(System.Data.DataRow,System.String,System.Data.DataRowVersion)" /> 메서드는 nullable 형식도 지원합니다.</summary>
      <param name="row">확장 메서드에서 <see langword="this" /> 인스턴스 역할을 하는 입력 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="columnName">값을 반환할 열의 이름입니다.</param>
      <param name="version">반환할 열 값의 버전을 지정하는 <see langword="Current" /> 또는 <see langword="Original" /> 버전 등의 <see cref="T:System.Data.DataRowVersion" /> 열거형입니다.</param>
      <typeparam name="T">열의 반환 형식을 지정하는 제네릭 매개 변수입니다.</typeparam>
      <exception cref="T:System.InvalidCastException">내부 열의 값 형식을 제네릭 매개 변수 <paramref name="T" />에 지정된 형식으로 캐스팅할 수 없는 경우</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="columnName" />에 지정된 열이 <see cref="T:System.Data.DataTable" />가 속한 <see cref="T:System.Data.DataRow" />에 없는 경우</exception>
      <exception cref="T:System.NullReferenceException">nullable이 아닌 형식에 null 값이 할당됩니다.</exception>
      <returns>
        <paramref name="T" /> 및 <paramref name="columnName" />에 지정된 <see cref="T:System.Data.DataColumn" />의 <paramref name="version" /> 형식 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)">
      <summary>
        <see cref="T:System.Data.DataRow" />에서 지정된 열의 새 값을 설정합니다. <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Data.DataColumn,``0)" /> 메서드는 nullable 형식도 지원합니다.</summary>
      <param name="row">확장 메서드에서 <see langword="this" /> 인스턴스 역할을 하는 입력 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="column">입력 <see cref="T:System.Data.DataColumn" />은 검색할 행 값을 지정합니다.</param>
      <param name="value">지정된 열의 새 행 값(<paramref name="T" /> 형식)입니다.</param>
      <typeparam name="T">열의 값 형식을 지정하는 제네릭 매개 변수입니다.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="column" />에서 지정한 열을 찾을 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="column" />이 null입니다.</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에 값을 설정하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">내부 열의 값 형식을 제네릭 매개 변수 <paramref name="T" />에 지정된 형식으로 캐스팅할 수 없는 경우</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)">
      <summary>메서드가 호출된 <see cref="T:System.Data.DataRow" />에서 지정된 열의 새 값을 설정합니다. <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.Int32,``0)" /> 메서드는 nullable 형식도 지원합니다.</summary>
      <param name="row">확장 메서드에서 <see langword="this" /> 인스턴스 역할을 하는 입력 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="columnIndex">값을 설정할 열의 서수(0부터 시작)입니다.</param>
      <param name="value">지정된 열의 새 행 값(<paramref name="T" /> 형식)입니다.</param>
      <typeparam name="T">열의 값 형식을 지정하는 제네릭 매개 변수입니다.</typeparam>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에 값을 설정하려고 한 경우</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="ordinal" /> 인수가 범위를 벗어난 경우</exception>
      <exception cref="T:System.InvalidCastException">내부 열의 값 형식을 제네릭 매개 변수 <paramref name="T" />에 지정된 형식으로 캐스팅할 수 없는 경우</exception>
    </member>
    <member name="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)">
      <summary>
        <see cref="T:System.Data.DataRow" />에서 지정된 열의 새 값을 설정합니다. <see cref="M:System.Data.DataRowExtensions.SetField``1(System.Data.DataRow,System.String,``0)" /> 메서드는 nullable 형식도 지원합니다.</summary>
      <param name="row">확장 메서드에서 <see langword="this" /> 인스턴스 역할을 하는 입력 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="columnName">값을 설정할 열의 이름입니다.</param>
      <param name="value">지정된 열의 새 행 값(<paramref name="T" /> 형식)입니다.</param>
      <typeparam name="T">열의 값 형식을 지정하는 제네릭 매개 변수입니다.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnName" />에서 지정한 열을 찾을 수 없는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에 값을 설정하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">내부 열의 값 형식을 제네릭 매개 변수 <paramref name="T" />에 지정된 형식으로 캐스팅할 수 없는 경우</exception>
    </member>
    <member name="T:System.Data.DataRowState">
      <summary>
        <see cref="T:System.Data.DataRow" /> 개체의 상태를 가져옵니다.</summary>
    </member>
    <member name="F:System.Data.DataRowState.Added">
      <summary>행이 <see cref="T:System.Data.DataRowCollection" />에 추가되었으며 <see cref="M:System.Data.DataRow.AcceptChanges" />는 호출되지 않았습니다.</summary>
    </member>
    <member name="F:System.Data.DataRowState.Deleted">
      <summary>
        <see cref="M:System.Data.DataRow.Delete" />의 <see cref="T:System.Data.DataRow" /> 메서드를 사용하여 행을 삭제했습니다.</summary>
    </member>
    <member name="F:System.Data.DataRowState.Detached">
      <summary>행이 만들어졌지만 <see cref="T:System.Data.DataRowCollection" />의 일부는 아닙니다. <see cref="T:System.Data.DataRow" />는 만들어진 직후 및 컬렉션에 추가되기 전 또는 컬렉션에서 제거된 경우 이 상태가 됩니다.</summary>
    </member>
    <member name="F:System.Data.DataRowState.Modified">
      <summary>행이 수정되었으며 <see cref="M:System.Data.DataRow.AcceptChanges" />는 호출되지 않았습니다.</summary>
    </member>
    <member name="F:System.Data.DataRowState.Unchanged">
      <summary>
        <see cref="M:System.Data.DataRow.AcceptChanges" />가 마지막으로 호출된 이후에 행이 변경되지 않았습니다.</summary>
    </member>
    <member name="T:System.Data.DataRowVersion">
      <summary>
        <see cref="T:System.Data.DataRow" />의 버전을 설명합니다.</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Current">
      <summary>행에 현재 값이 포함됩니다.</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Default">
      <summary>
        <see cref="T:System.Data.DataRowState" />의 기본 버전입니다. <see langword="DataRowState" /> 값이 <see langword="Added" />, <see langword="Modified" /> 또는 <see langword="Deleted" />인 경우 기본 버전은 <see langword="Current" />입니다. <see cref="T:System.Data.DataRowState" /> 값이 <see langword="Detached" />인 경우 버전은 <see langword="Proposed" />입니다.</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Original">
      <summary>행에 원래 값이 포함됩니다.</summary>
    </member>
    <member name="F:System.Data.DataRowVersion.Proposed">
      <summary>행에 제안된 값이 포함됩니다.</summary>
    </member>
    <member name="T:System.Data.DataRowView">
      <summary>
        <see cref="T:System.Data.DataRow" />의 사용자 지정 뷰를 나타냅니다.</summary>
    </member>
    <member name="E:System.Data.DataRowView.PropertyChanged">
      <summary>
        <see cref="T:System.Data.DataRowView" /> 속성이 변경되면 발생하는 이벤트입니다.</summary>
    </member>
    <member name="M:System.Data.DataRowView.BeginEdit">
      <summary>편집 프로시저를 시작합니다.</summary>
    </member>
    <member name="M:System.Data.DataRowView.CancelEdit">
      <summary>편집 프로시저를 취소합니다.</summary>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation)">
      <summary>지정된 자식 <see cref="T:System.Data.DataView" />이 있는 자식 <see cref="T:System.Data.DataTable" />에 대한 <see cref="T:System.Data.DataRelation" />를 반환합니다.</summary>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> 개체</param>
      <returns>자식 <see cref="T:System.Data.DataView" />에 대한 <see cref="T:System.Data.DataTable" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.Data.DataRelation,System.Boolean)">
      <summary>지정된 <see cref="T:System.Data.DataView" /> 및 부모가 있는 자식 <see cref="T:System.Data.DataTable" />에 대한 <see cref="T:System.Data.DataRelation" />를 반환합니다.</summary>
      <param name="relation">
        <see cref="T:System.Data.DataRelation" /> 개체</param>
      <param name="followParent">부모 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relation" />이(가) <see langword="null" />인 경우</exception>
      <returns>자식 <see cref="T:System.Data.DataView" />에 대한 <see cref="T:System.Data.DataTable" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.String)">
      <summary>지정된 자식 <see cref="T:System.Data.DataView" /> 이름이 있는 자식 <see cref="T:System.Data.DataTable" />에 대한 <see cref="T:System.Data.DataRelation" />를 반환합니다.</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 이름을 포함하는 문자열입니다.</param>
      <returns>자식 <see cref="T:System.Data.DataView" />에 대한 <see cref="T:System.Data.DataTable" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.CreateChildView(System.String,System.Boolean)">
      <summary>지정된 <see cref="T:System.Data.DataView" /> 이름 및 부모가 있는 자식 <see cref="T:System.Data.DataTable" />에 대한 <see cref="T:System.Data.DataRelation" />를 반환합니다.</summary>
      <param name="relationName">
        <see cref="T:System.Data.DataRelation" /> 이름을 포함하는 문자열입니다.</param>
      <param name="followParent">만든 자식 뷰를 부모와 동기화된 상태로 유지하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="relation" />이(가) <see langword="null" />인 경우</exception>
      <returns>자식 <see cref="T:System.Data.DataView" />에 대한 <see cref="T:System.Data.DataTable" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.Delete">
      <summary>행을 삭제합니다.</summary>
    </member>
    <member name="M:System.Data.DataRowView.EndEdit">
      <summary>기본 <see cref="T:System.Data.DataRow" />에 대한 변경 내용을 커밋하고 <see cref="M:System.Data.DataRowView.BeginEdit" />로 시작된 편집 세션을 끝냅니다.  <see cref="M:System.Data.DataRowView.CancelEdit" />를 사용하여 <see cref="T:System.Data.DataRow" />에 대한 변경 내용을 취소합니다.</summary>
    </member>
    <member name="M:System.Data.DataRowView.Equals(System.Object)">
      <summary>현재 <see cref="T:System.Data.DataRowView" />가 지정된 개체와 같은지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="other">비교될 <see cref="T:System.Object" />입니다.</param>
      <returns>
        <paramref name="object" />가 <see cref="T:System.Data.DataRowView" />이고 현재 <see cref="T:System.Data.DataRowView" />와 같은 행을 반환하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.GetHashCode">
      <summary>
        <see cref="T:System.Data.DataRow" /> 개체의 해시 코드를 반환합니다.</summary>
      <returns>이 인스턴스의 값이 0이 아니면 부울 <see langword="true" />를 나타내는 부호 있는 32비트 정수 해시 코드 1을 반환하고, 그렇지 않으면 부울 <see langword="false" />를 나타내는 정수 0을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetAttributes">
      <summary>해당 구성 요소 인스턴스에 대한 사용자 지정 특성의 컬렉션을 반환합니다.</summary>
      <returns>이 개체에 대한 특성을 포함하는 AttributeCollection입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetClassName">
      <summary>해당 구성 요소 인스턴스의 클래스 이름을 반환합니다.</summary>
      <returns>구성 요소의 이 인스턴스의 클래스 이름입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetComponentName">
      <summary>해당 구성 요소 인스턴스의 이름을 반환합니다.</summary>
      <returns>해당 구성 요소 인스턴스의 이름입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetConverter">
      <summary>해당 구성 요소 인스턴스에 대한 형식 변환기를 반환합니다.</summary>
      <returns>이 구성 요소 인스턴스에 대한 형식 변환기입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent">
      <summary>해당 구성 요소 인스턴스의 기본 이벤트를 반환합니다.</summary>
      <returns>이 구성 요소 인스턴스의 기본 이벤트입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty">
      <summary>해당 구성 요소 인스턴스의 기본 속성을 반환합니다.</summary>
      <returns>이 구성 요소 인스턴스의 기본 속성입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)">
      <summary>해당 구성 요소 인스턴스에 대한 지정된 형식의 편집기를 반환합니다.</summary>
      <param name="editorBaseType">해당 개체의 편집기를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>해당 개체의 편집기인 지정된 형식의 <see cref="T:System.Object" />이거나, 편집기를 찾을 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents">
      <summary>해당 구성 요소 인스턴스의 이벤트를 반환합니다.</summary>
      <returns>이 구성 요소 인스턴스의 이벤트입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])">
      <summary>지정된 특성이 있는 구성 요소의 이 인스턴스에 대한 이벤트를 반환합니다.</summary>
      <param name="attributes">특성</param>
      <returns>이 구성 요소 인스턴스의 이벤트입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetProperties">
      <summary>해당 구성 요소 인스턴스의 속성을 반환합니다.</summary>
      <returns>해당 구성 요소 인스턴스의 속성입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])">
      <summary>지정된 특성이 있는 구성 요소의 이 인스턴스에 대한 속성을 반환합니다.</summary>
      <param name="attributes">특성입니다.</param>
      <returns>해당 구성 요소 인스턴스의 속성입니다.</returns>
    </member>
    <member name="M:System.Data.DataRowView.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
      <summary>지정된 속성 설명자가 설명하는 속성이 포함된 개체를 반환합니다.</summary>
      <param name="pd">소유자가 있는 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <returns>지정된 속성의 소유자를 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRowView.DataView">
      <summary>이 행이 속한 <see cref="T:System.Data.DataView" />를 가져옵니다.</summary>
      <returns>이 행이 속한 <see langword="DataView" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRowView.IsEdit">
      <summary>행이 편집 모드인지 여부를 나타냅니다.</summary>
      <returns>행이 편집 모드이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRowView.IsNew">
      <summary>
        <see cref="T:System.Data.DataRowView" />가 새 행인지 여부를 나타냅니다.</summary>
      <returns>새 행이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRowView.Item(System.Int32)">
      <summary>지정된 열에 있는 값을 가져오거나 설정합니다.</summary>
      <param name="ndx">열 인덱스입니다.</param>
      <exception cref="T:System.Data.DataException">
        <see cref="P:System.Data.DataRowView.DataView" />에서는 편집을 허용하지 않으며 <see cref="T:System.Data.DataRowView" />가 신규가 아닙니다.</exception>
      <exception cref="T:System.IndexOutOfRangeException">해당 인덱스 값에 일치하는 열이 없습니다.</exception>
      <returns>열의 값입니다.</returns>
    </member>
    <member name="P:System.Data.DataRowView.Item(System.String)">
      <summary>지정된 열에 있는 값을 가져오거나 설정합니다.</summary>
      <param name="property">지정된 열이 있는 문자열입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 이름 또는 관계의 열을 찾을 수 없습니다.
        
또는

<see cref="P:System.Data.DataRowView.DataView" />에서는 편집을 허용하지 않으며 <see cref="T:System.Data.DataRowView" />가 신규가 아닙니다.</exception>
      <exception cref="T:System.Data.DataException">값을 설정할 때 <paramref name="property" />이(가) 일치하지 않습니다.</exception>
      <returns>열의 값입니다.</returns>
    </member>
    <member name="P:System.Data.DataRowView.Row">
      <summary>표시되는 <see cref="T:System.Data.DataRow" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRow" />로 표시되는 <see cref="T:System.Data.DataRowView" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRowView.RowVersion">
      <summary>
        <see cref="T:System.Data.DataRow" />에 대한 현재 버전 설명을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다. <see cref="P:System.Data.DataRowView.RowVersion" /> 속성의 가능한 값은 <see langword="Default" />, <see langword="Original" />, <see langword="Current" /> 및 <see langword="Proposed" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataRowView.System#ComponentModel#IDataErrorInfo#Error">
      <summary>개체에 대한 유효성 검사 오류를 설명하는 메시지를 가져옵니다.</summary>
      <returns>프로젝트에 유효성 검사 오류가 있습니다.</returns>
    </member>
    <member name="P:System.Data.DataRowView.System#ComponentModel#IDataErrorInfo#Item(System.String)">
      <summary>지정된 이름의 속성에 대한 오류 메시지를 가져옵니다.</summary>
      <param name="colName">오류 메시지를 가져올 해당 속성의 이름입니다.</param>
      <returns>해당 속성에 대한 오류 메시지입니다. 기본값은 빈 문자열("")입니다.</returns>
    </member>
    <member name="T:System.Data.DataSet">
      <summary>데이터의 메모리 내 캐시를 나타냅니다.</summary>
    </member>
    <member name="E:System.Data.DataSet.Initialized">
      <summary>
        <see cref="T:System.Data.DataSet" />이 초기화된 후 발생합니다.</summary>
    </member>
    <member name="E:System.Data.DataSet.MergeFailed">
      <summary>대상과 소스 <see cref="T:System.Data.DataRow" />의 기본 키 값이 같고 <see cref="P:System.Data.DataSet.EnforceConstraints" />를 true로 설정한 경우 발생합니다.</summary>
    </member>
    <member name="M:System.Data.DataSet.#ctor">
      <summary>
        <see cref="T:System.Data.DataSet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정한 serialization 정보와 컨텍스트가 있는 <see cref="T:System.Data.DataSet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화하거나 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스와 대상입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext,System.Boolean)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체</param>
      <param name="ConstructSchema">부울 값입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.#ctor(System.String)">
      <summary>지정된 이름을 사용하여 <see cref="T:System.Data.DataSet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataSetName">
        <see cref="T:System.Data.DataSet" />의 이름입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.AcceptChanges">
      <summary>이 <see cref="T:System.Data.DataSet" />이 로드된 이후 또는 <see cref="M:System.Data.DataSet.AcceptChanges" />가 마지막으로 호출된 이후에 변경된 DataSet의 모든 내용을 커밋합니다.</summary>
    </member>
    <member name="M:System.Data.DataSet.BeginInit">
      <summary>폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.Data.DataSet" />의 초기화를 시작합니다. 초기화는 런타임에 발생합니다.</summary>
    </member>
    <member name="M:System.Data.DataSet.Clear">
      <summary>모든 테이블에서 행을 모두 제거하여 데이터의 <see cref="T:System.Data.DataSet" />을 지웁니다.</summary>
    </member>
    <member name="M:System.Data.DataSet.Clone">
      <summary>모든 <see cref="T:System.Data.DataSet" /> 스키마, 관계 및 제약 조건을 포함하여 <see cref="T:System.Data.DataTable" />의 구조를 복사합니다. 데이터는 복사하지 않습니다.</summary>
      <returns>현재 <see cref="T:System.Data.DataSet" />과 같은 스키마를 가지지만 데이터가 없는 새 <see cref="T:System.Data.DataSet" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.Copy">
      <summary>이 <see cref="T:System.Data.DataSet" />의 구조와 데이터를 모두 복사합니다.</summary>
      <returns>이 <see cref="T:System.Data.DataSet" />과 같은 구조(테이블 스키마, 관계 및 제약 조건)와 데이터를 가진 새 <see cref="T:System.Data.DataSet" />을 반환합니다.  
  
 <block subset="none" type="note"><para>  
 이 클래스가 서브클래싱된 경우 서브클래스도 복사됩니다.</para></block></returns>
    </member>
    <member name="M:System.Data.DataSet.CreateDataReader">
      <summary>테이블이 <see cref="T:System.Data.DataTableReader" /> 컬렉션에 나타나는 순서대로 <see cref="T:System.Data.DataTable" />마다 결과 집합이 하나씩 있는 <see cref="P:System.Data.DataSet.Tables" />를 반환합니다.</summary>
      <returns>결과 집합을 하나 이상 포함하는 <see cref="T:System.Data.DataTableReader" />이고, 소스 <see cref="T:System.Data.DataTable" />에 포함된 <see cref="T:System.Data.DataSet" /> 인스턴스에 해당합니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.CreateDataReader(System.Data.DataTable[])">
      <summary>
        <see cref="T:System.Data.DataTableReader" />마다 결과 집합이 하나씩 있는 <see cref="T:System.Data.DataTable" />를 반환합니다.</summary>
      <param name="dataTables">
        <see cref="T:System.Data.DataTableReader" />에 반환될 결과 집합의 순서를 제공하는 DataTables의 배열입니다.</param>
      <returns>결과 집합을 하나 이상 포함하는 <see cref="T:System.Data.DataTableReader" />이고, 소스 <see cref="T:System.Data.DataTable" />에 포함된 <see cref="T:System.Data.DataSet" /> 인스턴스에 해당합니다. 반환된 결과 집합은 <paramref name="dataTables" /> 매개 변수에 의해 지정된 순서를 따릅니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="P:System.Data.DataSet.SchemaSerializationMode" />의 <see cref="T:System.Data.DataSet" />를 확인합니다.</summary>
      <param name="info">원격 시나리오에서 deserialization을 수행하는 동안 <see langword="DataSet" />의 protected 생성자 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 호출하는 데 사용되는 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />입니다.</param>
      <param name="context">원격 시나리오에서 deserialization을 수행하는 동안 <see langword="DataSet" />의 protected 생성자 <see cref="T:System.Runtime.Serialization.StreamingContext" />를 호출하는 데 사용되는 <see cref="M:System.Data.DataSet.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />입니다.</param>
      <returns>스키마 정보가 페이로드에서 생략되었는지 여부를 나타내는 <see cref="T:System.Data.SchemaSerializationMode" /> 열거형입니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.DetermineSchemaSerializationMode(System.Xml.XmlReader)">
      <summary>
        <see cref="P:System.Data.DataSet.SchemaSerializationMode" />의 <see cref="T:System.Data.DataSet" />를 확인합니다.</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />을 deserialization을 수행하는 동안 전달되는 <see cref="T:System.Data.DataSet" /> 인스턴스입니다.</param>
      <returns>스키마 정보가 페이로드에서 생략되었는지 여부를 나타내는 <see cref="T:System.Data.SchemaSerializationMode" /> 열거형입니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.EndInit">
      <summary>폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.Data.DataSet" />의 초기화를 끝냅니다. 초기화는 런타임에 발생합니다.</summary>
    </member>
    <member name="M:System.Data.DataSet.GetChanges">
      <summary>로드되거나 <see cref="T:System.Data.DataSet" />가 마지막으로 호출된 후에 변경된 내용이 모두 들어 있는 <see cref="M:System.Data.DataSet.AcceptChanges" />의 복사본을 가져옵니다.</summary>
      <returns>작업을 수행한 다음 <see cref="T:System.Data.DataSet" />를 사용하여 다시 병합할 수 있는 경우 이 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />의 변경 사항 복사본을 반환합니다. 변경된 행이 없으면 메서드는 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.GetChanges(System.Data.DataRowState)">
      <summary>마지막으로 로드되거나 <see cref="T:System.Data.DataSet" />가 호출된 후에 변경되어 <see cref="M:System.Data.DataSet.AcceptChanges" />를 기준으로 필터링된 내용이 모두 들어 있는 <see cref="T:System.Data.DataRowState" />의 복사본을 가져옵니다.</summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 값 중 하나입니다.</param>
      <returns>작업을 수행한 다음 <see cref="T:System.Data.DataSet" />를 사용하여 다시 병합할 수 있는 경우 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />의 필터링된 복사본을 반환합니다. 원하는 <see cref="T:System.Data.DataRowState" /> 행이 없으면 이 메서드는 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.GetDataSetSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>DataSet에 대한 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 복사본을 가져옵니다.</summary>
      <param name="schemaSet">지정된 스키마 집합입니다.</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 복사본입니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.DataSet" />을 serialize하는 데 필요한 데이터로 serialization 정보 개체를 채웁니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />과 연결된 serialize된 개체가 들어 있는 <see cref="T:System.Data.DataSet" />입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />과 연결된 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Data.DataSet" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Data.DataSet.GetSchemaSerializable">
      <summary>serializable <see cref="T:System.Xml.Schema.XmlSchema" /> 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.GetSerializationData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>이진 또는 XML 스트림에서 테이블 데이터를 역직렬화합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 인스턴스입니다.</param>
      <param name="context">스트리밍 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.GetXml">
      <summary>
        <see cref="T:System.Data.DataSet" />에 저장된 데이터의 XML 표현을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataSet" />에 저장된 데이터를 나타내는 문자열을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.GetXmlSchema">
      <summary>
        <see cref="T:System.Data.DataSet" />에 저장된 데이터의 XML 표현에 대한 XML 스키마를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataSet" />에 저장된 데이터의 XML 표현에 대한 XML 스키마 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.HasChanges">
      <summary>
        <see cref="T:System.Data.DataSet" />에 새 행, 삭제된 행 또는 수정된 행을 포함하여 변경 내용이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataSet" />에 변경 내용이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.HasChanges(System.Data.DataRowState)">
      <summary>
        <see cref="T:System.Data.DataSet" />에 새 행, 삭제된 행 또는 수정된 행을 포함하여 <see cref="T:System.Data.DataRowState" />를 기준으로 필터링된 변경 내용이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 값 중 하나입니다.</param>
      <returns>
        <see cref="T:System.Data.DataSet" />에 변경 내용이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.IO.Stream,System.String[])">
      <summary>지정된 <see cref="T:System.IO.Stream" />에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 적용합니다.</summary>
      <param name="stream">스키마를 읽어올 <see langword="Stream" />입니다.</param>
      <param name="nsArray">스키마 유추에서 제외할 네임스페이스 URI(Uniform Resource Identifier) 문자열로 이루어진 배열입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.IO.TextReader,System.String[])">
      <summary>지정된 <see cref="T:System.IO.TextReader" />에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 적용합니다.</summary>
      <param name="reader">스키마를 읽어올 <see langword="TextReader" />입니다.</param>
      <param name="nsArray">스키마 유추에서 제외할 네임스페이스 URI(Uniform Resource Identifier) 문자열로 이루어진 배열입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.String,System.String[])">
      <summary>지정된 파일에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 적용합니다.</summary>
      <param name="fileName">스키마를 읽어올 파일의 경로를 포함한 이름입니다.</param>
      <param name="nsArray">스키마 유추에서 제외할 네임스페이스 URI(Uniform Resource Identifier) 문자열로 이루어진 배열입니다.</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" />이 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />로 설정되지 않은 경우</exception>
    </member>
    <member name="M:System.Data.DataSet.InferXmlSchema(System.Xml.XmlReader,System.String[])">
      <summary>지정된 <see cref="T:System.Xml.XmlReader" />에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 적용합니다.</summary>
      <param name="reader">스키마를 읽어올 <see langword="XMLReader" />입니다.</param>
      <param name="nsArray">스키마 유추에서 제외할 네임스페이스 URI(Uniform Resource Identifier) 문자열로 이루어진 배열입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.InitializeDerivedDataSet">
      <summary>이진 또는 XML 스트림에서 DataSet의 모든 테이블 데이터를 역직렬화합니다.</summary>
    </member>
    <member name="M:System.Data.DataSet.IsBinarySerialized(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see langword="DataSet" />의 serialize된 표현에 대한 형식을 검사합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 개체</param>
      <returns>지정된 <see cref="T:System.Runtime.Serialization.SerializationInfo" />가 이진 형식으로 serialize된 <see langword="true" />을 나타내면 <see langword="DataSet" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])">
      <summary>
        <see cref="T:System.Data.DataSet" /> 인스턴스의 배열을 사용해 스키마 및 네임스페이스 정보를 제공하여, 제공된 <see cref="T:System.Data.IDataReader" />를 사용하는 데이터 소스의 값으로 <see cref="T:System.Data.DataTable" />을 채웁니다.</summary>
      <param name="reader">하나 이상의 결과 집합을 제공하는 <see cref="T:System.Data.IDataReader" />입니다.</param>
      <param name="loadOption">
        <see cref="T:System.Data.LoadOption" /> 열거형의 값으로서, 이미 <see cref="T:System.Data.DataTable" />의 <see cref="T:System.Data.DataSet" /> 인스턴스에 있는 행이 동일한 기본 키를 공유하는 들어오는 행과 결합되는 방식을 나타냅니다.</param>
      <param name="tables">
        <see cref="T:System.Data.DataTable" /> 메서드가 이름 및 네임스페이스 정보를 검색하는 <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.DataTable[])" /> 인스턴스의 배열입니다. 이러한 테이블은 각각 이 <see cref="T:System.Data.DataTableCollection" />에 포함된 <see cref="T:System.Data.DataSet" />의 멤버여야 합니다.</param>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])">
      <summary>
        <see cref="T:System.Data.DataSet" /> 인스턴스의 배열을 사용해 스키마 및 네임스페이스 정보를 제공하여, 제공된 <see cref="T:System.Data.IDataReader" />를 사용하는 데이터 소스의 값으로 <see cref="T:System.Data.DataTable" />을 채웁니다.</summary>
      <param name="reader">하나 이상의 결과 집합을 제공하는 <see cref="T:System.Data.IDataReader" />입니다.</param>
      <param name="loadOption">
        <see cref="T:System.Data.LoadOption" /> 열거형의 값으로서, 이미 <see cref="T:System.Data.DataTable" />의 <see cref="T:System.Data.DataSet" /> 인스턴스에 있는 행이 동일한 기본 키를 공유하는 들어오는 행과 결합되는 방식을 나타냅니다.</param>
      <param name="errorHandler">데이터를 로드하는 동안 오류가 발생하면 호출할 <see cref="T:System.Data.FillErrorEventHandler" /> 대리자입니다.</param>
      <param name="tables">
        <see cref="T:System.Data.DataTable" /> 메서드가 이름 및 네임스페이스 정보를 검색하는 <see cref="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler,System.Data.DataTable[])" /> 인스턴스의 배열입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.Load(System.Data.IDataReader,System.Data.LoadOption,System.String[])">
      <summary>문자열의 배열을 사용해 <see langword="DataSet" /> 내의 테이블에 대한 이름을 제공하여, 제공된 <see cref="T:System.Data.DataSet" />를 사용하는 데이터 소스의 값으로 <see cref="T:System.Data.IDataReader" />를 채웁니다.</summary>
      <param name="reader">하나 이상의 결과 집합을 제공하는 <see cref="T:System.Data.IDataReader" />입니다.</param>
      <param name="loadOption">
        <see cref="T:System.Data.LoadOption" /> 열거형의 값으로서, 이미 <see cref="T:System.Data.DataTable" />의 <see langword="DataSet" /> 인스턴스에 있는 행이 동일한 기본 키를 공유하는 들어오는 행과 결합되는 방식을 나타냅니다.</param>
      <param name="tables">
        <see langword="Load" /> 메서드가 테이블 이름 정보를 검색하는 문자열의 배열입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataRow[])">
      <summary>
        <see cref="T:System.Data.DataRow" /> 개체의 배열을 현재 <see cref="T:System.Data.DataSet" />에 병합합니다.</summary>
      <param name="rows">
        <see langword="DataRow" />에 병합되는 <see langword="DataSet" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataRow[],System.Boolean,System.Data.MissingSchemaAction)">
      <summary>
        <see cref="T:System.Data.DataRow" /> 개체의 배열을 현재 <see cref="T:System.Data.DataSet" />에 병합합니다. 이때 지정된 인수에 따라 <see langword="DataSet" />의 변경 내용을 유지하거나 삭제하고 호환되지 않는 스키마를 처리합니다.</summary>
      <param name="rows">
        <see cref="T:System.Data.DataRow" />에 병합되는 <see langword="DataSet" /> 개체의 배열입니다.</param>
      <param name="preserveChanges">
        <see langword="DataSet" />의 변경 내용을 유지하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet)">
      <summary>지정된 <see cref="T:System.Data.DataSet" /> 및 스키마를 현재 <see langword="DataSet" />에 병합합니다.</summary>
      <param name="dataSet">데이터와 스키마를 병합할 <see langword="DataSet" />입니다.</param>
      <exception cref="T:System.Data.ConstraintException">제약 조건을 사용할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean)">
      <summary>지정된 <see cref="T:System.Data.DataSet" /> 및 스키마를 현재 <see langword="DataSet" />에 병합합니다. 이때 지정된 인수에 따라 이 <see langword="DataSet" />의 변경 내용을 유지하거나 삭제합니다.</summary>
      <param name="dataSet">데이터와 스키마를 병합할 <see langword="DataSet" />입니다.</param>
      <param name="preserveChanges">현재 <see langword="DataSet" />의 변경 내용을 유지하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataSet,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>지정된 <see cref="T:System.Data.DataSet" /> 및 스키마를 현재 <see langword="DataSet" />에 병합합니다. 이때 지정된 인수에 따라 현재 <see langword="DataSet" />의 변경 내용을 유지하거나 삭제하고 호환되지 않는 스키마를 처리합니다.</summary>
      <param name="dataSet">데이터와 스키마를 병합할 <see langword="DataSet" />입니다.</param>
      <param name="preserveChanges">현재 <see langword="DataSet" />의 변경 내용을 유지하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataTable)">
      <summary>지정된 <see cref="T:System.Data.DataTable" /> 및 스키마를 현재 <see cref="T:System.Data.DataSet" />에 병합합니다.</summary>
      <param name="table">데이터와 스키마를 병합할 <see cref="T:System.Data.DataTable" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="table" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Data.DataSet.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>지정된 <see cref="T:System.Data.DataTable" /> 및 스키마를 현재 <see langword="DataSet" />과 병합합니다. 이때 지정된 인수에 따라 현재 <see langword="DataSet" />의 변경 내용을 유지하거나 삭제하고 호환되지 않는 스키마를 처리합니다.</summary>
      <param name="table">데이터와 스키마를 병합할 <see langword="DataTable" />입니다.</param>
      <param name="preserveChanges">
        <see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나입니다.</param>
      <param name="missingSchemaAction">
        <see langword="DataSet" />의 변경 내용을 유지하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dataSet" />이 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
        <see cref="M:System.Data.DataSet.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)" /> 이벤트를 발생시킵니다.</summary>
      <param name="pcevent">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.OnRemoveRelation(System.Data.DataRelation)">
      <summary>
        <see cref="T:System.Data.DataRelation" />에서 <see cref="T:System.Data.DataTable" /> 개체를 제거할 때 발생합니다.</summary>
      <param name="relation">제거 중인 <see cref="T:System.Data.DataRelation" />입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.OnRemoveTable(System.Data.DataTable)">
      <summary>
        <see cref="T:System.Data.DataTable" />에서 <see cref="T:System.Data.DataSet" />을 제거할 때 발생합니다.</summary>
      <param name="table">제거 중인 <see cref="T:System.Data.DataTable" />입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.RaisePropertyChanging(System.String)">
      <summary>지정된 <see cref="T:System.Data.DataSet" /> 속성이 변경될 것이라는 알림을 보냅니다.</summary>
      <param name="name">변경될 속성의 이름입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.Stream)">
      <summary>지정된 <see cref="T:System.Data.DataSet" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.IO.Stream" />으로 읽어옵니다.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />에서 파생되는 개체입니다.</param>
      <returns>데이터를 읽는 데 사용되는 <see cref="T:System.Data.XmlReadMode" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.Stream,System.Data.XmlReadMode)">
      <summary>지정된 <see cref="T:System.Data.DataSet" /> 및 <see cref="T:System.IO.Stream" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.Data.XmlReadMode" />으로 읽어옵니다.</summary>
      <param name="stream">읽어올 <see cref="T:System.IO.Stream" />입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 값 중 하나입니다.</param>
      <returns>데이터를 읽는 데 사용되는 <see langword="XmlReadMode" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.TextReader)">
      <summary>지정된 <see cref="T:System.Data.DataSet" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.IO.TextReader" />으로 읽어옵니다.</summary>
      <param name="reader">스키마와 데이터를 읽어올 <see langword="TextReader" />입니다.</param>
      <returns>데이터를 읽는 데 사용되는 <see cref="T:System.Data.XmlReadMode" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.IO.TextReader,System.Data.XmlReadMode)">
      <summary>지정된 <see cref="T:System.Data.DataSet" /> 및 <see cref="T:System.IO.TextReader" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.Data.XmlReadMode" />으로 읽어옵니다.</summary>
      <param name="reader">읽어올 <see cref="T:System.IO.TextReader" />입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 값 중 하나입니다.</param>
      <returns>데이터를 읽는 데 사용되는 <see langword="XmlReadMode" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.String)">
      <summary>지정된 파일을 사용하여 XML 스키마와 데이터를 <see cref="T:System.Data.DataSet" />으로 읽어옵니다.</summary>
      <param name="fileName">읽어올 파일의 경로를 포함한 이름입니다.</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" />이 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />로 설정되지 않은 경우</exception>
      <returns>데이터를 읽는 데 사용되는 <see langword="XmlReadMode" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.String,System.Data.XmlReadMode)">
      <summary>지정된 파일과 <see cref="T:System.Data.DataSet" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.Data.XmlReadMode" />으로 읽어옵니다.</summary>
      <param name="fileName">읽어올 파일의 경로를 포함한 이름입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 값 중 하나입니다.</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" />이 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />로 설정되지 않은 경우</exception>
      <returns>데이터를 읽는 데 사용되는 <see langword="XmlReadMode" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)">
      <summary>지정된 <see cref="T:System.Data.DataSet" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.Xml.XmlReader" />으로 읽어옵니다.</summary>
      <param name="reader">읽어올 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <returns>데이터를 읽는 데 사용되는 <see langword="XmlReadMode" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader,System.Data.XmlReadMode)">
      <summary>지정된 <see cref="T:System.Data.DataSet" /> 및 <see cref="T:System.Xml.XmlReader" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.Data.XmlReadMode" />으로 읽어옵니다.</summary>
      <param name="reader">읽어올 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlReadMode" /> 값 중 하나입니다.</param>
      <returns>데이터를 읽는 데 사용되는 <see langword="XmlReadMode" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.IO.Stream)">
      <summary>지정된 <see cref="T:System.IO.Stream" />에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 읽어옵니다.</summary>
      <param name="stream">읽어올 <see cref="T:System.IO.Stream" />입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.IO.TextReader)">
      <summary>지정된 <see cref="T:System.IO.TextReader" />에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 읽어옵니다.</summary>
      <param name="reader">읽어올 <see cref="T:System.IO.TextReader" />입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.String)">
      <summary>지정된 파일에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 읽어옵니다.</summary>
      <param name="fileName">읽을 파일 이름(경로 포함)입니다.</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" />이 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Read" />로 설정되지 않은 경우</exception>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSchema(System.Xml.XmlReader)">
      <summary>지정된 <see cref="T:System.Xml.XmlReader" />에서 <see cref="T:System.Data.DataSet" />으로 XML 스키마를 읽어옵니다.</summary>
      <param name="reader">읽어올 <see cref="T:System.Xml.XmlReader" />입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.ReadXmlSerializable(System.Xml.XmlReader)">
      <summary>특성을 무시하고 빈 DataSet을 반환합니다.</summary>
      <param name="reader">지정된 XML 판독기입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.RejectChanges">
      <summary>
        <see cref="T:System.Data.DataSet" />이 만들어진 이후 또는 <see cref="M:System.Data.DataSet.AcceptChanges" />가 마지막으로 호출된 이후에 해당 DataSet에서 변경된 내용을 모두 롤백합니다.</summary>
    </member>
    <member name="M:System.Data.DataSet.Reset">
      <summary>모든 테이블을 지우고 <see cref="T:System.Data.DataSet" />에서 모든 관계, 외래 제약 조건 및 테이블을 제거합니다. 서브클래스에서 <see cref="M:System.Data.DataSet.Reset" />을 재정의하여 <see cref="T:System.Data.DataSet" />을 원래 상태로 복원해야 합니다.</summary>
    </member>
    <member name="M:System.Data.DataSet.ShouldSerializeRelations">
      <summary>
        <see cref="P:System.Data.DataSet.Relations" /> 속성을 유지해야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>속성 값이 기본값에서 변경되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.ShouldSerializeTables">
      <summary>
        <see cref="P:System.Data.DataSet.Tables" /> 속성을 유지해야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>속성 값이 기본값에서 변경되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataSet.System#ComponentModel#IListSource#GetList">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IListSource.GetList" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IListSource.GetList" />를 참조하세요.</returns>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />를 참조하세요.</returns>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />를 참조하세요.</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.DataSet.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />를 참조하세요.</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.Stream)">
      <summary>지정된 <see cref="T:System.Data.DataSet" />을 사용하여 <see cref="T:System.IO.Stream" />의 현재 데이터를 씁니다.</summary>
      <param name="stream">파일에 쓸 때 사용되는 <see cref="T:System.IO.Stream" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
      <summary>지정된 <see cref="T:System.Data.DataSet" />와 <see cref="T:System.IO.Stream" />를 사용하여 <see cref="T:System.Data.XmlWriteMode" />의 현재 데이터를 쓰고 선택적으로 스키마를 씁니다. 스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다.</summary>
      <param name="stream">파일에 쓸 때 사용되는 <see cref="T:System.IO.Stream" /> 개체입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.TextWriter)">
      <summary>지정된 <see cref="T:System.Data.DataSet" />을 사용하여 <see cref="T:System.IO.TextWriter" />의 현재 데이터를 씁니다.</summary>
      <param name="writer">쓰기에 사용할 <see cref="T:System.IO.TextWriter" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
      <summary>지정된 <see cref="T:System.Data.DataSet" />와 <see cref="T:System.IO.TextWriter" />를 사용하여 <see cref="T:System.Data.XmlWriteMode" />의 현재 데이터를 쓰고 선택적으로 스키마를 씁니다. 스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다.</summary>
      <param name="writer">문서를 작성하는 데 사용되는 <see cref="T:System.IO.TextWriter" /> 개체입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.String)">
      <summary>지정된 파일에 <see cref="T:System.Data.DataSet" />의 현재 데이터를 씁니다.</summary>
      <param name="fileName">쓸 대상 파일 이름(경로 포함)입니다.</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" />이 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />로 설정되지 않은 경우</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.String,System.Data.XmlWriteMode)">
      <summary>지정된 <see cref="T:System.Data.DataSet" />를 사용하여 지정된 파일에 <see cref="T:System.Data.XmlWriteMode" />의 현재 데이터를 쓰고 선택적으로 스키마를 씁니다. 스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다.</summary>
      <param name="fileName">쓸 대상 파일 이름(경로 포함)입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" />이 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />로 설정되지 않은 경우</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Data.DataSet" />에 <see cref="T:System.Xml.XmlWriter" />의 현재 데이터를 씁니다.</summary>
      <param name="writer">쓰기에 사용할 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
      <summary>지정된 <see cref="T:System.Data.DataSet" />와 <see cref="T:System.Xml.XmlWriter" />를 사용하여 <see cref="T:System.Data.XmlWriteMode" />의 현재 데이터를 쓰고 선택적으로 스키마를 씁니다. 스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다.</summary>
      <param name="writer">쓰기에 사용할 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 구조체를 지정된 <see cref="T:System.IO.Stream" /> 개체에 XML 스키마로 씁니다.</summary>
      <param name="stream">파일에 쓸 때 사용되는 <see cref="T:System.IO.Stream" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.Stream,System.Converter{System.Type,System.String})">
      <summary>
        <see cref="T:System.Data.DataSet" /> 구조체를 지정된 <see cref="T:System.IO.Stream" /> 개체에 XML 스키마로 씁니다.</summary>
      <param name="stream">쓸 <see cref="T:System.IO.Stream" /> 개체입니다.</param>
      <param name="multipleTargetConverter">
        <see cref="T:System.Type" />을 문자열로 변환하는 데 사용되는 대리자입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 구조체를 지정된 <see cref="T:System.IO.TextWriter" /> 개체에 XML 스키마로 씁니다.</summary>
      <param name="writer">쓰기에 사용할 <see cref="T:System.IO.TextWriter" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.IO.TextWriter,System.Converter{System.Type,System.String})">
      <summary>지정된 <see cref="T:System.Data.DataSet" />에 <see cref="T:System.IO.TextWriter" /> 구조를 XML 스키마로 씁니다.</summary>
      <param name="writer">쓸 <see cref="T:System.IO.TextWriter" /> 개체입니다.</param>
      <param name="multipleTargetConverter">
        <see cref="T:System.Type" />을 문자열로 변환하는 데 사용되는 대리자입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.String)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 구조를 파일에 XML 스키마로 씁니다.</summary>
      <param name="fileName">쓸 대상 파일 이름(경로 포함)입니다.</param>
      <exception cref="T:System.Security.SecurityException">
        <see cref="T:System.Security.Permissions.FileIOPermission" />이 <see cref="F:System.Security.Permissions.FileIOPermissionAccess.Write" />로 설정되지 않은 경우</exception>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.String,System.Converter{System.Type,System.String})">
      <summary>
        <see cref="T:System.Data.DataSet" /> 구조를 파일에 XML 스키마로 씁니다.</summary>
      <param name="fileName">쓸 파일의 이름입니다.</param>
      <param name="multipleTargetConverter">
        <see cref="T:System.Type" />을 문자열로 변환하는 데 사용되는 대리자입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 구조를 <see cref="T:System.Xml.XmlWriter" /> 개체에 XML 스키마로 씁니다.</summary>
      <param name="writer">쓸 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Data.DataSet.WriteXmlSchema(System.Xml.XmlWriter,System.Converter{System.Type,System.String})">
      <summary>지정된 <see cref="T:System.Data.DataSet" />에 <see cref="T:System.Xml.XmlWriter" /> 구조를 XML 스키마로 씁니다.</summary>
      <param name="writer">쓸 <see cref="T:System.Xml.XmlWriter" /> 개체입니다.</param>
      <param name="multipleTargetConverter">
        <see cref="T:System.Type" />을 문자열로 변환하는 데 사용되는 대리자입니다.</param>
    </member>
    <member name="P:System.Data.DataSet.CaseSensitive">
      <summary>
        <see cref="T:System.Data.DataTable" /> 개체에서 문자열을 비교할 때 대/소문자를 구분하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="true" /> 문자열 비교 시 대/소문자를 구분 하면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" /> 입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataSet.DataSetName">
      <summary>현재 <see cref="T:System.Data.DataSet" />의 이름을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataSet" />의 이름입니다.</returns>
    </member>
    <member name="P:System.Data.DataSet.DefaultViewManager">
      <summary>사용자 지정 <see cref="T:System.Data.DataSet" />를 사용하여 필터링, 검색 및 탐색 작업을 수행할 수 있도록 <see cref="T:System.Data.DataViewManager" />에 포함된 데이터의 사용자 지정 뷰를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataViewManager" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.DataSet.EnforceConstraints">
      <summary>업데이트 작업을 수행할 때 제약 조건 규칙을 따르는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.Data.ConstraintException">제약 조건을 적용할 수 없는 경우</exception>
      <returns>
        <see langword="true" /> 규칙이 적용 되 면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" /> 입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataSet.ExtendedProperties">
      <summary>
        <see langword="DataSet" />에 연결된 사용자 지정 사용자 정보의 컬렉션을 가져옵니다.</summary>
      <returns>모든 사용자 지정 사용자 정보가 있는 <see cref="T:System.Data.PropertyCollection" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataSet.HasErrors">
      <summary>이 <see cref="T:System.Data.DataTable" /> 내의 <see cref="T:System.Data.DataSet" /> 개체에 오류가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 테이블에 오류가 있으면이 고, 그렇지 않으면입니다. 그렇지 않으면 <see langword="false" /> 입니다.</returns>
    </member>
    <member name="P:System.Data.DataSet.IsInitialized">
      <summary>
        <see cref="T:System.Data.DataSet" />이 초기화되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>구성 요소의 초기화가 완료되었음을 나타내려면<see langword="true" /> 이고, 그러지 않으려면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataSet.Locale">
      <summary>테이블 내의 문자열을 비교하는 데 사용되는 로캘 정보를 가져오거나 설정합니다.</summary>
      <returns>사용자의 컴퓨터 로캘에 대한 데이터가 들어 있는 <see cref="T:System.Globalization.CultureInfo" />입니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataSet.Namespace">
      <summary>
        <see cref="T:System.Data.DataSet" />의 네임스페이스를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">네임스페이스에 데이터가 이미 있는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataSet" />의 네임스페이스입니다.</returns>
    </member>
    <member name="P:System.Data.DataSet.Prefix">
      <summary>
        <see cref="T:System.Data.DataSet" /> 네임스페이스의 별칭인 XML 접두사를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataSet" /> 네임스페이스의 XML 접두사입니다.</returns>
    </member>
    <member name="P:System.Data.DataSet.Relations">
      <summary>테이블을 연결하고 부모 테이블에서 자식 테이블까지 탐색할 수 있는 관계 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRelationCollection" /> 개체 컬렉션을 포함하는 <see cref="T:System.Data.DataRelation" />입니다. <see cref="T:System.Data.DataRelation" /> 개체가 없으면 빈 컬렉션이 반환됩니다.</returns>
    </member>
    <member name="P:System.Data.DataSet.RemotingFormat">
      <summary>원격 작업 동안 사용된 <see cref="T:System.Data.SerializationFormat" />의 <see cref="T:System.Data.DataSet" />을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.SerializationFormat" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.DataSet.SchemaSerializationMode">
      <summary>
        <see cref="T:System.Data.SchemaSerializationMode" />에 대한 <see cref="T:System.Data.DataSet" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.SchemaSerializationMode" />에 대한 <see cref="T:System.Data.DataSet" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataSet.Site">
      <summary>
        <see cref="T:System.ComponentModel.ISite" />에 대한 <see cref="T:System.Data.DataSet" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" />에 대한 <see cref="T:System.Data.DataSet" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataSet.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataSet.Tables">
      <summary>
        <see cref="T:System.Data.DataSet" />에 포함된 테이블 컬렉션을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.DataTableCollection" />에 포함된 <see cref="T:System.Data.DataSet" />입니다. <see cref="T:System.Data.DataTable" /> 개체가 없으면 빈 컬렉션이 반환됩니다.</returns>
    </member>
    <member name="T:System.Data.DataSetDateTime">
      <summary>
        <see cref="T:System.DateTime" />의 <see cref="T:System.Data.DataSet" /> 열에 대한 serialization 형식을 설명합니다.</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Local">
      <summary>
        <see langword="DateTime" />은 항상 Local에 저장됩니다. 이 모드에서 <see cref="F:System.Data.DataSetDateTime.Utc" />나 <see cref="F:System.Data.DataSetDateTime.Unspecified" />가 열에 할당되면 먼저 Local로 변환됩니다. 이 모드에서는 serialization이 항상 Local에서 수행됩니다. serialization 도중 오프셋이 발생합니다.</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Unspecified">
      <summary>
        <see langword="DateTime" />은 항상 Unspecified에 저장됩니다. 이 모드에서 <see cref="F:System.Data.DataSetDateTime.Local" />이나 <see cref="F:System.Data.DataSetDateTime.Utc" />가 열에 할당되면 먼저 <see cref="F:System.Data.DataSetDateTime.Unspecified" />로 변환됩니다. 이 모드의 serialization은 오프셋을 발생시키지 않습니다.</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.UnspecifiedLocal">
      <summary>
        <see langword="DateTime" />은 Unspecified에 저장됩니다. 이 모드에서 <see cref="F:System.Data.DataSetDateTime.Local" />이나 <see cref="F:System.Data.DataSetDateTime.Utc" />가 열에 할당되면 먼저 <see cref="F:System.Data.DataSetDateTime.Unspecified" />로 변환됩니다. 이 모드의 serialization은 오프셋을 발생시킵니다. 이는 기본 동작이며 이전 버전과 호환됩니다. 이 옵션은 스토리지에서 Unspecified가 되지만 serialization을 수행하는 동안 <see cref="F:System.Data.DataSetDateTime.Local" />과 비슷한 오프셋을 적용한다고 간주됩니다.</summary>
    </member>
    <member name="F:System.Data.DataSetDateTime.Utc">
      <summary>
        <see langword="DateTime" />은 UTC(Universal Coordinated Time)에 저장됩니다. 이 모드에서 <see cref="F:System.Data.DataSetDateTime.Local" />이나 <see cref="F:System.Data.DataSetDateTime.Unspecified" />가 열에 할당되면 먼저 <see langword="Utc" /> 형식으로 변환됩니다. 이 모드에서는 serialization이 항상 <see langword="Utc" />에서 수행됩니다. serialization 도중 오프셋이 발생하지 않습니다.</summary>
    </member>
    <member name="T:System.Data.DataSysDescriptionAttribute">
      <summary>속성, 이벤트 또는 Extender를 설명과 함께 표시합니다. 비주얼 디자이너에서는 멤버를 참조할 때 이 설명을 표시할 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.DataSysDescriptionAttribute.#ctor(System.String)">
      <summary>지정된 설명 문자열을 사용하여 <see cref="T:System.Data.DataSysDescriptionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="description">설명 문자열입니다.</param>
    </member>
    <member name="P:System.Data.DataSysDescriptionAttribute.Description">
      <summary>설명 텍스트를 가져옵니다.</summary>
      <returns>설명 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.DataTable">
      <summary>메모리 내 데이터의 한 테이블을 나타냅니다.</summary>
    </member>
    <member name="E:System.Data.DataTable.ColumnChanged">
      <summary>
        <see cref="T:System.Data.DataColumn" />에 있는 지정된 <see cref="T:System.Data.DataRow" />의 값이 변경된 후 발생합니다.</summary>
    </member>
    <member name="E:System.Data.DataTable.ColumnChanging">
      <summary>
        <see cref="T:System.Data.DataColumn" />에 있는 지정된 <see cref="T:System.Data.DataRow" />의 값이 변경될 때 발생합니다.</summary>
    </member>
    <member name="E:System.Data.DataTable.Initialized">
      <summary>
        <see cref="T:System.Data.DataTable" />이 초기화된 후 발생합니다.</summary>
    </member>
    <member name="E:System.Data.DataTable.RowChanged">
      <summary>
        <see cref="T:System.Data.DataRow" />가 변경된 후에 발생합니다.</summary>
    </member>
    <member name="E:System.Data.DataTable.RowChanging">
      <summary>
        <see cref="T:System.Data.DataRow" />가 변경될 때 발생합니다.</summary>
    </member>
    <member name="E:System.Data.DataTable.RowDeleted">
      <summary>테이블의 행이 삭제된 후 발생합니다.</summary>
    </member>
    <member name="E:System.Data.DataTable.RowDeleting">
      <summary>테이블의 행이 삭제되기 직전에 발생합니다.</summary>
    </member>
    <member name="E:System.Data.DataTable.TableCleared">
      <summary>
        <see cref="T:System.Data.DataTable" />이 지워진 다음 발생합니다.</summary>
    </member>
    <member name="E:System.Data.DataTable.TableClearing">
      <summary>
        <see cref="T:System.Data.DataTable" />이 지워질 때 발생합니다.</summary>
    </member>
    <member name="E:System.Data.DataTable.TableNewRow">
      <summary>새 <see cref="T:System.Data.DataRow" />가 삽입될 때 발생합니다.</summary>
    </member>
    <member name="F:System.Data.DataTable.fInitInProgress">
      <summary>초기화가 진행 중인지 여부를 확인합니다. 초기화는 런타임에 발생합니다.</summary>
    </member>
    <member name="M:System.Data.DataTable.#ctor">
      <summary>인수를 사용하지 않고 <see cref="T:System.Data.DataTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.DataTable" />와 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 사용하여 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화하거나 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스와 대상입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.String)">
      <summary>지정된 테이블 이름을 사용하여 <see cref="T:System.Data.DataTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tableName">테이블에 지정할 이름입니다. <paramref name="tableName" />이 <see langword="null" /> 또는 빈 문자열이면 <see cref="T:System.Data.DataTableCollection" />에 테이블이 추가될 때 기본 이름이 지정됩니다.</param>
    </member>
    <member name="M:System.Data.DataTable.#ctor(System.String,System.String)">
      <summary>지정된 테이블 이름과 네임스페이스를 사용하여 <see cref="T:System.Data.DataTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="tableName">테이블에 지정할 이름입니다. <paramref name="tableName" />이 <see langword="null" /> 또는 빈 문자열이면 <see cref="T:System.Data.DataTableCollection" />에 테이블이 추가될 때 기본 이름이 지정됩니다.</param>
      <param name="tableNamespace">
        <see langword="DataTable" />에 저장된 데이터의 XML 표현에 대한 네임스페이스입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.AcceptChanges">
      <summary>
        <see cref="M:System.Data.DataTable.AcceptChanges" />가 마지막으로 호출된 이후 이 테이블에서 변경된 내용을 모두 커밋합니다.</summary>
    </member>
    <member name="M:System.Data.DataTable.BeginInit">
      <summary>폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.Data.DataTable" />의 초기화를 시작합니다. 초기화는 런타임에 발생합니다.</summary>
    </member>
    <member name="M:System.Data.DataTable.BeginLoadData">
      <summary>데이터를 로드하는 동안 알림, 인덱스 유지 관리 및 제약 조건 기능을 해제합니다.</summary>
    </member>
    <member name="M:System.Data.DataTable.Clear">
      <summary>
        <see cref="T:System.Data.DataTable" />의 모든 데이터를 지웁니다.</summary>
    </member>
    <member name="M:System.Data.DataTable.Clone">
      <summary>모든 <see cref="T:System.Data.DataTable" /> 스키마, 관계 및 제약 조건을 포함하여 <see cref="T:System.Data.DataTable" />의 구조를 복제합니다.</summary>
      <returns>현재 <see cref="T:System.Data.DataTable" />과 동일한 스키마를 갖는 새 <see cref="T:System.Data.DataTable" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.Compute(System.String,System.String)">
      <summary>필터 조건을 전달하는 현재 행에서 지정된 식을 계산합니다.</summary>
      <param name="expression">컴퓨팅할 식입니다.</param>
      <param name="filter">식에서 계산하는 행을 제한할 필터입니다.</param>
      <returns>계산 결과로 설정된 <see cref="T:System.Object" />를 반환합니다. 식이 null로 평가되는 경우 반환 값은 <see cref="F:System.DBNull.Value" />가 됩니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.Copy">
      <summary>이 <see cref="T:System.Data.DataTable" />의 구조와 데이터를 모두 복사합니다.</summary>
      <returns>이 <see cref="T:System.Data.DataTable" />과 같은 구조(테이블 스키마, 관계, 제약 조건)와 데이터를 가진 새 <see cref="T:System.Data.DataTable" />을 반환합니다.  
  
이 클래스가 파생된 경우 동일한 파생 클래스가 복사됩니다.  
  
 <see cref="M:System.Data.DataTable.Copy" />는 원래 <see cref="T:System.Data.DataTable" />과 동일한 구조 및 데이터로 새 <see cref="T:System.Data.DataTable" />를 만듭니다. 구조체를 새 <see cref="T:System.Data.DataTable" />로 복사하고 데이터는 복사하지 않으려면 <see cref="M:System.Data.DataTable.Clone" />을 사용하십시오.</returns>
    </member>
    <member name="M:System.Data.DataTable.CreateDataReader">
      <summary>이 <see cref="T:System.Data.DataTableReader" />의 데이터에 해당하는 <see cref="T:System.Data.DataTable" />를 반환합니다.</summary>
      <returns>결과 집합 하나를 포함하고 소스 <see cref="T:System.Data.DataTableReader" /> 인스턴스에 해당하는 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.CreateInstance">
      <summary>
        <see cref="T:System.Data.DataTable" />의 새 인스턴스를 만듭니다.</summary>
      <returns>새 식입니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.EndInit">
      <summary>폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.Data.DataTable" />의 초기화를 끝냅니다. 초기화는 런타임에 발생합니다.</summary>
    </member>
    <member name="M:System.Data.DataTable.EndLoadData">
      <summary>데이터를 로드한 후 알림, 인덱스 유지 관리 및 제약 조건 기능을 설정합니다.</summary>
    </member>
    <member name="M:System.Data.DataTable.GetChanges">
      <summary>로드되거나 <see cref="T:System.Data.DataTable" />가 마지막으로 호출된 후에 변경된 내용이 모두 들어 있는 <see cref="M:System.Data.DataTable.AcceptChanges" />의 복사본을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.DataTable" />의 변경 내용의 복사본을 반환하거나, 변경 내용이 없으면 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.GetChanges(System.Data.DataRowState)">
      <summary>마지막으로 로드되거나 <see cref="T:System.Data.DataTable" />가 호출된 후에 변경되어 <see cref="M:System.Data.DataTable.AcceptChanges" />를 기준으로 필터링된 내용이 모두 들어 있는 <see cref="T:System.Data.DataRowState" />의 복사본을 가져옵니다.</summary>
      <param name="rowStates">
        <see cref="T:System.Data.DataRowState" /> 값 중 하나입니다.</param>
      <returns>작업을 수행한 다음 <see cref="T:System.Data.DataTable" />를 사용하여 다시 <see cref="T:System.Data.DataTable" />에 병합할 수 있는 경우 <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" />의 필터링된 복사본을 반환합니다. 원하는 <see cref="T:System.Data.DataRowState" /> 행이 없으면 이 메서드는 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.GetDataTableSchema(System.Xml.Schema.XmlSchemaSet)">
      <summary>이 메서드는 웹 서비스의 <see cref="T:System.Xml.Schema.XmlSchemaSet" />을 설명하는 WSDL(Web Services Description Language)이 포함된 <see cref="T:System.Data.DataTable" /> 인스턴스를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 인스턴스입니다.</param>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchemaSet" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.GetErrors">
      <summary>오류가 있는 <see cref="T:System.Data.DataRow" /> 개체로 이루어진 배열을 가져옵니다.</summary>
      <returns>오류가 있는 <see cref="T:System.Data.DataRow" /> 개체로 이루어진 배열을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.DataTable" />을 serialize하는 데 필요한 데이터로 serialization 정보 개체를 채웁니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />과 관련된 serialize된 개체가 들어 있는 <see cref="T:System.Data.DataTable" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />과 관련된 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Data.DataTable" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />매개 변수가 null 참조(Visual Basic에서는 <see langword="Nothing" />)인 경우</exception>
    </member>
    <member name="M:System.Data.DataTable.GetRowType">
      <summary>행 형식을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRow" />의 형식입니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.GetSchema">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />를 참조하세요.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 메서드가 생성하고 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 메서드가 소비하는 개체의 XML 표현을 설명하는 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.ImportRow(System.Data.DataRow)">
      <summary>원래 값 및 현재 값과 모든 속성 설정을 그대로 유지한 상태로 <see cref="T:System.Data.DataRow" />를 <see cref="T:System.Data.DataTable" />에 복사합니다.</summary>
      <param name="row">가져올 <see cref="T:System.Data.DataRow" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader)">
      <summary>제공된 <see cref="T:System.Data.DataTable" />를 사용해서 <see cref="T:System.Data.IDataReader" />을 데이터 소스의 값으로 채웁니다. <see cref="T:System.Data.DataTable" />에 이미 행이 포함되어 있으면 데이터 소스에서 들어오는 데이터가 기존 행과 병합됩니다.</summary>
      <param name="reader">결과 집합을 제공하는 <see cref="T:System.Data.IDataReader" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption)">
      <summary>제공된 <see cref="T:System.Data.DataTable" />를 사용해서 <see cref="T:System.Data.IDataReader" />을 데이터 소스의 값으로 채웁니다. <see langword="DataTable" />에 이미 행이 포함되어 있으면 데이터 소스에서 들어오는 데이터는 <paramref name="loadOption" /> 매개 변수의 값에 따라 기존 행과 병합됩니다.</summary>
      <param name="reader">하나 이상의 결과 집합을 제공하는 <see cref="T:System.Data.IDataReader" />입니다.</param>
      <param name="loadOption">
        <see cref="T:System.Data.LoadOption" /> 열거형의 값으로서, 이미 <see cref="T:System.Data.DataTable" />에 있는 행이 동일한 기본 키를 공유하는 들어오는 행과 결합되는 방식을 나타냅니다.</param>
    </member>
    <member name="M:System.Data.DataTable.Load(System.Data.IDataReader,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
      <summary>오류 처리 대리자를 사용하는 제공된 <see cref="T:System.Data.DataTable" />를 사용해서 <see cref="T:System.Data.IDataReader" />을 데이터 소스의 값으로 채웁니다.</summary>
      <param name="reader">결과 집합을 제공하는 <see cref="T:System.Data.IDataReader" />입니다.</param>
      <param name="loadOption">
        <see cref="T:System.Data.LoadOption" /> 열거형의 값으로서, 이미 <see cref="T:System.Data.DataTable" />에 있는 행이 동일한 기본 키를 공유하는 들어오는 행과 결합되는 방식을 나타냅니다.</param>
      <param name="errorHandler">데이터를 로드하는 동안 오류가 발생하면 호출할 <see cref="T:System.Data.FillErrorEventHandler" /> 대리자입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Boolean)">
      <summary>특정 행을 찾아 업데이트합니다. 일치하는 행을 찾지 못하면 지정된 값을 사용하여 새 행을 만듭니다.</summary>
      <param name="values">새 행을 만드는 데 사용되는 값 배열입니다.</param>
      <param name="fAcceptChanges">변경 사항을 적용하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentException">배열이 테이블의 열 수보다 큰 경우</exception>
      <exception cref="T:System.InvalidCastException">값이 해당 열 형식과 일치하지 않는 경우</exception>
      <exception cref="T:System.Data.ConstraintException">행을 추가하여 제약 조건을 무효화한 경우</exception>
      <exception cref="T:System.Data.NoNullAllowedException">
        <see cref="P:System.Data.DataColumn.AllowDBNull" />이 false인 열에 null을 설정하려는 경우</exception>
      <returns>새 <see cref="T:System.Data.DataRow" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.LoadDataRow(System.Object[],System.Data.LoadOption)">
      <summary>특정 행을 찾아 업데이트합니다. 일치하는 행을 찾지 못하면 지정된 값을 사용하여 새 행을 만듭니다.</summary>
      <param name="values">새 행을 만드는 데 사용되는 값 배열입니다.</param>
      <param name="loadOption">배열 값이 기존 행의 해당 값에 적용되는 방식을 결정하는 데 사용됩니다.</param>
      <returns>새 <see cref="T:System.Data.DataRow" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />을 현재 <see cref="T:System.Data.DataTable" />과 병합합니다.</summary>
      <param name="table">현재 <see cref="T:System.Data.DataTable" />과 병합할 <see cref="T:System.Data.DataTable" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />을 현재 <see langword="DataTable" />과 병합하여 현재 <see langword="DataTable" />에서 변경 내용을 유지할지 여부를 나타냅니다.</summary>
      <param name="table">현재 <see langword="DataTable" />과 병합할 <see langword="DataTable" />입니다.</param>
      <param name="preserveChanges">현재 <see langword="true" />의 변경 내용을 유지하려면 <see langword="DataTable" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.Merge(System.Data.DataTable,System.Boolean,System.Data.MissingSchemaAction)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />을 현재 <see langword="DataTable" />과 병합하여, 변경 내용을 유지할지 여부와 현재 <see langword="DataTable" />의 누락된 스키마 처리 방식을 나타냅니다.</summary>
      <param name="table">현재 <see cref="T:System.Data.DataTable" />과 병합할 <see cref="T:System.Data.DataTable" />입니다.</param>
      <param name="preserveChanges">현재 <see langword="true" />의 변경 내용을 유지하려면 <see cref="T:System.Data.DataTable" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <param name="missingSchemaAction">
        <see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.NewRow">
      <summary>테이블과 동일한 스키마를 갖는 새 <see cref="T:System.Data.DataRow" />를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRow" />과 동일한 스키마를 갖는 <see cref="T:System.Data.DataTable" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.NewRowArray(System.Int32)">
      <summary>
        <see cref="T:System.Data.DataRow" />의 배열을 반환합니다.</summary>
      <param name="size">배열의 크기를 설명하는 <see cref="T:System.Int32" /> 값입니다.</param>
      <returns>새 배열입니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.NewRowFromBuilder(System.Data.DataRowBuilder)">
      <summary>기존 행에서 새 행을 만듭니다.</summary>
      <param name="builder">
        <see cref="T:System.Data.DataRowBuilder" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 파생 클래스입니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.OnColumnChanged(System.Data.DataColumnChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.ColumnChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.DataColumnChangeEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.OnColumnChanging(System.Data.DataColumnChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.ColumnChanging" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.DataColumnChangeEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.OnPropertyChanging(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="pcevent">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.PropertyChangedEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.OnRemoveColumn(System.Data.DataColumn)">
      <summary>
        <see cref="T:System.Data.DataTable" />이 제거 중임을 <see cref="T:System.Data.DataColumn" />에 알립니다.</summary>
      <param name="column">제거 중인 <see cref="T:System.Data.DataColumn" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowChanged(System.Data.DataRowChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.RowChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.DataRowChangeEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowChanging(System.Data.DataRowChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.RowChanging" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.DataRowChangeEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowDeleted(System.Data.DataRowChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.RowDeleted" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.DataRowChangeEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.OnRowDeleting(System.Data.DataRowChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.RowDeleting" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.DataRowChangeEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableCleared(System.Data.DataTableClearEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.TableCleared" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.DataTableClearEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableClearing(System.Data.DataTableClearEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.TableClearing" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.DataTableClearEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.OnTableNewRow(System.Data.DataTableNewRowEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTable.TableNewRow" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.DataTableNewRowEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.IO.Stream)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.IO.Stream" />으로 읽어옵니다.</summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" />에서 파생되는 개체입니다.</param>
      <returns>데이터를 읽는 데 사용되는 <see cref="T:System.Data.XmlReadMode" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.IO.TextReader)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.IO.TextReader" />으로 읽어옵니다.</summary>
      <param name="reader">데이터를 읽는 데 사용할 <see cref="T:System.IO.TextReader" />입니다.</param>
      <returns>데이터를 읽는 데 사용되는 <see cref="T:System.Data.XmlReadMode" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.String)">
      <summary>지정된 파일로부터 XML 스키마와 데이터를 <see cref="T:System.Data.DataTable" />로 읽어옵니다.</summary>
      <param name="fileName">데이터를 읽을 파일의 이름입니다.</param>
      <returns>데이터를 읽는 데 사용되는 <see cref="T:System.Data.XmlReadMode" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXml(System.Xml.XmlReader)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />를 사용하여 XML 스키마와 데이터를 <see cref="T:System.Xml.XmlReader" />로 읽어옵니다.</summary>
      <param name="reader">데이터를 읽는 데 사용할 <see cref="T:System.Xml.XmlReader" />입니다.</param>
      <returns>데이터를 읽는 데 사용되는 <see cref="T:System.Data.XmlReadMode" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.IO.Stream)">
      <summary>지정된 스트림을 사용하여 XML 스키마를 <see cref="T:System.Data.DataTable" />로 읽어옵니다.</summary>
      <param name="stream">스키마를 읽는 데 사용되는 스트림입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.IO.TextReader)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />를 사용하여 XML 스키마를 <see cref="T:System.IO.TextReader" />로 읽어옵니다.</summary>
      <param name="reader">스키마 정보를 읽는 데 사용되는 <see cref="T:System.IO.TextReader" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.String)">
      <summary>지정된 파일로부터 XML 스키마를 <see cref="T:System.Data.DataTable" />로 읽어옵니다.</summary>
      <param name="fileName">스키마 정보를 읽을 파일의 이름입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSchema(System.Xml.XmlReader)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />를 사용하여 XML 스키마를 <see cref="T:System.Xml.XmlReader" />로 읽어옵니다.</summary>
      <param name="reader">스키마 정보를 읽는 데 사용되는 <see cref="T:System.Xml.XmlReader" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.ReadXmlSerializable(System.Xml.XmlReader)">
      <summary>XML 스트림에서 읽습니다.</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.RejectChanges">
      <summary>테이블이 로드된 이후 또는 <see cref="M:System.Data.DataTable.AcceptChanges" />가 마지막으로 호출된 이후에 변경된 내용을 모두 롤백합니다.</summary>
    </member>
    <member name="M:System.Data.DataTable.Reset">
      <summary>
        <see cref="T:System.Data.DataTable" />을 원래 상태로 다시 설정합니다. 다시 설정은 테이블의 모든 데이터, 인덱스, 관계 및 열을 제거합니다. DataSet에 DataTable이 포함된 경우 테이블을 다시 설정한 후 테이블은 DataSet의 일부가 됩니다.</summary>
    </member>
    <member name="M:System.Data.DataTable.Select">
      <summary>모든 <see cref="T:System.Data.DataRow" /> 개체의 배열을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRow" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String)">
      <summary>필터 조건에 맞는 모든 <see cref="T:System.Data.DataRow" /> 개체의 배열을 가져옵니다.</summary>
      <param name="filterExpression">행을 필터링하기 위해 사용하는 조건입니다. 예를 들어, 행을 필터링하는 방법은 DataView RowFilter 구문 [C#]을 참조하세요.</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String,System.String)">
      <summary>필터 조건에 맞는 모든 <see cref="T:System.Data.DataRow" /> 개체의 배열을 지정된 정렬 순서대로 가져옵니다.</summary>
      <param name="filterExpression">행을 필터링하기 위해 사용하는 조건입니다. 예를 들어, 행을 필터링하는 방법은 DataView RowFilter 구문 [C#]을 참조하세요.</param>
      <param name="sort">열과 정렬 방향을 지정하는 문자열입니다.</param>
      <returns>필터 식에 맞는 <see cref="T:System.Data.DataRow" /> 개체의 배열을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.Select(System.String,System.String,System.Data.DataViewRowState)">
      <summary>필터와 일치하는 모든 <see cref="T:System.Data.DataRow" /> 개체의 배열을 지정된 상태와 일치하는 정렬 순서대로 가져옵니다.</summary>
      <param name="filterExpression">행을 필터링하기 위해 사용하는 조건입니다. 예를 들어, 행을 필터링하는 방법은 DataView RowFilter 구문 [C#]을 참조하세요.</param>
      <param name="sort">열과 정렬 방향을 지정하는 문자열입니다.</param>
      <param name="recordStates">
        <see cref="T:System.Data.DataViewRowState" /> 값 중 하나입니다.</param>
      <returns>
        <see cref="T:System.Data.DataRow" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.System#ComponentModel#IListSource#GetList">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IListSource.GetList" />를 참조하세요.</summary>
      <returns>해당 개체에서 데이터 소스에 바인딩될 수 있는 <see cref="T:System.Collections.IList" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />를 참조하세요.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 메서드가 생성하고 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 메서드가 소비하는 개체의 XML 표현을 설명하는 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />를 참조하세요.</summary>
      <param name="reader">XmlReader입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />를 참조하세요.</summary>
      <param name="writer">XmlWriter입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.ToString">
      <summary>연결된 문자열이 있는 경우 <see cref="P:System.Data.DataTable.TableName" /> 및 <see cref="P:System.Data.DataTable.DisplayExpression" />을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Data.DataTable.TableName" /> 및 <see cref="P:System.Data.DataTable.DisplayExpression" /> 값으로 구성된 문자열을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream)">
      <summary>지정된 <see cref="T:System.IO.Stream" />를 사용하여 <see cref="T:System.Data.DataTable" />의 현재 콘텐츠를 XML로 작성합니다.</summary>
      <param name="stream">데이터가 기록될 스트림입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Boolean)">
      <summary>지정된 <see cref="T:System.IO.Stream" />를 사용하여 <see cref="T:System.Data.DataTable" />의 현재 콘텐츠를 XML로 작성합니다. 테이블과 모든 하위 항목의 데이터를 저장하려면 <paramref name="writeHierarchy" /> 매개 변수를 <see langword="true" />로 설정합니다.</summary>
      <param name="stream">데이터가 기록될 스트림입니다.</param>
      <param name="writeHierarchy">
        <see langword="true" />이면 현재 테이블과 모든 하위 항목의 내용을 씁니다. <see langword="false" />(기본값)이면 현재 테이블의 데이터만 씁니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />를 사용하여 지정된 파일에 <see cref="T:System.Data.XmlWriteMode" />의 현재 데이터를 쓰고 선택적으로 스키마를 씁니다. 스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다.</summary>
      <param name="stream">데이터가 기록될 스트림입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.Stream,System.Data.XmlWriteMode,System.Boolean)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />를 사용하여 지정된 파일에 <see cref="T:System.Data.XmlWriteMode" />의 현재 데이터를 쓰고 선택적으로 스키마를 씁니다. 스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다. 테이블과 모든 하위 항목의 데이터를 저장하려면 <paramref name="writeHierarchy" /> 매개 변수를 <see langword="true" />로 설정합니다.</summary>
      <param name="stream">데이터가 기록될 스트림입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</param>
      <param name="writeHierarchy">
        <see langword="true" />이면 현재 테이블과 모든 하위 항목의 내용을 씁니다. <see langword="false" />(기본값)이면 현재 테이블의 데이터만 씁니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter)">
      <summary>지정된 <see cref="T:System.IO.TextWriter" />를 사용하여 <see cref="T:System.Data.DataTable" />의 현재 콘텐츠를 XML로 작성합니다.</summary>
      <param name="writer">콘텐츠를 쓰는 데 사용할 <see cref="T:System.IO.TextWriter" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Boolean)">
      <summary>지정된 <see cref="T:System.IO.TextWriter" />를 사용하여 <see cref="T:System.Data.DataTable" />의 현재 콘텐츠를 XML로 작성합니다. 테이블과 모든 하위 항목의 데이터를 저장하려면 <paramref name="writeHierarchy" /> 매개 변수를 <see langword="true" />로 설정합니다.</summary>
      <param name="writer">콘텐츠를 쓰는 데 사용할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="writeHierarchy">
        <see langword="true" />이면 현재 테이블과 모든 하위 항목의 내용을 씁니다. <see langword="false" />(기본값)이면 현재 테이블의 데이터만 씁니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />와 <see cref="T:System.IO.TextWriter" />를 사용하여 <see cref="T:System.Data.XmlWriteMode" />의 현재 데이터를 쓰고 선택적으로 스키마를 씁니다. 스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다.</summary>
      <param name="writer">문서를 쓰는 데 사용되는 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.IO.TextWriter,System.Data.XmlWriteMode,System.Boolean)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />와 <see cref="T:System.IO.TextWriter" />를 사용하여 <see cref="T:System.Data.XmlWriteMode" />의 현재 데이터를 쓰고 선택적으로 스키마를 씁니다. 스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다. 테이블과 모든 하위 항목의 데이터를 저장하려면 <paramref name="writeHierarchy" /> 매개 변수를 <see langword="true" />로 설정합니다.</summary>
      <param name="writer">문서를 쓰는 데 사용되는 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</param>
      <param name="writeHierarchy">
        <see langword="true" />이면 현재 테이블과 모든 하위 항목의 내용을 씁니다. <see langword="false" />(기본값)이면 현재 테이블의 데이터만 씁니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String)">
      <summary>지정된 파일을 사용하여 <see cref="T:System.Data.DataTable" />의 현재 내용을 XML로 씁니다.</summary>
      <param name="fileName">XML 데이터를 기록할 파일입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Boolean)">
      <summary>지정된 파일을 사용하여 <see cref="T:System.Data.DataTable" />의 현재 내용을 XML로 씁니다. 테이블과 모든 하위 항목의 데이터를 저장하려면 <paramref name="writeHierarchy" /> 매개 변수를 <see langword="true" />로 설정합니다.</summary>
      <param name="fileName">XML 데이터를 기록할 파일입니다.</param>
      <param name="writeHierarchy">
        <see langword="true" />이면 현재 테이블과 모든 하위 항목의 내용을 씁니다. <see langword="false" />(기본값)이면 현재 테이블의 데이터만 씁니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode)">
      <summary>지정된 파일과 <see cref="T:System.Data.DataTable" />를 사용하여 <see cref="T:System.Data.XmlWriteMode" />에 대해 현재 데이터를 쓰고 선택적으로 스키마를 씁니다. 스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다.</summary>
      <param name="fileName">데이터가 기록될 파일의 이름입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.String,System.Data.XmlWriteMode,System.Boolean)">
      <summary>지정된 파일과 <see cref="T:System.Data.DataTable" />를 사용하여 <see cref="T:System.Data.XmlWriteMode" />에 대해 현재 데이터를 쓰고 선택적으로 스키마를 씁니다. 스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다. 테이블과 모든 하위 항목의 데이터를 저장하려면 <paramref name="writeHierarchy" /> 매개 변수를 <see langword="true" />로 설정합니다.</summary>
      <param name="fileName">데이터가 기록될 파일의 이름입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</param>
      <param name="writeHierarchy">
        <see langword="true" />이면 현재 테이블과 모든 하위 항목의 내용을 씁니다. <see langword="false" />(기본값)이면 현재 테이블의 데이터만 씁니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />를 사용하여 <see cref="T:System.Data.DataTable" />의 현재 콘텐츠를 XML로 작성합니다.</summary>
      <param name="writer">내용을 기록하는 데 사용할 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Boolean)">
      <summary>지정된 <see cref="T:System.Xml.XmlWriter" />를 사용하여 <see cref="T:System.Data.DataTable" />의 현재 콘텐츠를 XML로 작성합니다.</summary>
      <param name="writer">내용을 기록하는 데 사용할 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="writeHierarchy">
        <see langword="true" />이면 현재 테이블과 모든 하위 항목의 내용을 씁니다. <see langword="false" />(기본값)이면 현재 테이블의 데이터만 씁니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />와 <see cref="T:System.Xml.XmlWriter" />를 사용하여 <see cref="T:System.Data.XmlWriteMode" />의 현재 데이터를 쓰고 선택적으로 스키마를 씁니다. 스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다.</summary>
      <param name="writer">문서를 쓰는 데 사용되는 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXml(System.Xml.XmlWriter,System.Data.XmlWriteMode,System.Boolean)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />와 <see cref="T:System.Xml.XmlWriter" />를 사용하여 <see cref="T:System.Data.XmlWriteMode" />의 현재 데이터를 쓰고 선택적으로 스키마를 씁니다. 스키마를 쓰려면 <paramref name="mode" /> 매개 변수 값을 <see langword="WriteSchema" />로 설정합니다. 테이블과 모든 하위 항목의 데이터를 저장하려면 <paramref name="writeHierarchy" /> 매개 변수를 <see langword="true" />로 설정합니다.</summary>
      <param name="writer">문서를 쓰는 데 사용되는 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="mode">
        <see cref="T:System.Data.XmlWriteMode" /> 값 중 하나입니다.</param>
      <param name="writeHierarchy">
        <see langword="true" />이면 현재 테이블과 모든 하위 항목의 내용을 씁니다. <see langword="false" />(기본값)이면 현재 테이블의 데이터만 씁니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream)">
      <summary>
        <see cref="T:System.Data.DataTable" />의 현재 데이터 구조를 지정된 스트림에 XMl 스키마로 씁니다.</summary>
      <param name="stream">XML 스키마가 기록될 스트림입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.Stream,System.Boolean)">
      <summary>
        <see cref="T:System.Data.DataTable" />의 현재 데이터 구조를 지정된 스트림에 XMl 스키마로 씁니다. 테이블과 모든 하위 항목의 스키마를 저장하려면 <paramref name="writeHierarchy" /> 매개 변수를 <see langword="true" />로 설정합니다.</summary>
      <param name="stream">XML 스키마가 기록될 스트림입니다.</param>
      <param name="writeHierarchy">
        <see langword="true" />이면 현재 테이블과 모든 하위 항목의 스키마를 씁니다. <see langword="false" />(기본값)이면 현재 테이블의 스키마만 씁니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />를 사용하여 <see cref="T:System.IO.TextWriter" />의 현재 데이터 구조를 XML 스키마로 씁니다.</summary>
      <param name="writer">쓰기에 사용할 <see cref="T:System.IO.TextWriter" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.IO.TextWriter,System.Boolean)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />를 사용하여 <see cref="T:System.IO.TextWriter" />의 현재 데이터 구조를 XML 스키마로 씁니다. 테이블과 모든 하위 항목의 스키마를 저장하려면 <paramref name="writeHierarchy" /> 매개 변수를 <see langword="true" />로 설정합니다.</summary>
      <param name="writer">쓰기에 사용할 <see cref="T:System.IO.TextWriter" />입니다.</param>
      <param name="writeHierarchy">
        <see langword="true" />이면 현재 테이블과 모든 하위 항목의 스키마를 씁니다. <see langword="false" />(기본값)이면 현재 테이블의 스키마만 씁니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.String)">
      <summary>
        <see cref="T:System.Data.DataTable" />의 현재 데이터 구조를 지정된 파일에 XML 스키마로 씁니다.</summary>
      <param name="fileName">사용할 파일의 이름입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.String,System.Boolean)">
      <summary>
        <see cref="T:System.Data.DataTable" />의 현재 데이터 구조를 지정된 파일에 XML 스키마로 씁니다. 테이블과 모든 하위 항목의 스키마를 저장하려면 <paramref name="writeHierarchy" /> 매개 변수를 <see langword="true" />로 설정합니다.</summary>
      <param name="fileName">사용할 파일의 이름입니다.</param>
      <param name="writeHierarchy">
        <see langword="true" />이면 현재 테이블과 모든 하위 항목의 스키마를 씁니다. <see langword="false" />(기본값)이면 현재 테이블의 스키마만 씁니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />를 사용하여 <see cref="T:System.Xml.XmlWriter" />의 현재 데이터 구조를 XML 스키마로 씁니다.</summary>
      <param name="writer">사용할 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTable.WriteXmlSchema(System.Xml.XmlWriter,System.Boolean)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />를 사용하여 <see cref="T:System.Xml.XmlWriter" />의 현재 데이터 구조를 XML 스키마로 씁니다. 테이블과 모든 하위 항목의 스키마를 저장하려면 <paramref name="writeHierarchy" /> 매개 변수를 <see langword="true" />로 설정합니다.</summary>
      <param name="writer">문서를 쓰는 데 사용되는 <see cref="T:System.Xml.XmlWriter" />입니다.</param>
      <param name="writeHierarchy">
        <see langword="true" />이면 현재 테이블과 모든 하위 항목의 스키마를 씁니다. <see langword="false" />(기본값)이면 현재 테이블의 스키마만 씁니다.</param>
    </member>
    <member name="P:System.Data.DataTable.CaseSensitive">
      <summary>테이블 내의 문자열을 비교할 때 대/소문자를 구분할지 여부를 나타냅니다.</summary>
      <returns>비교할 때 대/소문자를 구분하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 부모 <see cref="T:System.Data.DataSet" /> 개체의 <see cref="P:System.Data.DataSet.CaseSensitive" /> 속성으로 설정되거나, <see cref="T:System.Data.DataTable" />과 별도로 만들어진 <see cref="T:System.Data.DataSet" />의 경우 <see langword="false" />로 설정됩니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.ChildRelations">
      <summary>이 <see cref="T:System.Data.DataTable" />에 대한 자식 관계 컬렉션을 가져옵니다.</summary>
      <returns>테이블의 자식 관계가 포함된 <see cref="T:System.Data.DataRelationCollection" />입니다. <see cref="T:System.Data.DataRelation" /> 개체가 없으면 빈 컬렉션이 반환됩니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.Columns">
      <summary>이 테이블에 속한 열의 컬렉션을 가져옵니다.</summary>
      <returns>테이블의 <see cref="T:System.Data.DataColumnCollection" /> 개체 컬렉션이 포함된 <see cref="T:System.Data.DataColumn" />입니다. <see cref="T:System.Data.DataColumn" /> 개체가 없으면 빈 컬렉션이 반환됩니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.Constraints">
      <summary>이 테이블이 유지하는 제약 조건의 컬렉션을 가져옵니다.</summary>
      <returns>테이블의 <see cref="T:System.Data.ConstraintCollection" /> 개체 컬렉션이 포함된 <see cref="T:System.Data.Constraint" />입니다. <see cref="T:System.Data.Constraint" /> 개체가 없으면 빈 컬렉션이 반환됩니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.DataSet">
      <summary>이 테이블이 속한 <see cref="T:System.Data.DataSet" />을 가져옵니다.</summary>
      <returns>이 테이블이 속한 <see cref="T:System.Data.DataSet" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.DefaultView">
      <summary>필터링된 뷰를 포함할 수 있는 테이블의 사용자 지정 뷰 또는 커서 위치를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataView" />와 연결된 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.DisplayExpression">
      <summary>이 테이블을 사용자 인터페이스에 나타내는 데 사용되는 값을 반환하는 식을 가져오거나 설정합니다. <see langword="DisplayExpression" /> 속성을 사용하여 이 테이블의 이름을 사용자 인터페이스에 표시할 수 있습니다.</summary>
      <returns>표시 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.ExtendedProperties">
      <summary>사용자 지정 사용자 정보 컬렉션을 가져옵니다.</summary>
      <returns>사용자 지정 사용자 정보가 들어 있는 <see cref="T:System.Data.PropertyCollection" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.HasErrors">
      <summary>해당 테이블이 속하는 <see cref="T:System.Data.DataSet" />의 테이블에 있는 행에 오류가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>오류가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.IsInitialized">
      <summary>
        <see cref="T:System.Data.DataTable" />이 초기화되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>구성 요소의 초기화가 완료되었음을 나타내려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.Locale">
      <summary>테이블 내의 문자열을 비교하는 데 사용되는 로캘 정보를 가져오거나 설정합니다.</summary>
      <returns>사용자의 컴퓨터 로캘에 대한 데이터가 들어 있는 <see cref="T:System.Globalization.CultureInfo" />입니다. 기본값은 <see cref="T:System.Data.DataSet" />이 속해 있으며 <see cref="T:System.Globalization.CultureInfo" /> 속성에 의해 반환되는 <see cref="P:System.Data.DataSet.Locale" /> 개체의 <see cref="T:System.Data.DataTable" />이거나, 테이블이 <see cref="T:System.Data.DataSet" />에 속하지 않은 경우 현재 시스템의 <see cref="T:System.Globalization.CultureInfo" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.MinimumCapacity">
      <summary>이 테이블에 대한 초기 시작 크기를 가져오거나 설정합니다.</summary>
      <returns>이 테이블에 있는 행의 초기 시작 크기입니다. 기본값은 50입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.Namespace">
      <summary>
        <see cref="T:System.Data.DataTable" />에 저장된 데이터의 XML 표현에 대한 네임스페이스를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataTable" />의 네임스페이스입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.ParentRelations">
      <summary>이 <see cref="T:System.Data.DataTable" />에 대한 부모 관계 컬렉션을 가져옵니다.</summary>
      <returns>테이블의 부모 관계가 포함된 <see cref="T:System.Data.DataRelationCollection" />입니다. <see cref="T:System.Data.DataRelation" /> 개체가 없으면 빈 컬렉션이 반환됩니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.Prefix">
      <summary>
        <see cref="T:System.Data.DataTable" />에 저장된 데이터의 XML 표현에 대한 네임스페이스를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataTable" />의 접두사입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.PrimaryKey">
      <summary>데이터 테이블에 대한 기본 키로 사용되는 열의 배열을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.Data.DataException">해당 키가 외래 키인 경우</exception>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.RemotingFormat">
      <summary>serialization 형식을 가져오거나 설정합니다.</summary>
      <returns>
        <see langword="Binary" /> 또는 <see langword="Xml" /> serialization을 지정하는 <see cref="T:System.Data.SerializationFormat" /> 열거형입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.Rows">
      <summary>이 테이블에 속한 행의 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRowCollection" /> 개체가 포함된 <see cref="T:System.Data.DataRow" />이거나, <see cref="T:System.Data.DataRow" /> 개체가 없으면 null 값입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.Site">
      <summary>
        <see cref="T:System.ComponentModel.ISite" />에 대한 <see cref="T:System.Data.DataTable" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" />에 대한 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IListSource.ContainsListCollection" />를 참조하세요.</summary>
      <returns>해당 컬렉션이 <see cref="T:System.Collections.IList" /> 개체의 컬렉션이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataTable.TableName">
      <summary>
        <see cref="T:System.Data.DataTable" />의 이름을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">
        <see langword="null" /> 또는 빈 문자열("")이 전달되고 이 테이블이 컬렉션에 속하는 경우</exception>
      <exception cref="T:System.Data.DuplicateNameException">같은 이름을 가진 테이블이 이미 들어 있는 컬렉션에 테이블이 속한 경우. 비교 시 대/소문자가 구분됩니다.</exception>
      <returns>
        <see cref="T:System.Data.DataTable" />의 이름입니다.</returns>
    </member>
    <member name="T:System.Data.DataTableClearEventArgs">
      <summary>
        <see cref="M:System.Data.DataTable.Clear" /> 메서드에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.DataTableClearEventArgs.#ctor(System.Data.DataTable)">
      <summary>
        <see cref="T:System.Data.DataTableClearEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataTable">행이 지워지는 <see cref="T:System.Data.DataTable" />입니다.</param>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.Table">
      <summary>행이 지워지는 테이블을 가져옵니다.</summary>
      <returns>행이 지워지는 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.TableName">
      <summary>행이 지워지는 테이블 이름을 가져옵니다.</summary>
      <returns>테이블 이름을 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataTableClearEventArgs.TableNamespace">
      <summary>행이 지워지는 테이블의 네임스페이스를 가져옵니다.</summary>
      <returns>네임스페이스 이름을 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Data.DataTableClearEventHandler">
      <summary>
        <see cref="M:System.Data.DataTable.Clear" /> 메서드를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.DataTableClearEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Data.DataTableCollection">
      <summary>
        <see cref="T:System.Data.DataSet" />의 테이블 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="E:System.Data.DataTableCollection.CollectionChanged">
      <summary>
        <see cref="T:System.Data.DataTableCollection" /> 개체가 추가되거나 제거되어 <see cref="T:System.Data.DataTable" />이 변경된 후 발생합니다.</summary>
    </member>
    <member name="E:System.Data.DataTableCollection.CollectionChanging">
      <summary>
        <see cref="T:System.Data.DataTableCollection" /> 개체가 추가되거나 제거되어 <see cref="T:System.Data.DataTable" />이 변경되는 동안 발생합니다.</summary>
    </member>
    <member name="M:System.Data.DataTableCollection.Add">
      <summary>기본 이름을 사용하여 새 <see cref="T:System.Data.DataTable" /> 개체를 만들고 컬렉션에 추가합니다.</summary>
      <returns>새로 만든 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.Data.DataTable)">
      <summary>지정된 <see langword="DataTable" />를 컬렉션에 추가합니다.</summary>
      <param name="table">추가할 <see langword="DataTable" /> 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">테이블에 대해 지정된 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">테이블이 이 컬렉션이나 다른 컬렉션에 이미 속해 있는 경우</exception>
      <exception cref="T:System.Data.DuplicateNameException">컬렉션에 이름이 같은 테이블이 있는 경우. 비교 시 대/소문자가 구분됩니다.</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.String)">
      <summary>지정된 이름을 사용하여 <see cref="T:System.Data.DataTable" /> 개체를 만들어 컬렉션에 추가합니다.</summary>
      <param name="name">만든 <see cref="T:System.Data.DataTable" />에 지정할 이름입니다.</param>
      <exception cref="T:System.Data.DuplicateNameException">컬렉션에 이름이 같은 테이블이 있는 경우. 대/소문자를 구분하지 않고 비교합니다.</exception>
      <returns>새로 만든 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Add(System.String,System.String)">
      <summary>지정된 이름을 사용하여 <see cref="T:System.Data.DataTable" /> 개체를 만들어 컬렉션에 추가합니다.</summary>
      <param name="name">만든 <see cref="T:System.Data.DataTable" />에 지정할 이름입니다.</param>
      <param name="tableNamespace">만든 <see cref="T:System.Data.DataTable" />에 지정할 네임스페이스입니다.</param>
      <exception cref="T:System.Data.DuplicateNameException">컬렉션에 이름이 같은 테이블이 있는 경우. 대/소문자를 구분하지 않고 비교합니다.</exception>
      <returns>새로 만든 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.AddRange(System.Data.DataTable[])">
      <summary>지정된 <see cref="T:System.Data.DataTable" /> 배열의 요소를 컬렉션의 끝에 복사합니다.</summary>
      <param name="tables">컬렉션에 추가할 <see cref="T:System.Data.DataTable" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Data.DataTableCollection.CanRemove(System.Data.DataTable)">
      <summary>지정된 <see cref="T:System.Data.DataTable" /> 개체를 컬렉션에서 제거할 수 있는지 여부를 확인합니다.</summary>
      <param name="table">확인할 컬렉션의 <see langword="DataTable" />입니다.</param>
      <returns>테이블을 제거할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Clear">
      <summary>모든 <see cref="T:System.Data.DataTable" /> 개체의 컬렉션을 지웁니다.</summary>
    </member>
    <member name="M:System.Data.DataTableCollection.Contains(System.String)">
      <summary>지정된 이름의 <see cref="T:System.Data.DataTable" /> 개체가 컬렉션에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="name">찾을 <see cref="T:System.Data.DataTable" />의 이름입니다.</param>
      <returns>지정된 테이블이 있으면 <see langword="true" />이고, <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Contains(System.String,System.String)">
      <summary>지정된 이름과 테이블 네임스페이스의 <see cref="T:System.Data.DataTable" /> 개체가 컬렉션에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="name">찾을 <see cref="T:System.Data.DataTable" />의 이름입니다.</param>
      <param name="tableNamespace">찾을 <see cref="T:System.Data.DataTable" /> 네임스페이스의 이름입니다.</param>
      <returns>지정된 테이블이 있으면 <see langword="true" />이고, <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.CopyTo(System.Data.DataTable[],System.Int32)">
      <summary>현재 <see cref="T:System.Data.DataTableCollection" />의 모든 요소를 1 차원 <see cref="T:System.Array" />의 지정된 대상 배열 인덱스에서 시작하는 위치에 복사합니다.</summary>
      <param name="array">현재 <see cref="T:System.Array" /> 개체의 요소를 복사할 1차원 <see cref="T:System.Data.DataTableCollection" />입니다.</param>
      <param name="index">복사를 시작할 대상 <see cref="T:System.Array" /> 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.Data.DataTable)">
      <summary>지정된 <see cref="T:System.Data.DataTable" /> 개체의 인덱스를 가져옵니다.</summary>
      <param name="table">검색할 <see langword="DataTable" />입니다.</param>
      <returns>테이블의 인덱스(0부터 시작)이거나, 테이블이 컬렉션에 없으면 -1입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.String)">
      <summary>지정된 이름을 가지는 <see cref="T:System.Data.DataTable" /> 개체 컬렉션의 인덱스를 가져옵니다.</summary>
      <param name="tableName">찾을 <see langword="DataTable" /> 개체의 이름입니다.</param>
      <returns>지정된 이름을 가지는 <see langword="DataTable" />의 인덱스(0부터 시작)이거나, 테이블이 컬렉션에 없으면 -1입니다.  
  
 <block subset="none" type="note"><para>  
 두 개 이상의 테이블이 이름은 같지만 네임스페이스가 다르면 -1을 반환합니다. 테이블 이름을 정확히 한 개의 테이블과 일치시킬 때 모호성이 있으면 호출은 실패합니다.</para></block></returns>
    </member>
    <member name="M:System.Data.DataTableCollection.IndexOf(System.String,System.String)">
      <summary>지정된 <see cref="T:System.Data.DataTable" /> 개체 컬렉션의 인덱스를 가져옵니다.</summary>
      <param name="tableName">찾을 <see cref="T:System.Data.DataTable" /> 개체의 이름입니다.</param>
      <param name="tableNamespace">찾을 <see cref="T:System.Data.DataTable" /> 네임스페이스의 이름입니다.</param>
      <returns>지정된 이름을 가지는 <see cref="T:System.Data.DataTable" />의 인덱스(0부터 시작)이거나, 테이블이 컬렉션에 없으면 -1입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.Data.DataTable)">
      <summary>컬렉션에서 지정된 <see cref="T:System.Data.DataTable" /> 개체를 제거합니다.</summary>
      <param name="table">제거할 <see langword="DataTable" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">테이블에 대해 지정된 값이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">테이블이 이 컬렉션에 속하지 않는 경우  
  
 또는  
  
 테이블이 관계의 일부인 경우</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.String)">
      <summary>컬렉션에서 지정된 이름의 <see cref="T:System.Data.DataTable" /> 개체를 제거합니다.</summary>
      <param name="name">제거할 <see cref="T:System.Data.DataTable" /> 개체의 이름입니다.</param>
      <exception cref="T:System.ArgumentException">컬렉션에 이름이 지정된 테이블이 없는 경우</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.Remove(System.String,System.String)">
      <summary>컬렉션에서 지정된 이름의 <see cref="T:System.Data.DataTable" /> 개체를 제거합니다.</summary>
      <param name="name">제거할 <see cref="T:System.Data.DataTable" /> 개체의 이름입니다.</param>
      <param name="tableNamespace">찾을 <see cref="T:System.Data.DataTable" /> 네임스페이스의 이름입니다.</param>
      <exception cref="T:System.ArgumentException">컬렉션에 이름이 지정된 테이블이 없는 경우</exception>
    </member>
    <member name="M:System.Data.DataTableCollection.RemoveAt(System.Int32)">
      <summary>컬렉션의 지정한 인덱스에서 <see cref="T:System.Data.DataTable" /> 개체를 제거합니다.</summary>
      <param name="index">제거할 <see langword="DataTable" />의 인덱스입니다.</param>
      <exception cref="T:System.ArgumentException">컬렉션에 지정된 인덱스의 테이블이 없는 경우</exception>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.Int32)">
      <summary>지정된 인덱스의 <see cref="T:System.Data.DataTable" /> 개체를 가져옵니다.</summary>
      <param name="index">찾을 <see cref="T:System.Data.DataTable" />의 인덱스(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">인덱스 값이 컬렉션의 항목 수보다 큰 경우</exception>
      <returns>
        <see cref="T:System.Data.DataTable" />지정 된 인덱스를 가진 이거나,이 없으면입니다 <see langword="null" /><see cref="T:System.Data.DataTable" /> .</returns>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.String)">
      <summary>지정한 이름을 가진 <see cref="T:System.Data.DataTable" /> 개체를 가져옵니다.</summary>
      <param name="name">찾을 <see langword="DataTable" />의 이름입니다.</param>
      <returns>지정된 이름의 <see cref="T:System.Data.DataTable" />이거나, <see cref="T:System.Data.DataTable" />이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataTableCollection.Item(System.String,System.String)">
      <summary>지정된 네임스페이스에서 지정된 이름을 가진 <see cref="T:System.Data.DataTable" /> 개체를 가져옵니다.</summary>
      <param name="name">찾을 <see langword="DataTable" />의 이름입니다.</param>
      <param name="tableNamespace">찾을 <see cref="T:System.Data.DataTable" /> 네임스페이스의 이름입니다.</param>
      <returns>지정된 이름의 <see cref="T:System.Data.DataTable" />이거나, <see cref="T:System.Data.DataTable" />이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Data.DataTableExtensions">
      <summary>
        <see cref="T:System.Data.DataTable" /> 클래스에 대한 확장 메서드를 정의합니다. <see cref="T:System.Data.DataTableExtensions" />는 정적 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsDataView(System.Data.DataTable)">
      <summary>LINQ 사용 <see cref="T:System.Data.DataView" /> 개체를 만들어 반환합니다.</summary>
      <param name="table">LINQ 사용 <see cref="T:System.Data.DataTable" />를 만드는 데 사용할 소스 <see cref="T:System.Data.DataView" />입니다.</param>
      <returns>LINQ 사용 <see cref="T:System.Data.DataView" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsDataView``1(System.Data.EnumerableRowCollection{``0})">
      <summary>LINQ to DataSet 쿼리를 나타내는 LINQ 사용 <see cref="T:System.Data.DataView" /> 개체를 만들어 반환합니다.</summary>
      <param name="source">LINQ 사용 <see cref="T:System.Data.DataView" />를 만드는 데 사용할 소스 LINQ to DataSet 쿼리입니다.</param>
      <typeparam name="T">소스 시퀀스의 개체 형식(일반적으로 <see cref="T:System.Data.DataRow" />)입니다.</typeparam>
      <returns>LINQ 사용 <see cref="T:System.Data.DataView" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableExtensions.AsEnumerable(System.Data.DataTable)">
      <summary>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체를 반환하며, 제네릭 매개 변수 <paramref name="T" />는 <see cref="T:System.Data.DataRow" />입니다. 이 개체는 LINQ 식 또는 메서드 쿼리에 사용될 수 있습니다.</summary>
      <param name="source">열거 가능하게 만들 소스 <see cref="T:System.Data.DataTable" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">소스 <see cref="T:System.Data.DataTable" />이 <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체이며, 제네릭 매개 변수 <paramref name="T" />는 <see cref="T:System.Data.DataRow" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0})">
      <summary>제네릭 매개 변수 <paramref name="T" />가 <see cref="T:System.Data.DataTable" />인 지정된 입력 <see cref="T:System.Data.DataRow" /> 개체를 사용하여 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체의 복사본이 들어 있는 <see cref="T:System.Data.DataRow" />을 반환합니다.</summary>
      <param name="source">소스 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 시퀀스입니다.</param>
      <typeparam name="T">소스 시퀀스의 개체 형식(일반적으로 <see cref="T:System.Data.DataRow" />)입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">소스 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 시퀀스가 <see langword="null" />이고 새 테이블을 만들 수 없는 경우</exception>
      <exception cref="T:System.InvalidOperationException">소스 시퀀스의 <see cref="T:System.Data.DataRow" /> 상태가 <see cref="F:System.Data.DataRowState.Deleted" />인 경우  
  
소스 시퀀스에 <see cref="T:System.Data.DataRow" /> 개체가 없는 경우  
  
소스 시퀀스의 <see cref="T:System.Data.DataRow" />가 <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Data.DataTable" /> 개체 형식의 입력 시퀀스가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption)">
      <summary>제네릭 매개 변수 <paramref name="T" />가 <see cref="T:System.Data.DataRow" />인 지정된 입력 <see cref="T:System.Data.DataTable" /> 개체를 사용하여 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체를 지정된 <see cref="T:System.Data.DataRow" />에 복사합니다.</summary>
      <param name="source">소스 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 시퀀스입니다.</param>
      <param name="table">대상 <see cref="T:System.Data.DataTable" />입니다.</param>
      <param name="options">
        <see cref="T:System.Data.LoadOption" /> 로드 옵션을 지정하는 <see cref="T:System.Data.DataTable" /> 열거형입니다.</param>
      <typeparam name="T">소스 시퀀스의 개체 형식(일반적으로 <see cref="T:System.Data.DataRow" />)입니다.</typeparam>
      <exception cref="T:System.ArgumentException">복사된 <see cref="T:System.Data.DataRow" /> 개체가 대상 <see cref="T:System.Data.DataTable" />의 스키마에 맞지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">소스 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 시퀀스가 <see langword="null" />이거나 대상 <see cref="T:System.Data.DataTable" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">소스 시퀀스의 <see cref="T:System.Data.DataRow" /> 상태가 <see cref="F:System.Data.DataRowState.Deleted" />인 경우  
  
소스 시퀀스에 <see cref="T:System.Data.DataRow" /> 개체가 없는 경우  
  
소스 시퀀스의 <see cref="T:System.Data.DataRow" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Data.DataTableExtensions.CopyToDataTable``1(System.Collections.Generic.IEnumerable{``0},System.Data.DataTable,System.Data.LoadOption,System.Data.FillErrorEventHandler)">
      <summary>제네릭 매개 변수 <paramref name="T" />가 <see cref="T:System.Data.DataRow" />인 지정된 입력 <see cref="T:System.Data.DataTable" /> 개체를 사용하여 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 개체를 지정된 <see cref="T:System.Data.DataRow" />에 복사합니다.</summary>
      <param name="source">소스 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 시퀀스입니다.</param>
      <param name="table">대상 <see cref="T:System.Data.DataTable" />입니다.</param>
      <param name="options">
        <see cref="T:System.Data.LoadOption" /> 로드 옵션을 지정하는 <see cref="T:System.Data.DataTable" /> 열거형입니다.</param>
      <param name="errorHandler">오류를 처리할 메서드를 나타내는 <see cref="T:System.Data.FillErrorEventHandler" /> 대리자입니다.</param>
      <typeparam name="T">소스 시퀀스의 개체 형식(일반적으로 <see cref="T:System.Data.DataRow" />)입니다.</typeparam>
      <exception cref="T:System.ArgumentException">복사된 <see cref="T:System.Data.DataRow" /> 개체가 대상 <see cref="T:System.Data.DataTable" />의 스키마에 맞지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException">소스 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 시퀀스가 <see langword="null" />이거나 대상 <see cref="T:System.Data.DataTable" />이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">소스 시퀀스의 <see cref="T:System.Data.DataRow" /> 상태가 <see cref="F:System.Data.DataRowState.Deleted" />인 경우  
  
또는 
소스 시퀀스에 <see cref="T:System.Data.DataRow" /> 개체가 없는 경우  
  
또는 
소스 시퀀스의 <see cref="T:System.Data.DataRow" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="T:System.Data.DataTableNewRowEventArgs">
      <summary>
        <see cref="M:System.Data.DataTable.NewRow" /> 메서드에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.DataTableNewRowEventArgs.#ctor(System.Data.DataRow)">
      <summary>
        <see cref="T:System.Data.DataTableNewRowEventArgs" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataRow">추가되는 <see cref="T:System.Data.DataRow" />입니다.</param>
    </member>
    <member name="P:System.Data.DataTableNewRowEventArgs.Row">
      <summary>추가되는 행을 가져옵니다.</summary>
      <returns>추가되는 <see cref="T:System.Data.DataRow" />입니다.</returns>
    </member>
    <member name="T:System.Data.DataTableNewRowEventHandler">
      <summary>
        <see cref="M:System.Data.DataTable.NewRow" /> 메서드를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.DataTableNewRowEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Data.DataTableReader">
      <summary>
        <see cref="T:System.Data.DataTableReader" />는 하나 이상의 <see cref="T:System.Data.DataTable" /> 개체 내용을 하나 이상의 앞으로만 이동 가능한 읽기 전용 결과 집합 형태로 가져옵니다.</summary>
    </member>
    <member name="M:System.Data.DataTableReader.#ctor(System.Data.DataTable)">
      <summary>제공된 <see cref="T:System.Data.DataTableReader" />의 데이터를 사용하여 <see cref="T:System.Data.DataTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataTable">새 <see cref="T:System.Data.DataTable" />가 결과 집합을 가져오는 <see cref="T:System.Data.DataTableReader" />입니다.</param>
    </member>
    <member name="M:System.Data.DataTableReader.#ctor(System.Data.DataTable[])">
      <summary>
        <see cref="T:System.Data.DataTableReader" /> 개체의 제공된 배열을 사용하여 <see cref="T:System.Data.DataTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataTables">새 <see cref="T:System.Data.DataTable" /> 개체의 결과를 제공하는 <see cref="T:System.Data.DataTableReader" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Data.DataTableReader.Close">
      <summary>현재 <see cref="T:System.Data.DataTableReader" />를 닫습니다.</summary>
    </member>
    <member name="M:System.Data.DataTableReader.GetBoolean(System.Int32)">
      <summary>
        <see cref="T:System.Boolean" />으로 지정된 열 값을 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 열에 <see langword="Boolean" />이 없는 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetByte(System.Int32)">
      <summary>지정된 열의 값에 해당하는 바이트 값을 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see langword="DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 열에 바이트가 없는 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 열 오프셋에서 시작되는 바이트 스트림을 지정된 버퍼 오프셋에서 시작하는 배열로 버퍼에 읽어 들입니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <param name="dataIndex">읽기 작업을 시작할 필드 내의 인덱스입니다.</param>
      <param name="buffer">바이트 스트림을 읽을 버퍼입니다.</param>
      <param name="bufferIndex">데이터 배치를 시작할 버퍼 내에 있는 인덱스입니다.</param>
      <param name="length">버퍼로 복사할 최대 길이입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see langword="DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 열에 바이트 배열이 없는 경우</exception>
      <returns>읽은 실제 바이트 수입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetChar(System.Int32)">
      <summary>지정된 열의 값을 문자로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see langword="DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 필드에 문자가 없는 경우</exception>
      <returns>열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>지정된 열의 값에 해당하는 문자 배열을 반환합니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <param name="dataIndex">읽기 작업을 시작할 필드 내의 인덱스입니다.</param>
      <param name="buffer">문자 스트림을 읽어올 버퍼입니다.</param>
      <param name="bufferIndex">데이터 배치를 시작할 버퍼 내에 있는 인덱스입니다.</param>
      <param name="length">버퍼로 복사할 최대 길이입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see langword="DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 열에 문자 배열이 없는 경우</exception>
      <returns>읽은 실제 문자 수입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetDataTypeName(System.Int32)">
      <summary>지정된 열의 데이터 형식을 나타내는 문자열을 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <returns>열의 데이터 형식을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetDateTime(System.Int32)">
      <summary>지정된 열의 값에 해당하는 <see cref="T:System.DateTime" /> 개체를 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see langword="DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 열에 DateTime 값이 없는 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetDecimal(System.Int32)">
      <summary>
        <see cref="T:System.Decimal" />으로 지정된 열 값을 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see langword="DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 열에 <see langword="Decimal" /> 값이 없는 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetDouble(System.Int32)">
      <summary>열의 값을 배정밀도 부동 소수점 숫자로 가져옵니다.</summary>
      <param name="ordinal">열의 0부터 시작하는 서수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see langword="DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 열에 배정밀도 부동 소수점 숫자가 없는 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetEnumerator">
      <summary>항목 컬렉션 전체에서 반복하는 데 사용할 수 있는 열거자를 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <returns>항목 컬렉션을 나타내는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetFieldType(System.Int32)">
      <summary>개체의 데이터 형식인 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 합니다.</exception>
      <returns>개체의 데이터 형식인 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetFloat(System.Int32)">
      <summary>지정된 열의 값에 해당하는 단정밀도 부동 소수점 숫자를 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 열에 단정밀도 부동 소수점 숫자가 없는 경우</exception>
      <returns>열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetGuid(System.Int32)">
      <summary>지정된 열의 값에 해당하는 GUID(Globally Unique ID)를 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 열에 GUID가 없는 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt16(System.Int32)">
      <summary>지정된 열의 값을 16비트 부호 있는 정수로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 열에 16비트 부호 있는 정수가 없는 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt32(System.Int32)">
      <summary>지정된 열의 값에 해당하는 32비트 부호 있는 정수를 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 합니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 열에 32비트 부호 있는 정수 값이 없는 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetInt64(System.Int32)">
      <summary>지정된 열의 값에 해당하는 64비트 부호 있는 정수를 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 합니다.</exception>
      <exception cref="T:System.InvalidCastException">지정된 열에 64비트 부호 있는 정수 값이 없습니다.</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetName(System.Int32)">
      <summary>
        <see cref="T:System.String" />으로 지정된 열 값을 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <returns>지정된 열의 이름입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetOrdinal(System.String)">
      <summary>열 이름이 지정된 경우 열 서수를 가져옵니다.</summary>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <exception cref="T:System.ArgumentException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <returns>열 서수(0부터 시작)입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>지정된 열의 형식을 공급자별 형식으로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <returns>개체의 데이터 형식인 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificValue(System.Int32)">
      <summary>지정된 열의 값을 공급자별 형식으로 가져옵니다.</summary>
      <param name="ordinal">값을 검색하는 열의 번호(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <returns>지정된 열의 값이며 공급자별 형식으로 되어 있습니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetProviderSpecificValues(System.Object[])">
      <summary>
        <see cref="T:System.Data.DataTableReader" />의 모든 열에 대한 공급자별 형식 정보를 제공된 배열에 채웁니다.</summary>
      <param name="values">
        <see cref="T:System.Data.DataTableReader" />의 열에 대한 형식 정보로 채워질 개체 배열입니다.</param>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <returns>배열에 복사된 열 값의 개수입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetSchemaTable">
      <summary>
        <see cref="T:System.Data.DataTable" />의 열 메타데이터를 정의하는 <see cref="T:System.Data.DataTableReader" />을 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.DataTableReader" />가 닫힌 경우</exception>
      <returns>열 메타데이터를 정의하는 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetString(System.Int32)">
      <summary>지정된 열의 값을 문자열로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <exception cref="T:System.InvalidCastException">지정된 열에 문자열이 없는 경우</exception>
      <returns>지정된 열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetValue(System.Int32)">
      <summary>지정된 열의 값을 네이티브 형식으로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 합니다.</exception>
      <returns>지정된 열의 값입니다. 이 메서드는 null 열에 대해 <see langword="DBNull" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.GetValues(System.Object[])">
      <summary>현재 행의 열 값으로 개체 배열을 채웁니다.</summary>
      <param name="values">
        <see cref="T:System.Object" />로부터 열 값을 복사해 올 <see cref="T:System.Data.DataTableReader" />의 배열입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 합니다.</exception>
      <returns>배열에 복사된 열 값의 개수입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.IsDBNull(System.Int32)">
      <summary>열의 값이 존재하지 않거나 누락되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 합니다.</exception>
      <returns>지정된 열 값이 <see cref="T:System.DBNull" />과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.NextResult">
      <summary>
        <see cref="T:System.Data.DataTableReader" />를 다음 결과 집합(있을 경우)으로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" /> 내의 정보를 탐색하려고 한 경우</exception>
      <returns>다른 결과 집합이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataTableReader.Read">
      <summary>
        <see cref="T:System.Data.DataTableReader" />를 다음 레코드로 이동합니다.</summary>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 합니다.</exception>
      <returns>읽을 행이 더 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataTableReader.Depth">
      <summary>
        <see cref="T:System.Data.DataTableReader" />의 현재 행에 대한 중첩 수준입니다.</summary>
      <returns>현재 행의 중첩 수준이며 항상 0입니다.</returns>
    </member>
    <member name="P:System.Data.DataTableReader.FieldCount">
      <summary>현재 행에 있는 열의 수를 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 필드 수를 검색하려고 한 경우</exception>
      <returns>유효한 결과 집합에 배치되지 않으면 0이고, 그렇지 않으면 현재 행에 있는 열의 수입니다.</returns>
    </member>
    <member name="P:System.Data.DataTableReader.HasRows">
      <summary>
        <see cref="T:System.Data.DataTableReader" />에 하나 이상의 행이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />에 대한 정보를 검색하려고 한 경우</exception>
      <returns>
        <see cref="T:System.Data.DataTableReader" />에 행이 하나 이상 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataTableReader.IsClosed">
      <summary>
        <see cref="T:System.Data.DataTableReader" />가 닫혀 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataTableReader" />가 닫혔으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataTableReader.Item(System.Int32)">
      <summary>열 서수가 지정된 경우, 지정된 열의 값을 네이티브 형식으로 가져옵니다.</summary>
      <param name="ordinal">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0에서 <see cref="P:System.Data.DataTableReader.FieldCount" /> - 1 사이의 범위에 속하지 않는 경우</exception>
      <returns>지정한 열의 네이티브 형식 값입니다.</returns>
    </member>
    <member name="P:System.Data.DataTableReader.Item(System.String)">
      <summary>열 이름이 지정된 경우, 지정된 열의 값을 네이티브 형식으로 가져옵니다.</summary>
      <param name="name">열 이름입니다.</param>
      <exception cref="T:System.ArgumentException">지정된 이름이 올바른 열 이름이 아닌 경우</exception>
      <exception cref="T:System.Data.DeletedRowInaccessibleException">삭제된 행에서 데이터를 검색하려고 한 경우</exception>
      <exception cref="T:System.InvalidOperationException">닫힌 <see cref="T:System.Data.DataTableReader" />의 열을 읽거나 액세스하려고 한 경우</exception>
      <returns>지정한 열의 네이티브 형식 값입니다.</returns>
    </member>
    <member name="P:System.Data.DataTableReader.RecordsAffected">
      <summary>SQL 문을 실행하여 삽입, 변경 또는 삭제된 열의 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataTableReader" />는 이 속성을 지원하지 않으며 항상 0을 반환합니다.</returns>
    </member>
    <member name="T:System.Data.DataView">
      <summary>정렬, 필터링, 검색, 편집 및 탐색을 수행할 수 있는 <see cref="T:System.Data.DataTable" /> 의 데이터 바인딩 가능한 사용자 지정된 보기를 나타냅니다. <see cref="T:System.Data.DataView" /> 에서는 데이터를 저장하지 않지만 해당하는 <see cref="T:System.Data.DataTable" />의 연결된 뷰를 나타냅니다. <see cref="T:System.Data.DataView" />의 데이터 변경 내용은 <see cref="T:System.Data.DataTable" />에 영향을 줍니다. <see cref="T:System.Data.DataTable" />의 데이터 변경 내용은 이와 연결된 모든 <see cref="T:System.Data.DataView" />에 영향을 줍니다.</summary>
    </member>
    <member name="E:System.Data.DataView.Initialized">
      <summary>
        <see cref="T:System.Data.DataView" /> 의 초기화가 완료되면 발생합니다.</summary>
    </member>
    <member name="E:System.Data.DataView.ListChanged">
      <summary>
        <see cref="T:System.Data.DataView" /> 에서 관리하는 목록이 변경되면 발생합니다.</summary>
    </member>
    <member name="M:System.Data.DataView.#ctor">
      <summary>
        <see cref="T:System.Data.DataView" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.DataView.#ctor(System.Data.DataTable)">
      <summary>지정된 <see cref="T:System.Data.DataView" />를 사용하여 <see cref="T:System.Data.DataTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 에 추가할 <see cref="T:System.Data.DataView" />입니다.</param>
    </member>
    <member name="M:System.Data.DataView.#ctor(System.Data.DataTable,System.String,System.String,System.Data.DataViewRowState)">
      <summary>지정된 <see cref="T:System.Data.DataView" /> , <see cref="T:System.Data.DataTable" />, <see cref="P:System.Data.DataView.RowFilter" />및 <see cref="P:System.Data.DataView.Sort" />를 사용하여 <see cref="T:System.Data.DataViewRowState" />클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 에 추가할 <see cref="T:System.Data.DataView" />입니다.</param>
      <param name="RowFilter">
        <see cref="P:System.Data.DataView.RowFilter" /> 에 적용할 <see cref="T:System.Data.DataView" />입니다.</param>
      <param name="Sort">
        <see cref="P:System.Data.DataView.Sort" /> 에 적용할 <see cref="T:System.Data.DataView" />입니다.</param>
      <param name="RowState">
        <see cref="T:System.Data.DataViewRowState" /> 에 적용할 <see cref="T:System.Data.DataView" />입니다.</param>
    </member>
    <member name="M:System.Data.DataView.AddNew">
      <summary>
        <see cref="T:System.Data.DataView" />에 새 행을 추가합니다.</summary>
      <returns>새 <see cref="T:System.Data.DataRowView" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.DataView.BeginInit">
      <summary>폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.Data.DataView" />의 초기화를 시작합니다. 초기화는 런타임에 발생합니다.</summary>
    </member>
    <member name="M:System.Data.DataView.Close">
      <summary>
        <see cref="T:System.Data.DataView" />를 닫습니다.</summary>
    </member>
    <member name="M:System.Data.DataView.ColumnCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
        <see cref="T:System.Data.DataColumnCollection" />가 변경된 후에 발생합니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.ListChangedEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataView.CopyTo(System.Array,System.Int32)">
      <summary>배열에 항목을 복사합니다. Web Forms 인터페이스 전용입니다.</summary>
      <param name="array">복사할 배열입니다.</param>
      <param name="index">시작할 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.DataView.Delete(System.Int32)">
      <summary>지정한 인덱스의 행을 삭제합니다.</summary>
      <param name="index">삭제할 행의 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.DataView.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Data.DataView" /> 개체에서 사용하는 리소스(메모리 제외)를 삭제합니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Data.DataView.EndInit">
      <summary>폼에 사용되거나 다른 구성 요소에서 사용하는 <see cref="T:System.Data.DataView" />의 초기화를 끝냅니다. 초기화는 런타임에 발생합니다.</summary>
    </member>
    <member name="M:System.Data.DataView.Equals(System.Data.DataView)">
      <summary>지정한 <see cref="T:System.Data.DataView" /> 인스턴스가 동일한지를 확인합니다.</summary>
      <param name="view">비교할 <see cref="T:System.Data.DataView" /> 입니다.</param>
      <returns>두 <see cref="T:System.Data.DataView" /> 인스턴스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataView.Find(System.Object)">
      <summary>지정된 정렬 키 값으로 <see cref="T:System.Data.DataView" /> 에서 행을 찾습니다.</summary>
      <param name="key">검색할 개체입니다.</param>
      <returns>정렬 키 값을 포함하는 <see cref="T:System.Data.DataView" /> 의 행 인덱스를 지정했으며, 정렬 키 값이 없으면 -1입니다.</returns>
    </member>
    <member name="M:System.Data.DataView.Find(System.Object[])">
      <summary>지정된 정렬 키 값으로 <see cref="T:System.Data.DataView" /> 의 행을 찾습니다.</summary>
      <param name="key">
        <see cref="T:System.Object" />로 형식이 지정된 값 배열입니다.</param>
      <returns>지정된 정렬 키 값과 일치하는 <see cref="T:System.Data.DataView" /> 의 첫 번째 행 위치의 인덱스이거나, 일치하는 정렬 키 값이 없으면 -1입니다.</returns>
    </member>
    <member name="M:System.Data.DataView.FindRows(System.Object)">
      <summary>열이 지정된 정렬 키 값과 일치하는 <see cref="T:System.Data.DataRowView" /> 개체의 배열을 반환합니다.</summary>
      <param name="key">
        <see cref="T:System.Object" />로 입력한 검색할 열 값입니다.</param>
      <returns>해당 열이 지정된 정렬 키 값과 일치하는 <see langword="DataRowView" /> 개체의 배열이거나, 지정된 정렬 키 값을 갖는 행이 없는 경우에는 빈 <see langword="DataRowView" /> 배열입니다.</returns>
    </member>
    <member name="M:System.Data.DataView.FindRows(System.Object[])">
      <summary>열이 지정된 정렬 키 값과 일치하는 <see cref="T:System.Data.DataRowView" /> 개체의 배열을 반환합니다.</summary>
      <param name="key">검색할 <see cref="T:System.Object" />로 형식화된 열 값 배열입니다.</param>
      <returns>해당 열이 지정된 정렬 키 값과 일치하는 <see langword="DataRowView" /> 개체의 배열이거나, 지정된 정렬 키 값을 갖는 행이 없는 경우에는 빈 <see langword="DataRowView" /> 배열입니다.</returns>
    </member>
    <member name="M:System.Data.DataView.GetEnumerator">
      <summary>이 <see cref="T:System.Data.DataView" />에 대한 열거자를 가져옵니다.</summary>
      <returns>목록 전체를 탐색하기 위한 <see cref="T:System.Collections.IEnumerator" /> 입니다.</returns>
    </member>
    <member name="M:System.Data.DataView.IndexListChanged(System.Object,System.ComponentModel.ListChangedEventArgs)">
      <summary>
        <see cref="T:System.Data.DataView" />가 변경된 후에 발생합니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.ListChangedEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataView.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
        <see cref="E:System.Data.DataView.ListChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.ListChangedEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataView.Open">
      <summary>
        <see cref="T:System.Data.DataView" />가 열립니다.</summary>
    </member>
    <member name="M:System.Data.DataView.Reset">
      <summary>이 속성은 내부 전용으로 예약되어 있으므로</summary>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Add(System.Object)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Add(System.Object)" />를 참조하세요.</summary>
      <param name="value">
        <see cref="T:System.Object" /> 값입니다.</param>
      <returns>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Add(System.Object)" />를 참조하세요.</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Clear">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Clear" />를 참조하세요.</summary>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Contains(System.Object)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Contains(System.Object)" />를 참조하세요.</summary>
      <param name="value">
        <see cref="T:System.Object" /> 값입니다.</param>
      <returns>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Contains(System.Object)" />를 참조하세요.</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#IndexOf(System.Object)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />를 참조하세요.</summary>
      <param name="value">
        <see cref="T:System.Object" /> 값입니다.</param>
      <returns>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.IndexOf(System.Object)" />를 참조하세요.</returns>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />를 참조하세요.</summary>
      <param name="index">
        <see cref="T:System.Int32" /> 값입니다.</param>
      <param name="value">삽입할 <see cref="T:System.Object" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#Remove(System.Object)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Remove(System.Object)" />를 참조하세요.</summary>
      <param name="value">
        <see cref="T:System.Object" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.DataView.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.RemoveAt(System.Int32)" />를 참조하세요.</summary>
      <param name="index">
        <see cref="T:System.Int32" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor)" />를 참조하세요.</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#AddNew">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.AddNew" />를 참조하세요.</summary>
      <returns>목록에 추가되는 항목입니다.</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />를 참조하세요.</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다.</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />를 참조하세요.</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다.</param>
      <param name="key">
        <see cref="T:System.Object" /> 값입니다.</param>
      <returns>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor,System.Object)" />를 참조하세요.</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor)" />를 참조하세요.</summary>
      <param name="property">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingList#RemoveSort">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.RemoveSort" />를 참조하세요.</summary>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingListView#ApplySort(System.ComponentModel.ListSortDescriptionCollection)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingListView.ApplySort(System.ComponentModel.ListSortDescriptionCollection)" />를 참조하세요.</summary>
      <param name="sorts">
        <see cref="T:System.ComponentModel.ListSortDescriptionCollection" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#IBindingListView#RemoveFilter">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingListView.RemoveFilter" />를 참조하세요.</summary>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.ITypedList.GetItemProperties(System.ComponentModel.PropertyDescriptor[])" />를 참조하세요.</summary>
      <param name="listAccessors">컬렉션에서 찾을 바인딩 가능한 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
      <returns>데이터를 바인딩하는데 사용되는 각 항목의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataView.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />를 참조하세요.</summary>
      <param name="listAccessors">
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다.</param>
      <returns>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.ITypedList.GetListName(System.ComponentModel.PropertyDescriptor[])" />를 참조하세요.</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable">
      <summary>기존 <see cref="T:System.Data.DataTable" /> 의 행에 따라 새 <see cref="T:System.Data.DataView" />을 만들고 반환합니다.</summary>
      <returns>요청한 행과 열을 포함하는 새 <see cref="T:System.Data.DataTable" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.Boolean,System.String[])">
      <summary>기존 <see cref="T:System.Data.DataTable" /> 의 행에 따라 새 <see cref="T:System.Data.DataView" />을 만들고 반환합니다.</summary>
      <param name="distinct">
        <see langword="true" />이면 반환된 <see cref="T:System.Data.DataTable" /> 에 모든 열에 대한 고유 값을 가진 행이 포함됩니다. 기본값은 <see langword="false" />입니다.</param>
      <param name="columnNames">반환된 <see cref="T:System.Data.DataTable" />에 포함될 열 이름 목록이 들어 있는 문자열 배열입니다. <see cref="T:System.Data.DataTable" /> 에는 지정된 열이 이 배열 안에 표시되는 순서대로 들어 있습니다.</param>
      <returns>요청한 행과 열을 포함하는 새 <see cref="T:System.Data.DataTable" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.String)">
      <summary>기존 <see cref="T:System.Data.DataTable" /> 의 행에 따라 새 <see cref="T:System.Data.DataView" />을 만들고 반환합니다.</summary>
      <param name="tableName">반환된 <see cref="T:System.Data.DataTable" />의 이름입니다.</param>
      <returns>요청한 행과 열을 포함하는 새 <see cref="T:System.Data.DataTable" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.DataView.ToTable(System.String,System.Boolean,System.String[])">
      <summary>기존 <see cref="T:System.Data.DataTable" /> 의 행에 따라 새 <see cref="T:System.Data.DataView" />을 만들고 반환합니다.</summary>
      <param name="tableName">반환된 <see cref="T:System.Data.DataTable" />의 이름입니다.</param>
      <param name="distinct">
        <see langword="true" />이면 반환된 <see cref="T:System.Data.DataTable" /> 에 모든 열에 대한 고유 값을 가진 행이 포함됩니다. 기본값은 <see langword="false" />입니다.</param>
      <param name="columnNames">반환된 <see cref="T:System.Data.DataTable" />에 포함될 열 이름 목록이 들어 있는 문자열 배열입니다. <see langword="DataTable" /> 에는 지정된 열이 이 배열 안에 표시되는 순서대로 들어 있습니다.</param>
      <returns>요청한 행과 열을 포함하는 새 <see cref="T:System.Data.DataTable" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.DataView.UpdateIndex">
      <summary>이 속성은 내부 전용으로 예약되어 있으므로</summary>
    </member>
    <member name="M:System.Data.DataView.UpdateIndex(System.Boolean)">
      <summary>이 속성은 내부 전용으로 예약되어 있으므로</summary>
      <param name="force">이 속성은 내부 전용으로 예약되어 있으므로</param>
    </member>
    <member name="P:System.Data.DataView.AllowDelete">
      <summary>삭제가 허용되는지 여부를 나타내는 값을 설정하거나 가져옵니다.</summary>
      <returns>삭제가 허용되면 <see langword="true" />이고, 허용되지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataView.AllowEdit">
      <summary>편집이 허용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>편집이 허용되면<see langword="true" />이고, 허용되지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataView.AllowNew">
      <summary>
        <see cref="M:System.Data.DataView.AddNew" /> 메서드를 사용하여 새 행을 추가할 수 있는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>새 행을 추가할 수 있으면 <see langword="true" />이고, 추가할 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataView.ApplyDefaultSort">
      <summary>기본 정렬을 사용할지 여부를 나타내는 값을 가져오거나 설정합니다. 기본 정렬은 <see cref="P:System.Data.DataTable.PrimaryKey" />에 지정된 대로 모든 기본 키에 의한 오름차순 정렬입니다.</summary>
      <returns>기본 정렬이 사용되면 <see langword="true" />이고, 사용되지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataView.Count">
      <summary>
        <see cref="P:System.Data.DataView.RowFilter" /> 및 <see cref="P:System.Data.DataView.RowStateFilter" />가 적용된 후에 <see cref="T:System.Data.DataView" />의 레코드 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataView" />의 레코드 수입니다.</returns>
    </member>
    <member name="P:System.Data.DataView.DataViewManager">
      <summary>이 보기와 연결된 <see cref="T:System.Data.DataViewManager" /> 를 가져옵니다.</summary>
      <returns>이 보기를 만든 <see langword="DataViewManager" /> 입니다. 이것이 <see cref="T:System.Data.DataView" /> 에 대한 기본 <see cref="T:System.Data.DataTable" />이면 <see langword="DataViewManager" /> 속성은 <see langword="DataViewManager" /> 에 대해 기본 <see langword="DataSet" />를 반환합니다. 그렇지 않고 <see langword="DataView" /> 가 <see langword="DataViewManager" />없이 만들어진 경우 이 속성은 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataView.IsInitialized">
      <summary>구성 요소가 초기화되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>구성 요소의 초기화가 완료되었음을 나타내려면<see langword="true" /> 이고, 그러지 않으려면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataView.IsOpen">
      <summary>데이터 원본이 현재 열려 있고 <see cref="T:System.Data.DataTable" />에 데이터의 보기를 표시하고 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>원본이 열려 있으면<see langword="true" />이고, 닫혀 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataView.Item(System.Int32)">
      <summary>지정된 테이블에서 데이터의 행을 가져옵니다.</summary>
      <param name="recordIndex">
        <see cref="T:System.Data.DataTable" />에 있는 레코드의 인덱스입니다.</param>
      <returns>원하는 행의 <see cref="T:System.Data.DataRowView" /> 입니다.</returns>
    </member>
    <member name="P:System.Data.DataView.RowFilter">
      <summary>
        <see cref="T:System.Data.DataView" />에서 표시할 행을 필터링하는 데 사용하는 식을 가져오거나 설정합니다.</summary>
      <returns>행의 필터링 방법을 지정하는 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.DataView.RowStateFilter">
      <summary>
        <see cref="T:System.Data.DataView" />에 사용되는 행 상태 필터를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataViewRowState" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Data.DataView.Sort">
      <summary>
        <see cref="T:System.Data.DataView" />에 대한 정렬 열 및 정렬 순서를 가져오거나 설정합니다.</summary>
      <returns>열 이름 뒤에 "ASC"(오름차순) 또는 "DESC"(내림차순)가 붙은 문자열입니다. 열은 기본적으로 오름차순으로 정렬됩니다. 여러 열은 쉼표로 구분할 수 있습니다.</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#ICollection#IsSynchronized">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Collections.ICollection.IsSynchronized" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.Collections.ICollection.IsSynchronized" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#ICollection#SyncRoot">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Collections.ICollection.SyncRoot" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.Collections.ICollection.SyncRoot" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#IsFixedSize">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Collections.IList.IsFixedSize" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.Collections.IList.IsFixedSize" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#IsReadOnly">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Collections.IList.IsReadOnly" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.Collections.IList.IsReadOnly" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#Collections#IList#Item(System.Int32)">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Collections.IList.Item(System.Int32)" />를 참조하세요.</summary>
      <param name="recordIndex">
        <see cref="T:System.Int32" /> 값입니다.</param>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.Collections.IList.Item(System.Int32)" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowEdit">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowNew">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#AllowRemove">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#IsSorted">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SortDirection">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SortProperty">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#Filter">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingListView.Filter" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingListView.Filter" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SortDescriptions">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingListView.SortDescriptions" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingListView.SortDescriptions" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SupportsAdvancedSorting">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingListView.SupportsAdvancedSorting" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.System#ComponentModel#IBindingListView#SupportsFiltering">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingListView.SupportsFiltering" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingListView.SupportsFiltering" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataView.Table">
      <summary>소스 <see cref="T:System.Data.DataTable" />을 가져오거나 설정합니다.</summary>
      <returns>이 보기에 대한 데이터를 제공하는 <see cref="T:System.Data.DataTable" /> 입니다.</returns>
    </member>
    <member name="T:System.Data.DataViewManager">
      <summary>
        <see cref="T:System.Data.DataViewSettingCollection" /> 의 각 <see cref="T:System.Data.DataTable" /> 에 대한 기본 <see cref="T:System.Data.DataSet" />을 포함합니다.</summary>
    </member>
    <member name="E:System.Data.DataViewManager.ListChanged">
      <summary>
        <see cref="T:System.Data.DataView" />에서 열을 추가하거나 삭제한 후 발생합니다.</summary>
    </member>
    <member name="M:System.Data.DataViewManager.#ctor">
      <summary>
        <see cref="T:System.Data.DataViewManager" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.DataViewManager.#ctor(System.Data.DataSet)">
      <summary>지정된 <see cref="T:System.Data.DataSet" />에 대한 <see cref="T:System.Data.DataViewManager" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataSet">사용할 <see cref="T:System.Data.DataSet" />의 이름입니다.</param>
    </member>
    <member name="M:System.Data.DataViewManager.CreateDataView(System.Data.DataTable)">
      <summary>지정된 <see cref="T:System.Data.DataTable" />에 대한 새 <see cref="T:System.Data.DataView" />를 만듭니다.</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" />에서 사용할 <see cref="T:System.Data.DataView" />의 이름입니다.</param>
      <returns>
        <see cref="T:System.Data.DataView" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.DataViewManager.OnListChanged(System.ComponentModel.ListChangedEventArgs)">
      <summary>
        <see cref="E:System.Data.DataViewManager.ListChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.ListChangedEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataViewManager.RelationCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataRelationCollection.CollectionChanged" />을 <see cref="T:System.Data.DataRelation" />에 추가하거나 삭제할 때 <see cref="T:System.Data.DataRelationCollection" /> 이벤트를 발생시킵니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />입니다.</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary>특정 <see cref="T:System.Collections.ICollection" /> 인덱스부터 시작하여 <see cref="T:System.Array" />의 요소를 <see cref="T:System.Array" />에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Array" />에서 복사한 요소의 대상인 일차원 <see cref="T:System.Collections.ICollection" />입니다. <see cref="T:System.Array" />에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IEnumerable#GetEnumerator">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="M:System.Collections.IEnumerable.GetEnumerator" />를 참조하세요.</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Add(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에 항목을 추가합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에 추가할 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns>새 요소가 삽입된 위치입니다.</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Clear">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Collections.IList.Clear" />를 참조하세요.</summary>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Contains(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에 특정 값이 들어 있는지 여부를 확인합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns>
        <see cref="T:System.Object" />가 <see cref="T:System.Collections.IList" />에 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#IndexOf(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에서 특정 항목의 인덱스를 결정합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에서 찾을 <see cref="T:System.Collections.IList" />입니다.</param>
      <returns>목록에 있으면 <paramref name="value" />의 인덱스이고, 그렇지 않으면 -1입니다.</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary>항목을 <see cref="T:System.Collections.IList" />의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">
        <paramref name="value" />을 삽입해야 하는 인덱스(0부터 시작)입니다.</param>
      <param name="value">
        <see cref="T:System.Collections.IList" />에 삽입할 <see cref="T:System.Object" />입니다.</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#Remove(System.Object)">
      <summary>
        <see cref="T:System.Collections.IList" />에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <param name="value">
        <see cref="T:System.Object" />에서 제거할 <see cref="T:System.Collections.IList" />입니다.</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#Collections#IList#RemoveAt(System.Int32)">
      <summary>지정한 인덱스에서 <see cref="T:System.Collections.IList" /> 항목을 제거합니다.</summary>
      <param name="index">제거할 항목의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#AddIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>검색에 사용되는 인덱스에 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 추가합니다.</summary>
      <param name="property">검색에 사용되는 인덱스에 추가할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#AddNew">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.AddNew" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="M:System.ComponentModel.IBindingList.AddNew" />를 참조하세요.</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptor" /> 및 <see cref="T:System.ComponentModel.ListSortDirection" />에 따라 목록을 정렬합니다.</summary>
      <param name="property">정렬에 사용할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="direction">
        <see cref="T:System.ComponentModel.ListSortDirection" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#Find(System.ComponentModel.PropertyDescriptor,System.Object)">
      <summary>지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 있는 행의 인덱스를 반환합니다.</summary>
      <param name="property">검색할 대상 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <param name="key">검색할 property 매개 변수의 값입니다.</param>
      <returns>지정된 <see cref="T:System.ComponentModel.PropertyDescriptor" />가 있는 행의 인덱스입니다.</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#RemoveIndex(System.ComponentModel.PropertyDescriptor)">
      <summary>검색에 사용되는 인덱스에서 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 제거합니다.</summary>
      <param name="property">검색에 사용되는 인덱스에서 제거할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#IBindingList#RemoveSort">
      <summary>
        <see cref="M:System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor,System.ComponentModel.ListSortDirection)" />를 사용하여 적용되는 모든 정렬을 제거합니다.</summary>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#ITypedList#GetItemProperties(System.ComponentModel.PropertyDescriptor[])">
      <summary>데이터를 바인딩하는데 사용되는 각 항목의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />를 반환합니다.</summary>
      <param name="listAccessors">컬렉션에서 찾을 바인딩 가능한 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
      <returns>데이터를 바인딩하는데 사용되는 각 항목의 속성을 나타내는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />입니다.</returns>
    </member>
    <member name="M:System.Data.DataViewManager.System#ComponentModel#ITypedList#GetListName(System.ComponentModel.PropertyDescriptor[])">
      <summary>해당 목록의 이름을 반환합니다.</summary>
      <param name="listAccessors">목록 이름이 반환되는 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 개체의 배열입니다. 이 매개 변수는 <see langword="null" />이 될 수 있습니다.</param>
      <returns>목록 이름입니다.</returns>
    </member>
    <member name="M:System.Data.DataViewManager.TableCollectionChanged(System.Object,System.ComponentModel.CollectionChangeEventArgs)">
      <summary>
        <see cref="E:System.Data.DataTableCollection.CollectionChanged" />을 <see cref="T:System.Data.DataTable" />에 추가하거나 삭제할 때 <see cref="T:System.Data.DataTableCollection" /> 이벤트를 발생시킵니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.ComponentModel.CollectionChangeEventArgs" />입니다.</param>
    </member>
    <member name="P:System.Data.DataViewManager.DataSet">
      <summary>
        <see cref="T:System.Data.DataSet" />에 사용할 <see cref="T:System.Data.DataViewManager" />을 가져오거나 설정합니다.</summary>
      <returns>사용할 <see cref="T:System.Data.DataSet" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataViewSettingCollectionString">
      <summary>코드 유지에 사용되는 값을 가져오거나 설정합니다.</summary>
      <returns>코드 유지에 사용되는 값입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.DataViewSettings">
      <summary>
        <see cref="T:System.Data.DataViewSettingCollection" />의 각 <see cref="T:System.Data.DataTable" />에 대한 <see cref="T:System.Data.DataSet" />을 가져옵니다.</summary>
      <returns>각 <see langword="DataTable" />에 대한 <see cref="T:System.Data.DataViewSettingCollection" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#Count">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Collections.ICollection.Count" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.Collections.ICollection.Count" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#IsSynchronized">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Collections.ICollection.IsSynchronized" />를 참조하세요.</summary>
      <returns>
        <see langword="true" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되면 <see cref="T:System.Collections.ICollection" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#ICollection#SyncRoot">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Collections.ICollection.SyncRoot" />를 참조하세요.</summary>
      <returns>
        <see cref="T:System.Collections.ICollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#IsFixedSize">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Collections.IList.IsFixedSize" />를 참조하세요.</summary>
      <returns>
        <see langword="true" />가 고정 크기인 경우 <see cref="T:System.Collections.IList" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#IsReadOnly">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Collections.IList.IsReadOnly" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.Collections.IList.IsReadOnly" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#Collections#IList#Item(System.Int32)">
      <summary>지정한 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <param name="index">가져오거나 설정할 요소의 인덱스(0부터 시작)입니다.</param>
      <returns>지정한 인덱스의 요소입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowEdit">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.AllowEdit" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowNew">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.AllowNew" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#AllowRemove">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.AllowRemove" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#IsSorted">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.IsSorted" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SortDirection">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SortDirection" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SortProperty">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SortProperty" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsChangeNotification">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsChangeNotification" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsSearching">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsSearching" />를 참조하세요.</returns>
    </member>
    <member name="P:System.Data.DataViewManager.System#ComponentModel#IBindingList#SupportsSorting">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />를 참조하세요.</summary>
      <returns>이 멤버에 대한 설명은 <see cref="P:System.ComponentModel.IBindingList.SupportsSorting" />를 참조하세요.</returns>
    </member>
    <member name="T:System.Data.DataViewRowState">
      <summary>
        <see cref="T:System.Data.DataRow" />의 데이터 버전을 설명합니다.</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Added">
      <summary>새 행입니다.</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.CurrentRows">
      <summary>변경되지 않은 행, 새 행 및 수정된 행을 포함한 현재 행입니다. 기본적으로 <see cref="T:System.Data.DataViewRowState" />는 CurrentRows로 설정됩니다.</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Deleted">
      <summary>삭제된 행입니다.</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.ModifiedCurrent">
      <summary>수정된 원래 데이터의 현재 버전입니다. <see langword="ModifiedOriginal" />을 참조하십시오.</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.ModifiedOriginal">
      <summary>수정된 데이터의 원래 버전이며 데이터가 수정되어 <see langword="ModifiedCurrent" />로 사용할 수 있는 경우를 포함합니다.</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.None">
      <summary>없음</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.OriginalRows">
      <summary>변경되지 않은 행과 삭제된 행을 포함한 원본 행입니다.</summary>
    </member>
    <member name="F:System.Data.DataViewRowState.Unchanged">
      <summary>변경되지 않은 행입니다.</summary>
    </member>
    <member name="T:System.Data.DataViewSetting">
      <summary>
        <see cref="P:System.Data.DataView.ApplyDefaultSort" />에서 만든 DataView에 대한 <see cref="P:System.Data.DataView.DataViewManager" />, <see cref="P:System.Data.DataView.RowFilter" />, <see cref="P:System.Data.DataView.RowStateFilter" />, <see cref="P:System.Data.DataView.Sort" />, <see cref="P:System.Data.DataView.Table" /> 및 <see cref="T:System.Data.DataViewManager" />의 기본 설정을 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.DataViewSetting.ApplyDefaultSort">
      <summary>기본 정렬을 사용할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>기본 정렬이 사용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.DataViewManager">
      <summary>이 <see cref="T:System.Data.DataViewManager" />이 들어 있는 <see cref="T:System.Data.DataViewSetting" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataViewManager" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.RowFilter">
      <summary>
        <see cref="T:System.Data.DataView" />에 적용할 필터를 가져오거나 설정합니다. RowFilter를 사용한 코드 예제를 보려면 <see cref="P:System.Data.DataView.RowFilter" />를 참조하십시오.</summary>
      <returns>적용할 필터가 포함된 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.RowStateFilter">
      <summary>
        <see cref="T:System.Data.DataView" />에 Current, Deleted, Modified Current, ModifiedOriginal, New, Original, Unchanged 행을 표시할지 아무 행도 표시하지 않을지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>표시할 행을 나타내는 값입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.Sort">
      <summary>
        <see cref="T:System.Data.DataView" />에 적용할 정렬을 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataView" />에 적용할 정렬입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewSetting.Table">
      <summary>
        <see cref="T:System.Data.DataTable" /> 속성을 적용할 <see cref="T:System.Data.DataViewSetting" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Data.DataViewSettingCollection">
      <summary>
        <see cref="T:System.Data.DataViewSetting" />에 있는 각 <see cref="T:System.Data.DataTable" />에 대한 <see cref="T:System.Data.DataSet" /> 개체의 읽기 전용 컬렉션을 포함합니다.</summary>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.CopyTo(System.Array,System.Int32)">
      <summary>지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="ar">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.CopyTo(System.Data.DataViewSetting[],System.Int32)">
      <summary>지정한 인덱스에서 시작하는 1차원 <see cref="T:System.Array" /> 인스턴스에 컬렉션 개체를 복사합니다.</summary>
      <param name="ar">컬렉션에서 복사된 값의 대상인 1차원 <see cref="T:System.Array" />입니다.</param>
      <param name="index">삽입을 시작할 배열의 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.DataViewSettingCollection.GetEnumerator">
      <summary>컬렉션에 대한 <see cref="T:System.Collections.IEnumerator" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Count">
      <summary>
        <see cref="T:System.Data.DataViewSetting" />의 <see cref="T:System.Data.DataViewSettingCollection" /> 개체 수를 가져옵니다.</summary>
      <returns>컬렉션의 <see cref="T:System.Data.DataViewSetting" /> 개체 수입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.IsReadOnly">
      <summary>
        <see cref="T:System.Data.DataViewSettingCollection" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션을 <see langword="true" /> 읽기 전용으로 나타내려면 항상를 반환 합니다.</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.IsSynchronized">
      <summary>
        <see cref="T:System.Data.DataViewSettingCollection" />에 대한 액세스가 동기화되어 스레드로부터 안전하게 보호되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>이 속성은 파생 클래스에서 재정의하지 않으면 항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.Data.DataTable)">
      <summary>컬렉션에서 지정된 <see cref="T:System.Data.DataViewSetting" />에 있는 <see cref="T:System.Data.DataTable" /> 개체를 가져옵니다.</summary>
      <param name="table">찾을 <see cref="T:System.Data.DataTable" />입니다.</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.Int32)">
      <summary>인덱스로 지정된 <see cref="T:System.Data.DataViewSetting" />의 <see cref="T:System.Data.DataTable" /> 개체를 가져옵니다.</summary>
      <param name="index">찾을 <see cref="T:System.Data.DataTable" />의 인덱스(0부터 시작)입니다.</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.Item(System.String)">
      <summary>이름으로 지정된 <see cref="T:System.Data.DataViewSetting" />의 <see cref="T:System.Data.DataTable" />을 가져옵니다.</summary>
      <param name="tableName">찾을 <see cref="T:System.Data.DataTable" />의 이름입니다.</param>
      <returns>
        <see cref="T:System.Data.DataViewSetting" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.DataViewSettingCollection.SyncRoot">
      <summary>
        <see cref="T:System.Data.DataViewSettingCollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataViewSettingCollection" />에 대한 액세스를 동기화하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="T:System.Data.DBConcurrencyException">
      <summary>영향을 받는 행의 수가 0인 경우 삽입, 업데이트 또는 삭제 작업 동안 <see cref="T:System.Data.Common.DataAdapter" />에서 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor">
      <summary>
        <see cref="T:System.Data.DBConcurrencyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.DBConcurrencyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 자세히 설명하는 텍스트 문자열입니다.</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.DBConcurrencyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 자세히 설명하는 텍스트 문자열입니다.</param>
      <param name="inner">내부 예외에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.#ctor(System.String,System.Exception,System.Data.DataRow[])">
      <summary>
        <see cref="T:System.Data.DBConcurrencyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">이 예외의 원인을 설명하는 오류 메시지입니다.</param>
      <param name="inner">현재 예외를 발생시킨 예외이거나 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
      <param name="dataRows">업데이트에 실패하여 이 예외를 생성한 <see cref="T:System.Data.DataRow" /> 개체가 들어 있는 배열입니다.</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[])">
      <summary>업데이트에 실패하여 이 예외를 생성한 <see cref="T:System.Data.DataRow" /> 개체를 지정된 <see cref="T:System.Data.DataRow" /> 개체 배열에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Data.DataRow" /> 개체를 복사할 대상인 <see cref="T:System.Data.DataRow" /> 개체의 1차원 배열입니다.</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.CopyToRows(System.Data.DataRow[],System.Int32)">
      <summary>업데이트에 실패하여 이 예외를 생성한 <see cref="T:System.Data.DataRow" /> 개체를 지정된 <see cref="T:System.Data.DataRow" /> 개체 배열의 지정된 대상 배열 인덱스에서 시작하는 위치에 복사합니다.</summary>
      <param name="array">
        <see cref="T:System.Data.DataRow" /> 개체를 복사할 대상인 <see cref="T:System.Data.DataRow" /> 개체의 1차원 배열입니다.</param>
      <param name="arrayIndex">복사를 시작할 대상 배열 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.DBConcurrencyException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 serialization 정보 개체를 <see cref="T:System.Data.DBConcurrencyException" />을 serialize하는 데 필요한 데이터로 채웁니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" />과 연결된 serialize된 개체가 들어 있는 <see cref="T:System.Data.DBConcurrencyException" />입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" />과 연결된 serialize된 스트림의 소스와 대상이 들어 있는 <see cref="T:System.Data.DBConcurrencyException" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" />매개 변수가 null 참조(Visual Basic에서는 <see langword="Nothing" />)인 경우</exception>
    </member>
    <member name="P:System.Data.DBConcurrencyException.Row">
      <summary>
        <see cref="T:System.Data.DataRow" />을 생성한 <see cref="T:System.Data.DBConcurrencyException" />의 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataRow" />의 값입니다.</returns>
    </member>
    <member name="P:System.Data.DBConcurrencyException.RowCount">
      <summary>업데이트에 실패하여 이 예외를 생성한 행의 수를 가져옵니다.</summary>
      <returns>업데이트에 실패한 행의 수가 들어 있는 정수입니다.</returns>
    </member>
    <member name="T:System.Data.DbType">
      <summary>.NET Framework 데이터 공급자의 필드, 속성 또는 <see langword="Parameter" /> 개체의 데이터 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.DbType.AnsiString">
      <summary>범위가 1문자에서 8,000문자까지인 비유니코드 문자의 가변 길이 스트림입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.AnsiStringFixedLength">
      <summary>유니코드 문자가 아닌 고정 길이 스트림입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Binary">
      <summary>범위가 1바이트에서 8,000바이트까지인 이진 데이터의 가변 길이 스트림입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Boolean">
      <summary>
        <see langword="true" /> 또는 <see langword="false" />의 부울 값을 나타내는 단순 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Byte">
      <summary>0에서 255 사이의 값을 갖는 8비트 부호 없는 정수입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Currency">
      <summary>정확성이 통화 단위의 10000분의 1이고 범위가 -2 63(또는 -922,337,203,685,477.5808)에서 2 63 -1(또는 +922,337,203,685,477.5807)까지인 통화 값입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Date">
      <summary>날짜 값을 나타내는 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.DateTime">
      <summary>날짜 및 시간 값을 나타내는 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.DateTime2">
      <summary>날짜 및 시간 데이터입니다. 날짜 값 범위는 서기 1년 1월 1일에서 서기 9999년 12월 31일 사이입니다. Time 값 범위는 00:00:00부터 23:59:59.9999999까지이며 정확도는 100나노초입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.DateTimeOffset">
      <summary>표준 시간대를 고려한 날짜 및 시간 데이터입니다. 날짜 값 범위는 서기 1년 1월 1일에서 서기 9999년 12월 31일 사이입니다. Time 값 범위는 00:00:00부터 23:59:59.9999999까지이며 정확도는 100나노초입니다. 표준 시간대 값의 범위는 -14:00에서 +14:00 사이입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Decimal">
      <summary>1.0 x 10 -28부터 약 7.9 x 10 28까지 28~29개의 유효 자릿수를 가진 값을 나타내는 단순 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Double">
      <summary>약 5.0 x 10 -324부터 1.7 x 10 308까지 15~16자리의 정밀도를 가진 값을 나타내는 부동 소수점 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Guid">
      <summary>GUID(Globally Unique IDentifier)입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Int16">
      <summary>-32768과 32767 사이의 값을 가진 부호 있는 16비트 정수를 나타내는 정수 계열 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Int32">
      <summary>-2147483648과 2147483647 사이의 값을 가진 부호 있는 32비트 정수를 나타내는 정수 계열 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Int64">
      <summary>-9223372036854775808과 9223372036854775807 사이의 값을 가진 부호 있는 64비트 정수를 나타내는 정수 계열 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Object">
      <summary>다른 <see langword="DbType" /> 값에 의해 명시적으로 나타나지 않은 참조 또는 값 형식을 나타내는 일반 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.SByte">
      <summary>-128과 127 사이의 값을 가진 부호 있는 8비트 정수를 나타내는 정수 계열 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Single">
      <summary>대략 1.5 x 10 -45부터 3.4 x 10 38까지 7자리의 정밀도를 가진 값을 나타내는 부동 소수점 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.String">
      <summary>유니코드 문자열을 나타내는 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.StringFixedLength">
      <summary>유니코드 문자의 고정 길이 문자열입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Time">
      <summary>SQL Server <see langword="DateTime" /> 값을 나타내는 형식입니다. SQL Server <see langword="time" /> 값을 사용하려면 <see cref="F:System.Data.SqlDbType.Time" />을 사용합니다.</summary>
    </member>
    <member name="F:System.Data.DbType.UInt16">
      <summary>0과 65535 사이의 값을 가진 부호 없는 16비트 정수를 나타내는 정수 계열 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.UInt32">
      <summary>0과 4294967295 사이의 값을 가진 부호 없는 32비트 정수를 나타내는 정수 계열 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.UInt64">
      <summary>0과 18446744073709551615 사이의 값을 가진 부호 없는 64비트 정수를 나타내는 정수 계열 형식입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.VarNumeric">
      <summary>가변 길이 숫자 값입니다.</summary>
    </member>
    <member name="F:System.Data.DbType.Xml">
      <summary>XML 문서나 단편의 구문 분석된 표현입니다.</summary>
    </member>
    <member name="T:System.Data.DeletedRowInaccessibleException">
      <summary>삭제된 <see cref="T:System.Data.DataRow" />에서 작업을 시도할 때 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor">
      <summary>
        <see cref="T:System.Data.DeletedRowInaccessibleException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 정보를 사용하여 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화 또는 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스 및 대상에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.DeletedRowInaccessibleException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Data.DeletedRowInaccessibleException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외를 발생시킨 예외이거나 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
    </member>
    <member name="T:System.Data.DuplicateNameException">
      <summary>
        <see cref="T:System.Data.DataSet" /> 관련 개체에서 추가 작업을 수행하는 동안 중복된 데이터베이스 개체 이름을 발견할 경우 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor">
      <summary>
        <see cref="T:System.Data.DuplicateNameException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 정보를 사용하여 <see cref="T:System.Data.DuplicateNameException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화 또는 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스 및 대상에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.DuplicateNameException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.DuplicateNameException.#ctor(System.String,System.Exception)">
      <summary>지정된 문자열과 예외를 사용하여 <see cref="T:System.Data.DuplicateNameException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외를 발생시킨 예외이거나 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
    </member>
    <member name="T:System.Data.EnumerableRowCollection">
      <summary>LINQ to DataSet 쿼리에서 반환된 <see cref="T:System.Data.DataRow" /> 개체의 컬렉션을 나타냅니다. 이 API는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="M:System.Data.EnumerableRowCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="T:System.Data.DataRow" /> 개체의 컬렉션에 대한 열거자를 반환합니다. 이 API는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 개체의 컬렉션을 순회하는 데 사용할 수 있는 <see cref="T:System.Data.DataRow" />입니다.</returns>
    </member>
    <member name="T:System.Data.EnumerableRowCollection`1">
      <summary>쿼리에서 반환된 <see cref="T:System.Data.DataRow" /> 개체의 컬렉션을 나타냅니다.</summary>
      <typeparam name="TRow">소스 시퀀스의 개체 형식(일반적으로 <see cref="T:System.Data.DataRow" />)입니다.</typeparam>
    </member>
    <member name="M:System.Data.EnumerableRowCollection`1.GetEnumerator">
      <summary>포함된 행 개체의 컬렉션에 대한 열거자를 반환합니다.</summary>
      <returns>
        <paramref name="TRow" /> 개체의 컬렉션을 순회하는 데 사용할 수 있는 강력한 형식의 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>
        <see cref="T:System.Data.DataRow" /> 개체의 컬렉션에 대한 열거자를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IEnumerator" /> 개체의 컬렉션을 순회하는 데 사용할 수 있는 <see cref="T:System.Data.DataRow" />입니다.</returns>
    </member>
    <member name="T:System.Data.EnumerableRowCollectionExtensions">
      <summary>데이터 행 컬렉션 클래스의 확장 메서드가 들어 있습니다.</summary>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Cast``1(System.Data.EnumerableRowCollection)">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" />의 요소를 지정된 형식으로 변환합니다.</summary>
      <param name="source">변환할 요소가 들어 있는 <see cref="T:System.Data.EnumerableRowCollection" />입니다.</param>
      <typeparam name="TResult">소스의 요소를 변환할 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidCastException">시퀀스의 요소를 <paramref name="TResult" /> 형식으로 캐스팅할 수 없는 경우</exception>
      <returns>지정된 형식으로 변환되는 소스 시퀀스의 각 요소가 들어 있는 <see cref="T:System.Data.EnumerableRowCollection" />입니다.</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" />의 행을 지정된 키에 따라 오름차순으로 정렬합니다.</summary>
      <param name="source">순서를 지정할 <see cref="T:System.Data.EnumerableRowCollection" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <returns>요소가 지정된 키에 따라 정렬된 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderBy``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" />의 행을 지정된 키 및 비교자에 따라 오름차순으로 정렬합니다.</summary>
      <param name="source">순서를 지정할 <see cref="T:System.Data.EnumerableRowCollection" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <returns>요소가 지정된 키 및 비교자에 따라 정렬된 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" />의 행을 지정된 키에 따라 내림차순으로 정렬합니다.</summary>
      <param name="source">순서를 지정할 <see cref="T:System.Data.EnumerableRowCollection" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <returns>요소가 지정된 키에 따라 정렬된 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.OrderByDescending``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" />의 행을 지정된 키 및 비교자에 따라 내림차순으로 정렬합니다.</summary>
      <param name="source">순서를 지정할 <see cref="T:System.Data.EnumerableRowCollection" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <returns>요소가 지정된 키 및 비교자에 따라 정렬된 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Select``2(System.Data.EnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection`1" />의 각 요소를 새 폼에 투영합니다.</summary>
      <param name="source">변환 함수를 호출할 <see cref="T:System.Data.EnumerableRowCollection`1" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <typeparam name="S">
        <paramref name="TRow" />를 변환할 대상 형식입니다.</typeparam>
      <returns>해당 요소가 <paramref name="source" />의 각 요소에 대해 변형 함수를 호출한 결과인 <see cref="T:System.Data.EnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" />의 행을 지정된 키에 따라 오름차순으로 두 번째로 정렬합니다.</summary>
      <param name="source">순서를 지정할 <see cref="T:System.Data.EnumerableRowCollection" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <returns>요소가 지정된 키에 따라 정렬된 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenBy``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" />의 행을 지정된 키 및 비교자에 따라 오름차순으로 두 번째로 정렬합니다.</summary>
      <param name="source">순서를 지정할 <see cref="T:System.Data.EnumerableRowCollection" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <returns>요소가 지정된 키 및 비교자에 따라 정렬된 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" />의 행을 지정된 키에 따라 내림차순으로 두 번째로 정렬합니다.</summary>
      <param name="source">순서를 지정할 <see cref="T:System.Data.EnumerableRowCollection" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <returns>요소가 지정된 키에 따라 정렬된 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.ThenByDescending``2(System.Data.OrderedEnumerableRowCollection{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
        <see cref="T:System.Data.EnumerableRowCollection" />의 행을 지정된 키 및 비교자에 따라 내림차순으로 두 번째로 정렬합니다.</summary>
      <param name="source">순서를 지정할 <see cref="T:System.Data.EnumerableRowCollection" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <returns>요소가 지정된 키 및 비교자에 따라 정렬된 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.EnumerableRowCollectionExtensions.Where``1(System.Data.EnumerableRowCollection{``0},System.Func{``0,System.Boolean})">
      <summary>지정된 조건자에 따라 행 시퀀스를 필터링합니다.</summary>
      <param name="source">필터링할 <see cref="T:System.Data.EnumerableRowCollection" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <returns>입력 시퀀스에서 조건에 맞는 행이 들어 있는 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="T:System.Data.EvaluateException">
      <summary>
        <see cref="P:System.Data.DataColumn.Expression" />의 <see cref="T:System.Data.DataColumn" /> 속성을 실행할 수 없을 때 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor">
      <summary>
        <see cref="T:System.Data.EvaluateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.EvaluateException" />와 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 사용하여 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화하거나 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스와 대상입니다.</param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.EvaluateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.EvaluateException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Data.EvaluateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외를 발생시킨 예외이거나 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
    </member>
    <member name="T:System.Data.FillErrorEventArgs">
      <summary>
        <see cref="E:System.Data.Common.DataAdapter.FillError" />의 <see cref="T:System.Data.Common.DbDataAdapter" /> 이벤트에 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.FillErrorEventArgs.#ctor(System.Data.DataTable,System.Object[])">
      <summary>
        <see cref="T:System.Data.FillErrorEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataTable">업데이트하고 있는 <see cref="T:System.Data.DataTable" />입니다.</param>
      <param name="values">업데이트하고 있는 행의 값입니다.</param>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Continue">
      <summary>오류가 발생해도 채우기 작업을 계속할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>채우기 작업을 계속해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.DataTable">
      <summary>오류 발생 시 업데이트하고 있는 <see cref="T:System.Data.DataTable" />을 가져옵니다.</summary>
      <returns>업데이트하고 있는 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Errors">
      <summary>처리하고 있는 오류를 가져옵니다.</summary>
      <returns>처리하고 있는 오류입니다.</returns>
    </member>
    <member name="P:System.Data.FillErrorEventArgs.Values">
      <summary>오류 발생 시 업데이트하고 있는 행의 값을 가져옵니다.</summary>
      <returns>업데이트하고 있는 행의 값입니다.</returns>
    </member>
    <member name="T:System.Data.FillErrorEventHandler">
      <summary>
        <see cref="E:System.Data.Common.DataAdapter.FillError" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.FillErrorEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Data.ForeignKeyConstraint">
      <summary>값 또는 행이 삭제되거나 업데이트될 때 기본 키/외래 키 관계에서 열 집합에 적용되는 동작 제한을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn,System.Data.DataColumn)">
      <summary>지정된 부모 및 자식 <see cref="T:System.Data.ForeignKeyConstraint" /> 개체를 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parentColumn">제약 조건의 부모 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <param name="childColumn">제약 조건의 자식 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">두 열 중 하나 이상이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.InvalidConstraintException">열의 데이터 형식이 다른 경우  
  
-또는- 
테이블이 동일한 <see cref="T:System.Data.DataSet" />에 속하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>부모와 자식 <see cref="T:System.Data.ForeignKeyConstraint" /> 개체의 지정된 배열을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parentColumns">제약 조건에 있는 부모 <see cref="T:System.Data.DataColumn" />의 배열입니다.</param>
      <param name="childColumns">제약 조건에 있는 자식 <see cref="T:System.Data.DataColumn" />의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">두 열 중 하나 이상이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.InvalidConstraintException">열의 데이터 형식이 다른 경우  
  
-또는- 
테이블이 동일한 <see cref="T:System.Data.DataSet" />에 속하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn,System.Data.DataColumn)">
      <summary>지정된 이름, 부모 및 자식 <see cref="T:System.Data.ForeignKeyConstraint" /> 개체를 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="constraintName">제약 조건의 이름입니다.</param>
      <param name="parentColumn">제약 조건의 부모 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <param name="childColumn">제약 조건의 자식 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">두 열 중 하나 이상이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.InvalidConstraintException">열의 데이터 형식이 다른 경우  
  
-또는- 
테이블이 동일한 <see cref="T:System.Data.DataSet" />에 속하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.Data.DataColumn[],System.Data.DataColumn[])">
      <summary>지정된 이름, 부모와 자식 <see cref="T:System.Data.ForeignKeyConstraint" /> 개체의 배열을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="constraintName">
        <see cref="T:System.Data.ForeignKeyConstraint" />의 이름입니다. <see langword="null" /> 또는 빈 문자열이면 제약 조건의 컬렉션에 추가될 때 기본 이름이 지정됩니다.</param>
      <param name="parentColumns">제약 조건에 있는 부모 <see cref="T:System.Data.DataColumn" />의 배열입니다.</param>
      <param name="childColumns">제약 조건에 있는 자식 <see cref="T:System.Data.DataColumn" />의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">두 열 중 하나 이상이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.InvalidConstraintException">열의 데이터 형식이 다른 경우  
  
-또는- 
테이블이 동일한 <see cref="T:System.Data.DataSet" />에 속하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)">
      <summary>이 생성자는 Visual Studio 환경에서 디자인 타임 지원을 위해 제공됩니다. 이 생성자를 사용하여 만든 <see cref="T:System.Data.ForeignKeyConstraint" /> 개체는 <see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" />를 통해 컬렉션에 추가해야 합니다. 메서드가 호출될 때, 지정된 이름을 가진 테이블과 열이 있어야 합니다. 이 생성자를 호출하기 전에 <see cref="M:System.Data.DataTable.BeginInit" />이 호출된 경우, 지정된 이름을 가진 테이블과 열이 <see cref="M:System.Data.DataTable.EndInit" />이 호출될 때 있어야 합니다.</summary>
      <param name="constraintName">제약 조건의 이름입니다.</param>
      <param name="parentTableName">제약 조건에서 부모 <see cref="T:System.Data.DataTable" /> 개체를 포함하는 부모 <see cref="T:System.Data.DataColumn" />의 이름입니다.</param>
      <param name="parentTableNamespace">
        <see cref="P:System.Data.DataTable.Namespace" />의 이름입니다.</param>
      <param name="parentColumnNames">제약 조건에 있는 부모 <see cref="T:System.Data.DataColumn" /> 개체의 이름 배열입니다.</param>
      <param name="childColumnNames">제약 조건에 있는 자식 <see cref="T:System.Data.DataColumn" /> 개체의 이름 배열입니다.</param>
      <param name="acceptRejectRule">
        <see cref="T:System.Data.AcceptRejectRule" /> 값 중 하나입니다. 가능한 값은 <see langword="None" />, <see langword="Cascade" /> 및 <see langword="Default" />입니다.</param>
      <param name="deleteRule">행이 삭제될 때 사용할 <see cref="T:System.Data.Rule" /> 값 중 하나입니다. 기본값은 <see langword="Cascade" />입니다. 가능한 값은 <see langword="None" />, <see langword="Cascade" />, <see langword="SetNull" />, <see langword="SetDefault" /> 및 <see langword="Default" />입니다.</param>
      <param name="updateRule">행이 업데이트될 때 사용할 <see cref="T:System.Data.Rule" /> 값 중 하나입니다. 기본값은 <see langword="Cascade" />입니다. 가능한 값은 <see langword="None" />, <see langword="Cascade" />, <see langword="SetNull" />, <see langword="SetDefault" /> 및 <see langword="Default" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">두 열 중 하나 이상이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.InvalidConstraintException">열의 데이터 형식이 다른 경우  
  
-또는- 
테이블이 동일한 <see cref="T:System.Data.DataSet" />에 속하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.#ctor(System.String,System.String,System.String[],System.String[],System.Data.AcceptRejectRule,System.Data.Rule,System.Data.Rule)">
      <summary>이 생성자는 Visual Studio 환경에서 디자인 타임 지원을 위해 제공됩니다. 이 생성자를 사용하여 만든 <see cref="T:System.Data.ForeignKeyConstraint" /> 개체는 <see cref="M:System.Data.ConstraintCollection.AddRange(System.Data.Constraint[])" />를 통해 컬렉션에 추가해야 합니다. 메서드가 호출될 때, 지정된 이름을 가진 테이블과 열이 있어야 합니다. 이 생성자를 호출하기 전에 <see cref="M:System.Data.DataTable.BeginInit" />이 호출된 경우, 지정된 이름을 가진 테이블과 열이 <see cref="M:System.Data.DataTable.EndInit" />이 호출될 때 있어야 합니다.</summary>
      <param name="constraintName">제약 조건의 이름입니다.</param>
      <param name="parentTableName">제약 조건에서 부모 <see cref="T:System.Data.DataTable" /> 개체를 포함하는 부모 <see cref="T:System.Data.DataColumn" />의 이름입니다.</param>
      <param name="parentColumnNames">제약 조건에 있는 부모 <see cref="T:System.Data.DataColumn" /> 개체의 이름 배열입니다.</param>
      <param name="childColumnNames">제약 조건에 있는 자식 <see cref="T:System.Data.DataColumn" /> 개체의 이름 배열입니다.</param>
      <param name="acceptRejectRule">
        <see cref="T:System.Data.AcceptRejectRule" /> 값 중 하나입니다. 가능한 값은 <see langword="None" />, <see langword="Cascade" /> 및 <see langword="Default" />입니다.</param>
      <param name="deleteRule">행이 삭제될 때 사용할 <see cref="T:System.Data.Rule" /> 값 중 하나입니다. 기본값은 <see langword="Cascade" />입니다. 가능한 값은 <see langword="None" />, <see langword="Cascade" />, <see langword="SetNull" />, <see langword="SetDefault" /> 및 <see langword="Default" />입니다.</param>
      <param name="updateRule">행이 업데이트될 때 사용할 <see cref="T:System.Data.Rule" /> 값 중 하나입니다. 기본값은 <see langword="Cascade" />입니다. 가능한 값은 <see langword="None" />, <see langword="Cascade" />, <see langword="SetNull" />, <see langword="SetDefault" /> 및 <see langword="Default" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">두 열 중 하나 이상이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.Data.InvalidConstraintException">열의 데이터 형식이 다른 경우  
  
-또는- 
테이블이 동일한 <see cref="T:System.Data.DataSet" />에 속하지 않는 경우</exception>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.Equals(System.Object)">
      <summary>현재 <see cref="T:System.Data.ForeignKeyConstraint" />가 지정된 개체와 같은지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="key">이 <see cref="T:System.Data.ForeignKeyConstraint" />와 비교할 개체입니다. 동일한 열을 제한하는 두 개의 <see cref="T:System.Data.ForeignKeyConstraint" />는 동일합니다.</param>
      <returns>개체가 동일하면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.ForeignKeyConstraint.GetHashCode">
      <summary>
        <see cref="T:System.Data.ForeignKeyConstraint" /> 개체의 이 인스턴스의 해시 코드를 가져옵니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.AcceptRejectRule">
      <summary>
        <see cref="M:System.Data.DataTable.AcceptChanges" />가 호출될 때 이 제약 조건에서 발생하게 될 동작을 나타냅니다.</summary>
      <returns>
        <see cref="T:System.Data.AcceptRejectRule" /> 값 중 하나입니다. 가능한 값은 <see langword="None" />과 <see langword="Cascade" />입니다. 기본값은 <see langword="None" />입니다.</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.Columns">
      <summary>이 제약 조건의 자식 열을 가져옵니다.</summary>
      <returns>제약 조건의 자식 열인 <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.DeleteRule">
      <summary>행이 삭제될 때 이 제약 조건에 발생하는 동작을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.Rule" /> 값 중 하나입니다. 기본값은 <see langword="Cascade" />입니다.</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.RelatedColumns">
      <summary>이 제약 조건의 부모 열입니다.</summary>
      <returns>제약 조건의 부모 열인 <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.RelatedTable">
      <summary>이 제약 조건의 부모 테이블을 가져옵니다.</summary>
      <returns>이 제약 조건의 부모 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.Table">
      <summary>이 제약 조건의 자식 테이블을 가져옵니다.</summary>
      <returns>제약 조건의 자식 테이블인 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="P:System.Data.ForeignKeyConstraint.UpdateRule">
      <summary>행이 업데이트될 때 이 제약 조건에 발생하는 동작을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.Rule" /> 값 중 하나입니다. 기본값은 <see langword="Cascade" />입니다.</returns>
    </member>
    <member name="T:System.Data.IColumnMapping">
      <summary>데이터 소스 열을 <see cref="T:System.Data.DataSet" /> 열과 연결하며, .NET Framework 데이터 공급자들이 공통적으로 사용하는 <see cref="T:System.Data.Common.DataColumnMapping" /> 클래스에 의해 구현됩니다.</summary>
    </member>
    <member name="P:System.Data.IColumnMapping.DataSetColumn">
      <summary>
        <see cref="T:System.Data.DataSet" />에서 매핑할 열의 이름을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataSet" />에서 매핑할 열의 이름입니다. 이름은 대/소문자를 구분하지 않습니다.</returns>
    </member>
    <member name="P:System.Data.IColumnMapping.SourceColumn">
      <summary>데이터 소스에서 매핑할 열의 이름을 가져오거나 설정합니다. 이름은 대/소문자를 구분합니다.</summary>
      <returns>데이터 소스의 열 이름(대/소문자 구분)입니다.</returns>
    </member>
    <member name="T:System.Data.IColumnMappingCollection">
      <summary>DataColumnMapping 개체의 컬렉션을 포함하며, .NET Framework 데이터 공급자가 공통적으로 사용하는 <see cref="T:System.Data.Common.DataColumnMappingCollection" />에 의해 구현됩니다.</summary>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.Add(System.String,System.String)">
      <summary>소스 열과 <see cref="T:System.Data.DataSet" /> 열 이름을 사용하여 ColumnMapping 개체를 ColumnMapping 컬렉션에 추가합니다.</summary>
      <param name="sourceColumnName">소스 열의 이름(대/소문자 구분)입니다.</param>
      <param name="dataSetColumnName">
        <see cref="T:System.Data.DataSet" /> 열의 이름입니다.</param>
      <returns>컬렉션에 추가된 ColumnMapping 개체를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.Contains(System.String)">
      <summary>지정된 소스 열 이름을 가진 <see cref="T:System.Data.Common.DataColumnMappingCollection" /> 개체가 <see cref="T:System.Data.Common.DataColumnMapping" />에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="sourceColumnName">소스 열의 이름(대/소문자 구분)입니다.</param>
      <returns>지정된 소스 열 이름을 가진 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체가 있으면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.GetByDataSetColumn(System.String)">
      <summary>지정된 <see cref="T:System.Data.DataSet" /> 열 이름을 가진 ColumnMapping 개체를 가져옵니다.</summary>
      <param name="dataSetColumnName">컬렉션 내의 <see cref="T:System.Data.DataSet" /> 열 이름입니다.</param>
      <returns>지정된 <see langword="DataSet" /> 열 이름을 가진 ColumnMapping 개체를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.IndexOf(System.String)">
      <summary>지정된 소스 열 이름을 가진 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체의 위치를 가져옵니다. 이름은 대/소문자를 구분합니다.</summary>
      <param name="sourceColumnName">소스 열의 이름(대/소문자 구분)입니다.</param>
      <returns>지정된 소스 열 이름을 가진 <see langword="DataColumnMapping" /> 개체의 위치(0부터 시작)를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.IColumnMappingCollection.RemoveAt(System.String)">
      <summary>지정된 <see cref="T:System.Data.IColumnMapping" /> 이름을 사용하여 <see cref="P:System.Data.IColumnMapping.SourceColumn" /> 개체를 컬렉션에서 제거합니다.</summary>
      <param name="sourceColumnName">대/소문자를 구분하는 <see langword="SourceColumn" /> 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 <see langword="SourceColumn" /> 이름을 가진 <see cref="T:System.Data.Common.DataColumnMapping" /> 개체가 없는 경우</exception>
    </member>
    <member name="P:System.Data.IColumnMappingCollection.Item(System.String)">
      <summary>지정된 <see langword="SourceColumn" /> 이름을 가진 <see cref="T:System.Data.IColumnMapping" /> 개체를 가져오거나 설정합니다.</summary>
      <param name="index">찾을 <see langword="SourceColumn" /> 개체의 <see langword="IColumnMapping" /> 이름입니다.</param>
      <returns>지정된 <see langword="IColumnMapping" /> 이름을 가진 <see langword="SourceColumn" /> 개체입니다.</returns>
    </member>
    <member name="T:System.Data.IDataAdapter">
      <summary>개체가 DataAdapter를 구현하도록 하며, <see cref="T:System.Data.DataSet" />을 채우거나 업데이트하고 데이터 소스를 업데이트하는 데 사용되는 매핑 동작 관련 속성 및 메서드 집합을 나타냅니다.  
  
 <see cref="T:System.Data.IDbDataAdapter" /> 인스턴스는 텍스트 명령(예: Transact-SQL)을 사용하는 관계형 데이터베이스 또는 그와 유사한 데이터 소스용이며, <see cref="T:System.Data.IDataAdapter" /> 인스턴스는 임의 형식의 데이터 소스를 사용할 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.IDataAdapter.Fill(System.Data.DataSet)">
      <summary>
        <see cref="T:System.Data.DataSet" /> 이름을 사용하여 데이터 소스의 행과 일치하도록 <see cref="T:System.Data.DataSet" />의 행을 추가하거나 업데이트하고 "Table"이라는 이름의 <see cref="T:System.Data.DataTable" />을 만듭니다.</summary>
      <param name="dataSet">레코드와 스키마(필요한 경우)로 채울 <see cref="T:System.Data.DataSet" />입니다.</param>
      <returns>
        <see cref="T:System.Data.DataSet" />에 성공적으로 추가했거나 새로 고친 행의 수를 반환합니다. 여기에는 행을 반환하지 않는 문의 영향을 받는 행은 포함되지 않습니다.</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)">
      <summary>지정된 <see cref="T:System.Data.DataSet" />에 "Table"이라는 <see cref="T:System.Data.DataTable" />을 추가하고 지정된 <see cref="T:System.Data.SchemaType" />에 따라 데이터 원본의 스키마와 일치하도록 스키마를 구성합니다.</summary>
      <param name="dataSet">데이터 원본의 스키마로 채울 <see cref="T:System.Data.DataSet" />입니다.</param>
      <param name="schemaType">
        <see cref="T:System.Data.SchemaType" /> 값 중 하나입니다.</param>
      <returns>데이터 소스에서 반환된 스키마 정보가 들어 있는 <see cref="T:System.Data.DataTable" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.GetFillParameters">
      <summary>SQL SELECT 문을 실행할 때 사용자가 설정한 매개 변수를 가져옵니다.</summary>
      <returns>사용자가 설정한 매개 변수를 포함하는 <see cref="T:System.Data.IDataParameter" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.Data.IDataAdapter.Update(System.Data.DataSet)">
      <summary>"Table"이라는 <see cref="T:System.Data.DataSet" />의 지정된 <see cref="T:System.Data.DataTable" />에서 삽입, 업데이트 또는 삭제된 각 행에 대해 각각 INSERT, UPDATE 또는 DELETE 문을 호출합니다.</summary>
      <param name="dataSet">데이터 소스를 업데이트하는 데 사용된 <see cref="T:System.Data.DataSet" />입니다.</param>
      <exception cref="T:System.Data.DBConcurrencyException">INSERT, UPDATE 또는 DELETE 문을 실행한 결과 영향을 받은 레코드가 없는 경우</exception>
      <returns>
        <see cref="T:System.Data.DataSet" />에서 성공적으로 업데이트된 행의 수를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.IDataAdapter.MissingMappingAction">
      <summary>매핑되지 않은 소스 테이블과 열 중에서 필터링하거나 오류를 발생시키기 위해 소스 이름과 함께 전달할 항목을 나타내거나 지정합니다.</summary>
      <exception cref="T:System.ArgumentException">설정된 값이 <see cref="T:System.Data.MissingMappingAction" /> 값 중 하나가 아닌 경우</exception>
      <returns>
        <see cref="T:System.Data.MissingMappingAction" /> 값 중 하나입니다. 기본값은 <see langword="Passthrough" />입니다.</returns>
    </member>
    <member name="P:System.Data.IDataAdapter.MissingSchemaAction">
      <summary>누락된 소스 테이블, 열 및 그 관계를 데이터 세트 스키마에 추가할지 무시할지 또는 오류를 발생시킬지를 나타내거나 지정합니다.</summary>
      <exception cref="T:System.ArgumentException">설정된 값이 <see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나가 아닌 경우</exception>
      <returns>
        <see cref="T:System.Data.MissingSchemaAction" /> 값 중 하나입니다. 기본값은 <see langword="Add" />입니다.</returns>
    </member>
    <member name="P:System.Data.IDataAdapter.TableMappings">
      <summary>원본 테이블이 데이터 세트 테이블에 매핑되는 방식을 나타냅니다.</summary>
      <returns>반환된 레코드와 <see cref="T:System.Data.DataSet" /> 간의 마스터 매핑을 제공하는 컬렉션입니다. 기본값은 빈 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Data.IDataParameter">
      <summary>Command 개체에 대한 매개 변수 및 선택적으로 <see cref="T:System.Data.DataSet" /> 열에 대한 매핑을 나타내며, 데이터 소스에 액세스하는 .NET Framework 데이터 공급자에 의해 구현됩니다.</summary>
    </member>
    <member name="P:System.Data.IDataParameter.DbType">
      <summary>매개 변수의 <see cref="T:System.Data.DbType" />을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">속성이 유효한 <see cref="T:System.Data.DbType" />으로 설정되지 않은 경우</exception>
      <returns>
        <see cref="T:System.Data.DbType" /> 값 중 하나입니다. 기본값은 <see cref="F:System.Data.DbType.String" />입니다.</returns>
    </member>
    <member name="P:System.Data.IDataParameter.Direction">
      <summary>매개 변수가 입력 전용, 출력 전용, 양방향 또는 저장 프로시저 반환 값 매개 변수인지 나타내는 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">속성에 유효한 <see cref="T:System.Data.ParameterDirection" /> 값 중 하나를 설정하지 않은 경우</exception>
      <returns>
        <see cref="T:System.Data.ParameterDirection" /> 값 중 하나입니다. 기본값은 <see langword="Input" />입니다.</returns>
    </member>
    <member name="P:System.Data.IDataParameter.IsNullable">
      <summary>매개 변수에 null 값이 허용되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>null 값이 허용되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.IDataParameter.ParameterName">
      <summary>
        <see cref="T:System.Data.IDataParameter" />의 이름을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDataParameter" />의 이름입니다. 기본값은 빈 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.IDataParameter.SourceColumn">
      <summary>
        <see cref="T:System.Data.DataSet" />으로 매핑되고 <see cref="P:System.Data.IDataParameter.Value" />를 로드하거나 반환하는 데 사용되는 소스 열의 이름을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataSet" />으로 매핑되는 소스 열의 이름입니다. 기본값은 빈 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.IDataParameter.SourceVersion">
      <summary>
        <see cref="P:System.Data.IDataParameter.Value" />를 로드할 때 사용할 <see cref="T:System.Data.DataRowVersion" />을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">속성이 <see cref="T:System.Data.DataRowVersion" /> 값 중 하나로 설정되지 않은 경우</exception>
      <returns>
        <see cref="T:System.Data.DataRowVersion" /> 값 중 하나입니다. 기본값은 <see langword="Current" />입니다.</returns>
    </member>
    <member name="P:System.Data.IDataParameter.Value">
      <summary>매개 변수의 값을 가져오거나 설정합니다.</summary>
      <returns>매개 변수의 값인 <see cref="T:System.Object" />입니다. 기본값은 null입니다.</returns>
    </member>
    <member name="T:System.Data.IDataParameterCollection">
      <summary>Command 개체에 대한 모든 매개 변수 및 <see cref="T:System.Data.DataSet" /> 열에 대한 매핑을 수집하며 데이터 소스에 액세스하는 .NET Framework 데이터 공급자에 의해 구현됩니다.</summary>
    </member>
    <member name="M:System.Data.IDataParameterCollection.Contains(System.String)">
      <summary>컬렉션의 매개 변수가 지정된 이름을 갖는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <returns>매개 변수가 컬렉션에 포함되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.IDataParameterCollection.IndexOf(System.String)">
      <summary>컬렉션 내의 <see cref="T:System.Data.IDataParameter" /> 위치를 가져옵니다.</summary>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <returns>컬렉션 내의 0부터 시작하는 <see cref="T:System.Data.IDataParameter" /> 위치입니다.</returns>
    </member>
    <member name="M:System.Data.IDataParameterCollection.RemoveAt(System.String)">
      <summary>컬렉션에서 <see cref="T:System.Data.IDataParameter" />을 제거합니다.</summary>
      <param name="parameterName">매개 변수의 이름입니다.</param>
    </member>
    <member name="P:System.Data.IDataParameterCollection.Item(System.String)">
      <summary>지정한 인덱스에 있는 매개 변수를 가져오거나 설정합니다.</summary>
      <param name="parameterName">검색할 매개 변수의 이름입니다.</param>
      <returns>지정한 인덱스에 있는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.Data.IDataReader">
      <summary>데이터 소스에서 명령을 실행하여 얻은 결과 집합의 하나 이상의 앞으로만 이동 가능한 스트림을 읽는 방법을 제공하며 관계형 데이터베이스에 액세스하는 .NET Framework 데이터 공급자에 의해 구현됩니다.</summary>
    </member>
    <member name="M:System.Data.IDataReader.Close">
      <summary>
        <see cref="T:System.Data.IDataReader" /> 개체를 닫습니다.</summary>
    </member>
    <member name="M:System.Data.IDataReader.GetSchemaTable">
      <summary>
        <see cref="T:System.Data.DataTable" />의 열 메타데이터를 정의하는 <see cref="T:System.Data.IDataReader" />을 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.IDataReader" />가 닫혔습니다.</exception>
      <returns>열 메타데이터를 정의하는 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="M:System.Data.IDataReader.NextResult">
      <summary>일괄 처리 SQL 문의 결과를 읽을 때 데이터 판독기에서 다음 결과로 진행하도록 합니다.</summary>
      <returns>행이 더 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.IDataReader.Read">
      <summary>
        <see cref="T:System.Data.IDataReader" />를 다음 레코드로 이동합니다.</summary>
      <returns>행이 더 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.IDataReader.Depth">
      <summary>현재 행의 중첩 수준을 나타내는 값을 가져옵니다.</summary>
      <returns>중첩 수준입니다.</returns>
    </member>
    <member name="P:System.Data.IDataReader.IsClosed">
      <summary>데이터 판독기가 닫혀 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>데이터 판독기가 닫혀 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.IDataReader.RecordsAffected">
      <summary>SQL 문을 실행하여 변경, 삽입 또는 삭제된 행 수를 가져옵니다.</summary>
      <returns>변경, 삽입 또는 삭제된 행 수입니다. 영향을 받은 행이 없거나 문이 실패하면 0이고, SELECT 문의 경우는 -1입니다.</returns>
    </member>
    <member name="T:System.Data.IDataRecord">
      <summary>
        <see langword="DataReader" />의 각 행 내 열 값에 액세스할 수 있도록 하고 관계형 데이터베이스에 액세스하는 .NET Framework 데이터 공급자에 의해 구현됩니다.</summary>
    </member>
    <member name="M:System.Data.IDataRecord.GetBoolean(System.Int32)">
      <summary>지정된 열의 값에 해당하는 Boolean 값을 가져옵니다.</summary>
      <param name="i">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>열의 값입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetByte(System.Int32)">
      <summary>지정된 열의 부호 없는 8비트 정수 값을 가져옵니다.</summary>
      <param name="i">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 열의 부호 없는 8비트 정수 값입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>지정된 버퍼 오프셋에서 시작하여 지정된 열 오프셋의 바이트 스트림을 배열로 버퍼에 읽어옵니다.</summary>
      <param name="i">열 서수(0부터 시작)입니다.</param>
      <param name="fieldOffset">읽기 작업을 시작할 필드 내의 인덱스입니다.</param>
      <param name="buffer">바이트 스트림을 읽을 버퍼입니다.</param>
      <param name="bufferoffset">읽기 작업을 시작할 <paramref name="buffer" />에 대한 인덱스입니다.</param>
      <param name="length">읽을 바이트 수입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>읽은 실제 바이트 수입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetChar(System.Int32)">
      <summary>지정된 열의 값에 해당하는 문자 값을 가져옵니다.</summary>
      <param name="i">열 서수(0부터 시작)입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 열의 값에 해당하는 문자 값입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>지정된 버퍼 오프셋에서 시작하여 지정된 열 오프셋의 문자 스트림을 배열로 버퍼에 읽어옵니다.</summary>
      <param name="i">열 서수(0부터 시작)입니다.</param>
      <param name="fieldoffset">읽기 작업을 시작할 행 내의 인덱스입니다.</param>
      <param name="buffer">바이트 스트림을 읽을 버퍼입니다.</param>
      <param name="bufferoffset">읽기 작업을 시작할 <paramref name="buffer" />에 대한 인덱스입니다.</param>
      <param name="length">읽을 바이트 수입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>읽은 실제 문자 수입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetData(System.Int32)">
      <summary>지정된 열 서수에 대해 <see cref="T:System.Data.IDataReader" />를 반환합니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 열 서수에 대한 <see cref="T:System.Data.IDataReader" />입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetDataTypeName(System.Int32)">
      <summary>지정된 필드에 대한 데이터 형식 정보를 가져옵니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 필드에 대한 데이터 형식 정보입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetDateTime(System.Int32)">
      <summary>지정된 필드의 날짜 및 시간 데이터 값을 가져옵니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 필드의 날짜 및 시간 데이터 값입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetDecimal(System.Int32)">
      <summary>지정된 필드의 고정 위치 숫자 값을 가져옵니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 필드의 고정 위치 숫자 값입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetDouble(System.Int32)">
      <summary>지정된 필드의 배정밀도 부동 소수점 숫자를 가져옵니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 필드의 배정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetFieldType(System.Int32)">
      <summary>
        <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />에서 반환되는 <see cref="T:System.Object" /> 형식에 해당하는 <see cref="T:System.Type" /> 정보를 가져옵니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>
        <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)" />에서 반환되는 <see cref="T:System.Object" /> 형식에 해당하는 <see cref="T:System.Type" /> 정보입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetFloat(System.Int32)">
      <summary>지정된 필드의 단정밀도 부동 소수점 숫자를 가져옵니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 필드의 단정밀도 부동 소수점 숫자입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetGuid(System.Int32)">
      <summary>지정된 필드의 GUID 값을 반환합니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 필드의 GUID 값입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt16(System.Int32)">
      <summary>지정된 필드의 부호 있는 16비트 정수 값을 가져옵니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 필드의 부호 있는 16비트 정수 값입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt32(System.Int32)">
      <summary>지정된 필드의 부호 있는 32비트 정수 값을 가져옵니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 필드의 부호 있는 32비트 정수 값입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetInt64(System.Int32)">
      <summary>지정된 필드의 부호 있는 64비트 정수 값을 가져옵니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 필드의 부호 있는 64비트 정수 값입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetName(System.Int32)">
      <summary>찾을 필드의 이름을 가져옵니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>필드의 이름이거나 반환할 값이 없는 경우 빈 문자열("")입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetOrdinal(System.String)">
      <summary>명명된 필드의 인덱스를 반환합니다.</summary>
      <param name="name">찾을 필드의 이름입니다.</param>
      <returns>명명된 필드의 인덱스입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetString(System.Int32)">
      <summary>지정된 필드의 문자열 값을 가져옵니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 필드의 문자열 값입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetValue(System.Int32)">
      <summary>지정된 필드의 값을 반환합니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>반환될 때 필드 값을 포함할 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.GetValues(System.Object[])">
      <summary>현재 레코드의 열 값으로 개체의 배열을 채웁니다.</summary>
      <param name="values">특성 필드를 복사할 <see cref="T:System.Object" />의 배열입니다.</param>
      <returns>배열에 포함된 <see cref="T:System.Object" /> 인스턴스의 수입니다.</returns>
    </member>
    <member name="M:System.Data.IDataRecord.IsDBNull(System.Int32)">
      <summary>지정된 필드가 null로 설정되었는지 여부를 반환합니다.</summary>
      <param name="i">찾을 필드의 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>지정된 필드가 null로 설정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.IDataRecord.FieldCount">
      <summary>현재 행의 열 수를 가져옵니다.</summary>
      <returns>올바른 레코드 집합에 배치되지 않으면 0이고, 배치되면 현재 레코드의 열 수입니다. 기본값은 -1입니다.</returns>
    </member>
    <member name="P:System.Data.IDataRecord.Item(System.Int32)">
      <summary>지정된 인덱스에 있는 열을 가져옵니다.</summary>
      <param name="i">가져올 열의 0부터 시작하는 인덱스입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">전달된 인덱스가 0부터 <see cref="P:System.Data.IDataRecord.FieldCount" />의 범위를 벗어난 경우</exception>
      <returns>
        <see cref="T:System.Object" />의 지정된 인덱스 위치에 있는 열입니다.</returns>
    </member>
    <member name="P:System.Data.IDataRecord.Item(System.String)">
      <summary>지정된 이름을 가진 열을 가져옵니다.</summary>
      <param name="name">찾을 열의 이름입니다.</param>
      <exception cref="T:System.IndexOutOfRangeException">지정된 이름의 열을 찾을 수 없는 경우</exception>
      <returns>
        <see cref="T:System.Object" />로 지정된 이름을 갖는 열입니다.</returns>
    </member>
    <member name="T:System.Data.IDbCommand">
      <summary>데이터 소스에 연결된 동안 실행되는 SQL 문을 나타내며 관계형 데이터베이스에 액세스하는 .NET Framework 데이터 공급자에 의해 구현됩니다.</summary>
    </member>
    <member name="M:System.Data.IDbCommand.Cancel">
      <summary>
        <see cref="T:System.Data.IDbCommand" /> 실행을 취소하려고 합니다.</summary>
    </member>
    <member name="M:System.Data.IDbCommand.CreateParameter">
      <summary>
        <see cref="T:System.Data.IDbDataParameter" /> 개체의 새 인스턴스를 만듭니다.</summary>
      <returns>
        <see langword="IDbDataParameter" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteNonQuery">
      <summary>.NET Framework 데이터 공급자의 <see langword="Connection" /> 개체에 대해 SQL 문을 실행하고 영향을 받는 행 수를 반환합니다.</summary>
      <exception cref="T:System.InvalidOperationException">연결이 존재하지 않습니다.  
  
 또는  
  
 연결이 열려 있지 않습니다.</exception>
      <returns>영향을 받은 행 수입니다.</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteReader">
      <summary>
        <see cref="P:System.Data.IDbCommand.Connection" />에 대해 <see cref="P:System.Data.IDbCommand.CommandText" />를 실행하고 <see cref="T:System.Data.IDataReader" />를 빌드합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>
        <see cref="P:System.Data.IDbCommand.Connection" />에 대해 <see cref="P:System.Data.IDbCommand.CommandText" />를 실행하고 <see cref="T:System.Data.CommandBehavior" /> 값 중 하나를 사용하여 <see cref="T:System.Data.IDataReader" />를 빌드합니다.</summary>
      <param name="behavior">
        <see cref="T:System.Data.CommandBehavior" /> 값 중 하나입니다.</param>
      <returns>
        <see cref="T:System.Data.IDataReader" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.IDbCommand.ExecuteScalar">
      <summary>쿼리를 실행하고 쿼리에서 반환된 결과 집합에서 첫 번째 행의 첫 번째 열을 반환합니다. 추가 열이나 행은 무시됩니다.</summary>
      <returns>결과 집합에 있는 첫째 행의 첫째 열입니다.</returns>
    </member>
    <member name="M:System.Data.IDbCommand.Prepare">
      <summary>데이터 소스에 대해 명령의 준비된(또는 컴파일된) 버전을 만듭니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Data.OleDb.OleDbCommand.Connection" />이 설정되지 않은 경우  
  
또는 
<see cref="P:System.Data.OleDb.OleDbCommand.Connection" />이 <see cref="M:System.Data.OleDb.OleDbConnection.Open" />이 아닌 경우</exception>
    </member>
    <member name="P:System.Data.IDbCommand.CommandText">
      <summary>데이터 소스에 대해 실행할 텍스트 명령을 가져오거나 설정합니다.</summary>
      <returns>실행할 텍스트 명령입니다. 기본값은 빈 문자열("")입니다.</returns>
    </member>
    <member name="P:System.Data.IDbCommand.CommandTimeout">
      <summary>명령 실행을 종료하고 오류를 생성하기 전 대기 시간(초 단위)을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">할당된 속성 값이 0보다 작은 경우</exception>
      <returns>명령이 실행될 때까지 대기하는 시간(초)입니다. 기본값은 30초입니다.</returns>
    </member>
    <member name="P:System.Data.IDbCommand.CommandType">
      <summary>
        <see cref="P:System.Data.IDbCommand.CommandText" /> 속성을 해석하는 방법을 지정하거나 나타냅니다.</summary>
      <returns>
        <see cref="T:System.Data.CommandType" /> 값 중 하나입니다. 기본값은 <see langword="Text" />입니다.</returns>
    </member>
    <member name="P:System.Data.IDbCommand.Connection">
      <summary>
        <see cref="T:System.Data.IDbCommand" />의 이 인스턴스에서 사용되는 <see cref="T:System.Data.IDbConnection" />을 가져오거나 설정합니다.</summary>
      <returns>데이터 원본에 대한 연결입니다.</returns>
    </member>
    <member name="P:System.Data.IDbCommand.Parameters">
      <summary>
        <see cref="T:System.Data.IDataParameterCollection" />를 가져옵니다.</summary>
      <returns>SQL 문 또는 저장 프로시저의 매개 변수</returns>
    </member>
    <member name="P:System.Data.IDbCommand.Transaction">
      <summary>.NET Framework 데이터 공급자의 <see langword="Command" /> 개체가 실행되는 트랜잭션을 가져오거나 설정합니다.</summary>
      <returns>.NET Framework 데이터 공급자의 <see langword="Command" /> 개체가 실행됩니다. 기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Data.IDbCommand.UpdatedRowSource">
      <summary>
        <see cref="T:System.Data.Common.DbDataAdapter" />의 <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)" /> 메서드에 의해 사용될 때 명령 결과가 <see cref="T:System.Data.DataRow" />에 적용되는 방법을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">입력한 값이 <see cref="T:System.Data.UpdateRowSource" /> 값 중 하나가 아닌 경우</exception>
      <returns>
        <see cref="T:System.Data.UpdateRowSource" /> 값 중 하나입니다. 명령이 자동으로 생성되지 않으면 기본값은 <see langword="Both" />입니다. 그러면 기본값은 <see langword="None" />입니다.</returns>
    </member>
    <member name="T:System.Data.IDbConnection">
      <summary>데이터 소스에 대한 열린 연결을 나타내며 관계형 데이터베이스에 액세스하는 .NET Framework 데이터 공급자에 의해 구현됩니다.</summary>
    </member>
    <member name="M:System.Data.IDbConnection.BeginTransaction">
      <summary>데이터베이스 트랜잭션을 시작합니다.</summary>
      <returns>새 트랜잭션을 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Data.IDbConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>지정된 <see cref="T:System.Data.IsolationLevel" /> 값을 사용하여 데이터베이스 트랜잭션을 시작합니다.</summary>
      <param name="il">
        <see cref="T:System.Data.IsolationLevel" /> 값 중 하나입니다.</param>
      <returns>새 트랜잭션을 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Data.IDbConnection.ChangeDatabase(System.String)">
      <summary>열려 있는 <see langword="Connection" /> 개체의 현재 데이터베이스를 변경합니다.</summary>
      <param name="databaseName">현재 데이터베이스 대신 사용할 데이터베이스의 이름입니다.</param>
    </member>
    <member name="M:System.Data.IDbConnection.Close">
      <summary>데이터베이스에 대한 연결을 닫습니다.</summary>
    </member>
    <member name="M:System.Data.IDbConnection.CreateCommand">
      <summary>연결과 관련된 Command 개체를 만들고 반환합니다.</summary>
      <returns>연결과 관련된 Command 개체입니다.</returns>
    </member>
    <member name="M:System.Data.IDbConnection.Open">
      <summary>공급자별 Connection 개체의 <see langword="ConnectionString" /> 속성으로 지정된 설정을 사용하여 데이터베이스 연결을 엽니다.</summary>
    </member>
    <member name="P:System.Data.IDbConnection.ConnectionString">
      <summary>데이터베이스를 여는 데 사용되는 문자열을 가져오거나 설정합니다.</summary>
      <returns>연결 설정이 포함된 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.IDbConnection.ConnectionTimeout">
      <summary>시도를 종료하고 오류를 생성하기 전에 연결하는 동안 대기할 시간(초 단위)을 가져옵니다.</summary>
      <returns>연결이 열리기 전까지 대기할 시간(초)입니다. 기본값은 15초입니다.</returns>
    </member>
    <member name="P:System.Data.IDbConnection.Database">
      <summary>현재 데이터베이스 이름이나 연결이 열린 후 사용할 데이터베이스의 이름을 가져옵니다.</summary>
      <returns>현재 데이터베이스 이름이나 연결이 열린 후 사용할 데이터베이스의 이름입니다. 기본값은 빈 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.IDbConnection.State">
      <summary>연결의 현재 상태를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 값 중 하나입니다.</returns>
    </member>
    <member name="T:System.Data.IDbDataAdapter">
      <summary>
        <see cref="T:System.Data.DataSet" />을 채우고 데이터 소스를 업데이트하는 데 사용되며 관계 데이터베이스에 액세스하는 .NET Framework 데이터 공급자에 의해 구현되는 명령 관련 속성 집합을 나타냅니다.</summary>
    </member>
    <member name="P:System.Data.IDbDataAdapter.DeleteCommand">
      <summary>데이터 집합에서 레코드를 삭제하기 위한 SQL 문을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />을 수행하는 동안 데이터 집합의 삭제된 행에 대한 데이터 소스에서 레코드를 삭제하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.InsertCommand">
      <summary>데이터 소스에 새 레코드를 삽입하는 데 사용되는 SQL 문을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />을 수행하는 동안 데이터 집합의 새 행에 대한 데이터 소스에 레코드를 삽입하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.SelectCommand">
      <summary>데이터 소스에서 레코드를 선택하는 데 사용되는 SQL 문을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />을 수행하는 동안 데이터 소스에서 데이터 집합에 배치할 레코드를 선택하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="P:System.Data.IDbDataAdapter.UpdateCommand">
      <summary>데이터 소스에서 레코드를 업데이트하는 데 사용되는 SQL 문을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.IDbCommand" />을 수행하는 동안 데이터 집합의 수정된 행에 대한 데이터 소스에서 레코드를 업데이트하는 데 사용되는 <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />입니다.</returns>
    </member>
    <member name="T:System.Data.IDbDataParameter">
      <summary>Visual Basic .NET 데이터 디자이너가 Command 개체에 대한 매개 변수 및 필요에 따라 <see cref="T:System.Data.DataSet" /> 열에 대한 매핑을 나타내는 데 사용됩니다.</summary>
    </member>
    <member name="P:System.Data.IDbDataParameter.Precision">
      <summary>숫자 매개 변수의 정밀도를 나타냅니다.</summary>
      <returns>데이터 공급자 Parameter 개체의 Value 속성을 나타내는 데 사용되는 최대 자릿수입니다. 기본값은 0이며 이는 데이터 공급자가 Value의 정밀도를 설정함을 나타냅니다.</returns>
    </member>
    <member name="P:System.Data.IDbDataParameter.Scale">
      <summary>숫자 매개 변수의 소수 자릿수를 나타냅니다.</summary>
      <returns>
        <see cref="P:System.Data.OleDb.OleDbParameter.Value" />가 확인되는 소수 자릿수입니다. 기본값은 0입니다.</returns>
    </member>
    <member name="P:System.Data.IDbDataParameter.Size">
      <summary>매개 변수의 크기입니다.</summary>
      <returns>열 내의 최대 데이터 크기(바이트)입니다. 기본값은 매개 변수 값에서 유추됩니다.</returns>
    </member>
    <member name="T:System.Data.IDbTransaction">
      <summary>데이터 소스에서 수행할 트랜잭션을 나타내며 관계형 데이터베이스에 액세스하는 .NET Framework 데이터 공급자에 의해 구현됩니다.</summary>
    </member>
    <member name="M:System.Data.IDbTransaction.Commit">
      <summary>데이터베이스 트랜잭션을 커밋합니다.</summary>
      <exception cref="T:System.Exception">트랜잭션을 커밋하는 동안 오류가 발생한 경우</exception>
      <exception cref="T:System.InvalidOperationException">트랜잭션이 이미 커밋 또는 롤백된 경우  
  
 또는  
  
 연결이 손상된 경우</exception>
    </member>
    <member name="M:System.Data.IDbTransaction.Rollback">
      <summary>보류 상태에서 트랜잭션을 롤백합니다.</summary>
      <exception cref="T:System.Exception">트랜잭션을 커밋하는 동안 오류가 발생한 경우</exception>
      <exception cref="T:System.InvalidOperationException">트랜잭션이 이미 커밋 또는 롤백된 경우  
  
 또는  
  
 연결이 손상된 경우</exception>
    </member>
    <member name="P:System.Data.IDbTransaction.Connection">
      <summary>트랜잭션과 연결할 Connection 개체를 지정합니다.</summary>
      <returns>트랜잭션과 연결할 Connection 개체입니다.</returns>
    </member>
    <member name="P:System.Data.IDbTransaction.IsolationLevel">
      <summary>이 트랜잭션에 대한 <see cref="T:System.Data.IsolationLevel" />을 지정합니다.</summary>
      <returns>이 트랜잭션에 대한 <see cref="T:System.Data.IsolationLevel" />입니다. 기본값은 <see langword="ReadCommitted" />입니다.</returns>
    </member>
    <member name="T:System.Data.InRowChangingEventException">
      <summary>
        <see cref="M:System.Data.DataRow.EndEdit" /> 이벤트에서 <see cref="E:System.Data.DataTable.RowChanging" /> 메서드를 호출할 때 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor">
      <summary>
        <see cref="T:System.Data.InRowChangingEventException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 정보를 사용하여 <see cref="T:System.Data.InRowChangingEventException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화 또는 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스 및 대상에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.InRowChangingEventException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.InRowChangingEventException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Data.InRowChangingEventException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외를 발생시킨 예외이거나 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
    </member>
    <member name="T:System.Data.InternalDataCollectionBase">
      <summary>컬렉션을 만드는 기본 기능을 제공합니다.</summary>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.#ctor">
      <summary>
        <see cref="T:System.Data.InternalDataCollectionBase" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.CopyTo(System.Array,System.Int32)">
      <summary>지정된 <see cref="T:System.Data.InternalDataCollectionBase" /> 인덱스에서 시작하여 현재 <see cref="T:System.Array" />의 모든 요소를 1차원 <see cref="T:System.Data.InternalDataCollectionBase" />에 복사합니다.</summary>
      <param name="ar">현재 <see cref="T:System.Array" /> 개체의 요소를 복사할 1차원 <see cref="T:System.Data.InternalDataCollectionBase" />입니다.</param>
      <param name="index">복사를 시작할 대상 <see cref="T:System.Array" /> 인덱스입니다.</param>
    </member>
    <member name="M:System.Data.InternalDataCollectionBase.GetEnumerator">
      <summary>컬렉션에 대한 <see cref="T:System.Collections.IEnumerator" />를 가져옵니다.</summary>
      <returns>컬렉션에 대한 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.Count">
      <summary>컬렉션에 있는 요소의 총수를 가져옵니다.</summary>
      <returns>컬렉션에 있는 요소의 총수입니다.</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.IsReadOnly">
      <summary>
        <see cref="T:System.Data.InternalDataCollectionBase" />이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.IsSynchronized">
      <summary>
        <see cref="T:System.Data.InternalDataCollectionBase" />이 동기화되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션이 동기화되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.List">
      <summary>컬렉션의 항목을 목록으로 가져옵니다.</summary>
      <returns>컬렉션이 들어 있는 <see cref="T:System.Collections.ArrayList" />입니다.</returns>
    </member>
    <member name="P:System.Data.InternalDataCollectionBase.SyncRoot">
      <summary>컬렉션을 동기화하는 데 사용할 수 있는 개체를 가져옵니다.</summary>
      <returns>컬렉션을 동기화하는 데 사용할 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.Data.InvalidConstraintException">
      <summary>관계를 잘못 만들거나 액세스하면 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor">
      <summary>
        <see cref="T:System.Data.InvalidConstraintException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 정보를 사용하여 <see cref="T:System.Data.InvalidConstraintException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화 또는 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스 및 대상에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.InvalidConstraintException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.InvalidConstraintException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Data.InvalidConstraintException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외를 발생시킨 예외이거나 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
    </member>
    <member name="T:System.Data.InvalidExpressionException">
      <summary>
        <see cref="T:System.Data.DataColumn" />에 잘못된 <see cref="P:System.Data.DataColumn.Expression" />이 들어 있는 <see cref="T:System.Data.DataColumnCollection" />을 추가할 때 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor">
      <summary>
        <see cref="T:System.Data.InvalidExpressionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.InvalidExpressionException" />와 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 사용하여 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화하거나 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스와 대상입니다.</param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.InvalidExpressionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.InvalidExpressionException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Data.InvalidExpressionException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외를 발생시킨 예외이거나 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
    </member>
    <member name="T:System.Data.IsolationLevel">
      <summary>연결에 대한 트랜잭션 잠금 동작을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Chaos">
      <summary>격리 수준이 높은 트랜잭션에서 보류 중인 변경은 덮어쓸 수 없습니다.</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.ReadCommitted">
      <summary>공유 잠금은 커밋되지 않은 읽기를 방지하기 위해 데이터를 읽는 동안 유지되지만 트랜잭션이 끝나기 전에 데이터가 변경되어 반복되지 않은 읽기나 팬텀 데이터가 생성될 수 있습니다.</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.ReadUncommitted">
      <summary>공유 잠금이 발행되지 않았고 단독 잠금이 부여되지 않았음을 의미하는 더티 읽기가 가능합니다.</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.RepeatableRead">
      <summary>잠금은 쿼리에서 사용되는 모든 데이터에 적용되어 데이터를 다른 사용자가 업데이트할 수 없게 합니다. 반복되지 않은 읽기를 금지하지만 팬텀 행의 경우는 가능합니다.</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Serializable">
      <summary>범위 잠금을 <see cref="T:System.Data.DataSet" />에 적용하여 트랜잭션이 완료될 때까지 다른 사용자가 데이터 세트에 행을 삽입하거나 업데이트할 수 없게 합니다.</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Snapshot">
      <summary>동일한 데이터에 대해 한 애플리케이션에서 데이터를 수정하고 있을 때 또 다른 애플리케이션에서 읽을 수 있는 데이터 버전을 저장하여 차단을 줄입니다. 다시 쿼리해도 한 트랜잭션에서 다른 트랜잭션의 변경 내용을 볼 수 없음을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.IsolationLevel.Unspecified">
      <summary>지정된 격리 수준과 다른 수준이 사용되지만 수준을 결정할 수는 없습니다.</summary>
    </member>
    <member name="T:System.Data.ITableMapping">
      <summary>소스 테이블을 <see cref="T:System.Data.DataSet" />의 테이블과 연결하며 .NET Framework 데이터 공급자들이 공통적으로 사용하는 <see cref="T:System.Data.Common.DataTableMapping" /> 클래스에 의해 구현됩니다.</summary>
    </member>
    <member name="P:System.Data.ITableMapping.ColumnMappings">
      <summary>
        <see cref="T:System.Data.Common.DataColumnMappingCollection" />에 대한 파생 <see cref="T:System.Data.DataTable" />을 가져옵니다.</summary>
      <returns>데이터 열 매핑의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Data.ITableMapping.DataSetTable">
      <summary>
        <see cref="T:System.Data.DataSet" />에서 테이블 이름(대/소문자를 구분하지 않음)을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataSet" />에 있는 테이블 이름(대/소문자를 구분하지 않음)입니다.</returns>
    </member>
    <member name="P:System.Data.ITableMapping.SourceTable">
      <summary>소스 테이블의 이름(대/소문자를 구분함)을 가져오거나 설정합니다.</summary>
      <returns>소스 테이블의 이름(대/소문자를 구분함)입니다.</returns>
    </member>
    <member name="T:System.Data.ITableMappingCollection">
      <summary>TableMapping 개체의 컬렉션을 포함하며 .NET Framework 데이터 공급자가 공통적으로 사용하는 <see cref="T:System.Data.Common.DataTableMappingCollection" />에 의해 구현됩니다.</summary>
    </member>
    <member name="M:System.Data.ITableMappingCollection.Add(System.String,System.String)">
      <summary>컬렉션에 테이블 매핑을 추가합니다.</summary>
      <param name="sourceTableName">소스 테이블의 이름(대/소문자를 구분함)입니다.</param>
      <param name="dataSetTableName">
        <see cref="T:System.Data.DataSet" /> 테이블의 이름입니다.</param>
      <returns>새로 매핑된 <see cref="T:System.Data.ITableMapping" /> 개체에 대한 참조를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.Contains(System.String)">
      <summary>컬렉션에 지정된 소스 테이블 이름을 가지는 테이블 매핑이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="sourceTableName">소스 테이블의 이름(대/소문자를 구분함)입니다.</param>
      <returns>지정된 소스 테이블 이름을 가진 테이블 매핑이 있으면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.GetByDataSetTable(System.String)">
      <summary>지정된 <see cref="T:System.Data.DataSet" /> 테이블 이름을 가진 TableMapping 개체를 가져옵니다.</summary>
      <param name="dataSetTableName">컬렉션 내의 <see langword="DataSet" /> 테이블 이름입니다.</param>
      <returns>지정된 <see langword="DataSet" /> 테이블 이름을 가진 TableMapping 개체를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.IndexOf(System.String)">
      <summary>컬렉션 내의 <see cref="T:System.Data.ITableMapping" /> 개체의 위치를 가져옵니다.</summary>
      <param name="sourceTableName">소스 테이블의 이름(대/소문자를 구분함)입니다.</param>
      <returns>컬렉션 내의 <see cref="T:System.Data.ITableMapping" /> 개체의 위치(0부터 시작)를 반환합니다.</returns>
    </member>
    <member name="M:System.Data.ITableMappingCollection.RemoveAt(System.String)">
      <summary>지정된 <see cref="T:System.Data.ITableMapping" /> 이름을 사용하여 <see cref="P:System.Data.ITableMapping.SourceTable" /> 개체를 컬렉션에서 제거합니다.</summary>
      <param name="sourceTableName">
        <see langword="SourceTable" />의 이름(대/소문자를 구분함)입니다.</param>
    </member>
    <member name="P:System.Data.ITableMappingCollection.Item(System.String)">
      <summary>지정된 <see cref="T:System.Data.ITableMapping" /> 이름을 가진 <see cref="P:System.Data.ITableMapping.SourceTable" />의 인스턴스를 가져오거나 설정합니다.</summary>
      <param name="index">
        <see cref="T:System.Data.ITableMapping" />의 <see langword="SourceTable" /> 이름입니다.</param>
      <returns>지정된 <see langword="SourceTable" /> 이름을 가진 <see cref="T:System.Data.ITableMapping" />의 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Data.KeyRestrictionBehavior">
      <summary>허용되거나 허용되지 않는, <see langword="KeyRestrictions" /> 속성에 의해 식별되는 연결 문자 매개 변수의 목록을 식별합니다.</summary>
    </member>
    <member name="F:System.Data.KeyRestrictionBehavior.AllowOnly">
      <summary>기본값 허용되는 추가 연결 문자열 매개 변수만 식별합니다.</summary>
    </member>
    <member name="F:System.Data.KeyRestrictionBehavior.PreventUsage">
      <summary>허용되지 않는 추가 연결 문자열 매개 변수를 식별합니다.</summary>
    </member>
    <member name="T:System.Data.LoadOption">
      <summary>
        <see cref="Overload:System.Data.DataTable.Load" /> 또는 <see cref="Overload:System.Data.DataSet.Load" /> 메서드를 사용할 때 데이터 소스의 값이 기존 행에 적용되는 방식을 제어합니다.</summary>
    </member>
    <member name="F:System.Data.LoadOption.OverwriteChanges">
      <summary>이 행의 들어오는 값이 각 열 데이터의 현재 값 및 원래 값 버전에 작성됩니다.</summary>
    </member>
    <member name="F:System.Data.LoadOption.PreserveChanges">
      <summary>이 행의 들어오는 값이 각 열의 원래 값 버전에 작성됩니다. 각 열 데이터의 현재 버전은 변경되지 않습니다.  이것이 기본값입니다.</summary>
    </member>
    <member name="F:System.Data.LoadOption.Upsert">
      <summary>이 행의 들어오는 값이 각 열의 현재 버전에 작성됩니다. 각 열 데이터의 원래 버전은 변경되지 않습니다.</summary>
    </member>
    <member name="T:System.Data.MappingType">
      <summary>
        <see cref="T:System.Data.DataColumn" />이 매핑되는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.MappingType.Attribute">
      <summary>열이 XML 특성에 매핑됩니다.</summary>
    </member>
    <member name="F:System.Data.MappingType.Element">
      <summary>열이 XML 요소에 매핑됩니다.</summary>
    </member>
    <member name="F:System.Data.MappingType.Hidden">
      <summary>열이 내부 구조에 매핑됩니다.</summary>
    </member>
    <member name="F:System.Data.MappingType.SimpleContent">
      <summary>열이 <see cref="T:System.Xml.XmlText" /> 노드에 매핑됩니다.</summary>
    </member>
    <member name="T:System.Data.MergeFailedEventArgs">
      <summary>대상과 소스 <see langword="DataRow" />의 기본 키 값이 같고 <see cref="P:System.Data.DataSet.EnforceConstraints" /> 속성을 true로 설정한 경우 발생합니다.</summary>
    </member>
    <member name="M:System.Data.MergeFailedEventArgs.#ctor(System.Data.DataTable,System.String)">
      <summary>병합 충돌에 대한 설명과 <see cref="T:System.Data.MergeFailedEventArgs" />을 사용하여 <see cref="T:System.Data.DataTable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="table">
        <see cref="T:System.Data.DataTable" /> 개체</param>
      <param name="conflict">병합 충돌에 대한 설명입니다.</param>
    </member>
    <member name="P:System.Data.MergeFailedEventArgs.Conflict">
      <summary>병합 충돌에 대한 설명을 반환합니다.</summary>
      <returns>병합 충돌에 대한 설명입니다.</returns>
    </member>
    <member name="P:System.Data.MergeFailedEventArgs.Table">
      <summary>
        <see cref="T:System.Data.DataTable" /> 개체를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.DataTable" /> 개체</returns>
    </member>
    <member name="T:System.Data.MergeFailedEventHandler">
      <summary>
        <see cref="E:System.Data.DataSet.MergeFailed" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터입니다.</param>
    </member>
    <member name="T:System.Data.MissingMappingAction">
      <summary>소스 테이블 또는 소스 열에 매핑이 없는 경우 발생하는 동작을 결정합니다.</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Error">
      <summary>지정한 열 매핑이 없으면 <see cref="T:System.InvalidOperationException" />이 생성됩니다.</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Ignore">
      <summary>매핑이 없는 열이나 테이블은 무시됩니다. <see langword="null" />를 반환합니다.</summary>
    </member>
    <member name="F:System.Data.MissingMappingAction.Passthrough">
      <summary>소스 열 또는 소스 테이블은 만들어진 다음 원래 이름을 사용하는 <see cref="T:System.Data.DataSet" />에 추가됩니다.</summary>
    </member>
    <member name="T:System.Data.MissingPrimaryKeyException">
      <summary>기본 키가 없는 테이블의 행에 액세스하려는 경우 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor">
      <summary>
        <see cref="T:System.Data.MissingPrimaryKeyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 정보를 사용하여 <see cref="T:System.Data.MissingPrimaryKeyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화 또는 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스 및 대상에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.MissingPrimaryKeyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.MissingPrimaryKeyException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Data.MissingPrimaryKeyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외를 발생시킨 예외이거나 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
    </member>
    <member name="T:System.Data.MissingSchemaAction">
      <summary>
        <see cref="T:System.Data.DataSet" /> 및 필수 <see cref="T:System.Data.DataTable" />에 데이터를 추가하거나 <see cref="T:System.Data.DataColumn" />이 없을 때 수행할 동작을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Add">
      <summary>스키마를 완료하는 데 필요한 열을 추가합니다.</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.AddWithKey">
      <summary>스키마를 완료하는 데 필요한 열과 기본 키 정보를 추가합니다. <see cref="T:System.Data.DataTable" />에 기본 키 정보를 추가하는 방법에 대한 자세한 내용은 <see cref="M:System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" />를 참조하십시오. .NET Framework Data Provider for OLE DB에서 제대로 작동하도록 <see langword="AddWithKey" />가 네이티브 OLE DB 공급자가 DBPROP_UNIQUEROWS 속성을 설정하여 필수 기본 키 정보를 가져온 다음 IColumnsRowset에서 DBCOLUMN_KEYCOLUMN을 조사하여 기본 키 열에 해당하는 열을 결정하도록 요구합니다. 또는 사용자가 각 <see cref="T:System.Data.DataTable" />에 기본 키 제약 조건을 명시적으로 설정할 수도 있습니다. 이렇게 하면 기존 레코드와 일치하는 들어오는 레코드가 추가되지 않고 업데이트됩니다. <see langword="AddWithKey" />를 사용하는 경우 .NET Framework Data Provider for SQL Server는 실행 중인 문에 FOR BROWSE 절을 추가합니다. 사용자는 의도하지 않은 결과, 즉 SET FMTONLY ON 문을 사용하는 데 문제가 발생할 수 있다는 사실을 염두에 두어야 합니다. 자세한 내용은 SET FMTONLY(Transact-SQL)를 참조하세요.</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Error">
      <summary>지정한 열 매핑이 없으면 <see cref="T:System.InvalidOperationException" />이 생성됩니다.</summary>
    </member>
    <member name="F:System.Data.MissingSchemaAction.Ignore">
      <summary>나머지 열을 무시합니다.</summary>
    </member>
    <member name="T:System.Data.NoNullAllowedException">
      <summary>
        <see cref="P:System.Data.DataColumn.AllowDBNull" />이 <see langword="false" />로 설정된 열에 null 값을 삽입하려고 할 때 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor">
      <summary>
        <see cref="T:System.Data.NoNullAllowedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 정보를 사용하여 <see cref="T:System.Data.NoNullAllowedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화 또는 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스 및 대상에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.NoNullAllowedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.NoNullAllowedException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Data.NoNullAllowedException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외를 발생시킨 예외이거나 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
    </member>
    <member name="T:System.Data.OrderedEnumerableRowCollection`1">
      <summary>쿼리에서 반환된 정렬된 <see cref="T:System.Data.DataRow" /> 개체 컬렉션을 나타냅니다.</summary>
      <typeparam name="TRow">소스 시퀀스의 개체 형식(일반적으로 <see cref="T:System.Data.DataRow" />)입니다.</typeparam>
    </member>
    <member name="T:System.Data.ParameterDirection">
      <summary>
        <see cref="T:System.Data.DataSet" />을 기준으로 하는 쿼리 내의 상대 매개 변수의 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.Input">
      <summary>입력 매개 변수입니다.</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.InputOutput">
      <summary>매개 변수는 입력과 출력 모두에 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.Output">
      <summary>출력 매개 변수입니다.</summary>
    </member>
    <member name="F:System.Data.ParameterDirection.ReturnValue">
      <summary>저장 프로시저, 기본 제공 함수 또는 사용자 정의 함수 등의 작업에서 반환되는 값을 나타내는 매개 변수입니다.</summary>
    </member>
    <member name="T:System.Data.PropertyCollection">
      <summary>
        <see cref="T:System.Data.DataColumn" />, <see cref="T:System.Data.DataSet" /> 또는 <see cref="T:System.Data.DataTable" />에 추가할 수 있는 속성의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.PropertyCollection.#ctor">
      <summary>
        <see cref="T:System.Data.PropertyCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.PropertyCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.PropertyCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화하거나 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스와 대상입니다.</param>
    </member>
    <member name="M:System.Data.PropertyCollection.Clone">
      <summary>
        <see cref="T:System.Data.PropertyCollection" /> 개체의 단순 복사본을 만듭니다.</summary>
      <returns>
        <see cref="T:System.Object" /> 개체의 단순 복사본인 <see cref="T:System.Data.PropertyCollection" />를 반환합니다.</returns>
    </member>
    <member name="T:System.Data.ReadOnlyException">
      <summary>읽기 전용 열의 값을 변경하려고 할 때 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor">
      <summary>
        <see cref="T:System.Data.ReadOnlyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 정보를 사용하여 <see cref="T:System.Data.ReadOnlyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화 또는 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스 및 대상에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.ReadOnlyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.ReadOnlyException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Data.ReadOnlyException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외를 발생시킨 예외이거나 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
    </member>
    <member name="T:System.Data.RowNotInTableException">
      <summary>
        <see cref="T:System.Data.DataRow" />에 없는 <see cref="T:System.Data.DataTable" />에서 작업을 수행하려고 할 때 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor">
      <summary>
        <see cref="T:System.Data.RowNotInTableException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 정보를 사용하여 <see cref="T:System.Data.RowNotInTableException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화 또는 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스 및 대상에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.RowNotInTableException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.RowNotInTableException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Data.RowNotInTableException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외를 발생시킨 예외이거나 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
    </member>
    <member name="T:System.Data.Rule">
      <summary>
        <see cref="T:System.Data.ForeignKeyConstraint" />가 적용될 때 발생하는 동작을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.Rule.Cascade">
      <summary>관련 행을 삭제하거나 업데이트합니다. 이것이 기본값입니다.</summary>
    </member>
    <member name="F:System.Data.Rule.None">
      <summary>관련 행에서 수행된 작업이 없습니다.</summary>
    </member>
    <member name="F:System.Data.Rule.SetDefault">
      <summary>관련 행의 값을 <see cref="P:System.Data.DataColumn.DefaultValue" /> 속성에 포함된 값으로 설정합니다.</summary>
    </member>
    <member name="F:System.Data.Rule.SetNull">
      <summary>관련 행의 값을 <see langword="DBNull" />로 설정합니다.</summary>
    </member>
    <member name="T:System.Data.SchemaSerializationMode">
      <summary>형식화된 <see cref="T:System.Data.DataSet" />의 스키마 serialization 모드를 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SchemaSerializationMode.ExcludeSchema">
      <summary>형식화된 <see cref="T:System.Data.DataSet" />의 스키마 serialization을 건너뜁니다.</summary>
    </member>
    <member name="F:System.Data.SchemaSerializationMode.IncludeSchema">
      <summary>형식화된 <see cref="T:System.Data.DataSet" />의 스키마 serialization을 포함합니다. 기본값입니다.</summary>
    </member>
    <member name="T:System.Data.SchemaType">
      <summary>
        <see cref="M:System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)" /> 작업을 수행할 때 기존 스키마 매핑의 처리 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.SchemaType.Mapped">
      <summary>들어오는 스키마에 기존 테이블 매핑을 적용합니다. 변환된 스키마를 사용하여 <see cref="T:System.Data.DataSet" />을 구성합니다.</summary>
    </member>
    <member name="F:System.Data.SchemaType.Source">
      <summary>DataAdapter의 테이블 매핑을 무시합니다. 변환을 적용하지 않고 들어오는 스키마를 사용하여 <see cref="T:System.Data.DataSet" />을 구성합니다.</summary>
    </member>
    <member name="T:System.Data.SerializationFormat">
      <summary>
        <see cref="T:System.Data.DataSet" />에 대한 serialization 형식을 결정합니다.</summary>
    </member>
    <member name="F:System.Data.SerializationFormat.Binary">
      <summary>이진 내용으로 serialize합니다. ADO.NET 2.0에서만 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Data.SerializationFormat.Xml">
      <summary>XML 내용으로 serialize합니다. 기본값입니다.</summary>
    </member>
    <member name="T:System.Data.SqlDbType">
      <summary>
        <see cref="T:System.Data.SqlClient.SqlParameter" />에 사용할 필드, 속성의 SQL Server 데이터 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.BigInt">
      <summary>
        <see cref="T:System.Int64" />. 64비트 부호 있는 정수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Binary">
      <summary>
        <see cref="T:System.Array" /> 형식의 <see cref="T:System.Byte" />입니다. 범위가 1바이트에서 8,000바이트까지인 이진 데이터의 고정 길이 스트림입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Bit">
      <summary>
        <see cref="T:System.Boolean" />. 0, 1 또는 <see langword="null" />일 수 있는 부호 없는 숫자 값입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Char">
      <summary>
        <see cref="T:System.String" />. 범위가 1자에서 8,000자까지이고 유니코드가 아닌 문자의 고정 길이 스트림입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Date">
      <summary>값 범위가 서기 1년 1월 1일에서 서기 9999년 12월 31일 사이인 날짜 데이터입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime">
      <summary>
        <see cref="T:System.DateTime" />. 3.33밀리초의 정확성으로 값의 범위가 1753년 1월 1일에서 9999년 12월 31일까지인 날짜 및 시간 데이터입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTime2">
      <summary>날짜 및 시간 데이터입니다. 날짜 값 범위는 서기 1년 1월 1일에서 서기 9999년 12월 31일 사이입니다. Time 값 범위는 00:00:00부터 23:59:59.9999999까지이며 정확도는 100나노초입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.DateTimeOffset">
      <summary>표준 시간대를 고려한 날짜 및 시간 데이터입니다. 날짜 값 범위는 서기 1년 1월 1일에서 서기 9999년 12월 31일 사이입니다. Time 값 범위는 00:00:00부터 23:59:59.9999999까지이며 정확도는 100나노초입니다. 표준 시간대 값의 범위는 -14:00에서 +14:00 사이입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Decimal">
      <summary>
        <see cref="T:System.Decimal" />. -10 38 -1과 10 38 -1 사이의 고정 전체 자릿수 및 소수 자릿수 값입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Float">
      <summary>
        <see cref="T:System.Double" />. 범위가 -1.79E +308에서 1.79E +308까지인 부동 소수점 숫자입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Image">
      <summary>
        <see cref="T:System.Array" /> 형식의 <see cref="T:System.Byte" />입니다. 범위가 0바이트에서 2 31 -1(또는 2,147,483,647)바이트까지인 이진 데이터의 가변 길이 스트림입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Int">
      <summary>
        <see cref="T:System.Int32" />. 32비트 부호 있는 정수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Money">
      <summary>
        <see cref="T:System.Decimal" />. 정확성이 통화 단위의 10000분의 1이고 범위가 -2 63(또는 -9,223,372,036,854,775,808)에서 2 63 -1(또는 +9,223,372,036,854,775,807)까지인 통화 값입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NChar">
      <summary>
        <see cref="T:System.String" />. 범위가 1자에서 4,000자까지인 유니코드 문자의 고정 길이 스트림입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NText">
      <summary>
        <see cref="T:System.String" />. 최대 길이가 2 30 - 1(또는 1,073,741,823)자인 유니코드 데이터의 가변 길이 스트림입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.NVarChar">
      <summary>
        <see cref="T:System.String" />. 범위가 1자에서 4,000자까지인 유니코드 문자의 가변 길이 스트림입니다. 문자열이 4,000자보다 더 큰 경우 암시적 변환이 실패합니다. 4,000자보다 더 긴 문자열로 작업할 경우 개체를 명시적으로 설정합니다. 데이터 열이 <see langword="nvarchar(max)" />일 경우 <see cref="F:System.Data.SqlDbType.NVarChar" />를 사용합니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Real">
      <summary>
        <see cref="T:System.Single" />. 범위가 -3.40E +38에서 3.40E +38까지인 부동 소수점 숫자입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallDateTime">
      <summary>
        <see cref="T:System.DateTime" />. 1분의 정확성으로 값의 범위가 1900년 1월 1일에서 2079년 6월 6일까지인 날짜 및 시간 데이터입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallInt">
      <summary>
        <see cref="T:System.Int16" />. 16비트 부호 있는 정수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.SmallMoney">
      <summary>
        <see cref="T:System.Decimal" />. 통화 단위의 10000분의 1 정확성으로 범위가 -214,748.3648에서 +214,748.3647까지인 통화 값입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Structured">
      <summary>테이블 반환 매개 변수에 들어 있는 구조적 데이터를 지정하기 위한 특수 데이터 형식입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Text">
      <summary>
        <see cref="T:System.String" />. 최대 길이가 2 31 -1(또는 2,147,483,647)자이고 유니코드가 아닌 데이터의 가변 길이 스트림입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Time">
      <summary>24시간제 시간 데이터입니다. Time 값 범위는 00:00:00부터 23:59:59.9999999까지이며 정확도는 100나노초입니다. SQL Server <see langword="time" /> 값에 해당합니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Timestamp">
      <summary>
        <see cref="T:System.Array" /> 형식의 <see cref="T:System.Byte" />입니다. 데이터베이스 내에서 고유한 자동 생성되는 이진 숫자입니다. <see langword="timestamp" />는 일반적으로 버전이 표시되는 테이블 행에 대한 메커니즘으로 사용됩니다. 스토리지 크기는 8바이트입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.TinyInt">
      <summary>
        <see cref="T:System.Byte" />. 8비트 부호 없는 정수임</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Udt">
      <summary>SQL Server UDT(사용자 정의 형식)입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.UniqueIdentifier">
      <summary>
        <see cref="T:System.Guid" />. GUID(Globally Unique IDentifier)입니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarBinary">
      <summary>
        <see cref="T:System.Array" /> 형식의 <see cref="T:System.Byte" />입니다. 범위가 1바이트에서 8,000바이트까지인 이진 데이터의 가변 길이 스트림입니다. 바이트 배열이 8.000바이트보다 더 큰 경우 암시적 변환이 실패합니다. 8.000바이트보다 더 큰 바이트 배열로 작업할 경우 개체를 명시적으로 설정합니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.VarChar">
      <summary>
        <see cref="T:System.String" />. 범위가 1문자에서 8,000문자까지인 비유니코드 문자의 가변 길이 스트림입니다. 데이터 열이 <see langword="varchar(max)" />일 경우 <see cref="F:System.Data.SqlDbType.VarChar" />를 사용합니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Variant">
      <summary>
        <see cref="T:System.Object" />. SQL Server 값 Empty 및 Null뿐만 아니라 숫자, 문자열, 이진 데이터 또는 날짜 데이터를 포함할 수 있는 특수 데이터 형식으로 다른 데이터 형식이 선언되지 않으면 이 형식이 사용됩니다.</summary>
    </member>
    <member name="F:System.Data.SqlDbType.Xml">
      <summary>XML 값입니다. <see cref="M:System.Data.SqlClient.SqlDataReader.GetValue(System.Int32)" /> 메서드나 <see cref="P:System.Data.SqlTypes.SqlXml.Value" /> 속성을 사용하여 XML을 문자열로 가져오거나 <see cref="T:System.Xml.XmlReader" /> 메서드를 호출하여 XML을 <see cref="M:System.Data.SqlTypes.SqlXml.CreateReader" />로 가져옵니다.</summary>
    </member>
    <member name="T:System.Data.SqlTypes.INullable">
      <summary>모든 <see cref="N:System.Data.SqlTypes" /> 개체 및 구조체는 <see langword="INullable" /> 인터페이스를 구현합니다.</summary>
    </member>
    <member name="P:System.Data.SqlTypes.INullable.IsNull">
      <summary>구조체가 null인지 여부를 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>이 개체의 값이 null이면 <see cref="T:System.Data.SqlTypes.SqlBoolean" /><see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlAlreadyFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 클래스는 독립 실행형 구성 요소로는 사용할 수 없고 다른 클래스가 표준 기능을 파생하는 원본 클래스로만 사용할 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlAlreadyFilledException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlAlreadyFilledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외가 throw되었을 때 표시할 문자열입니다.</param>
      <param name="e">내부 예외에 대한 참조입니다.</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBinary">
      <summary>데이터베이스에서 저장하거나 검색할 이진 데이터의 가변 길이 스트림을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBinary.Null">
      <summary>이 <see cref="T:System.DBNull" /> 구조체 인스턴스에 할당할 수 있는 <see cref="T:System.Data.SqlTypes.SqlBinary" />을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.#ctor(System.Byte[])">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 속성을 제공된 바이트 배열의 내용으로 설정하여 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">저장하거나 검색할 바이트 배열입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Add(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 개의 지정된 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 값을 연결하여 새 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체를 만듭니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" />
      </param>
      <returns>X와 Y가 연결된 값인 <see cref="T:System.Data.SqlTypes.SqlBinary" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Data.SqlTypes.SqlBinary)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체를 제공된 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체와 비교할 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체의 값은 개체보다 작습니다.</description></item><item><term> 0</term><description><see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체는 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체가 개체 보다 크거나 개체가 null 참조입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.CompareTo(System.Object)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체를 제공된 개체와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">이 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체와 비교할 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체의 값은 개체보다 작습니다.</description></item><item><term> 0</term><description><see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체는 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체가 개체 보다 크거나 개체가 null 참조입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Concat(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체를 연결하여 새 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체를 만듭니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <returns>
        <paramref name="x" />와 <paramref name="y" /> 매개 변수를 연결한 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체가 동일한지 비교합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다. 인스턴스 중 하나가 null이면 <see langword="SqlBinary" />가 null이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.Equals(System.Object)">
      <summary>제공된 개체 매개 변수를 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 개체의 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 속성과 비교합니다.</summary>
      <param name="value">비교할 개체입니다.</param>
      <returns>개체가 <see cref="T:System.Data.SqlTypes.SqlBinary" />의 인스턴스이고 둘이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetHashCode">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 <see langword="string" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않은 경우에는 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBinary" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않은 경우에는 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBinary" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않은 경우에는 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBinary" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않은 경우에는 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBinary" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.NotEquals(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체가 동일하지 않은지 비교합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBinary" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Addition(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 매개 변수를 연결하여 새 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체를 만듭니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <returns>
        <paramref name="x" />와 <paramref name="y" /> 매개 변수를 연결한 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Equality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체가 동일한지 비교합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBinary" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Byte[]">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체를 <see cref="T:System.Byte" /> 배열로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Byte" /> 배열입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlBinary">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>변환할 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않은 경우에는 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBinary" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않은 경우에는 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBinary" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Implicit(System.Byte[])~System.Data.SqlTypes.SqlBinary">
      <summary>바이트 배열을 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체로 변환합니다.</summary>
      <param name="x">변환될 바이트 배열입니다.</param>
      <returns>변환된 바이트 배열을 나타내는 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_Inequality(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체가 동일하지 않은지 비교합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBinary" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThan(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않은 경우에는 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBinary" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.op_LessThanOrEqual(System.Data.SqlTypes.SqlBinary,System.Data.SqlTypes.SqlBinary)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않은 경우에는 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBinary" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />를 참조하세요.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />를 참조하세요.</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />를 참조하세요.</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToSqlGuid">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBinary" />의 이 인스턴스를 <see cref="T:System.Data.SqlTypes.SqlGuid" />로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBinary.ToString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 개체를 문자열로 변환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBinary" />를 포함하는 문자열입니다. <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />가 null이면 "null"이 문자열에 포함됩니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.IsNull">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체가 null인지 여부를 나타냅니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>
        <see langword="null" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Item(System.Int32)">
      <summary>정수 매개 변수인 <paramref name="index" />가 가리키는 위치에 있는 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 속성에서 싱글 바이트를 가져옵니다. <paramref name="index" />가 바이트 배열의 끝을 넘어선 위치를 가리키면 <see cref="T:System.Data.SqlTypes.SqlNullValueException" />가 발생합니다. 이 속성은 읽기 전용입니다.</summary>
      <param name="index">검색할 바이트의 위치입니다.</param>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 속성에 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" />이 포함되어 있을 때 속성을 읽는 경우  
  
또는 
<paramref name="index" /> 매개 변수가 <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> 속성이 표시된 대로 바이트 배열의 길이를 초과하는 위치를 나타내는 경우</exception>
      <returns>정수 매개 변수가 가리키는 위치에 있는 바이트입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Length">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 속성의 길이(바이트 단위)를 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <see cref="P:System.Data.SqlTypes.SqlBinary.Length" /> 속성에 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />이 포함되어 있을 때 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> 속성을 읽는 경우</exception>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlBinary.Value" /> 속성에 있는 이진 데이터의 길이입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBinary.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체의 값을 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">속성에 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />이 포함되어 있을 때 <see cref="F:System.Data.SqlTypes.SqlBinary.Null" /> 속성을 읽는 경우</exception>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체의 값입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBoolean">
      <summary>데이터베이스에서 저장하거나 검색할 정수 값(0 또는 1)을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.False">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 구조체 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 속성에 할당할 수 있는 False 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Null">
      <summary>이 <see cref="T:System.DBNull" /> 구조체 인스턴스에 대해 할당할 수 있는 <see cref="T:System.Data.SqlTypes.SqlBoolean" />을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.One">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 구조체 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 속성에 할당할 수 있는 1 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.True">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 구조체 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 속성에 할당할 수 있는 True 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlBoolean.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 구조체 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 속성에 할당할 수 있는 0 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Boolean)">
      <summary>제공된 부울 값을 사용하여 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">새 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값(<see langword="true" /> 또는 <see langword="false" />)입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.#ctor(System.Int32)">
      <summary>지정된 정수 값을 사용하여 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">새 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체에 사용할 값이 있는 정수입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.And(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>지정된 두 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 비트 AND 연산을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>논리 AND 연산의 결과입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 개체를 제공된 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 개체와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Data.SqlTypes.SqlBoolean" /><see cref="T:System.Data.SqlTypes.SqlBoolean" /> 개체 또는 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
      <returns>인스턴스와 값의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 값</term><description> 설명</description></listheader><item><term> 음의 정수</term><description> 이 인스턴스는 <paramref name="value" />보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 <paramref name="value" />과 같은 경우</description></item><item><term> 양의 정수</term><description> 이 인스턴스는 보다 크거나 <paramref name="value" /><paramref name="value" /> null 참조 ( <see langword="Nothing" /> Visual Basic)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.CompareTo(System.Object)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 지정된 개체와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 개체 또는 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
      <returns>인스턴스와 값의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 값</term><description> 설명</description></listheader><item><term> 음의 정수</term><description> 이 인스턴스는 <paramref name="value" />보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 <paramref name="value" />과 같은 경우</description></item><item><term> 양의 정수</term><description> 이 인스턴스는 보다 크거나 <paramref name="value" /><paramref name="value" /> null 참조 ( <see langword="Nothing" /> Visual Basic)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체가 동일한지 비교합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />이고, 같지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Equals(System.Object)">
      <summary>제공된 개체 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlBoolean" />과 비교합니다.</summary>
      <param name="value">비교할 개체입니다.</param>
      <returns>개체가 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 인스턴스이고 둘이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />
      </param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 <see langword="string" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.GreaterThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.LessThanOrEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.NotEquals(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 두 인스턴스를 비교하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />이고, 같으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체에 대해 1의 보수 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>제공된 <see cref="T:System.Data.SqlTypes.SqlBoolean" />에 대한 1의 보수입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseAnd(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>지정된 두 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 비트 AND 연산을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>논리 AND 연산의 결과입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_BitwiseOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>피연산자의 비트 OR를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>논리 OR 연산의 결과입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Equality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 두 인스턴스를 비교하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />
      </param>
      <returns>두 인스턴스가 같으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />이고, 같지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_ExclusiveOr(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>제공된 매개 변수에 대해 비트 배타적 OR(비트 XOR) 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>논리 XOR 연산의 결과입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Boolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />을 부울로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlBoolean" />입니다.</param>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />으로 설정된 부울입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체로 변환될 <see cref="T:System.Data.SqlTypes.SqlBoolean" />입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />와 같은 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체로 변환될 <see cref="T:System.Data.SqlTypes.SqlBoolean" />입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성과 같은 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체로 변환될 <see cref="T:System.Data.SqlTypes.SqlBoolean" />입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 속성과 같은 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체로 변환될 <see cref="T:System.Data.SqlTypes.SqlBoolean" />입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성과 같은 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체로 변환될 <see cref="T:System.Data.SqlTypes.SqlBoolean" />입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성과 같은 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체로 변환될 <see cref="T:System.Data.SqlTypes.SqlBoolean" />입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 속성과 같은 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체로 변환될 <see cref="T:System.Data.SqlTypes.SqlBoolean" />입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 속성과 같은 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체로 변환될 <see cref="T:System.Data.SqlTypes.SqlBoolean" />입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 속성과 같은 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlBoolean">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체로 변환될 <see cref="T:System.Data.SqlTypes.SqlBoolean" />입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" /> 속성과 같은 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_False(System.Data.SqlTypes.SqlBoolean)">
      <summary>False 연산자는 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />를 테스트하여 False인지 여부를 확인하는 데 사용할 수 있습니다.</summary>
      <param name="x">테스트할 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>제공된 매개 변수 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이 <see langword="false" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 개체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 개체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Implicit(System.Boolean)~System.Data.SqlTypes.SqlBoolean">
      <summary>제공된 바이트 값을 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 변환될 바이트 값입니다.</param>
      <returns>0 또는 1을 포함하는 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_Inequality(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 두 인스턴스를 비교하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />
      </param>
      <returns>두 인스턴스가 같지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />이고, 같으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThan(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LessThanOrEqual(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_LogicalNot(System.Data.SqlTypes.SqlBoolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />에 대해 NOT 연산을 수행합니다.</summary>
      <param name="x">NOT 연산을 수행할 <see cref="T:System.Data.SqlTypes.SqlBoolean" />입니다.</param>
      <returns>인수가 true이면 <see cref="T:System.Data.SqlTypes.SqlBoolean" /><see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />이고, 인수가 null이면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_OnesComplement(System.Data.SqlTypes.SqlBoolean)">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체에 대해 1의 보수 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>제공된 <see cref="T:System.Data.SqlTypes.SqlBoolean" />에 대한 1의 보수입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.op_True(System.Data.SqlTypes.SqlBoolean)">
      <summary>true 연산자는 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />를 테스트하여 true인지 여부를 확인하는 데 사용할 수 있습니다.</summary>
      <param name="x">테스트할 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>제공된 매개 변수 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이 <see langword="true" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Or(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>지정된 두 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체에 대해 비트 OR 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>비트 OR 연산의 결과에 해당하는 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Parse(System.String)">
      <summary>논리 값의 지정된 <see cref="T:System.String" /> 표현을 같은 값의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />으로 변환합니다.</summary>
      <param name="s">변환될 <see cref="T:System.String" />입니다.</param>
      <returns>구문 분석된 값을 포함하는 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>
        <see langword="XmlSchema" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlByte">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlByte" />으로 변환합니다.</summary>
      <returns>해당 값이 1 또는 0인 새 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값이 <see langword="true" />이면 새 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 값은 1입니다. 그렇지 않으면 새 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 값이 0입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDecimal">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />으로 변환합니다.</summary>
      <returns>해당 값이 1 또는 0인 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값이 <see langword="true" />이면 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 값은 1입니다. 그렇지 않으면 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 값이 0입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlDouble">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDouble" />으로 변환합니다.</summary>
      <returns>해당 값이 1 또는 0인 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값이 <see langword="true" />이면 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체의 값은 1입니다. 그렇지 않으면 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체의 값이 0입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt16">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />으로 변환합니다.</summary>
      <returns>해당 값이 1 또는 0인 새 <see langword="SqlInt16" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값이 <see langword="true" />이면 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체의 값은 1입니다. 그렇지 않으면 새 <see langword="SqlInt16" /> 구조체의 값이 0입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt32">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt32" />으로 변환합니다.</summary>
      <returns>해당 값이 1 또는 0인 새 <see langword="SqlInt32" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값이 <see langword="true" />이면 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체의 값은 1입니다. 그렇지 않으면 새 <see langword="SqlInt32" /> 구조체의 값이 0입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlInt64">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt64" />으로 변환합니다.</summary>
      <returns>해당 값이 1 또는 0인 새 <see langword="SqlInt64" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값이 <see langword="true" />이면 새 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체의 값은 1입니다. 그렇지 않으면 새 <see langword="SqlInt64" /> 구조체의 값이 0입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlMoney">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlMoney" />으로 변환합니다.</summary>
      <returns>해당 값이 1 또는 0인 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값이 <see langword="true" />이면 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 값은 1입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값이 <see langword="false" />이면 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 값은 0입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값이 1과 0이 아니면 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 값은 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlSingle">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlSingle" />으로 변환합니다.</summary>
      <returns>해당 값이 1 또는 0인 새 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.  
  
<see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값이 true이면 새 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체의 값은 1이고, 그렇지 않으면 새 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체의 값은 0입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToSqlString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlString" />으로 변환합니다.</summary>
      <returns>해당 값이 1 또는 0인 새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값이 <see langword="true" />이면 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 값은 1입니다. 그렇지 않으면 새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 값이 0입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.ToString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 문자열로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 값을 포함하는 문자열입니다. 값이 null이면 "null"이 문자열에 포함됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBoolean.Xor(System.Data.SqlTypes.SqlBoolean,System.Data.SqlTypes.SqlBoolean)">
      <summary>제공된 매개 변수에 대해 비트 배타적 OR 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>논리 XOR 연산의 결과입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.ByteValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값을 바이트 형식으로 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값을 나타내는 바이트입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsFalse">
      <summary>현재 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />가 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />인지 여부를 나타냅니다.</summary>
      <returns>
        <see langword="true" />가 <see langword="Value" />이면 <see langword="False" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsNull">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체가 null인지 여부를 나타냅니다.</summary>
      <returns>
        <see langword="true" />
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />구조체가 null 이면이 고, 그렇지 않으면 <see langword="false" /> 입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.IsTrue">
      <summary>현재 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />가 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />가 <see langword="Value" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBoolean.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값을 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">이 속성이 null로 설정되어 있는 경우</exception>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />가 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlByte">
      <summary>데이터베이스에서 저장하거나 검색할 8비트 부호 없는 정수를 나타내며, 값 범위는 0 ~ 255입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MaxValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" />의 최대값을 나타내는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.MinValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" />의 최소값을 나타내는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Null">
      <summary>이 <see cref="T:System.DBNull" /> 구조체 인스턴스에 할당할 수 있는 <see cref="T:System.Data.SqlTypes.SqlByte" />을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlByte.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 구조체 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlByte" /> 속성에 할당할 수 있는 0 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.#ctor(System.Byte)">
      <summary>지정된 바이트 값을 사용하여 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">새 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 구조체의 <see cref="T:System.Data.SqlTypes.SqlByte" /> 속성에 저장될 바이트 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Add(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>지정된 두 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>덧셈 결과를 포함하는 <see langword="Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자의 비트 AND를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>비트 AND 연산의 결과입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자의 비트 OR를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>비트 OR 연산의 결과입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Data.SqlTypes.SqlByte)">
      <summary>이 인스턴스를 제공된 <see cref="T:System.Data.SqlTypes.SqlByte" /> 개체와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Data.SqlTypes.SqlByte" /> 개체입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.CompareTo(System.Object)">
      <summary>이 인스턴스를 제공된 <see cref="T:System.Object" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Object" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Divide(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자를 두 번째 피연산자로 나눕니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>해당 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 속성에 나누기 결과가 포함되는 새 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다. 인스턴스 중 하나가 null이면 <see langword="SqlByte" />가 null이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Equals(System.Object)">
      <summary>제공된 <see cref="T:System.Object" /> 매개 변수를 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 개체의 <see cref="T:System.Data.SqlTypes.SqlByte" /> 속성과 비교합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Object" /> 입니다.</param>
      <returns>개체가 <see cref="T:System.Data.SqlTypes.SqlByte" />의 인스턴스이고 둘이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />
      </param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 <see langword="string" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlByte" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlByte" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlByte" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlByte" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Mod(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자를 두 번째 피연산자로 나눈 다음 그 나머지를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>나머지를 포함하는 <see cref="T:System.Data.SqlTypes.SqlByte" />를 갖는 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlByte" /> 값을 나눈 다음 나머지를 반환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" />
      </param>
      <returns>나누기 후 나머지 연산을 <paramref name="x" />와 <paramref name="y" />에 대해 수행합니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>해당 <see cref="T:System.Data.SqlTypes.SqlByte" /> 속성에 곱셈 결과를 포함하는 새 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.NotEquals(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" />의 두 인스턴스를 비교하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlByte" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>1의 보수 연산자는 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자에 대해 비트 1의 보수 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수에 대한 1의 보수를 포함하는 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Addition(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>지정된 두 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>두 피연산자의 합계를 포함하는 <see cref="T:System.Data.SqlTypes.SqlByte" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseAnd(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자의 비트 AND를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>비트 AND 연산의 결과입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_BitwiseOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자의 비트 OR를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>비트 OR 연산의 결과입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Division(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자를 두 번째 피연산자로 나눕니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>해당 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 속성에 나누기 결과가 포함되는 새 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Equality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlByte" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_ExclusiveOr(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>제공된 매개 변수에 대해 비트 배타적 OR 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>비트 배타적 OR 연산의 결과입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlByte">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlByte" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 변환될 <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수입니다.</param>
      <returns>제공된 <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlBoolean" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Byte">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체를 바이트로 변환합니다.</summary>
      <param name="x">바이트로 변환될 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 매개 변수의 <see cref="T:System.Data.SqlTypes.SqlByte" /> 속성과 같은 값을 갖는 바이트입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlByte">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlDecimal" />을 <see cref="T:System.Data.SqlTypes.SqlByte" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlByte">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlDouble" />을 <see cref="T:System.Data.SqlTypes.SqlByte" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlByte">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlByte" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlByte">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt32" />을 <see cref="T:System.Data.SqlTypes.SqlByte" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlByte">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt64" />을 <see cref="T:System.Data.SqlTypes.SqlByte" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 속성을 갖는 <see langword="SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlByte">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlByte" />로 변환합니다.</summary>
      <param name="x">
        <see langword="SqlMoney" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlByte">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlByte" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlByte">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlString" />을 <see cref="T:System.Data.SqlTypes.SqlByte" />로 변환합니다.</summary>
      <param name="x">
        <see langword="SqlString" /> 클래스의 인스턴스입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" />이 나타내는 숫자 값과 같은 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlByte" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlByte" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see langword="SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Implicit(System.Byte)~System.Data.SqlTypes.SqlByte">
      <summary>제공된 바이트 값을 <see cref="T:System.Data.SqlTypes.SqlByte" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" />로 변환될 바이트 값입니다.</param>
      <returns>제공된 매개 변수와 같은 <see cref="T:System.Data.SqlTypes.SqlByte" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Inequality(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" />의 두 인스턴스를 비교하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlByte" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThan(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlByte" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_LessThanOrEqual(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlByte" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Modulus(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자를 두 번째 피연산자로 나눈 다음 그 나머지를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>나머지를 포함하는 <see cref="T:System.Data.SqlTypes.SqlByte" />를 갖는 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Multiply(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>해당 <see cref="T:System.Data.SqlTypes.SqlByte" /> 속성에 곱셈 결과를 포함하는 새 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_OnesComplement(System.Data.SqlTypes.SqlByte)">
      <summary>1의 보수 연산자는 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자에 대해 비트 1의 보수 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수에 대한 1의 보수를 포함하는 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.op_Subtraction(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자에서 두 번째 피연산자를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>첫 번째 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자에서 두 번째 피연산자를 뺀 결과입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Parse(System.String)">
      <summary>숫자의 <see cref="T:System.String" /> 표현을 해당하는 부호 없는 8비트 정수로 변환합니다.</summary>
      <param name="s">구문 분석할 <see langword="String" />입니다.</param>
      <returns>
        <see langword="String" /> 매개 변수가 나타내는 8비트 숫자를 포함하는 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Subtract(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자에서 두 번째 피연산자를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>첫 번째 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자에서 두 번째 피연산자를 뺀 결과입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>
        <see langword="XmlSchema" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlBoolean">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlBoolean" />으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlByte.Value" />가 0이 아니면 <see langword="true" />이고, 0이면 <see langword="false" />이고, 그렇지 않으면 Null입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDecimal">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />으로 변환합니다.</summary>
      <returns>이 <see langword="SqlDecimal" /> 구조체의 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />를 갖는 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlDouble">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDouble" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" />와 같은 값을 갖는 <see langword="SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt16">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" />와 같은 값을 갖는 <see langword="SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt32">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlByte" />를 <see cref="T:System.Data.SqlTypes.SqlInt32" />로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" />와 같은 값을 갖는 <see langword="SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlInt64">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt64" />으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />의 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />와 같은 <see cref="T:System.Data.SqlTypes.SqlByte" />를 갖는 <see langword="SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlMoney">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlMoney" />으로 변환합니다.</summary>
      <returns>이 <see langword="SqlMoney" /> 구조체의 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />를 갖는 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlSingle">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlSingle" />으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 구조체와 같은 <see cref="T:System.Data.SqlTypes.SqlByte" />를 갖는 <see langword="SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToSqlString">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" />의 이 인스턴스를 <see cref="T:System.Data.SqlTypes.SqlString" />로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />에 대한 문자열 표현을 포함하는 <see langword="SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.ToString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlByte.Value" />의 <see cref="T:System.Data.SqlTypes.SqlByte" />를 포함하는 문자열입니다. <see langword="Value" />이 null인 경우, <see langword="String" />은 null 문자열이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlByte.Xor(System.Data.SqlTypes.SqlByte,System.Data.SqlTypes.SqlByte)">
      <summary>제공된 매개 변수에 대해 비트 배타적 OR 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>XOR 연산의 결과입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.IsNull">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체가 null인지 여부를 나타내는 부울 값을 가져옵니다.</summary>
      <returns>null이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlByte.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 값을 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 값입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlBytes">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlBytes.Buffer" /> 또는 <see cref="P:System.Data.SqlTypes.SqlBytes.Stream" />을 래핑하는 변경 가능한 참조 형식을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Byte[])">
      <summary>지정된 바이트 배열을 기반으로 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">부호 없는 바이트 배열입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.Data.SqlTypes.SqlBinary)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 값을 기반으로 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.#ctor(System.IO.Stream)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 값을 기반으로 <see cref="T:System.IO.Stream" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">
        <see cref="T:System.IO.Stream" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />
      </param>
      <returns>지정된 <see langword="XmlSchemaSet" />의 XSD를 나타내는 <see langword="string" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlBytes">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 구조체로 변환합니다.</summary>
      <param name="value">변환할 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.op_Explicit(System.Data.SqlTypes.SqlBytes)~System.Data.SqlTypes.SqlBinary">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체로 변환합니다.</summary>
      <param name="value">변환할 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Read(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 인스턴스의 바이트를 전달된 버퍼로 복사한 다음 복사된 바이트의 수를 반환합니다.</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> 인스턴스에 포함된 값의 <see cref="T:System.Data.SqlTypes.SqlBytes" /> long 값 오프셋입니다.</param>
      <param name="buffer">복사할 바이트 배열 버퍼입니다.</param>
      <param name="offsetInBuffer">복사를 시작할 버퍼의 <see cref="T:System.Int32" /> 정수 오프셋입니다.</param>
      <param name="count">복사할 바이트 수를 나타내는 <see cref="T:System.Int32" /> 정수입니다.</param>
      <returns>복사된 바이트의 수를 나타내는 <see cref="T:System.Int64" /> long 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetLength(System.Int64)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 인스턴스의 길이를 설정합니다.</summary>
      <param name="value">길이를 나타내는 <see cref="T:System.Int64" /> long 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.SetNull">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 인스턴스를 null로 설정합니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 인스턴스를 다시 인스턴스화하는 데 필요한 데이터가 모두 들어 있는 serialization 정보를 가져옵니다.</summary>
      <param name="info">serialization 정보로 채울 개체입니다.</param>
      <param name="context">serialization의 대상 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="r">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.ToSqlBinary">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 인스턴스로부터 <see cref="T:System.Data.SqlTypes.SqlBytes" />를 생성하고 반환합니다.</summary>
      <returns>이 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlBinary" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlBytes.Write(System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>전달된 버퍼의 바이트를 이 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 인스턴스로 복사합니다.</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> 인스턴스에 포함된 값의 <see cref="T:System.Data.SqlTypes.SqlBytes" /> long 값 오프셋입니다.</param>
      <param name="buffer">복사할 바이트 배열 버퍼입니다.</param>
      <param name="offsetInBuffer">복사를 시작할 버퍼의 <see cref="T:System.Int32" /> 정수 오프셋입니다.</param>
      <param name="count">복사할 바이트 수를 나타내는 <see cref="T:System.Int32" /> 정수입니다.</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Buffer">
      <summary>내부 버퍼에 대한 참조를 반환합니다.</summary>
      <returns>내부 버퍼에 대 한 참조입니다. 관리되지 않는 포인터의 맨 위에 만들어진 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 인스턴스의 경우 내부 버퍼의 관리되는 복사본을 반환합니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.IsNull">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBytes" />가 null인지 여부를 나타내는 부울 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBytes" />가 null이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Item(System.Int64)">
      <summary>지정한 인덱스에 있는 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 인스턴스를 가져오거나 설정합니다.</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Byte" /> 값입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Length">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBytes" /> 인스턴스에 포함되어 있는 값의 길이를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Int64" /> 인스턴스에 포함되어 있는 값의 길이를 나타내는 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 값입니다.  
  
인스턴스에 사용할 수 있는 버퍼가 없거나 값이 null이면 -1을 반환합니다.  
  
스트림 래핑된 인스턴스의 경우 <see cref="P:System.IO.Stream.Length" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.MaxLength">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBytes" />의 내부 버퍼 값에 대한 최대 길이를 가져옵니다.</summary>
      <returns>내부 버퍼에 대한 값의 최대 길이를 나타내는 long 값입니다. 스트림 래핑된 <see cref="T:System.Data.SqlTypes.SqlBytes" />의 경우 -1을 반환합니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Null">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBytes" />의 null 인스턴스를 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlBytes.IsNull" />속성이을 반환 하는 인스턴스입니다 <see langword="true" /> .</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Storage">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlBytes" /> 인스턴스의 스토리지 상태에 대한 정보를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 열거형입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Stream">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBytes" />의 데이터를 스트림으로 가져오거나 설정합니다.</summary>
      <returns>SqlBytes 데이터가 들어 있는 스트림입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlBytes.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBytes" />가 보유하고 있는 값의 관리되는 복사본을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBytes" />의 값(바이트 배열)입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlChars">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" />는 <see cref="T:System.Char" /> 배열 또는 <see cref="T:System.Data.SqlTypes.SqlString" /> 인스턴스를 래핑하는 변경 가능한 참조 형식입니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Char[])">
      <summary>지정된 문자 배열을 기반으로 <see cref="T:System.Data.SqlTypes.SqlChars" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="buffer">
        <see cref="T:System.Char" /> 배열입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.#ctor(System.Data.SqlTypes.SqlString)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlChars" /> 값을 기반으로 <see cref="T:System.Data.SqlTypes.SqlString" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />
      </param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 <see langword="string" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlChars)~System.Data.SqlTypes.SqlString">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체로 변환합니다.</summary>
      <param name="value">변환할 <see cref="T:System.Data.SqlTypes.SqlChars" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlChars">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlChars" /> 구조체로 변환합니다.</summary>
      <param name="value">변환할 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Read(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 인스턴스의 문자를 전달된 버퍼로 복사한 다음 복사된 문자의 수를 반환합니다.</summary>
      <param name="offset">
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 인스턴스에 포함된 값의 <see cref="T:System.Int64" /><see langword="long" /> 값 오프셋입니다.</param>
      <param name="buffer">복사할 문자 배열 버퍼입니다.</param>
      <param name="offsetInBuffer">복사를 시작할 버퍼의 <see cref="T:System.Int32" /> 정수 오프셋입니다.</param>
      <param name="count">복사할 문자 수를 나타내는 <see cref="T:System.Int32" /> 정수 값입니다.</param>
      <returns>복사된 바이트의 수를 나타내는 <see cref="T:System.Int64" /><see langword="long" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetLength(System.Int64)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 인스턴스의 길이를 설정합니다.</summary>
      <param name="value">길이를 나타내는 <see cref="T:System.Int64" /><see langword="long" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.SetNull">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 인스턴스를 null로 설정합니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 인스턴스를 다시 인스턴스화하는 데 필요한 데이터가 모두 들어 있는 serialization 정보를 가져옵니다.</summary>
      <param name="info">serialization 정보로 채울 개체입니다.</param>
      <param name="context">serialization의 대상 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="r">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.ToSqlString">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 인스턴스를 해당 <see cref="T:System.Data.SqlTypes.SqlString" /> 표현으로 변환합니다.</summary>
      <returns>이 형식의 <see cref="T:System.Data.SqlTypes.SqlString" /> 표현입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlChars.Write(System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>전달된 버퍼의 문자를 이 <see cref="T:System.Data.SqlTypes.SqlChars" /> 인스턴스로 복사합니다.</summary>
      <param name="offset">
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 인스턴스에 포함된 값의 <see langword="long" /> 값 오프셋입니다.</param>
      <param name="buffer">복사할 문자 배열 버퍼입니다.</param>
      <param name="offsetInBuffer">복사를 시작할 버퍼의 <see cref="T:System.Int32" /> 정수 오프셋입니다.</param>
      <param name="count">복사할 문자 수를 나타내는 <see cref="T:System.Int32" /> 정수입니다.</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Buffer">
      <summary>내부 버퍼에 대한 참조를 반환합니다.</summary>
      <returns>내부 버퍼에 대 한 참조입니다. 관리되지 않는 포인터의 맨 위에 만들어진 <see cref="T:System.Data.SqlTypes.SqlChars" /> 인스턴스의 경우 내부 버퍼의 관리되는 복사본을 반환합니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.IsNull">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" />가 null인지 여부를 나타내는 부울 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlChars" />가 null이면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Item(System.Int64)">
      <summary>지정한 인덱스에 있는 <see cref="T:System.Data.SqlTypes.SqlChars" /> 인스턴스를 가져오거나 설정합니다.</summary>
      <param name="offset">
        <see cref="T:System.Int64" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Char" /> 값입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Length">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" /> 인스턴스에 포함되어 있는 값의 길이를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Int64" /> 인스턴스에 포함되어 있는 값의 문자 길이를 나타내는 <see cref="T:System.Data.SqlTypes.SqlChars" /> 값입니다.  
  
인스턴스에 사용할 수 있는 버퍼가 없거나 값이 null이면 -1을 반환합니다.  
  
스트림 래핑된 인스턴스의 경우 <see cref="P:System.IO.Stream.Length" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.MaxLength">
      <summary>내부 버퍼에서 보유할 수 있는 2바이트 문자 값의 최대 길이를 가져옵니다.</summary>
      <returns>내부 버퍼에 대한 2바이트 문자 값의 최대 길이를 나타내는 <see cref="T:System.Int64" /> 값입니다.  
  
스트림 래핑된 <see cref="T:System.Data.SqlTypes.SqlChars" />의 경우 -1을 반환합니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Null">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" />의 null 인스턴스를 반환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlChars.IsNull" />속성이을 반환 하는 인스턴스입니다 <see langword="true" /> . 자세한 내용은 Null 값 처리를 참조 하세요.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Storage">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlChars" /> 인스턴스의 스토리지 상태에 대한 정보를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 열거형입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlChars.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlChars" />가 보유하고 있는 값의 관리되는 복사본을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlChars" />의 값(문자 배열)입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlCompareOptions">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 비교 옵션 값을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort">
      <summary>영문자 값이 아닌 숫자 문자 값에 따라 정렬을 수행하도록 지정합니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.BinarySort2">
      <summary>이진 정렬을 수행합니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreCase">
      <summary>대/소문자를 무시하면서 <see cref="T:System.Data.SqlTypes.SqlString" /> 비교를 수행하도록 지정합니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreKanaType">
      <summary>가나 형식을 무시하면서 <see cref="T:System.Data.SqlTypes.SqlString" /> 비교를 수행하도록 지정합니다. 가나 형식은 일본어의 발성음을 표현하는 히라가나 문자와 가타카나 문자를 나타냅니다. 히라가나는 일본 고유의 어구과 단어를 표현하는 데 사용되고, 가타카나는 "컴퓨터"나 "인터넷" 등과 같은 외래어를 표현하는 데 사용됩니다. 발성음은 히라가나와 가타카나 모두로 표현할 수 있습니다. 이 값이 선택되어 있으면 하나의 발성음에 대해 히라가나 문자와 가타카나 문자가 같은 것으로 간주됩니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreNonSpace">
      <summary>분음 부호와 같이 공백 없는 조합 문자를 무시하면서 <see cref="T:System.Data.SqlTypes.SqlString" /> 비교를 수행하도록 지정합니다. 유니코드 표준(Unicode Standard)에서 조합 문자는 기본 문자와 조합하여 새 문자를 만들어내는 문자로 정의됩니다. 공백 없는 조합 문자를 렌더링할 때는 공백 문자가 사용되지 않습니다. 공백 없는 조합 문자에 대한 자세한 내용은 https://www.unicode.org에서 유니코드 표준을 참조하세요.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.IgnoreWidth">
      <summary>문자 너비를 무시하면서 <see cref="T:System.Data.SqlTypes.SqlString" /> 비교를 수행하도록 지정합니다. 예를 들어, 일본어의 가타카나 문자는 전자나 반자로 쓸 수 있는데, 이 값이 선택되어 있으면 전자로 쓰여진 가타카나 문자와 반자로 쓰여진 가타카나 문자가 같은 것으로 간주됩니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlCompareOptions.None">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 비교의 기본 옵션 설정값을 지정합니다.</summary>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDateTime">
      <summary>데이터베이스에서 검색할 날짜와 시간 데이터(1753년 1월 1일~9999년 12월 31)를 3.33밀리초의 정밀도로 나타냅니다. <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체는 해당하는 .NET Framework 형식인 <see cref="T:System.DateTime" />과는 다른 내부 데이터 구조를 갖습니다. .NET Framework 형식은 12:00:00 AM(0001년 1월 1일)부터 11:59:59 PM(9999년 12월 31일)까지의 모든 시간을 100나노초의 정밀도로 나타낼 수 있습니다. <see cref="T:System.Data.SqlTypes.SqlDateTime" />은 실제로 00:00:00 AM(1900년 1월 1일)을 기준으로 상대적 차이를 저장합니다. 그러므로 "00:00:00 AM(1900년 1월 1일)"을 정수로 변환하면 0이 반환됩니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MaxValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 최대 유효 날짜 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.MinValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 최소 유효 날짜 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.Null">
      <summary>이 <see cref="T:System.DBNull" /> 구조체 인스턴스에 할당할 수 있는 <see cref="T:System.Data.SqlTypes.SqlDateTime" />을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerHour">
      <summary>1시간에 해당하는 틱 수를 값으로 가지는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerMinute">
      <summary>1분에 해당하는 틱 수를 값으로 가지는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDateTime.SQLTicksPerSecond">
      <summary>1초에 해당하는 틱 수를 값으로 가지는 상수입니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.DateTime)">
      <summary>지정된 <see cref="T:System.DateTime" /> 값을 사용하여 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">
        <see langword="DateTime" /> 구조체입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32)">
      <summary>제공된 매개 변수를 사용하여 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="dayTicks">날짜를 틱 수로 나타내는 정수 값입니다.</param>
      <param name="timeTicks">시간을 틱 수로 나타내는 정수 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32)">
      <summary>제공된 매개 변수로 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 새 인스턴스를 초기화하여 새 구조체의 연, 월, 일을 초기화합니다.</summary>
      <param name="year">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 연도를 나타내는 정수 값입니다.</param>
      <param name="month">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 월을 나타내는 정수 값입니다.</param>
      <param name="day">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 일을 나타내는 정수 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>제공된 매개 변수로 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 새 인스턴스를 초기화하여 새 구조체의 연, 월, 일, 시, 분 및 초를 초기화합니다.</summary>
      <param name="year">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 연도를 나타내는 정수 값입니다.</param>
      <param name="month">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 월을 나타내는 정수 값입니다.</param>
      <param name="day">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 일을 나타내는 정수 값입니다.</param>
      <param name="hour">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 시를 나타내는 정수 값입니다.</param>
      <param name="minute">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 분을 나타내는 정수 값입니다.</param>
      <param name="second">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 초를 나타내는 정수 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
      <summary>제공된 매개 변수로 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 새 인스턴스를 초기화하여 새 구조체의 연, 월, 일, 시, 분, 초 및 밀리초를 초기화합니다.</summary>
      <param name="year">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 연도를 나타내는 정수 값입니다.</param>
      <param name="month">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 월을 나타내는 정수 값입니다.</param>
      <param name="day">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 일을 나타내는 정수 값입니다.</param>
      <param name="hour">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 시를 나타내는 정수 값입니다.</param>
      <param name="minute">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 분을 나타내는 정수 값입니다.</param>
      <param name="second">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 초를 나타내는 정수 값입니다.</param>
      <param name="millisecond">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 밀리초를 나타내는 Double 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>제공된 매개 변수로 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 새 인스턴스를 초기화하여 새 구조체의 연, 월, 일, 시, 분, 초 및 마이크로초를 초기화합니다.</summary>
      <param name="year">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 연도를 나타내는 정수 값입니다.</param>
      <param name="month">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 월을 나타내는 정수 값입니다.</param>
      <param name="day">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 일을 나타내는 정수 값입니다.</param>
      <param name="hour">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 시를 나타내는 정수 값입니다.</param>
      <param name="minute">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 분을 나타내는 정수 값입니다.</param>
      <param name="second">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 초를 나타내는 정수 값입니다.</param>
      <param name="bilisecond">새 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 마이크로초(밀리초의 천분의 1초)를 나타내는 정수 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Add(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlDateTime" />에 <see langword="TimeSpan" />을 추가합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 값입니다.</param>
      <param name="t">
        <see langword="Timespan" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체를 제공된 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교될 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스는 <see cref="T:System.Data.SqlTypes.SqlDateTime" />보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스는 <see cref="T:System.Data.SqlTypes.SqlDateTime" />와 같습니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스는 <see cref="T:System.Data.SqlTypes.SqlDateTime" />보다 큽니다.  
  
또는 
 <see cref="T:System.Data.SqlTypes.SqlDateTime" />이 null 참조(Visual Basic의 경우 <see langword="Nothing" />)인 경우</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.CompareTo(System.Object)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체를 제공된 <see cref="T:System.Object" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Object" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Equals(System.Object)">
      <summary>제공된 개체 매개 변수를 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 개체의 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 속성과 비교합니다.</summary>
      <param name="value">비교할 개체입니다.</param>
      <returns>개체가 <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 인스턴스이고 둘이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 가져옵니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />
      </param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 <see langword="string" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.NotEquals(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 두 인스턴스에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Addition(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>제공된 <see cref="T:System.TimeSpan" /> 매개 변수가 나타내는 시간인 <paramref name="t" />를 제공된 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체에 추가합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <param name="t">
        <see cref="T:System.TimeSpan" /> 구조체입니다.</param>
      <returns>새 <see cref="T:System.Data.SqlTypes.SqlDateTime" />입니다. 인수 중 하나가 <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" />인 경우, 새 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" />는 <see cref="F:System.Data.SqlTypes.SqlDateTime.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Equality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.DateTime">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체를 <see cref="T:System.DateTime" /> 구조체로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>제공된 <see cref="T:System.DateTime" /> 구조체의 <see cref="P:System.DateTime.Date" /> 속성과 날짜 및 시간 값이 같은 <see cref="P:System.DateTime.TimeOfDay" /> 및 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDateTime">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlDateTime" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 매개 변수가 나타내는 것과 날짜 및 시간이 같은 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" />을 갖는 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlString" />이 null인 경우, 새로 만든 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 <see langword="Value" />는 null이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Implicit(System.DateTime)~System.Data.SqlTypes.SqlDateTime">
      <summary>
        <see cref="T:System.DateTime" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체로 변환합니다.</summary>
      <param name="value">
        <see langword="DateTime" /> 구조체입니다.</param>
      <returns>제공된 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 조합된 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 및 <see cref="P:System.DateTime.Date" /> 속성과 같은 <see cref="P:System.DateTime.TimeOfDay" />을 갖는 <see cref="T:System.DateTime" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Inequality(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 두 인스턴스에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThan(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_LessThanOrEqual(System.Data.SqlTypes.SqlDateTime,System.Data.SqlTypes.SqlDateTime)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDateTime" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.op_Subtraction(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>제공된 <see cref="T:System.TimeSpan" /> 구조체에서 제공된 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체인 <paramref name="t" />를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <param name="t">
        <see cref="T:System.TimeSpan" /> 구조체입니다.</param>
      <returns>뺄셈 결과를 나타내는 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Parse(System.String)">
      <summary>날짜와 시간의 지정된 <see cref="T:System.String" /> 표현을 같은 값의 <see cref="T:System.Data.SqlTypes.SqlDateTime" />으로 변환합니다.</summary>
      <param name="s">구문 분석할 <see langword="string" />입니다.</param>
      <returns>지정된 <see langword="string" />이 나타내는 것과 날짜 및 시간이 같은 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.Subtract(System.Data.SqlTypes.SqlDateTime,System.TimeSpan)">
      <summary>지정된 <see langword="Timespan" />을 이 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 인스턴스에서 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 값입니다.</param>
      <param name="t">
        <see langword="Timespan" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>
        <see langword="XmlSchema" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToSqlString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlString" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체에 포함된 날짜 및 시간을 나타내는 문자열 값을 가진 <see langword="SqlString" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDateTime.ToString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <returns>이 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 구조체의 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 속성을 나타내는 <see langword="String" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.DayTicks">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 날짜를 나타내는 틱 수를 가져옵니다.</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <see cref="N:System.Data.SqlTypes" /> 구조체의 <see langword="Value" /> 속성이 null로 설정된 경우 throw되는 예외입니다.</exception>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 구조체의 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 속성에 포함된 날짜를 나타내는 틱 수입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.IsNull">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체가 null인지 여부를 나타냅니다.</summary>
      <returns>null이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.TimeTicks">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 시간을 나타내는 틱 수를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 시간을 나타내는 틱 수입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDateTime.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 값을 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <see cref="N:System.Data.SqlTypes" /> 구조체의 <see langword="Value" /> 속성이 null로 설정된 경우 throw되는 예외입니다.</exception>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체의 값입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDecimal">
      <summary>전체 자릿수와 소수 자릿수가 고정된 - 10^38 + 1부터 10^38 - 1까지의 숫자 값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxPrecision">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Precision" /> 속성의 최대값을 나타내는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxScale">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Scale" /> 속성의 최대값을 나타내는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MaxValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 최대값을 나타내는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.MinValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 최소값을 나타내는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDecimal.Null">
      <summary>이 <see cref="T:System.DBNull" /> 클래스 인스턴스에 대해 할당할 수 있는 <see cref="T:System.Data.SqlTypes.SqlDecimal" />을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>제공된 매개 변수를 사용하여 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="bPrecision">새 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 구조체의 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 속성을 나타내는 데 사용할 수 있는 최대 자릿수입니다.</param>
      <param name="bScale">새 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 구조체의 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 속성을 나타내는 데 사용할 소수 자릿수입니다.</param>
      <param name="fPositive">새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체가 양수를 표현하는지 아니면 음수를 표현하는지 여부를 나타내는 부울 값입니다.</param>
      <param name="data1">data2, data3 및 data4와 조합하여 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체 값을 나타내는 128비트 부호 없는 정수를 구성하는 32비트 부호 없는 정수입니다.</param>
      <param name="data2">data1, data3 및 data4와 조합하여 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체 값을 나타내는 128비트 부호 없는 정수를 구성하는 32비트 부호 없는 정수입니다.</param>
      <param name="data3">data1, data2 및 data4와 조합하여 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체 값을 나타내는 128비트 부호 없는 정수를 구성하는 32비트 부호 없는 정수입니다.</param>
      <param name="data4">data1, data2 및 data3과 조합하여 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체 값을 나타내는 128비트 부호 없는 정수를 구성하는 32비트 부호 없는 정수입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Byte,System.Byte,System.Boolean,System.Int32[])">
      <summary>제공된 매개 변수를 사용하여 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="bPrecision">새 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 구조체의 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 속성을 나타내는 데 사용할 수 있는 최대 자릿수입니다.</param>
      <param name="bScale">새 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 구조체의 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 속성을 나타내는 데 사용할 소수 자릿수입니다.</param>
      <param name="fPositive">새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체가 양수를 표현하는지 아니면 음수를 표현하는지 여부를 나타내는 부울 값입니다.</param>
      <param name="bits">새 <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 값을 제공하는 128비트 부호 없는 정수입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Decimal)">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 값을 사용하여 <see cref="T:System.Decimal" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">
        <see cref="T:System.Decimal" /> 구조체로 저장될 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Double)">
      <summary>제공된 Double 매개 변수를 사용하여 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="dVal">새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 값을 나타내는 Double입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int32)">
      <summary>제공된 정수 값을 사용하여 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 값으로 사용될 제공된 정수 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.#ctor(System.Int64)">
      <summary>제공된 정수(long) 값을 사용하여 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">제공된 정수(Long) 값은 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 값으로 사용됩니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Abs(System.Data.SqlTypes.SqlDecimal)">
      <summary>Abs 메서드는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 절대 값을 가져옵니다.</summary>
      <param name="n">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 절대값을 나타내는 부호 없는 숫자를 포함하는 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Add(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 피연산자의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>합계를 포함하는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 속성을 갖는 새 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.AdjustScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Boolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 피연산자의 소수 자릿수는 자릿수 매개 변수가 나타내는 자릿수로 조정됩니다. fRound 매개 변수의 값에 따라 해당 자릿수에서 값이 반올림되거나 해당 자릿수 아래의 값을 버립니다.</summary>
      <param name="n">조정될 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="digits">조정된 구조체의 자릿수입니다.</param>
      <param name="fRound">새 값은 이 매개 변수가 <see langword="true" />이면 반올림되고, <see langword="false" />이면 버려집니다.</param>
      <returns>조정된 숫자를 포함하는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 속성을 갖는 새 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Ceiling(System.Data.SqlTypes.SqlDecimal)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체보다 크거나 같은 최소 정수를 반환합니다.</summary>
      <param name="n">최대값을 계산할 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>지정된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체보다 크거나 같은 최소 정수를 나타내는 <see cref="T:System.Data.SqlTypes.SqlDecimal" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Data.SqlTypes.SqlDecimal)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 인스턴스를 제공된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 개체와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.CompareTo(System.Object)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 인스턴스를 제공된 <see cref="T:System.Object" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Object" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ConvertToPrecScale(System.Data.SqlTypes.SqlDecimal,System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 피연산자의 값을 지정된 전체 자릿수와 소수 자릿수로 조정합니다.</summary>
      <param name="n">조정될 값이 있는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="precision">새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 전체 자릿수입니다.</param>
      <param name="scale">새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 소수 자릿수입니다.</param>
      <returns>매개 변수에 지정된 전체 자릿수와 소수 자릿수로 조정된 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Divide(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>나누기 연산자는 첫 번째 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 피연산자를 두 번째 피연산자로 나눈 결과를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>해당 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성에 나누기 결과가 포함되는 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 피연산자에 대해 논리 비교를 수행하여 둘이 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다. 두 인스턴스 중 하나가 null이면 <see langword="SqlDecimal" />의 값이 null이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Equals(System.Object)">
      <summary>제공된 <see cref="T:System.Object" /> 매개 변수를 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 속성과 비교합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Object" /> 입니다.</param>
      <returns>개체가 <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 인스턴스이고 둘이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Floor(System.Data.SqlTypes.SqlDecimal)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 숫자를 그 다음으로 낮은 정수로 올림합니다.</summary>
      <param name="n">최소값을 계산할 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 정수 부분을 포함하는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />
      </param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 <see langword="string" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체에 대해 논리 비교를 수행하여 첫 번째 구조체가 두 번째 구조체보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체에 대해 논리 비교를 수행하여 첫 번째 구조체가 두 번째 구조체보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>곱하기 연산자는 두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>해당 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 속성에 곱셈 결과를 포함하는 새 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.NotEquals(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Addition(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 피연산자의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>합계를 포함하는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 속성을 갖는 새 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Division(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>나누기 연산자는 첫 번째 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 피연산자를 두 번째 피연산자로 나눈 결과를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>해당 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성에 나누기 결과가 포함되는 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Equality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 피연산자에 대해 논리 비교를 수행하여 둘이 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDecimal">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Decimal">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수를 <see cref="T:System.Decimal" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>
        <see langword="Decimal" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />와 같은 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlDecimal">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDecimal">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDecimal">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlString" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수가 나타내는 값과 같은 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />을 갖는 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Explicit(System.Double)~System.Data.SqlTypes.SqlDecimal">
      <summary>
        <see cref="T:System.Double" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Double" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 값과 같은 값을 갖는 새 <see cref="T:System.Double" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체에 대해 논리 비교를 수행하여 첫 번째 구조체가 두 번째 구조체보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDecimal">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDecimal">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDecimal">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDecimal">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체를 SqlDecimal로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDecimal">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 피연산자를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlDecimal">
      <summary>
        <see cref="T:System.Decimal" /> 값을 <see cref="T:System.Data.SqlTypes.SqlDecimal" />로 변환합니다.</summary>
      <param name="x">변환될 <see cref="T:System.Decimal" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 값과 같은 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성을 갖는 새 <see langword="Decimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlDecimal">
      <summary>제공된 <see cref="T:System.Int64" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Int64" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 값과 같은 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성을 갖는 새 <see cref="T:System.Int64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Inequality(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThan(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체에 대해 논리 비교를 수행하여 첫 번째 구조체가 두 번째 구조체보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_LessThanOrEqual(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Multiply(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>곱하기 연산자는 두 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>해당 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 속성에 곱셈 결과를 포함하는 새 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_Subtraction(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 피연산자에서 두 번째 피연산자를 뺀 결과를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>뺄셈 결과를 포함하는 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.op_UnaryNegation(System.Data.SqlTypes.SqlDecimal)">
      <summary>단항 마이너스 연산자는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수를 부정합니다.</summary>
      <param name="x">부정할 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>부정 연산의 결과를 포함하는 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Parse(System.String)">
      <summary>숫자의 <see cref="T:System.String" /> 표현을 해당하는 <see cref="T:System.Data.SqlTypes.SqlDecimal" />로 변환합니다.</summary>
      <param name="s">구문 분석할 <see langword="String" />입니다.</param>
      <returns>지정된 <see cref="T:System.Data.SqlTypes.SqlDecimal" />에 포함된 값과 같은 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Power(System.Data.SqlTypes.SqlDecimal,System.Double)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 값을 지정된 지수 제곱으로 올림합니다.</summary>
      <param name="n">거듭제곱될 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="exp">숫자의 거듭제곱 수를 나타내는 Double 값입니다.</param>
      <returns>결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Round(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>지정된 전체 자릿수를 사용하여 지정된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 값에 가장 가까운 숫자를 가져옵니다.</summary>
      <param name="n">반올림 처리될 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="position">반환 값에서 유효한 소수 자릿수(전체 자릿수)의 숫자입니다.</param>
      <returns>올림 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Sign(System.Data.SqlTypes.SqlDecimal)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체에 대한 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성의 부호를 나타내는 값을 가져옵니다.</summary>
      <param name="n">계산될 부호가 있는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 부호를 나타내는 숫자입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Subtract(System.Data.SqlTypes.SqlDecimal,System.Data.SqlTypes.SqlDecimal)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 피연산자에서 두 번째 피연산자를 뺀 결과를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>뺄셈 결과를 포함하는 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>
        <see langword="XmlSchema" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToDouble">
      <summary>이 인스턴스에 대해 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성의 내용과 같은 Double을 반환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성의 소수 표현입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlBoolean">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlBoolean" />으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />가 0이 아니면 <see langword="true" />이고, 0이면 <see langword="false" />이고, 그렇지 않으면 Null입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlByte">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlByte" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 <see langword="Value" />과 같은 <see langword="Value" />를 갖는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 Value가 <see langword="true" />이면 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 <see langword="Value" />가 1입니다. 그렇지 않으면 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 <see langword="Value" />는 0입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlDouble">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDouble" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />의 이 인스턴스와 같은 값을 갖는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt16">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" />의 이 인스턴스와 같은 값을 갖는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt32">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt32" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" />의 이 인스턴스와 같은 값을 갖는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlInt64">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt64" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" />의 이 인스턴스와 같은 값을 갖는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlMoney">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlMoney" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" />의 이 인스턴스와 같은 값을 갖는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlSingle">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlSingle" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" />의 이 인스턴스와 같은 값을 갖는 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToSqlString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlString" />으로 변환합니다.</summary>
      <returns>해당 값이 이 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체에 들어 있는 값을 나타내는 문자열인 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.ToString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.String" /> 구조체의 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 속성에 대한 문자열 표현을 포함하는 새 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDecimal.Truncate(System.Data.SqlTypes.SqlDecimal,System.Int32)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 값이 원하는 자리로 잘립니다.</summary>
      <param name="n">버림 처리될 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <param name="position">소수점 아래에서 숫자가 버림 처리될 자리입니다.</param>
      <returns>
        <paramref name="position" /> 매개 변수에 대해 음수 값을 제공하여 소수점 왼쪽으로 해당 자리까지의 값을 버립니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.BinData">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조의 값에 대한 이진 표현을 바이트 배열 형식으로 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 값에 대한 이진 표현을 포함하는 바이트 배열입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Data">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체에 대한 이진 표현을 정수 배열 형식으로 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체에 대한 이진 표현을 포함하는 정수 배열입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsNull">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체가 null인지 여부를 나타냅니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체가 null이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.IsPositive">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 구조체의 <see cref="T:System.Data.SqlTypes.SqlDecimal" />가 0보다 큰지 여부를 나타냅니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />가 null로 할당된 경우 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Precision">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성을 나타내는 데 사용된 숫자의 최대 자릿수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 <see langword="Value" />를 나타내는 데 사용되는 최대 자릿수입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Scale">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />를 확인하는 소수 자릿수를 가져옵니다.</summary>
      <returns>
        <see langword="Value" /> 속성을 나타내는 데 사용되는 소수 자릿수입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDecimal.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 값을 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>-79,228,162,514,264,337,593,543,950,335~79,228,162,514,162,514,264,337,593,543,950,335 범위의 숫자입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlDouble">
      <summary>데이터베이스에서 저장하거나 검색할 부동 소수점 숫자를 나타내며, 값 범위는 -1.79E +308 ~ 1.79E +308입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MaxValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체의 최대값을 나타내는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.MinValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />의 최소값을 나타내는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Null">
      <summary>이 <see cref="T:System.DBNull" /> 구조체 인스턴스에 할당할 수 있는 <see cref="T:System.Data.SqlTypes.SqlDouble" />을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlDouble.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 구조체 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 속성에 할당할 수 있는 0 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.#ctor(System.Double)">
      <summary>제공된 Double 매개 변수로 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체의 새 인스턴스를 초기화하여 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체의 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 속성을 설정합니다.</summary>
      <param name="value">새 <see cref="T:System.Data.SqlTypes.SqlDouble" />에 사용할 값을 갖는 Double입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Add(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>더하기 연산자는 두 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 피연산자의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>두 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 피연산자의 합계입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Data.SqlTypes.SqlDouble)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 인스턴스를 제공된 <see cref="T:System.Data.SqlTypes.SqlDouble" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.CompareTo(System.Object)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 인스턴스를 제공된 <see cref="T:System.Object" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Object" />입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Divide(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>나누기 연산자는 첫 번째 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 피연산자를 두 번째 피연산자로 나눕니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>나눗셈 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />의 두 인스턴스에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Equals(System.Object)">
      <summary>제공된 개체 매개 변수를 <see cref="P:System.Data.SqlTypes.SqlDateTime.Value" /> 개체의 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 속성과 비교합니다.</summary>
      <param name="value">비교할 개체입니다.</param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetHashCode">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 <see langword="string" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDouble" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDouble" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDouble" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDouble" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>곱하기 연산자는 두 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 피연산자의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>두 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 피연산자의 곱입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.NotEquals(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />의 두 인스턴스를 비교하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDouble" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Addition(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>더하기 연산자는 두 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 피연산자의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>두 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 피연산자의 합계입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Division(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>나누기 연산자는 첫 번째 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 피연산자를 두 번째 피연산자로 나눕니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>나눗셈 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Equality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />의 두 인스턴스에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlDouble">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlDouble" />로 변환합니다.</summary>
      <param name="x">변환될 <see cref="T:System.Data.SqlTypes.SqlBoolean" />입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 속성에 따라 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />이 0 또는 1인 새 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlBoolean" />이 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />인 경우 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체가 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Double">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체를 Double로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>지정된 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체와 같은 값의 Double입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlDouble">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlDouble" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />이 나타내는 숫자의 값과 같은 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlString" />입니다. <see cref="T:System.Data.SqlTypes.SqlString" />이 <see cref="F:System.Data.SqlTypes.SqlString.Null" />인 경우 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체가 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDouble" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDouble" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlDouble">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlDouble" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlByte.Value" />를 갖는 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlByte" />이 <see cref="F:System.Data.SqlTypes.SqlByte.Null" />인 경우 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체가 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlDouble">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlDouble" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlDecimal" />이 <see cref="F:System.Data.SqlTypes.SqlDecimal.Null" />인 경우 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체가 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlDouble">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlDouble" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlInt16" />이 <see cref="F:System.Data.SqlTypes.SqlInt16.Null" />인 경우 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체가 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlDouble">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlDouble" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt32" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt32" />이 <see cref="F:System.Data.SqlTypes.SqlInt32.Null" />인 경우 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체가 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlDouble">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlDouble" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt64" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt64" />이 <see cref="F:System.Data.SqlTypes.SqlInt64.Null" />인 경우 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체가 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlDouble">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlDouble" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlMoney" />입니다. <see cref="T:System.Data.SqlTypes.SqlMoney" />이 <see cref="F:System.Data.SqlTypes.SqlMoney.Null" />인 경우 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체가 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlDouble">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlDouble" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlSingle" />이 <see cref="F:System.Data.SqlTypes.SqlSingle.Null" />인 경우 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체가 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Implicit(System.Double)~System.Data.SqlTypes.SqlDouble">
      <summary>제공된 Double 값을 <see cref="T:System.Data.SqlTypes.SqlDouble" />로 변환합니다.</summary>
      <param name="x">변환할 Double 값입니다.</param>
      <returns>지정된 Double 매개 변수와 같은 값을 갖는 <see cref="T:System.Data.SqlTypes.SqlDouble" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Inequality(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />의 두 인스턴스를 비교하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDouble" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThan(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDouble" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_LessThanOrEqual(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlDouble" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Multiply(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>곱하기 연산자는 두 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 피연산자의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>두 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 피연산자의 곱입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_Subtraction(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>빼기 연산자는 첫 번째 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 피연산자에서 두 번째 피연산자를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>뺄셈 연산의 결과입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.op_UnaryNegation(System.Data.SqlTypes.SqlDouble)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체의 부정 값을 반환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>부정 값을 포함하는 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Parse(System.String)">
      <summary>숫자의 <see cref="T:System.String" /> 표현을 같은 값의 배정밀도 부동 소수점 숫자로 변환합니다.</summary>
      <param name="s">구문 분석할 <see langword="String" />입니다.</param>
      <returns>
        <see langword="String" />이 나타내는 값을 포함하는 <see cref="T:System.Data.SqlTypes.SqlDouble" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.Subtract(System.Data.SqlTypes.SqlDouble,System.Data.SqlTypes.SqlDouble)">
      <summary>빼기 연산자는 첫 번째 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 피연산자에서 두 번째 피연산자를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>뺄셈 연산의 결과입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>.NET Framework에서 사용하는 XML 스키마입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="reader">
        <see cref="T:System.Xml.XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="writer">
        <see cref="T:System.Xml.XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlBoolean">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlBoolean" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체의 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />가 0이 아니고 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />인 경우, <see cref="T:System.Data.SqlTypes.SqlDouble" />이 0이고 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />인 경우, <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체가 <see cref="F:System.Data.SqlTypes.SqlDouble.Null" />인 경우 <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see langword="SqlBoolean" /> 구조체는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />가 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlByte">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlByte" />으로 변환합니다.</summary>
      <returns>이 <see langword="SqlByte" /> 구조체의 <see langword="Value" />과 같은 <see langword="Value" />를 갖는 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlDecimal">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />으로 변환합니다.</summary>
      <returns>이 <see langword="SqlDecimal" />의 반올림된 값과 동일한 변환된 값을 갖는 새 <see langword="SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt16">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체 값의 정수 부분과 같은 <see langword="Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt32">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt32" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체 값의 정수 부분과 같은 <see langword="Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlInt64">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt64" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체 값의 정수 부분과 같은 <see langword="Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlMoney">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlMoney" />으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />의 값과 같은 <see cref="T:System.Data.SqlTypes.SqlDouble" />를 갖는 새 <see langword="SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlSingle">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlSingle" />으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />의 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />와 같은 <see cref="T:System.Data.SqlTypes.SqlDouble" />를 갖는 새 <see langword="SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToSqlString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlString" />으로 변환합니다.</summary>
      <returns>이 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />의 <see cref="T:System.Data.SqlTypes.SqlDouble" />를 나타내는 <see langword="SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlDouble.ToString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체를 문자열로 변환합니다.</summary>
      <returns>이 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />의 <see cref="T:System.Data.SqlTypes.SqlDouble" />를 나타내는 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.IsNull">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 인스턴스가 null인지 여부를 나타내는 부울 값을 반환합니다.</summary>
      <returns>
        <see langword="true" />가 null이면 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlDouble.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체의 값을 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체의 값입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlGuid">
      <summary>데이터베이스에서 저장하거나 검색할 GUID를 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlGuid.Null">
      <summary>이 <see cref="T:System.DBNull" /> 구조체 인스턴스에 할당할 수 있는 <see cref="T:System.Data.SqlTypes.SqlGuid" />을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Byte[])">
      <summary>제공된 바이트 배열 매개 변수를 사용하여 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">바이트 배열입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Guid)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 매개 변수를 사용하여 <see cref="T:System.Guid" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="g">
        <see cref="T:System.Guid" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.Int32,System.Int16,System.Int16,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
      <summary>지정된 값을 사용하여 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="a">
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 처음 4바이트입니다.</param>
      <param name="b">
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 다음 2바이트입니다.</param>
      <param name="c">
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 다음 2바이트입니다.</param>
      <param name="d">
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 다음 바이트입니다.</param>
      <param name="e">
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 다음 바이트입니다.</param>
      <param name="f">
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 다음 바이트입니다.</param>
      <param name="g">
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 다음 바이트입니다.</param>
      <param name="h">
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 다음 바이트입니다.</param>
      <param name="i">
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 다음 바이트입니다.</param>
      <param name="j">
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 다음 바이트입니다.</param>
      <param name="k">
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 다음 바이트입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.#ctor(System.String)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 매개 변수를 사용하여 <see cref="T:System.String" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">
        <see cref="T:System.String" /> 개체입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체를 제공된 <see cref="T:System.Data.SqlTypes.SqlGuid" />와 비교하여 상대 값 표시를 반환합니다. 마지막 6바이트 이상을 비교하지만 비교 시 마지막 6바이트를 최상의 바이트로 처리합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스는 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스는 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스는 개체보다 큽니다. 
또는 
개체는 null 참조(<see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.CompareTo(System.Object)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체를 제공된 개체와 비교하여 상대 값 표시를 반환합니다. 마지막 6바이트 이상을 비교하지만 비교 시 마지막 6바이트를 최상의 바이트로 처리합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Object" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스는 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스는 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스는 개체보다 큽니다. 
또는 
개체는 null 참조(<see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다. 인스턴스 중 하나가 null이면 <see langword="SqlGuid" />가 null이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Equals(System.Object)">
      <summary>제공된 개체 매개 변수를 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 개체의 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 속성과 비교합니다.</summary>
      <param name="value">비교할 개체입니다.</param>
      <returns>개체가 <see cref="T:System.Data.SqlTypes.SqlGuid" />의 인스턴스이고 둘이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetHashCode">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />
      </param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 <see langword="string" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlGuid" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlGuid" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlGuid" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlGuid" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.NotEquals(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlGuid" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Equality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlGuid" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlBinary)~System.Data.SqlTypes.SqlGuid">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlBinary" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlGuid" />로 변환합니다.</summary>
      <param name="x">
        <see langword="SqlBinary" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlBinary.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlBinary" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Guid">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 매개 변수를 <see cref="T:System.Guid" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Guid" />의 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" />와 같은 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlGuid" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlGuid">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlGuid" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 매개 변수가 나타내는 값과 같은 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" />을 갖는 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlGuid" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlGuid" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Implicit(System.Guid)~System.Data.SqlTypes.SqlGuid">
      <summary>제공된 <see cref="T:System.Guid" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlGuid" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Guid" />
      </param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 매개 변수와 같은 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" />을 갖는 새 <see cref="T:System.Guid" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_Inequality(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlGuid" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThan(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlGuid" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.op_LessThanOrEqual(System.Data.SqlTypes.SqlGuid,System.Data.SqlTypes.SqlGuid)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlGuid" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.Parse(System.String)">
      <summary>지정된 <see cref="T:System.String" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlGuid" />로 변환합니다.</summary>
      <param name="s">구문 분석할 <see langword="String" />입니다.</param>
      <returns>지정된 <see cref="T:System.Data.SqlTypes.SqlGuid" />에 포함된 값과 같은 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>
        <see langword="XmlSchema" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToByteArray">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체를 바이트 배열로 변환합니다.</summary>
      <returns>이 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 구조체의 <see cref="T:System.Data.SqlTypes.SqlGuid" />을 나타내는 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlBinary">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlBinary" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체의 바이트를 포함하는 <see langword="SqlBinary" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToSqlString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlString" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 문자열 표현을 포함하는 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlGuid.ToString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.String" /> 구조체의 문자열 표현을 포함하는 <see cref="T:System.Data.SqlTypes.SqlGuid" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.IsNull">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체가 null인지 여부를 나타내는 부울 값을 가져옵니다.</summary>
      <returns>
        <see langword="null" />이면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlGuid.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체의 값을 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>
        <see cref="T:System.Guid" /> 구조체입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt16">
      <summary>데이터베이스에서 저장하거나 검색할 16비트 부호 있는 정수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MaxValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" />의 최대값을 나타내는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.MinValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" />의 최소값을 나타내는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Null">
      <summary>이 <see cref="T:System.DBNull" /> 구조체 인스턴스에 할당할 수 있는 <see cref="T:System.Data.SqlTypes.SqlInt16" />을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt16.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 구조체 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 속성에 할당할 수 있는 0 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.#ctor(System.Int16)">
      <summary>제공된 정수(Short) 매개 변수를 사용하여 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">정수(Short)입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Add(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 피연산자의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>두 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 피연산자의 합계를 포함하는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 피연산자의 비트 AND를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>비트 AND의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 피연산자의 비트 OR를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>비트 OR의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Data.SqlTypes.SqlInt16)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 인스턴스를 제공된 <see cref="T:System.Data.SqlTypes.SqlInt16" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 크거나 개체가 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.CompareTo(System.Object)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 인스턴스를 제공된 <see cref="T:System.Object" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Object" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Divide(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 피연산자를 두 번째 피연산자로 나눕니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>나눗셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다. 인스턴스 중 하나가 null이면 <see langword="SqlInt16" />가 null이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Equals(System.Object)">
      <summary>지정된 개체를 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 개체의 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 속성과 비교합니다.</summary>
      <param name="value">비교할 개체입니다.</param>
      <returns>개체가 <see cref="T:System.Data.SqlTypes.SqlInt16" />의 인스턴스이고 둘이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 <see cref="T:System.String" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt16" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt16" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt16" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt16" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Mod(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 피연산자를 두 번째 피연산자로 나눈 다음 그 나머지를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>나머지를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" />를 갖는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 값을 나눈 다음 나머지를 반환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 값입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 값입니다.</param>
      <returns>나누기 후 나머지 연산을 <paramref name="x" />와 <paramref name="y" />에 대해 수행합니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>두 매개 변수의 곱을 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" />를 갖는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.NotEquals(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt16" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>~ 연산자는 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자에 대해 비트 1의 보수 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>지정된 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체의 보수를 포함하는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Addition(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 피연산자의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>두 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 피연산자의 합계를 포함하는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseAnd(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 피연산자의 비트 AND를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>비트 AND의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_BitwiseOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 피연산자의 비트 OR를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>비트 OR의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Division(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 피연산자를 두 번째 피연산자로 나눕니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>나눗셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Equality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt16" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_ExclusiveOr(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>제공된 매개 변수에 대해 비트 배타적 OR 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>비트 배타적 OR의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt16">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt16">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt16">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수의 정수 부분과 같은 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Int16">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 정수(Short)로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수의 값과 같은 값을 갖는 정수(Short)입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt16">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>제공된 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt16">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt16">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt16">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수의 정수 부분과 같은 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt16">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlString" /> 개체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 개체 매개 변수가 나타내는 값과 같은 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt16" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt16" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt16">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Implicit(System.Int16)~System.Data.SqlTypes.SqlInt16">
      <summary>제공된 정수(Short)를 <see cref="T:System.Data.SqlTypes.SqlInt16" />으로 변환합니다.</summary>
      <param name="x">정수(Short) 값입니다.</param>
      <returns>지정된 정수(Short)와 같은 값을 갖는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Inequality(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt16" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThan(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" />의 두 인스턴스를 비교하여 첫 번째 인스턴스가 두 번째 인스턴스보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt16" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 비교하여 첫 번째 구조체가 두 번째 구조체보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt16" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Modulus(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 피연산자를 두 번째 피연산자로 나눈 다음 그 나머지를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>나머지를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" />를 갖는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Multiply(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>두 매개 변수의 곱을 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" />를 갖는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_OnesComplement(System.Data.SqlTypes.SqlInt16)">
      <summary>~ 연산자는 <see cref="T:System.Data.SqlTypes.SqlByte" /> 피연산자에 대해 비트 1의 보수 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>지정된 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체의 보수를 포함하는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_Subtraction(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수에서 두 번째 매개 변수를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>뺄셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.op_UnaryNegation(System.Data.SqlTypes.SqlInt16)">
      <summary>단항 빼기 연산자는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 피연산자의 <see cref="T:System.Data.SqlTypes.SqlInt16" />을 부정합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>부정 값을 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Parse(System.String)">
      <summary>숫자의 <see cref="T:System.String" /> 표현을 해당하는 부호 있는 16비트 정수로 변환합니다.</summary>
      <param name="s">구문 분석할 <see langword="String" />입니다.</param>
      <returns>지정된 <see cref="T:System.String" />에 포함된 값과 같은 16비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Subtract(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수에서 두 번째 매개 변수를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>뺄셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>.NET Framework에서 사용하는 XML 스키마입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlBoolean">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlBoolean" />으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />가 0이 아니면 <see langword="true" />이고, 0이면 <see langword="false" />이고, 그렇지 않으면 Null입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlByte">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlByte" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />를 갖는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlInt16" />의 값이 0보다 작거나 255보다 크면 <see cref="T:System.OverflowException" />이 발생합니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDecimal">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체의 값과 같은 <see langword="Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlDouble">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDouble" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체의 값과 같은 <see langword="Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt32">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt32" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체의 값과 같은 <see langword="Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlInt64">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt64" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체의 값과 같은 <see langword="Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlMoney">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlMoney" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체의 값과 같은 <see langword="Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlSingle">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlSingle" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체의 값과 같은 <see langword="Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToSqlString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlString" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 인스턴스의 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />를 나타내는 <see cref="T:System.Data.SqlTypes.SqlInt16" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.ToString">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.String" /> 인스턴스의 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />을 나타내는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt16.Xor(System.Data.SqlTypes.SqlInt16,System.Data.SqlTypes.SqlInt16)">
      <summary>제공된 매개 변수에 대해 비트 배타적 OR 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>XOR 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.IsNull">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체가 null인지 여부를 나타냅니다.</summary>
      <returns>null이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 자세한 내용은 Null 값 처리를 참조 하세요.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt16.Value">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체의 값을 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체의 값을 나타내는 정수(Short)입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt32">
      <summary>데이터베이스에서 저장하거나 검색할 32비트 부호 있는 정수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MaxValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt32" />의 최대값을 나타내는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.MinValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt32" />의 최소값을 나타내는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Null">
      <summary>이 <see cref="T:System.DBNull" /> 클래스 인스턴스에 대해 할당할 수 있는 <see cref="T:System.Data.SqlTypes.SqlInt32" />을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt32.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 구조체 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 속성에 할당할 수 있는 0 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.#ctor(System.Int32)">
      <summary>제공된 정수 값을 사용하여 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">변환될 정수입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Add(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>지정된 두 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>지정된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체의 합계를 포함하는 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 피연산자의 비트 AND를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>비트 AND 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체의 비트 OR를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>비트 OR 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Data.SqlTypes.SqlInt32)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 인스턴스를 제공된 <see cref="T:System.Data.SqlTypes.SqlInt32" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.CompareTo(System.Object)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 인스턴스를 제공된 <see cref="T:System.Object" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Object" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Divide(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 번째 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수에서 첫 번째 매개 변수를 나눕니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>나눗셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다. 인스턴스 중 하나가 null이면 <see langword="SqlInt32" />가 null이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Equals(System.Object)">
      <summary>제공된 개체 매개 변수를 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 개체의 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 속성과 비교합니다.</summary>
      <param name="value">비교할 개체입니다.</param>
      <returns>개체가 <see cref="T:System.Data.SqlTypes.SqlInt32" />의 인스턴스이고 둘이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 <see langword="string" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 비교하여 첫 번째 매개 변수가 두 번째 매개 변수보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt32" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 비교하여 첫 번째 매개 변수가 두 번째 매개 변수보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt32" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 비교하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt32" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 비교하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt32" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Mod(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 두 번째 매개 변수로 나눈 다음 그 나머지를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>나머지를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" />를 갖는 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 값을 나눈 다음 나머지를 반환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 값입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 값입니다.</param>
      <returns>나누기 후 나머지 연산을 <paramref name="x" />와 <paramref name="y" />에 대해 수행합니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>두 매개 변수의 곱을 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" />를 갖는 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.NotEquals(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt32" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체에 대해 비트 1의 보수 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>1의 보수 연산 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Addition(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>지정된 두 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>지정된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체의 합계를 포함하는 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성을 갖는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseAnd(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 피연산자의 비트 AND를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>비트 AND 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_BitwiseOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체의 비트 OR를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>비트 OR 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Division(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 번째 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수에서 첫 번째 매개 변수를 나눕니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>나눗셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Equality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt32" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_ExclusiveOr(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체에 대해 비트 배타적 OR 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>비트 배타적 OR 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt32">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlBoolean" />을 <see cref="T:System.Data.SqlTypes.SqlInt32" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt32">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt32" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt32">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlDouble" />을 <see cref="T:System.Data.SqlTypes.SqlInt32" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수의 정수 부분과 같은 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Int32">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체를 정수로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>변환된 정수 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlInt32">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt64" />을 <see cref="T:System.Data.SqlTypes.SqlInt32" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 속성을 갖는 새 <see langword="SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt32">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt32" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt32">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlSingle" />을 <see cref="T:System.Data.SqlTypes.SqlInt32" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수의 정수 부분과 같은 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt32">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlString" /> 개체를 <see cref="T:System.Data.SqlTypes.SqlInt32" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수가 나타내는 값과 같은 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 비교하여 첫 번째 매개 변수가 두 번째 매개 변수보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt32" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 비교하여 첫 번째 매개 변수가 두 번째 매개 변수보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt32" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt32">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlByte" /> 속성을 <see cref="T:System.Data.SqlTypes.SqlInt32" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt32">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt16" />을 <see cref="T:System.Data.SqlTypes.SqlInt32" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Implicit(System.Int32)~System.Data.SqlTypes.SqlInt32">
      <summary>제공된 정수를 <see cref="T:System.Data.SqlTypes.SqlInt32" />로 변환합니다.</summary>
      <param name="x">정수 값입니다.</param>
      <returns>정수 매개 변수와 같은 값 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Inequality(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt32" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThan(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 비교하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt32" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 비교하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt32" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Modulus(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 두 번째 매개 변수로 나눈 다음 그 나머지를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>나머지를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" />를 갖는 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Multiply(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>두 매개 변수의 곱을 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" />를 갖는 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_OnesComplement(System.Data.SqlTypes.SqlInt32)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체에 대해 비트 1의 보수 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>1의 보수 연산 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_Subtraction(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수에서 두 번째 매개 변수를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>뺄셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.op_UnaryNegation(System.Data.SqlTypes.SqlInt32)">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 피연산자의 <see cref="T:System.Data.SqlTypes.SqlInt32" />을 부정합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>부정 값을 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Parse(System.String)">
      <summary>숫자의 <see cref="T:System.String" /> 표현을 해당하는 부호 있는 32비트 정수로 변환합니다.</summary>
      <param name="s">구문 분석할 <see cref="T:System.String" />입니다.</param>
      <returns>지정된 <see cref="T:System.String" />에 포함된 값과 같은 32비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Subtract(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수에서 두 번째 매개 변수를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>뺄셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 속성을 갖는 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>
        <see langword="XmlSchema" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlBoolean">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlBoolean" />으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />가 0이 아니면 <see langword="true" />이고, 0이면 <see langword="false" />이고, 그렇지 않으면 Null입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlByte">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlByte" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 <see langword="Value" />과 같은 <see langword="Value" />를 갖는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다. <see langword="SqlInt32" />의 값이 0보다 작거나 255보다 크면 <see cref="T:System.OverflowException" />이 발생합니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDecimal">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlDouble">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDouble" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlDouble" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt16">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt16" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlInt64">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt64" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt64" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlMoney">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlMoney" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlMoney" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlSingle">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlSingle" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlSingle" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToSqlString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlString" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlString" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.ToString">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.String" />의 값과 같은 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt32.Xor(System.Data.SqlTypes.SqlInt32,System.Data.SqlTypes.SqlInt32)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체에 대해 비트 배타적 OR 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>비트 배타적 OR 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.IsNull">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체가 null인지 여부를 나타냅니다.</summary>
      <returns>이 속성은 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />가 null이면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt32.Value">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체의 값을 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">속성에 <see cref="F:System.Data.SqlTypes.SqlInt32.Null" />이 포함된 경우</exception>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체의 값을 나타내는 정수입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlInt64">
      <summary>데이터베이스에서 저장하거나 검색할 64비트 부호 있는 정수를 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MaxValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체의 최대값을 나타내는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.MinValue">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체의 최소값을 나타내는 상수입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Null">
      <summary>이 <see cref="T:System.DBNull" /> 구조체 인스턴스에 할당할 수 있는 <see cref="T:System.Data.SqlTypes.SqlInt64" />을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlInt64.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 구조체 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 속성에 할당할 수 있는 0 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.#ctor(System.Int64)">
      <summary>제공된 정수(Long)를 사용하여 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">정수(Long)입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Add(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 합계와 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 피연산자의 비트 AND를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>비트 AND 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 피연산자의 비트 OR를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>비트 OR 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Data.SqlTypes.SqlInt64)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 인스턴스를 제공된 <see cref="T:System.Data.SqlTypes.SqlInt64" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.CompareTo(System.Object)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 인스턴스를 제공된 <see cref="T:System.Object" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Object" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Divide(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수를 두 번째 매개 변수로 나눕니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>나눗셈 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 속성을 갖는 새 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다. 인스턴스 중 하나가 null이면 <see langword="SqlInt64" />가 null이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Equals(System.Object)">
      <summary>제공된 개체 매개 변수를 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 개체의 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 속성과 비교합니다.</summary>
      <param name="value">비교할 개체입니다.</param>
      <returns>개체가 <see cref="T:System.Data.SqlTypes.SqlInt64" />의 인스턴스이고 둘이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 <see langword="string" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt64" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt64" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt64" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt64" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Mod(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수를 두 번째 매개 변수로 나눈 다음 그 나머지를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>나머지를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 속성을 갖는 새 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 개의 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 값을 나눈 다음 나머지를 반환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 값입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 값입니다.</param>
      <returns>나누기 후 나머지 연산을 <paramref name="x" />와 <paramref name="y" />에 대해 수행합니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 곱과 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.NotEquals(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 SqlInt64 매개 변수에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt64" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 피연산자에 대해 비트 1의 보수 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 1의 보수와 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Addition(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 합계와 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseAnd(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 피연산자의 비트 AND를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>비트 AND 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_BitwiseOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 피연산자의 비트 OR를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>비트 OR 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Division(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수를 두 번째 매개 변수로 나눕니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>나눗셈 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 속성을 갖는 새 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Equality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt64" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_ExclusiveOr(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>제공된 매개 변수에 대해 비트 배타적 OR 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>비트 배타적 OR 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlInt64">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlInt64" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlInt64">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlInt64" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 정수 부분과 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlInt64">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt64" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 정수 부분과 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Int64">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수를 Long으로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />의 <see cref="T:System.Data.SqlTypes.SqlInt64" />과 같은 새 Long 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlInt64">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlInt64" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 정수 부분과 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlInt64">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlInt64" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 정수 부분을 포함하는 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlInt64">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlInt64" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlString" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수가 나타내는 값과 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt64" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt64" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlInt64">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlInt64" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlInt64">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlInt64" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlInt64">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlInt64" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlInt64">
      <summary>Long 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlInt64" />로 변환합니다.</summary>
      <param name="x">정수(Long) 값입니다.</param>
      <returns>Long 매개 변수의 값과 같은 <see cref="T:System.Data.SqlTypes.SqlInt64" />을 갖는 새 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Inequality(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 SqlInt64 매개 변수에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt64" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThan(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt64" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_LessThanOrEqual(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlInt64" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Modulus(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수를 두 번째 매개 변수로 나눈 다음 그 나머지를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>나머지를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 속성을 갖는 새 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Multiply(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>두 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 곱과 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_OnesComplement(System.Data.SqlTypes.SqlInt64)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 피연산자에 대해 비트 1의 보수 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 1의 보수와 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_Subtraction(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수에서 두 번째 매개 변수를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>나눗셈 연산의 결과와 같은 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 속성을 갖는 새 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.op_UnaryNegation(System.Data.SqlTypes.SqlInt64)">
      <summary>단항 빼기 연산자는 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 피연산자의 <see cref="T:System.Data.SqlTypes.SqlInt64" />을 부정합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수의 부정 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />을 갖는 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Parse(System.String)">
      <summary>숫자의 <see cref="T:System.String" /> 표현을 해당하는 부호 있는 64비트 정수로 변환합니다.</summary>
      <param name="s">구문 분석할 <see cref="T:System.String" />입니다.</param>
      <returns>지정된 <see cref="T:System.String" />에 포함된 값과 같은 64비트 부호 있는 정수입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Subtract(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>첫 번째 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수에서 두 번째 매개 변수를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>나눗셈 연산의 결과와 같은 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 속성을 갖는 새 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>
        <see langword="XmlSchema" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlBoolean">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlBoolean" />으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />가 0이 아니면 <see langword="true" />이고, 0이면 <see langword="false" />이고, 그렇지 않으면 Null입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlByte">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlByte" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 <see langword="Value" />과 같은 <see langword="Value" />를 갖는 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDecimal">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlInt64" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlDouble">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDouble" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlDouble" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlInt64" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt16">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt16" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlInt64" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlInt32">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt32" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt64" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlInt64" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlMoney">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlMoney" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlMoney" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlInt64" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlSingle">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlSingle" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlSingle" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlInt64" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToSqlString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlString" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlString" />의 값을 나타내는 <see cref="T:System.Data.SqlTypes.SqlInt64" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.ToString">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlInt64" />의 이 인스턴스를 <see cref="T:System.String" />로 변환합니다.</summary>
      <returns>이 <see cref="T:System.String" />의 값을 나타내는 <see cref="T:System.Data.SqlTypes.SqlInt64" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlInt64.Xor(System.Data.SqlTypes.SqlInt64,System.Data.SqlTypes.SqlInt64)">
      <summary>제공된 매개 변수에 대해 비트 배타적 OR 연산을 수행합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>비트 배타적 OR 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.IsNull">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체가 null인지 여부를 나타내는 부울 값을 가져옵니다.</summary>
      <returns>null이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlInt64.Value">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체의 값을 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체의 값을 나타내는 정수(Long)입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlMoney">
      <summary>데이터베이스에서 저장하거나 검색할 통화 단위를 1/10,000의 정밀도로 나타내며, 통화 값 범위는 -2 63 (-922,337,203,685,477.5808) ~ 2 63 -1(+922,337,203,685,477.5807)입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MaxValue">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 클래스 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 속성에 할당할 수 있는 최대값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.MinValue">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 클래스 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 속성에 할당할 수 있는 최소값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Null">
      <summary>이 <see cref="T:System.DBNull" /> 클래스 인스턴스에 대해 할당할 수 있는 <see cref="T:System.Data.SqlTypes.SqlMoney" />을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlMoney.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 클래스 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 속성에 할당할 수 있는 0 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Decimal)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 값을 사용하여 <see cref="T:System.Decimal" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">초기화할 통화 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Double)">
      <summary>지정된 Double 값을 사용하여 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">초기화할 통화 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int32)">
      <summary>지정된 정수 값을 사용하여 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">초기화할 통화 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.#ctor(System.Int64)">
      <summary>지정된 정수(Long) 값을 사용하여 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">초기화할 통화 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Add(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />에 두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 합계를 포함하는 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Data.SqlTypes.SqlMoney)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 인스턴스를 제공된 <see cref="T:System.Data.SqlTypes.SqlMoney" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.CompareTo(System.Object)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 인스턴스를 제공된 <see cref="T:System.Object" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Object" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Divide(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>나누기 연산자는 첫 번째 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수를 두 번째 매개 변수로 나눕니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>나눗셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 속성을 갖는 새 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다. 인스턴스 중 하나가 null이면 <see langword="SqlMoney" />가 null이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Equals(System.Object)">
      <summary>제공된 개체 매개 변수를 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 개체의 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 속성과 비교합니다.</summary>
      <param name="value">비교할 개체입니다.</param>
      <returns>개체가 <see cref="T:System.Data.SqlTypes.SqlMoney" />의 인스턴스이고 둘이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 가져옵니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 <see langword="string" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlMoney" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlMoney" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlMoney" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlMoney" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>곱하기 연산자는 두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>곱셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlMoney" />을 갖는 새 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.NotEquals(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlMoney" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Addition(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />에 두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 합계를 포함하는 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Division(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>나누기 연산자는 첫 번째 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수를 두 번째 매개 변수로 나눕니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>나눗셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 속성을 갖는 새 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Equality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlMoney" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlMoney">
      <summary>이 암시적 연산자는 제공된 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlMoney" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlMoney">
      <summary>이 연산자는 제공된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlMoney" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlMoney">
      <summary>이 연산자는 제공된 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlMoney" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Decimal">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Decimal" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Decimal" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />와 같은 값을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlMoney">
      <summary>이 연산자는 제공된 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlMoney" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlMoney">
      <summary>이 연산자는 <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlMoney" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlString" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수가 나타내는 값과 같은 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Explicit(System.Double)~System.Data.SqlTypes.SqlMoney">
      <summary>이 암시적 연산자는 제공된 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlMoney" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 속성과 같은 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlMoney" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlMoney" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlMoney">
      <summary>이 암시적 연산자는 제공된 <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlMoney" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlMoney">
      <summary>이 암시적 연산자는 제공된 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlMoney" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlMoney">
      <summary>이 암시적 연산자는 제공된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlMoney" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlMoney">
      <summary>이 암시적 연산자는 제공된 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlMoney" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Decimal)~System.Data.SqlTypes.SqlMoney">
      <summary>
        <see cref="T:System.Decimal" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlMoney" />로 변환합니다.</summary>
      <param name="x">변환될 <see cref="T:System.Decimal" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 값과 같은 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />을 갖는 새 <see cref="T:System.Decimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Implicit(System.Int64)~System.Data.SqlTypes.SqlMoney">
      <summary>이 암시적 연산자는 제공된 <see cref="T:System.Int64" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlMoney" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Int64" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 값과 같은 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 속성을 갖는 새 <see cref="T:System.Int64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Inequality(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlMoney" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThan(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlMoney" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_LessThanOrEqual(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlMoney" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Multiply(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>곱하기 연산자는 두 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>곱셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlMoney" />을 갖는 새 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_Subtraction(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>빼기 연산자는 첫 번째 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수에서 두 번째 매개 변수를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>뺄셈 결과를 포함하는 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.op_UnaryNegation(System.Data.SqlTypes.SqlMoney)">
      <summary>단항 마이너스 연산자는 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수를 부정합니다.</summary>
      <param name="x">부정할 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>부정 연산의 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlMoney" />을 갖는 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Parse(System.String)">
      <summary>숫자의 <see cref="T:System.String" /> 표현을 해당하는 <see cref="T:System.Data.SqlTypes.SqlMoney" />로 변환합니다.</summary>
      <param name="s">구문 분석할 <see langword="String" />입니다.</param>
      <returns>지정된 <see cref="T:System.Data.SqlTypes.SqlMoney" />에 포함된 값과 같은 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.Subtract(System.Data.SqlTypes.SqlMoney,System.Data.SqlTypes.SqlMoney)">
      <summary>빼기 연산자는 첫 번째 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수에서 두 번째 매개 변수를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>뺄셈 결과를 포함하는 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>
        <see langword="XmlSchema" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDecimal">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 인스턴스의 값을 <see cref="T:System.Decimal" /> 구조체로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Decimal" /> 구조체의 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" /> 속성과 같은 값을 갖는 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToDouble">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Double" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체와 같은 값을 갖는 Double입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt32">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Int32" />로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체의 정수 부분과 같은 값을 갖는 32비트 정수입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToInt64">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체의 값을 <see cref="T:System.Int64" />로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체의 정수 부분과 같은 값을 갖는 64비트 정수입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlBoolean">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlBoolean" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체의 값이 0이면 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체의 값이 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlByte">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlByte" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlByte" />의 값과 같은 <see cref="T:System.Data.SqlTypes.SqlMoney" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDecimal">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlMoney" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlDouble">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDouble" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlDouble" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlMoney" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt16">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt16" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlMoney" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt32">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt32" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt32" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlMoney" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlInt64">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt64" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt64" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlMoney" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlSingle">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlSingle" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlSingle" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlMoney" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToSqlString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlString" />으로 변환합니다.</summary>
      <returns>해당 값이 이 <see cref="T:System.Data.SqlTypes.SqlString" />의 값을 나타내는 문자열인 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlMoney.ToString">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlMoney" />의 이 인스턴스를 문자열로 변환합니다.</summary>
      <returns>해당 값이 이 <see cref="T:System.Data.SqlTypes.SqlMoney" />의 값에 대한 문자열 표현인 문자열입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.IsNull">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체가 null인지 여부를 나타내는 부울 값을 반환합니다.</summary>
      <returns>null이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlMoney.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체 인스턴스의 통화 값을 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">이 속성이 null로 설정되어 있는 경우</exception>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체 인스턴스의 통화 값입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNotFilledException">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 클래스는 독립 실행형 구성 요소로는 사용할 수 없고 다른 클래스가 표준 기능을 파생하는 원본 클래스로만 사용할 수 있습니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNotFilledException.#ctor(System.String,System.Exception)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlNotFilledException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외가 throw되었을 때 표시할 문자열입니다.</param>
      <param name="e">내부 예외에 대한 참조입니다.</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlNullValueException">
      <summary>
        <see cref="N:System.Data.SqlTypes" /> 구조체의 <see langword="Value" /> 속성이 null로 설정된 경우 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor">
      <summary>오류를 설명하는 시스템 제공 메시지를 사용하여 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String)">
      <summary>오류를 설명하는 지정한 메시지를 사용하여 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 현재 시스템 culture에 대해 이 문자열이 지역화되었는지 확인하려면 이 생성자의 호출자가 필요합니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlNullValueException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Data.SqlTypes.SqlNullValueException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 현재 시스템 culture에 대해 이 문자열이 지역화되었는지 확인하려면 이 생성자의 호출자가 필요합니다.</param>
      <param name="e">현재 예외의 원인인 예외입니다. <c>innerException</c> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlSingle">
      <summary>데이터베이스에서 저장하거나 검색할 부동 소수점 숫자를 나타내며, 값 범위는 -3.40E +38 ~ 3.40E +38입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MaxValue">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 클래스 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 속성에 할당할 수 있는 최대값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.MinValue">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 클래스 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 속성에 할당할 수 있는 최소값을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Null">
      <summary>이 <see cref="T:System.DBNull" /> 구조체 인스턴스에 할당할 수 있는 <see cref="T:System.Data.SqlTypes.SqlSingle" />을 나타냅니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlSingle.Zero">
      <summary>
        <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 클래스 인스턴스의 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 속성에 할당할 수 있는 0 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Double)">
      <summary>제공된 Double 매개 변수를 사용하여 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">새 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 구조체의 <see cref="T:System.Data.SqlTypes.SqlSingle" />로 사용할 Double 값입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.#ctor(System.Single)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="value">새 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 구조체의 <see cref="T:System.Data.SqlTypes.SqlSingle" />로 사용할 부동 소수점 숫자입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Add(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>지정된 두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>지정된 두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체의 합계를 포함하는 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Data.SqlTypes.SqlSingle)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 인스턴스를 제공된 <see cref="T:System.Data.SqlTypes.SqlSingle" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.CompareTo(System.Object)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 인스턴스를 제공된 <see cref="T:System.Object" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Object" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Divide(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>첫번째 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 두번째 구조체로 나눕니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>나눗셈 결과를 포함하는 <see langword="SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다. 인스턴스 중 하나가 null이면 <see langword="SqlSingle" />가 null이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Equals(System.Object)">
      <summary>제공된 개체 매개 변수를 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 개체의 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 속성과 비교합니다.</summary>
      <param name="value">비교할 개체입니다.</param>
      <returns>개체가 <see cref="T:System.Data.SqlTypes.SqlSingle" />의 인스턴스이고 둘이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 가져옵니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />
      </param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 <see langword="string" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 피연산자에 대해 논리 비교를 수행하여 첫 번째 피연산자가 두 번째 피연산자보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlSingle" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체에 대해 논리 비교를 수행하여 첫 번째 구조체가 두 번째 구조체보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlSingle" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlSingle" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수의 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlSingle" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>지정된 두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>곱셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.NotEquals(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlSingle" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Addition(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>지정된 두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체의 합계를 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>지정된 두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체의 합계를 포함하는 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Division(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>첫번째 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 두번째 구조체로 나눕니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>나눗셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Equality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>두 SqlSingle 매개 변수에 대해 논리 비교를 수행하여 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlSingle" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlSingle">
      <summary>이 암시적 연산자는 제공된 <see cref="T:System.Data.SqlTypes.SqlBoolean" />을 <see cref="T:System.Data.SqlTypes.SqlSingle" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlBoolean.ByteValue" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlSingle">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlSingle" />로 변환합니다.</summary>
      <param name="x">변환될 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 매개 변수입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlDouble.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Single">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 부동 소수점으로 변환합니다.</summary>
      <param name="x">부동 소수점으로 변환될 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체의 값을 포함하는 부동 소수점입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Explicit(System.Data.SqlTypes.SqlString)~System.Data.SqlTypes.SqlSingle">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlSingle" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlString" /> 개체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수가 나타내는 값과 같은 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 피연산자에 대해 논리 비교를 수행하여 첫 번째 피연산자가 두 번째 피연산자보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlSingle" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체에 대해 논리 비교를 수행하여 첫 번째 구조체가 두 번째 구조체보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlSingle" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlSingle">
      <summary>이 암시적 연산자는 <see cref="T:System.Data.SqlTypes.SqlByte" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlSingle" />로 변환합니다.</summary>
      <param name="x">변환될 <see cref="T:System.Data.SqlTypes.SqlByte" />입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />과 같은 <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 속성을 갖는 새 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlSingle">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlSingle" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlDecimal.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlSingle">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlSingle" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlInt16.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlSingle">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlSingle" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlInt32.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlSingle">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlSingle" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlInt64.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlSingle">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlSingle" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />와 같은 <see cref="P:System.Data.SqlTypes.SqlMoney.Value" />를 갖는 새 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Implicit(System.Single)~System.Data.SqlTypes.SqlSingle">
      <summary>지정된 부동 소수점 값을 <see cref="T:System.Data.SqlTypes.SqlSingle" />로 변환합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" />로 변환될 부동 소수점 값입니다.</param>
      <returns>지정된 부동 소수점의 값을 포함하는 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Inequality(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlSingle" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThan(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수에 대해 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlSingle" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_LessThanOrEqual(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수의 논리 비교를 수행하여 첫 번째 매개 변수가 두 번째 매개 변수보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlSingle" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Multiply(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>지정된 두 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체의 곱을 계산합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>곱셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_Subtraction(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>첫번째 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체에서 두번째 구조체를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>뺄셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.op_UnaryNegation(System.Data.SqlTypes.SqlSingle)">
      <summary>지정된 <see cref="P:System.Data.SqlTypes.SqlSingle.Value" /> 구조체의 <see cref="T:System.Data.SqlTypes.SqlSingle" />을 부정합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>부정 값을 포함하는 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Parse(System.String)">
      <summary>지정된 <see cref="T:System.String" />을 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체로 변환합니다.</summary>
      <param name="s">구문 분석할 <see cref="T:System.String" />입니다.</param>
      <returns>지정된 <see cref="T:System.Data.SqlTypes.SqlSingle" />에 포함된 값과 같은 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.Subtract(System.Data.SqlTypes.SqlSingle,System.Data.SqlTypes.SqlSingle)">
      <summary>첫번째 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체에서 두번째 구조체를 뺍니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>뺄셈 결과를 포함하는 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>
        <see langword="XmlSchema" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlBoolean">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlBoolean" />으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlSingle.Value" />가 0이 아니면 <see langword="true" />이고, 0이면 <see langword="false" />이고, 그렇지 않으면 Null입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlByte">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlByte" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 <see langword="Value" />과 같은 <see langword="Value" />를 갖는 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다. <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체의 Value가 <see langword="true" />이면 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 <see langword="Value" />가 1입니다. 그렇지 않으면 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체의 <see langword="Value" />는 0입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDecimal">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />으로 변환합니다.</summary>
      <returns>이 <see langword="SqlDecimal" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlSingle" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlDouble">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDouble" />으로 변환합니다.</summary>
      <returns>이 <see langword="SqlDouble" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlSingle" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt16">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />으로 변환합니다.</summary>
      <returns>이 <see langword="SqlInt16" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlSingle" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt32">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt32" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt32" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlSingle" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlInt64">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt64" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt64" />의 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlSingle" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlMoney">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlMoney" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlMoney" />의 값과 같은 <see cref="T:System.Data.SqlTypes.SqlSingle" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToSqlString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlString" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlString" />의 값을 나타내는 <see cref="T:System.Data.SqlTypes.SqlSingle" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlSingle.ToString">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlSingle" />의 값을 나타내는 <see langword="String" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.IsNull">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체가 null인지 여부를 나타냅니다.</summary>
      <returns>null이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlSingle.Value">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체의 값을 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <returns>-3.40E+38 ~ 3.40E+38 범위의 부동 소수점 값입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlString">
      <summary>데이터베이스에서 저장하거나 검색할 문자의 가변 길이 스트림을 나타냅니다. <see cref="T:System.Data.SqlTypes.SqlString" />에는 해당하는 .NET Framework <see cref="T:System.String" /> 데이터 형식과 다른 기본 데이터 구조가 있습니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort">
      <summary>영문자 값이 아닌 숫자 문자 값에 따라 정렬을 수행하도록 지정합니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.BinarySort2">
      <summary>영문자 값이 아닌 숫자 문자 값에 따라 정렬을 수행하도록 지정합니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreCase">
      <summary>대/소문자를 무시하면서 <see cref="T:System.Data.SqlTypes.SqlString" /> 비교를 수행하도록 지정합니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreKanaType">
      <summary>가나 형식을 무시하면서 문자열 비교를 수행하도록 지정합니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreNonSpace">
      <summary>분음 부호와 같이 공백 없는 조합 문자를 무시하면서 문자열 비교를 수행하도록 지정합니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.IgnoreWidth">
      <summary>문자 너비를 무시하면서 문자열 비교를 수행하도록 지정합니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.SqlString.Null">
      <summary>이 <see cref="T:System.DBNull" /> 구조체 인스턴스에 할당할 수 있는 <see cref="T:System.Data.SqlTypes.SqlString" />을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[])">
      <summary>지정된 로캘 ID, 비교 옵션 및 데이터를 사용하여 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="lcid">새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 해당 지역 로캘과 언어를 지정합니다.</param>
      <param name="compareOptions">새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 비교 옵션을 지정합니다.</param>
      <param name="data">저장할 데이터 배열입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Boolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="lcid">새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 해당 지역 로캘과 언어를 지정합니다.</param>
      <param name="compareOptions">새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 비교 옵션을 지정합니다.</param>
      <param name="data">저장할 데이터 배열입니다.</param>
      <param name="fUnicode">유니코드로 인코딩되었으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="lcid">새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 해당 지역 로캘과 언어를 지정합니다.</param>
      <param name="compareOptions">새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 비교 옵션을 지정합니다.</param>
      <param name="data">저장할 데이터 배열입니다.</param>
      <param name="index">배열 내의 시작 인덱스입니다.</param>
      <param name="count">인덱스에서 복사할 문자의 수입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.Int32,System.Data.SqlTypes.SqlCompareOptions,System.Byte[],System.Int32,System.Int32,System.Boolean)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="lcid">새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 해당 지역 로캘과 언어를 지정합니다.</param>
      <param name="compareOptions">새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 비교 옵션을 지정합니다.</param>
      <param name="data">저장할 데이터 배열입니다.</param>
      <param name="index">배열 내의 시작 인덱스입니다.</param>
      <param name="count">인덱스에서 복사할 문자의 수입니다.</param>
      <param name="fUnicode">유니코드로 인코딩되었으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="data">저장할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32)">
      <summary>지정된 문자열과 로캘 ID 값을 사용하여 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="data">저장할 문자열입니다.</param>
      <param name="lcid">새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 해당 지역 로캘과 언어를 지정합니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.#ctor(System.String,System.Int32,System.Data.SqlTypes.SqlCompareOptions)">
      <summary>지정된 문자열, 로캘 ID 및 비교 옵션 값을 사용하여 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="data">저장할 문자열입니다.</param>
      <param name="lcid">새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 해당 지역 로캘과 언어를 지정합니다.</param>
      <param name="compareOptions">새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 비교 옵션을 지정합니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Add(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>두 개의 지정된 <see cref="T:System.Data.SqlTypes.SqlString" /> 값을 연결하여 새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 만듭니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>
        <paramref name="x" />와 <paramref name="y" />의 연결된 값인 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Clone">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 개체의 복사본을 만듭니다.</summary>
      <returns>모든 속성 값이 원본과 같은 새 <see cref="T:System.Data.SqlTypes.SqlString" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareOptionsFromSqlCompareOptions(System.Data.SqlTypes.SqlCompareOptions)">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 값과 동등한 <see cref="T:System.Globalization.CompareOptions" /> 열거형을 가져옵니다.</summary>
      <param name="compareOptions">
        <see cref="T:System.Data.SqlTypes.SqlCompareOptions" /> 구조체의 비교 옵션을 설명하는 <see cref="T:System.Data.SqlTypes.SqlString" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 <see langword="CompareOptions" />에 해당하는 <see langword="SqlCompareOptions" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Data.SqlTypes.SqlString)">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 인스턴스를 제공된 <see cref="T:System.Data.SqlTypes.SqlString" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Data.SqlTypes.SqlString" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.CompareTo(System.Object)">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 개체를 제공된 <see cref="T:System.Object" />와 비교하여 상대 값 표시를 반환합니다.</summary>
      <param name="value">비교할 <see cref="T:System.Object" /> 입니다.</param>
      <returns>인스턴스와 개체의 상대 값을 나타내는 부호 있는 숫자입니다.  
  
 <list type="table"><listheader><term> 반환 값</term><description> 조건</description></listheader><item><term> 0보다 작음</term><description> 이 인스턴스가 개체보다 작습니다.</description></item><item><term> 0</term><description> 이 인스턴스가 개체와 동일합니다.</description></item><item><term> 0보다 큼</term><description> 이 인스턴스가 개체보다 큽니다. 
또는 
개체가 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</description></item></list></returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Concat(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>지정된 두 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 연결합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>새로 연결되어 두 <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수의 내용을 나타내는 값이 포함된 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlString" /> 피연산자에 대해 논리 비교를 수행하여 둘이 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>두 값이 같으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다. 인스턴스 중 하나가 null이면 <see langword="SqlString" />가 null이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.Equals(System.Object)">
      <summary>제공된 개체 매개 변수를 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 개체의 <see cref="T:System.Data.SqlTypes.SqlString" /> 속성과 비교합니다.</summary>
      <param name="value">비교할 개체입니다.</param>
      <returns>개체가 <see cref="T:System.Data.SqlTypes.SqlString" />의 인스턴스이고 둘이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 가져옵니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetNonUnicodeBytes">
      <summary>ANSI 형식으로 된 <see cref="T:System.Data.SqlTypes.SqlString" />의 내용을 포함하는 바이트 배열을 가져옵니다.</summary>
      <returns>ANSI 형식으로 된 <see cref="T:System.Data.SqlTypes.SqlString" />의 내용을 포함하는 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetUnicodeBytes">
      <summary>유니코드 형식으로 된 <see cref="T:System.Data.SqlTypes.SqlString" />의 내용을 포함하는 바이트 배열을 가져옵니다.</summary>
      <returns>유니코드 형식으로 된 <see cref="T:System.Data.SqlTypes.SqlString" />의 내용을 포함하는 바이트 배열입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />
      </param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 <see langword="string" /> 값입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlString" /> 피연산자에 대해 논리 비교를 수행하여 첫 번째 피연산자가 두 번째 피연산자보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlString" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlString" /> 피연산자에 대해 논리 비교를 수행하여 첫 번째 피연산자가 두 번째 피연산자보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlString" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlString" /> 피연산자에 대해 논리 비교를 수행하여 첫 번째 피연산자가 두 번째 피연산자보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlString" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlString" /> 피연산자에 대해 논리 비교를 수행하여 첫 번째 피연산자가 두 번째 피연산자보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlString" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.NotEquals(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlString" /> 피연산자에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlString" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Addition(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>지정된 두 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 연결합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>새로 연결되어 두 <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수의 내용을 나타내는 값이 포함된 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Equality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlString" /> 피연산자에 대해 논리 비교를 수행하여 둘이 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlString" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlBoolean)~System.Data.SqlTypes.SqlString">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlString" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlBoolean" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수의 문자열 표현을 포함하는 새 <see cref="T:System.Data.SqlTypes.SqlBoolean" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlByte)~System.Data.SqlTypes.SqlString">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlString" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlByte" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수의 문자열 표현을 포함하는 새 <see cref="T:System.Data.SqlTypes.SqlByte" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDateTime)~System.Data.SqlTypes.SqlString">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlString" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlDateTime" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수의 문자열 표현을 포함하는 새 <see cref="T:System.Data.SqlTypes.SqlDateTime" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDecimal)~System.Data.SqlTypes.SqlString">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlDecimal" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlString" />로 변환합니다.</summary>
      <param name="x">변환할 <see langword="SqlDecimal" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수의 문자열 표현을 포함하는 새 <see langword="SqlDecimal" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlDouble)~System.Data.SqlTypes.SqlString">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlString" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlDouble" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수의 문자열 표현을 포함하는 새 <see cref="T:System.Data.SqlTypes.SqlDouble" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlGuid)~System.Data.SqlTypes.SqlString">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlString" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlGuid" /> 구조체입니다.</param>
      <returns>지정된 <see cref="T:System.Data.SqlTypes.SqlString" />의 문자열 표현이 값인 <see cref="T:System.Data.SqlTypes.SqlGuid" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt16)~System.Data.SqlTypes.SqlString">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlString" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수의 문자열 표현을 포함하는 새 <see cref="T:System.Data.SqlTypes.SqlInt16" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt32)~System.Data.SqlTypes.SqlString">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlString" />로 변환합니다.</summary>
      <param name="x">변환될 SqlInt32 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수의 문자열 표현을 포함하는 새 <see cref="T:System.Data.SqlTypes.SqlInt32" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlInt64)~System.Data.SqlTypes.SqlString">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlString" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수의 문자열 표현을 포함하는 새 <see cref="T:System.Data.SqlTypes.SqlInt64" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlMoney)~System.Data.SqlTypes.SqlString">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlString" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlMoney" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수의 문자열 표현을 포함하는 새 <see cref="T:System.Data.SqlTypes.SqlMoney" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlSingle)~System.Data.SqlTypes.SqlString">
      <summary>지정된 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlString" />로 변환합니다.</summary>
      <param name="x">변환할 <see cref="T:System.Data.SqlTypes.SqlSingle" /> 구조체입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수의 문자열 표현을 포함하는 새 <see cref="T:System.Data.SqlTypes.SqlSingle" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Explicit(System.Data.SqlTypes.SqlString)~System.String">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" />을 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="x">변환될 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</param>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 매개 변수의 <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 속성과 같은 내용을 갖는 <see langword="String" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlString" /> 피연산자에 대해 논리 비교를 수행하여 첫 번째 피연산자가 두 번째 피연산자보다 큰지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlString" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_GreaterThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlString" /> 피연산자에 대해 논리 비교를 수행하여 첫 번째 피연산자가 두 번째 피연산자보다 크거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 크거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlString" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Implicit(System.String)~System.Data.SqlTypes.SqlString">
      <summary>
        <see cref="T:System.String" /> 매개 변수를 <see cref="T:System.Data.SqlTypes.SqlString" />로 변환합니다.</summary>
      <param name="x">변환될 <see cref="T:System.String" />입니다.</param>
      <returns>지정된 <see langword="String" />의 값을 포함하는 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_Inequality(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlString" /> 피연산자에 대해 논리 비교를 수행하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>두 인스턴스가 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />이고, 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />인 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlString" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThan(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlString" /> 피연산자에 대해 논리 비교를 수행하여 첫 번째 피연산자가 두 번째 피연산자보다 작은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlString" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.op_LessThanOrEqual(System.Data.SqlTypes.SqlString,System.Data.SqlTypes.SqlString)">
      <summary>두 <see cref="T:System.Data.SqlTypes.SqlString" /> 피연산자에 대해 논리 비교를 수행하여 첫 번째 피연산자가 두 번째 피연산자보다 작거나 같은지 여부를 확인합니다.</summary>
      <param name="x">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <param name="y">
        <see cref="T:System.Data.SqlTypes.SqlString" />
      </param>
      <returns>첫 번째 인스턴스가 두 번째 인스턴스보다 작거나 같으면 <see cref="T:System.Data.SqlTypes.SqlBoolean" />로 설정되는 <see cref="F:System.Data.SqlTypes.SqlBoolean.True" />입니다. 그렇지 않으면 <see cref="F:System.Data.SqlTypes.SqlBoolean.False" />입니다. <see cref="T:System.Data.SqlTypes.SqlString" />의 인스턴스 중 하나가 null인 경우, <see cref="P:System.Data.SqlTypes.SqlBoolean.Value" />의 <see cref="T:System.Data.SqlTypes.SqlBoolean" />는 <see cref="F:System.Data.SqlTypes.SqlBoolean.Null" />이 됩니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>
        <see langword="XmlSchema" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="reader">
        <see langword="XmlReader" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="writer">
        <see langword="XmlWriter" />
      </param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlBoolean">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlBoolean" />으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlString.Value" />가 0이 아니면 <see langword="true" />이고, 0이면 <see langword="false" />이고, 그렇지 않으면 Null입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlByte">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlByte" />으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlByte.Value" /> 구조체가 나타내는 숫자와 같은 <see cref="T:System.Data.SqlTypes.SqlString" />를 갖는 새 <see langword="SqlByte" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDateTime">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDateTime" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlString" />이 나타내는 날짜 값이 들어 있는 새 <see langword="SqlDateTime" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDecimal">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDecimal" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlDecimal" />의 값이 들어 있는 새 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlDouble">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlDouble" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlDouble" />의 숫자 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlGuid">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlGuid" />으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlGuid" />가 이 <see cref="P:System.Data.SqlTypes.SqlGuid.Value" /> 구조체에서 나타내는 <see langword="Guid" />인 새 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt16">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt16" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt16" />의 숫자 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt32">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt32" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt32" />의 숫자 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlInt64">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlInt64" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlInt64" />의 숫자 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlMoney">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlMoney" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlMoney" />의 숫자 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToSqlSingle">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 <see cref="T:System.Data.SqlTypes.SqlSingle" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlSingle" />의 숫자 값과 같은 새 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlString.ToString">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 개체를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <returns>이 <see cref="T:System.String" /> 구조체와 같은 값을 갖는 <see cref="T:System.Data.SqlTypes.SqlString" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CompareInfo">
      <summary>이 <see cref="T:System.Globalization.CompareInfo" /> 구조체의 문자열 비교 방식을 정의하는 <see cref="T:System.Data.SqlTypes.SqlString" /> 개체를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 문자열 비교 방식을 정의하는 <see langword="CompareInfo" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.CultureInfo">
      <summary>이 <see cref="T:System.Globalization.CultureInfo" /> 개체의 문화권에 대한 정보를 나타내는 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체를 가져옵니다.</summary>
      <returns>날짜 형식 지정 및 문자열 정렬과 같은 일반 작업에 필요한 메서드를 제공하는 문화권의 고유 개체뿐 아니라 문화권의 이름, 쓰기 시스템 및 사용된 달력 등도 포함하여 이 SqlString 구조체의 문화권에 대한 정보를 설명하는 <see cref="T:System.Globalization.CultureInfo" /> 구조체입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.IsNull">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체가 null인지 여부를 나타냅니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlString.Value" />가 <see cref="F:System.Data.SqlTypes.SqlString.Null" />이면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.LCID">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 해당 지역 로캘과 언어를 지정합니다.</summary>
      <returns>
        <see cref="P:System.Data.SqlTypes.SqlString.Value" /> 속성에 저장된 문자열의 로캘 ID입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.SqlCompareOptions">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlCompareOptions" />과 다른 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 비교 방식을 나타내는 <see cref="T:System.Data.SqlTypes.SqlString" /> 열거형 값을 하나 이상 조합한 것입니다.</summary>
      <returns>이 <see cref="T:System.Data.SqlTypes.SqlString" />과 다른 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체의 비교 방식을 지정하는 값입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlString.Value">
      <summary>이 <see cref="T:System.Data.SqlTypes.SqlString" /> 구조체에 저장되어 있는 문자열을 가져옵니다. 이 속성은 읽기 전용입니다.</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">문자열의 값이 <see cref="F:System.Data.SqlTypes.SqlString.Null" />인 경우</exception>
      <returns>저장되어 있는 문자열입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTruncateException">
      <summary>
        <see cref="N:System.Data.SqlTypes" /> 구조체에 값을 설정할 경우 이 값이 잘릴 때 throw되는 예외입니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Data.SqlTypes.SqlTruncateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTruncateException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지 및 <see cref="T:System.Data.SqlTypes.SqlTruncateException" />에 대한 참조를 사용하여 <see cref="T:System.Exception" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="e">내부 <see cref="T:System.Exception" />에 대한 참조입니다.</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlTypeException">
      <summary>
        <see cref="N:System.Data.SqlTypes" />의 기본 예외 클래스입니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialize된 데이터를 사용하여 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="si">serialize된 개체 데이터를 보유하는 개체입니다.</param>
      <param name="sc">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlTypeException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Data.SqlTypes.SqlTypeException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외를 설명하는 메시지입니다. 현재 시스템 culture에 대해 이 문자열이 지역화되었는지 확인하려면 이 생성자의 호출자가 필요합니다.</param>
      <param name="e">현재 예외의 원인인 예외입니다. <c>innerException</c> 매개 변수가 <see langword="null" />이 아니면 현재 예외는 내부 예외를 처리하는 <see langword="catch" /> 블록에서 발생합니다.</param>
    </member>
    <member name="T:System.Data.SqlTypes.SqlXml">
      <summary>서버에서 저장하거나 검색할 XML 데이터를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor">
      <summary>새 <see cref="T:System.Data.SqlTypes.SqlXml" /> 인스턴스를 만듭니다.</summary>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.IO.Stream)">
      <summary>제공된 <see cref="T:System.Data.SqlTypes.SqlXml" /> 파생 인스턴스에서 XML 값을 제공하는 새 <see cref="T:System.IO.Stream" /> 인스턴스를 만듭니다.</summary>
      <param name="value">
        <see cref="T:System.IO.Stream" /> 인스턴스의 XML 콘텐츠를 로드해 올 <see cref="T:System.IO.FileStream" /> 파생 인스턴스입니다(예: <see cref="T:System.Data.SqlTypes.SqlXml" />).</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.#ctor(System.Xml.XmlReader)">
      <summary>새 <see cref="T:System.Data.SqlTypes.SqlXml" /> 인스턴스를 만들고 이를 제공된 <see cref="T:System.Xml.XmlReader" />의 내용과 연결합니다.</summary>
      <param name="value">새 <see cref="T:System.Xml.XmlReader" /> 인스턴스의 값으로 사용할 <see cref="T:System.Data.SqlTypes.SqlXml" /> 파생 클래스 인스턴스입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.CreateReader">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlXml" />의 XML 콘텐츠 값을 <see cref="T:System.Xml.XmlReader" />로 가져옵니다.</summary>
      <exception cref="T:System.Data.SqlTypes.SqlNullValueException">
        <see cref="T:System.Data.SqlTypes.SqlXml" />의 null 인스턴스에 대한 이 속성에 액세스하려는 경우</exception>
      <returns>XML 콘텐츠를 포함하는 <see cref="T:System.Xml.XmlReader" /> 파생 인스턴스입니다. 서버에서 내부적으로 정보가 표현되는 방법에 따라 실제 형식은 달라질 수 있습니다. 예를 들어 <see cref="T:System.Xml.XmlTextReader" />가 반환 값이 될 수 있습니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.GetXsdType(System.Xml.Schema.XmlSchemaSet)">
      <summary>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD(XML 스키마 정의 언어)를 반환합니다.</summary>
      <param name="schemaSet">
        <see cref="T:System.Xml.Schema.XmlSchemaSet" />입니다.</param>
      <returns>지정된 <see cref="T:System.Xml.Schema.XmlSchemaSet" />의 XSD를 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.GetSchema" />를 참조하세요.</summary>
      <returns>
        <see cref="T:System.Xml.Schema.XmlSchema" /> 메서드가 생성하고 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" /> 메서드가 소비하는 개체의 XML 표현을 설명하는 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />입니다.</returns>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.ReadXml(System.Xml.XmlReader)" />를 참조하세요.</summary>
      <param name="r">XmlReader입니다.</param>
    </member>
    <member name="M:System.Data.SqlTypes.SqlXml.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>이 멤버에 대한 설명은 <see cref="M:System.Xml.Serialization.IXmlSerializable.WriteXml(System.Xml.XmlWriter)" />를 참조하세요.</summary>
      <param name="writer">XmlWriter입니다.</param>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.IsNull">
      <summary>이 인스턴스가 null <see cref="T:System.Data.SqlTypes.SqlXml" /> 값을 나타내는지 여부를 나타냅니다.</summary>
      <returns>
        <see langword="true" />가 null이면 <see langword="Value" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Null">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlXml" /> 형식의 null 인스턴스를 나타냅니다.</summary>
      <returns>
        <see cref="T:System.Data.SqlTypes.SqlXml" /> 형식의 null 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Data.SqlTypes.SqlXml.Value">
      <summary>
        <see cref="T:System.Data.SqlTypes.SqlXml" /> 인스턴스의 XML 콘텐츠에 대한 문자열 표현을 가져옵니다.</summary>
      <returns>XML 콘텐츠에 대한 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Data.SqlTypes.StorageState">
      <summary>
        <see cref="T:System.Data.SqlTypes.StorageState" /> 열거형은 독립 실행형 구성 요소로는 사용할 수 없고 다른 클래스가 표준 기능을 파생하는 원본 열거형으로만 사용할 수 있습니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Buffer">
      <summary>버퍼 크기입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.Stream">
      <summary>스트림입니다.</summary>
    </member>
    <member name="F:System.Data.SqlTypes.StorageState.UnmanagedBuffer">
      <summary>관리되지 않는 버퍼입니다.</summary>
    </member>
    <member name="T:System.Data.StateChangeEventArgs">
      <summary>.NET Framework 데이터 공급자의 상태 변경 이벤트에 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.StateChangeEventArgs.#ctor(System.Data.ConnectionState,System.Data.ConnectionState)">
      <summary>개체의 원래 상태와 현재 상태가 지정된 경우 <see cref="T:System.Data.StateChangeEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="originalState">
        <see cref="T:System.Data.ConnectionState" /> 값 중 하나입니다.</param>
      <param name="currentState">
        <see cref="T:System.Data.ConnectionState" /> 값 중 하나입니다.</param>
    </member>
    <member name="P:System.Data.StateChangeEventArgs.CurrentState">
      <summary>연결의 새 상태를 가져옵니다. 연결 개체는 이벤트가 발생될 때 이미 새 상태에 있습니다.</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Data.StateChangeEventArgs.OriginalState">
      <summary>연결의 원래 상태를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.ConnectionState" /> 값 중 하나입니다.</returns>
    </member>
    <member name="T:System.Data.StateChangeEventHandler">
      <summary>
        <see cref="E:System.Data.Common.DbConnection.StateChange" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 <see cref="T:System.Data.StateChangeEventArgs" />입니다.</param>
    </member>
    <member name="T:System.Data.StatementCompletedEventArgs">
      <summary>
        <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 이벤트에 대한 추가 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Data.StatementCompletedEventArgs.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.Data.StatementCompletedEventArgs" /> 클래스의 새 인스턴스를 만듭니다.</summary>
      <param name="recordCount">
        <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 이벤트를 발생시킨 문의 영향을 받는 행의 수를 나타냅니다.</param>
    </member>
    <member name="P:System.Data.StatementCompletedEventArgs.RecordCount">
      <summary>
        <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 이벤트를 발생시킨 문의 영향을 받는 행의 수를 나타냅니다.</summary>
      <returns>영향을 받은 행 수입니다.</returns>
    </member>
    <member name="T:System.Data.StatementCompletedEventHandler">
      <summary>
        <see cref="E:System.Data.SqlClient.SqlCommand.StatementCompleted" /> 이벤트의 이벤트 처리기에 대한 대리자 형식입니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터입니다.</param>
    </member>
    <member name="T:System.Data.StatementType">
      <summary>
        <see cref="T:System.Data.OleDb.OleDbRowUpdatedEventArgs" />, <see cref="T:System.Data.OleDb.OleDbRowUpdatingEventArgs" />, <see cref="T:System.Data.SqlClient.SqlRowUpdatedEventArgs" />, <see cref="T:System.Data.SqlClient.SqlRowUpdatingEventArgs" /> 등의 클래스에 사용할 SQL 쿼리의 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.StatementType.Batch">
      <summary>배치 문인 SQL 쿼리입니다.</summary>
    </member>
    <member name="F:System.Data.StatementType.Delete">
      <summary>DELETE 문인 SQL 쿼리입니다.</summary>
    </member>
    <member name="F:System.Data.StatementType.Insert">
      <summary>INSERT 문인 SQL 쿼리입니다.</summary>
    </member>
    <member name="F:System.Data.StatementType.Select">
      <summary>SELECT 문인 SQL 쿼리입니다.</summary>
    </member>
    <member name="F:System.Data.StatementType.Update">
      <summary>UPDATE 문인 SQL 쿼리입니다.</summary>
    </member>
    <member name="T:System.Data.StrongTypingException">
      <summary>사용자가 <see langword="DBNull" /> 값에 액세스할 때 강력한 형식의 <see cref="T:System.Data.DataSet" />에서 throw하는 예외입니다.</summary>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor">
      <summary>
        <see cref="T:System.Data.StrongTypingException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 serialization 정보와 스트리밍 컨텍스트를 사용하여 <see cref="T:System.Data.StrongTypingException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 개체입니다.</param>
      <param name="context">
        <see cref="T:System.Runtime.Serialization.StreamingContext" /> 구조체입니다.</param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.StrongTypingException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.StrongTypingException.#ctor(System.String,System.Exception)">
      <summary>지정된 문자열과 내부 예외를 사용하여 <see cref="T:System.Data.StrongTypingException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
      <param name="innerException">내부 예외에 대한 참조입니다.</param>
    </member>
    <member name="T:System.Data.SyntaxErrorException">
      <summary>
        <see cref="P:System.Data.DataColumn.Expression" />의 <see cref="T:System.Data.DataColumn" /> 속성에 구문 오류가 있을 때 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor">
      <summary>
        <see cref="T:System.Data.SyntaxErrorException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Data.SyntaxErrorException" />와 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 사용하여 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화하거나 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스와 대상입니다.</param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.SyntaxErrorException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.SyntaxErrorException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Data.SyntaxErrorException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외를 발생시킨 예외이거나 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
    </member>
    <member name="T:System.Data.TypedTableBase`1">
      <summary>이 유형은 Visual Studio 및 XSD.exe .NET Framework 도구로 형식화된 <see cref="T:System.Data.DataTable" /> 개체 생성의 기본 클래스로 사용되며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <typeparam name="T">테이블이 나타내는 소스 시퀀스의 개체 형식이며 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
    </member>
    <member name="M:System.Data.TypedTableBase`1.#ctor">
      <summary>새 <see cref="T:System.Data.TypedTableBase`1" />를 초기화합니다. 이 메서드는 Visual Studio 및 XSD.exe .NET Framework 도구에 의한 형식화된 <see cref="T:System.Data.DataTable" /> 개체 생성을 지원합니다. 이 형식은 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="M:System.Data.TypedTableBase`1.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>새 <see cref="T:System.Data.TypedTableBase`1" />를 초기화합니다. 이 메서드는 Visual Studio 및 XSD.exe .NET Framework 도구에 의한 형식화된 <see cref="T:System.Data.DataTable" /> 개체 생성을 지원합니다. 이 메서드는 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="info">개체를 생성하는 데 필요한 데이터가 들어 있는 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">역직렬화되는 개체에 대한 스트리밍 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Data.TypedTableBase`1.Cast``1">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" />의 요소를 지정된 형식으로 변환합니다. 이 메서드는 Visual Studio 및 XSD.exe .NET Framework 도구에 의한 형식화된 <see cref="T:System.Data.DataTable" /> 개체 생성을 지원합니다. 이 메서드는 코드에서 직접 사용할 수 없습니다.</summary>
      <typeparam name="TResult">요소를 변환할 대상 형식입니다.</typeparam>
      <returns>지정된 형식으로 변환되는 소스 시퀀스의 각 요소가 들어 있는 <see cref="T:System.Data.EnumerableRowCollection" />입니다.</returns>
    </member>
    <member name="M:System.Data.TypedTableBase`1.GetEnumerator">
      <summary>형식화된 <see cref="T:System.Data.DataRow" />에 대한 열거자를 반환합니다. 이 메서드는 Visual Studio 및 XSD.exe .NET Framework 도구에 의한 형식화된 <see cref="T:System.Data.DataTable" /> 개체 생성을 지원합니다. 이 메서드는 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> 인터페이스를 구현하는 개체</returns>
    </member>
    <member name="M:System.Data.TypedTableBase`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>형식화된 <see cref="T:System.Data.DataRow" />에 대한 열거자를 반환합니다. 이 메서드는 Visual Studio 및 XSD.exe .NET Framework 도구에 의한 형식화된 <see cref="T:System.Data.DataTable" /> 개체 생성을 지원합니다. 이 메서드는 코드에서 직접 사용할 수 없습니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerator`1" /> 인터페이스를 구현하는 개체</returns>
    </member>
    <member name="T:System.Data.TypedTableBaseExtensions">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" /> 클래스에 대한 확장 메서드가 들어 있습니다.</summary>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.AsEnumerable``1(System.Data.TypedTableBase{``0})">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" />의 데이터 행 요소를 열거하고 <see cref="T:System.Data.EnumerableRowCollection`1" /> 개체를 반환합니다. 여기에서 제네릭 매개 변수 <paramref name="T" />는 <see cref="T:System.Data.DataRow" />입니다. 이 개체는 LINQ 식 또는 메서드 쿼리에 사용될 수 있습니다.</summary>
      <param name="source">열거 가능하게 만들 소스 <see cref="T:System.Data.TypedTableBase`1" />입니다.</param>
      <typeparam name="TRow">소스의 요소를 변환할 형식입니다.</typeparam>
      <returns>
        <see cref="T:System.Data.EnumerableRowCollection`1" /> 개체이며, 제네릭 매개 변수 <paramref name="T" />는 <see cref="T:System.Data.DataRow" />입니다.</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.ElementAtOrDefault``1(System.Data.TypedTableBase{``0},System.Int32)">
      <summary>시퀀스에서 지정된 행의 요소를 반환하거나, 행이 범위를 벗어나면 기본 값을 반환합니다.</summary>
      <param name="source">요소를 반환할 열거 가능한 개체입니다.</param>
      <param name="index">검색할 요소의 0부터 시작하는 인덱스입니다.</param>
      <typeparam name="TRow">요소 또는 행의 형식입니다.</typeparam>
      <returns>시퀀스에서 지정된 행의 요소입니다.</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" />의 행을 지정된 키에 따라 오름차순으로 정렬합니다.</summary>
      <param name="source">순서를 지정할 <see cref="T:System.Data.TypedTableBase`1" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <returns>요소가 지정된 키에 따라 정렬된 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderBy``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" />의 행을 지정된 키 및 비교자에 따라 오름차순으로 정렬합니다.</summary>
      <param name="source">순서를 지정할 <see cref="T:System.Data.TypedTableBase`1" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <returns>요소가 지정된 키 및 비교자에 따라 정렬된 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" />의 행을 지정된 키에 따라 내림차순으로 정렬합니다.</summary>
      <param name="source">순서를 지정할 <see cref="T:System.Data.TypedTableBase`1" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <returns>요소가 지정된 키에 따라 정렬된 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.OrderByDescending``2(System.Data.TypedTableBase{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" />의 행을 지정된 키 및 비교자에 따라 내림차순으로 정렬합니다.</summary>
      <param name="source">순서를 지정할 <see cref="T:System.Data.TypedTableBase`1" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="keySelector">요소에서 키를 추출하는 함수입니다.</param>
      <param name="comparer">키를 비교할 <see cref="T:System.Collections.Generic.IComparer`1" />입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, 일반적으로 <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <typeparam name="TKey">
        <paramref name="keySelector" />에서 반환하는 키의 형식입니다.</typeparam>
      <returns>요소가 지정된 키 및 비교자에 따라 정렬된 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.Select``2(System.Data.TypedTableBase{``0},System.Func{``0,``1})">
      <summary>
        <see cref="T:System.Data.TypedTableBase`1" />의 각 요소를 새 폼에 프로젝션합니다.</summary>
      <param name="source">변환 함수를 호출할 <see cref="T:System.Data.TypedTableBase`1" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="selector">각 요소에 적용할 변환 함수입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <typeparam name="S" />
      <returns>해당 요소가 <paramref name="source" />의 각 요소에 대해 변환 함수를 호출한 결과인 <see cref="T:System.Data.EnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="M:System.Data.TypedTableBaseExtensions.Where``1(System.Data.TypedTableBase{``0},System.Func{``0,System.Boolean})">
      <summary>지정된 조건자에 따라 행 시퀀스를 필터링합니다.</summary>
      <param name="source">필터링할 <see cref="T:System.Data.TypedTableBase`1" /> 요소가 들어 있는 <see cref="T:System.Data.DataRow" />입니다.</param>
      <param name="predicate">각 요소를 조건에 대해 테스트하는 함수입니다.</param>
      <typeparam name="TRow">
        <paramref name="source" />의 행 요소의 형식으로, <see cref="T:System.Data.DataRow" />입니다.</typeparam>
      <returns>입력 시퀀스에서 조건에 맞는 행이 들어 있는 <see cref="T:System.Data.OrderedEnumerableRowCollection`1" />입니다.</returns>
    </member>
    <member name="T:System.Data.UniqueConstraint">
      <summary>모든 값이 고유해야 하는 열 집합에 대한 제한을 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn)">
      <summary>지정된 <see cref="T:System.Data.UniqueConstraint" />를 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="column">제한할 <see cref="T:System.Data.DataColumn" />입니다.</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn,System.Boolean)">
      <summary>제한할 <see cref="T:System.Data.UniqueConstraint" />과 제약 조건이 기본 키인지 여부를 나타내는 값을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="column">제한할 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <param name="isPrimaryKey">제약 조건이 기본 키이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[])">
      <summary>
        <see cref="T:System.Data.UniqueConstraint" /> 개체의 지정된 배열을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="columns">제한할 <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.Data.DataColumn[],System.Boolean)">
      <summary>제한할 <see cref="T:System.Data.UniqueConstraint" /> 개체의 배열과 제약 조건이 기본 키인지 여부를 나타내는 값을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="columns">제한할 <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</param>
      <param name="isPrimaryKey">제약 조건이 기본 키이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn)">
      <summary>지정된 이름과 <see cref="T:System.Data.UniqueConstraint" />을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">제약 조건의 이름입니다.</param>
      <param name="column">제한할 <see cref="T:System.Data.DataColumn" />입니다.</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn,System.Boolean)">
      <summary>지정된 이름, 제한할 <see cref="T:System.Data.UniqueConstraint" /> 및 제약 조건이 기본 키인지 여부를 나타내는 값을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">제약 조건의 이름입니다.</param>
      <param name="column">제한할 <see cref="T:System.Data.DataColumn" />입니다.</param>
      <param name="isPrimaryKey">제약 조건이 기본 키이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[])">
      <summary>
        <see cref="T:System.Data.UniqueConstraint" /> 개체의 지정된 이름과 배열을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">제약 조건의 이름입니다.</param>
      <param name="columns">제한할 <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.Data.DataColumn[],System.Boolean)">
      <summary>지정된 이름, 제한할 <see cref="T:System.Data.UniqueConstraint" /> 개체의 배열 및 제약 조건이 기본 키인지 여부를 나타내는 값을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">제약 조건의 이름입니다.</param>
      <param name="columns">제한할 <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</param>
      <param name="isPrimaryKey">제약 조건이 기본 키이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.#ctor(System.String,System.String[],System.Boolean)">
      <summary>지정된 이름, 제한할 <see cref="T:System.Data.UniqueConstraint" /> 개체의 배열 및 제약 조건이 기본 키인지 여부를 나타내는 값을 사용하여 <see cref="T:System.Data.DataColumn" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">제약 조건의 이름입니다.</param>
      <param name="columnNames">제한할 <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</param>
      <param name="isPrimaryKey">제약 조건이 기본 키이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Data.UniqueConstraint.Equals(System.Object)">
      <summary>이 제약 조건을 둘째 제약 조건과 비교하여 두 제약 조건이 같은지 확인합니다.</summary>
      <param name="key2">이 <see cref="T:System.Data.UniqueConstraint" />와 비교할 개체입니다.</param>
      <returns>제약 조건이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Data.UniqueConstraint.GetHashCode">
      <summary>
        <see cref="T:System.Data.UniqueConstraint" /> 개체의 이 인스턴스의 해시 코드를 가져옵니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.Columns">
      <summary>이 제약 조건의 영향을 받는 열로 이루어진 배열을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Data.DataColumn" /> 개체의 배열입니다.</returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.IsPrimaryKey">
      <summary>제약 조건이 기본 키에 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>제약 조건이 기본 키에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Data.UniqueConstraint.Table">
      <summary>이 제약 조건이 속한 테이블을 가져옵니다.</summary>
      <returns>제약 조건이 속한 <see cref="T:System.Data.DataTable" />입니다.</returns>
    </member>
    <member name="T:System.Data.UpdateRowSource">
      <summary>업데이트 중인 행에 쿼리 명령 결과를 적용하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.Both">
      <summary>출력 매개 변수와 처음 반환된 행은 모두 <see cref="T:System.Data.DataSet" />의 변경된 행에 매핑됩니다.</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.FirstReturnedRecord">
      <summary>처음 반환된 행의 데이터는 <see cref="T:System.Data.DataSet" />의 변경된 행에 매핑됩니다.</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.None">
      <summary>반환된 매개 변수와 행이 무시됩니다.</summary>
    </member>
    <member name="F:System.Data.UpdateRowSource.OutputParameters">
      <summary>출력 매개 변수는 <see cref="T:System.Data.DataSet" />의 변경된 행에 매핑됩니다.</summary>
    </member>
    <member name="T:System.Data.UpdateStatus">
      <summary>
        <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" />을 수행하는 동안 현재 행과 나머지 행에 대해 실행할 작업을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.Continue">
      <summary>
        <see cref="T:System.Data.Common.DataAdapter" />가 계속해서 행을 처리합니다.</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.ErrorsOccurred">
      <summary>이벤트 처리기는 업데이트가 오류로 처리됨을 보고합니다.</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.SkipAllRemainingRows">
      <summary>현재 행 및 남은 모든 행을 업데이트할 수 없습니다.</summary>
    </member>
    <member name="F:System.Data.UpdateStatus.SkipCurrentRow">
      <summary>현재 행을 업데이트할 수 없습니다.</summary>
    </member>
    <member name="T:System.Data.VersionNotFoundException">
      <summary>삭제된 <see cref="T:System.Data.DataRow" />의 버전을 반환하려고 할 때 throw되는 예외를 나타냅니다.</summary>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor">
      <summary>
        <see cref="T:System.Data.VersionNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>serialization 정보를 사용하여 <see cref="T:System.Data.VersionNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">개체를 직렬화 또는 역직렬화하는 데 필요한 데이터입니다.</param>
      <param name="context">serialize된 특정 스트림의 소스 및 대상에 대한 설명입니다.</param>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.String)">
      <summary>지정된 문자열을 사용하여 <see cref="T:System.Data.VersionNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="s">예외가 throw되었을 때 표시할 문자열입니다.</param>
    </member>
    <member name="M:System.Data.VersionNotFoundException.#ctor(System.String,System.Exception)">
      <summary>지정된 오류 메시지와 해당 예외의 원인인 내부 예외에 대한 참조를 사용하여 <see cref="T:System.Data.VersionNotFoundException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">예외에 대한 이유를 설명하는 오류 메시지입니다.</param>
      <param name="innerException">현재 예외를 발생시킨 예외이거나 내부 예외를 지정하지 않은 경우 null 참조(Visual Basic에서는 <see langword="Nothing" />)입니다.</param>
    </member>
    <member name="T:System.Data.XmlReadMode">
      <summary>XML 데이터와 관계형 스키마를 <see cref="T:System.Data.DataSet" />으로 읽어오는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.Auto">
      <summary>기본 읽기 모드입니다.</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.DiffGram">
      <summary>DiffGram을 읽고 DiffGram의 변경 내용을 <see cref="T:System.Data.DataSet" />에 적용합니다. <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 작업과 의미론이 같습니다. <see cref="M:System.Data.DataSet.Merge(System.Data.DataSet)" /> 작업에서처럼 <see cref="P:System.Data.DataRow.RowState" /> 값이 유지됩니다. <see cref="M:System.Data.DataSet.ReadXml(System.Xml.XmlReader)" />의 출력을 DiffGram으로 사용해야 DiffGram을 사용한 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" /> 입력을 가져올 수 있습니다.
        
대상 <see cref="T:System.Data.DataSet" />에는 <see cref="Overload:System.Data.DataSet.WriteXml" />이 DiffGram으로 호출되는 <see cref="T:System.Data.DataSet" />와 동일한 스키마가 있어야 합니다. 그렇지 않으면 DiffGram 병합 작업이 실패하고 예외가 throw 됩니다.</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.Fragment">
      <summary>FOR XML 쿼리를 실행하여 생성된 것과 같은 XML 단편을 SQL Server의 인스턴스에 대해 읽습니다. <see cref="T:System.Data.XmlReadMode" />를 <see langword="Fragment" />로 설정한 경우 기본 네임스페이스를 인라인 스키마로 읽습니다.</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.IgnoreSchema">
      <summary>인라인 스키마를 무시하고 데이터를 기존 <see cref="T:System.Data.DataSet" /> 스키마로 읽어옵니다. 데이터가 기존 스키마와 일치하지 않으면 <see cref="T:System.Data.DataSet" />에 정의된 다른 네임스페이스의 데이터와 함께 삭제됩니다. 데이터가 DiffGram이면 <see langword="IgnoreSchema" />는 <see langword="DiffGram" />과 같은 기능을 가집니다.</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.InferSchema">
      <summary>인라인 스키마를 무시하고 데이터로부터 스키마를 유추한 다음 해당 데이터를 로드합니다. <see cref="T:System.Data.DataSet" />에 스키마가 이미 있으면 새 테이블을 추가하거나 기존 테이블에 열을 추가하여 현재 스키마를 확장합니다. 유추된 테이블이 이미 있지만 네임스페이스가 다르거나 유추된 열 중에 기존 열과 충돌하는 열이 있으면 예외가 throw됩니다.</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.InferTypedSchema">
      <summary>모든 인라인 스키마를 무시하고 데이터로부터 강력한 형식의 스키마를 유추한 다음 해당 데이터를 로드합니다. 데이터에서 형식을 유추할 수 없으면 이 형식은 문자열 데이터로 해석됩니다. <see cref="T:System.Data.DataSet" />에 이미 스키마가 있으면 새 테이블을 추가하거나 기존 테이블에 열을 추가하여 현재 스키마를 확장합니다. 유추된 테이블이 이미 있지만 네임스페이스가 다르거나 유추된 열 중에 기존 열과 충돌하는 열이 있으면 예외가 throw됩니다.</summary>
    </member>
    <member name="F:System.Data.XmlReadMode.ReadSchema">
      <summary>인라인 스키마를 읽고 데이터를 로드합니다. <see cref="T:System.Data.DataSet" />에 스키마가 이미 있으면 스키마에 새 테이블을 추가할 수 있지만 인라인 스키마의 테이블이 <see cref="T:System.Data.DataSet" />에 이미 있으면 예외가 throw됩니다.</summary>
    </member>
    <member name="T:System.Data.XmlWriteMode">
      <summary>
        <see cref="T:System.Data.DataSet" />에서 XML 데이터와 관계형 스키마를 쓰는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.DiffGram">
      <summary>원래 값과 현재 값을 포함하여 전체 <see cref="T:System.Data.DataSet" />을 DiffGram으로 씁니다. 변경된 값만 포함하는 DiffGram을 생성하려면 <see cref="M:System.Data.DataSet.GetChanges" />를 호출한 다음 반환된 <see cref="M:System.Data.DataSet.WriteXml(System.IO.Stream)" />에서 <see cref="T:System.Data.DataSet" />을 DiffGram으로 호출합니다.</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.IgnoreSchema">
      <summary>
        <see cref="T:System.Data.DataSet" />의 현재 내용을 XSD 스키마 없이 XML 데이터로 씁니다. <see cref="T:System.Data.DataSet" />에 로드된 데이터가 없으면 아무 것도 쓰여지지 않습니다.</summary>
    </member>
    <member name="F:System.Data.XmlWriteMode.WriteSchema">
      <summary>관계형 구조를 인라인 XSD 스키마로 사용하여 <see cref="T:System.Data.DataSet" />의 현재 내용을 XML 데이터로 씁니다. <see cref="T:System.Data.DataSet" />에 데이터가 없는 스키마만 있는 경우 인라인 스키마만 쓰여집니다. <see cref="T:System.Data.DataSet" />에 현재 스키마가 없으면 아무 것도 쓰여지지 않습니다.</summary>
    </member>
    <member name="T:System.Xml.XmlDataDocument">
      <summary>관계형 <see cref="T:System.Data.DataSet" />을 통해 구조적 데이터를 저장, 검색 및 조작할 수 있습니다.</summary>
    </member>
    <member name="M:System.Xml.XmlDataDocument.#ctor">
      <summary>
        <see cref="T:System.Xml.XmlDataDocument" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Xml.XmlDataDocument.#ctor(System.Data.DataSet)">
      <summary>지정된 <see cref="T:System.Xml.XmlDataDocument" />를 사용하여 <see cref="T:System.Data.DataSet" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dataset">
        <see langword="DataSet" />에 로드할 <see langword="XmlDataDocument" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CloneNode(System.Boolean)">
      <summary>현재 노드의 복사본을 만듭니다.</summary>
      <param name="deep">지정된 노드 아래의 하위 트리를 재귀적으로 복제하려면 <see langword="true" />이고, 노드 자체만 복제하려면 <see langword="false" />입니다.</param>
      <returns>복제된 노드입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateElement(System.String,System.String,System.String)">
      <summary>지정된 <see cref="P:System.Xml.XmlNode.Prefix" />, <see cref="P:System.Xml.XmlDocument.LocalName" /> 및 <see cref="P:System.Xml.XmlNode.NamespaceURI" />가 있는 요소를 만듭니다.</summary>
      <param name="prefix">새 요소의 접두사입니다. String.Empty 또는 <see langword="null" />인 경우에는 접두사가 없습니다.</param>
      <param name="localName">새 요소의 로컬 이름입니다.</param>
      <param name="namespaceURI">새 요소의 네임스페이스 URI(Uniform Resource Identifier)입니다. String.Empty 또는 <see langword="null" />인 경우에는 namespaceURI가 없습니다.</param>
      <returns>새 <see cref="T:System.Xml.XmlElement" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateEntityReference(System.String)">
      <summary>지정된 이름을 가진 <see cref="T:System.Xml.XmlEntityReference" />를 만듭니다.</summary>
      <param name="name">엔터티 참조의 이름입니다.</param>
      <exception cref="T:System.NotSupportedException">이 메서드를 호출하는 경우</exception>
      <returns>지정한 이름을 가진 <see cref="T:System.Xml.XmlEntityReference" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.CreateNavigator(System.Xml.XmlNode)">
      <summary>이 문서를 탐색하기 위한 새로운 <see cref="T:System.Xml.XPath.XPathNavigator" /> 개체를 만듭니다. <see langword="XPathNavigator" />는 <paramref name="node" /> 매개 변수에서 지정된 노드에 있습니다.</summary>
      <param name="node">검색기를 맨 처음 배치할 <see cref="T:System.Xml.XmlNode" />입니다.</param>
      <returns>문서를 탐색하는 데 사용되는 <see langword="XPathNavigator" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementById(System.String)">
      <summary>지정된 ID의 <see cref="T:System.Xml.XmlElement" />를 가져옵니다. 이 메서드는 <see cref="T:System.Xml.XmlDataDocument" /> 클래스에서 지원하지 않습니다. 이 메서드를 호출하면 예외가 throw됩니다.</summary>
      <param name="elemId">일치시킬 특성 ID입니다.</param>
      <exception cref="T:System.NotSupportedException">이 메서드를 호출하는 경우</exception>
      <returns>지정된 ID의 <see cref="T:System.Xml.XmlElement" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementFromRow(System.Data.DataRow)">
      <summary>지정된 <see cref="T:System.Xml.XmlElement" />와 관련된 <see cref="T:System.Data.DataRow" />를 검색합니다.</summary>
      <param name="r">검색할 관련 <see langword="DataRow" />가 있는 <see langword="XmlElement" />입니다.</param>
      <returns>지정된 <see langword="XmlElement" />의 표현이 포함된 <see langword="DataRow" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetElementsByTagName(System.String)">
      <summary>지정된 <see cref="P:System.Xml.XmlDocument.Name" />과 일치하는 모든 하위 요소의 목록이 포함된 <see cref="T:System.Xml.XmlNodeList" />를 반환합니다.</summary>
      <param name="name">일치시킬 정규화된 이름입니다. 일치하는 노드의 <see cref="P:System.Xml.XmlDocument.Name" /> 속성과 일치합니다. 특수 값 "*"은 모든 태그와 일치합니다.</param>
      <returns>일치하는 모든 노드 목록이 포함된 <see cref="T:System.Xml.XmlNodeList" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.GetRowFromElement(System.Xml.XmlElement)">
      <summary>지정된 <see cref="T:System.Data.DataRow" />와 관련된 <see cref="T:System.Xml.XmlElement" />를 검색합니다.</summary>
      <param name="e">검색할 관련 <see langword="XmlElement" />가 있는 <see langword="DataRow" />입니다.</param>
      <returns>
        <see langword="DataRow" />의 표현이 포함된 <see langword="XmlElement" />입니다. <see langword="null" />와 관련된 <see langword="DataRow" />가 없으면 <see langword="XmlElement" />입니다.</returns>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.IO.Stream)">
      <summary>지정된 스트림에서 <see langword="XmlDataDocument" />를 로드합니다.</summary>
      <param name="inStream">로드할 XML 문서가 포함된 스트림입니다.</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.IO.TextReader)">
      <summary>지정된 <see cref="T:System.IO.TextReader" />에서 <see langword="XmlDataDocument" />를 로드합니다.</summary>
      <param name="txtReader">XML 데이터를 문서에 제공하기 위해 사용하는 <see langword="TextReader" />입니다.</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.String)">
      <summary>지정된 URL을 사용하여 <see langword="XmlDataDocument" />를 로드합니다.</summary>
      <param name="filename">로드할 XML 문서가 포함된 파일의 URL입니다.</param>
    </member>
    <member name="M:System.Xml.XmlDataDocument.Load(System.Xml.XmlReader)">
      <summary>지정된 <see cref="T:System.Xml.XmlReader" />에서 <see langword="XmlDataDocument" />를 로드합니다.</summary>
      <param name="reader">로드할 XML 문서가 포함된 <see langword="XmlReader" />입니다.</param>
      <exception cref="T:System.NotSupportedException">로드되는 XML에 엔터티 참조가 포함되어 있으나 판독기에서 엔터티를 확인할 수 없습니다.</exception>
    </member>
    <member name="P:System.Xml.XmlDataDocument.DataSet">
      <summary>
        <see langword="XmlDataDocument" />에서 데이터의 관계형 표현을 제공하는 <see cref="T:System.Data.DataSet" />을 가져옵니다.</summary>
      <returns>관계형 모델을 사용하여 <see langword="DataSet" />의 데이터에 액세스하는 데 사용할 수 있는 <see langword="XmlDataDocument" />입니다.</returns>
    </member>
  </members>
</doc>
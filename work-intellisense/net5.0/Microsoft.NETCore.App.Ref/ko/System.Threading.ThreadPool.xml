<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Threading.ThreadPool</name>
  </assembly>
  <members>
    <member name="T:System.Threading.IThreadPoolWorkItem">
      <summary vsli:raw="Represents a work item that can be executed by the &lt;see cref=&quot;T:System.Threading.ThreadPool&quot; /&gt;.">
        <see cref="T:System.Threading.ThreadPool" />에 의해 실행될 수 있는 작업 항목을 나타냅니다.</summary>
    </member>
    <member name="M:System.Threading.IThreadPoolWorkItem.Execute">
      <summary vsli:raw="Executes the work item on the thread pool.">스레드 풀에서 작업 항목을 실행합니다.</summary>
    </member>
    <member name="T:System.Threading.RegisteredWaitHandle">
      <summary vsli:raw="Represents a handle that has been registered when calling &lt;see cref=&quot;M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)&quot; /&gt;. This class cannot be inherited.">
        <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" />을 호출할 때 등록된 핸들을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.Threading.RegisteredWaitHandle.Unregister(System.Threading.WaitHandle)">
      <summary vsli:raw="Cancels a registered wait operation issued by the &lt;see cref=&quot;M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)&quot; /&gt; method.">
        <see cref="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)" /> 메서드에서 발생한 등록된 대기 작업을 취소합니다.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to be signaled.">신호를 받을 <see cref="T:System.Threading.WaitHandle" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the function succeeds; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">작업이 성공적으로 수행되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Threading.ThreadPool">
      <summary vsli:raw="Provides a pool of threads that can be used to execute tasks, post work items, process asynchronous I/O, wait on behalf of other threads, and process timers.">작업 실행, 작업 항목 게시, 비동기 I/O 처리, 다른 스레드 대신 기다리기 및 타이머 처리에 사용할 수 있는 스레드 풀을 제공합니다.</summary>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.IntPtr)">
      <summary vsli:raw="Binds an operating system handle to the &lt;see cref=&quot;T:System.Threading.ThreadPool&quot; /&gt;.">
        <see cref="T:System.Threading.ThreadPool" />에 운영 체제 핸들을 바인딩합니다.</summary>
      <param name="osHandle" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that holds the handle. The handle must have been opened for overlapped I/O on the unmanaged side.">핸들을 보유하는 <see cref="T:System.IntPtr" />입니다. 핸들은 관리되지 않는 쪽의 겹쳐진 I/O에 열려 있어야 합니다.</param>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the handle is bound; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">핸들이 바인딩되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.BindHandle(System.Runtime.InteropServices.SafeHandle)">
      <summary vsli:raw="Binds an operating system handle to the &lt;see cref=&quot;T:System.Threading.ThreadPool&quot; /&gt;.">
        <see cref="T:System.Threading.ThreadPool" />에 운영 체제 핸들을 바인딩합니다.</summary>
      <param name="osHandle" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeHandle&quot; /&gt; that holds the operating system handle. The handle must have been opened for overlapped I/O on the unmanaged side.">운영 체제 핸들을 보유하는 <see cref="T:System.Runtime.InteropServices.SafeHandle" />입니다. 핸들은 관리되지 않는 쪽의 겹쳐진 I/O에 열려 있어야 합니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;osHandle&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="osHandle" />이(가) <see langword="null" />인 경우.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the handle is bound; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">핸들이 바인딩되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.GetAvailableThreads(System.Int32@,System.Int32@)">
      <summary vsli:raw="Retrieves the difference between the maximum number of thread pool threads returned by the &lt;see cref=&quot;M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)&quot; /&gt; method, and the number currently active.">
        <see cref="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)" /> 메서드에서 반환하는 최대 스레드 풀 스레드 수와 현재 활성 상태인 스레드 수의 차이를 검색합니다.</summary>
      <param name="workerThreads" vsli:raw="The number of available worker threads.">사용 가능한 작업자 스레드 수입니다.</param>
      <param name="completionPortThreads" vsli:raw="The number of available asynchronous I/O threads.">사용 가능한 비동기 I/O 스레드 수입니다.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMaxThreads(System.Int32@,System.Int32@)">
      <summary vsli:raw="Retrieves the number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until thread pool threads become available.">동시에 활성 상태가 될 수 있는 스레드 풀에 대한 요청 수를 검색합니다. 해당 개수를 초과하는 모든 요청은 스레드 풀 스레드가 사용 가능해질 때까지 큐에 대기 상태로 남아 있습니다.</summary>
      <param name="workerThreads" vsli:raw="The maximum number of worker threads in the thread pool.">스레드 풀에 있는 최대 작업자 스레드 수입니다.</param>
      <param name="completionPortThreads" vsli:raw="The maximum number of asynchronous I/O threads in the thread pool.">스레드 풀에 있는 최대 비동기 I/O 스레드 수입니다.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.GetMinThreads(System.Int32@,System.Int32@)">
      <summary vsli:raw="Retrieves the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.">스레드 생성 및 소멸을 관리하기 위한 알고리즘으로 전환하기 전에 새 요청에 따라 스레드 풀이 만드는 스레드의 최소 개수를 검색합니다.</summary>
      <param name="workerThreads" vsli:raw="When this method returns, contains the minimum number of worker threads that the thread pool creates on demand.">이 메서드가 반환될 때 스레드 풀에서 필요할 때 만드는 작업자 스레드의 최소 개수가 포함됩니다.</param>
      <param name="completionPortThreads" vsli:raw="When this method returns, contains the minimum number of asynchronous I/O threads that the thread pool creates on demand.">이 메서드가 반환될 때 스레드 풀에서 필요할 때 만드는 작업자 스레드의 최소 개수가 포함됩니다.</param>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback)">
      <summary vsli:raw="Queues a method for execution. The method executes when a thread pool thread becomes available.">실행을 위해 메서드를 큐에 대기시킵니다. 이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</summary>
      <param name="callBack" vsli:raw="A &lt;see cref=&quot;T:System.Threading.WaitCallback&quot; /&gt; that represents the method to be executed.">실행할 메서드를 나타내는 <see cref="T:System.Threading.WaitCallback" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callBack&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callBack" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The common language runtime (CLR) is hosted, and the host does not support this action.">CLR(공용 언어 런타임)이 호스팅되며 호스트에서 이 작업을 지원하지 않는 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">메서드가 성공적으로 큐에 대기되면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.NotSupportedException" />이 throw됩니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary vsli:raw="Queues a method for execution, and specifies an object containing data to be used by the method. The method executes when a thread pool thread becomes available.">실행을 위해 메서드를 큐에 대기시키고 메서드에서 사용할 데이터가 들어 있는 개체를 지정합니다. 이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</summary>
      <param name="callBack" vsli:raw="A &lt;see cref=&quot;T:System.Threading.WaitCallback&quot; /&gt; representing the method to execute.">실행할 메서드를 나타내는 <see cref="T:System.Threading.WaitCallback" />입니다.</param>
      <param name="state" vsli:raw="An object containing data to be used by the method.">메서드에서 사용할 데이터가 들어 있는 개체입니다.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The common language runtime (CLR) is hosted, and the host does not support this action.">CLR(공용 언어 런타임)이 호스팅되며 호스트에서 이 작업을 지원하지 않는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callBack&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callBack" />이(가) <see langword="null" />인 경우.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">메서드가 성공적으로 큐에 대기되면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.NotSupportedException" />이 throw됩니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.QueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary vsli:raw="Queues a method specified by an &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate for execution, and provides data to be used by the method. The method executes when a thread pool thread becomes available.">실행을 위해 <see cref="T:System.Action`1" /> 대리자에 의해 지정된 메서드를 큐에 대기시키고 메서드에서 사용할 데이터를 제공합니다. 이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</summary>
      <param name="callBack" vsli:raw="An &lt;see cref=&quot;T:System.Action`1&quot; /&gt; representing the method to execute.">실행할 메서드를 나타내는 <see cref="T:System.Action`1" />입니다.</param>
      <param name="state" vsli:raw="An object containing data to be used by the method.">메서드에서 사용할 데이터가 들어 있는 개체입니다.</param>
      <param name="preferLocal" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to prefer queueing the work item in a queue close to the current thread; &lt;see langword=&quot;false&quot; /&gt; to prefer queueing the work item to the thread pool's shared queue.">현재 스레드에 가까운 큐에 작업 항목을 넣으려면 <see langword="true" />이고, 스레드 풀의 공유 큐에 작업 항목을 넣으려면 <see langword="false" />입니다.</param>
      <typeparam name="TState" vsli:raw="The type of elements of &lt;paramref name=&quot;state&quot; /&gt;.">
        <paramref name="state" />의 요소 형식입니다.</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">메서드가 성공적으로 큐에 대기되면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.NotSupportedException" />이 throw됩니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 32-bit signed integer for the time-out in milliseconds.">제한 시간(밀리초)에 부호 있는 32비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">대리자에 전달되는 개체입니다.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">제한 시간(밀리초)입니다. <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">
        <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that encapsulates the native handle.">기본 핸들을 캡슐화하는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 64-bit signed integer for the time-out in milliseconds.">제한 시간(밀리초)에 부호 있는 64비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다.</param>
      <param name="state" vsli:raw="The object passed to the delegate.">대리자에 전달된 개체입니다.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">제한 시간(밀리초)입니다. <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">
        <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that encapsulates the native handle.">기본 핸들을 캡슐화하는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value for the time-out.">제한 시간에 <see cref="T:System.Threading.WaitHandle" /> 값을 지정하여 <see cref="T:System.TimeSpan" />을 기다리는 대리자를 등록합니다.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다.</param>
      <param name="state" vsli:raw="The object passed to the delegate.">대리자에 전달된 개체입니다.</param>
      <param name="timeout" vsli:raw="The time-out represented by a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;. If &lt;paramref name=&quot;timeout&quot; /&gt; is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;timeout&quot; /&gt; is -1, the function's time-out interval never elapses.">
        <see cref="T:System.TimeSpan" />으로 나타낸 제한 시간입니다. <paramref name="timeout" />이 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="timeout" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is less than -1.">
        <paramref name="timeout" /> 매개 변수가 -1보다 작습니다.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> 매개 변수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that encapsulates the native handle.">기본 핸들을 캡슐화하는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.RegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 32-bit unsigned integer for the time-out in milliseconds.">제한 시간(밀리초)에 부호 없는 32비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitOrTimerCallback&quot; /&gt; delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 <see cref="T:System.Threading.WaitOrTimerCallback" /> 대리자입니다.</param>
      <param name="state" vsli:raw="The object passed to the delegate.">대리자에 전달된 개체입니다.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">제한 시간(밀리초)입니다. <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">
        <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; that can be used to cancel the registered wait operation.">등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMaxThreads(System.Int32,System.Int32)">
      <summary vsli:raw="Sets the number of requests to the thread pool that can be active concurrently. All requests above that number remain queued until thread pool threads become available.">동시에 활성 상태가 될 수 있는 스레드 풀에 대한 요청 수를 설정합니다. 해당 개수를 초과하는 모든 요청은 스레드 풀 스레드가 사용 가능해질 때까지 큐에 대기 상태로 남아 있습니다.</summary>
      <param name="workerThreads" vsli:raw="The maximum number of worker threads in the thread pool.">스레드 풀에 있는 최대 작업자 스레드 수입니다.</param>
      <param name="completionPortThreads" vsli:raw="The maximum number of asynchronous I/O threads in the thread pool.">스레드 풀에 있는 최대 비동기 I/O 스레드 수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the change is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">성공적으로 변경되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.SetMinThreads(System.Int32,System.Int32)">
      <summary vsli:raw="Sets the minimum number of threads the thread pool creates on demand, as new requests are made, before switching to an algorithm for managing thread creation and destruction.">스레드 생성 및 소멸을 관리하기 위한 알고리즘으로 전환하기 전에 새 요청에 따라 스레드 풀이 만드는 스레드의 최소 개수를 설정합니다.</summary>
      <param name="workerThreads" vsli:raw="The minimum number of worker threads that the thread pool creates on demand.">스레드 풀에서 필요할 때 만드는 작업자 스레드의 최소 개수입니다.</param>
      <param name="completionPortThreads" vsli:raw="The minimum number of asynchronous I/O threads that the thread pool creates on demand.">스레드 풀에서 필요할 때 만드는 비동기 I/O 스레드의 최소 개수입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the change is successful; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">성공적으로 변경되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueNativeOverlapped(System.Threading.NativeOverlapped*)">
      <summary vsli:raw="Queues an overlapped I/O operation for execution.">실행할 중첩된 I/O 작업을 큐에 대기시킵니다.</summary>
      <param name="overlapped" vsli:raw="The &lt;see cref=&quot;T:System.Threading.NativeOverlapped&quot; /&gt; structure to queue.">큐에 대기시킬 <see cref="T:System.Threading.NativeOverlapped" /> 구조체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation was successfully queued to an I/O completion port; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">작업이 I/O 완료 포트 큐에 성공적으로 대기되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.IThreadPoolWorkItem,System.Boolean)">
      <summary vsli:raw="Queues the specified work item object to the thread pool.">지정된 작업 항목 개체를 스레드 풀의 큐에 넣습니다.</summary>
      <param name="callBack" vsli:raw="The work item to invoke when a thread in the thread pool picks up the work item.">스레드 풀에 있는 스레드에서 작업 항목을 선택할 때 호출하는 작업 항목입니다.</param>
      <param name="preferLocal" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to prefer queueing the work item in a queue close to the current thread; &lt;see langword=&quot;false&quot; /&gt; to prefer queueing the work item to the thread pool's shared queue.">현재 스레드에 가까운 큐에 작업 항목을 넣으려면 <see langword="true" />이고, 스레드 풀의 공유 큐에 작업 항목을 넣으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callback" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The work item is a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt;.">작업 항목은 <see cref="T:System.Threading.Tasks.Task" />입니다.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The work item could not be queued.">작업 항목을 큐에 대기할 수 없는 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeds; &lt;see cref=&quot;T:System.OutOfMemoryException&quot; /&gt; is thrown if the work item could not be queued.">메서드가 성공하면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.OutOfMemoryException" />이 발생합니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem(System.Threading.WaitCallback,System.Object)">
      <summary vsli:raw="Queues the specified delegate to the thread pool, but does not propagate the calling stack to the worker thread.">지정된 대리자를 스레드 풀에 대기시키지만 호출 스택을 작업자 스레드에 전파하지 않습니다.</summary>
      <param name="callBack" vsli:raw="A &lt;see cref=&quot;T:System.Threading.WaitCallback&quot; /&gt; that represents the delegate to invoke when a thread in the thread pool picks up the work item.">스레드 풀에 있는 스레드에서 작업 항목을 선택할 때 호출되는 대리자를 나타내는 <see cref="T:System.Threading.WaitCallback" />입니다.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate when serviced from the thread pool.">스레드 풀에서 제공할 때 대리자에 전달되는 개체입니다.</param>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
      <exception cref="T:System.ApplicationException" vsli:raw="An out-of-memory condition was encountered.">메모리가 부족한 경우</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The work item could not be queued.">작업 항목을 큐에 대기할 수 없는 경우</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callBack&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callBack" />이(가) <see langword="null" />인 경우.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method succeeds; &lt;see cref=&quot;T:System.OutOfMemoryException&quot; /&gt; is thrown if the work item could not be queued.">메서드가 성공하면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.OutOfMemoryException" />이 발생합니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeQueueUserWorkItem``1(System.Action{``0},``0,System.Boolean)">
      <summary vsli:raw="Queues a method specified by an &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate for execution, and specifies an object containing data to be used by the method. The method executes when a thread pool thread becomes available.">실행을 위해 <see cref="T:System.Action`1" /> 대리자에 의해 지정된 메서드를 큐에 대기시키고 메서드에서 사용할 데이터가 들어 있는 개체를 지정합니다. 이 메서드는 스레드 풀 스레드를 사용할 수 있을 때 실행됩니다.</summary>
      <param name="callBack" vsli:raw="A delegate representing the method to execute.">실행할 메서드를 나타내는 대리자입니다.</param>
      <param name="state" vsli:raw="An object containing data to be used by the method.">메서드에서 사용할 데이터가 들어 있는 개체입니다.</param>
      <param name="preferLocal" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to prefer queueing the work item in a queue close to the current thread; &lt;see langword=&quot;false&quot; /&gt; to prefer queueing the work item to the thread pool's shared queue.">현재 스레드에 가까운 큐에 작업 항목을 넣으려면 <see langword="true" />이고, 스레드 풀의 공유 큐에 작업 항목을 넣으려면 <see langword="false" />입니다.</param>
      <typeparam name="TState" vsli:raw="The type of elements of &lt;paramref name=&quot;state&quot; /&gt;.">
        <paramref name="state" />의 요소 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callback" />이(가) <see langword="null" />인 경우.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The work item could not be queued.">작업 항목을 큐에 대기할 수 없는 경우</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is successfully queued; &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; is thrown if the work item could not be queued.">메서드가 성공적으로 큐에 대기되면 <see langword="true" />이고, 작업 항목을 큐에 대기할 수 없으면 <see cref="T:System.NotSupportedException" />이 throw됩니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, using a 32-bit signed integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.">제한 시간(밀리초)에 부호 있는 32비트 정수를 사용하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다. 이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 대리자입니다.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">대리자에 전달되는 개체입니다.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">제한 시간(밀리초)입니다. <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">
        <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.Int64,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 64-bit signed integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.">제한 시간(밀리초)에 부호 있는 64비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다. 이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 대리자입니다.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">대리자에 전달되는 개체입니다.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">제한 시간(밀리초)입니다. <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is less than -1.">
        <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 -1보다 작습니다.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.TimeSpan,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; value for the time-out. This method does not propagate the calling stack to the worker thread.">제한 시간에 <see cref="T:System.Threading.WaitHandle" /> 값을 지정하여 <see cref="T:System.TimeSpan" />을 기다리는 대리자를 등록합니다. 이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 대리자입니다.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">대리자에 전달되는 개체입니다.</param>
      <param name="timeout" vsli:raw="The time-out represented by a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt;. If &lt;paramref name=&quot;timeout&quot; /&gt; is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;timeout&quot; /&gt; is -1, the function's time-out interval never elapses.">
        <see cref="T:System.TimeSpan" />으로 나타낸 제한 시간입니다. <paramref name="timeout" />이 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="timeout" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is less than -1.">
        <paramref name="timeout" /> 매개 변수가 -1보다 작습니다.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;paramref name=&quot;timeout&quot; /&gt; parameter is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> 매개 변수가 <see cref="F:System.Int32.MaxValue" />보다 큰 경우</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Threading.ThreadPool.UnsafeRegisterWaitForSingleObject(System.Threading.WaitHandle,System.Threading.WaitOrTimerCallback,System.Object,System.UInt32,System.Boolean)">
      <summary vsli:raw="Registers a delegate to wait for a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt;, specifying a 32-bit unsigned integer for the time-out in milliseconds. This method does not propagate the calling stack to the worker thread.">제한 시간(밀리초)에 부호 없는 32비트 정수를 지정하여 <see cref="T:System.Threading.WaitHandle" />을 기다리는 대리자를 등록합니다. 이 메서드는 호출 스택을 작업자 스레드에 전파하지 않습니다.</summary>
      <param name="waitObject" vsli:raw="The &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; to register. Use a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; other than &lt;see cref=&quot;T:System.Threading.Mutex&quot; /&gt;.">등록할 <see cref="T:System.Threading.WaitHandle" />입니다. <see cref="T:System.Threading.Mutex" />가 아닌 <see cref="T:System.Threading.WaitHandle" />을 사용합니다.</param>
      <param name="callBack" vsli:raw="The delegate to call when the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter is signaled.">
        <paramref name="waitObject" /> 매개 변수가 신호를 받으면 호출할 대리자입니다.</param>
      <param name="state" vsli:raw="The object that is passed to the delegate.">대리자에 전달되는 개체입니다.</param>
      <param name="millisecondsTimeOutInterval" vsli:raw="The time-out in milliseconds. If the &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; parameter is 0 (zero), the function tests the object's state and returns immediately. If &lt;paramref name=&quot;millisecondsTimeOutInterval&quot; /&gt; is -1, the function's time-out interval never elapses.">제한 시간(밀리초)입니다. <paramref name="millisecondsTimeOutInterval" /> 매개 변수가 0이면 해당 함수에서 개체의 상태를 테스트한 다음 즉시 반환합니다. <paramref name="millisecondsTimeOutInterval" />이 -1이면 해당 함수의 시간 제한 간격이 경과하지 않습니다.</param>
      <param name="executeOnlyOnce" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the thread will no longer wait on the &lt;paramref name=&quot;waitObject&quot; /&gt; parameter after the delegate has been called; &lt;see langword=&quot;false&quot; /&gt; to indicate that the timer is reset every time the wait operation completes until the wait is unregistered.">
        <see langword="true" />는 대리자를 호출한 후 스레드가 <paramref name="waitObject" /> 매개 변수를 더 이상 기다리지 않음을 나타내고 <see langword="false" />는 대기 작업이 완료될 때마다 타이머가 다시 설정됨을 나타냅니다.</param>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">호출자에게 필요한 권한이 없는 경우</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Threading.RegisteredWaitHandle&quot; /&gt; object that can be used to cancel the registered wait operation.">등록된 대기 작업을 취소하는 데 사용할 수 있는 <see cref="T:System.Threading.RegisteredWaitHandle" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.CompletedWorkItemCount">
      <summary vsli:raw="Gets the number of work items that have been processed so far.">지금까지 처리된 작업 항목 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of work items that have been processed so far.">지금까지 처리 된 작업 항목의 수입니다.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.PendingWorkItemCount">
      <summary vsli:raw="Gets the number of work items that are currently queued to be processed.">현재 처리 대기 중인 작업 항목의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of work items that are currently queued to be processed.">현재 처리 대기 중인 작업 항목의 수입니다.</returns>
    </member>
    <member name="P:System.Threading.ThreadPool.ThreadCount">
      <summary vsli:raw="Gets the number of thread pool threads that currently exist.">현재 존재하는 스레드 풀 스레드의 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of thread pool threads that currently exist.">현재 존재 하는 스레드 풀 스레드의 수입니다.</returns>
    </member>
    <member name="T:System.Threading.WaitCallback">
      <summary vsli:raw="Represents a callback method to be executed by a thread pool thread.">스레드 풀 스레드에 의해 실행될 콜백 메서드를 나타냅니다.</summary>
      <param name="state" vsli:raw="An object containing information to be used by the callback method.">콜백 메서드에서 사용할 정보가 포함된 개체입니다.</param>
    </member>
    <member name="T:System.Threading.WaitOrTimerCallback">
      <summary vsli:raw="Represents a method to be called when a &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; is signaled or times out.">
        <see cref="T:System.Threading.WaitHandle" />이 신호를 받거나 시간 초과될 때 호출될 메서드를 나타냅니다.</summary>
      <param name="state" vsli:raw="An object containing information to be used by the callback method each time it executes.">콜백 메서드가 실행될 때마다 사용할 정보가 포함된 개체입니다.</param>
      <param name="timedOut" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Threading.WaitHandle&quot; /&gt; timed out; &lt;see langword=&quot;false&quot; /&gt; if it was signaled.">
        <see cref="T:System.Threading.WaitHandle" /> 시간이 초과되면 <see langword="true" />이고, 신호를 받으면 <see langword="false" />입니다.</param>
    </member>
  </members>
</doc>
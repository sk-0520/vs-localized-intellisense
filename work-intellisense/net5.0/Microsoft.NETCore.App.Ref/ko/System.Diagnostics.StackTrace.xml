<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary vsli:raw="Provides information about a &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt;, which represents a function call on the call stack for the current thread.">현재 스레드의 호출 스택에 대한 함수를 나타내는 <see cref="T:System.Diagnostics.StackFrame" />에 대한 정보를 제공합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary vsli:raw="Defines the value that is returned from the &lt;see cref=&quot;M:System.Diagnostics.StackFrame.GetNativeOffset&quot; /&gt; or &lt;see cref=&quot;M:System.Diagnostics.StackFrame.GetILOffset&quot; /&gt; method when the native or Microsoft intermediate language (MSIL) offset is unknown. This field is constant.">네이티브 또는 MSIL(Microsoft Intermediate Language) 오프셋을 알 수 없을 때 <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> 또는 <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> 메서드를 통해 반환되는 값을 정의합니다. 이 필드는 상수입니다.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.StackFrame" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class, optionally capturing source information.">필요에 따라 소스 정보를 캡처하고 <see cref="T:System.Diagnostics.StackFrame" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="needFileInfo" vsli:raw="" />
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that corresponds to a frame above the current stack frame.">현재 스택 프레임 위의 프레임에 해당하는 <see cref="T:System.Diagnostics.StackFrame" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack to skip.">건너뛸 스택 프레임의 개수입니다.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that corresponds to a frame above the current stack frame, optionally capturing source information.">필요에 따라 소스 정보를 캡처하고 현재 스택 프레임 위의 프레임에 해당하는 <see cref="T:System.Diagnostics.StackFrame" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack to skip.">건너뛸 스택 프레임의 개수입니다.</param>
      <param name="needFileInfo" vsli:raw="" />
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that contains only the given file name and line number.">지정된 파일 이름과 줄 번호만 포함하는 <see cref="T:System.Diagnostics.StackFrame" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName" vsli:raw="The file name.">파일 이름입니다.</param>
      <param name="lineNumber" vsli:raw="The line number in the specified file.">지정된 파일의 줄 번호입니다.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that contains only the given file name, line number, and column number.">지정된 파일 이름, 줄 번호 및 열 번호만 포함하는 <see cref="T:System.Diagnostics.StackFrame" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fileName" vsli:raw="The file name.">파일 이름입니다.</param>
      <param name="lineNumber" vsli:raw="The line number in the specified file.">지정된 파일의 줄 번호입니다.</param>
      <param name="colNumber" vsli:raw="The column number in the specified file.">지정된 파일의 열 번호입니다.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary vsli:raw="Gets the column number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">실행 중인 코드를 포함하는 파일에서 열 번호를 가져옵니다. 이 정보는 일반적으로 실행 파일의 디버깅 기호에서 추출됩니다.</summary>
      <returns vsli:raw="The file column number, or 0 (zero) if the file column number cannot be determined.">파일 열 번호 또는 파일 열 번호를 확인할 수 없는 경우 0입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary vsli:raw="Gets the line number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">실행 중인 코드를 포함하는 파일에서 줄 번호를 가져옵니다. 이 정보는 일반적으로 실행 파일의 디버깅 기호에서 추출됩니다.</summary>
      <returns vsli:raw="The file line number, or 0 (zero) if the file line number cannot be determined.">파일 줄 번호 또는 파일 줄 번호를 확인할 수 없는 경우 0입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary vsli:raw="Gets the file name that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">실행 중인 코드를 포함하는 파일 이름을 가져옵니다. 이 정보는 일반적으로 실행 파일의 디버깅 기호에서 추출됩니다.</summary>
      <returns vsli:raw="The file name, or &lt;see langword=&quot;null&quot; /&gt; if the file name cannot be determined.">파일 이름 또는 파일 이름을 확인할 수 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary vsli:raw="Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing. This offset might be an approximation depending on whether or not the just-in-time (JIT) compiler is generating debugging code. The generation of this debugging information is controlled by the &lt;see cref=&quot;T:System.Diagnostics.DebuggableAttribute&quot; /&gt;.">실행 중인 메서드의 MSIL(Microsoft Intermediate Language) 코드 시작 부분에서 오프셋을 가져옵니다. 이 오프셋은 JIT(just-in-time) 컴파일러가 디버깅 코드를 생성하는지 여부에 따라 근사값이 될 수 있습니다. 이 디버깅 정보의 생성은 <see cref="T:System.Diagnostics.DebuggableAttribute" />에 의해 제어됩니다.</summary>
      <returns vsli:raw="The offset from the start of the MSIL code for the method that is executing.">실행 중인 메서드의 MSIL 코드 처음부터 계산한 오프셋입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary vsli:raw="Gets the method in which the frame is executing.">프레임이 실행되고 있는 메서드를 가져옵니다.</summary>
      <returns vsli:raw="The method in which the frame is executing.">프레임이 실행되고 있는 메서드입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary vsli:raw="Gets the offset from the start of the native just-in-time (JIT)-compiled code for the method that is being executed. The generation of this debugging information is controlled by the &lt;see cref=&quot;T:System.Diagnostics.DebuggableAttribute&quot; /&gt; class.">실행 중인 메서드의 네이티브 JIT(just-in-time) 컴파일 코드 처음부터 계산한 오프셋을 가져옵니다. 이 디버깅 정보의 생성은 <see cref="T:System.Diagnostics.DebuggableAttribute" /> 클래스를 통해 제어됩니다.</summary>
      <returns vsli:raw="The offset from the start of the JIT-compiled code for the method that is being executed.">실행 중인 메서드의 JIT 컴파일 코드 처음부터 계산한 오프셋입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary vsli:raw="Builds a readable representation of the stack trace.">읽을 수 있도록 스택 추적을 만듭니다.</summary>
      <returns vsli:raw="A readable representation of the stack trace.">읽을 수 있도록 만든 스택 추적입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions">
      <summary vsli:raw="Provides extension methods for the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class, which represents a function call on the call stack for the current thread.">현재 스레드의 호출 스택에 있는 함수 호출을 나타내는 <see cref="T:System.Diagnostics.StackFrame" /> 클래스에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Returns a pointer to the base address of the native image that this stack frame is executing.">이 스택 프레임이 실행되는 네이티브 이미지의 기준 주소에 대한 포인터를 반환합니다.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">스택 프레임입니다.</param>
      <returns vsli:raw="A pointer to the base address of the native image or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; if you're targeting the .NET Framework.">.NET Framework를 대상으로 하는 경우 <see cref="F:System.IntPtr.Zero" /> 또는 네이티브 이미지의 기준 주소에 대한 포인터입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Gets an interface pointer to the start of the native code for the method that is being executed.">실행되는 메서드에 대한 네이티브 코드의 시작 부분에 대한 인터페이스 포인터를 가져옵니다.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">스택 프레임입니다.</param>
      <returns vsli:raw="An interface pointer to the start of the native code for the method that is being executed or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; if you're targeting the .NET Framework.">.NET Framework를 대상으로 하는 경우 <see cref="F:System.IntPtr.Zero" /> 또는 실행되는 메서드에 대한 네이티브 코드의 시작 부분에 대한 인터페이스 포인터입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether an offset from the start of the IL code for the method that is executing is available.">실행 중인 메서드의 IL 코드 처음부터 오프셋을 사용할 수 있는지를 나타냅니다.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">스택 프레임입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the offset is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">오프셋을 사용할 수 있는 경우 <see langword="true" />이고, 그러지 않은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether information about the method in which the specified frame is executing is available.">지정된 프레임이 실행되는 메서드에 대한 정보를 사용할 수 있는지 여부를 나타냅니다.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">스택 프레임입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if information about the method in which the current frame is executing is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 프레임이 실행되는 메서드에 대한 정보를 사용할 수 있는 경우 <see langword="true" />이고, 그러지 않은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether the native image is available for the specified stack frame.">네이티브 이미지를 지정한 스택 프레임에 사용할 수 있는지를 나타냅니다.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">스택 프레임입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a native image is available for this stack frame; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">네이티브 이미지를 스택 프레임에 사용할 수 있는 경우 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether the file that contains the code that the specified stack frame is executing is available.">지정한 스택 프레임이 실행되는 코드가 포함된 파일을 사용할 수 있는지 여부를 나타냅니다.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">스택 프레임입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code that the specified stack frame is executing is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">지정한 스택 프레임이 실행되는 코드를 사용할 수 있는 경우 <see langword="true" />이고, 그러지 않은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary vsli:raw="Represents a stack trace, which is an ordered collection of one or more stack frames.">여러 스택 프레임의 정렬된 컬렉션에 해당하는 스택 추적을 나타냅니다.</summary>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary vsli:raw="Defines the default for the number of methods to omit from the stack trace. This field is constant.">스택 추적에서 생략할 기본 메서드 수를 정의합니다. 이 필드는 상수입니다.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame.">호출자 프레임에서 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, optionally capturing source information.">필요에 따라 소스 정보를 캡처하고 호출 프레임에서 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">파일 이름, 줄 번호 및 열 번호를 캡처하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class that contains a single frame.">단일 프레임을 포함하는 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="frame" vsli:raw="The frame that the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; object should contain.">
        <see cref="T:System.Diagnostics.StackTrace" /> 개체가 포함해야 하는 프레임입니다.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object.">제공된 예외 개체를 사용하여 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">스택 추적을 생성할 원본 예외 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 <paramref name="e" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class, using the provided exception object and optionally capturing source information.">필요에 따라 소스 정보를 캡처하고 제공된 예외 개체를 사용하여 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">스택 추적을 생성할 원본 예외 개체입니다.</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">파일 이름, 줄 번호 및 열 번호를 캡처하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 <paramref name="e" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object and skipping the specified number of frames.">제공된 예외 개체를 사용하고 지정된 수의 프레임을 건너뛰어 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">스택 추적을 생성할 원본 예외 개체입니다.</param>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">추적할 스택 프레임의 개수입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 <paramref name="e" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> 매개 변수가 음수인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object, skipping the specified number of frames and optionally capturing source information.">지정된 수의 프레임을 건너뛰고 필요에 따라 소스 정보를 캡처하여 제공된 예외 개체로 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">스택 추적을 생성할 원본 예외 개체입니다.</param>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">추적할 스택 프레임의 개수입니다.</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">파일 이름, 줄 번호 및 열 번호를 캡처하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">매개 변수 <paramref name="e" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> 매개 변수가 음수인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, skipping the specified number of frames.">지정된 수의 프레임을 건너뛰어 호출자 프레임에서 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">추적할 스택 프레임의 개수입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> 매개 변수가 음수인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, skipping the specified number of frames and optionally capturing source information.">지정된 수의 프레임을 건너뛰고 필요에 따라 소스 정보를 캡처하여 호출자 프레임에서 <see cref="T:System.Diagnostics.StackTrace" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">추적할 스택 프레임의 개수입니다.</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">파일 이름, 줄 번호 및 열 번호를 캡처하려면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">
        <paramref name="skipFrames" /> 매개 변수가 음수인 경우</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary vsli:raw="Gets the specified stack frame.">지정된 스택 프레임을 가져옵니다.</summary>
      <param name="index" vsli:raw="The index of the stack frame requested.">요청한 스택 프레임의 인덱스입니다.</param>
      <returns vsli:raw="The specified stack frame.">지정된 스택 프레임입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary vsli:raw="Returns a copy of all stack frames in the current stack trace.">현재 스택 추적에 있는 모든 스택 프레임의 복사본을 반환합니다.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; representing the function calls in the stack trace.">스택 추적의 함수 호출을 나타내는 <see cref="T:System.Diagnostics.StackFrame" /> 형식의 배열입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary vsli:raw="Builds a readable representation of the stack trace.">읽을 수 있도록 스택 추적을 만듭니다.</summary>
      <returns vsli:raw="A readable representation of the stack trace.">읽을 수 있도록 만든 스택 추적입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary vsli:raw="Gets the number of frames in the stack trace.">스택 추적의 프레임 수를 가져옵니다.</summary>
      <returns vsli:raw="The number of frames in the stack trace.">스택 추적의 프레임 수입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder">
      <summary vsli:raw="Represents a symbol binder for managed code.">관리 코드의 기호 바인더를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)">
      <summary vsli:raw="Gets the interface of the symbol reader for the current file.">현재 파일의 기호 판독기 인터페이스를 가져옵니다.</summary>
      <param name="importer" vsli:raw="The metadata import interface.">메타데이터를 가져오는 인터페이스입니다.</param>
      <param name="filename" vsli:raw="The name of the file for which the reader interface is required.">판독기 인터페이스가 필요한 파일 이름입니다.</param>
      <param name="searchPath" vsli:raw="The search path used to locate the symbol file.">기호 파일을 찾는 데 사용하는 검색 경로입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolReader&quot; /&gt; interface that reads the debugging symbols.">
        <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> 인터페이스가 디버깅 기호를 읽습니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder1">
      <summary vsli:raw="Represents a symbol binder for managed code.">관리 코드의 기호 바인더를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder1.GetReader(System.IntPtr,System.String,System.String)">
      <summary vsli:raw="Gets the interface of the symbol reader for the current file.">현재 파일의 기호 판독기 인터페이스를 가져옵니다.</summary>
      <param name="importer" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that refers to the metadata import interface.">메타데이터 가져오기 인터페이스를 참조하는 <see cref="T:System.IntPtr" />입니다.</param>
      <param name="filename" vsli:raw="The name of the file for which the reader interface is required.">판독기 인터페이스가 필요한 파일 이름입니다.</param>
      <param name="searchPath" vsli:raw="The search path used to locate the symbol file.">기호 파일을 찾는 데 사용하는 검색 경로입니다.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolReader&quot; /&gt; interface that reads the debugging symbols.">
        <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> 인터페이스가 디버깅 기호를 읽습니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocument">
      <summary vsli:raw="Represents a document referenced by a symbol store.">기호 저장소가 참조하는 문서를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.FindClosestLine(System.Int32)">
      <summary vsli:raw="Returns the closest line that is a sequence point, given a line in the current document that might or might not be a sequence point.">시퀀스 위치가 될 수도 있고 그렇지 않을 수도 있는 현재 문서에서 줄을 지정하면 시퀀스 위치가 되는 가장 가까운 줄을 반환합니다.</summary>
      <param name="line" vsli:raw="The specified line in the document.">문서에서 지정된 줄입니다.</param>
      <returns vsli:raw="The closest line that is a sequence point.">시퀀스 위치가 되는 가장 가까운 줄입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetCheckSum">
      <summary vsli:raw="Gets the checksum.">체크섬을 가져옵니다.</summary>
      <returns vsli:raw="The checksum.">체크섬입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Gets the embedded document source for the specified range.">지정된 범위의 포함 문서 소스를 가져옵니다.</summary>
      <param name="startLine" vsli:raw="The starting line in the current document.">현재 문서의 시작 줄입니다.</param>
      <param name="startColumn" vsli:raw="The starting column in the current document.">현재 문서의 시작 열입니다.</param>
      <param name="endLine" vsli:raw="The ending line in the current document.">현재 문서의 끝 줄입니다.</param>
      <param name="endColumn" vsli:raw="The ending column in the current document.">현재 문서의 끝 열입니다.</param>
      <returns vsli:raw="The document source for the specified range.">지정된 범위의 문서 소스입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.CheckSumAlgorithmId">
      <summary vsli:raw="Gets the checksum algorithm identifier.">체크섬 알고리즘 식별자를 가져옵니다.</summary>
      <returns vsli:raw="A GUID identifying the checksum algorithm. The value is all zeros, if there is no checksum.">체크섬 알고리즘을 식별하는 GUID입니다. 체크섬이 없으면 값은 모두 0입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.DocumentType">
      <summary vsli:raw="Gets the type of the current document.">현재 문서의 형식을 가져옵니다.</summary>
      <returns vsli:raw="The type of the current document.">현재 문서의 형식입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.HasEmbeddedSource">
      <summary vsli:raw="Checks whether the current document is stored in the symbol store.">현재 문서가 기호 저장소에 저장되었는지 여부를 확인합니다.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current document is stored in the symbol store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">현재 문서가 기호 저장소에 저장되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.Language">
      <summary vsli:raw="Gets the language of the current document.">현재 문서의 언어를 가져옵니다.</summary>
      <returns vsli:raw="The language of the current document.">현재 문서의 언어입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.LanguageVendor">
      <summary vsli:raw="Gets the language vendor of the current document.">현재 문서의 언어 공급업체를 가져옵니다.</summary>
      <returns vsli:raw="The language vendor of the current document.">현재 문서의 언어 공급업체입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.SourceLength">
      <summary vsli:raw="Gets the length, in bytes, of the embedded source.">포함 리소스의 길이(바이트)를 가져옵니다.</summary>
      <returns vsli:raw="The source length of the current document.">현재 문서의 리소스 길이입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.URL">
      <summary vsli:raw="Gets the URL of the current document.">현재 문서의 URL을 가져옵니다.</summary>
      <returns vsli:raw="The URL of the current document.">현재 문서의 URL입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary vsli:raw="Represents a document referenced by a symbol store.">기호 저장소가 참조하는 문서를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary vsli:raw="Sets checksum information.">체크섬 정보를 설정합니다.</summary>
      <param name="algorithmId" vsli:raw="The GUID representing the algorithm ID.">알고리즘 ID를 나타내는 GUID입니다.</param>
      <param name="checkSum" vsli:raw="The checksum.">체크섬입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary vsli:raw="Stores the raw source for a document in the symbol store.">문서의 원시 소스를 기호 저장소에 저장합니다.</summary>
      <param name="source" vsli:raw="The document source represented as unsigned bytes.">부호 없는 바이트로 나타내진 문서 소스입니다.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolMethod">
      <summary vsli:raw="Represents a method within a symbol store.">기호 저장소 내의 메서드를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace">
      <summary vsli:raw="Gets the namespace that the current method is defined within.">현재 메서드가 정의되어 있는 네임스페이스를 가져옵니다.</summary>
      <returns vsli:raw="The namespace that the current method is defined within.">현재 메서드가 정의되어 있는 네임스페이스입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position.">지정된 위치에 해당하는 메서드에 들어 있는 MSIL(Microsoft intermediate language) 오프셋을 가져옵니다.</summary>
      <param name="document" vsli:raw="The document for which the offset is requested.">오프셋이 요청된 문서입니다.</param>
      <param name="line" vsli:raw="The document line corresponding to the offset.">오프셋에 해당하는 문서 줄입니다.</param>
      <param name="column" vsli:raw="The document column corresponding to the offset.">오프셋에 해당하는 문서 열입니다.</param>
      <returns vsli:raw="The offset within the specified document.">지정된 문서에 들어 있는 오프셋입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters">
      <summary vsli:raw="Gets the parameters for the current method.">현재 메서드의 매개 변수를 가져옵니다.</summary>
      <returns vsli:raw="The array of parameters for the current method.">현재 메서드의 매개 변수 배열입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) that a given position covers within this method.">지정된 위치가 이 메서드에 설명되어 있는 MSIL(Microsoft intermediate language)의 범위에 해당하는 시작 및 종료 오프셋 쌍의 배열을 가져옵니다.</summary>
      <param name="document" vsli:raw="The document for which the offset is requested.">오프셋이 요청된 문서입니다.</param>
      <param name="line" vsli:raw="The document line corresponding to the ranges.">범위에 해당하는 문서 줄입니다.</param>
      <param name="column" vsli:raw="The document column corresponding to the ranges.">범위에 해당하는 문서 열입니다.</param>
      <returns vsli:raw="An array of start and end offset pairs.">시작 및 종료 오프셋 쌍의 배열입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)">
      <summary vsli:raw="Returns the most enclosing lexical scope when given an offset within a method.">오프셋이 메서드에서 지정되면 대부분의 포함 어휘 범위를 반환합니다.</summary>
      <param name="offset" vsli:raw="The byte offset within the method of the lexical scope.">어휘 범위의 메서드에 들어 있는 바이트 오프셋입니다.</param>
      <returns vsli:raw="The most enclosing lexical scope for the given byte offset within the method.">메서드에서 지정된 바이트 오프셋에 대해 포함하는 대부분의 어휘 범위입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Gets the sequence points for the current method.">현재 메서드의 시퀀스 위치를 가져옵니다.</summary>
      <param name="offsets" vsli:raw="The array of byte offsets from the beginning of the method for the sequence points.">시퀀스 위치에 대한 메서드 시작 부분부터의 바이트 오프셋 배열입니다.</param>
      <param name="documents" vsli:raw="The array of documents in which the sequence points are located.">시퀀스 위치가 있는 문서의 배열입니다.</param>
      <param name="lines" vsli:raw="The array of lines in the documents at which the sequence points are located.">시퀀스 위치가 있는 문서의 줄 배열입니다.</param>
      <param name="columns" vsli:raw="The array of columns in the documents at which the sequence points are located.">시퀀스 위치가 있는 문서의 열 배열입니다.</param>
      <param name="endLines" vsli:raw="The array of lines in the documents at which the sequence points end.">시퀀스 위치가 끝나는 문서의 줄 배열입니다.</param>
      <param name="endColumns" vsli:raw="The array of columns in the documents at which the sequence points end.">시퀀스 위치가 끝나는 문서의 열 배열입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Gets the start and end positions for the source of the current method.">현재 메서드의 소스에 대한 시작 및 종료 위치를 가져옵니다.</summary>
      <param name="docs" vsli:raw="The starting and ending source documents.">시작 및 종료 소스 문서입니다.</param>
      <param name="lines" vsli:raw="The starting and ending lines in the corresponding source documents.">해당 소스 문서의 시작 및 종료 줄입니다.</param>
      <param name="columns" vsli:raw="The starting and ending columns in the corresponding source documents.">해당 소스 문서의 시작 및 끝 열입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the positions were defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">위치가 정의되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.RootScope">
      <summary vsli:raw="Gets the root lexical scope for the current method. This scope encloses the entire method.">현재 메서드의 루트 어휘 범위를 가져옵니다. 이 범위는 전체 메서드를 포함합니다.</summary>
      <returns vsli:raw="The root lexical scope that encloses the entire method.">전체 메서드를 포함하는 루트 어휘 범위입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount">
      <summary vsli:raw="Gets a count of the sequence points in the method.">메서드에 있는 시퀀스 위치의 수를 가져옵니다.</summary>
      <returns vsli:raw="The count of the sequence points in the method.">메서드에 있는 시퀀스 위치의 수입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.Token">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; containing the metadata for the current method.">현재 메서드의 메타데이터가 들어 있는 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />을 가져옵니다.</summary>
      <returns vsli:raw="The metadata token for the current method.">현재 메서드의 메타데이터 토큰입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolNamespace">
      <summary vsli:raw="Represents a namespace within a symbol store.">기호 저장소 내의 네임스페이스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetNamespaces">
      <summary vsli:raw="Gets the child members of the current namespace.">현재 네임스페이스의 자식 멤버를 가져옵니다.</summary>
      <returns vsli:raw="The child members of the current namespace.">현재 네임스페이스의 자식 멤버입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetVariables">
      <summary vsli:raw="Gets all the variables defined at global scope within the current namespace.">현재 네임스페이스의 전역 범위에서 정의된 변수를 모두 가져옵니다.</summary>
      <returns vsli:raw="The variables defined at global scope within the current namespace.">현재 네임스페이스의 전역 범위에서 정의된 변수입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolNamespace.Name">
      <summary vsli:raw="Gets the current namespace.">현재 네임스페이스를 가져옵니다.</summary>
      <returns vsli:raw="The current namespace.">현재 네임스페이스입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolReader">
      <summary vsli:raw="Represents a symbol reader for managed code.">관리 코드의 기호 판독기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Gets a document specified by the language, vendor, and type.">언어, 공급업체, 형식에 의해 지정된 문서를 가져옵니다.</summary>
      <param name="url" vsli:raw="The URL that identifies the document.">문서를 식별하는 URL입니다.</param>
      <param name="language" vsli:raw="The document language. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">문서 언어입니다. 이 매개 변수를 <see cref="F:System.Guid.Empty" />로 지정할 수 있습니다.</param>
      <param name="languageVendor" vsli:raw="The identity of the vendor for the document language. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">문서 언어의 공급업체 ID입니다. 이 매개 변수를 <see cref="F:System.Guid.Empty" />로 지정할 수 있습니다.</param>
      <param name="documentType" vsli:raw="The type of the document. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">문서의 형식입니다. 이 매개 변수를 <see cref="F:System.Guid.Empty" />로 지정할 수 있습니다.</param>
      <returns vsli:raw="The specified document.">지정된 문서입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocuments">
      <summary vsli:raw="Gets an array of all documents defined in the symbol store.">기호 저장소에 정의된 모든 문서의 배열을 가져옵니다.</summary>
      <returns vsli:raw="An array of all documents defined in the symbol store.">기호 저장소에 정의된 모든 문서의 배열입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetGlobalVariables">
      <summary vsli:raw="Gets all global variables in the module.">모듈의 전역 변수를 모두 가져옵니다.</summary>
      <returns vsli:raw="An array of all variables in the module.">모듈의 모든 변수의 배열입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Gets a symbol reader method object when given the identifier of a method.">메서드의 식별자가 지정되면 기호 판독기 메서드 개체를 가져옵니다.</summary>
      <param name="method" vsli:raw="The metadata token of the method.">메서드의 메타데이터 토큰입니다.</param>
      <returns vsli:raw="The symbol reader method object for the specified method identifier.">지정된 메서드 식별자의 기호 판독기 메서드 개체입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
      <summary vsli:raw="Gets a symbol reader method object when given the identifier of a method and its edit and continue version.">메서드의 식별자와 메서드의 편집하며 계속하기 버전이 지정되면 기호 판독기 메서드 개체를 가져옵니다.</summary>
      <param name="method" vsli:raw="The metadata token of the method.">메서드의 메타데이터 토큰입니다.</param>
      <param name="version" vsli:raw="The edit and continue version of the method.">메서드의 편집하며 계속하기 버전입니다.</param>
      <returns vsli:raw="The symbol reader method object for the specified method identifier.">지정된 메서드 식별자의 기호 판독기 메서드 개체입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets a symbol reader method object that contains a specified position in a document.">지정된 위치가 문서에 포함되어 있는 기호 판독기 메서드 개체를 가져옵니다.</summary>
      <param name="document" vsli:raw="The document in which the method is located.">메서드가 있는 문서입니다.</param>
      <param name="line" vsli:raw="The position of the line within the document. The lines are numbered, beginning with 1.">문서에 있는 줄의 위치입니다. 각 줄은 1부터 시작하여 번호가 매겨져 있습니다.</param>
      <param name="column" vsli:raw="The position of column within the document. The columns are numbered, beginning with 1.">문서에 있는 열의 위치입니다. 각 열은 1부터 시작하여 번호가 매겨져 있습니다.</param>
      <returns vsli:raw="The reader method object for the specified position in the document.">문서의 지정된 위치에 대한 판독기 메서드 개체입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetNamespaces">
      <summary vsli:raw="Gets the namespaces that are defined in the global scope within the current symbol store.">현재 기호 저장소의 전역 범위에서 정의된 네임스페이스를 가져옵니다.</summary>
      <returns vsli:raw="The namespaces defined in the global scope within the current symbol store.">현재 기호 저장소의 전역 범위에서 정의된 네임스페이스입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)">
      <summary vsli:raw="Gets an attribute value when given the attribute name.">특성 이름이 지정되면 특성 값을 가져옵니다.</summary>
      <param name="parent" vsli:raw="The metadata token for the object for which the attribute is requested.">특성이 요청된 개체의 메타데이터 토큰입니다.</param>
      <param name="name" vsli:raw="The attribute name.">특성 이름입니다.</param>
      <returns vsli:raw="The value of the attribute.">특성 값</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Gets the variables that are not local when given the parent.">부모가 지정되면 지역 변수가 아닌 변수를 가져옵니다.</summary>
      <param name="parent" vsli:raw="The metadata token for the type for which the variables are requested.">변수가 요청된 형식의 메타데이터 토큰입니다.</param>
      <returns vsli:raw="An array of variables for the parent.">부모 변수의 배열입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolReader.UserEntryPoint">
      <summary vsli:raw="Gets the metadata token for the method that was specified as the user entry point for the module, if any.">모듈의 사용자 진입점으로 지정된 메서드의 메타데이터 토큰을 가져옵니다.</summary>
      <returns vsli:raw="The metadata token for the method that is the user entry point for the module.">모듈의 사용자 진입점인 메서드의 메타데이터 토큰입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolScope">
      <summary vsli:raw="Represents a lexical scope within &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolMethod&quot; /&gt;, providing access to the start and end offsets of the scope, as well as its child and parent scopes.">
        <see cref="T:System.Diagnostics.SymbolStore.ISymbolMethod" />에 들어 있는 어휘 범위를 나타내며, 부모 및 자식 범위는 물론 범위의 시작 및 종료 오프셋에 액세스할 수 있습니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren">
      <summary vsli:raw="Gets the child lexical scopes of the current lexical scope.">현재 어휘 범위의 자식 어휘 범위를 가져옵니다.</summary>
      <returns vsli:raw="The child lexical scopes that of the current lexical scope.">현재 어휘 범위의 자식 어휘 범위입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals">
      <summary vsli:raw="Gets the local variables within the current lexical scope.">현재 어휘 범위의 지역 변수를 가져옵니다.</summary>
      <returns vsli:raw="The local variables within the current lexical scope.">현재 어휘 범위의 지역 변수입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces">
      <summary vsli:raw="Gets the namespaces that are used within the current scope.">현재 범위에서 사용된 네임스페이스를 가져옵니다.</summary>
      <returns vsli:raw="The namespaces that are used within the current scope.">현재 범위에서 사용된 네임스페이스입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset">
      <summary vsli:raw="Gets the end offset of the current lexical scope.">현재 어휘 범위의 종료 오프셋을 가져옵니다.</summary>
      <returns vsli:raw="The end offset of the current lexical scope.">현재 어휘 범위의 종료 오프셋입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Method">
      <summary vsli:raw="Gets the method that contains the current lexical scope.">현재 어휘 범위를 포함하는 메서드를 가져옵니다.</summary>
      <returns vsli:raw="The method that contains the current lexical scope.">현재 어휘 범위를 포함하는 메서드입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Parent">
      <summary vsli:raw="Gets the parent lexical scope of the current scope.">현재 범위의 부모 어휘 범위를 가져옵니다.</summary>
      <returns vsli:raw="The parent lexical scope of the current scope.">현재 범위의 부모 어휘 범위입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset">
      <summary vsli:raw="Gets the start offset of the current lexical scope.">현재 어휘 범위의 시작 오프셋을 가져옵니다.</summary>
      <returns vsli:raw="The start offset of the current lexical scope.">현재 어휘 범위의 시작 오프셋입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolVariable">
      <summary vsli:raw="Represents a variable within a symbol store.">기호 저장소 내의 변수를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolVariable.GetSignature">
      <summary vsli:raw="Gets the variable signature.">변수 시그니처를 가져옵니다.</summary>
      <returns vsli:raw="The variable signature as an opaque blob.">불투명 BLOB로서의 변수 시그니처입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField1">
      <summary vsli:raw="Gets the first address of a variable.">변수의 첫 번째 주소를 가져옵니다.</summary>
      <returns vsli:raw="The first address of the variable.">변수의 첫 번째 주소입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField2">
      <summary vsli:raw="Gets the second address of a variable.">변수의 두 번째 주소를 가져옵니다.</summary>
      <returns vsli:raw="The second address of the variable.">변수의 두 번째 주소입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField3">
      <summary vsli:raw="Gets the third address of a variable.">변수의 세 번째 주소를 가져옵니다.</summary>
      <returns vsli:raw="The third address of the variable.">변수의 세 번째 주소입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressKind">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymAddressKind&quot; /&gt; value describing the type of the address.">주소의 형식을 설명하는 <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> 값을 가져옵니다.</summary>
      <returns vsli:raw="The type of the address. One of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymAddressKind&quot; /&gt; values.">주소의 형식입니다. <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Attributes">
      <summary vsli:raw="Gets the attributes of the variable.">변수의 특성을 가져옵니다.</summary>
      <returns vsli:raw="The variable attributes.">변수 특성입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.EndOffset">
      <summary vsli:raw="Gets the end offset of a variable within the scope of the variable.">변수 범위 내의 변수의 끝 오프셋을 가져옵니다.</summary>
      <returns vsli:raw="The end offset of the variable.">변수의 끝 오프셋입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Name">
      <summary vsli:raw="Gets the name of the variable.">변수의 이름을 가져옵니다.</summary>
      <returns vsli:raw="The name of the variable.">변수의 이름입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.StartOffset">
      <summary vsli:raw="Gets the start offset of the variable within the scope of the variable.">변수 범위 내의 변수의 시작 오프셋을 가져옵니다.</summary>
      <returns vsli:raw="The start offset of the variable.">변수의 시작 오프셋입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolWriter">
      <summary vsli:raw="Represents a symbol writer for managed code.">관리 코드의 기호 작성기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
      <summary vsli:raw="Closes &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; and commits the symbols to the symbol store.">
        <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" />를 닫고 기호를 기호 저장소에 커밋합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
      <summary vsli:raw="Closes the current method.">현재 메서드를 닫습니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
      <summary vsli:raw="Closes the most recent namespace.">최근의 네임스페이스를 닫습니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
      <summary vsli:raw="Closes the current lexical scope.">현재 어휘 범위를 닫습니다.</summary>
      <param name="endOffset" vsli:raw="The points past the last instruction in the scope.">범위 내의 마지막 명령을 벗어난 지점입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Defines a source document.">소스 문서를 정의합니다.</summary>
      <param name="url" vsli:raw="The URL that identifies the document.">문서를 식별하는 URL입니다.</param>
      <param name="language" vsli:raw="The document language. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">문서 언어입니다. 이 매개 변수는 <see cref="F:System.Guid.Empty" />일 수 있습니다.</param>
      <param name="languageVendor" vsli:raw="The identity of the vendor for the document language. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">문서 언어의 공급업체 ID입니다. 이 매개 변수는 <see cref="F:System.Guid.Empty" />일 수 있습니다.</param>
      <param name="documentType" vsli:raw="The type of the document. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">문서의 형식입니다. 이 매개 변수는 <see cref="F:System.Guid.Empty" />일 수 있습니다.</param>
      <returns vsli:raw="The object that represents the document.">문서를 나타내는 개체입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a field in a type or a global field.">형식의 필드나 전역 필드를 정의합니다.</summary>
      <param name="parent" vsli:raw="The metadata type or method token.">메타데이터 형식 또는 메서드 토큰입니다.</param>
      <param name="name" vsli:raw="The field name.">필드 이름입니다.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the field attributes.">필드 특성의 비트 조합입니다.</param>
      <param name="signature" vsli:raw="The field signature.">필드 시그니처입니다.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt; and &lt;paramref name=&quot;addr2&quot; /&gt;.">
        <paramref name="addr1" /> 및 <paramref name="addr2" />의 주소 형식입니다.</param>
      <param name="addr1" vsli:raw="The first address for the field specification.">필드 사양의 첫 번째 주소입니다.</param>
      <param name="addr2" vsli:raw="The second address for the field specification.">필드 사양의 두 번째 주소입니다.</param>
      <param name="addr3" vsli:raw="The third address for the field specification.">필드 사양의 세 번째 주소입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single global variable.">단일 전역 변수를 정의합니다.</summary>
      <param name="name" vsli:raw="The global variable name.">지역 변수 이름입니다.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the global variable attributes.">전역 변수 특성의 비트 조합입니다.</param>
      <param name="signature" vsli:raw="The global variable signature.">전역 변수 시그니처입니다.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">
        <paramref name="addr1" />, <paramref name="addr2" /> 및 <paramref name="addr3" />의 주소 형식입니다.</param>
      <param name="addr1" vsli:raw="The first address for the global variable specification.">전역 변수 사양의 첫 번째 주소입니다.</param>
      <param name="addr2" vsli:raw="The second address for the global variable specification.">전역 변수 사양의 두 번째 주소입니다.</param>
      <param name="addr3" vsli:raw="The third address for the global variable specification.">전역 변수 사양의 세 번째 주소입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single variable in the current lexical scope.">현재 어휘 범위에 단일 변수를 정의합니다.</summary>
      <param name="name" vsli:raw="The local variable name.">지역 변수 이름입니다.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the local variable attributes.">지역 변수 특성의 비트 조합입니다.</param>
      <param name="signature" vsli:raw="The local variable signature.">지역 변수 시그니처입니다.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">
        <paramref name="addr1" />, <paramref name="addr2" /> 및 <paramref name="addr3" />의 주소 형식입니다.</param>
      <param name="addr1" vsli:raw="The first address for the local variable specification.">지역 변수 사양의 첫 번째 주소입니다.</param>
      <param name="addr2" vsli:raw="The second address for the local variable specification.">지역 변수 사양의 두 번째 주소입니다.</param>
      <param name="addr3" vsli:raw="The third address for the local variable specification.">지역 변수 사양의 세 번째 주소입니다.</param>
      <param name="startOffset" vsli:raw="The start offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope.">변수의 시작 오프셋입니다. 이 매개 변수가 0이면 매개 변수가 무시되고 변수가 전체 범위에 걸쳐 정의됩니다. 0이 아닌 경우에는 변수가 현재 범위의 오프셋에 포함됩니다.</param>
      <param name="endOffset" vsli:raw="The end offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope.">변수의 끝 오프셋입니다. 이 매개 변수가 0이면 매개 변수가 무시되고 변수가 전체 범위에 걸쳐 정의됩니다. 0이 아닌 경우에는 변수가 현재 범위의 오프셋에 포함됩니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single parameter in the current method. The type of each parameter is taken from its position within the signature of the method.">현재 메서드의 단일 매개 변수를 정의합니다. 메서드 시그니처 내의 위치에서 각 매개 변수의 형식을 가져옵니다.</summary>
      <param name="name" vsli:raw="The parameter name.">매개 변수 이름입니다.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the parameter attributes.">매개 변수 특성의 비트 조합입니다.</param>
      <param name="sequence" vsli:raw="The parameter signature.">매개 변수 시그니처입니다.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">
        <paramref name="addr1" />, <paramref name="addr2" /> 및 <paramref name="addr3" />의 주소 형식입니다.</param>
      <param name="addr1" vsli:raw="The first address for the parameter specification.">매개 변수 사양의 첫 번째 주소입니다.</param>
      <param name="addr2" vsli:raw="The second address for the parameter specification.">매개 변수 사양의 두 번째 주소입니다.</param>
      <param name="addr3" vsli:raw="The third address for the parameter specification.">매개 변수 사양의 세 번째 주소입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Defines a group of sequence points within the current method.">현재 메서드 내에서 시퀀스 위치 그룹을 정의합니다.</summary>
      <param name="document" vsli:raw="The document object for which the sequence points are being defined.">시퀀스 위치를 정의할 문서 개체입니다.</param>
      <param name="offsets" vsli:raw="The sequence point offsets measured from the beginning of methods.">메서드의 시작 부분에서 측정된 시퀀스 위치 오프셋입니다.</param>
      <param name="lines" vsli:raw="The document lines for the sequence points.">시퀀스 위치의 문서 줄입니다.</param>
      <param name="columns" vsli:raw="The document positions for the sequence points.">시퀀스 위치의 문서 위치입니다.</param>
      <param name="endLines" vsli:raw="The document end lines for the sequence points.">시퀀스 위치의 문서 끝 줄입니다.</param>
      <param name="endColumns" vsli:raw="The document end positions for the sequence points.">시퀀스 위치의 문서 끝 위치입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
      <summary vsli:raw="Sets the metadata emitter interface to associate with a writer.">작성기와 연결할 메타데이터 생성기 인터페이스를 설정합니다.</summary>
      <param name="emitter" vsli:raw="The metadata emitter interface.">메타데이터 내보내기 인터페이스입니다.</param>
      <param name="filename" vsli:raw="The file name for which the debugging symbols are written. Some writers require a file name, and others do not. If a file name is specified for a writer that does not use file names, this parameter is ignored.">디버깅 기호가 쓰여진 파일 이름입니다. 일부 작성기에는 파일 이름이 필요하지만 다른 작성기에는 그렇지 않습니다. 파일 이름을 사용하지 않는 작성기에 대해 파일 이름이 지정되면 이 매개 변수는 무시됩니다.</param>
      <param name="fFullBuild" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; indicates that this is a full rebuild; &lt;see langword=&quot;false&quot; /&gt; indicates that this is an incremental compilation.">
        <see langword="true" />는 전체 다시 빌드를, <see langword="false" />는 증분 컴파일을 나타냅니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Opens a method to place symbol information into.">기호 정보를 배치할 메서드를 엽니다.</summary>
      <param name="method" vsli:raw="The metadata token for the method to be opened.">열릴 메서드의 메타데이터 토큰입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
      <summary vsli:raw="Opens a new namespace.">새 네임스페이스를 엽니다.</summary>
      <param name="name" vsli:raw="The name of the new namespace.">새 네임스페이스의 이름입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
      <summary vsli:raw="Opens a new lexical scope in the current method.">현재 메서드에서 새 어휘 범위를 엽니다.</summary>
      <param name="startOffset" vsli:raw="The offset, in bytes, from the beginning of the method to the first instruction in the lexical scope.">메서드의 시작 부분과 어휘 범위의 첫 번째 명령 사이의 오프셋(바이트 단위)입니다.</param>
      <returns vsli:raw="An opaque scope identifier that can be used with &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)&quot; /&gt; to define the start and end offsets of a scope at a later time. In this case, the offsets passed to &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)&quot; /&gt; are ignored. A scope identifier is valid only in the current method.">
        <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" />와 함께 사용하여 차후에 범위의 시작과 끝 오프셋을 정의하는 불투명한 범위 식별자입니다. 이 경우 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /> 및 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" />에 전달된 오프셋은 무시됩니다. 범위 식별자는 현재 메서드에서만 유효합니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
      <summary vsli:raw="Specifies the true start and end of a method within a source file. Use &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)&quot; /&gt; to specify the extent of a method, independent of the sequence points that exist within the method.">소스 파일 내에서 메서드의 실제 시작과 끝을 지정합니다. <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" />를 사용하여 메서드의 범위와 메서드 내에 있는 독립적인 시퀀스 위치를 지정합니다.</summary>
      <param name="startDoc" vsli:raw="The document that contains the starting position.">시작 위치가 들어 있는 문서입니다.</param>
      <param name="startLine" vsli:raw="The starting line number.">시작 줄 번호입니다.</param>
      <param name="startColumn" vsli:raw="The starting column.">시작 열입니다.</param>
      <param name="endDoc" vsli:raw="The document that contains the ending position.">끝 위치가 들어 있는 문서입니다.</param>
      <param name="endLine" vsli:raw="The ending line number.">끝 줄 번호입니다.</param>
      <param name="endColumn" vsli:raw="The ending column number.">끝 열 번호입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines the offset range for the specified lexical scope.">지정된 어휘 범위에 대한 오프셋 범위를 정의합니다.</summary>
      <param name="scopeID" vsli:raw="The identifier of the lexical scope.">어휘 범위의 식별자입니다.</param>
      <param name="startOffset" vsli:raw="The byte offset of the beginning of the lexical scope.">어휘 범위 시작 부분의 바이트 오프셋입니다.</param>
      <param name="endOffset" vsli:raw="The byte offset of the end of the lexical scope.">어휘 범위 끝 부분의 바이트 오프셋입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
      <summary vsli:raw="Defines an attribute when given the attribute name and the attribute value.">특성 이름 및 특성 값이 주어지면 특성을 정의합니다.</summary>
      <param name="parent" vsli:raw="The metadata token for which the attribute is being defined.">특성이 정의되는 메타데이터 토큰입니다.</param>
      <param name="name" vsli:raw="The attribute name.">특성 이름입니다.</param>
      <param name="data" vsli:raw="The attribute value.">특성 값입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
      <summary vsli:raw="Sets the underlying &lt;see langword=&quot;ISymUnmanagedWriter&quot; /&gt; (the corresponding unmanaged interface) that a managed &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; uses to emit symbols.">관리되는 <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" />가 기호를 내보내는 데 사용하는 내부 <see langword="ISymUnmanagedWriter" />(관리되지 않는 해당 인터페이스)를 설정합니다.</summary>
      <param name="underlyingWriter" vsli:raw="A pointer to code that represents the underlying writer.">내부 작성기를 나타내는 코드에 대한 포인터입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Identifies the user-defined method as the entry point for the current module.">사용자 정의 메서드를 현재 모듈의 진입점으로 식별합니다.</summary>
      <param name="entryMethod" vsli:raw="The metadata token for the method that is the user entry point.">사용자 엔트리 지점인 메서드의 메타데이터 토큰입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies that the given, fully qualified namespace name is used within the open lexical scope.">지정된 정규화된 네임스페이스 이름이 열린 어휘 범위 내에서 사용되도록 지정합니다.</summary>
      <param name="fullName" vsli:raw="The fully qualified name of the namespace.">네임스페이스의 정규화된 이름입니다.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymAddressKind">
      <summary vsli:raw="Specifies address types for local variables, parameters, and fields in the methods &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)&quot; /&gt; of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; interface.">
        <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" /> 인터페이스의 <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" />, <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> 및 <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> 메서드에서 지역 변수, 매개 변수 및 필드의 주소 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.BitField">
      <summary vsli:raw="A bit field. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the position where the field starts, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the field length.">비트 필드입니다. <paramref name="addr1" /> 매개 변수는 필드가 시작하는 위치이고 <paramref name="addr2" /> 매개 변수는 필드 길이입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.ILOffset">
      <summary vsli:raw="A Microsoft intermediate language (MSIL) offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the MSIL local variable or parameter index.">MSIL(Microsoft intermediate language) 오프셋입니다. <paramref name="addr1" /> 매개 변수는 MSIL 지역 변수나 매개 변수 인덱스입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeOffset">
      <summary vsli:raw="A native offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the offset from the start of the parent.">네이티브 오프셋입니다. <paramref name="addr1" /> 매개 변수는 부모의 시작 부분에서의 오프셋입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegister">
      <summary vsli:raw="A native register address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the register in which the variable is stored.">네이티브 레지스터 주소입니다. <paramref name="addr1" /> 매개 변수는 변수가 저장되는 레지스터입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRegister">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the low-order register, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the high-order register.">레지스터 상대 주소입니다. <paramref name="addr1" /> 매개 변수는 하위 레지스터이고 <paramref name="addr2" /> 매개 변수는 상위 레지스터입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRelative">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the register, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset.">레지스터 상대 주소입니다. <paramref name="addr1" /> 매개 변수는 레지스터이고 <paramref name="addr2" /> 매개 변수는 오프셋입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterStack">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the low-order register, the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the stack register, and the &lt;paramref name=&quot;addr3&quot; /&gt; parameter is the offset from the stack pointer to the high-order part of the value.">레지스터 상대 주소입니다. <paramref name="addr1" /> 매개 변수는 하위 레지스터이고 <paramref name="addr2" /> 매개 변수는 스택 레지스터이며 <paramref name="addr3" /> 매개 변수는 스택 포인터에서 값의 상위 부분까지의 오프셋입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRVA">
      <summary vsli:raw="A native Relevant Virtual Address (RVA). The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the RVA in the module.">네이티브 RVA(Relevant Virtual Address)입니다. <paramref name="addr1" /> 매개 변수는 모듈의 RVA입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeSectionOffset">
      <summary vsli:raw="A native section offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the section, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset.">네이티브 섹션 오프셋입니다. <paramref name="addr1" /> 매개 변수는 섹션이고 <paramref name="addr2" /> 매개 변수는 오프셋입니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeStackRegister">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the stack register, the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset from the stack pointer to the low-order part of the value, and the &lt;paramref name=&quot;addr3&quot; /&gt; parameter is the high-order register.">레지스터 상대 주소입니다. <paramref name="addr1" /> 매개 변수는 스택 레지스터이고 <paramref name="addr2" /> 매개 변수는 스택 포인터에서 값의 하위 부분까지의 오프셋이며 <paramref name="addr3" /> 매개 변수는 상위 레지스터입니다.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymbolToken">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure is an object representation of a token that represents symbolic information.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 구조체는 기호화된 정보를 나타내는 토큰이 개체로 표현된 것입니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure when given a value.">값을 지정할 때 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="val" vsli:raw="The value to be used for the token.">토큰에 사용될 값입니다.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Determines whether &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance.">
        <paramref name="obj" />가 이 인스턴스와 같은지 확인합니다.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; to check.">확인할 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />가 이 인스턴스와 같으면 <paramref name="obj" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)">
      <summary vsli:raw="Determines whether &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; and is equal to this instance.">
        <paramref name="obj" />가 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />의 인스턴스이며 해당 인스턴스와 같은지 여부를 확인합니다.</summary>
      <param name="obj" vsli:raw="The object to check.">검사할 개체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; and is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj" />가 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />의 인스턴스이고 해당 인스턴스와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetHashCode">
      <summary vsli:raw="Generates the hash code for the current token.">현재 토큰의 해시 코드를 생성합니다.</summary>
      <returns vsli:raw="The hash code for the current token.">현재 토큰의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetToken">
      <summary vsli:raw="Gets the value of the current token.">현재 토큰의 값을 가져옵니다.</summary>
      <returns vsli:raw="The value of the current token.">현재 토큰의 값입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Returns a value indicating whether two &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; objects are equal.">두 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 개체가 같은지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="a" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 구조체입니다.</param>
      <param name="b" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 구조체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; and &lt;paramref name=&quot;b&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="a" />과 <paramref name="b" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Returns a value indicating whether two &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; objects are not equal.">두 <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 개체가 다른지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="a" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 구조체입니다.</param>
      <param name="b" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> 구조체입니다.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; and &lt;paramref name=&quot;b&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="a" />과 <paramref name="b" />가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymDocumentType">
      <summary vsli:raw="Holds the public GUIDs for document types to be used with the symbol store.">기호 저장소와 함께 사용될 문서 형식의 공용 GUID를 보유합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymDocumentType.Text">
      <summary vsli:raw="Specifies the GUID of the document type to be used with the symbol store.">기호 저장소와 함께 사용될 문서 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymDocumentType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymDocumentType&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.SymbolStore.SymDocumentType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageType">
      <summary vsli:raw="Holds the public GUIDs for language types to be used with the symbol store.">기호 저장소와 함께 사용될 언어 형식의 공용 GUID를 보유합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Basic">
      <summary vsli:raw="Specifies the GUID of the Basic language type to be used with the symbol store.">기호 저장소와 함께 사용될 Basic 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.C">
      <summary vsli:raw="Specifies the GUID of the C language type to be used with the symbol store.">기호 저장소와 함께 사용될 C 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Cobol">
      <summary vsli:raw="Specifies the GUID of the Cobol language type to be used with the symbol store.">기호 저장소와 함께 사용될 Cobol 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CPlusPlus">
      <summary vsli:raw="Specifies the GUID of the C++ language type to be used with the symbol store.">기호 저장소와 함께 사용될 C++ 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CSharp">
      <summary vsli:raw="Specifies the GUID of the C# language type to be used with the symbol store.">기호 저장소와 함께 사용될 C# 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.ILAssembly">
      <summary vsli:raw="Specifies the GUID of the ILAssembly language type to be used with the symbol store.">기호 저장소와 함께 사용될 ILAssembly 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Java">
      <summary vsli:raw="Specifies the GUID of the Java language type to be used with the symbol store.">기호 저장소와 함께 사용될 Java 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.JScript">
      <summary vsli:raw="Specifies the GUID of the JScript language type to be used with the symbol store.">기호 저장소와 함께 사용될 JScript 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.MCPlusPlus">
      <summary vsli:raw="Specifies the GUID of the C++ language type to be used with the symbol store.">기호 저장소와 함께 사용될 C++ 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Pascal">
      <summary vsli:raw="Specifies the GUID of the Pascal language type to be used with the symbol store.">기호 저장소와 함께 사용될 Pascal 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.SMC">
      <summary vsli:raw="Specifies the GUID of the SMC language type to be used with the symbol store.">기호 저장소와 함께 사용될 SMC 언어 형식의 GUID를 지정합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymLanguageType&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.SymbolStore.SymLanguageType" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageVendor">
      <summary vsli:raw="Holds the public GUIDs for language vendors to be used with the symbol store.">기호 저장소와 함께 사용될 언어 공급업체의 공용 GUID를 보유합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageVendor.Microsoft">
      <summary vsli:raw="Specifies the GUID of the Microsoft language vendor.">Microsoft 언어 공급업체의 GUID를 지정합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageVendor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymLanguageVendor&quot; /&gt; class.">
        <see cref="T:System.Diagnostics.SymbolStore.SymLanguageVendor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
  </members>
</doc>
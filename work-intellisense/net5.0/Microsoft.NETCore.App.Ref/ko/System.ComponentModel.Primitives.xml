<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.ComponentModel.Primitives</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.BrowsableAttribute">
      <summary>속성 또는 이벤트를 속성 창에 표시해야 할지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.BrowsableAttribute" />의 기본값인 <see cref="F:System.ComponentModel.BrowsableAttribute.Yes" />을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.No">
      <summary>디자인 타임에서 속성 또는 이벤트를 수정할 수 없도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.BrowsableAttribute.Yes">
      <summary>디자인 타임에서 속성 또는 이벤트를 수정할 수 있도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.BrowsableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="browsable">디자인 타임에서 속성 또는 이벤트를 수정할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타냅니다.</summary>
      <param name="obj">비교할 다른 개체입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스와 같으면 <paramref name="obj" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.BrowsableAttribute.IsDefaultAttribute">
      <summary>이 특성이 기본값인지 여부를 확인합니다.</summary>
      <returns>이 특성이 특성 클래스의 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.BrowsableAttribute.Browsable">
      <summary>찾아볼 수 있는 개체인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>검색 가능 개체이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.CategoryAttribute">
      <summary>항목별 모드로 설정된 <see cref="T:System.Windows.Forms.PropertyGrid" /> 컨트롤에 표시될 때 속성이나 이벤트를 그룹화할 범주 이름을 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor">
      <summary>범주 이름 기본을 사용하여 <see cref="T:System.ComponentModel.CategoryAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.#ctor(System.String)">
      <summary>지정된 범주 이름을 사용하여 <see cref="T:System.ComponentModel.CategoryAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="category">범주의 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.CategoryAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">값이 같은지 테스트할 개체입니다.</param>
      <returns>주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetHashCode">
      <summary>해당 특성의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.GetLocalizedString(System.String)">
      <summary>지정된 범주의 지역화 이름을 찾습니다.</summary>
      <param name="value">찾을 범주의 식별자입니다.</param>
      <returns>범주의 지역화 이름이거나 지역화 이름이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CategoryAttribute.IsDefaultAttribute">
      <summary>이 특성이 기본값인지 여부를 확인합니다.</summary>
      <returns>이 특성이 특성 클래스의 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Action">
      <summary>작업 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>작업 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Appearance">
      <summary>모양 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>모양 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Asynchronous">
      <summary>비동기 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>비동기 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Behavior">
      <summary>동작 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>동작 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Category">
      <summary>이 특성이 적용되는 속성 또는 이벤트의 범주 이름을 가져옵니다.</summary>
      <returns>이 특성이 적용되는 속성 또는 이벤트의 범주 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Data">
      <summary>데이터 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>데이터 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Default">
      <summary>기본 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>기본 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Design">
      <summary>디자인 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>디자인 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.DragDrop">
      <summary>끌어서 놓기 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>끌어서 놓기 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Focus">
      <summary>포커스 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>포커스 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Format">
      <summary>형식 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>형식 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Key">
      <summary>키 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>키 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Layout">
      <summary>레이아웃 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>레이아웃 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.Mouse">
      <summary>마우스 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>마우스 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CategoryAttribute.WindowStyle">
      <summary>창 스타일 범주를 나타내는 <see cref="T:System.ComponentModel.CategoryAttribute" />를 가져옵니다.</summary>
      <returns>창 스타일 범주에 대한 <see cref="T:System.ComponentModel.CategoryAttribute" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Component">
      <summary>
        <see cref="T:System.ComponentModel.IComponent" /> 인터페이스를 기본적으로 구현하고 애플리케이션 간의 개체 공유를 가능하게 합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.Component.Disposed">
      <summary>
        <see cref="M:System.ComponentModel.Component.Dispose" /> 메서드를 호출하여 구성 요소를 삭제할 때 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Component.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.Component" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Component.Dispose">
      <summary>
        <see cref="T:System.ComponentModel.Component" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Component.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.Component" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.Component.Finalize">
      <summary>가비지 수집에 의해 <see cref="T:System.ComponentModel.Component" />가 회수되기 전에 관리되지 않는 리소스를 해제하고 기타 정리 작업을 수행합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Component.GetService(System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.Component" /> 또는 해당 <see cref="T:System.ComponentModel.Container" />에서 제공하는 서비스를 나타내는 개체를 반환합니다.</summary>
      <param name="service">
        <see cref="T:System.ComponentModel.Component" />에서 제공하는 서비스입니다.</param>
      <returns>
        <see cref="T:System.Object" />에서 제공하는 서비스를 나타내는 <see cref="T:System.ComponentModel.Component" />이거나, <see cref="T:System.ComponentModel.Component" />에서 지정된 서비스를 제공하지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.Component.ToString">
      <summary>
        <see cref="T:System.ComponentModel.Component" />의 이름이 포함된 <see cref="T:System.String" />을 반환합니다(있는 경우). 이 메서드는 재정의할 수 없습니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Component" />의 이름이 포함된 <see cref="T:System.String" />(있는 경우) 또는 <see cref="T:System.ComponentModel.Component" />가 명명되지 않은 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Component.CanRaiseEvents">
      <summary>구성 요소가 이벤트를 발생시킬 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>구성 요소가 이벤트를 발생시킬 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Component.Container">
      <summary>
        <see cref="T:System.ComponentModel.IContainer" />을 포함하는 <see cref="T:System.ComponentModel.Component" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" />가 포함된 <see cref="T:System.ComponentModel.Component" />이거나, <see cref="T:System.ComponentModel.Component" />가 <see cref="T:System.ComponentModel.IContainer" />에 캡슐화되어 있지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Component.DesignMode">
      <summary>
        <see cref="T:System.ComponentModel.Component" />가 현재 디자인 모드인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.Component" />가 디자인 모드이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Component.Events">
      <summary>이 <see cref="T:System.ComponentModel.Component" />에 연결된 이벤트 처리기의 목록을 가져옵니다.</summary>
      <returns>이 구성 요소의 대리자를 제공하는 <see cref="T:System.ComponentModel.EventHandlerList" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Component.Site">
      <summary>
        <see cref="T:System.ComponentModel.Component" />의 <see cref="T:System.ComponentModel.ISite" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" />와 연결된 <see cref="T:System.ComponentModel.Component" />이거나, <see cref="T:System.ComponentModel.Component" />가 <see cref="T:System.ComponentModel.IContainer" />에 캡슐화되어 있지 않거나 <see cref="T:System.ComponentModel.Component" />가 <see cref="T:System.ComponentModel.ISite" />와 연결되어 있지 않거나 <see cref="T:System.ComponentModel.Component" />가 <see cref="T:System.ComponentModel.IContainer" />에서 제거되었으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ComponentCollection">
      <summary>
        <see cref="T:System.ComponentModel.IComponent" /> 개체 컬렉션용 읽기 전용 컨테이너를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ComponentCollection.#ctor(System.ComponentModel.IComponent[])">
      <summary>지정된 구성 요소 배열을 사용하여 <see cref="T:System.ComponentModel.ComponentCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="components">컬렉션을 초기화할 <see cref="T:System.ComponentModel.IComponent" /> 개체의 배열입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ComponentCollection.CopyTo(System.ComponentModel.IComponent[],System.Int32)">
      <summary>전체 컬렉션을 지정된 배열 인덱스에서부터 쓰기 시작하여 배열에 복사합니다.</summary>
      <param name="array">컬렉션의 개체를 복사할 대상 <see cref="T:System.ComponentModel.IComponent" /> 배열입니다.</param>
      <param name="index">
        <paramref name="array" />에서 복사를 시작할 위치의 인덱스입니다.</param>
    </member>
    <member name="P:System.ComponentModel.ComponentCollection.Item(System.Int32)">
      <summary>컬렉션에서 지정된 컬렉션 인덱스 위치에 있는 <see cref="T:System.ComponentModel.Component" />를 가져옵니다.</summary>
      <param name="index">가져올 <see cref="T:System.ComponentModel.Component" />의 컬렉션 인덱스입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">지정된 인덱스가 컬렉션의 인덱스 범위 내에 있지 않은 경우</exception>
      <returns>지정한 인덱스에 있는 <see cref="T:System.ComponentModel.IComponent" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ComponentCollection.Item(System.String)">
      <summary>컬렉션에서 지정된 이름과 일치하는 모든 구성 요소를 가져옵니다.</summary>
      <param name="name">가져올 <see cref="T:System.ComponentModel.IComponent" />의 이름입니다.</param>
      <returns>
        <paramref name="name" /> 매개 변수로 지정된 이름과 일치하는 이름의 구성 요소이거나, 컬렉션에서 지정된 구성 요소를 찾을 수 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DescriptionAttribute">
      <summary>속성 또는 이벤트에 대한 설명을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DescriptionAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.DescriptionAttribute" />의 기본값인 빈 문자열("")을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor">
      <summary>매개 변수를 사용하지 않고 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.#ctor(System.String)">
      <summary>설명을 사용하여 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="description">설명 텍스트입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.DescriptionAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">값이 같은지 테스트할 개체입니다.</param>
      <returns>주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DescriptionAttribute.IsDefaultAttribute">
      <summary>이것이 기본 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 인스턴스인지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>이것이 기본 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 인스턴스이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.Description">
      <summary>이 특성에 저장된 설명을 가져옵니다.</summary>
      <returns>이 특성에 저장된 설명입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DescriptionAttribute.DescriptionValue">
      <summary>설명으로 저장된 문자열을 가져오거나 설정합니다.</summary>
      <returns>설명으로 저장된 문자열입니다. 기본값은 빈 문자열("")입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute">
      <summary>serialization 관리자가 이 특성이 적용되는 형식 값을 serialize하는 데 사용하는 serializer를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="serializerTypeName">serializer의 데이터 형식의 정규화된 이름입니다.</param>
      <param name="baseSerializerTypeName">serializer의 기본 데이터 형식의 정규화된 이름입니다. serializer의 기본 형식이 각각 다른 경우 한 클래스에 여러 serializer를 제공할 수 있습니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.String,System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="serializerTypeName">serializer의 데이터 형식의 정규화된 이름입니다.</param>
      <param name="baseSerializerType">serializer의 기본 데이터 형식입니다. serializer의 기본 형식이 각각 다른 경우 한 클래스에 여러 serializer를 제공할 수 있습니다.</param>
    </member>
    <member name="M:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.#ctor(System.Type,System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="serializerType">serializer의 데이터 형식입니다.</param>
      <param name="baseSerializerType">serializer의 기본 데이터 형식입니다. serializer의 기본 형식이 각각 다른 경우 한 클래스에 여러 serializer를 제공할 수 있습니다.</param>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerBaseTypeName">
      <summary>serializer 기본 형식의 정규화된 형식 이름을 가져옵니다.</summary>
      <returns>serializer 기본 형식의 정규화된 형식 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.SerializerTypeName">
      <summary>serializer의 정규화된 형식 이름을 가져옵니다.</summary>
      <returns>serializer의 정규화된 형식이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.Design.Serialization.DesignerSerializerAttribute.TypeId">
      <summary>이 특성 형식의 고유 ID를 나타냅니다.</summary>
      <returns>이 특성 형식의 고유 ID입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignerAttribute">
      <summary>구성 요소에 대한 디자인 타임 서비스를 구현하는 데 사용되는 클래스를 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String)">
      <summary>디자인 타임 서비스를 제공하는 형식의 이름을 사용하여 <see cref="T:System.ComponentModel.DesignerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designerTypeName">이 특성이 바인딩되는 구성 요소에 디자인 타임 서비스를 제공하는 형식의 정규화된 이름과 이 형식이 속하는 어셈블리의 이름을 연결합니다.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.String)">
      <summary>디자이너 형식 및 디자이너 기본 클래스를 사용하여 <see cref="T:System.ComponentModel.DesignerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designerTypeName">이 특성이 바인딩되는 구성 요소에 디자인 타임 서비스를 제공하는 형식의 정규화된 이름과 이 형식이 속하는 어셈블리의 이름을 연결합니다.</param>
      <param name="designerBaseTypeName">디자이너 클래스와 연결할 기본 클래스의 정규화된 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.String,System.Type)">
      <summary>디자이너 클래스 이름 및 디자이너 기본 클래스를 사용하여 <see cref="T:System.ComponentModel.DesignerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designerTypeName">이 특성이 바인딩되는 구성 요소에 디자인 타임 서비스를 제공하는 형식의 정규화된 이름과 이 형식이 속하는 어셈블리의 이름을 연결합니다.</param>
      <param name="designerBaseType">
        <paramref name="designerTypeName" />과 연결할 기본 클래스를 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type)">
      <summary>디자인 타임 서비스를 제공하는 형식을 사용하여 <see cref="T:System.ComponentModel.DesignerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designerType">이 특성이 바인딩되는 구성 요소에 디자인 타임 서비스를 제공하는 클래스를 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.#ctor(System.Type,System.Type)">
      <summary>디자이너 형식 및 디자이너 기본 클래스를 사용하여 <see cref="T:System.ComponentModel.DesignerAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designerType">이 특성이 바인딩되는 구성 요소에 디자인 타임 서비스를 제공하는 클래스를 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="designerBaseType">
        <paramref name="designerType" />과 연결할 기본 클래스를 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.DesignerAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">값이 같은지 테스트할 개체입니다.</param>
      <returns>주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerBaseTypeName">
      <summary>이 디자이너의 기본 형식 이름을 가져옵니다.</summary>
      <returns>이 디자이너의 기본 형식 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.DesignerTypeName">
      <summary>이 디자이너 특성과 관련된 디자이너 형식 이름을 가져옵니다.</summary>
      <returns>이 디자이너 특성과 관련된 디자이너 형식 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerAttribute.TypeId">
      <summary>이 특성 형식의 고유 ID를 가져옵니다.</summary>
      <returns>이 특성 형식의 고유 ID입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignerCategoryAttribute">
      <summary>클래스의 디자이너가 특정 범주에 속하도록 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Component">
      <summary>이 범주로 표시된 구성 요소에서 구성 요소 디자이너를 사용함을 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Default">
      <summary>이 범주로 표시된 구성 요소에서 비주얼 디자이너를 사용할 수 없음을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Form">
      <summary>이 범주로 표시된 구성 요소에서 폼 디자이너를 사용함을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerCategoryAttribute.Generic">
      <summary>이 범주로 표시된 구성 요소에서 일반 디자이너를 사용함을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.#ctor">
      <summary>빈 문자열("")로 <see cref="T:System.ComponentModel.DesignerCategoryAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.#ctor(System.String)">
      <summary>주어진 범주 이름을 사용하여 <see cref="T:System.ComponentModel.DesignerCategoryAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="category">범주의 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">값이 같은지 테스트할 개체입니다.</param>
      <returns>주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerCategoryAttribute.IsDefaultAttribute">
      <summary>이 특성이 기본값인지 여부를 확인합니다.</summary>
      <returns>이 특성이 특성 클래스의 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerCategoryAttribute.Category">
      <summary>범주 이름을 가져옵니다.</summary>
      <returns>범주의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerCategoryAttribute.TypeId">
      <summary>이 특성에 대한 고유 식별자를 가져옵니다.</summary>
      <returns>특성에 대한 고유 식별자인 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignerSerializationVisibility">
      <summary>속성이 가진 표시 유형을 디자인 타임 serializer에 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Content">
      <summary>코드 생성기에서 개체 자체가 아닌 개체의 내용에 대한 코드가 생성됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Hidden">
      <summary>코드 생성기에서 개체에 대한 코드가 생성되지 않습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibility.Visible">
      <summary>코드 생성기에서 개체에 대한 코드가 생성됩니다.</summary>
    </member>
    <member name="T:System.ComponentModel.DesignerSerializationVisibilityAttribute">
      <summary>디자인 타임에 구성 요소에서 속성을 serialize할 때 사용할 지속성 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Content">
      <summary>serializer에서 해당 속성 자체가 아니라 속성의 내용을 serialize하도록 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Default">
      <summary>기본값인 <see cref="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visible" />을 지정합니다. 즉, 비주얼 디자이너가 기본 규칙을 사용하여 속성 값을 생성합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Hidden">
      <summary>serializer에서 해당 속성의 값을 serialize하지 않도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visible">
      <summary>serializer에서 해당 속성의 값을 serialize하지 못하도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.#ctor(System.ComponentModel.DesignerSerializationVisibility)">
      <summary>지정된 <see cref="T:System.ComponentModel.DesignerSerializationVisibilityAttribute" /> 값을 사용하여 <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="visibility">
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 값 중 하나입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타냅니다.</summary>
      <param name="obj">비교할 다른 개체입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스와 같으면 <paramref name="obj" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.GetHashCode">
      <summary>이 개체의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignerSerializationVisibilityAttribute.IsDefaultAttribute">
      <summary>현재 특성 값이 해당 특성의 기본값인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>특성이 기본값으로 설정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignerSerializationVisibilityAttribute.Visibility">
      <summary>serializer에서 속성 값의 유지 여부 및 유지 방식을 결정할 때 사용할 기본 serialization 모드를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.DesignerSerializationVisibility" /> 값 중 하나입니다. 기본값은 <see cref="F:System.ComponentModel.DesignerSerializationVisibility.Visible" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DesignOnlyAttribute">
      <summary>디자인 타임에서만 속성을 설정할 수 있는지 여부를 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.DesignOnlyAttribute" />의 기본값인 <see cref="F:System.ComponentModel.DesignOnlyAttribute.No" />을 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.No">
      <summary>속성을 디자인 타임 또는 런타임에서 설정할 수 있도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DesignOnlyAttribute.Yes">
      <summary>속성을 디자인 타임에서만 설정할 수 있도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="isDesignOnly">속성을 디자인 타임에서만 설정할 수 있으면 <see langword="true" />이고, 속성을 디자인 타임과 런타임에서 모두 설정할 수 있으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">값이 같은지 테스트할 개체입니다.</param>
      <returns>주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DesignOnlyAttribute.IsDefaultAttribute">
      <summary>이 특성이 기본값인지 여부를 확인합니다.</summary>
      <returns>이 특성이 특성 클래스의 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DesignOnlyAttribute.IsDesignOnly">
      <summary>속성을 디자인 타임에서만 설정할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>속성을 디자인 타임에서만 설정할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.DisplayNameAttribute">
      <summary>인수를 사용하지 않는 공용 void 메서드, 속성 또는 이벤트의 표시 이름을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.DisplayNameAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.DisplayNameAttribute" />의 기본값을 지정합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.#ctor(System.String)">
      <summary>표시 이름을 사용하여 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="displayName">표시 이름입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.Equals(System.Object)">
      <summary>두 개의 <see cref="T:System.ComponentModel.DisplayNameAttribute" /> 인스턴스가 같은지 여부를 확인합니다.</summary>
      <param name="obj">값이 같은지 테스트할 <see cref="T:System.ComponentModel.DisplayNameAttribute" />입니다.</param>
      <returns>주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.DisplayNameAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DisplayNameAttribute.IsDefaultAttribute">
      <summary>이 특성이 기본값인지 여부를 확인합니다.</summary>
      <returns>이 특성이 특성 클래스의 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DisplayNameAttribute.DisplayName">
      <summary>이 특성에 저장된 인수를 사용하지 않는 공용 void 메서드, 속성 또는 이벤트의 표시 이름을 가져옵니다.</summary>
      <returns>표시 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DisplayNameAttribute.DisplayNameValue">
      <summary>표시 이름을 가져오거나 설정합니다.</summary>
      <returns>표시 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.EditorAttribute">
      <summary>속성을 변경하는 데 사용할 편집기를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor">
      <summary>기본 편집기(편집기 없음)를 사용하여 <see cref="T:System.ComponentModel.EditorAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.String)">
      <summary>편집기의 형식 이름 및 기본 형식 이름을 사용하여 <see cref="T:System.ComponentModel.EditorAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">편집기의 정규화된 형식 이름입니다.</param>
      <param name="baseTypeName">편집기의 조회 키로 사용할 기본 클래스 또는 인터페이스의 정규화된 형식 이름입니다. 이 클래스는 <see cref="T:System.Drawing.Design.UITypeEditor" />이거나 이 클래스에서 파생되어야 합니다.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.String,System.Type)">
      <summary>형식 이름과 기본 형식을 사용하여 <see cref="T:System.ComponentModel.EditorAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="typeName">편집기의 정규화된 형식 이름입니다.</param>
      <param name="baseType">편집기의 조회 키로 사용할 기본 클래스 또는 인터페이스의 <see cref="T:System.Type" />입니다. 이 클래스는 <see cref="T:System.Drawing.Design.UITypeEditor" />이거나 이 클래스에서 파생되어야 합니다.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.#ctor(System.Type,System.Type)">
      <summary>형식과 기본 형식을 사용하여 <see cref="T:System.ComponentModel.EditorAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="type">편집기의 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <param name="baseType">편집기의 조회 키로 사용할 기본 클래스 또는 인터페이스의 <see cref="T:System.Type" />입니다. 이 클래스는 <see cref="T:System.Drawing.Design.UITypeEditor" />이거나 이 클래스에서 파생되어야 합니다.</param>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.EditorAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">값이 같은지 테스트할 개체입니다.</param>
      <returns>주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.EditorAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorBaseTypeName">
      <summary>이 편집기의 조회 키로 사용되는 기본 클래스 또는 인터페이스 이름을 가져옵니다.</summary>
      <returns>이 편집기의 조회 키로 사용되는 기본 클래스 또는 인터페이스 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.EditorTypeName">
      <summary>
        <see cref="P:System.Type.AssemblyQualifiedName" /> 형식의 편집기 클래스 이름을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Type.AssemblyQualifiedName" /> 형식의 편집기 클래스 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.EditorAttribute.TypeId">
      <summary>이 특성 형식의 고유 ID를 가져옵니다.</summary>
      <returns>이 특성 형식의 고유 ID입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.EventHandlerList">
      <summary>간단한 대리자 목록을 제공합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.EventHandlerList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.AddHandler(System.Object,System.Delegate)">
      <summary>목록에 대리자를 추가합니다.</summary>
      <param name="key">해당 이벤트가 포함된 개체입니다.</param>
      <param name="value">목록에 추가할 대리자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.AddHandlers(System.ComponentModel.EventHandlerList)">
      <summary>현재 목록에 대리자 목록을 추가합니다.</summary>
      <param name="listToAddFrom">추가할 목록입니다.</param>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.Dispose">
      <summary>대리자 목록을 삭제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.EventHandlerList.RemoveHandler(System.Object,System.Delegate)">
      <summary>목록에서 대리자를 제거합니다.</summary>
      <param name="key">해당 이벤트가 포함된 개체입니다.</param>
      <param name="value">목록에서 제거할 대리자입니다.</param>
    </member>
    <member name="P:System.ComponentModel.EventHandlerList.Item(System.Object)">
      <summary>지정된 개체의 대리자를 가져오거나 설정합니다.</summary>
      <param name="key">목록에서 찾을 개체입니다.</param>
      <returns>지정된 키의 대리자이거나, 대리자가 없을 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IComponent">
      <summary>모든 구성 요소에 필요한 기능성을 제공합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.IComponent.Disposed">
      <summary>구성 요소의 <see cref="E:System.ComponentModel.IComponent.Disposed" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
    </member>
    <member name="P:System.ComponentModel.IComponent.Site">
      <summary>
        <see cref="T:System.ComponentModel.ISite" />와 연결된 <see cref="T:System.ComponentModel.IComponent" />를 가져오거나 설정합니다.</summary>
      <returns>구성 요소와 관련된 <see cref="T:System.ComponentModel.ISite" /> 개체이거나, 구성 요소에 사이트가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IContainer">
      <summary>컨테이너의 기능을 제공합니다. 컨테이너는 논리적으로 0개 이상의 구성 요소를 포함하는 개체입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent)">
      <summary>지정된 <see cref="T:System.ComponentModel.IComponent" />를 목록 끝에 있는 <see cref="T:System.ComponentModel.IContainer" />에 추가합니다.</summary>
      <param name="component">추가할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Add(System.ComponentModel.IComponent,System.String)">
      <summary>지정된 <see cref="T:System.ComponentModel.IComponent" />를 목록 끝에 있는 <see cref="T:System.ComponentModel.IContainer" />에 추가하고 구성 요소의 이름을 지정합니다.</summary>
      <param name="component">추가할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
      <param name="name">구성 요소에 할당할 대/소문자를 구분하지 않는 고유한 이름  
  
또는 
 구성 요소의 이름을 지정하지 않는 <see langword="null" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.IContainer.Remove(System.ComponentModel.IComponent)">
      <summary>
        <see cref="T:System.ComponentModel.IContainer" />에서 구성 요소를 제거합니다.</summary>
      <param name="component">제거할 <see cref="T:System.ComponentModel.IComponent" />입니다.</param>
    </member>
    <member name="P:System.ComponentModel.IContainer.Components">
      <summary>
        <see cref="T:System.ComponentModel.IContainer" />의 모든 구성 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" />에서 모든 구성 요소를 나타내는 <see cref="T:System.ComponentModel.IContainer" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ImmutableObjectAttribute">
      <summary>개체에 편집할 수 있는 하위 속성이 포함되지 않도록 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.ImmutableObjectAttribute" />의 기본값을 나타냅니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.No">
      <summary>개체에 적어도 하나의 편집 가능한 하위 속성이 포함되도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ImmutableObjectAttribute.Yes">
      <summary>개체에 편집할 수 있는 하위 속성이 포함되지 않도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.ImmutableObjectAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="immutable">개체를 변경할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.Equals(System.Object)">
      <summary>이 인스턴스가 지정된 개체와 같은지를 나타내는 값을 반환합니다.</summary>
      <param name="obj">이 인스턴스와 비교할 <see cref="T:System.Object" />이거나 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스의 형식 및 값과 같으면 <paramref name="obj" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.ImmutableObjectAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ImmutableObjectAttribute.IsDefaultAttribute">
      <summary>이 인스턴스의 값이 기본값인지 여부를 나타냅니다.</summary>
      <returns>이 인스턴스가 클래스에 대한 기본 특성이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ImmutableObjectAttribute.Immutable">
      <summary>개체를 변경할 수 있는지 여부를 가져옵니다.</summary>
      <returns>개체를 변경할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.InitializationEventAttribute">
      <summary>초기화할 때 발생되는 이벤트를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InitializationEventAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.ComponentModel.InitializationEventAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="eventName">초기화 이벤트의 이름입니다.</param>
    </member>
    <member name="P:System.ComponentModel.InitializationEventAttribute.EventName">
      <summary>초기화 이벤트의 이름을 가져옵니다.</summary>
      <returns>초기화 이벤트의 이름입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.InvalidAsynchronousStateException">
      <summary>작업이 실행될 스레드가 더 이상 없거나 작업이 실행될 스레드에 메시지 루프가 없을 때 throw됩니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 및 <see cref="T:System.Runtime.Serialization.SerializationInfo" />를 사용하여 <see cref="T:System.Runtime.Serialization.StreamingContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">deserialization에 사용할 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">deserialization에 사용할 대상입니다.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String)">
      <summary>지정된 자세한 설명을 사용하여 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류에 대한 자세한 설명입니다.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidAsynchronousStateException.#ctor(System.String,System.Exception)">
      <summary>지정된 예외 및 자세한 설명을 사용하여 <see cref="T:System.ComponentModel.InvalidAsynchronousStateException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류에 대한 자세한 설명입니다.</param>
      <param name="innerException">이 예외의 원인인 내부 예외에 대한 참조입니다.</param>
    </member>
    <member name="T:System.ComponentModel.InvalidEnumArgumentException">
      <summary>잘못된 인수를 열거자로 사용하면 예외가 throw됩니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor">
      <summary>메시지를 사용하지 않고 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>지정된 serialization 데이터와 컨텍스트를 사용하여 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="info">deserialization에 사용할 <see cref="T:System.Runtime.Serialization.SerializationInfo" />입니다.</param>
      <param name="context">deserialization에 사용할 대상입니다.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String)">
      <summary>지정된 메시지를 사용하여 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">이 예외와 함께 표시될 메시지입니다.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Exception)">
      <summary>지정된 예외 및 자세한 설명을 사용하여 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류에 대한 자세한 설명입니다.</param>
      <param name="innerException">이 예외의 원인인 내부 예외에 대한 참조입니다.</param>
    </member>
    <member name="M:System.ComponentModel.InvalidEnumArgumentException.#ctor(System.String,System.Int32,System.Type)">
      <summary>인수, 잘못된 값 및 열거형 클래스에서 생성된 메시지를 사용하여 <see cref="T:System.ComponentModel.InvalidEnumArgumentException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="argumentName">예외를 발생시킨 인수의 이름입니다.</param>
      <param name="invalidValue">잘못된 인수 값입니다.</param>
      <param name="enumClass">유효한 값이 포함된 열거형 클래스를 나타내는 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="T:System.ComponentModel.ISite">
      <summary>사이트에 필요한 기능을 제공합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.ISite.Component">
      <summary>클래스에서 구현될 때 <see cref="T:System.ComponentModel.ISite" />와 관련된 구성 요소를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IComponent" />와 관련된 <see cref="T:System.ComponentModel.ISite" /> 인스턴스입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Container">
      <summary>클래스에서 구현될 때 <see cref="T:System.ComponentModel.IContainer" />와 관련된 <see cref="T:System.ComponentModel.ISite" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.IContainer" />와 관련된 <see cref="T:System.ComponentModel.ISite" /> 인스턴스입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.DesignMode">
      <summary>클래스에서 구현될 때 구성 요소가 디자인 타임인지 여부를 확인합니다.</summary>
      <returns>구성 요소가 디자인 모드에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ISite.Name">
      <summary>클래스에서 구현될 때 <see cref="T:System.ComponentModel.ISite" />와 관련된 구성 요소의 이름을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.ComponentModel.ISite" />와 관련된 구성 요소의 이름이거나, 구성 요소에 이름이 지정되지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ISupportInitialize">
      <summary>이 개체가 일괄 초기화에 대한 단순 트랜잭트 알림을 지원하도록 지정합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ISupportInitialize.BeginInit">
      <summary>초기화가 시작됨을 개체에 알립니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ISupportInitialize.EndInit">
      <summary>초기화가 완료됨을 개체에 알립니다.</summary>
    </member>
    <member name="T:System.ComponentModel.ISynchronizeInvoke">
      <summary>대리자를 동기식 또는 비동기식으로 실행하는 방법을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])">
      <summary>이 개체를 만든 스레드에서 대리자를 비동기적으로 실행합니다.</summary>
      <param name="method">
        <paramref name="args" />에 있는 매개 변수의 수 및 형식과 동일한 매개 변수를 갖는 메서드의 <see cref="T:System.Delegate" />입니다.</param>
      <param name="args">주어진 메서드에 인수로 전달하는 <see cref="T:System.Object" /> 형식의 배열입니다. 인수가 필요하지 않으면 <see langword="null" />일 수 있습니다.</param>
      <returns>해당 메서드를 호출하여 시작된 비동기 작업을 나타내는 <see cref="T:System.IAsyncResult" /> 인터페이스입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)">
      <summary>
        <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" />를 호출하여 시작된 프로세스가 완료될 때까지 대기한 다음 프로세스에서 생성된 값을 반환합니다.</summary>
      <param name="result">
        <see cref="T:System.IAsyncResult" />를 호출하여 시작된 비동기 작업을 나타내는 <see cref="M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])" /> 인터페이스입니다.</param>
      <returns>비동기 작업에서 생성된 반환 값을 나타내는 <see cref="T:System.Object" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])">
      <summary>이 개체를 만든 스레드에서 대리자를 동기적으로 실행하고 만드는 스레드에 대한 호출을 마샬링합니다.</summary>
      <param name="method">컨트롤의 스레드 컨텍스트에서 호출할 메서드가 들어 있는 <see cref="T:System.Delegate" />입니다.</param>
      <param name="args">주어진 메서드에 전달할 인수를 나타내는 <see cref="T:System.Object" /> 형식의 배열입니다. 인수가 필요하지 않으면 <see langword="null" />일 수 있습니다.</param>
      <returns>호출 중인 대리자의 반환 값을 나타내는 <see cref="T:System.Object" />이거나, 대리자에 반환 값이 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired">
      <summary>해당 인터페이스를 구현하는 개체를 호출할 때 호출자에서 <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />를 호출해야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>호출자에서 <see cref="M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])" />를 호출해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.LocalizableAttribute">
      <summary>속성을 지역화해야 하는지 여부를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.Default">
      <summary>기본값인 <see cref="F:System.ComponentModel.LocalizableAttribute.No" />를 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.No">
      <summary>속성을 지역화하지 않도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.LocalizableAttribute.Yes">
      <summary>속성을 지역화하도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.LocalizableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="isLocalizable">속성을 지역화해야 하는 경우 <see langword="true" />이고, 그렇지 않은 경우 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.Equals(System.Object)">
      <summary>주어진 개체의 값이 현재 <see cref="T:System.ComponentModel.LocalizableAttribute" />와 같은지 여부를 반환합니다.</summary>
      <param name="obj">값이 같은지 테스트할 개체입니다.</param>
      <returns>주어진 개체의 값이 현재 개체의 값과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.LocalizableAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.LocalizableAttribute.IsDefaultAttribute">
      <summary>이 특성이 기본값인지 여부를 확인합니다.</summary>
      <returns>이 특성이 특성 클래스의 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.LocalizableAttribute.IsLocalizable">
      <summary>속성을 지역화해야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>속성을 지역화해야 하는 경우 <see langword="true" />이고, 그렇지 않은 경우 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.MergablePropertyAttribute">
      <summary>이 속성을 속성 창에 있는 다른 개체의 속성과 결합할 수 있도록 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.Default">
      <summary>속성을 속성 창에 있는 다른 개체의 속성과 결합할 수 있는 기본값 <see cref="F:System.ComponentModel.MergablePropertyAttribute.Yes" />를 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.No">
      <summary>이 속성을 속성 브라우저에 있는 다른 개체의 속성과 결합할 수 없도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.MergablePropertyAttribute.Yes">
      <summary>이 속성을 속성 창에 있는 다른 개체의 속성과 결합할 수 있도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.MergablePropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="allowMerge">이 속성을 속성 창에 있는 다른 개체의 속성과 결합할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타냅니다.</summary>
      <param name="obj">비교할 다른 개체입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스와 같으면 <paramref name="obj" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.MergablePropertyAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.MergablePropertyAttribute.IsDefaultAttribute">
      <summary>이 특성이 기본값인지 여부를 확인합니다.</summary>
      <returns>이 특성이 특성 클래스의 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.MergablePropertyAttribute.AllowMerge">
      <summary>이 속성을 속성 창에 있는 다른 개체의 속성과 결합할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 속성을 속성 창에 있는 다른 개체의 속성과 결합할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.NotifyParentPropertyAttribute">
      <summary>이 특성이 적용되는 속성 값이 수정될 때 부모 속성에 알리도록 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.Default">
      <summary>속성이 해당 속성 값의 변경 내용을 부모 속성에 알리지 않도록 하는 기본 특성 상태를 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.No">
      <summary>속성 값에 대한 변경 내용을 부모 속성에 알리지 않음을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.NotifyParentPropertyAttribute.Yes">
      <summary>속성 값에 대한 변경 내용을 부모 속성에 알림을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.#ctor(System.Boolean)">
      <summary>속성 값의 변경 내용을 부모 속성에 알릴지 여부를 결정하는 지정된 값을 사용하여 <see cref="T:System.ComponentModel.NotifyParentPropertyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="notifyParent">부모 속성에 변경 내용을 알려야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.Equals(System.Object)">
      <summary>지정된 개체가 현재 개체와 같은지 여부를 나타내는 값을 가져옵니다.</summary>
      <param name="obj">같은지 여부를 테스트할 개체입니다.</param>
      <returns>지정된 개체가 현재 개체와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.GetHashCode">
      <summary>해당 개체의 해시 코드를 가져옵니다.</summary>
      <returns>해당 특성이 속해 있는 개체의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.NotifyParentPropertyAttribute.IsDefaultAttribute">
      <summary>현재 특성 값이 해당 특성의 기본값인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 특성 값이 해당 특성의 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.NotifyParentPropertyAttribute.NotifyParent">
      <summary>속성 값의 변경 내용을 부모 속성에 알려야 할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>부모 속성에 변경 내용을 알려야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ParenthesizePropertyNameAttribute">
      <summary>관련 속성의 이름이 속성 창에서 괄호와 함께 표시되는지 여부를 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ParenthesizePropertyNameAttribute.Default">
      <summary>관련 속성이 괄호와 함께 표시되지 않아야 함을 나타내는 기본값을 사용하여 <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" /> 클래스의 새 인스턴스를 초기화합니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.#ctor">
      <summary>관련 속성이 괄호와 함께 표시되지 않아야 함을 나타내는 <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.#ctor(System.Boolean)">
      <summary>특성이 괄호와 함께 표시될지 여부를 나타내는 지정된 값을 사용하여 <see cref="T:System.ComponentModel.ParenthesizePropertyNameAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="needParenthesis">이름이 괄호로 묶여야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.Equals(System.Object)">
      <summary>이 개체와 지정된 개체를 비교하고 같은지 테스트합니다.</summary>
      <param name="obj" />
      <returns>같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.GetHashCode">
      <summary>해당 개체의 해시 코드를 가져옵니다.</summary>
      <returns>해당 특성이 속해 있는 개체의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ParenthesizePropertyNameAttribute.IsDefaultAttribute">
      <summary>현재 특성 값이 해당 특성의 기본값인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 특성 값이 해당 특성의 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ParenthesizePropertyNameAttribute.NeedParenthesis">
      <summary>속성 창에서 속성 이름을 괄호로 묶어 표시하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>속성이 괄호로 묶여 표시되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ReadOnlyAttribute">
      <summary>이 특성이 바인딩되는 속성이 읽기 전용인지 아니면 읽기/쓰기가 가능한지를 지정합니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.Default">
      <summary>
        <see cref="T:System.ComponentModel.ReadOnlyAttribute" />의 기본값인 <see cref="F:System.ComponentModel.ReadOnlyAttribute.No" />를 지정합니다. 기본값은 이 특성이 바인딩된 속성이 읽기/쓰기가 가능함을 나타냅니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.No">
      <summary>이 특성이 바인딩되는 속성을 읽기/쓰기가 가능하고 수정할 수 있도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.ReadOnlyAttribute.Yes">
      <summary>이 특성이 바인딩되는 속성을 읽기 전용으로 표시하고 서버 탐색기에서 수정할 수 없도록 지정합니다. 이 <see langword="static" /> 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.#ctor(System.Boolean)">
      <summary>
        <see cref="T:System.ComponentModel.ReadOnlyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="isReadOnly">이 특성이 바인딩되는 속성이 읽기 전용임을 나타내면 <see langword="true" />이고, 속성이 읽기/쓰기가 가능함을 나타내면 <see langword="false" />입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.Equals(System.Object)">
      <summary>이 인스턴스와 지정된 개체가 같은지 여부를 나타냅니다.</summary>
      <param name="value">비교할 다른 개체입니다.</param>
      <returns>
        <see langword="true" />가 이 인스턴스와 같으면 <paramref name="value" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>현재 <see cref="T:System.ComponentModel.ReadOnlyAttribute" />의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ReadOnlyAttribute.IsDefaultAttribute">
      <summary>이 특성이 기본값인지 여부를 확인합니다.</summary>
      <returns>이 특성이 특성 클래스의 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ReadOnlyAttribute.IsReadOnly">
      <summary>이 특성이 바인딩되는 속성이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 특성이 바인딩되는 속성이 읽기 전용이면 <see langword="true" />이고, 속성이 읽기/쓰기이면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.RefreshProperties">
      <summary>속성 창의 새로 고침 유형을 나타내는 식별자를 정의합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.All">
      <summary>속성이 다시 쿼리되어야 하고 뷰는 새로 고쳐져야 합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.None">
      <summary>새로 고칠 필요가 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshProperties.Repaint">
      <summary>뷰가 새로 고쳐져야 합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.RefreshPropertiesAttribute">
      <summary>연결된 속성 값이 변경될 때 속성 그리드를 새로 고쳐야 함을 나타냅니다. 이 클래스는 상속될 수 없습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.All">
      <summary>속성 값이 변경되면 모든 속성이 다시 쿼리되고 새로 고쳐짐을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.Default">
      <summary>속성 값이 변경될 때 다른 속성은 새로 고쳐지지 않음을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="F:System.ComponentModel.RefreshPropertiesAttribute.Repaint">
      <summary>속성 값이 변경되면 모든 속성이 다시 그려짐을 나타냅니다. 이 필드는 읽기 전용입니다.</summary>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.#ctor(System.ComponentModel.RefreshProperties)">
      <summary>
        <see cref="T:System.ComponentModel.RefreshPropertiesAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="refresh">새로 고침의 특성을 나타내는 <see cref="T:System.ComponentModel.RefreshProperties" /> 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.Equals(System.Object)">
      <summary>개체의 <see cref="Overload:System.Object.Equals" /> 메서드를 재정의합니다.</summary>
      <param name="obj" />
      <returns>지정된 개체가 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.GetHashCode">
      <summary>이 개체의 해시 코드를 반환합니다.</summary>
      <returns>해당 특성이 속해 있는 개체의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.RefreshPropertiesAttribute.IsDefaultAttribute">
      <summary>현재 특성 값이 해당 특성의 기본값인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>현재 특성 값이 기본값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.RefreshPropertiesAttribute.RefreshProperties">
      <summary>멤버의 새로 고침 속성을 가져옵니다.</summary>
      <returns>멤버의 현재 새로 고침 속성을 나타내는 <see cref="T:System.ComponentModel.RefreshProperties" />입니다.</returns>
    </member>
  </members>
</doc>
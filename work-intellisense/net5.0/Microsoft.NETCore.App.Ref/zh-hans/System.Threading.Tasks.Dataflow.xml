<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Threading.Tasks.Dataflow</name>
  </assembly>
  <members>
    <member name="T:System.Threading.Tasks.Dataflow.ActionBlock`1">
      <summary vsli:raw="Provides a dataflow block that invokes a provided &lt;see cref=&quot;T:System.Action`1&quot; /&gt; delegate for every data element received.">提供数据流块，其调用为每个接收的数据提供的 <see cref="T:System.Action`1" /> 委托。</summary>
      <typeparam name="TInput" vsli:raw="The type of data that this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; operates on.">此 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 操作的数据类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; class with the specified action.">使用指定的操作初始化 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 类的新实例。</summary>
      <param name="action" vsli:raw="The action to invoke with each data element received.">使用接收的每个数据元素调用的操作。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; class with the specified action and configuration options.">初始化指定操作和配置选项的 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 类的新实例。</summary>
      <param name="action" vsli:raw="The action to invoke with each data element received.">使用接收的每个数据元素调用的操作。</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt;.">用来配置此 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; class with the specified action.">使用指定的操作初始化 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 类的新实例。</summary>
      <param name="action" vsli:raw="The action to invoke with each data element received.">使用接收的每个数据元素调用的操作。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; class with the specified action and configuration options.">初始化指定操作和配置选项的 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 类的新实例。</summary>
      <param name="action" vsli:raw="The action to invoke with each data element received.">使用接收的每个数据元素调用的操作。</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt;.">用来配置此 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" />的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;action&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="action" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Complete">
      <summary vsli:raw="Signals to the dataflow block  that it shouldn't accept or produce any more messages and shouldn't consume any more postponed messages.">通知数据流块，告知其不应再接受或生成更多消息也不应再使用更多的延迟消息。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)">
      <summary vsli:raw="Posts an item to the target dataflow block.">将项目发送到目标数据流块。</summary>
      <param name="item" vsli:raw="The item being offered to the target.">提供给目标的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item is posted to the dataflow block; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果项目被发送至数据流块，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the dataflow block to complete in a faulted state.">导致数据流块在出错的状态下完成。</summary>
      <param name="exception" vsli:raw="The exception that caused the faulting.">导致出错的异常。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the dataflow block, and gives it the opportunity to consume or postpone the message.">提供信息至数据流块，并提供使用或延迟信息的机会。</summary>
      <param name="messageHeader" vsli:raw="The header of the message being offered.">提供的消息的标题。</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">要提供的消息值。</param>
      <param name="source" vsli:raw="The dataflow block that is offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">提供消息的数据流块。 这可能是 <see langword="null" />。</param>
      <param name="consumeToAccept" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果要指示目标在返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> 前，在进行对 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 的调用期间同步调用 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 以使用消息，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may be &lt;see langword=&quot;true&quot; /&gt; only if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> 无效。  
  
或者，<paramref name="consumeToAccept" /> 仅在被提供了非 null <paramref name="source" /> 时可能为 <see langword="true" />。</exception>
      <returns vsli:raw="The status of the offered message.  If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but source was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">所提供消息的状态。  如果消息为该目标接受，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，将返回，并且源不应再使用提供的消息，因为其现在归目标所有。 如果消息因该目标延迟，则将以通知的形式返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，该通知是目标稍后可能会尝试使用或保留消息的通知；同时，源仍拥有消息并将其提供给其他块。  
  
如果目标推迟了消息，而源为 <see langword="null" />，则返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。  
  
如果尝试了接受此则消息但由于将消息交付给另一目标或放弃该消息的源而错过该消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。  
  
如果目标选择不接受消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果源选择不接受该消息并将从不从此源接受另一则消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ActionBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">返回一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</summary>
      <returns vsli:raw="A string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.Completion">
      <summary vsli:raw="Gets a  &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; object that represents the asynchronous operation and completion of the dataflow block.">获取 <see cref="T:System.Threading.Tasks.Task" /> 对象，该对象表示数据流块的异步操作和完成。</summary>
      <returns vsli:raw="The completed task.">已完成任务。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount">
      <summary vsli:raw="Gets the number of input items waiting to be processed by this block.">获取等待被此代码块处理的输入项的数目。</summary>
      <returns vsli:raw="The number of input items waiting to be processed by this block.">等待被此代码块处理的输入项的数目。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchBlock`1">
      <summary vsli:raw="Provides a dataflow block that batches inputs into arrays.">提供将输入批处理到数组中的数据流块。</summary>
      <typeparam name="T" vsli:raw="Specifies the type of data put into batches.">指定数据的类型将放置于多个批。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt; with the specified batch size.">初始化指定批次大小的新 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />。</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">分组为批的项数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.">
        <paramref name="batchSize" /> 必须是正数。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt; with the specified batch size, declining option, and block options.">用指定的批大小、定义选项和块选项初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />。</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">分组为批的项数。</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt;.">用来配置此 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" />的选项。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;batchSize&quot; /&gt; must be smaller than the value of the &lt;see cref=&quot;P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity&quot; /&gt; option if a non-default value has been set.">
        <paramref name="batchSize" /> 必须是正数。  
  
- 或 - 
如果已设置非默认值，则 <paramref name="batchSize" /> 必定小于 <see cref="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity" /> 选项的值。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">通知 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />，告知其不应该生成任何更多的消息也不应使用任何更多的延迟消息。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">将 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 链接到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">要将此源连接到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 实例，用于配置链接。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> 为 null （在 Visual Basic 中为 Nothing）或 <paramref name="linkOptions" /> 为 null（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">根据调用 Dispose 将取消与目标中源的链接的 IDisposable。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">导致 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下完成。</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">导致出错的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; .">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以接受并使用以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">要使用的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">占用消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功使用该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as messageValue through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">所使用的消息的值。 这可能对应于一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例，该实例不同于之前保留并作为 <paramref name="messageHeader" /> 传递到 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 的实例。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 必须使用返回值而不是通过 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 传递为 messageValue 的值。  
  
如果所需消息不可的，则返回值将是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以发布由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 发布的以前已保留的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">要发布的已保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">发布之前保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />未保留消息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T[]}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0[]})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以保留以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">要保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功保留该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">向 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 提供消息，向目标提供使用和延迟消息的机会。</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">表示要提供的消息的标头的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例。</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">要提供的消息值。</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be null.">提供消息的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 这可能为 null。</param>
      <param name="consumeToAccept" vsli:raw="Set to &lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">为使用此消息，设置为 <see langword="true" />，以指示目标于返回 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 前在进行对 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 调用间同步调用 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> 无效。  
  
或者，如果被提供了非 null <paramref name="consumeToAccept" />，则 <paramref name="source" /> 只能为 true。</exception>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but &lt;paramref name=&quot;source&quot; /&gt; was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">所提供消息的状态。 如果消息为该目标接受，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，将返回，并且源不应再使用提供的消息，因为其现在归目标所有。 如果消息因该目标延迟，则将以通知的形式返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，该通知是目标稍后可能会尝试使用或保留消息的通知；同时，源仍拥有消息并将其提供给其他块。  
  
如果目标应已推迟消息，但是 <paramref name="source" /> 是 <see langword="null" />，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> 替换。  
  
如果尝试了接受此则消息但由于将消息交付给另一目标或放弃该消息的源而错过该消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。  
  
如果目标选择不接受消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果源选择不接受该消息并将从不从此源接受另一则消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">返回一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TriggerBatch">
      <summary vsli:raw="Triggers the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt; to initiate a batching operation even if the number of currently queued or postponed items is less than the &lt;see cref=&quot;P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize&quot; /&gt;.">触发 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> 以启动批处理操作，即使当前排队或推迟项的数量小于 <see cref="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize" />。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceive(System.Predicate{`0[]},`0[]@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收可用输出项。</summary>
      <param name="filter" vsli:raw="The predicate a value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">为使值得到检索，必须成功传递值的谓词。  <paramref name="filter" /> 可能是 <see langword="null" /> ，在此情况下，所有项均将通过。</param>
      <param name="item" vsli:raw="The item received from the source.">从源中检索到的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收项，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0[]}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收所有可用项。</summary>
      <param name="items" vsli:raw="The items received from the source.">从源中接收的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收一个或多个项目，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.BatchSize">
      <summary vsli:raw="Gets the size of the batches generated by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt;.">获取由此 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> 生成的批的大小。</summary>
      <returns vsli:raw="The batch size.">批次大小。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">获取 <see cref="T:System.Threading.Tasks.Task" />，其表示数据流块的操作和完成。</summary>
      <returns vsli:raw="The task.">任务。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchBlock`1.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">获取可从此块中接收的输出项的数量。</summary>
      <returns vsli:raw="The number of output items.">输出项数。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2">
      <summary vsli:raw="Provides a dataflow block that batches a specified number of inputs of potentially differing types provided to one or more of its targets.">提供批处理指定数目输入的数据流块，这些输入为提供给目标的潜在不同的类型。</summary>
      <typeparam name="T1" vsli:raw="Specifies the type of data accepted by the block's first target.">指定由块的第一个目标接受的数据类型。</typeparam>
      <typeparam name="T2" vsli:raw="Specifies the type of data accepted by the block's second target.">指定由块的第二个目标接受的数据类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt; with the specified configuration.">初始化指定配置的新 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />。</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">分组为批的项数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.">
        <paramref name="batchSize" /> 必须是正数。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt; with the specified configuration.">初始化指定配置的新 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />。</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">分组为批的项数。</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt;.">用来配置此 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" />的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;batchSize&quot; /&gt; is less than one.">
        <paramref name="batchSize" /> 小于一。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">通知 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />，告知其不应该生成任何更多的消息也不应使用任何更多的延迟消息。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">将 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 链接到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">此源连接到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 实例，用于配置链接。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing），或者 <paramref name="linkOptions" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">根据调用 Dispose 将取消与目标中源的链接的 IDisposable。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">导致 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下完成。</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">导致出错的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Boolean@)">
      <summary vsli:raw="Passes the ownership of the message identified by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; from this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; instance to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">将 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 标识的消息的所有权从此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 实例传递到 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be consumed.">要使用的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be consumed.">要为其使用消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed. &lt;see langword=&quot;false&quot; /&gt; otherwise.">如果成功使用消息，则为 <see langword="true" />。 否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to this method. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;. If the message requested is not available, the return value is &lt;see langword=&quot;null&quot; /&gt; (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">所使用的消息的值。 这可能对应于一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例，该实例不同于之前保留并作为 <paramref name="messageHeader" /> 传递给此方法的实例。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 必须使用返回值而不是作为 <paramref name="messageValue" /> 传递到 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 的值。 如果所请求的消息不可用，则返回值将是 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <summary vsli:raw="Releases the right to pass the ownership of the message identified by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; from this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">释放将 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 标识的消息的所有权从此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 传递到 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 的权限。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message.">保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that currently holds the reservation.">当前保存保留项的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />未保留消息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}})">
      <summary vsli:raw="Reserves the right to pass the ownership of the message identified by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; from this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">保留将 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 标识的消息的所有权从此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 传递到 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 的权限。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be reserved.">要保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be reserved.">要为其保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功保留该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">返回一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收可用输出项。</summary>
      <param name="filter" vsli:raw="The predicate a value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">为使值得到检索，必须成功传递值的谓词。  <paramref name="filter" /> 可能是 <see langword="null" /> ，在此情况下，所有项均将通过。</param>
      <param name="item" vsli:raw="The item received from the source.">从源中检索到的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收项，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1}}}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收所有可用项。</summary>
      <param name="items" vsli:raw="The items received from the source.">从源中接收的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收一个或多个项目，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.BatchSize">
      <summary vsli:raw="Gets the size of the batches generated by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt;.">获取生成此 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> 的批大小。</summary>
      <returns vsli:raw="The batch size.">批次大小。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">获取 <see cref="T:System.Threading.Tasks.Task" />，其表示数据流块的操作和完成。</summary>
      <returns vsli:raw="The task.">任务。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">获取可从此块中接收的输出项的数量。</summary>
      <returns vsli:raw="The number of output items.">输出项数。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target1">
      <summary vsli:raw="Gets a target that may be used to offer messages of the first type.">获取可用于提供第一种类型的消息的目标。</summary>
      <returns vsli:raw="The target.">目标。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2.Target2">
      <summary vsli:raw="Gets a target that may be used to offer messages of the second type.">获取可用于提供第二种类型的消息的目标。</summary>
      <returns vsli:raw="The target.">目标。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3">
      <summary vsli:raw="Provides a dataflow block that batches a specified number of inputs of potentially differing types provided to one or more of its targets.">提供批处理指定数目输入的数据流块，这些输入为提供给目标的潜在不同的类型。</summary>
      <typeparam name="T1" vsli:raw="Specifies the type of data accepted by the block's first target.">指定由块的第一个目标接受的数据类型。</typeparam>
      <typeparam name="T2" vsli:raw="Specifies the type of data accepted by the block's second target.">指定由块的第二个目标接受的数据类型。</typeparam>
      <typeparam name="T3" vsli:raw="Specifies the type of data accepted by the block's third target.">指定由块的第三个目标接受的数据类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3&quot; /&gt; with the specified configuration.">初始化指定配置的新 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />。</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">分组为批的项数。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.">
        <paramref name="batchSize" /> 必须是正数。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.#ctor(System.Int32,System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3&quot; /&gt; with the specified configuration.">初始化指定配置的新 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" />。</summary>
      <param name="batchSize" vsli:raw="The number of items to group into a batch.">分组为批的项数。</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2&quot; /&gt;.">用来配置此 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`2" /> 的选项。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;batchSize&quot; /&gt; must be positive.">
        <paramref name="batchSize" /> 必须是正数。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">通知 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />，告知其不应该生成任何更多的消息也不应使用任何更多的延迟消息。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">将 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 链接到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">要将此源连接到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the source should unlink from the target after successfully propagating a single message; &lt;see langword=&quot;false&quot; /&gt; to remain connected even after a single message has been propagated.">如果源应在成功传播单一消息后取消链接，则为 <see langword="true" />；甚至在单一消息传播后仍将保持连接的 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing），或者 <paramref name="linkOptions" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">根据调用 Dispose 将取消与目标中源的链接的 IDisposable。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">导致 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下完成。</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">导致出错的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Boolean@)">
      <summary vsli:raw="Passes the ownership of the message identified by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; from this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; instance to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">将 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 标识的消息的所有权从此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 实例传递到 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be consumed.">要使用的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be consumed.">要为其使用消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed. &lt;see langword=&quot;false&quot; /&gt; otherwise.">如果成功使用消息，则为 <see langword="true" />。 否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to this method. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;. If the message requested is not available, the return value is &lt;see langword=&quot;null&quot; /&gt; (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">所使用的消息的值。 这可能对应于一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例，该实例不同于之前保留并作为 <paramref name="messageHeader" /> 传递给此方法的实例。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 必须使用返回值而不是作为 <paramref name="messageValue" /> 传递到 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 的值。 如果所请求的消息不可用，则返回值将是 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <summary vsli:raw="Releases the right to pass the ownership of the message identified by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; from this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">释放将 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 标识的消息的所有权从此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 传递到 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 的权限。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message.">保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that currently holds the reservation.">当前保存保留项的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />未保留消息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{System#Collections#Generic#IList{T1}@System#Collections#Generic#IList{T2}@System#Collections#Generic#IList{T3}}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}})">
      <summary vsli:raw="Reserves the right to pass the ownership of the message identified by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; from this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">保留将 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 标识的消息的所有权从此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 传递到 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 的权限。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be reserved.">要保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be reserved.">要为其保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功保留该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">返回一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceive(System.Predicate{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}},System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收可用输出项。</summary>
      <param name="filter" vsli:raw="The predicate a value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt; in which case all items will pass.">为使值得到检索，必须成功传递值的谓词。  <paramref name="filter" /> 可能是 <see langword="null" /> ，在此情况下，所有项目均通过。</param>
      <param name="item" vsli:raw="The item received from the source.">从源中检索到的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收项，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{System.Collections.Generic.IList{`0},System.Collections.Generic.IList{`1},System.Collections.Generic.IList{`2}}}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收所有可用项。</summary>
      <param name="items" vsli:raw="The items received from the source.">从源中接收的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收一个或多个项目，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.BatchSize">
      <summary vsli:raw="Gets the size of the batches generated by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3&quot; /&gt;.">获取生成此 <see cref="T:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3" /> 的批大小。</summary>
      <returns vsli:raw="The batch size.">批次大小。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">获取 <see cref="T:System.Threading.Tasks.Task" />，其表示数据流块的操作和完成。</summary>
      <returns vsli:raw="The task.">任务。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">获取可从此块中接收的输出项的数量。</summary>
      <returns vsli:raw="The number of output items.">输出项数。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target1">
      <summary vsli:raw="Gets a target that may be used to offer messages of the first type.">获取可用于提供第一种类型的消息的目标。</summary>
      <returns vsli:raw="The target.">目标。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target2">
      <summary vsli:raw="Gets a target that may be used to offer messages of the second type.">获取可用于提供第二种类型的消息的目标。</summary>
      <returns vsli:raw="The target.">目标。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BatchedJoinBlock`3.Target3">
      <summary vsli:raw="Gets a target that may be used to offer messages of the third type.">获取可用于提供第三种类型消息的目标。</summary>
      <returns vsli:raw="The target.">目标。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1">
      <summary vsli:raw="Provides a buffer for storing at most one element at time, overwriting each message with the next as it arrives.">提供缓冲区，用于一次存储最多一个元素，在每个消息抵达时覆盖每个消息。</summary>
      <typeparam name="T" vsli:raw="Specifies the type of the data buffered by this dataflow block.">指定由数据流块缓冲的数据类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0})">
      <summary vsli:raw="Initializes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BroadcastBlock`1&quot; /&gt; with the specified cloning function.">用指定的克隆函数初始化 <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" />。</summary>
      <param name="cloningFunction" vsli:raw="The function to use to clone the data when offered to other blocks.">用以在提供给其他块时克隆数据的函数。</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Initializes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BroadcastBlock`1&quot; /&gt; with the specified cloning function and  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt;.">用指定的克隆函数和 <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> 初始化 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />。</summary>
      <param name="cloningFunction" vsli:raw="The function to use to clone the data when offered to other blocks.">用以在提供给其他块时克隆数据的函数。</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BroadcastBlock`1&quot; /&gt;.">用来配置此 <see cref="T:System.Threading.Tasks.Dataflow.BroadcastBlock`1" /> 的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">通知 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />，告知其不应该生成任何更多的消息也不应使用任何更多的延迟消息。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">将 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 链接到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">此源连接到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 实例，用于配置链接。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> 为 null （在 Visual Basic 中为 Nothing）或 <paramref name="linkOptions" /> 为 null（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">根据调用 Dispose 将取消与目标中源的链接的 IDisposable。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">导致 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下完成。</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">导致此错误的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收所有可用项。</summary>
      <param name="items" vsli:raw="The items received from the source.">从源中接收的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收一个或多个项目，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以接受并使用以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">要使用的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">占用消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功使用该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">所使用的消息的值。 这可能对应于一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例，该实例不同于之前保留并作为 <paramref name="messageHeader" /> 传递到 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 的实例。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 必须使用返回值而不是通过 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 传递为 <paramref name="messageValue" /> 的值。  
  
如果所需消息不可的，则返回值将是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以发布由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 发布的以前已保留的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">要发布的已保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">发布之前保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />未保留消息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以保留以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">要保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功保留该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">向 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 提供消息，向目标提供使用和延迟消息的机会。</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">表示要提供的消息的标头的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例。</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">要提供的消息值。</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be null.">提供消息的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 这可能为 null。</param>
      <param name="consumeToAccept" vsli:raw="Set to &lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">为使用此消息，设置为 <see langword="true" />，以指示目标于返回 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 前在进行对 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 调用间同步调用 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> 无效。  
  
或者，如果被提供了非 null <paramref name="consumeToAccept" />，则 <paramref name="source" /> 只能为 true。</exception>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but &lt;paramref name=&quot;source&quot; /&gt; was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">所提供消息的状态。 如果消息为该目标接受，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，将返回，并且源不应再使用提供的消息，因为其现在归目标所有。 如果消息因该目标延迟，则将以通知的形式返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，该通知是目标稍后可能会尝试使用或保留消息的通知；同时，源仍拥有消息并将其提供给其他块。  
  
如果目标应已推迟消息，但是 <paramref name="source" /> 是 <see langword="null" />，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> 替换。  
  
如果尝试了接受此则消息但由于将消息交付给另一目标或放弃该消息的源而错过该消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。  
  
如果目标选择不接受消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果源选择不接受该消息并将从不从此源接受另一则消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">返回一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</summary>
      <returns vsli:raw="A string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BroadcastBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收可用输出项。</summary>
      <param name="filter" vsli:raw="The predicate a value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">为使值得到检索，必须成功传递值的谓词。  <paramref name="filter" /> 可能是 <see langword="null" /> ，在此情况下，所有项均将通过。</param>
      <param name="item" vsli:raw="The item received from the source.">从源中检索到的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收项，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BroadcastBlock`1.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">获取 <see cref="T:System.Threading.Tasks.Task" />，其表示数据流块的操作和完成。</summary>
      <returns vsli:raw="The task.">任务。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.BufferBlock`1">
      <summary vsli:raw="Provides a buffer for storing data for a Dataflow.">为数据流提供用于存储数据的缓冲区。</summary>
      <typeparam name="T" vsli:raw="Specifies the type of the data buffered by this dataflow block.">指定由数据流块缓冲的数据类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BufferBlock`1&quot; /&gt;.">初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.#ctor(System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BufferBlock`1&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt;.">使用指定的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> 初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" />。</summary>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BufferBlock`1&quot; /&gt;.">用来配置此 <see cref="T:System.Threading.Tasks.Dataflow.BufferBlock`1" /> 的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">通知 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />，告知其不应该生成任何更多的消息也不应使用任何更多的延迟消息。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">将 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 链接到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">此源连接到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 实例，用于配置链接。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> 为 null （在 Visual Basic 中为 Nothing）或 <paramref name="linkOptions" /> 为 null（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">根据调用 Dispose 将取消与目标中源的链接的 IDisposable。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">导致 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下完成。</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">导致此错误的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以接受并使用以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">要使用的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">占用消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功使用该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to  &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">所使用的消息的值。 这可能对应于一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例，该实例不同于之前保留并作为 <paramref name="messageHeader" /> 传递到 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 的实例。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 必须使用返回值而不是通过 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 传递为 <paramref name="messageValue" /> 的值。  
  
如果所需消息不可的，则返回值将是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以发布由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 发布的以前已保留的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">要发布的已保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">发布之前保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />未保留消息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以保留以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">要保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功保留该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">向 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 提供消息，向目标提供使用和延迟消息的机会。</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">表示要提供的消息的标头的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例。</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">要提供的消息值。</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">提供消息的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 这可能是 <see langword="null" />。</param>
      <param name="consumeToAccept" vsli:raw="Set to true to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">为使用此消息，设置为 true，以指示目标于返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" /> 前在进行对 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 的调用期间同步调用 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> 无效。  
  
或者，如果被提供了非 null <paramref name="consumeToAccept" />，则 <paramref name="source" /> 只能为 true。</exception>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but &lt;paramref name=&quot;source&quot; /&gt; was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">所提供消息的状态。 如果消息为该目标接受，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，将返回，并且源不应再使用提供的消息，因为其现在归目标所有。 如果消息因该目标延迟，则将以通知的形式返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，该通知是目标稍后可能会尝试使用或保留消息的通知；同时，源仍拥有消息并将其提供给其他块。  
  
如果目标应已推迟消息，但是 <paramref name="source" /> 是 <see langword="null" />，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> 替换。  
  
如果尝试了接受此则消息但由于将消息交付给另一目标或放弃该消息的源而错过该消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。  
  
如果目标选择不接受消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果源选择不接受该消息并将从不从此源接受另一则消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">返回一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收可用输出项。</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received. &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">为使值得到检索，必须成功传递值的谓词。 <paramref name="filter" /> 可能是 <see langword="null" /> ，在此情况下，所有项均将通过。</param>
      <param name="item" vsli:raw="The item received from the source.">从源中检索到的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收项，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.BufferBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收所有可用项。</summary>
      <param name="items" vsli:raw="The items received from the source.">从源中接收的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收一个或多个项目，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">获取 <see cref="T:System.Threading.Tasks.Task" />，其表示数据流块的操作和完成。</summary>
      <returns vsli:raw="The task.">任务。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.BufferBlock`1.Count">
      <summary vsli:raw="Gets the number of items currently stored in the buffer.">获取存储在缓冲区中项的数目。</summary>
      <returns vsli:raw="The number of items.">项数。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlock">
      <summary vsli:raw="Provides a set of static (Shared in Visual Basic) methods for working with dataflow blocks.">提供一组用于处理数据流块的静态方法（在 Visual Basic 中为共享方法）。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.IObservable`1&quot; /&gt; abstraction over the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">在 <see cref="T:System.IObservable`1" /> 创建新的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 抽象。</summary>
      <param name="source" vsli:raw="The source to wrap.">要包装的源。</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">指定源中所包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IObservable`1&quot; /&gt; that enables observers to be subscribed to the source.">使观察者可以订阅源的 <see cref="T:System.IObservable`1" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.IObserver`1&quot; /&gt; abstraction over the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">通过 <see cref="T:System.IObserver`1" /> 创建新的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 抽象。</summary>
      <param name="target" vsli:raw="The target to wrap.">要包装的目标。</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of input accepted by the target block.">指定由目标块接受的输入类型。</typeparam>
      <returns vsli:raw="An observer that wraps the target block.">包装目标块的观察者。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})">
      <summary vsli:raw="Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.">监视两种数据流源, 调用出来程序以使无论哪一种源都可首先获得数据。</summary>
      <param name="source1" vsli:raw="The first source.">第一个源。</param>
      <param name="action1" vsli:raw="The handler to execute on data from the first source.">在第一个源的数据上执行的处理程序。</param>
      <param name="source2" vsli:raw="The second source.">第二个源。</param>
      <param name="action2" vsli:raw="The handler to execute on data from the second source.">在第二个源的数据上执行的处理程序。</param>
      <typeparam name="T1" vsli:raw="Specifies type of data contained in the first source.">指定第一个源中所包含的数据的类型。</typeparam>
      <typeparam name="T2" vsli:raw="Specifies type of data contained in the second source.">指定第二个源中所包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The  &lt;paramref name=&quot;action1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="action1" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="source2" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="action2" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous choice. If both sources are completed prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state and will contain the unhandled exception. Otherwise, the task will end with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; set to either 0 or 1 to represent the first or second source, respectively.  &#xA;  &#xA; This method will only consume an element from one of the two data sources, never both.">一个表示异步选择的 <see cref="T:System.Threading.Tasks.Task`1" />。 如果在选择完成之前完成这两个源，则将取消结果任务。 如果源的其中之一具有可利用数据并成功传播到选定内容时，则结果任务将在处理程序完成时完成；如果该处理程序引发异常，则该任务将在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下结束并将包含未经处理的异常。 否则，此任务将以其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 设置至 0 或 1 来分别表示第一或第二源结束。  
  
此方法将只使用来自两个数据源中的一个元素（不会同时使用两个）。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.">监视两种数据流源, 调用出来程序以使无论哪一种源都可首先获得数据。</summary>
      <param name="source1" vsli:raw="The first source.">第一个源。</param>
      <param name="action1" vsli:raw="The handler to execute on data from the first source.">在第一个源的数据上执行的处理程序。</param>
      <param name="source2" vsli:raw="The second source.">第二个源。</param>
      <param name="action2" vsli:raw="The handler to execute on data from the second source.">在第二个源的数据上执行的处理程序。</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this choice.">用来配置此选择的选项。</param>
      <typeparam name="T1" vsli:raw="Specifies type of data contained in the first source.">指定第一个源中所包含的数据的类型。</typeparam>
      <typeparam name="T2" vsli:raw="Specifies type of data contained in the second source.">指定第二个源中所包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="action1" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="source2" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="action2" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous choice. If both sources are completed prior to the choice completing, or if the &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; provided as part of &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is canceled prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state and will contain the unhandled exception. Otherwise, the task will end with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; set to either 0 or 1 to represent the first or second source, respectively.">一个表示异步选择的 <see cref="T:System.Threading.Tasks.Task`1" />。 如果在选择完成之前完成数据源，或者如果在选择完成之前作为 <see cref="T:System.Threading.CancellationToken" /> 提供作为 <paramref name="dataflowBlockOptions" /> 一部分提供，则取消结果任务。 如果源的其中之一具有可利用数据并成功传播到选定内容时，则结果任务将在处理程序完成时完成；如果该处理程序引发异常，则该任务将在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下结束并将包含未经处理的异常。 否则，此任务将以其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 设置至 0 或 1 来分别表示第一或第二源结束。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})">
      <summary vsli:raw="Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.">监视三种数据流源，调用提供处理程序以使无论哪一种源都可以首先获得数据。</summary>
      <param name="source1" vsli:raw="The first source.">第一个源。</param>
      <param name="action1" vsli:raw="The handler to execute on data from the first source.">在第一个源的数据上执行的处理程序。</param>
      <param name="source2" vsli:raw="The second source.">第二个源。</param>
      <param name="action2" vsli:raw="The handler to execute on data from the second source.">在第二个源的数据上执行的处理程序。</param>
      <param name="source3" vsli:raw="The third source.">第三个源。</param>
      <param name="action3" vsli:raw="The handler to execute on data from the third source.">在第三方源的数据上执行的处理程序。</param>
      <typeparam name="T1" vsli:raw="Specifies type of data contained in the first source.">指定第一个源中所包含的数据的类型。</typeparam>
      <typeparam name="T2" vsli:raw="Specifies type of data contained in the second source.">指定第二个源中所包含的数据的类型。</typeparam>
      <typeparam name="T3" vsli:raw="Specifies type of data contained in the third source.">指定第三源中所包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source3&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action3&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="action1" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="source2" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="action2" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="source3" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="action3" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous choice. If all sources are completed prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state and will contain the unhandled exception. Otherwise, the task will end with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; set to the 0-based index of the source.  &#xA;  &#xA; This method will only consume an element from one of the data sources, never more than one.">一个表示异步选择的 <see cref="T:System.Threading.Tasks.Task`1" />。 如果在选择完成之前完成所有源，则将取消结果任务。 如果源的其中之一具有可利用数据并成功传播到选定内容时，则结果任务将在处理程序完成时完成；如果该处理程序引发异常，则该任务将在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下结束并将包含未经处理的异常。 否则，此任务将以 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 设置至源的 0-based 索引结束。  
  
此方法将只使用来自某个数据源的元素（不会超过一种）。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.">监视三种数据流源，调用提供处理程序以使无论哪一种源都可以首先获得数据。</summary>
      <param name="source1" vsli:raw="The first source.">第一个源。</param>
      <param name="action1" vsli:raw="The handler to execute on data from the first source.">在第一个源的数据上执行的处理程序。</param>
      <param name="source2" vsli:raw="The second source.">第二个源。</param>
      <param name="action2" vsli:raw="The handler to execute on data from the second source.">在第二个源的数据上执行的处理程序。</param>
      <param name="source3" vsli:raw="The third source.">第三个源。</param>
      <param name="action3" vsli:raw="The handler to execute on data from the third source.">在第三方源的数据上执行的处理程序。</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this choice.">用来配置此选择的选项。</param>
      <typeparam name="T1" vsli:raw="Specifies type of data contained in the first source.">指定第一个源中所包含的数据的类型。</typeparam>
      <typeparam name="T2" vsli:raw="Specifies type of data contained in the second source.">指定第二个源中所包含的数据的类型。</typeparam>
      <typeparam name="T3" vsli:raw="Specifies type of data contained in the third source.">指定第三源中所包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action1&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action2&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;source3&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;action3&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source1" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="action1" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="source2" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="action2" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="source3" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="action3" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous choice. If all sources are completed prior to the choice completing, or if the &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; provided as part of &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is canceled prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state and will contain the unhandled exception. Otherwise, the task will end with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; set to the 0-based index of the source.  &#xA;  &#xA; This method will only consume an element from one of the data sources, never more than one. If cancellation is requested after an element has been received, the cancellation request will be ignored, and the relevant handler will be allowed to execute.">一个表示异步选择的 <see cref="T:System.Threading.Tasks.Task`1" />。 如果在选择完成之前完成所有数据源，或者如果在选择完成之前作为 <see cref="T:System.Threading.CancellationToken" /> 提供作为 <paramref name="dataflowBlockOptions" /> 一部分提供，则取消结果任务。 如果源的其中之一具有可利用数据并成功传播到选定内容时，则结果任务将在处理程序完成时完成；如果该处理程序引发异常，则该任务将在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下结束并将包含未经处理的异常。 否则，此任务将以 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 设置至源的 0-based 索引结束。  
  
此方法将只使用来自某个数据源的元素（不会超过一种）。 如果在接收元素后请求取消，则该取消请求将被忽略并且相关的处理程序将被允许执行。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})">
      <summary vsli:raw="Encapsulates a target and a source into a single propagator.">将目标和源封装入单一的传播程序。</summary>
      <param name="target" vsli:raw="The target to encapsulate.">要封装的目标。</param>
      <param name="source" vsli:raw="The source to encapsulate.">要封装的源。</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of input expected by the target.">指定由目标块接受的应输入的输入类型。</typeparam>
      <typeparam name="TOutput" vsli:raw="Specifies the type of output produced by the source.">指定由源产生的输出的类型。</typeparam>
      <returns vsli:raw="The encapsulated target and source.">封装的目标和源。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})">
      <summary vsli:raw="Links the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">将 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 链接到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="source" vsli:raw="The source from which to link.">链接的源。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect the source.">该源连接到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">指定源中所包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; that, upon calling &lt;see langword=&quot;Dispose&quot; /&gt;, will unlink the source from the target.">根据调用 <see langword="Dispose" /> 将取消与目标中源的链接的 <see cref="T:System.IDisposable" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})">
      <summary vsli:raw="Links the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; using the specified filter.">用指定的筛选器将 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 链接到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="source" vsli:raw="The source from which to link.">链接的源。</param>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect the source.">要将此源连接到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="predicate" vsli:raw="The filter a message must pass in order for it to propagate from the source to the target.">在从源传播到目标的过程中消息必须有序通过筛选器。</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">指定源中所包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="target" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="predicate" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; that, upon calling &lt;see langword=&quot;Dispose&quot; /&gt;, will unlink the source from the target.">根据调用 <see langword="Dispose" /> 将取消与目标中源的链接的 <see cref="T:System.IDisposable" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; using the specified filter.">用指定的筛选器将 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 链接到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="source" vsli:raw="The source from which to link.">链接的源。</param>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect the source.">要将此源连接到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions" vsli:raw="One of the enumeration values that specifies how to configure a link between dataflow blocks.">一个枚举值指定如何计算数据流块之间的链接。</param>
      <param name="predicate" vsli:raw="The filter a message must pass in order for it to propagate from the source to the target.">在从源传播到目标的过程中消息必须有序通过筛选器。</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">指定源中所包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The  &lt;paramref name=&quot;source&quot; /&gt; is null (Nothing in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The  &lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The  &lt;paramref name=&quot;predicate&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="source" /> 是 null（在 Visual Basic 中为 Nothing）。  
  
- 或 - 
<paramref name="target" /> 是 null（在 Visual Basic 中为 Nothing）。  
  
- 或 - 
<paramref name="linkOptions" /> 是 null（在 Visual Basic 中为 Nothing）。  
  
- 或 - 
<paramref name="predicate" /> 是 null（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; that, upon calling &lt;see langword=&quot;Dispose&quot; /&gt;, will unlink the source from the target.">根据调用 <see langword="Dispose" /> 将取消与目标中源的链接的 <see cref="T:System.IDisposable" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1">
      <summary vsli:raw="Gets a target block that synchronously accepts all messages offered to it and drops them.">获取目标块，此目标块能同步接收为其提供的所有信息并放置它们。</summary>
      <typeparam name="TInput" vsli:raw="The type of the messages this block can accept.">该块可以接受消息的类型。</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that accepts and subsequently drops all offered messages.">
        <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 接受并后续放置所有提供的信息。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that asynchronously monitors the source for available output.">提供可异步监视可利用的输出的源的 <see cref="T:System.Threading.Tasks.Task`1" /> 。</summary>
      <param name="source" vsli:raw="The source to monitor.">对监视的源。</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">指定源中所包含的数据的类型。</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that informs of whether and when more output is available. If, when the task completes, its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, more output is available in the source (though another consumer of the source may retrieve the data).  &#xA;  &#xA; If it returns &lt;see langword=&quot;false&quot; /&gt;, more output is not and will never be available, due to the source completing prior to output being available.">
        <see cref="T:System.Threading.Tasks.Task`1" /> 通知多个输出是否可用和何时可用。 如果在任务完成时，它的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 是 <see langword="true" />，更多输出在源处是可用的 (尽管源的另一个使用者可能检索数据)。  
  
如果它返回 <see langword="false" />，则会因为在提供输入之前完成的源而导致更多输出不可用。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary vsli:raw="Provides a  &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that asynchronously monitors the source for available output.">提供 <see cref="T:System.Threading.Tasks.Task`1" />，用于以异步方式监视可用输出的源。</summary>
      <param name="source" vsli:raw="The source to monitor.">对监视的源。</param>
      <param name="cancellationToken" vsli:raw="The cancellation token with which to cancel the asynchronous operation.">用于取消异步操作的取消标记。</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">指定源中所包含的数据的类型。</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that informs of whether and when more output is available. If, when the task completes, its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, more output is available in the source (though another consumer of the source may retrieve the data). If it returns &lt;see langword=&quot;false&quot; /&gt;, more output is not and will never be available, due to the source completing prior to output being available.">
        <see cref="T:System.Threading.Tasks.Task`1" /> 通知多个输出是否可用和何时可用。 如果在任务完成时，它的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 是 <see langword="true" />，更多输出在源处是可用的 (尽管源的另一个使用者可能检索数据)。 如果它返回 <see langword="false" />，则会因为在提供输入之前完成的源而导致更多输出不可用。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary vsli:raw="Posts an item to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">将项发送到 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 中。</summary>
      <param name="target" vsli:raw="The target block.">目标块。</param>
      <param name="item" vsli:raw="The item being offered to the target.">提供给目标的项。</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of data accepted by the target block.">指定由目标块接受的数据类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item was accepted by the target block; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果项已由目标锁接受，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary vsli:raw="Synchronously receives a value from a specified source.">同步接收来自指定源的值。</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">从中接收值的源。</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">源中包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No item could be received from the source.">不能从源中接收项。</exception>
      <returns vsli:raw="The received value.">接收到的值。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary vsli:raw="Synchronously receives a value from a specified source and provides a token to cancel the operation.">同步从指定的数据源中接收值并提供标记来取消操作。</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">从中接收值的源。</param>
      <param name="cancellationToken" vsli:raw="The token to use to cancel the receive operation.">用于取消接收操作的标记。</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">源中包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No item could be received from the source.">不能从源中接收项。</exception>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The operation was canceled before an item was received from the source.">在从源接收项目之前被取消的操作。</exception>
      <returns vsli:raw="The received value.">接收到的值。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary vsli:raw="Synchronously receives a value from a specified source, observing an optional time-out period.">同步从指定的数据源中接收值，观察可选的超时期限。</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">从中接收值的源。</param>
      <param name="timeout" vsli:raw="The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.">等待同步操作完成的最大时间间隔（以毫秒为单位），或表示 -1 毫秒无限期等待的时间间隔。</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">源中包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out period.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> 是一个非 -1 毫秒的负数，而 -1 表示无限期超时期限。  
  
- 或 - 
 <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No item could be received from the source.">不能从源中接收项。</exception>
      <exception cref="T:System.TimeoutException" vsli:raw="The specified time-out expired before an item was received from the source.">在从源接收到项之前的指定的超时过期。</exception>
      <returns vsli:raw="The received value.">接收到的值。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary vsli:raw="Synchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.">同步从指定的数据源中接收值，提供标记以取消操作并观察可选的超时间隔。</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">从中接收值的源。</param>
      <param name="timeout" vsli:raw="The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.">等待同步操作完成的最大时间间隔（以毫秒为单位），或表示 -1 毫秒无限期等待的时间间隔。</param>
      <param name="cancellationToken" vsli:raw="The token to use to cancel the receive operation.">用于取消接收操作的标记。</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">源中包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out period.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> 是一个非 -1 毫秒的负数，而 -1 表示无限期超时期限。  
  
- 或 - 
 <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="No item could be received from the source.">不能从源中接收项。</exception>
      <exception cref="T:System.TimeoutException" vsli:raw="The specified time-out expired before an item was received from the source.">在从源接收到项之前的指定的超时过期。</exception>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The operation was canceled before an item was received from the source.">在从源接收项目之前被取消的操作。</exception>
      <returns vsli:raw="The received value.">接收到的值。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})">
      <summary vsli:raw="Asynchronously receives a value from a specified source.">异步接收来自指定源的值。</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">从中接收值的源。</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">源中包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="A task that represents the asynchronous receive operation. When an item value is successfully received from the source, the returned task is completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; returns the received value. If an item value cannot be retrieved because the source is empty and completed , an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; exception is thrown in the returned task.">表示异步接收操作的任务。 当从源成功检索出项值时，则返回项的任务将完成，并且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 将返回接收的值。 如果因为源为空且已完成而无法检索项值，则返回的任务中会引发 <see cref="T:System.InvalidOperationException" /> 异常。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously receives a value from a specified source and provides a token to cancel the operation.">异步从指定的数据源中接收值并提供标记来取消操作。</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">从中接收值的源。</param>
      <param name="cancellationToken" vsli:raw="The token to use to cancel the receive operation.">用于取消接收操作的标记。</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">指定源中所包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="A task that represents the asynchronous receive operation. When a value is successfully received from the source, the returned task is completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; returns the value. If a value cannot be retrieved because cancellation was requested, the returned task is canceled. If the value cannot be retrieved because the source is empty and completed , an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; exception is thrown in the returned task.">表示异步接收操作的任务。 当从源成功检索出值时，则返回项的任务将完成，并且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 将返回接值。 如果因为请求了取消而不能检索值，则返回的任务将被取消。 如果因为源为空且已完成而无法检索值，则返回的任务中会引发 <see cref="T:System.InvalidOperationException" /> 异常。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)">
      <summary vsli:raw="Asynchronously receives a value from a specified source, observing an optional time-out period.">异步从指定的数据源中接收值，观察可选的超时期限。</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">从中接收值的源。</param>
      <param name="timeout" vsli:raw="The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.">等待同步操作完成的最大时间间隔（以毫秒为单位），或表示 -1 毫秒无限期等待的时间间隔。</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">源中包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out period.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> 是一个非 -1 毫秒的负数，而 -1 表示无限期超时期限。  
  
- 或 - 
 <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <returns vsli:raw="A task that represents the asynchronous receive operation. When a value is successfully received from the source, the returned task is completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; returns the value. If a value cannot be retrieved because the time-out expired, the returned task is canceled. If the value cannot be retrieved because the source is empty and completed , an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; exception is thrown in the returned task.">表示异步接收操作的任务。 当从源成功检索出值时，则返回项的任务将完成，并且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 将返回接值。 如果因为超时已过期而不能检索值，则返回的任务将被取消。 如果因为源为空且已完成而无法检索值，则返回的任务中会引发 <see cref="T:System.InvalidOperationException" /> 异常。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.">异步从指定的数据源中接收值，提供标记以取消操作并观察可选的超时间隔。</summary>
      <param name="source" vsli:raw="The source from which to receive the value.">从中接收值的源。</param>
      <param name="timeout" vsli:raw="The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.">等待同步操作完成的最大时间间隔（以毫秒为单位），或表示 -1 毫秒无限期等待的时间间隔。</param>
      <param name="cancellationToken" vsli:raw="The token which may be used to cancel the receive operation.">可用于取消接收操作的标记。</param>
      <typeparam name="TOutput" vsli:raw="The type of data contained in the source.">源中包含的数据的类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out period.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> 是一个非 -1 毫秒的负数，而 -1 表示无限期超时期限。  
  
- 或 - 
 <paramref name="timeout" /> 大于 <see cref="F:System.Int32.MaxValue" />。</exception>
      <returns vsli:raw="A task that represents the asynchronous receive operation. When a value is successfully received from the source, the returned task is completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; returns the value. If a value cannot be retrieved because the time-out expired or cancellation was requested, the returned task is canceled. If the value cannot be retrieved because the source is empty and completed, an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; exception is thrown in the returned task.">表示异步接收操作的任务。 当从源成功检索出值时，则返回项的任务将完成，并且其 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 将返回接值。 如果因为超时已过期或请求了取消而不能检索值，则返回的任务将被取消。 如果因为源为空且已完成而无法检索值，则返回任务中会引发 <see cref="T:System.InvalidOperationException" /> 异常。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)">
      <summary vsli:raw="Asynchronously offers a message to the target message block, allowing for postponement.">为目标消息块异步提供消息，允许延期。</summary>
      <param name="target" vsli:raw="The target to which to post the data.">要发送数据的目标。</param>
      <param name="item" vsli:raw="The item being offered to the target.">提供给目标的项。</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of the data to post to the target.">指定发送到目标的数据类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous send. If the target accepts and consumes the offered element during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)&quot; /&gt;, upon return from the call the resulting &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; will be completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; property will return &lt;see langword=&quot;true&quot; /&gt;. If the target declines the offered element during the call, upon return from the call the resulting &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; will be completed and its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; property will return &lt;see langword=&quot;false&quot; /&gt;. If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the task will complete, with its &lt;see cref=&quot;P:System.Threading.Tasks.Task`1.Result&quot; /&gt; indicating whether the message was consumed. If the target never attempts to consume or release the message, the returned task will never complete.">一个表示异步发送的 <see cref="T:System.Threading.Tasks.Task`1" />。 如果目标在调用 <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" /> 时接受并使用提供的元素，在调用返回时<see cref="T:System.Threading.Tasks.Task`1" /> 将被完成，并且它的 <see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回 <see langword="true" />。 如果目标在调用过程中拒绝提供的元素，则在调用返回时 <see cref="T:System.Threading.Tasks.Task`1" /> 将被完成，并且它的<see cref="P:System.Threading.Tasks.Task`1.Result" /> 属性将返回 <see langword="false" />。 如果目标将提供的要素推迟，则该要素将被缓存，直到目标使用它或将其释放。此时任务宣告完成，<see cref="P:System.Threading.Tasks.Task`1.Result" /> 表明消息是否被使用。 如果目标从不尝试使用或释放消息，则返回的任务将无法完成。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)">
      <summary vsli:raw="Asynchronously offers a message to the target message block, allowing for postponement.">为目标消息块异步提供消息，允许延期。</summary>
      <param name="target" vsli:raw="The target to which to post the data.">要发送数据的目标。</param>
      <param name="item" vsli:raw="The item being offered to the target.">提供给目标的项。</param>
      <param name="cancellationToken" vsli:raw="The cancellation token with which to request cancellation of the send operation.">用于请求取消发送操作的取消标记。</param>
      <typeparam name="TInput" vsli:raw="Specifies the type of the data to post to the target.">指定发送到目标的数据类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The  &lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> 是 null（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the asynchronous send.  If the target accepts and consumes the offered element during the call to SendAsync, upon return from the call the resulting &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; will be completed and its &lt;c&gt;Result&lt;/c&gt; property will return true.  If the target declines the offered element during the call, upon return from the call the resulting &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; will be completed and its &lt;c&gt;Result&lt;/c&gt; property will return false. If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the Task will complete, with its &lt;c&gt;Result&lt;/c&gt; indicating whether the message was consumed. If the target never attempts to consume or release the message, the returned task will never complete.  &#xA;  &#xA; If cancellation is requested before the target has successfully consumed the sent data, the returned task will complete in the Canceled state and the data will no longer be available to the target.">一个表示异步发送的 <see cref="T:System.Threading.Tasks.Task`1" />。  如果目标在调用 SendAsync 时接受并使用提供的元素，在调用返回时将完成得到的 <see cref="T:System.Threading.Tasks.Task`1" />，并且它的 <c>Result</c> 属性将返回 true。  如果目标在调用过程中拒绝提供的元素， 则在调用返回时将完成得到的 <see cref="T:System.Threading.Tasks.Task`1" />，并且其 <c>Result</c> 属性将返回 false 。 如果目标将提供的要素推迟，则该要素将被缓存，直到目标使用它或将其释放。此时任务宣告完成，<c>Result</c> 表明消息是否被使用。 如果目标从不尝试使用或释放消息，则返回的任务将无法完成。  
  
如果在目标成功使用已发送的数据之前取消请求，则返回的任务将在“已取消”状态下完成，并且数据不再对目标可用。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)">
      <summary vsli:raw="Attempts to synchronously receive an item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">尝试从 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 中同步接收一个项目。</summary>
      <param name="source" vsli:raw="The source from which to receive.">要从中进行接收的源。</param>
      <param name="item" vsli:raw="The item received from the source.">从源中检索到的项。</param>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data contained in the source.">指定源中所包含的数据的类型。</typeparam>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收项，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions">
      <summary vsli:raw="Provides options used to configure the processing performed by dataflow blocks.">提供选项，用于配置数据流块执行的处理。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowBlockOptions.Unbounded">
      <summary vsli:raw="A constant used to specify an unlimited quantity for  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt; members that provide an upper bound. This field is constant.">一个常数，用于为设置了上限的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> 成员指定一个无限制的数量。 此字段为常数。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowBlockOptions.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt;.">初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" />。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.BoundedCapacity">
      <summary vsli:raw="Gets or sets the maximum number of messages that may be buffered by the block.">获取或设置可由块缓存的最大消息数量。</summary>
      <returns vsli:raw="The maximum number of messages. The default is -1, which indicates an unlimited number of messages.">最大消息数。 默认值为 -1，表示无限数量的消息。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.CancellationToken">
      <summary vsli:raw="Gets or sets the  &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; to monitor for cancellation requests.">获取或设置针对取消请求而要监视的 <see cref="T:System.Threading.CancellationToken" />。</summary>
      <returns vsli:raw="The token.">令牌。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.EnsureOrdered">
      <summary vsli:raw="Gets or sets a value that indicates whether ordered processing should be enforced on a block's handling of messages.">获取或设置一个值，该值指示是否对块的消息处理强制执行按顺序处理。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if ordered processing should be enforced; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 如果应强制执行顺序处理，则为;否则为 <see langword="false" /> 。 默认值是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.MaxMessagesPerTask">
      <summary vsli:raw="Gets or sets the maximum number of messages that may be processed per task.">获取或设置每任务可处理的最大消息数量。</summary>
      <returns vsli:raw="The maximum number of messages. The default is -1, which indicates an unlimited number of messages.">最大消息数。 默认值为 -1，表示无限数量的消息。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat">
      <summary vsli:raw="Gets or sets the format string to use when a block is queried for its name.">获取或设置查询块的名称时要使用的格式字符串。</summary>
      <returns vsli:raw="The format string to use when a block is queried for its name.">当用名称查询一个程序块时使用的格式字符串。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowBlockOptions.TaskScheduler">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Threading.Tasks.TaskScheduler&quot; /&gt; to use for scheduling tasks.">获取或设置要用于该安排任务进度的 <see cref="T:System.Threading.Tasks.TaskScheduler" />。</summary>
      <returns vsli:raw="The task scheduler.">任务计划程序。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions">
      <summary vsli:raw="Provides options used to configure a link between dataflow blocks.">提供用于配置数据流块之间链接的选项。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowLinkOptions.#ctor">
      <summary vsli:raw="Initializes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt;.">初始化 <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" />。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.Append">
      <summary vsli:raw="Gets or sets whether the link should be appended to the source's list of links, or whether it should be prepended.">获取或设置链接是否应追加至链接的源列表，或是否应附加它。</summary>
      <returns vsli:raw="Returns  &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.MaxMessages">
      <summary vsli:raw="Gets or sets the maximum number of messages that may be consumed across the link.">获取或设置可跨链接使用的最大消息数量。</summary>
      <returns vsli:raw="Returns  &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">返回 <see cref="T:System.Int32" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowLinkOptions.PropagateCompletion">
      <summary vsli:raw="Gets or sets whether the linked target will have completion and faulting notification propagated to it automatically.">获取或设置链接目标是否会自动将编译和容错通知传播给它。</summary>
      <returns vsli:raw="Returns  &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader">
      <summary vsli:raw="Provides a container of data attributes for passing between dataflow blocks.">提供用于在数据流块之间传递的数据特性的容器。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.#ctor(System.Int64)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; with the specified attributes.">初始化指定特性的新 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</summary>
      <param name="id" vsli:raw="The ID of the message. Must be unique within the originating source block. It does not need to be globally unique.">该消息的 ID。 在原始源块内必须唯一。 它不需要全局唯一。</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Object)">
      <summary vsli:raw="Checks boxed &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instances for equality by ID.">检查装箱的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例按 ID 相等。</summary>
      <param name="obj" vsli:raw="A boxed &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">一个装箱的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Equals(System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary vsli:raw="Checks two  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instances for equality by ID without boxing.">检查未装箱的两个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例是否相等（按 ID）。</summary>
      <param name="other" vsli:raw="Another  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">另一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.GetHashCode">
      <summary vsli:raw="Generates a hash code for the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">生成 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例的哈希代码。</summary>
      <returns vsli:raw="The hash code.">哈希代码。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Equality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary vsli:raw="Checks two  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instances for equality by ID.">检查两个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例是否相等（按 ID）。</summary>
      <param name="left" vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例。</param>
      <param name="right" vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.DataflowMessageHeader.op_Inequality(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.DataflowMessageHeader)">
      <summary vsli:raw="Checks two  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instances for non-equality by ID.">检查两个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例是否不相等（按 ID）。</summary>
      <param name="left" vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例。</param>
      <param name="right" vsli:raw="A  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果实例不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.Id">
      <summary vsli:raw="Gets the ID of the message within the source.">获取源中的消息 ID 。</summary>
      <returns vsli:raw="The ID contained in the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance.">实例中包含的 ID  <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.DataflowMessageHeader.IsValid">
      <summary vsli:raw="Gets the validity of the message.">获取消息的有效性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the ID of the message is different from 0. &lt;see langword=&quot;false&quot; /&gt; if the ID of the message is 0.">如果消息的 ID 与 0 不同，则为 <see langword="true" />。 <see langword="false" />，如果消息 Id 为 0。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.DataflowMessageStatus">
      <summary vsli:raw="Represents the status of a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; when passed between dataflow blocks.">表示在数据流块间传递时 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />的状态。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted">
      <summary vsli:raw="Indicates that the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; accepted the message. Once a target has accepted a message, it is wholly owned by the target.">指示 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 接受了消息。 一旦目标已接受消息，它将全部归目标所有。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; declined the message. The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; still owns the message.">指示 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 拒绝了消息。 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 仍然拥有该消息。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; declined the message. The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; still owns the message.  &#xA;  &#xA; Additionally, the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; will decline all future messages sent by the source.">指示 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 拒绝了消息。 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 仍然拥有该消息。  
  
此外，<see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 将拒绝源发送的所有将来消息。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; tried to accept the message from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;, but the message was no longer available.">指示 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 试图接收来自 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 的消息，但该消息不再可用。</summary>
    </member>
    <member name="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; postponed the message for potential consumption at a later time.  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; still owns the message.">指示 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 因稍后的潜在能耗推迟了消息。  
  
<see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 仍然拥有该消息。</summary>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions">
      <summary vsli:raw="Provides options used to configure the processing performed by dataflow blocks that process each message through the invocation of a user-provided delegate. These are dataflow blocks such as  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ActionBlock`1&quot; /&gt; and  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">提供选项，用于配置数据流块执行的处理，这些块通过调用用户提供的委托处理每条消息。 这些是 <see cref="T:System.Threading.Tasks.Dataflow.ActionBlock`1" /> 和 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 等数据流块。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.MaxDegreeOfParallelism">
      <summary vsli:raw="Gets the maximum number of messages that may be processed by the block concurrently.">获取块可能同时处理的最大消息数目。</summary>
      <returns vsli:raw="The maximum number of messages.">最大消息数。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions.SingleProducerConstrained">
      <summary vsli:raw="Gets whether code using the dataflow block is constrained to one producer at a time.">获取是否一次使用数据流块将代码受限于某个制造者。</summary>
      <returns vsli:raw="Returns  &lt;see cref=&quot;T:System.Boolean&quot; /&gt;.">返回 <see cref="T:System.Boolean" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions">
      <summary vsli:raw="Provides options used to configure the processing performed by dataflow blocks that group together multiple messages. These are dataflow blocks such as &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt; and  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.BatchBlock`1&quot; /&gt;.">提供选项，用于配置数据流块执行的处理，这些块对多条消息分组。 这些是 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" /> 和 <see cref="T:System.Threading.Tasks.Dataflow.BatchBlock`1" /> 等数据流块。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions&quot; /&gt;.">初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions" />。</summary>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.Greedy">
      <summary vsli:raw="Gets or sets the Boolean value to use to determine whether to greedily consume offered messages.">获取或设置用于确定是否任意使用提供的消息的 Boolean 值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to greedily consume offered messages; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">贪婪使用所提供的消息，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions.MaxNumberOfGroups">
      <summary vsli:raw="Gets or sets the maximum number of groups that should be generated by the block.">获取或设置块产生的最大组数。</summary>
      <returns vsli:raw="The maximum number of groups.">最大用户数。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IDataflowBlock">
      <summary vsli:raw="Represents a dataflow block.">表示数据流块。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">通知 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />，告知其不应该生成任何更多的消息也不应使用任何更多的延迟消息。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">导致 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下完成。</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">导致此错误的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion">
      <summary vsli:raw="Gets a  &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">获取 <see cref="T:System.Threading.Tasks.Task" />，其表示数据流块的操作和完成。</summary>
      <returns vsli:raw="The task.">任务。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2">
      <summary vsli:raw="Represents a dataflow block that is both a target for data and a source of data.">表示同时为数据的目标和源的数据流块。</summary>
      <typeparam name="TInput" vsli:raw="Specifies the type of data accepted by the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2&quot; /&gt;.">指定接受的数据的类型  <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" /> 。</typeparam>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data supplied by the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2&quot; /&gt;.">指定提供的数据类型  <see cref="T:System.Threading.Tasks.Dataflow.IPropagatorBlock`2" /> 。</typeparam>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1">
      <summary vsli:raw="Represents a dataflow block that supports receiving messages without linking.">表示数据流块，其支持在不链接的情况下接收消息。</summary>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data supplied by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">指定 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 提供的数据类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收可用输出项。</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">为使值得到检索，必须成功传递值的谓词。  <paramref name="filter" /> 可能是 <see langword="null" /> ，在此情况下，所有项均将通过。</param>
      <param name="item" vsli:raw="The item received from the source.">从源中检索到的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收项，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1.TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收所有可用项。</summary>
      <param name="items" vsli:raw="The items received from the source.">从源中接收的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收一个或多个项目，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ISourceBlock`1">
      <summary vsli:raw="Represents a dataflow block that is a source of data.">表示作为数据源的数据流块。</summary>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data supplied by the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">指定提供的数据类型  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以接受并使用以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">要使用的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">占用消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功使用该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The messageHeader is not valid.">MessageHeader 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The target is &lt;see langword=&quot;null&quot; /&gt;.">目标是 <see langword="null" />。</exception>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be null.">所使用的消息的值。 这可能对应于一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例，该实例不同于之前保留并作为 <paramref name="messageHeader" /> 传递到 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 的实例。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 必须使用返回值而不是通过 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 传递为 <paramref name="messageValue" /> 的值。  
  
如果所请求的消息不可用，则返回值将是 null。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">将 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 链接到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">要将此源连接到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 实例，用于配置链接。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> 为 null （在 Visual Basic 中为 Nothing）或 <paramref name="linkOptions" /> 为 null（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">根据调用 Dispose 将取消与目标中源的链接的 IDisposable。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以发布由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 发布的以前已保留的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">要发布的已保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">发布之前保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />未保留消息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以保留以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">要保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功保留该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.ITargetBlock`1">
      <summary vsli:raw="Represents a dataflow block that is a target for data.">表示作为数据目标的数据流块。</summary>
      <typeparam name="TInput" vsli:raw="Specifies the type of data accepted by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">指定 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 接受的数据类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">向 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 提供消息，向目标提供使用和延迟消息的机会。</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">表示要提供的消息的标头的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例。</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">要提供的消息值。</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be null.">提供消息的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 这可能为 null。</param>
      <param name="consumeToAccept" vsli:raw="Set to &lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">为使用此消息，设置为 <see langword="true" />，以指示目标于返回 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 前在进行对 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 调用间同步调用 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> 无效。  
  
或者，如果被提供了非 null <paramref name="consumeToAccept" />，则 <paramref name="source" /> 只能为 true。</exception>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but source was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">所提供消息的状态。 如果消息为该目标接受，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，将返回，并且源不应再使用提供的消息，因为其现在归目标所有。 如果消息因该目标延迟，则将以通知的形式返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，该通知是目标稍后可能会尝试使用或保留消息的通知；同时，源仍拥有消息并将其提供给其他块。  
  
如果目标应已推迟消息，但源是 <see langword="null" />，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。  
  
如果尝试了接受此则消息但由于将消息交付给另一目标或放弃该消息的源而错过该消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。  
  
如果目标选择不接受消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果源选择不接受该消息并将从不从此源接受另一则消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`2">
      <summary vsli:raw="Provides a dataflow block that joins across multiple dataflow sources, not necessarily of the same type, waiting for one item to arrive for each type before they're all released together as a tuple consisting of one item per type.">提供一个数据流块，该块联接多个数据流源，这些数据流源并不一定属于相同类型，会等待每个类型的一个项目到达，然后才作为包含每个类型的项目的元组完全释放。</summary>
      <typeparam name="T1" vsli:raw="Specifies the type of data accepted by the block's first target.">指定由块的第一个目标接受的数据类型。</typeparam>
      <typeparam name="T2" vsli:raw="Specifies the type of data accepted by the block's second target.">指定由块的第二个目标接受的数据类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt;.">初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt;.">初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />。</summary>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt;.">用来配置此 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">通知 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />，告知其不应该生成任何更多的消息也不应使用任何更多的延迟消息。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">将 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 链接到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target" vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">将 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 链接到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 实例，用于配置链接。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing），或者 <paramref name="linkOptions" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">根据调用 Dispose 将取消与目标中源的链接的 IDisposable。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">导致 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下完成。</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">导致此错误的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}},System.Boolean@)">
      <summary vsli:raw="Passes the ownership of the message identified by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; from this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; instance to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">将 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 标识的消息的所有权从此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 实例传递到 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be consumed.">要使用的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be consumed.">要为其使用消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed. &lt;see langword=&quot;false&quot; /&gt; otherwise.">如果成功使用消息，则为 <see langword="true" />。 否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to this method. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;. If the message requested is not available, the return value is &lt;see langword=&quot;null&quot; /&gt; (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">所使用的消息的值。 这可能对应于一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例，该实例不同于之前保留并作为 <paramref name="messageHeader" /> 传递给此方法的实例。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 必须使用返回值而不是作为 <paramref name="messageValue" /> 传递到 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 的值。 如果所请求的消息不可用，则返回值将是 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <summary vsli:raw="Releases the right to pass the ownership of the message identified by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; from this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">释放将 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 标识的消息的所有权从此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 传递到 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 的权限。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message.">保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that currently holds the reservation.">当前保存保留项的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />未保留消息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1}})">
      <summary vsli:raw="Reserves the right to pass the ownership of the message identified by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; from this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">保留将 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 标识的消息的所有权从此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 传递到 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 的权限。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be reserved.">要保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be reserved.">要为其保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功保留该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">返回一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</summary>
      <returns vsli:raw="A string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceive(System.Predicate{System.Tuple{`0,`1}},System.Tuple{`0,`1}@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收可用输出项。</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">为使值得到检索，必须成功传递值的谓词。  <paramref name="filter" /> 可能是 <see langword="null" /> ，在此情况下，所有项均将通过。</param>
      <param name="item" vsli:raw="The item received from the source.">从源中检索到的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收项，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`2.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1}}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收所有可用项。</summary>
      <param name="items" vsli:raw="The items received from the source.">从源中接收的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收一个或多个项目，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">获取 <see cref="T:System.Threading.Tasks.Task" />，其表示数据流块的操作和完成。</summary>
      <returns vsli:raw="The task.">任务。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">获取可从此块中接收的输出项的数量。</summary>
      <returns vsli:raw="The number of output items.">输出项数。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target1">
      <summary vsli:raw="Gets a target that may be used to offer messages of the first type.">获取可用于提供第一种类型的消息的目标。</summary>
      <returns vsli:raw="The target.">目标。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`2.Target2">
      <summary vsli:raw="Gets a target that may be used to offer messages of the second type.">获取可用于提供第二种类型的消息的目标。</summary>
      <returns vsli:raw="The target.">目标。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.JoinBlock`3">
      <summary vsli:raw="Provides a dataflow block that joins across multiple dataflow sources, which are not necessarily of the same type, waiting for one item to arrive for each type before they're all released together as a tuple that contains one item per type.">提供一个数据流块，它联接多个数据流源，这些数据流源并不一定属于相同类型，会等待每个类型的一个项目到达，然后才作为包含每个类型的项目的元组释放。</summary>
      <typeparam name="T1" vsli:raw="Specifies the type of data accepted by the block's first target.">指定由块的第一个目标接受的数据类型。</typeparam>
      <typeparam name="T2" vsli:raw="Specifies the type of data accepted by the block's second target.">指定由块的第二个目标接受的数据类型。</typeparam>
      <typeparam name="T3" vsli:raw="Specifies the type of data accepted by the block's third target.">指定由块的第三个目标接受的数据类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`3&quot; /&gt;.">初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.#ctor(System.Threading.Tasks.Dataflow.GroupingDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`3&quot; /&gt;.">初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`3" />。</summary>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.JoinBlock`2&quot; /&gt;.">用来配置此 <see cref="T:System.Threading.Tasks.Dataflow.JoinBlock`2" />的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">通知 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />，告知其不应该生成任何更多的消息也不应使用任何更多的延迟消息。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the   source block to the specified target block.">将源块链接到指定的目标块。</summary>
      <param name="target" vsli:raw="The target block to which to connect this source.">要将此源连接到的目标块。</param>
      <param name="linkOptions" vsli:raw="An object that configures the link.">一个对象，用于配置链接。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;linkOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="linkOptions" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="A disposable object that unlinks the source from the target when its &lt;see cref=&quot;M:System.IDisposable.Dispose&quot; /&gt; method is called.">一个可释放对象，当目标的 <see cref="M:System.IDisposable.Dispose" /> 方法被调用时，该对象会断开源与目标的链接。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">导致 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下完成。</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">导致此错误的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}},System.Boolean@)">
      <summary vsli:raw="Passes the ownership of the message identified by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; from this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; instance to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">将 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 标识的消息的所有权从此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 实例传递到 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be consumed.">要使用的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be consumed.">要为其使用消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed. &lt;see langword=&quot;false&quot; /&gt; otherwise.">如果成功使用消息，则为 <see langword="true" />。 否则为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to this method. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;. If the message requested is not available, the return value is &lt;see langword=&quot;null&quot; /&gt; (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">所使用的消息的值。 这可能对应于一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例，该实例不同于之前保留并作为 <paramref name="messageHeader" /> 传递给此方法的实例。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 必须使用返回值而不是作为 <paramref name="messageValue" /> 传递到 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 的值。 如果所请求的消息不可用，则返回值将是 <see langword="null" />（在 Visual Basic 中为 <see langword="Nothing" />）。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <summary vsli:raw="Releases the right to pass the ownership of the message identified by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; from this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">释放将 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 标识的消息的所有权从此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 传递到 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 的权限。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message.">保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; that currently holds the reservation.">当前保存保留项的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing）。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />未保留消息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.System#Threading#Tasks#Dataflow#ISourceBlock{System#Tuple{T1@T2@T3}}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{System.Tuple{`0,`1,`2}})">
      <summary vsli:raw="Reserves the right to pass the ownership of the message identified by the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; from this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;.">保留将 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 标识的消息的所有权从此 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 传递到 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 的权限。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message that is to be reserved.">要保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; for which the message is to be reserved.">要为其保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; (Nothing in Visual Basic).">
        <paramref name="target" /> 为 <see langword="null" />（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功保留该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">返回一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</summary>
      <returns vsli:raw="A string that represents the formatted name of this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceive(System.Predicate{System.Tuple{`0,`1,`2}},System.Tuple{`0,`1,`2}@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收可用输出项。</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">为使值得到检索，必须成功传递值的谓词。  <paramref name="filter" /> 可能是 <see langword="null" /> ，在此情况下，所有项均将通过。</param>
      <param name="item" vsli:raw="The item received from the source.">从源中检索到的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收项，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.JoinBlock`3.TryReceiveAll(System.Collections.Generic.IList{System.Tuple{`0,`1,`2}}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收所有可用项。</summary>
      <param name="items" vsli:raw="The items received from the source.">从源中接收的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收一个或多个项目，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">获取 <see cref="T:System.Threading.Tasks.Task" />，其表示数据流块的操作和完成。</summary>
      <returns vsli:raw="The task.">任务。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">获取可从此块中接收的输出项的数量。</summary>
      <returns vsli:raw="The number of output items.">输出项数。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target1">
      <summary vsli:raw="Gets a target that may be used to offer messages of the first type.">获取可用于提供第一种类型的消息的目标。</summary>
      <returns vsli:raw="The target.">目标。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target2">
      <summary vsli:raw="Gets a target that may be used to offer messages of the second type.">获取可用于提供第二种类型的消息的目标。</summary>
      <returns vsli:raw="The target.">目标。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.JoinBlock`3.Target3">
      <summary vsli:raw="Gets a target that may be used to offer messages of the third type.">获取可用于提供第三种类型消息的目标。</summary>
      <returns vsli:raw="The target.">目标。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformBlock`2">
      <summary vsli:raw="Provides a dataflow block that invokes a provided &lt;see cref=&quot;T:System.Func`2&quot; /&gt; delegate for every data element received.">提供数据流块，其调用为每个接收的数据提供的 <see cref="T:System.Func`2" /> 委托。</summary>
      <typeparam name="TInput" vsli:raw="Specifies the type of data received and operated on by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">指定通过此 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 接收和操作的数据类型。</typeparam>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data output by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">指定此输出的数据的类型  <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Func`2&quot; /&gt;.">使用指定的 <see cref="T:System.Func`2" /> 初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />。</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received.">使用接收的各个数据元素调用的函数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,`1},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Func`2&quot; /&gt; and &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">使用指定的 <see cref="T:System.Func`2" /> 和 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> 初始化新 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />。</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received.">使用接收的各个数据元素调用的函数。</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">用来配置此 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt; with the specified &lt;see cref=&quot;T:System.Func`2&quot; /&gt;.">使用指定的 <see cref="T:System.Func`2" /> 初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />。</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received.">使用接收的各个数据元素调用的函数。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Func`2&quot; /&gt; and &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">使用指定的 <see cref="T:System.Func`2" /> 和 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" /> 初始化新 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" />。</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received.">使用接收的各个数据元素调用的函数。</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformBlock`2&quot; /&gt;.">用来配置此 <see cref="T:System.Threading.Tasks.Dataflow.TransformBlock`2" /> 的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">通知 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />，告知其不应该生成任何更多的消息也不应使用任何更多的延迟消息。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">将 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 链接到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">要将此源连接到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 实例，用于配置链接。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> 为 null （在 Visual Basic 中为 Nothing）或 <paramref name="linkOptions" /> 为 null（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">根据调用 Dispose 将取消与目标中源的链接的 IDisposable。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">导致 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下完成。</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">导致出错的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以接受并使用以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">要使用的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">占用消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功使用该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">所使用的消息的值。 这可能对应于一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例，该实例不同于之前保留并作为 <paramref name="messageHeader" /> 传递到 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 的实例。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 必须使用返回值而不是通过 <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 传递为 <paramref name="messageValue" /> 的值。  
  
如果所需消息不可的，则返回值将是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以发布以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 保留的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">要发布的已保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">发布之前保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />未保留消息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以保留以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">要保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功保留该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">向 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 提供消息，向目标提供使用和延迟消息的机会。</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">表示要提供的消息的标头的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例。</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">要提供的消息值。</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">提供消息的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 这可能是 <see langword="null" />。</param>
      <param name="consumeToAccept" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the target must call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">为使用此消息，目标必须于返回 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 前在进行对 <see cref="M:System.Threading.Tasks.Dataflow.TransformBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 调用间同步调用 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，则为 <see langword="true" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> 无效。  
  
或者，如果被提供了非 null <paramref name="consumeToAccept" />，则 <paramref name="source" /> 只能为 true。</exception>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed but source was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">所提供消息的状态。 如果消息为该目标接受，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，将返回，并且源不应再使用提供的消息，因为其现在归目标所有。 如果消息因该目标延迟，则将以通知的形式返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，该通知是目标稍后可能会尝试使用或保留消息的通知；同时，源仍拥有消息并将其提供给其他块。  
  
如果目标被推迟，但源为 <see langword="null" />，则返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。  
  
如果尝试了接受此则消息但由于将消息交付给另一目标或放弃该消息的源而错过该消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。  
  
如果目标选择不接受消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果源选择不接受该消息并将从不从此源接受另一则消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">返回一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收可用输出项。</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">为使值得到检索，必须成功传递值的谓词。  <paramref name="filter" /> 可能是 <see langword="null" /> ，在此情况下，所有项均将通过。</param>
      <param name="item" vsli:raw="The item received from the source.">从源中检索到的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收项，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收所有可用项。</summary>
      <param name="items" vsli:raw="The items received from the source.">从源中接收的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收一个或多个项目，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">获取 <see cref="T:System.Threading.Tasks.Task" />，其表示数据流块的操作和完成。</summary>
      <returns vsli:raw="The task.">任务。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.InputCount">
      <summary vsli:raw="Gets the number of input items waiting to be processed by this block.">获取等待被此代码块处理的输入项的数目。</summary>
      <returns vsli:raw="The number of input items.">输入项数。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformBlock`2.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">获取可从此块中接收的输出项的数量。</summary>
      <returns vsli:raw="The number of output items.">输出项数。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2">
      <summary vsli:raw="Provides a dataflow block that invokes a provided &lt;see cref=&quot;T:System.Func`2&quot; /&gt; delegate for every data element received.">提供数据流块，其调用为每个接收的数据提供的 <see cref="T:System.Func`2" /> 委托。</summary>
      <typeparam name="TInput" vsli:raw="Specifies the type of data received and operated on by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">指定通过此 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 接收和操作的数据类型。</typeparam>
      <typeparam name="TOutput" vsli:raw="Specifies the type of data output by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">指定此 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 生成的数据输出类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt; with the specified function.">使用指定的函数初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />。</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received. All of the data from the returned &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; will be made available as output from this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">使用接收的各个数据元素调用的函数。 返回的 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中的所有数据都以此 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 中输出的形式可用。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Collections.Generic.IEnumerable{`1}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt; with the specified function and &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">初始化指定函数和 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 的新 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />。</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received. All of the data from the returned in the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; will be made available as output from this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">使用接收的各个数据元素调用的函数。 返回到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中的所有数据将作为此 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 的输出进行使用。</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">用来配置此 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt; with the specified function.">使用指定的函数初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />。</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received. All of the data asynchronously returned in the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; will be made available as output from this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">使用接收的各个数据元素调用的函数。 异步返回到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中的所有数据将作为此 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 的输出进行使用。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.#ctor(System.Func{`0,System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{`1}}},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt; with the specified function and &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions&quot; /&gt;.">初始化指定函数和 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 的新 <see cref="T:System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions" />。</summary>
      <param name="transform" vsli:raw="The function to invoke with each data element received. All of the data asynchronously returned in the &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; will be made available as output from this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">使用接收的各个数据元素调用的函数。 异步返回到 <see cref="T:System.Collections.Generic.IEnumerable`1" /> 中的所有数据将作为此 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" /> 的输出进行使用。</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.TransformManyBlock`2&quot; /&gt;.">用来配置此 <see cref="T:System.Threading.Tasks.Dataflow.TransformManyBlock`2" />的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;transform&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="transform" /> 为 <see langword="null" />。  
  
- 或 - 
<paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">通知 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />，告知其不应该生成任何更多的消息也不应使用任何更多的延迟消息。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">将 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 链接到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">要将此源连接到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 实例，用于配置链接。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> 为 null （在 Visual Basic 中为 Nothing）或 <paramref name="linkOptions" /> 为 null（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">根据调用 Dispose 将取消与目标中源的链接的 IDisposable。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a  &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">导致 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下完成。</summary>
      <param name="exception" vsli:raw="The &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">导致出错的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以接受并使用以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">要使用的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">占用消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功使用该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through OfferMessage &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">所使用的消息的值。 这可能对应于一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例，该实例不同于之前保留并作为 <paramref name="messageHeader" /> 传递到 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 的实例。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 必须使用返回值而不是通过 OfferMessage <see cref="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 传递为 <paramref name="messageValue" /> 的值。  
  
如果所需消息不可的，则返回值将是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以发布由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 发布的以前已保留的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">要发布的已保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">发布之前保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />未保留消息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ISourceBlock{TOutput}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`1})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以保留以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">要保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功保留该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">向 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 提供消息，向目标提供使用和延迟消息的机会。</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">表示要提供的消息的标头的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例。</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">要提供的消息值。</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">提供消息的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 这可能是 <see langword="null" />。</param>
      <param name="consumeToAccept" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the target must call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">为使用此消息，目标必须于返回 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 前在进行对 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用间同步调用 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，则为 <see langword="true" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> 无效。  
  
- 或 - 
 如果使用非 null <paramref name="consumeToAccept" /> 提供，则 <paramref name="source" /> 可能仅为 true。</exception>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, as it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed but source was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">所提供消息的状态。 如果目标接受该消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，并且源不应再使用提供的消息，因为它现在归目标所有。 如果消息因该目标延迟，则将以通知的形式返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，该通知是目标稍后可能会尝试使用或保留消息的通知；同时，源仍拥有消息并将其提供给其他块。  
  
如果目标被推迟，但源为 <see langword="null" />，则返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。  
  
如果尝试了接受此则消息但由于将消息交付给另一目标或放弃该消息的源而错过该消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。  
  
如果目标选择不接受消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果源选择不接受该消息并将从不从此源接受另一则消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">返回一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceive(System.Predicate{`1},`1@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收可用输出项。</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">为使值得到检索，必须成功传递值的谓词。  <paramref name="filter" /> 可能是 <see langword="null" /> ，在此情况下，所有项均将通过。</param>
      <param name="item" vsli:raw="The item received from the source.">从源中检索到的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收项，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.TransformManyBlock`2.TryReceiveAll(System.Collections.Generic.IList{`1}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收所有可用项。</summary>
      <param name="items" vsli:raw="The items received from the source.">从源中接收的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收一个或多个项目，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">获取 <see cref="T:System.Threading.Tasks.Task" />，其表示数据流块的操作和完成。</summary>
      <returns vsli:raw="The task.">任务。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.InputCount">
      <summary vsli:raw="Gets the number of input items waiting to be processed by this block.">获取等待被此代码块处理的输入项的数目。</summary>
      <returns vsli:raw="The number of input items.">输入项数。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.TransformManyBlock`2.OutputCount">
      <summary vsli:raw="Gets the number of output items available to be received from this block.">获取可从此块中接收的输出项的数量。</summary>
      <returns vsli:raw="The number of output items.">输出项数。</returns>
    </member>
    <member name="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1">
      <summary vsli:raw="Provides a buffer for receiving and storing at most one element in a network of dataflow blocks.">在数据流块网络中为接收和存储最多一个元素提供缓冲区。</summary>
      <typeparam name="T" vsli:raw="Specifies the type of the data buffered by this dataflow block.">指定由数据流块缓冲的数据类型。</typeparam>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0})">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1&quot; /&gt;.">初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />。</summary>
      <param name="cloningFunction" vsli:raw="The function to use to clone the data when offered to other blocks.">用以在提供给其他块时克隆数据的函数。</param>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.#ctor(System.Func{`0,`0},System.Threading.Tasks.Dataflow.DataflowBlockOptions)">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1&quot; /&gt; with the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowBlockOptions&quot; /&gt;.">使用指定的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowBlockOptions" /> 初始化新的 <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />。</summary>
      <param name="cloningFunction" vsli:raw="The function to use to clone the data when offered to other blocks.">用以在提供给其他块时克隆数据的函数。</param>
      <param name="dataflowBlockOptions" vsli:raw="The options with which to configure this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1&quot; /&gt;.">用来配置此 <see cref="T:System.Threading.Tasks.Dataflow.WriteOnceBlock`1" />的选项。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;dataflowBlockOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dataflowBlockOptions" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Complete">
      <summary vsli:raw="Signals to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; that it should not accept nor produce any more messages nor consume any more postponed messages.">通知 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" />，告知其不应该生成任何更多的消息也不应使用任何更多的延迟消息。</summary>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.LinkTo(System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Threading.Tasks.Dataflow.DataflowLinkOptions)">
      <summary vsli:raw="Links the  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; to the specified  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; .">将 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> 链接到指定的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</summary>
      <param name="target" vsli:raw="The  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to which to connect this source.">要将此源连接到的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="linkOptions" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowLinkOptions&quot; /&gt; instance that configures the link.">
        <see cref="T:System.Threading.Tasks.Dataflow.DataflowLinkOptions" /> 实例，用于配置链接。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;target&quot; /&gt; is null (Nothing in Visual Basic) or  &lt;paramref name=&quot;linkOptions&quot; /&gt; is null (Nothing in Visual Basic).">
        <paramref name="target" /> 为 null （在 Visual Basic 中为 Nothing）或 <paramref name="linkOptions" /> 为 null（在 Visual Basic 中为 Nothing）。</exception>
      <returns vsli:raw="An IDisposable that, upon calling Dispose, will unlink the source from the target.">根据调用 Dispose 将取消与目标中源的链接的 IDisposable。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)">
      <summary vsli:raw="Causes the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; to complete in a &lt;see cref=&quot;F:System.Threading.Tasks.TaskStatus.Faulted&quot; /&gt; state.">导致 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 在 <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> 状态下完成。</summary>
      <param name="exception" vsli:raw="The  &lt;see cref=&quot;T:System.Exception&quot; /&gt; that caused the faulting.">导致此错误的 <see cref="T:System.Exception" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;exception&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="exception" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#IReceivableSourceBlock{T}#TryReceiveAll(System.Collections.Generic.IList{`0}@)">
      <summary vsli:raw="Attempts to synchronously receive all available items from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收所有可用项。</summary>
      <param name="items" vsli:raw="The items received from the source.">从源中接收的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more items could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收一个或多个项目，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to accept and consume a &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; previously offered by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以接受并使用以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being consumed.">要使用的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; consuming the message.">占用消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <param name="messageConsumed" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully consumed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功使用该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The value of the consumed message. This may correspond to a different  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance than was previously reserved and passed as the &lt;paramref name=&quot;messageHeader&quot; /&gt; to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt;. The consuming &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; must use the returned value instead of the value passed as &lt;paramref name=&quot;messageValue&quot; /&gt; through &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;.  &#xA;  &#xA; If the message requested is not available, the return value will be &lt;see langword=&quot;null&quot; /&gt;.">所使用的消息的值。 这可能对应于一个 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例，该实例不同于之前保留并作为 <paramref name="messageHeader" /> 传递到 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 的实例。 使用的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 必须使用返回值而不是通过 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 传递为 <paramref name="messageValue" /> 的值。  
  
如果所需消息不可的，则返回值将是 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReleaseReservation(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to release a previously reserved &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以发布由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 发布的以前已保留的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the reserved message being released.">要发布的已保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; releasing the message it previously reserved.">发布之前保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; did not have the message reserved.">
        <paramref name="target" />未保留消息。</exception>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ISourceBlock{T}#ReserveMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0})">
      <summary vsli:raw="Called by a linked &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; to reserve a previously offered &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; by this &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt;.">由链接的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 调用，以保留以前由此 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 提供的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。</summary>
      <param name="messageHeader" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; of the message being reserved.">要保留的消息的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" />。</param>
      <param name="target" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt; reserving the message.">保留消息的 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.">
        <paramref name="messageHeader" /> 无效。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="target" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was successfully reserved; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已成功保留该消息，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{T}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)">
      <summary vsli:raw="Offers a message to the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ITargetBlock`1&quot; /&gt;, giving the target the opportunity to consume or postpone the message.">向 <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> 提供消息，向目标提供使用和延迟消息的机会。</summary>
      <param name="messageHeader" vsli:raw="A &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.DataflowMessageHeader&quot; /&gt; instance that represents the header of the message being offered.">表示要提供的消息的标头的 <see cref="T:System.Threading.Tasks.Dataflow.DataflowMessageHeader" /> 实例。</param>
      <param name="messageValue" vsli:raw="The value of the message being offered.">要提供的消息值。</param>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.ISourceBlock`1&quot; /&gt; offering the message. This may be &lt;see langword=&quot;null&quot; /&gt;.">提供消息的 <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />。 这可能是 <see langword="null" />。</param>
      <param name="consumeToAccept" vsli:raw="Set to &lt;see langword=&quot;true&quot; /&gt; to instruct the target to call &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)&quot; /&gt; synchronously during the call to &lt;see cref=&quot;M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)&quot; /&gt;, prior to returning &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt;, in order to consume the message.">为使用此消息，设置为 <see langword="true" />，以指示目标于返回 <see cref="M:System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)" /> 前在进行对 <see cref="M:System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)" /> 调用间同步调用 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The  &lt;paramref name=&quot;messageHeader&quot; /&gt; is not valid.  &#xA;  &#xA; -or- &lt;paramref name=&quot;consumeToAccept&quot; /&gt; may only be true if provided with a non-null &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="messageHeader" /> 无效。  
  
或者，如果被提供了非 null <paramref name="consumeToAccept" />，则 <paramref name="source" /> 只能为 true。</exception>
      <returns vsli:raw="The status of the offered message. If the message was accepted by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted&quot; /&gt; is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed&quot; /&gt; is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  &#xA;  &#xA; If the target would have otherwise postponed message, but &lt;paramref name=&quot;source&quot; /&gt; was &lt;see langword=&quot;null&quot; /&gt;, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is instead returned.  &#xA;  &#xA; If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable&quot; /&gt; is returned.  &#xA;  &#xA; If the target chose not to accept the message, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined&quot; /&gt; is returned. If the target chose not to accept the message and will never accept another message from this source, &lt;see cref=&quot;F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently&quot; /&gt; is returned.">所提供消息的状态。 如果消息为该目标接受，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted" />，将返回，并且源不应再使用提供的消息，因为其现在归目标所有。 如果消息因该目标延迟，则将以通知的形式返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed" />，该通知是目标稍后可能会尝试使用或保留消息的通知；同时，源仍拥有消息并将其提供给其他块。  
  
如果目标应已推迟消息，但是 <paramref name="source" /> 是 <see langword="null" />，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" /> 替换。  
  
如果尝试了接受此则消息但由于将消息交付给另一目标或放弃该消息的源而错过该消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable" />。  
  
如果目标选择不接受消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined" />。 如果源选择不接受该消息并将从不从此源接受另一则消息，则将返回 <see cref="F:System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently" />。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.ToString">
      <summary vsli:raw="Returns a string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">返回一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</summary>
      <returns vsli:raw="A string that represents the formatted name of this  &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IDataflowBlock&quot; /&gt; instance.">一个字符串，该字符串表示此 <see cref="T:System.Threading.Tasks.Dataflow.IDataflowBlock" /> 实例的格式化名称。</returns>
    </member>
    <member name="M:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.TryReceive(System.Predicate{`0},`0@)">
      <summary vsli:raw="Attempts to synchronously receive an available output item from the &lt;see cref=&quot;T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&quot; /&gt;.">从 <see cref="T:System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1" /> 中尝试同步接收可用输出项。</summary>
      <param name="filter" vsli:raw="The predicate value must successfully pass in order for it to be received.  &lt;paramref name=&quot;filter&quot; /&gt; may be &lt;see langword=&quot;null&quot; /&gt;, in which case all items will pass.">为使值得到检索，必须成功传递值的谓词。  <paramref name="filter" /> 可能是 <see langword="null" /> ，在此情况下，所有项均将通过。</param>
      <param name="item" vsli:raw="The item received from the source.">从源中检索到的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be received; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以接收项，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Threading.Tasks.Dataflow.WriteOnceBlock`1.Completion">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task&quot; /&gt; that represents the asynchronous operation and completion of the dataflow block.">获取 <see cref="T:System.Threading.Tasks.Task" />，其表示数据流块的操作和完成。</summary>
      <returns vsli:raw="The task.">任务。</returns>
    </member>
  </members>
</doc>
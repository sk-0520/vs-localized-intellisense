<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary>Proporciona información sobre un <see cref="T:System.Diagnostics.StackFrame" />, que representa una llamada de función en la pila de llamadas del subproceso actual.</summary>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary>Define el valor que se devuelve desde el método <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" /> o <see cref="M:System.Diagnostics.StackFrame.GetILOffset" /> cuando se desconoce el desplazamiento nativo o de Lenguaje Intermedio de Microsoft (MSIL). Este campo es constante.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackFrame" />.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackFrame" />, mientras se inicializa la propiedad, y opcionalmente captura información de origen.</summary>
      <param name="needFileInfo" />
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackFrame" /> que corresponde a un marco situado encima del marco de pila actual.</summary>
      <param name="skipFrames">Número de marcos por encima de la pila que se va a omitir.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackFrame" /> que corresponde a un marco situado encima del marco de pila actual, y opcionalmente captura información de origen.</summary>
      <param name="skipFrames">Número de marcos por encima de la pila que se va a omitir.</param>
      <param name="needFileInfo" />
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackFrame" /> que contiene únicamente el nombre de archivo y el número de línea especificados.</summary>
      <param name="fileName">Nombre del archivo.</param>
      <param name="lineNumber">Número de línea del archivo especificado.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackFrame" /> que contiene únicamente el nombre de archivo, el número de línea y el número de columna especificados.</summary>
      <param name="fileName">Nombre del archivo.</param>
      <param name="lineNumber">Número de línea del archivo especificado.</param>
      <param name="colNumber">Número de columna del archivo especificado.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary>Obtiene el número de columna del archivo que contiene el código que se está ejecutando. Esta información se extrae normalmente de los símbolos de depuración del ejecutable.</summary>
      <returns>Número de columna del archivo, o 0 (cero) si no se puede determinar el número de columna del archivo.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary>Obtiene el número de línea del archivo que contiene el código que se está ejecutando. Esta información se extrae normalmente de los símbolos de depuración del ejecutable.</summary>
      <returns>Número de línea del archivo, o 0 (cero) si no se puede determinar el número de línea del archivo.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary>Obtiene el nombre de archivo que contiene el código que se está ejecutando. Esta información se extrae normalmente de los símbolos de depuración del ejecutable.</summary>
      <returns>Nombre del archivo o <see langword="null" /> si no es posible determinarlo.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary>Obtiene el desplazamiento desde el inicio del código del Lenguaje intermedio de Microsoft (MSIL) del método que se está ejecutando. Este desplazamiento puede ser aproximado en función de si el compilador Just-In-Time (JIT) está generando código de depuración. La generación de esta información de depuración está controlada por <see cref="T:System.Diagnostics.DebuggableAttribute" />.</summary>
      <returns>Desplazamiento desde el inicio del código MSIL del método que se está ejecutando.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary>Obtiene el método en el que se está ejecutando el marco.</summary>
      <returns>Método en el que se está ejecutando el marco.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary>Obtiene el desplazamiento desde el inicio del código nativo de compilación Just-In-Time (JIT) del método que se está ejecutando. La generación de esta información de depuración está controlada por la clase <see cref="T:System.Diagnostics.DebuggableAttribute" />.</summary>
      <returns>Desplazamiento desde el inicio del código de compilación Just-In-Time (JIT) del método que se está ejecutando.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary>Compila una representación legible del seguimiento de pila.</summary>
      <returns>Representación legible del seguimiento de pila.</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions">
      <summary>Proporciona métodos de extensión para la clase <see cref="T:System.Diagnostics.StackFrame" />, que representa una llamada de función en la pila de llamadas del subproceso actual.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)">
      <summary>Devuelve un puntero a la dirección base de la imagen nativa que está ejecutando este marco de pila.</summary>
      <param name="stackFrame">Marco de pila.</param>
      <returns>Un puntero a la dirección base de la imagen nativa o <see cref="F:System.IntPtr.Zero" /> si tiene como destino .NET Framework.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)">
      <summary>Obtiene un puntero de interfaz al inicio del código nativo para el método que se está ejecutando.</summary>
      <param name="stackFrame">Marco de pila.</param>
      <returns>Un puntero de interfaz al inicio del código nativo para el método que se está ejecutando o <see cref="F:System.IntPtr.Zero" /> si tiene como destino .NET Framework.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)">
      <summary>Indica si hay disponible un desplazamiento desde el inicio del código IL para el método que se está ejecutando.</summary>
      <param name="stackFrame">Marco de pila.</param>
      <returns>
        <see langword="true" /> si el desplazamiento está disponible; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)">
      <summary>Indica si la información sobre el método en el que está ejecutando el marco especificado está disponible o no.</summary>
      <param name="stackFrame">Marco de pila.</param>
      <returns>
        <see langword="true" /> si la información sobre el método en el que está ejecutando el marco actual está disponible; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)">
      <summary>Indica si la imagen nativa está disponible para el marco de pila especificado.</summary>
      <param name="stackFrame">Marco de pila.</param>
      <returns>
        <see langword="true" /> si una imagen nativa está disponible para este marco de pila; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)">
      <summary>Indica si el archivo que contiene el código que está ejecutando el marco de pila especificado está disponible o no.</summary>
      <param name="stackFrame">Marco de pila.</param>
      <returns>
        <see langword="true" /> si el código que se está ejecutando el marco de pila especificado está disponible; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary>Representa un seguimiento de pila, que es una colección ordenada de uno o más marcos de pila.</summary>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary>Define el valor predeterminado para el número de métodos que se van a pasar por alto desde el seguimiento de pila. Este campo es constante.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackTrace" /> a partir del marco del llamador.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackTrace" /> desde el marco del llamador y, opcionalmente, captura información de origen.</summary>
      <param name="fNeedFileInfo">Es <see langword="true" /> para capturar el nombre de archivo y los números de línea y de columna; en caso contrario, es <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackTrace" /> que contiene un solo marco.</summary>
      <param name="frame">Marco que el objeto <see cref="T:System.Diagnostics.StackTrace" /> debe contener.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackTrace" /> mediante el objeto de excepción proporcionado.</summary>
      <param name="e">Objeto de excepción a partir del que se va a generar el seguimiento de la pila.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="e" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackTrace" /> mediante el objeto de excepción que se suministra y, opcionalmente, captura información de origen.</summary>
      <param name="e">Objeto de excepción a partir del que se va a generar el seguimiento de la pila.</param>
      <param name="fNeedFileInfo">Es <see langword="true" /> para capturar el nombre de archivo y los números de línea y de columna; en caso contrario, es <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="e" /> es <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackTrace" /> mediante el objeto de excepción proporcionado y pasa por alto el número de marcos especificado.</summary>
      <param name="e">Objeto de excepción a partir del que se va a generar el seguimiento de la pila.</param>
      <param name="skipFrames">Número de marcos que debe contener la pila para iniciar el seguimiento.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="e" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="skipFrames" /> es negativo.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackTrace" /> mediante el objeto de excepción proporcionado, pasa por alto el número de marcos especificado y, opcionalmente, captura información de origen.</summary>
      <param name="e">Objeto de excepción a partir del que se va a generar el seguimiento de la pila.</param>
      <param name="skipFrames">Número de marcos que debe contener la pila para iniciar el seguimiento.</param>
      <param name="fNeedFileInfo">Es <see langword="true" /> para capturar el nombre de archivo y los números de línea y de columna; en caso contrario, es <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException">El parámetro <paramref name="e" /> es <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="skipFrames" /> es negativo.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackTrace" /> a partir del marco del llamador y pasa por alto el número de marcos especificado.</summary>
      <param name="skipFrames">Número de marcos que debe contener la pila para iniciar el seguimiento.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="skipFrames" /> es negativo.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.StackTrace" /> a partir del marco del llamador, pasa por alto el número de marcos especificado y, opcionalmente, captura información de origen.</summary>
      <param name="skipFrames">Número de marcos que debe contener la pila para iniciar el seguimiento.</param>
      <param name="fNeedFileInfo">Es <see langword="true" /> para capturar el nombre de archivo y los números de línea y de columna; en caso contrario, es <see langword="false" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">El parámetro <paramref name="skipFrames" /> es negativo.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary>Obtiene el marco de pila especificado.</summary>
      <param name="index">Índice del marco de pila solicitado.</param>
      <returns>Marco de pila especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary>Devuelve una copia de todos los marcos de pila del seguimiento de pila actual.</summary>
      <returns>Matriz de tipo <see cref="T:System.Diagnostics.StackFrame" /> que representa las llamadas a función en el marco de pila.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary>Compila una representación legible del seguimiento de pila.</summary>
      <returns>Representación legible del seguimiento de pila.</returns>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary>Obtiene el número de marcos en el seguimiento de pila.</summary>
      <returns>Número de marcos del seguimiento de la pila.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder">
      <summary>Representa un enlazador de símbolos de código administrado.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)">
      <summary>Obtiene la interfaz del lector de símbolos del archivo actual.</summary>
      <param name="importer">Interfaz de importación de metadatos.</param>
      <param name="filename">Nombre del archivo para el que se necesita la interfaz del lector.</param>
      <param name="searchPath">Ruta de búsqueda usada para localizar el archivo de símbolos.</param>
      <returns>Interfaz <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> que lee los símbolos de depuración.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder1">
      <summary>Representa un enlazador de símbolos de código administrado.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder1.GetReader(System.IntPtr,System.String,System.String)">
      <summary>Obtiene la interfaz del lector de símbolos del archivo actual.</summary>
      <param name="importer">
        <see cref="T:System.IntPtr" /> que hace referencia a la interfaz de importación de metadatos.</param>
      <param name="filename">Nombre del archivo para el que se necesita la interfaz del lector.</param>
      <param name="searchPath">Ruta de búsqueda usada para localizar el archivo de símbolos.</param>
      <returns>Interfaz <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" /> que lee los símbolos de depuración.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocument">
      <summary>Representa un documento al que hace referencia un almacén de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.FindClosestLine(System.Int32)">
      <summary>Devuelve la línea más próxima que sea un punto de secuencia, respecto de una línea especificada en el documento actual que puede ser o no un punto de secuencia.</summary>
      <param name="line">Línea especificada del documento.</param>
      <returns>Línea más próxima que sea un punto de secuencia.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetCheckSum">
      <summary>Obtiene la suma de comprobación.</summary>
      <returns>Suma de comprobación.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Obtiene el código fuente incrustado en el documento del intervalo especificado.</summary>
      <param name="startLine">Línea inicial del documento actual.</param>
      <param name="startColumn">Columna inicial del documento actual.</param>
      <param name="endLine">Línea final del documento actual.</param>
      <param name="endColumn">Columna final del documento actual.</param>
      <returns>Código fuente del documento en el intervalo especificado.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.CheckSumAlgorithmId">
      <summary>Obtiene el identificador del algoritmo de suma de comprobación.</summary>
      <returns>GUID que identifica el algoritmo de suma de comprobación. Si no hay suma de comprobación, el valor es cero en todos los casos.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.DocumentType">
      <summary>Obtiene el tipo del documento actual.</summary>
      <returns>Tipo del documento actual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.HasEmbeddedSource">
      <summary>Comprueba si el documento actual está almacenado en el almacén de símbolos.</summary>
      <returns>
        <see langword="true" /> si el documento actual está almacenado en el almacén de símbolos; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.Language">
      <summary>Obtiene el lenguaje del documento actual.</summary>
      <returns>Lenguaje del documento actual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.LanguageVendor">
      <summary>Obtiene el proveedor de lenguaje del documento actual.</summary>
      <returns>Proveedor de lenguaje del documento actual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.SourceLength">
      <summary>Obtiene la longitud, en bytes, del código fuente incrustado.</summary>
      <returns>Longitud del código fuente del documento actual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.URL">
      <summary>Obtiene la URL del documento actual.</summary>
      <returns>URL del documento actual.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary>Representa un documento al que hace referencia un almacén de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary>Establece la información de suma de comprobación.</summary>
      <param name="algorithmId">GUID que representa el identificador del algoritmo.</param>
      <param name="checkSum">Suma de comprobación.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary>Almacena el código fuente sin formato de un documento en el almacén de símbolos.</summary>
      <param name="source">Código fuente del documento representado en forma de bytes sin signo.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolMethod">
      <summary>Representa un método dentro de un almacén de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace">
      <summary>Obtiene el espacio de nombres en el que está definido el método actual.</summary>
      <returns>Espacio de nombres en el que está definido el método actual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>Obtiene el desplazamiento del lenguaje intermedio de Microsoft (MSIL) dentro del método correspondiente a la posición especificada.</summary>
      <param name="document">Documento del que se solicita el desplazamiento.</param>
      <param name="line">Línea del documento correspondiente al desplazamiento.</param>
      <param name="column">Columna del documento correspondiente al desplazamiento.</param>
      <returns>Desplazamiento dentro del documento especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters">
      <summary>Obtiene los parámetros del método actual.</summary>
      <returns>Matriz de parámetros del método actual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>Obtiene una matriz de pares de desplazamiento inicial y final correspondiente a los intervalos del lenguaje intermedio de Microsoft (MSIL) que cubre una posición especificada dentro de este método.</summary>
      <param name="document">Documento del que se solicita el desplazamiento.</param>
      <param name="line">Línea del documento correspondiente a los intervalos.</param>
      <param name="column">Columna del documento correspondiente a los intervalos.</param>
      <returns>Matriz de pares de desplazamiento inicial y final.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)">
      <summary>Devuelve el ámbito léxico más envolvente cuando se especifica un desplazamiento en un método.</summary>
      <param name="offset">Desplazamiento de bytes en el método del ámbito léxico.</param>
      <returns>Ámbito léxico más envolvente para el desplazamiento de bytes especificado en el método.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>Obtiene los puntos de secuencia del método actual.</summary>
      <param name="offsets">Matriz de desplazamientos de bytes desde el principio del método para los puntos de secuencia.</param>
      <param name="documents">Matriz de documentos en los que están ubicados los puntos de secuencia.</param>
      <param name="lines">Matriz de líneas de los documentos en las que están ubicados los puntos de secuencia.</param>
      <param name="columns">Matriz de columnas de los documentos en las que están ubicados los puntos de secuencia.</param>
      <param name="endLines">Matriz de líneas de los documentos en las que finalizan los puntos de secuencia.</param>
      <param name="endColumns">Matriz de columnas de los documentos en las que finalizan los puntos de secuencia.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])">
      <summary>Obtiene las posiciones inicial y final del origen del método actual.</summary>
      <param name="docs">Documentos de origen iniciales y finales.</param>
      <param name="lines">Líneas iniciales y finales de los documentos de origen correspondientes.</param>
      <param name="columns">Columnas iniciales y finales de los documentos de origen correspondientes.</param>
      <returns>
        <see langword="true" /> si se definieron las posiciones; de lo contrario, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.RootScope">
      <summary>Obtiene el ámbito léxico raíz del método actual. Este ámbito abarca el método completo.</summary>
      <returns>Ámbito léxico raíz que engloba todo el método.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount">
      <summary>Obtiene un recuento de los puntos de secuencia del método.</summary>
      <returns>El recuento de los puntos de secuencia del método.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.Token">
      <summary>Obtiene la estructura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> que contiene los metadatos del método actual.</summary>
      <returns>Token de metadatos del método actual.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolNamespace">
      <summary>Representa un espacio de nombres dentro de un almacén de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetNamespaces">
      <summary>Obtiene los miembros secundarios del espacio de nombres actual.</summary>
      <returns>Los miembros secundarios del espacio de nombres actual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetVariables">
      <summary>Obtiene todas las variables definidas en el ámbito global del espacio de nombres actual.</summary>
      <returns>Las variables definidas en el ámbito global del espacio de nombres actual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolNamespace.Name">
      <summary>Obtiene el espacio de nombres actual.</summary>
      <returns>Espacio de nombres actual.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolReader">
      <summary>Representa un lector de símbolos de código administrado.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Obtiene un documento especificado mediante el lenguaje, el proveedor y el tipo.</summary>
      <param name="url">Dirección URL que identifica el documento.</param>
      <param name="language">Lenguaje del documento. Puede especificar este parámetro como <see cref="F:System.Guid.Empty" />.</param>
      <param name="languageVendor">Identidad del proveedor del lenguaje del documento. Puede especificar este parámetro como <see cref="F:System.Guid.Empty" />.</param>
      <param name="documentType">Tipo del documento. Puede especificar este parámetro como <see cref="F:System.Guid.Empty" />.</param>
      <returns>El documento especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocuments">
      <summary>Obtiene una matriz de todos los documentos definidos en el almacén de símbolos.</summary>
      <returns>Una matriz de todos los documentos definidos en el almacén de símbolos.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetGlobalVariables">
      <summary>Obtiene todas las variables globales del módulo.</summary>
      <returns>Una matriz con todas las variables del módulo.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Obtiene un objeto del método del lector de símbolos cuando se especifica el identificador de un método.</summary>
      <param name="method">Símbolo (token) de metadatos del método.</param>
      <returns>Objeto del método del lector de símbolos para el identificador de método especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
      <summary>Obtiene un objeto del método del lector de símbolos cuando se especifica el identificador de un método y su versión de edición y continuación.</summary>
      <param name="method">Símbolo (token) de metadatos del método.</param>
      <param name="version">Versión de edición y continuación del método.</param>
      <returns>Objeto del método del lector de símbolos para el identificador de método especificado.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary>Obtiene un objeto del método del lector de símbolos que contiene una posición especificada en un documento.</summary>
      <param name="document">Documento en el que está ubicado el método.</param>
      <param name="line">Posición de la línea dentro del documento. Las líneas están numeradas, comenzando por 1.</param>
      <param name="column">Posición de la columna dentro del documento. Las columnas están numeradas, comenzando por 1.</param>
      <returns>El objeto de método del lector para la posición especificada en el documento.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetNamespaces">
      <summary>Obtiene los espacios de nombres definidos en el ámbito global, dentro del almacén de símbolos actual.</summary>
      <returns>Los espacios de nombres definidos en el ámbito global, dentro del almacén de símbolos actual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)">
      <summary>Obtiene un valor de atributo cuando se especifica el nombre de atributo.</summary>
      <param name="parent">Símbolo (token) de metadatos del objeto para el que se solicita el atributo.</param>
      <param name="name">Nombre del atributo.</param>
      <returns>El valor del atributo.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Obtiene las variables que no son locales cuando se especifica la variable principal.</summary>
      <param name="parent">Símbolo (token) de metadatos del tipo para el que se solicitan las variables.</param>
      <returns>Una matriz de variables para la variable principal.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolReader.UserEntryPoint">
      <summary>Obtiene el símbolo (token) de metadatos del método especificado como punto de entrada del usuario para el módulo, en caso de que haya alguno.</summary>
      <returns>Símbolo (token) de metadatos del método que constituye el punto de entrada para el módulo.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolScope">
      <summary>Representa un ámbito léxico dentro de <see cref="T:System.Diagnostics.SymbolStore.ISymbolMethod" />, que proporciona acceso a los desplazamientos inicial y final del ámbito, así como al ámbito principal y a los ámbitos secundarios.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren">
      <summary>Obtiene los ámbitos léxicos secundarios del ámbito léxico actual.</summary>
      <returns>Los ámbitos léxicos secundarios del ámbito léxico actual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals">
      <summary>Obtiene las variables locales dentro del ámbito léxico actual.</summary>
      <returns>Variables locales dentro del ámbito léxico actual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces">
      <summary>Obtiene los espacios de nombres utilizados dentro del ámbito actual.</summary>
      <returns>Los espacios de nombres utilizados dentro del ámbito actual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset">
      <summary>Obtiene el desplazamiento final del ámbito léxico actual.</summary>
      <returns>Desplazamiento final del ámbito léxico actual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Method">
      <summary>Obtiene el método que contiene el ámbito léxico actual.</summary>
      <returns>Método que contiene el ámbito léxico actual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Parent">
      <summary>Obtiene el ámbito léxico principal del ámbito actual.</summary>
      <returns>El ámbito léxico principal del ámbito actual.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset">
      <summary>Obtiene el desplazamiento inicial del ámbito léxico actual.</summary>
      <returns>El desplazamiento inicial del ámbito léxico actual.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolVariable">
      <summary>Representa una variable dentro de un almacén de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolVariable.GetSignature">
      <summary>Obtiene la firma de la variable.</summary>
      <returns>Firma de la variable en forma de objeto binario opaco.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField1">
      <summary>Obtiene la primera dirección de una variable.</summary>
      <returns>Primera dirección de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField2">
      <summary>Obtiene la segunda dirección de una variable.</summary>
      <returns>Segunda dirección de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField3">
      <summary>Obtiene la tercera dirección de una variable.</summary>
      <returns>Tercera dirección de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressKind">
      <summary>Obtiene el valor de tipo <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" /> que describe el tipo de la dirección.</summary>
      <returns>Tipo de la dirección. Uno de los valores de <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Attributes">
      <summary>Obtiene los atributos de la variable.</summary>
      <returns>Atributos de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.EndOffset">
      <summary>Obtiene el desplazamiento final de una variable dentro del ámbito de la misma.</summary>
      <returns>Desplazamiento final de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Name">
      <summary>Obtiene el nombre de la variable.</summary>
      <returns>Nombre de la variable.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.StartOffset">
      <summary>Obtiene el desplazamiento inicial de la variable dentro del ámbito de la misma.</summary>
      <returns>Desplazamiento inicial de la variable.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolWriter">
      <summary>Representa un escritor de símbolos de código administrado.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
      <summary>Cierra <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> y confirma los símbolos en el almacén de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
      <summary>Cierra el método actual.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
      <summary>Cierra el espacio de nombres más reciente.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
      <summary>Cierra el ámbito léxico actual.</summary>
      <param name="endOffset">Puntos situados a partir de la última instrucción del ámbito.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary>Define un documento de origen.</summary>
      <param name="url">Dirección URL que identifica el documento.</param>
      <param name="language">Lenguaje del documento. Este parámetro puede ser <see cref="F:System.Guid.Empty" />.</param>
      <param name="languageVendor">Identidad del proveedor del lenguaje del documento. Este parámetro puede ser <see cref="F:System.Guid.Empty" />.</param>
      <param name="documentType">Tipo del documento. Este parámetro puede ser <see cref="F:System.Guid.Empty" />.</param>
      <returns>El objeto que representa el documento.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>Define un campo de un campo global o tipo.</summary>
      <param name="parent">Tipo de metadatos o símbolo (token) del método.</param>
      <param name="name">Nombre de campo.</param>
      <param name="attributes">Combinación bit a bit de los atributos del campo.</param>
      <param name="signature">Firma del campo.</param>
      <param name="addrKind">Tipos de dirección de <paramref name="addr1" /> y <paramref name="addr2" />.</param>
      <param name="addr1">Primera dirección de la especificación de campo.</param>
      <param name="addr2">Segunda dirección de la especificación de campo.</param>
      <param name="addr3">Tercera dirección de la especificación de campo.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>Define una única variable global.</summary>
      <param name="name">El nombre de variable global.</param>
      <param name="attributes">Combinación bit a bit de los atributos de la variable global.</param>
      <param name="signature">Firma de la variable global.</param>
      <param name="addrKind">Tipos de dirección de <paramref name="addr1" />, <paramref name="addr2" /> y <paramref name="addr3" />.</param>
      <param name="addr1">Primera dirección de la especificación de variable global.</param>
      <param name="addr2">Segunda dirección de la especificación de variable global.</param>
      <param name="addr3">Tercera dirección de la especificación de variable global.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>Define una única variable en el ámbito léxico actual.</summary>
      <param name="name">Nombre de la variable local.</param>
      <param name="attributes">Combinación bit a bit de los atributos de la variable local.</param>
      <param name="signature">Firma de la variable local.</param>
      <param name="addrKind">Tipos de dirección de <paramref name="addr1" />, <paramref name="addr2" /> y <paramref name="addr3" />.</param>
      <param name="addr1">Primera dirección de la especificación de variable local.</param>
      <param name="addr2">Segunda dirección de la especificación de variable local.</param>
      <param name="addr3">Tercera dirección de la especificación de variable local.</param>
      <param name="startOffset">Desplazamiento inicial de la variable. Si este parámetro es cero, se omite este parámetro y se define la variable en todo el ámbito. Si el parámetro no es cero, la variable está comprendida dentro de los desplazamientos del ámbito actual.</param>
      <param name="endOffset">Desplazamiento final de la variable. Si este parámetro es cero, se omite este parámetro y se define la variable en todo el ámbito. Si el parámetro no es cero, la variable está comprendida dentro de los desplazamientos del ámbito actual.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary>Define un único parámetro en el método actual. El tipo de cada parámetro se toma de la posición del parámetro dentro de la firma del método.</summary>
      <param name="name">Nombre del parámetro.</param>
      <param name="attributes">Combinación bit a bit de los atributos del parámetro.</param>
      <param name="sequence">Firma del parámetro.</param>
      <param name="addrKind">Tipos de dirección de <paramref name="addr1" />, <paramref name="addr2" /> y <paramref name="addr3" />.</param>
      <param name="addr1">Primera dirección de la especificación de parámetro.</param>
      <param name="addr2">Segunda dirección de la especificación de parámetro.</param>
      <param name="addr3">Tercera dirección de la especificación de parámetro.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary>Define un grupo de puntos de secuencia dentro del método actual.</summary>
      <param name="document">Objeto de documento para el que se definen los puntos de secuencia.</param>
      <param name="offsets">Desplazamientos de puntos de secuencia calculados desde el principio de los métodos.</param>
      <param name="lines">Líneas de documento de los puntos de secuencia.</param>
      <param name="columns">Posiciones de documento de los puntos de secuencia.</param>
      <param name="endLines">Líneas finales de documento de los puntos de secuencia.</param>
      <param name="endColumns">Posiciones finales de documento de los puntos de secuencia.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
      <summary>Establece la interfaz emisora de metadatos que se va a asociar al escritor.</summary>
      <param name="emitter">Interfaz emisora de metadatos.</param>
      <param name="filename">Nombre del archivo para el que se escriben los símbolos de depuración. Algunos escritores precisan un nombre de archivo, mientras que otros no.  Si se especifica un nombre de archivo para un escritor que no usa nombres de archivo, se omite este parámetro.</param>
      <param name="fFullBuild">
        <see langword="true" /> indica que se trata de una recompilación completa; <see langword="false" /> indica que se trata de una compilación incremental.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Abre un método para incluir información de símbolos.</summary>
      <param name="method">Símbolo (token) de metadatos para el método que se va a abrir.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
      <summary>Abre un nuevo espacio de nombres.</summary>
      <param name="name">Nombre del nuevo espacio de nombres.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
      <summary>Abre un nuevo ámbito léxico en el método actual.</summary>
      <param name="startOffset">Desplazamiento en bytes desde el principio del método hasta la primera instrucción del ámbito léxico.</param>
      <returns>Identificador de ámbito opaco que puede usarse con el método <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" /> para definir los desplazamientos inicial y final de un ámbito en un momento posterior. En este caso, se omiten los desplazamientos pasados a <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /> y <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" />. Un identificador de ámbito solo es válido en el método actual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
      <summary>Especifica el principio y final reales de un método dentro de un archivo de código fuente. Utilice el método <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /> para especificar la extensión de un método, independientemente de los puntos de secuencia que existan dentro del método.</summary>
      <param name="startDoc">Documento que contiene la posición inicial.</param>
      <param name="startLine">Número de línea inicial.</param>
      <param name="startColumn">Columna inicial.</param>
      <param name="endDoc">Documento que contiene la posición final.</param>
      <param name="endLine">Número de línea final.</param>
      <param name="endColumn">Número de columna final.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
      <summary>Define el intervalo de desplazamiento del ámbito léxico especificado.</summary>
      <param name="scopeID">Identificador del ámbito léxico.</param>
      <param name="startOffset">Desplazamiento de bytes del principio del ámbito léxico.</param>
      <param name="endOffset">Desplazamiento de bytes del final del ámbito léxico.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
      <summary>Define un atributo cuando se especifican el nombre y el valor del atributo.</summary>
      <param name="parent">Símbolo (token) de metadatos para el que se define el atributo.</param>
      <param name="name">Nombre del atributo.</param>
      <param name="data">Valor del atributo.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
      <summary>Establece la interfaz <see langword="ISymUnmanagedWriter" /> subyacente (la interfaz no administrada correspondiente) que un objeto <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> administrado utiliza para emitir símbolos.</summary>
      <param name="underlyingWriter">Puntero al código que representa el escritor subyacente.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Identifica el método definido por el usuario como punto de entrada del módulo actual.</summary>
      <param name="entryMethod">Símbolo (token) de metadatos del método que constituye el punto de entrada del usuario.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
      <summary>Indica que el nombre completo del espacio de nombres especificado se usa dentro del ámbito léxico abierto.</summary>
      <param name="fullName">Nombre completo del espacio de nombres.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymAddressKind">
      <summary>Especifica los tipos de direcciones de las variables locales, los parámetros y los campos de los métodos <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />, <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> y <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> de la interfaz <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" />.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.BitField">
      <summary>Campo de bits. El parámetro <paramref name="addr1" /> es la posición donde comienza el campo y el parámetro <paramref name="addr2" /> es la longitud del campo.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.ILOffset">
      <summary>Desplazamiento del Lenguaje intermedio de Microsoft (MSIL). El parámetro <paramref name="addr1" /> es el índice del parámetro o la variable local del MSIL.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeOffset">
      <summary>Desplazamiento nativo. El parámetro <paramref name="addr1" /> es el desplazamiento desde el principio del elemento primario.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegister">
      <summary>Dirección del Registro nativo. El parámetro <paramref name="addr1" /> es el Registro en el que está almacenada la variable.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRegister">
      <summary>Dirección relativa del Registro. El parámetro <paramref name="addr1" /> es el Registro de orden inferior y el parámetro <paramref name="addr2" /> es el Registro de orden superior.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRelative">
      <summary>Dirección relativa del Registro. El parámetro <paramref name="addr1" /> es el Registro y el parámetro <paramref name="addr2" /> es el desplazamiento.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterStack">
      <summary>Dirección relativa del Registro. El parámetro <paramref name="addr1" /> es el Registro de orden inferior, el parámetro <paramref name="addr2" /> es el Registro de pila y el parámetro <paramref name="addr3" /> es el desplazamiento del indicador de pila a la parte de orden superior del valor.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRVA">
      <summary>Dirección relativa virtual (Relative Virtual Address, RVA) nativa. El parámetro <paramref name="addr1" /> es la dirección RVA del módulo.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeSectionOffset">
      <summary>Desplazamiento de sección nativo. El parámetro <paramref name="addr1" /> es la sección y el parámetro <paramref name="addr2" /> es el desplazamiento.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeStackRegister">
      <summary>Dirección relativa del Registro. El parámetro <paramref name="addr1" /> es el Registro de pila, el parámetro <paramref name="addr2" /> es el desplazamiento del indicador de pila a la parte de orden inferior del valor y el parámetro <paramref name="addr3" /> es el Registro de orden superior.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymbolToken">
      <summary>La estructura de <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> es una representación de objeto de un símbolo (token) que representa información simbólica.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)">
      <summary>Inicializa una nueva instancia de la estructura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> cuando se proporciona un valor.</summary>
      <param name="val">El valor que se va a utilizar para el símbolo (token).</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Determina si <paramref name="obj" /> es igual a esta instancia.</summary>
      <param name="obj">
        <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> que se va a comprobar.</param>
      <returns>
        <see langword="true" /> si <paramref name="obj" /> es igual a esta instancia; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)">
      <summary>Determina si un objeto <paramref name="obj" /> es una instancia de <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> y coincide con esta instancia.</summary>
      <param name="obj">Objeto que se va a comprobar.</param>
      <returns>Es <see langword="true" /> si <paramref name="obj" /> es una instancia de <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> y es igual a esta instancia; en caso contrario, es <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetHashCode">
      <summary>Genera el código hash del símbolo (token) actual.</summary>
      <returns>El código hash del símbolo (token) actual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetToken">
      <summary>Obtiene el valor del símbolo (token) actual.</summary>
      <returns>El valor del símbolo (token) actual.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Devuelve un valor que indica si dos objetos <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> son iguales.</summary>
      <param name="a">Un estructura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <param name="b">Un estructura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="a" /> y <paramref name="b" /> son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary>Devuelve un valor que indica si dos objetos <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> no son iguales.</summary>
      <param name="a">Un estructura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <param name="b">Un estructura <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <returns>
        <see langword="true" /> si <paramref name="a" /> y <paramref name="b" /> no son iguales; en caso contrario, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymDocumentType">
      <summary>Contiene los identificadores GUID públicos de los tipos de documentos que se van a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymDocumentType.Text">
      <summary>Especifica el identificador GUID del tipo de documento que se va a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymDocumentType.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.SymbolStore.SymDocumentType" />.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageType">
      <summary>Contiene los identificadores GUID públicos de los tipos de lenguajes que se van a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Basic">
      <summary>Especifica el identificador GUID del tipo de lenguaje Basic que se va a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.C">
      <summary>Especifica el identificador GUID del tipo de lenguaje C que se va a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Cobol">
      <summary>Especifica el identificador GUID del tipo de lenguaje Cobol que se va a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CPlusPlus">
      <summary>Especifica el identificador GUID del tipo de lenguaje C++ que se va a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CSharp">
      <summary>Especifica el identificador GUID del tipo de lenguaje C# que se va a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.ILAssembly">
      <summary>Especifica el identificador GUID del tipo de lenguaje ILAssembly que se va a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Java">
      <summary>Especifica el identificador GUID del tipo de lenguaje Java que se va a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.JScript">
      <summary>Especifica el identificador GUID del tipo de lenguaje JScript que se va a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.MCPlusPlus">
      <summary>Especifica el identificador GUID del tipo de lenguaje C++ que se va a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Pascal">
      <summary>Especifica el identificador GUID del tipo de lenguaje Pascal que se va a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.SMC">
      <summary>Especifica el identificador GUID del tipo de lenguaje SMC que se va a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageType.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.SymbolStore.SymLanguageType" />.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageVendor">
      <summary>Contiene los identificadores GUID públicos de los proveedores de lenguajes que se van a utilizar con el almacén de símbolos.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageVendor.Microsoft">
      <summary>Especifica el identificador GUID del proveedor del lenguaje de programación de Microsoft.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageVendor.#ctor">
      <summary>Inicializa una nueva instancia de la clase <see cref="T:System.Diagnostics.SymbolStore.SymLanguageVendor" />.</summary>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Reflection.DispatchProxy</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.DispatchProxy">
      <summary>Proporciona un mecanismo para crear instancias de objetos proxy y controlar la distribución de sus métodos.</summary>
    </member>
    <member name="M:System.Reflection.DispatchProxy.#ctor" />
    <member name="M:System.Reflection.DispatchProxy.Create``2">
      <summary>Crea una instancia de objeto que se deriva de la clase <typeparamref name="TProxy" /> e implementa la interfaz <typeparamref name="T" />.</summary>
      <typeparam name="T">La interfaz que debe implementar el proxy.</typeparam>
      <typeparam name="TProxy">Clase base que se va a utilizar para la clase de proxy.</typeparam>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="T" /> es una clase, o bien el elemento <typeparamref name="TProxy" /> está sellado o no tiene un constructor sin parámetros.</exception>
      <returns>Instancia de objeto que implementa <typeparamref name="T" />.</returns>
    </member>
    <member name="M:System.Reflection.DispatchProxy.Invoke(System.Reflection.MethodInfo,System.Object[])">
      <summary>Cada vez que se llama a cualquier método en el tipo de proxy generado, se invoca este método para distribuir el control.</summary>
      <param name="targetMethod">Método que invocó el autor de llamada.</param>
      <param name="args">Argumentos que pasó el autor de llamada al método.</param>
      <returns>Objeto que se va a devolver al autor de llamada, o <see langword="null" /> para los métodos void.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Algorithms</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.Aes">
      <summary>Представляет абстрактный базовый класс, от которого должны наследоваться все реализации стандарта AES.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.Aes" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create">
      <summary>Создает криптографический объект, используемый для выполнения симметричного алгоритма.</summary>
      <returns>Криптографический объект, используемый для выполнения симметричного алгоритма.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create(System.String)">
      <summary>Создает криптографический объект, задающий реализацию AES для выполнения симметричного алгоритма.</summary>
      <param name="algorithmName">Имя конкретной реализации AES, которую требуется использовать.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="algorithmName" /> имеет значение <see langword="null" />.</exception>
      <returns>Криптографический объект, используемый для выполнения симметричного алгоритма.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesCcm">
      <summary>Представляет ключ AES для использования со счетчиком в режиме работы CBC-MAC (CCM).</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.#ctor(System.Byte[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.AesCcm" /> с указанным ключом.</summary>
      <param name="key">Секретный ключ, который нужно использовать для этого экземпляра.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Длина параметра <paramref name="key" /> отличается от 16, 24 или 32 байт (128, 192 или 256 бит).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.AesCcm" /> с указанным ключом.</summary>
      <param name="key">Секретный ключ, который нужно использовать для этого экземпляра.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Длина параметра <paramref name="key" /> отличается от 16, 24 или 32 байт (128, 192 или 256 бит).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>Расшифровывает зашифрованный текст в предоставленный буфер назначения, если можно проверить тег проверки подлинности.</summary>
      <param name="nonce">Nonce, связанный с этим сообщением, который должен соответствовать значению, указанному при шифровании.</param>
      <param name="ciphertext">Зашифрованное содержимое для расшифровки.</param>
      <param name="tag">Тег проверки подлинности, созданный для этого сообщения во время шифрования.</param>
      <param name="plaintext">Массив байтов для получения расшифрованного содержимого.</param>
      <param name="associatedData">Дополнительные данные, связанные с этим сообщением, которые должны соответствовать значению, указанному при шифровании.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="plaintext" /> и <paramref name="ciphertext" /> имеют разную длину.

-или-

Длина параметра <paramref name="nonce" /> не разрешена в <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />.

-или-

Длина параметра <paramref name="tag" /> не разрешена в <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> или <paramref name="plaintext" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось проверить значение тега или операция расшифровки завершилась ошибкой по другим причинам.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Расшифровывает зашифрованный текст в предоставленный буфер назначения, если можно проверить тег проверки подлинности.</summary>
      <param name="nonce">Nonce, связанный с этим сообщением, который должен соответствовать значению, указанному при шифровании.</param>
      <param name="ciphertext">Зашифрованное содержимое для расшифровки.</param>
      <param name="tag">Тег проверки подлинности, созданный для этого сообщения во время шифрования.</param>
      <param name="plaintext">Диапазон байтов для получения расшифрованного содержимого.</param>
      <param name="associatedData">Дополнительные данные, связанные с этим сообщением, которые должны соответствовать значению, указанному при шифровании.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="plaintext" /> и <paramref name="ciphertext" /> имеют разную длину.

-или-

Длина параметра <paramref name="nonce" /> не разрешена в <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />.

-или-

Длина параметра <paramref name="tag" /> не разрешена в <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось проверить значение тега или операция расшифровки завершилась ошибкой по другим причинам.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Dispose">
      <summary>Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Security.Cryptography.AesCcm" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>Шифрует открытый текст в буфер назначения зашифрованного текста и создает тег проверки подлинности в отдельном буфере.</summary>
      <param name="nonce">Nonce, связанный с этим сообщением, который должен быть уникальным значением для каждой операции с тем же ключом.</param>
      <param name="plaintext">Содержимое для шифрования.</param>
      <param name="ciphertext">Массив байтов для получения зашифрованного содержимого.</param>
      <param name="tag">Массив байтов для получения созданного тега проверки подлинности.</param>
      <param name="associatedData">Дополнительные данные, связанные с этим сообщением, которые также необходимо предоставить при шифровании.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="plaintext" /> и <paramref name="ciphertext" /> имеют разную длину.

-или-

Длина параметра <paramref name="nonce" /> не разрешена в <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />.

-или-

Длина параметра <paramref name="tag" /> не разрешена в <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> или <paramref name="plaintext" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Сбой операции шифрования.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Шифрует открытый текст в буфер назначения зашифрованного текста и создает тег проверки подлинности в отдельном буфере.</summary>
      <param name="nonce">Nonce, связанный с этим сообщением, который должен быть уникальным значением для каждой операции с тем же ключом.</param>
      <param name="plaintext">Содержимое для шифрования.</param>
      <param name="ciphertext">Диапазон байтов для получения зашифрованного содержимого.</param>
      <param name="tag">Диапазон байтов для получения созданного тега проверки подлинности.</param>
      <param name="associatedData">Дополнительные данные, связанные с этим сообщением, которые также необходимо предоставить при шифровании.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="plaintext" /> и <paramref name="ciphertext" /> имеют разную длину.

-или-

Длина параметра <paramref name="nonce" /> не разрешена в <see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" />.

-или-

Длина параметра <paramref name="tag" /> не разрешена в <see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Сбой операции шифрования.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCcm.NonceByteSizes">
      <summary>Возвращает размеры nonce в байтах, поддерживаемые этим экземпляром.</summary>
      <returns>Размеры nonce, поддерживаемые этим экземпляром: 7, 8, 9, 10, 11, 12 или 13 байт (56, 64, 72, 80, 88, 96 или 104 бит).</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCcm.TagByteSizes">
      <summary>Возвращает размеры тега в байтах, поддерживаемые этим экземпляром.</summary>
      <returns>Размеры тегов, поддерживаемые этим экземпляром: 4, 6, 8, 10, 12, 14 или 16 байт (32, 48, 64, 80, 96, 112 или 128).</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesGcm">
      <summary>Представляет ключ AES для использования со счетчиком в режиме работы Galois/Counter Mode (GCM).</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.#ctor(System.Byte[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.AesGcm" /> с указанным ключом.</summary>
      <param name="key">Секретный ключ, который нужно использовать для этого экземпляра.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Длина параметра <paramref name="key" /> отличается от 16, 24 или 32 байт (128, 192 или 256 бит).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.AesGcm" /> с указанным ключом.</summary>
      <param name="key">Секретный ключ, который нужно использовать для этого экземпляра.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Длина параметра <paramref name="key" /> отличается от 16, 24 или 32 байт (128, 192 или 256 бит).</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>Расшифровывает зашифрованный текст в предоставленный буфер назначения, если можно проверить тег проверки подлинности.</summary>
      <param name="nonce">Nonce, связанный с этим сообщением, который должен соответствовать значению, указанному при шифровании.</param>
      <param name="ciphertext">Зашифрованное содержимое для расшифровки.</param>
      <param name="tag">Тег проверки подлинности, созданный для этого сообщения во время шифрования.</param>
      <param name="plaintext">Массив байтов для получения расшифрованного содержимого.</param>
      <param name="associatedData">Дополнительные данные, связанные с этим сообщением, которые должны соответствовать значению, указанному при шифровании.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="plaintext" /> и <paramref name="ciphertext" /> имеют разную длину.

-или-

Длина параметра <paramref name="nonce" /> не разрешена в <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />.

-или-

Длина параметра <paramref name="tag" /> не разрешена в <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> или <paramref name="plaintext" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось проверить значение тега или операция расшифровки завершилась ошибкой по другим причинам.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Расшифровывает зашифрованный текст в предоставленный буфер назначения, если можно проверить тег проверки подлинности.</summary>
      <param name="nonce">Nonce, связанный с этим сообщением, который должен соответствовать значению, указанному при шифровании.</param>
      <param name="ciphertext">Зашифрованное содержимое для расшифровки.</param>
      <param name="tag">Тег проверки подлинности, созданный для этого сообщения во время шифрования.</param>
      <param name="plaintext">Диапазон байтов для получения расшифрованного содержимого.</param>
      <param name="associatedData">Дополнительные данные, связанные с этим сообщением, которые должны соответствовать значению, указанному при шифровании.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="plaintext" /> и <paramref name="ciphertext" /> имеют разную длину.

-или-

Длина параметра <paramref name="nonce" /> не разрешена в <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />.

-или-

Длина параметра <paramref name="tag" /> не разрешена в <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось проверить значение тега или операция расшифровки завершилась ошибкой по другим причинам.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Dispose">
      <summary>Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Security.Cryptography.AesGcm" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>Шифрует открытый текст в буфер назначения зашифрованного текста и создает тег проверки подлинности в отдельном буфере.</summary>
      <param name="nonce">Nonce, связанный с этим сообщением, который должен быть уникальным значением для каждой операции с тем же ключом.</param>
      <param name="plaintext">Содержимое для шифрования.</param>
      <param name="ciphertext">Массив байтов для получения зашифрованного содержимого.</param>
      <param name="tag">Массив байтов для получения созданного тега проверки подлинности.</param>
      <param name="associatedData">Дополнительные данные, связанные с этим сообщением, которые также необходимо предоставить при шифровании.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="plaintext" /> и <paramref name="ciphertext" /> имеют разную длину.

-или-

Длина параметра <paramref name="nonce" /> не разрешена в <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />.

-или-

Длина параметра <paramref name="tag" /> не разрешена в <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="nonce" />, <paramref name="ciphertext" />, <paramref name="tag" /> или <paramref name="plaintext" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Сбой операции шифрования.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Шифрует открытый текст в буфер назначения зашифрованного текста и создает тег проверки подлинности в отдельном буфере.</summary>
      <param name="nonce">Nonce, связанный с этим сообщением, который должен быть уникальным значением для каждой операции с тем же ключом.</param>
      <param name="plaintext">Содержимое для шифрования.</param>
      <param name="ciphertext">Массив байтов для получения зашифрованного содержимого.</param>
      <param name="tag">Массив байтов для получения созданного тега проверки подлинности.</param>
      <param name="associatedData">Дополнительные данные, связанные с этим сообщением, которые также необходимо предоставить при шифровании.</param>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="plaintext" /> и <paramref name="ciphertext" /> имеют разную длину.

-или-

Длина параметра <paramref name="nonce" /> не разрешена в <see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" />.

-или-

Длина параметра <paramref name="tag" /> не разрешена в <see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Сбой операции шифрования.</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesGcm.NonceByteSizes">
      <summary>Возвращает размеры nonce в байтах, поддерживаемые этим экземпляром.</summary>
      <returns>Размеры nonce, поддерживаемые этим экземпляром: 12 байт (96 бит).</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesGcm.TagByteSizes">
      <summary>Возвращает размеры тега в байтах, поддерживаемые этим экземпляром.</summary>
      <returns>Размеры тегов, поддерживаемые этим экземпляром: 12, 13, 14, 15 или 16 байт (96, 104, 112, 120 или 128 бит).</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>Предоставляет управляемую реализацию алгоритма симметричного шифрования AES.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.AesManaged" />.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Параметр политики безопасности Windows для FIPS-совместимых алгоритмов включен.</exception>
      <exception cref="T:System.InvalidOperationException">Эта реализация не входит в состав криптографических алгоритмов, утвержденных в стандартах FIPS для платформы Windows.</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>Создает объект-дешифратор для алгоритма симметричного шифрования, используя текущий ключ и вектор инициализации.</summary>
      <returns>Симметричный объект-дешифратор.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Создает объект-дешифратор для алгоритма симметричного шифрования, используя заданный ключ и вектор инициализации.</summary>
      <param name="rgbKey">Секретный ключ, который должен использоваться для симметричного алгоритма.</param>
      <param name="rgbIV">Вектор инициализации, который должен использоваться для симметричного алгоритма.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> или <paramref name="iv" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> недопустим.</exception>
      <returns>Симметричный объект-дешифратор.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>Создает объект-шифратор для алгоритма симметричного шифрования, используя текущий ключ и вектор инициализации.</summary>
      <returns>Симметричный объект-шифратор.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Создает объект-шифратор для алгоритма симметричного шифрования, используя заданный ключ и вектор инициализации.</summary>
      <param name="rgbKey">Секретный ключ, который должен использоваться для симметричного алгоритма.</param>
      <param name="rgbIV">Вектор инициализации, который должен использоваться для симметричного алгоритма.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> или <paramref name="iv" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> недопустим.</exception>
      <returns>Симметричный объект-шифратор.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>Генерирует случайный вектор инициализации для использования в алгоритме симметричного шифрования.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>Генерирует случайный ключ для использования в алгоритме симметричного шифрования.</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.BlockSize">
      <summary>Возвращает или задает размер блока криптографической операции (в битах).</summary>
      <returns>Размер блока криптографической операции (в битах). Значение по умолчанию — 128 бит.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>Получает или задает число бит для обратной связи.</summary>
      <returns>Размер порции данных обратной связи в битах.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>Получает или задает вектор инициализации для алгоритма симметричного шифрования.</summary>
      <returns>Вектор инициализации, используемый в алгоритме симметричного шифрования.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>Получает или задает секретный ключ для алгоритма симметричного шифрования.</summary>
      <returns>Секретный ключ для алгоритма симметричного шифрования.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>Получает или задает размер секретного ключа (в битах), используемого алгоритмом симметричного шифрования.</summary>
      <returns>Размер ключа (в битах), используемого алгоритмом симметричного шифрования.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalBlockSizes">
      <summary>Возвращает размеры блоков (в битах), которые поддерживаются симметричным алгоритмом.</summary>
      <returns>Размеры блоков в битах, которые поддерживаются симметричным алгоритмом.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalKeySizes">
      <summary>Возвращает размеры ключа (в битах), которые поддерживаются симметричным алгоритмом.</summary>
      <returns>Размеры ключей в битах, которые поддерживаются симметричным алгоритмом.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>Возвращает или задает режим функционирования симметричного алгоритма.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Для свойства <see cref="P:System.Security.Cryptography.AesManaged.Mode" /> устанавливается значение <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> или <see cref="F:System.Security.Cryptography.CipherMode.OFB" />.</exception>
      <returns>Одно из значений перечисления, указывающее, какой режим блочного шифрования требуется использовать. Значение по умолчанию — <see cref="F:System.Security.Cryptography.CipherMode.CBC" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>Возвращает или задает режим заполнения, используемый в симметричном алгоритме.</summary>
      <returns>Одно из значений перечисления, указывающее тип применяемого заполнения. Значение по умолчанию — <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter">
      <summary>Представляет базовый класс, от которого наследуются все модули удаления форматирования асимметричного обмена ключами.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>При переопределении в производном классе извлекает конфиденциальные сведения из зашифрованных данных обмена ключами.</summary>
      <param name="rgb">Данные обмена ключами, в которых скрыты конфиденциальные сведения.</param>
      <returns>Конфиденциальные сведения, извлекаемые из данных обмена ключами.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Если переопределено в производном классе, задает закрытый ключ для расшифровки конфиденциальных данных.</summary>
      <param name="key">Экземпляр реализации <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />, который содержит закрытый ключ.</param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.Parameters">
      <summary>При переопределении в производном классе получает или задает параметры для обмена асимметричными ключами.</summary>
      <returns>XML-строка, содержащая параметры операции обмена асимметричными ключами.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter">
      <summary>Представляет базовый класс, от которого наследуют все модули форматирования асимметричного обмена ключами.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>При переопределении в производном классе создает зашифрованные данные обмена ключами из указанных входных данных.</summary>
      <param name="data">Секретные сведения, которые будут переданы при обмене ключами.</param>
      <returns>Зашифрованные данные обмена ключами для отправки предполагаемому получателю.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>При переопределении в производном классе создает зашифрованные данные обмена ключами из указанных входных данных.</summary>
      <param name="data">Секретные сведения, которые будут переданы при обмене ключами.</param>
      <param name="symAlgType">Этот параметр не используется в текущей версии.</param>
      <returns>Зашифрованные данные обмена ключами для отправки предполагаемому получателю.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>При переопределении в производном классе задает открытый ключ, используемый для шифрования секретных данных.</summary>
      <param name="key">Экземпляр реализации <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />, который содержит открытый ключ.</param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters">
      <summary>При переопределении в производном классе получает параметры для обмена асимметричными ключами.</summary>
      <returns>XML-строка, содержащая параметры операции обмена асимметричными ключами.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureDeformatter">
      <summary>Представляет абстрактный базовый класс, от которого наследуются все реализации модуля асимметричного удаления формата подписи.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>Если переопределено в производном классе, задает хэш-алгоритм для подтверждения подписи.</summary>
      <param name="strName">Имя хэш-алгоритма для подтверждения подписи.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>При переопределении в производном классе задает открытый ключ для проверки подписи.</summary>
      <param name="key">Экземпляр реализации <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />, который содержит открытый ключ.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>При переопределении в производном классе проверяет подпись с использованием указанных данных.</summary>
      <param name="rgbHash">Данные, подписанные с помощью <paramref name="rgbSignature" />.</param>
      <param name="rgbSignature">Подпись, которую требуется проверить с использованием <paramref name="rgbHash" />.</param>
      <returns>Значение <see langword="true" />, если <paramref name="rgbSignature" /> совпадает с подписью, вычисленной с помощью указанного хэш-алгоритма и ключа для <paramref name="rgbHash" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
      <summary>Проверяет подпись из указанного хэш-значения.</summary>
      <param name="hash">Хэш-алгоритм, который следует использовать для проверки подписи.</param>
      <param name="rgbSignature">Подпись для проверки.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="hash" /> имеет значение <see langword="null" />.</exception>
      <returns>Значение <see langword="true" />, если подпись допустима для хэша; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureFormatter">
      <summary>Представляет базовый класс, от которого наследуются все реализации асимметричного форматирования подписи.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])">
      <summary>При переопределении в производном классе создает подпись для указанных данных.</summary>
      <param name="rgbHash">Данные, которые должны быть подписаны.</param>
      <returns>Цифровая подпись для параметра <paramref name="rgbHash" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)">
      <summary>Создает подпись из указанного хэш-значения.</summary>
      <param name="hash">Хэш-алгоритм, который следует использовать для создания подписи.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="hash" /> имеет значение <see langword="null" />.</exception>
      <returns>Подпись для указанного хэш-значения.</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>При переопределении в производном классе задает хэш-алгоритм, используемый для создания подписи.</summary>
      <param name="strName">Имя хэш-алгоритма для создания подписи.</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>При переопределении в производном классе задает асимметричный алгоритм, используемый для создания подписи.</summary>
      <param name="key">Экземпляр реализации <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />, используемый для создания подписи.</param>
    </member>
    <member name="T:System.Security.Cryptography.CryptoConfig">
      <summary>Обращается к сведениям о криптографической конфигурации.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.CryptoConfig" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])">
      <summary>Добавляет к сопоставлениям алгоритмов набор имен, который следует использовать для текущего домена приложения.</summary>
      <param name="algorithm">Алгоритм для сопоставления.</param>
      <param name="names">Массив имен для сопоставления с алгоритмом.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="algorithm" /> или параметра <paramref name="names" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="algorithm" /> недоступен из-за пределов сборки.  
  
-или- 
Одна из записей в параметре <paramref name="names" /> является пустой или имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddOID(System.String,System.String[])">
      <summary>Добавляет к сопоставлениям идентификатора объекта набор имен, который следует использовать для текущего домена приложения.</summary>
      <param name="oid">Идентификатор объекта для сопоставления.</param>
      <param name="names">Массив имен для сопоставления с идентификатором объекта.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="oid" /> или параметра <paramref name="names" /> — <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Одна из записей в параметре <paramref name="names" /> является пустой или имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)">
      <summary>Создает новый экземпляр заданного криптографического объекта.</summary>
      <param name="name">Простое имя криптографического объекта для создания экземпляра.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">Алгоритм, описание которого содержится в параметре<paramref name="name" />, использовался с включенным режимом FIPS, но не является FIPS-совместимым.</exception>
      <returns>Новый экземпляр заданного криптографического объекта.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])">
      <summary>Создает новый экземпляр заданного криптографического объекта с заданными аргументами.</summary>
      <param name="name">Простое имя криптографического объекта для создания экземпляра.</param>
      <param name="args">Аргументы, используемые для создания заданного криптографического объекта.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">Алгоритм, описание которого содержится в параметре<paramref name="name" />, использовался с включенным режимом FIPS, но не является FIPS-совместимым.</exception>
      <returns>Новый экземпляр заданного криптографического объекта.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)">
      <summary>Кодирует заданный идентификатор объекта.</summary>
      <param name="str">Идентификатор объекта, подлежащий закодированию.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="str" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Ошибка при закодировании идентификатора объекта.</exception>
      <returns>Массив байтов, в котором содержится закодированный идентификатор объекта.</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)">
      <summary>Получает идентификатор объекта-алгоритма, соответствующего заданному простому имени.</summary>
      <param name="name">Простое имя алгоритма, для которого необходимо получить идентификатор.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="name" /> имеет значение <see langword="null" />.</exception>
      <returns>Идентификатор заданного алгоритма.</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms">
      <summary>Указывает, следует ли среде выполнения использовать политику для создания только алгоритмов, удовлетворяющих стандартам FIPS.</summary>
      <returns>Значение <see langword="true" /> для использования политики; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.DeriveBytes">
      <summary>Представляет абстрактный базовый класс, от которого наследуются все классы, получающие последовательности байтов заданной длины.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.DeriveBytes" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose">
      <summary>При переопределении в производном классе освобождает все ресурсы, используемые текущим объектом <see cref="T:System.Security.Cryptography.DeriveBytes" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)">
      <summary>Если переопределено в производном классе, освобождает неуправляемые ресурсы, используемые классом <see cref="T:System.Security.Cryptography.DeriveBytes" />, и опционально освобождает управляемые ресурсы.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)">
      <summary>Если переопределено в производном классе, возвращает псевдослучайные байты ключа.</summary>
      <param name="cb">Число генерируемых псевдослучайных байтов ключа.</param>
      <returns>Массив байтов, заполненный псевдослучайными байтами ключа.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Reset">
      <summary>Если переопределено в производном классе, восстанавливает состояние данной операции.</summary>
    </member>
    <member name="T:System.Security.Cryptography.DES">
      <summary>Представляет базовый класс для алгоритмов DES, от которых должны наследовать все реализации <see cref="T:System.Security.Cryptography.DES" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.DES" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create">
      <summary>Создает экземпляр криптографического объекта для выполнения алгоритма DES (<see cref="T:System.Security.Cryptography.DES" />).</summary>
      <returns>Криптографический объект.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create(System.String)">
      <summary>Создает экземпляр криптографического объекта для выполнения заданной реализации алгоритма <see cref="T:System.Security.Cryptography.DES" />.</summary>
      <param name="algName">Имя конкретной реализации <see cref="T:System.Security.Cryptography.DES" />, которую требуется использовать.</param>
      <returns>Криптографический объект.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])">
      <summary>Определяет, является ли указанный ключ частично слабым.</summary>
      <param name="rgbKey">Секретный ключ, проверяемый на частичную слабость.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Недопустимый размер параметра <paramref name="rgbKey" />.</exception>
      <returns>Значение <see langword="true" />, если ключ частично слабый; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])">
      <summary>Определяет, является ли указанный ключ слабым.</summary>
      <param name="rgbKey">Секретный ключ, проверяемый на слабость.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Недопустимый размер параметра <paramref name="rgbKey" />.</exception>
      <returns>Значение <see langword="true" />, если ключ слабый; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.DES.Key">
      <summary>Получает или задает секретный ключ для алгоритма DES (<see cref="T:System.Security.Cryptography.DES" />).</summary>
      <exception cref="T:System.ArgumentNullException">Предпринята попытка установить для этого ключа значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">Предпринята попытка установить ключ, длина которого не равна <see cref="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Предпринята попытка установить слабый ключ (см. <see cref="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])" />) или частично слабый ключ (см. <see cref="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])" />).</exception>
      <returns>Секретный ключ для алгоритма <see cref="T:System.Security.Cryptography.DES" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSA">
      <summary>Представляет абстрактный базовый класс, от которого должны наследоваться все реализации алгоритма цифровой подписи (<see cref="T:System.Security.Cryptography.DSA" />).</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create">
      <summary>Создает криптографический объект по умолчанию, используемый для выполнения алгоритма асимметричного шифрования.</summary>
      <returns>Криптографический объект, используемый для выполнения алгоритма асимметричного шифрования.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Int32)">
      <summary>Создает новый временный DSA-ключ с заданным размером ключа.</summary>
      <param name="keySizeInBits">Размер ключа в битах.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySizeInBits" /> не разрешено в <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes" />.</exception>
      <returns>Создает новый временный DSA-ключ с заданным размером ключа.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)">
      <summary>Создает новый временный DSA-ключ с заданными параметрами DSA-ключа.</summary>
      <param name="parameters">Параметры для алгоритма <see cref="T:System.Security.Cryptography.DSA" />.</param>
      <returns>Новый временный DSA-ключ.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.String)">
      <summary>Создает заданный криптографический объект, используемый для выполнения алгоритма асимметричного шифрования.</summary>
      <param name="algName">Имя конкретной реализации <see cref="T:System.Security.Cryptography.DSA" />, которую требуется использовать.</param>
      <returns>Криптографический объект, используемый для выполнения алгоритма асимметричного шифрования.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])">
      <summary>При переопределении в производном классе создает подпись <see cref="T:System.Security.Cryptography.DSA" /> для указанного хэш-значения.</summary>
      <param name="rgbHash">Подписываемое хэш-значение.</param>
      <returns>Цифровая подпись для указанного хэш-значения.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>Создает сигнатуру DSA для указанного значения хэша в указанном формате.</summary>
      <param name="rgbHash">Значение хэша для подписи.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции подписывания произошла ошибка.</exception>
      <returns>Подпись DSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignatureCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>Создает сигнатуру DSA для указанного значения хэша в указанном формате.</summary>
      <param name="hash">Значение хэша для подписи.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции подписывания произошла ошибка.</exception>
      <returns>Подпись DSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ExportParameters(System.Boolean)">
      <summary>Если переопределено в производном классе, экспортирует объект <see cref="T:System.Security.Cryptography.DSAParameters" />.</summary>
      <param name="includePrivateParameters">Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.</param>
      <returns>Параметры для <see cref="T:System.Security.Cryptography.DSA" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.FromXmlString(System.String)">
      <summary>Восстанавливает объект <see cref="T:System.Security.Cryptography.DSA" /> из XML-строки.</summary>
      <param name="xmlString">XML-строка, используемая для восстановления объекта <see cref="T:System.Security.Cryptography.DSA" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="xmlString" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Недопустимый формат параметра <paramref name="xmlString" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.GetMaxSignatureSize(System.Security.Cryptography.DSASignatureFormat)">
      <summary>Получает самый крупный размер в байтах для сигнатуры, созданной этим ключом в указанном формате.</summary>
      <param name="signatureFormat">Формат кодирования для сигнатуры.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <returns>Самый крупный размер в байтах для сигнатуры, созданной этим ключом в указанном формате.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>При переопределении в производном классе вычисляет хэш-значение указанного фрагмента массива байтов с помощью заданного хэш-алгоритма.</summary>
      <param name="data">Данные, предназначенные для хэширования.</param>
      <param name="offset">Индекс первого байта в <paramref name="data" />, хэширование которого требуется выполнить.</param>
      <param name="count">Количество байтов для хэширования.</param>
      <param name="hashAlgorithm">Алгоритм, который будет использоваться для хэширования данных.</param>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <returns>Хэшированные данные.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>При переопределении в производном классе вычисляет хэш-значение указанного двоичного потока с помощью заданного алгоритма хэширования.</summary>
      <param name="data">Двоичный поток, хэширование которого требуется выполнить.</param>
      <param name="hashAlgorithm">Алгоритм, который будет использоваться для хэширования данных.</param>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <returns>Хэшированные данные.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару из открытого и закрытого ключей из структуры PKCS#8 EncryptedPrivateKeyInfo после расшифровки с помощью пароля на основе байтов, заменяя ключи для этого объекта.</summary>
      <param name="passwordBytes">Байты, используемые в качестве пароля при расшифровке материала ключа.</param>
      <param name="source">Байты структуры PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

- или -

Содержимое <paramref name="source" />, указывающее, что как функцию формирования ключа (KDF) следует использовать устаревшую версию PKCS#12 KDF, которая требует пароли на основе <see cref="T:System.Char" />.

- или -

Содержимое <paramref name="source" /> не представляет структуру PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.

- или -

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

- или -

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

- или -

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару из открытого и закрытого ключей из структуры PKCS#8 EncryptedPrivateKeyInfo после расшифровки с помощью пароля на основе символов, заменяя ключи для этого объекта.</summary>
      <param name="password">Пароль, используемый при расшифровке материала ключа.</param>
      <param name="source">Байты структуры PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

- или -

Содержимое <paramref name="source" /> не представляет структуру PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.

- или -

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

- или -

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

- или -

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Импортирует зашифрованный закрытый ключ в формате RFC 7468 в кодировке PEM, заменяя ключи для этого объекта.</summary>
      <param name="input">Текст PEM зашифрованного ключа для импорта.</param>
      <param name="passwordBytes">Байты, используемые в качестве пароля при расшифровке материала ключа.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> не содержит ключ в кодировке PEM с распознанной меткой.

- или -

            <paramref name="input" /> содержит несколько ключей в кодировке PEM с распознанной меткой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

- или -

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> не представляет структуру ASN.1-BER PKCS#8 EncryptedPrivateKeyInfo.

- или -

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> указывает ключ для алгоритма, отличного от алгоритма, представленного этим экземпляром.

- или -

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> представляет ключ в неподдерживаемом формате.

- или -

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Импортирует зашифрованный закрытый ключ в формате RFC 7468 в кодировке PEM, заменяя ключи для этого объекта.</summary>
      <param name="input">Текст PEM зашифрованного ключа для импорта.</param>
      <param name="password">Пароль, используемый при расшифровке материала ключа.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> не содержит ключ в кодировке PEM с распознанной меткой.

- или -

            <paramref name="input" /> содержит несколько ключей в кодировке PEM с распознанной меткой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

- или -

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> не представляет структуру ASN.1-BER PKCS#8 EncryptedPrivateKeyInfo.

- или -

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> указывает ключ для алгоритма, отличного от алгоритма, представленного этим экземпляром.

- или -

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> представляет ключ в неподдерживаемом формате.

- или -

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>Импортирует зашифрованный ключ в формате RFC 7468 в кодировке PEM, заменив ключи для этого объекта.</summary>
      <param name="input">Текст PEM импортируемого ключа.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> не содержит ключ в кодировке PEM с распознанной меткой.

- или -

            <paramref name="input" /> содержит несколько ключей в кодировке PEM с распознанной меткой.

- или -

            <paramref name="input" /> содержит зашифрованный ключ в кодировке PEM.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>Если переопределено в производном классе, импортирует заданный объект <see cref="T:System.Security.Cryptography.DSAParameters" />.</summary>
      <param name="parameters">Параметры для <see cref="T:System.Security.Cryptography.DSA" />.</param>
      <exception cref="T:System.ArgumentException">В <paramref name="parameters" /> отсутствуют обязательные поля.

- или -

<paramref name="parameters" /> содержит поля несогласованной длины для допустимого ключа.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> не представляет допустимый набор параметров ключа DSA.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару из открытого и закрытого ключей из структуры PKCS#8 PrivateKeyInfo после расшифровки, заменяя ключи для этого объекта.</summary>
      <param name="source">Байты структуры PKCS#8 PrivateKeyInfo в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Содержимое <paramref name="source" /> не представляет структуру PKCS#8 PrivateKeyInfo в кодировке ASN.1-BER.

- или -

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

- или -

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

- или -

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует открытый ключ из структуры X.509 SubjectPublicKeyInfo после расшифровки, заменяя ключи для этого объекта.</summary>
      <param name="source">Байты структуры X.509 SubjectPublicKeyInfo в кодировке ASN.1-DER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Содержимое <paramref name="source" /> не представляет структуру X.509 SubjectPublicKeyInfo в кодировке ASN.1-DER.

- или -

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

- или -

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

- или -

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Вычисляет хэш-значение фрагмента заданного массива байтов с помощью указанного алгоритма хэширования и подписывает результирующее хэш-значение.</summary>
      <param name="data">Входные данные, для которых нужно вычислить хэш.</param>
      <param name="offset">Смещение в массиве, начиная с которого следует использовать данные.</param>
      <param name="count">Число байтов в массиве для использования в качестве данных.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> меньше нуля.  
  
- или - 
 Значение параметра <paramref name="count" /> меньше нуля.  
  
- или - 
 <paramref name="offset" /> + <paramref name="count" /> — 1 приводит к получению значения индекса, который выходит за пределы верхней границы <paramref name="data" />.</exception>
      <returns>Подпись DSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Выполняет вычисление хэш-значения указанных данных и подписывает его с использованием указанного формата сигнатуры.</summary>
      <param name="data">Подписываемые данные.</param>
      <param name="offset">Смещение в <paramref name="data" />, с которого начинается хэширование.</param>
      <param name="count">Число байтов, читаемых из объекта <paramref name="data" />.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.
 
или <paramref name="offset" /> меньше нуля.
 
или <paramref name="count" /> меньше нуля.
 
или <paramref name="offset" /> + <paramref name="count" /> — 1 приводит к получению значения индекса, который выходит за пределы верхней границы <paramref name="data" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> имеет <see langword="null" /> или пустой <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка в операции хэширования или подписывания.</exception>
      <returns>Подпись DSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Вычисляет хэш-значение заданного массива байтов с помощью указанного алгоритма хэширования и подписывает результирующее хэш-значение.</summary>
      <param name="data">Входные данные, для которых нужно вычислить хэш.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <returns>Подпись DSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Выполняет вычисление хэш-значения указанных данных и подписывает его с использованием указанного формата сигнатуры.</summary>
      <param name="data">Подписываемые данные.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> имеет <see langword="null" /> или пустой <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка в операции хэширования или подписывания.</exception>
      <returns>Подпись DSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Вычисляет хэш-значение заданного потока с помощью указанного алгоритма хэширования и подписывает результирующее хэш-значение.</summary>
      <param name="data">Входной поток, для которого нужно вычислить хэш.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <returns>Подпись DSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Выполняет вычисление хэш-значения указанных данных и подписывает его с использованием указанного формата сигнатуры.</summary>
      <param name="data">Подписываемые данные.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> имеет <see langword="null" /> или пустой <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка в операции хэширования или подписывания.</exception>
      <returns>Подпись DSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignDataCore(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Выполняет вычисление хэш-значения указанных данных и подписывает его с использованием указанного формата сигнатуры.</summary>
      <param name="data">Подписываемые данные.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка в операции хэширования или подписывания.</exception>
      <returns>Подпись DSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignDataCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Выполняет вычисление хэш-значения указанных данных и подписывает его с использованием указанного формата сигнатуры.</summary>
      <param name="data">Подписываемые данные.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка в операции хэширования или подписывания.</exception>
      <returns>Подпись DSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ToXmlString(System.Boolean)">
      <summary>Создает и возвращает XML-представление текущего объекта <see cref="T:System.Security.Cryptography.DSA" />.</summary>
      <param name="includePrivateParameters">Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.</param>
      <returns>Кодировка XML-строки текущего объекта <see cref="T:System.Security.Cryptography.DSA" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Пытается создать подпись DSA для указанного хэша в предоставленном буфере.</summary>
      <param name="hash">Подписываемый хэш.</param>
      <param name="destination">Диапазон байтов для получения подписи.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Этот экземпляр представляет только открытый ключ.

- или -

Тип реализации поддерживает только устаревший DSA (FIPS 186-2) и <paramref name="hash" /> не является 20-байтовым значением.

- или -

Не удалось создать подпись по другим причинам.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> достаточно большой для получения результата; в противном случае — значение<see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Пытается создать сигнатуру DSA для указанного значения хэша в указанном формате и поместить ее в предоставленном буфере.</summary>
      <param name="hash">Значение хэша для подписи.</param>
      <param name="destination">Буфер для получения подписи.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции подписывания произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> достаточно большой для получения сигнатуры; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignatureCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Пытается создать сигнатуру DSA для указанного значения хэша в указанном формате и поместить ее в предоставленном буфере.</summary>
      <param name="hash">Значение хэша для подписи.</param>
      <param name="destination">Буфер для получения подписи.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции подписывания произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> достаточно большой для получения сигнатуры; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате PKCS#8 EncryptedPrivateKeyInfo в предоставленный буфер с использованием пароля на основе байтов.</summary>
      <param name="passwordBytes">Байты, используемые в качестве пароля при шифровании материала ключа.</param>
      <param name="pbeParameters">Параметры шифрования на основе пароля (PBE), используемые при шифровании материала ключа.</param>
      <param name="destination">Диапазон байтов для получения данных PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.

- или -

<paramref name="pbeParameters" /> указывает, что следует использовать <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />: это требует паролей на основе <see cref="T:System.Char" />.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате PKCS#8 EncryptedPrivateKeyInfo в предоставленный буфер с использованием пароля на основе символов.</summary>
      <param name="password">Пароль, используемый при шифровании материала ключа.</param>
      <param name="pbeParameters">Параметры шифрования на основе пароля (PBE), используемые при шифровании материала ключа.</param>
      <param name="destination">Диапазон байтов для получения данных PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате PKCS#8 PrivateKeyInfo в предоставленный буфер.</summary>
      <param name="destination">Диапазон байтов для получения данных PKCS#8 PrivateKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате X.509 SubjectPublicKeyInfo в предоставленный буфер.</summary>
      <param name="destination">Диапазон байтов для получения данных X.509 SubjectPublicKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>Пытается вычислить хэш-значение предоставленных данных в предоставленный буфер.</summary>
      <param name="data">Данные, предназначенные для хэширования.</param>
      <param name="destination">Диапазон байтов для получения хэш-значения.</param>
      <param name="hashAlgorithm">Имя алгоритма хэширования для использования.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />.</param>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> достаточно большой для получения результата; в противном случае — значение<see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>Пытается создать подпись DSA для указанных данных в предоставленном буфере.</summary>
      <param name="data">Данные для хэширования и подписи.</param>
      <param name="destination">Диапазон байтов для получения подписи.</param>
      <param name="hashAlgorithm">Имя алгоритма хэширования для использования.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />.</param>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> достаточно большой для получения результата; в противном случае — значение<see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Пытается создать сигнатуру DSA для указанных данных в указанном формате и поместить ее в предоставленном буфере.</summary>
      <param name="data">Данные для хэширования и подписи.</param>
      <param name="destination">Буфер для получения подписи.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> имеет <see langword="null" /> или пустой <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции подписывания произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> достаточно велико для получения сигнатуры; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignDataCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Пытается создать сигнатуру DSA для указанных данных в указанном формате и поместить ее в предоставленном буфере.</summary>
      <param name="data">Данные для хэширования и подписи.</param>
      <param name="destination">Буфер для получения подписи.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции подписывания произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> достаточно велико для получения сигнатуры; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Проверяет допустимость цифровой подписи путем вычисления хэш-значения заданных данных с помощью указанного алгоритма хэширования и его сравнения с предоставленной подписью.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Данные подписи, которые требуется поверить.</param>
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="signature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Тип реализации поддерживает только устаревший DSA (FIPS 186-2), а хэш-алгоритм не является SHA-1.

- или -

Не удалось проверить подпись по другим причинам.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись является допустимой. В противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленных данных.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для хэширования данных для процесса проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> или <paramref name="signature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> имеет <see langword="null" /> или пустой <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции хэширования или проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Проверяет допустимость цифровой подписи путем вычисления хэш-значения данных во фрагменте массива байтов с помощью указанного алгоритма хэширования и его сравнения с предоставленной подписью.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="offset">Индекс, начиная с которого нужно вычислять хэш.</param>
      <param name="count">Количество байтов, хэширование которых необходимо выполнить.</param>
      <param name="signature">Данные подписи, которые требуется поверить.</param>
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="signature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> меньше нуля.  
  
- или - 
 Значение параметра <paramref name="count" /> меньше нуля.  
  
- или - 
 <paramref name="offset" /> + <paramref name="count" /> — 1 приводит к получению значения индекса, который выходит за пределы верхней границы <paramref name="data" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Тип реализации поддерживает только устаревший DSA (FIPS 186-2), а хэш-алгоритм не является SHA-1.

- или -

Не удалось проверить подпись по другим причинам.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись является допустимой. В противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленных данных.</summary>
      <param name="data">Массив, содержащий данные со знаком.</param>
      <param name="offset">Начальный индекс части <paramref name="data" /> со знаком.</param>
      <param name="count">Число байт в <paramref name="data" /> со знаком.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для хэширования данных для процесса проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> или <paramref name="signature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.
 
или <paramref name="offset" /> меньше нуля.
 
или <paramref name="count" /> меньше нуля.
 
или <paramref name="offset" /> + <paramref name="count" /> — 1 приводит к получению значения индекса, который выходит за пределы верхней границы <paramref name="data" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> имеет <see langword="null" /> или пустой <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции хэширования или проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Проверяет допустимость цифровой подписи путем вычисления хэш-значения заданного потока с помощью указанного алгоритма хэширования и его сравнения с предоставленной подписью.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Данные подписи, которые требуется поверить.</param>
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="signature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Тип реализации поддерживает только устаревший DSA (FIPS 186-2), а хэш-алгоритм не является SHA-1.

- или -

Не удалось проверить подпись по другим причинам.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись является допустимой. В противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленных данных.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для хэширования данных для процесса проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> или <paramref name="signature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> имеет <see langword="null" /> или пустой <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции хэширования или проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <summary>Проверяет допустимость цифровой подписи путем вычисления хэш-значения данных в диапазоне байтов с помощью указанного хэш-алгоритма и его сравнения с предоставленной подписью.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Подпись для проверки.</param>
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Тип реализации поддерживает только устаревший DSA (FIPS 186-2), а хэш-алгоритм не является SHA-1.

- или -

Не удалось проверить подпись по другим причинам.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись является допустимой. В противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленных данных.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для хэширования данных для процесса проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции хэширования или проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyDataCore(System.IO.Stream,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленных данных.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для хэширования данных для процесса проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции хэширования или проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленных данных.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для хэширования данных для процесса проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции хэширования или проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])">
      <summary>При переопределении в производном классе проверяет подпись <see cref="T:System.Security.Cryptography.DSA" /> для указанных данных.</summary>
      <param name="rgbHash">Хэш данных, подписанных с помощью <paramref name="rgbSignature" />.</param>
      <param name="rgbSignature">Подпись, которую требуется проверить для <c>rgbData</c>.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Тип реализации поддерживает только устаревший DSA (FIPS 186-2), а хэш-значение не является 20-байтовым.

- или -

Не удалось проверить подпись по другим причинам.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="rgbSignature" /> совпадает с подписью, вычисленной с помощью указанного хэш-алгоритма и ключа для <paramref name="rgbHash" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленного хэша.</summary>
      <param name="rgbHash">Подписанный хэш.</param>
      <param name="rgbSignature">Сигнатура для проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="rgbSignature" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="rgbHash" /> или <paramref name="rgbSignature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Проверяет допустимость цифровой подписи для предоставленного хэша данных.</summary>
      <param name="hash">Проверяемый хэш данных.</param>
      <param name="signature">Подпись для проверки.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Тип реализации поддерживает только устаревший DSA (FIPS 186-2), а хэш-значение не является 20-байтовым.

- или -

Не удалось проверить подпись по другим причинам.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись хэша верна; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленного хэша.</summary>
      <param name="hash">Подписанный хэш.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignatureCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленного хэша.</summary>
      <param name="hash">Подписанный хэш.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSAParameters">
      <summary>Содержит типичные параметры для алгоритма <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Counter">
      <summary>Задает счетчик для алгоритма <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.G">
      <summary>Задает параметр <see langword="G" /> для алгоритма <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.J">
      <summary>Задает параметр <see langword="J" /> для алгоритма <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.P">
      <summary>Задает параметр <see langword="P" /> для алгоритма <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Q">
      <summary>Задает параметр <see langword="Q" /> для алгоритма <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Seed">
      <summary>Задает начальное значение для алгоритма <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.X">
      <summary>Задает параметр <see langword="X" /> для алгоритма <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Y">
      <summary>Задает параметр <see langword="Y" /> для алгоритма <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureDeformatter">
      <summary>Проверяет подпись, созданную по алгоритму PKCS 1 v1.5 DSA (<see cref="T:System.Security.Cryptography.DSA" />).</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> с заданным ключом.</summary>
      <param name="key">Экземпляр DSA (<see cref="T:System.Security.Cryptography.DSA" />), в котором содержится ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>Задает хэш-алгоритм для объекта проверки подписи DSA (<see cref="T:System.Security.Cryptography.DSA" />).</summary>
      <param name="strName">Имя хэш-алгоритма, который необходимо использовать для объекта проверки подписи.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Параметр <paramref name="strName" /> не соответствует хэш-алгоритму <see cref="T:System.Security.Cryptography.SHA1" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Задает ключ, используемый объектом проверки подписи DSA (<see cref="T:System.Security.Cryptography.DSA" />).</summary>
      <param name="key">Экземпляр <see cref="T:System.Security.Cryptography.DSA" />, в котором содержится ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>Проверяет подпись DSA (<see cref="T:System.Security.Cryptography.DSA" />), созданную для данных.</summary>
      <param name="rgbHash">Данные, подписанные с помощью <paramref name="rgbSignature" />.</param>
      <param name="rgbSignature">Подпись, которую требуется проверить с использованием <paramref name="rgbHash" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> имеет значение <see langword="null" />.  
  
-или- 
 <paramref name="rgbSignature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Отсутствует ключ DSA.</exception>
      <returns>Значение <see langword="true" />, если подпись данных верна; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureFormat">
      <summary>Указывает формат данных для подписей с семейством алгоритмов DSA.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSASignatureFormat.IeeeP1363FixedFieldConcatenation">
      <summary>Формат подписи из IEEE P1363, который создает подпись фиксированного размера для данного ключа.</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSASignatureFormat.Rfc3279DerSequence">
      <summary>Формат подписи из IETF RFC 3279, который создает сигнатуру переменного размера.</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureFormatter">
      <summary>Создает подпись <see cref="T:System.Security.Cryptography.DSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.DSASignatureFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> с заданным ключом.</summary>
      <param name="key">Экземпляр <see cref="T:System.Security.Cryptography.DSA" />, в котором содержится ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.CreateSignature(System.Byte[])">
      <summary>Создает подпись <see cref="T:System.Security.Cryptography.DSA" /> PKCS 1 для указанных данных.</summary>
      <param name="rgbHash">Данные, которые должны быть подписаны.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Значение идентификатора объекта — <see langword="null" />.  
  
-или- 
Значение ключа DSA — <see langword="null" />.</exception>
      <returns>Цифровая подпись для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>Задает хэш-алгоритм для объекта создания подписи <see cref="T:System.Security.Cryptography.DSA" />.</summary>
      <param name="strName">Имя хэш-алгоритма, используемого объектом создания подписи.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Параметр <paramref name="strName" /> не соответствует хэш-алгоритму <see cref="T:System.Security.Cryptography.SHA1" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Задает ключ, используемый объектом создания подписи <see cref="T:System.Security.Cryptography.DSA" />.</summary>
      <param name="key">Экземпляр <see cref="T:System.Security.Cryptography.DSA" />, в котором содержится ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve">
      <summary>Представляет эллиптическую кривую.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.A">
      <summary>Первый коэффициент для явной кривой. <c>A</c> для коротких кривых Вейерштрасса, кривых Монтгомери и скрученных кривых Эдвардса.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.B">
      <summary>Второй коэффициент для явной кривой. <c>B</c> для коротких кривых Вейерштрасса и <c>d</c> для скрученных кривых Эдвардса.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Cofactor">
      <summary>Кофактор кривой.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.CurveType">
      <summary>Определяет состав объекта <see cref="T:System.Security.Cryptography.ECCurve" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.G">
      <summary>Генератор или базовая точка для операций на кривой.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Hash">
      <summary>Имя хэш-алгоритма, который использовался для создания коэффициентов кривой (<see cref="F:System.Security.Cryptography.ECCurve.A" /> и <see cref="F:System.Security.Cryptography.ECCurve.B" />) из <see cref="F:System.Security.Cryptography.ECCurve.Seed" /> согласно алгоритму формирования ANSI X9.62. Применяется только к явным кривым.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Order">
      <summary>Порядок кривой. Применяется только к явным кривым.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Polynomial">
      <summary>Полином, описывающий кривую. Применяется только к кривым характеристики 2.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Prime">
      <summary>Простое число, указывающее простое поле. Применяется только к простым кривым.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Seed">
      <summary>Начальное значение для создания коэффициента по алгоритму создания ANSI X9.62. Применяется только к явным кривым.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)">
      <summary>Создает именованную кривую, используя указанное понятное имя идентификатора.</summary>
      <param name="oidFriendlyName">Понятное имя идентификатора.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidFriendlyName" /> имеет значение <see langword="null" />.</exception>
      <returns>Объект, представляющий именованную кривую.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)">
      <summary>Создает именованную кривую с помощью указанного объекта <see cref="T:System.Security.Cryptography.Oid" />.</summary>
      <param name="curveOid">Используемый идентификатор объекта.</param>
      <returns>Объект, представляющий именованную кривую.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromValue(System.String)">
      <summary>Создает именованную кривую, используя указанное десятичное представление идентификатора с точками.</summary>
      <param name="oidValue">Значение идентификатора с точками.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidValue" /> имеет значение <see langword="null" />.</exception>
      <returns>Объект, представляющий именованную кривую.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.Validate">
      <summary>Проверяет целостность текущей кривой. Создает исключение <see cref="T:System.Security.Cryptography.CryptographicException" />, если структура не является допустимой.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Параметры кривой недопустимы для текущего типа кривой.</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsCharacteristic2">
      <summary>Получает значение, обозначающее, указывает ли тип кривой явную кривую характеристики 2.</summary>
      <returns>Значение <see langword="true" />, если кривая является явной кривой характеристики 2; значение <see langword="false" />, если кривая является именованной кривой характеристики 2, простой или неявной кривой.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsExplicit">
      <summary>Получает значение, обозначающее, указывает ли тип кривой явную кривую (простую кривую или кривую характеристики 2).</summary>
      <returns>Значение <see langword="true" />, если кривая является явной кривой (простой кривой или кривой характеристики 2); значение <see langword="false" />, если кривая является именованной или неявной кривой.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsNamed">
      <summary>Получает значение, обозначающее, указывает ли тип кривой именованную кривую.</summary>
      <returns>
        <see langword="true" /> значение, если кривая имеет именованную кривую; значение, <see langword="false" /> Если кривая является неявной или явной кривой (либо простой, либо характеристикой 2).</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsPrime">
      <summary>Получает значение, обозначающее, указывает ли тип кривой явную простую кривую.</summary>
      <returns>Значение <see langword="true" />, если кривая является явной простой кривой; значение <see langword="false" />, если кривая является именованной простой кривой, кривой характеристики 2 или неявной кривой.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.Oid">
      <summary>Получает идентификатор именованной кривой.</summary>
      <returns>Идентификатор именованной кривой.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.ECCurveType">
      <summary>Определяет способ интерпретации данных, содержащихся в объекте <see cref="T:System.Security.Cryptography.ECCurve" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Characteristic2">
      <summary>Параметры кривой представляют кривую характеристики 2.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Implicit">
      <summary>Данные кривой не интерпретируются. Предполагается, что вызывающему объекту известен тип кривой.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Named">
      <summary>Параметры кривой представляют именованную кривую.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeMontgomery">
      <summary>Параметры кривой представляют простую кривую с помощью формулы B*y^2 = x^3 + A*x^2 + x.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeShortWeierstrass">
      <summary>Параметры кривой представляют простую кривую с помощью формулы y^2 = x^3 + A*x + B в простом поле P.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeTwistedEdwards">
      <summary>Параметры кривой представляют простую кривую с помощью формулы A*x^2 + y^2 = 1 + B*x^2*y^2 в простом поле P.</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.NamedCurves">
      <summary>Представляет класс фабрики для создания именованных кривых.</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160r1">
      <summary>Получает именованную кривую brainpoolP160r1.</summary>
      <returns>Именованная кривая brainpoolP160r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160t1">
      <summary>Получает именованную кривую brainpoolP160t1.</summary>
      <returns>Именованная кривая brainpoolP160t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192r1">
      <summary>Получает именованную кривую brainpoolP192r1.</summary>
      <returns>Именованная кривая brainpoolP192r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192t1">
      <summary>Получает именованную кривую brainpoolP192t1.</summary>
      <returns>Именованная кривая brainpoolP192t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224r1">
      <summary>Получает именованную кривую brainpoolP224r1.</summary>
      <returns>Именованная кривая brainpoolP224r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224t1">
      <summary>Получает именованную кривую brainpoolP224t1.</summary>
      <returns>Именованная кривая brainpoolP224t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256r1">
      <summary>Получает именованную кривую brainpoolP256r1.</summary>
      <returns>Именованная кривая brainpoolP256r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256t1">
      <summary>Получает именованную кривую brainpoolP256t1.</summary>
      <returns>Именованная кривая brainpoolP256t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320r1">
      <summary>Получает именованную кривую brainpoolP320r1.</summary>
      <returns>Именованная кривая brainpoolP320r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320t1">
      <summary>Получает именованную кривую brainpoolP320t1.</summary>
      <returns>Именованная кривая brainpoolP320t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384r1">
      <summary>Получает именованную кривую brainpoolP384r1.</summary>
      <returns>Именованная кривая brainpoolP384r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384t1">
      <summary>Получает именованную кривую brainpoolP384t1.</summary>
      <returns>Именованная кривая brainpoolP384t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512r1">
      <summary>Получает именованную кривую brainpoolP512r1.</summary>
      <returns>Именованная кривая brainpoolP512r1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512t1">
      <summary>Получает именованную кривую brainpoolP512t1.</summary>
      <returns>Именованная кривая brainpoolP512t1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP256">
      <summary>Получает именованную кривую nistP256.</summary>
      <returns>Именованная кривая nistP256.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP384">
      <summary>Получает именованную кривую nistP384.</summary>
      <returns>Именованная кривая nistP384.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP521">
      <summary>Получает именованную кривую nistP521.</summary>
      <returns>Именованная кривая nistP521.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellman">
      <summary>Предоставляет абстрактный базовый класс, из которого создаются реализации алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH). Этот класс предоставляет базовый набор операций, которые должны поддерживать все реализации алгоритма ECDH.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create">
      <summary>Создает новый экземпляр реализации по умолчанию алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).</summary>
      <returns>Новый экземпляр реализации по умолчанию этого класса.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)">
      <summary>Создает новый экземпляр реализации по умолчанию алгоритма эллиптической кривой Диффи-Хелмана (ECDH) с новой парой открытого и закрытого ключей, созданных на основе указанной кривой.</summary>
      <param name="curve">Кривая, используемая для создания новой пары открытого и закрытого ключей.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> не выполняет проверку.</exception>
      <returns>Новый экземпляр реализации по умолчанию алгоритма эллиптической кривой Диффи-Хелмана (ECDH).</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)">
      <summary>Создает новый экземпляр реализации по умолчанию алгоритма эллиптической кривой Диффи-Хелмана (ECDH) с ключом, описываемым указанным объектом <see cref="T:System.Security.Cryptography.ECParameters" />.</summary>
      <param name="parameters">Параметры для алгоритма шифрования на основе эллиптических кривых (ECC).</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> не выполняет проверку.</exception>
      <returns>Новый экземпляр реализации по умолчанию алгоритма эллиптической кривой Диффи-Хелмана (ECDH).</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)">
      <summary>Создает новый экземпляр заданной реализации по умолчанию алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).</summary>
      <param name="algorithm">Имя реализации алгоритма ECDH.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="algorithm" /> имеет значение <see langword="null" />.</exception>
      <returns>Новый экземпляр заданной реализации этого класса. Если указанное название алгоритма не соответствует реализации ECDH, этот метод возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Выполняет формирование ключа с использованием указанного хэш-алгоритма.</summary>
      <param name="otherPartyPublicKey">Открытый ключ другой стороны.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для получения материала ключа.</param>
      <exception cref="T:System.ArgumentException">Размер кривой, используемой параметром <paramref name="otherPartyPublicKey" />, отличается от размера кривой из этого ключа.

-или-

В параметре <paramref name="hashAlgorithm" /> не указан хэш.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Кривая, используемая параметром <paramref name="otherPartyPublicKey" />, отличается от кривой из этого ключа.

-или-

Этот экземпляр представляет только открытый ключ.</exception>
      <returns>Хэш общего секрета.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>При реализации в производном классе выполняет формирование ключа с использованием указанного хэш-алгоритма с дополнительными данными, добавленными в начале или конце.</summary>
      <param name="otherPartyPublicKey">Открытый ключ другой стороны.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для получения материала ключа.</param>
      <param name="secretPrepend">Значение, добавляемое к производному секрету (в начало) перед хэшированием.</param>
      <param name="secretAppend">Значение, добавляемое к производному секрету перед хэшированием.</param>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <exception cref="T:System.ArgumentException">Размер кривой, используемой параметром <paramref name="otherPartyPublicKey" />, отличается от размера кривой из этого ключа.

-или-

В параметре <paramref name="hashAlgorithm" /> не указан хэш.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Кривая, используемая параметром <paramref name="otherPartyPublicKey" />, отличается от кривой из этого ключа.

-или-

Этот экземпляр представляет только открытый ключ.</exception>
      <returns>Хэш общего секрета после добавления данных по запросу в начале или конце.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>Выполняет формирование ключа с использованием указанного алгоритма HMAC.</summary>
      <param name="otherPartyPublicKey">Открытый ключ другой стороны.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для получения материала ключа.</param>
      <param name="hmacKey">Ключ HMAC.</param>
      <exception cref="T:System.ArgumentException">Размер кривой, используемой параметром <paramref name="otherPartyPublicKey" />, отличается от размера кривой из этого ключа.

-или-

В параметре <paramref name="hashAlgorithm" /> не указан хэш.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Кривая, используемая параметром <paramref name="otherPartyPublicKey" />, отличается от кривой из этого ключа.

-или-

Этот экземпляр представляет только открытый ключ.</exception>
      <returns>Код HMAC общего секрета.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])">
      <summary>При реализации в производном классе выполняет формирование ключа с использованием указанного алгоритма HMAC с дополнительными данными, добавленными в начале или конце.</summary>
      <param name="otherPartyPublicKey">Открытый ключ другой стороны.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для получения материала ключа.</param>
      <param name="hmacKey">Ключ HMAC.</param>
      <param name="secretPrepend">Значение, добавляемое к производному секрету (в начало) перед хэшированием.</param>
      <param name="secretAppend">Значение, добавляемое к производному секрету перед хэшированием.</param>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <exception cref="T:System.ArgumentException">Размер кривой, используемой параметром <paramref name="otherPartyPublicKey" />, отличается от размера кривой из этого ключа.

-или-

В параметре <paramref name="hashAlgorithm" /> не указан хэш.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Кривая, используемая параметром <paramref name="otherPartyPublicKey" />, отличается от кривой из этого ключа.

-или-

Этот экземпляр представляет только открытый ключ.</exception>
      <returns>Код HMAC общего секрета после добавления данных по запросу в начале или конце.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>При реализации в производном классе выполняет формирование ключа для общего секрета.</summary>
      <param name="otherPartyPublicKey">Открытый ключ другой стороны.</param>
      <exception cref="T:System.ArgumentException">Размер кривой, используемой параметром <paramref name="otherPartyPublicKey" />, отличается от размера кривой из этого ключа.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Кривая, используемая параметром <paramref name="otherPartyPublicKey" />, отличается от кривой из этого ключа.

-или-

Этот экземпляр представляет только открытый ключ.</exception>
      <returns>Результат функции формирования ключа при использовании общего секрета в качестве входных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])">
      <summary>При реализации в производном классе выполняет формирование ключа с использованием псевдослучайной функции (PRF) протокола TLS 1.1.</summary>
      <param name="otherPartyPublicKey">Открытый ключ другой стороны.</param>
      <param name="prfLabel">Метка PRF с использованием кодировки ASCII.</param>
      <param name="prfSeed">Начальное значение PRF (64-байтовое).</param>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <exception cref="T:System.ArgumentException">Размер кривой, используемой параметром <paramref name="otherPartyPublicKey" />, отличается от размера кривой из этого ключа.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="otherPartyPublicKey" />, <paramref name="prfLabel" /> или <paramref name="prfSeed" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="prfSeed" /> — длина не соответствует 64 байтам.

-или-

Кривая, используемая параметром <paramref name="otherPartyPublicKey" />, отличается от кривой из этого ключа.

-или-

Этот экземпляр представляет только открытый ключ.</exception>
      <returns>Первые 48 байт, полученные из функции PRF TLS 1.1 с использованием общего секрета в качестве ключа.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportECPrivateKey">
      <summary>Экспортирует текущий ключ в формате ECPrivateKey.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>Байтовый массив, содержащий представление этого ключа в формате ECPrivateKey.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)">
      <summary>При переопределении в производном классе экспортирует сведения об открытом или открытом и закрытом ключе, используя формат явной кривой в работающем разделе <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> в структуру <see cref="T:System.Security.Cryptography.ECParameters" /> таким образом, чтобы их можно было передать в метод <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.</summary>
      <param name="includePrivateParameters">Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <returns>Объект, представляющий точку на кривой для этого ключа, в формате явной кривой.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)">
      <summary>При переопределении в производном классе экспортирует сведения об открытом или открытом и закрытом ключе из рабочего раздела <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> в структуру <see cref="T:System.Security.Cryptography.ECParameters" /> таким образом, чтобы их можно было передать в метод <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.</summary>
      <param name="includePrivateParameters">Значение <see langword="true" /> для включения закрытых параметров; в противном случае — <see langword="false" /> для включения только открытых параметров.</param>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <returns>Объект, представляющий точку на кривой для этого ключа. Может передаваться в метод <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.FromXmlString(System.String)">
      <summary>Этот метод выдает исключение во всех случаях.</summary>
      <param name="xmlString">XML-строка, используемая для восстановления объекта <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />.</param>
      <exception cref="T:System.NotImplementedException">Во всех случаях.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>При переопределении в производном классе создает новую пару открытого и закрытого эфемерных ключей для указанной кривой.</summary>
      <param name="curve">Кривая, используемая для создания пары открытого и закрытого эфемерных ключей.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> не выполняет проверку.</exception>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару открытого и закрытого ключей из структуры ECPrivateKey и заменяет ключи для этого объекта.</summary>
      <param name="source">Байты структуры ECPrivateKey в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Содержимое <paramref name="source" /> не представляет структуру PKCS#8 ECPrivateKey в кодировке ASN.1-BER.

-или-

Ключ не импортирован.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару из открытого и закрытого ключей из структуры PKCS#8 EncryptedPrivateKeyInfo после расшифровки с помощью пароля на основе байтов, заменяя ключи для этого объекта.</summary>
      <param name="passwordBytes">Байты, используемые в качестве пароля при расшифровке материала ключа.</param>
      <param name="source">Байты структуры PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

-или-

Содержимое <paramref name="source" />, указывающее, что как функцию формирования ключа (KDF) следует использовать устаревшую версию PKCS#12 KDF, которая требует пароли на основе <see cref="T:System.Char" />.

-или-

Содержимое <paramref name="source" /> не представляет структуру PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.

-или-

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

-или-

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

-или-

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару из открытого и закрытого ключей из структуры PKCS#8 EncryptedPrivateKeyInfo после расшифровки с помощью пароля на основе символов, заменяя ключи для этого объекта.</summary>
      <param name="password">Пароль, используемый при расшифровке материала ключа.</param>
      <param name="source">Байты структуры PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

-или-

Содержимое <paramref name="source" /> не представляет структуру PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.

-или-

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

-или-

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

-или-

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Импортирует зашифрованный закрытый ключ в формате RFC 7468 в кодировке PEM, заменяя ключи для этого объекта.</summary>
      <param name="input">Текст PEM зашифрованного ключа для импорта.</param>
      <param name="passwordBytes">Байты, используемые в качестве пароля при расшифровке материала ключа.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> не содержит ключ в кодировке PEM с распознанной меткой.

-или-

<paramref name="input" /> содержит несколько ключей в кодировке PEM с распознанной меткой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

-или-

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> не представляет структуру ASN.1-BER PKCS#8 EncryptedPrivateKeyInfo.

-или-

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> указывает ключ для алгоритма, отличного от алгоритма, представленного этим экземпляром.

-или-

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> представляет ключ в неподдерживаемом формате.

-или-

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Импортирует зашифрованный закрытый ключ в формате RFC 7468 в кодировке PEM, заменяя ключи для этого объекта.</summary>
      <param name="input">Текст PEM зашифрованного ключа для импорта.</param>
      <param name="password">Пароль, используемый при расшифровке материала ключа.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> не содержит ключ в кодировке PEM с распознанной меткой.

-или-

<paramref name="input" /> содержит несколько ключей в кодировке PEM с распознанной меткой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

-или-

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> не представляет структуру ASN.1-BER PKCS#8 EncryptedPrivateKeyInfo.

-или-

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> указывает ключ для алгоритма, отличного от алгоритма, представленного этим экземпляром.

-или-

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> представляет ключ в неподдерживаемом формате.

-или-

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>Импортирует зашифрованный ключ в формате RFC 7468 в кодировке PEM, заменив ключи для этого объекта.</summary>
      <param name="input">Текст PEM импортируемого ключа.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> не содержит ключ в кодировке PEM с распознанной меткой.

-или-

<paramref name="input" /> содержит несколько ключей в кодировке PEM с распознанной меткой.

-или-

<paramref name="input" /> содержит зашифрованный ключ в кодировке PEM.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>При переопределении в производном классе импортирует заданные параметры для <see cref="T:System.Security.Cryptography.ECCurve" /> как эфемерный ключ в текущий объект <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</summary>
      <param name="parameters">Параметры кривой для импорта.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> не выполняет проверку.</exception>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару из открытого и закрытого ключей из структуры PKCS#8 PrivateKeyInfo после расшифровки, заменяя ключи для этого объекта.</summary>
      <param name="source">Байты структуры PKCS#8 PrivateKeyInfo в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Содержимое <paramref name="source" /> не представляет структуру PKCS#8 PrivateKeyInfo в кодировке ASN.1-BER.

-или-

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

-или-

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

-или-

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует открытый ключ из структуры X.509 SubjectPublicKeyInfo после расшифровки, заменяя ключи для этого объекта.</summary>
      <param name="source">Байты структуры X.509 SubjectPublicKeyInfo в кодировке ASN.1-DER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Содержимое <paramref name="source" /> не представляет структуру X.509 SubjectPublicKeyInfo в кодировке ASN.1-DER.

-или-

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

-или-

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

-или-

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ToXmlString(System.Boolean)">
      <summary>Этот метод выдает исключение во всех случаях.</summary>
      <param name="includePrivateParameters">Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.NotImplementedException">Во всех случаях.</exception>
      <returns>Этот метод не возвращает значение.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате <see langword="ECPrivateKey" /> в предоставленный буфер.</summary>
      <param name="destination">Диапазон байтов для получения данных <see langword="ECPrivateKey" />.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате PKCS#8 EncryptedPrivateKeyInfo в предоставленный буфер с использованием пароля на основе байтов.</summary>
      <param name="passwordBytes">Байты, используемые в качестве пароля при шифровании материала ключа.</param>
      <param name="pbeParameters">Параметры шифрования на основе пароля (PBE), используемые при шифровании материала ключа.</param>
      <param name="destination">Диапазон байтов для получения данных PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.

-или-

<paramref name="pbeParameters" /> указывает, что следует использовать <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />: это требует паролей на основе <see cref="T:System.Char" />.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате PKCS#8 EncryptedPrivateKeyInfo в предоставленный буфер с использованием пароля на основе символов.</summary>
      <param name="password">Пароль, используемый при шифровании материала ключа.</param>
      <param name="pbeParameters">Параметры шифрования на основе пароля (PBE), используемые при шифровании материала ключа.</param>
      <param name="destination">Диапазон байтов для получения данных PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате PKCS#8 PrivateKeyInfo в предоставленный буфер.</summary>
      <param name="destination">Диапазон байтов для получения данных PKCS#8 PrivateKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате X.509 SubjectPublicKeyInfo в предоставленный буфер.</summary>
      <param name="destination">Диапазон байтов для получения данных X.509 SubjectPublicKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm">
      <summary>Получает имя алгоритма обмена ключами.</summary>
      <returns>Имя алгоритма обмена ключами.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.PublicKey">
      <summary>Получает открытый ключ, используемый текущим экземпляром ECDH.</summary>
      <returns>Открытая часть пары ключей ECDH, используемая этим экземпляром <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm">
      <summary>Получает имя алгоритма подписи.</summary>
      <returns>Всегда <see langword="null" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>Предоставляет абстрактный базовый класс, от которого должны наследоваться все реализации <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.</summary>
      <param name="keyBlob">Массив байтов, представляющий объект <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Security.Cryptography.ECDiffieHellman" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые классом <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> (при необходимости освобождает и управляемые ресурсы).</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportExplicitParameters">
      <summary>Если переопределено в производном классе, экспортирует явный объект <see cref="T:System.Security.Cryptography.ECParameters" /> для объекта <see cref="T:System.Security.Cryptography.ECCurve" />.</summary>
      <exception cref="T:System.NotSupportedException">Производный класс должен переопределять этот метод.</exception>
      <returns>Объект, представляющий точку на кривой для этого ключа, в формате явной кривой.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportParameters">
      <summary>Если переопределено в производном классе, экспортирует именованный или явный объект <see cref="T:System.Security.Cryptography.ECParameters" /> для объекта <see cref="T:System.Security.Cryptography.ECCurve" />.</summary>
      <exception cref="T:System.NotSupportedException">Производный класс должен переопределять этот метод.</exception>
      <returns>Объект, представляющий точку на кривой для этого ключа.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>Выполняет сериализацию BLOB-объекта ключа <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> в массив байтов.</summary>
      <returns>Массив байтов, в котором содержится сериализованный открытый ключ алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>Выполняет сериализацию открытого ключа <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> в XML-строку.</summary>
      <returns>XML-строка, в которой содержится сериализованный открытый ключ алгоритма Диффи-Хеллмана на эллиптических кривых (ECDH).</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>Предоставляет абстрактный базовый класс, который инкапсулирует алгоритм цифровых подписей на основе эллиптических кривых (ECDSA).</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.ECDsa" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>Создает новый экземпляр реализации по умолчанию алгоритма цифровой подписи DSA на эллиптических кривых (Elliptic Curve Digital Signature Algorithm, ECDSA).</summary>
      <returns>Новый экземпляр реализации по умолчанию (<see cref="T:System.Security.Cryptography.ECDsaCng" />) этого класса.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)">
      <summary>Создает новый экземпляр реализации по умолчанию на основе алгоритма цифровых подписей на основе эллиптических кривых (ECDSA), используя новый созданный ключ на основе указанной кривой.</summary>
      <param name="curve">Кривая, используемая для создания ключа.</param>
      <returns>Новый экземпляр реализации по умолчанию (<see cref="T:System.Security.Cryptography.ECDsaCng" />) этого класса.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)">
      <summary>Создает новый экземпляр реализации по умолчанию на основе алгоритма цифровых подписей на основе эллиптических кривых (ECDSA), используя указанные параметры в качестве ключа.</summary>
      <param name="parameters">Параметры, представляющие используемый ключ.</param>
      <returns>Новый экземпляр реализации по умолчанию (<see cref="T:System.Security.Cryptography.ECDsaCng" />) этого класса.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>Создает новый экземпляр заданной реализации алгоритма цифровой подписи DSA на эллиптических кривых (Elliptic Curve Digital Signature Algorithm, ECDSA).</summary>
      <param name="algorithm">Имя реализации ECDSA. Все следующие строки относятся к одной и той же реализации, являющейся единственной реализацией, которая в настоящее время поддерживается .NET Framework: 
– "ECDsa"; 
– "ECDsaCng"; 
– "System.Security.Cryptography.ECDsaCng". 
Также можно предоставить имя пользовательской реализации ECDSA.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="algorithm" /> имеет значение <see langword="null" />.</exception>
      <returns>Новый экземпляр указанной реализации этого класса. Если заданное имя алгоритма не соответствует реализации ECDSA, этот метод возвращает значение <see langword="null" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportECPrivateKey">
      <summary>Экспортирует текущий ключ в формате ECPrivateKey.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>Байтовый массив, содержащий представление этого ключа в формате ECPrivateKey.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
      <summary>Если переопределено в производном классе, экспортирует явные параметры для эллиптической кривой.</summary>
      <param name="includePrivateParameters">Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException">Производный класс должен переопределять этот метод.</exception>
      <returns>Параметры, представляющие точку на кривой для этого ключа, в формате явной кривой.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
      <summary>Если переопределено в производном классе, экспортирует именованные или явные параметры для эллиптической кривой. Если кривая имеет имя, поле <see cref="F:System.Security.Cryptography.ECParameters.Curve" /> содержит параметры именованной кривой; в противном случае оно содержит параметры явной кривой.</summary>
      <param name="includePrivateParameters">Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException">Производный класс должен переопределять этот метод.</exception>
      <returns>Параметры, представляющие точку на кривой для этого ключа.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.FromXmlString(System.String)">
      <summary>Этот метод выдает исключение во всех случаях.</summary>
      <param name="xmlString">XML-строка, используемая для восстановления объекта <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" />.</param>
      <exception cref="T:System.NotImplementedException">Во всех случаях.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>При переопределении в производном классе создает новую пару открытого и закрытого эфемерных ключей для указанной кривой, заменяющую текущий ключ.</summary>
      <param name="curve">Кривая, используемая для создания ключа.</param>
      <exception cref="T:System.NotSupportedException">Производный класс должен переопределять этот метод.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GetMaxSignatureSize(System.Security.Cryptography.DSASignatureFormat)">
      <summary>Получает самый крупный размер в байтах для сигнатуры, созданной этим ключом в указанном формате.</summary>
      <param name="signatureFormat">Формат кодирования для сигнатуры.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <returns>Самый крупный размер в байтах для сигнатуры, созданной этим ключом в указанном формате.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>При переопределении в производном классе вычисляет хэш-значение указанного фрагмента массива байтов с помощью заданного алгоритма хэширования.</summary>
      <param name="data">Данные, предназначенные для хэширования.</param>
      <param name="offset">Индекс первого байта в <paramref name="data" />, хэширование которого требуется выполнить.</param>
      <param name="count">Количество байтов, хэширование которых необходимо выполнить.</param>
      <param name="hashAlgorithm">Алгоритм, который будет использоваться для хэширования данных.</param>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <returns>Хэшированные данные.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>При переопределении в производном классе вычисляет хэш-значение указанного двоичного потока с помощью заданного алгоритма хэширования.</summary>
      <param name="data">Двоичный поток, хэширование которого требуется выполнить.</param>
      <param name="hashAlgorithm">Алгоритм, который будет использоваться для хэширования данных.</param>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <returns>Хэшированные данные.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару открытого и закрытого ключей из структуры ECPrivateKey и заменяет ключи для этого объекта.</summary>
      <param name="source">Байты структуры ECPrivateKey в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Содержимое <paramref name="source" /> не представляет структуру PKCS#8 ECPrivateKey в кодировке ASN.1-BER.

-или-

Ключ не импортирован.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару из открытого и закрытого ключей из структуры PKCS#8 EncryptedPrivateKeyInfo после расшифровки с помощью пароля на основе байтов, заменяя ключи для этого объекта.</summary>
      <param name="passwordBytes">Байты, используемые в качестве пароля при расшифровке материала ключа.</param>
      <param name="source">Байты структуры PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

-или-

Содержимое <paramref name="source" />, указывающее, что как функцию формирования ключа (KDF) следует использовать устаревшую версию PKCS#12 KDF, которая требует пароли на основе <see cref="T:System.Char" />.

-или-

Содержимое <paramref name="source" /> не представляет структуру PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.

-или-

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

-или-

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

-или-

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару из открытого и закрытого ключей из структуры PKCS#8 EncryptedPrivateKeyInfo после расшифровки с помощью пароля на основе символов, заменяя ключи для этого объекта.</summary>
      <param name="password">Пароль, используемый при расшифровке материала ключа.</param>
      <param name="source">Байты структуры PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

-или-

Содержимое <paramref name="source" /> не представляет структуру PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.

-или-

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

-или-

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

-или-

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Импортирует зашифрованный закрытый ключ в формате RFC 7468 в кодировке PEM, заменяя ключи для этого объекта.</summary>
      <param name="input">Текст PEM зашифрованного ключа для импорта.</param>
      <param name="passwordBytes">Байты, используемые в качестве пароля при расшифровке материала ключа.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> не содержит ключ в кодировке PEM с распознанной меткой.

-или-

<paramref name="input" /> содержит несколько ключей в кодировке PEM с распознанной меткой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

-или- 
Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> не представляет структуру ASN.1-BER PKCS#8 EncryptedPrivateKeyInfo.

-или-

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> указывает ключ для алгоритма, отличного от алгоритма, представленного этим экземпляром.

-или-

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> представляет ключ в неподдерживаемом формате.

-или-

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Импортирует зашифрованный закрытый ключ в формате RFC 7468 в кодировке PEM, заменяя ключи для этого объекта.</summary>
      <param name="input">Текст PEM зашифрованного ключа для импорта.</param>
      <param name="password">Пароль, используемый при расшифровке материала ключа.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> не содержит ключ в кодировке PEM с распознанной меткой.

-или-

<paramref name="input" /> содержит несколько ключей в кодировке PEM с распознанной меткой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

-или-

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> не представляет структуру ASN.1-BER PKCS#8 EncryptedPrivateKeyInfo.

-или-

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> указывает ключ для алгоритма, отличного от алгоритма, представленного этим экземпляром.

-или-

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> представляет ключ в неподдерживаемом формате.

-или-

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>Импортирует зашифрованный ключ в формате RFC 7468 в кодировке PEM, заменив ключи для этого объекта.</summary>
      <param name="input">Текст PEM импортируемого ключа.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> не содержит ключ в кодировке PEM с распознанной меткой.

-или-

<paramref name="input" /> содержит несколько ключей в кодировке PEM с распознанной меткой.

-или-

<paramref name="input" /> содержит зашифрованный ключ в кодировке PEM.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>Если переопределено в производном классе, импортирует указанные объекты.</summary>
      <param name="parameters">Параметры кривой.</param>
      <exception cref="T:System.NotSupportedException">Производный класс должен переопределять этот метод.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару из открытого и закрытого ключей из структуры PKCS#8 PrivateKeyInfo после расшифровки, заменяя ключи для этого объекта.</summary>
      <param name="source">Байты структуры PKCS#8 PrivateKeyInfo в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Содержимое <paramref name="source" /> не представляет структуру PKCS#8 PrivateKeyInfo в кодировке ASN.1-BER.

-или-

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

-или-

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

-или-

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует открытый ключ из структуры X.509 SubjectPublicKeyInfo после расшифровки, заменяя ключи для этого объекта.</summary>
      <param name="source">Байты структуры X.509 SubjectPublicKeyInfo в кодировке ASN.1-DER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Содержимое <paramref name="source" /> не представляет структуру X.509 SubjectPublicKeyInfo в кодировке ASN.1-DER.

-или-

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

-или-

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

-или-

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Вычисляет хэш-значение фрагмента заданного массива байтов с помощью указанного алгоритма хэширования и подписывает результирующее хэш-значение.</summary>
      <param name="data">Входные данные, для которых нужно вычислить хэш.</param>
      <param name="offset">Смещение в массиве, начиная с которого следует использовать данные.</param>
      <param name="count">Число байтов в массиве для использования в качестве данных.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> меньше нуля.  
  
-или- 
 Значение параметра <paramref name="count" /> меньше нуля.  
  
-или- 
 <paramref name="offset" /> + <paramref name="count" /> — 1 приводит к получению значения индекса, который выходит за пределы верхней границы <paramref name="data" />.</exception>
      <returns>Подпись ECDSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Выполняет вычисление хэш-значения указанных данных и подписывает его с использованием указанного формата сигнатуры.</summary>
      <param name="data">Подписываемые данные.</param>
      <param name="offset">Смещение в <paramref name="data" />, с которого начинается хэширование.</param>
      <param name="count">Число байтов, читаемых из объекта <paramref name="data" />.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.
 
-или- 
 Значение параметра <paramref name="offset" /> меньше нуля.
 
-или- 
 Значение параметра <paramref name="count" /> меньше нуля.
 
-или- 
 <paramref name="offset" /> + <paramref name="count" /> — 1 приводит к получению значения индекса, который выходит за пределы верхней границы <paramref name="data" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> имеет <see langword="null" /> или пустой <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка в операции хэширования или подписывания.</exception>
      <returns>Подпись ECDSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Вычисляет хэш-значение заданного массива байтов с помощью указанного алгоритма хэширования и подписывает результирующее хэш-значение.</summary>
      <param name="data">Входные данные, для которых нужно вычислить хэш.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <returns>Подпись ECDSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Выполняет вычисление хэш-значения указанных данных и подписывает его с использованием указанного формата сигнатуры.</summary>
      <param name="data">Подписываемые данные.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> имеет <see langword="null" /> или пустой <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка в операции хэширования или подписывания.</exception>
      <returns>Подпись ECDSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Вычисляет хэш-значение заданного потока с помощью указанного алгоритма хэширования и подписывает результирующее хэш-значение.</summary>
      <param name="data">Входной поток, для которого нужно вычислить хэш.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <returns>Подпись ECDSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Выполняет вычисление хэш-значения указанных данных и подписывает его с использованием указанного формата сигнатуры.</summary>
      <param name="data">Подписываемые данные.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> имеет <see langword="null" /> или пустой <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка в операции хэширования или подписывания.</exception>
      <returns>Подпись ECDSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignDataCore(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Выполняет вычисление хэш-значения указанных данных и подписывает его с использованием указанного формата сигнатуры.</summary>
      <param name="data">Подписываемые данные.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка в операции хэширования или подписывания.</exception>
      <returns>Подпись ECDSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignDataCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Выполняет вычисление хэш-значения указанных данных и подписывает его с использованием указанного формата сигнатуры.</summary>
      <param name="data">Подписываемые данные.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка в операции хэширования или подписывания.</exception>
      <returns>Подпись ECDSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>Создает цифровую подпись для указанного хэш-значения.</summary>
      <param name="hash">Хэш-значение подписываемых данных.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="hash" /> имеет значение <see langword="null" />.</exception>
      <returns>Цифровая подпись для указанного хэш-значения.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>Вычисление сигнатуры ECDSA для указанного значения хэша в указанном формате.</summary>
      <param name="hash">Значение хэша для подписи.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции подписывания произошла ошибка.</exception>
      <returns>Подпись ECDSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHashCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>Вычисление сигнатуры ECDSA для указанного значения хэша в указанном формате.</summary>
      <param name="hash">Значение хэша для подписи.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции подписывания произошла ошибка.</exception>
      <returns>Подпись ECDSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)">
      <summary>Этот метод выдает исключение во всех случаях.</summary>
      <param name="includePrivateParameters">Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.NotImplementedException">Во всех случаях.</exception>
      <returns>Этот метод не возвращает значение.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате ECPrivateKey в предоставленный буфер.</summary>
      <param name="destination">Диапазон байт для получения данных ECPrivateKey.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате PKCS#8 EncryptedPrivateKeyInfo в предоставленный буфер с использованием пароля на основе байтов.</summary>
      <param name="passwordBytes">Байты, используемые в качестве пароля при шифровании материала ключа.</param>
      <param name="pbeParameters">Параметры шифрования на основе пароля (PBE), используемые при шифровании материала ключа.</param>
      <param name="destination">Диапазон байтов для получения данных PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.

-или-

<paramref name="pbeParameters" /> указывает, что следует использовать <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />: это требует паролей на основе <see cref="T:System.Char" />.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате PKCS#8 EncryptedPrivateKeyInfo в предоставленный буфер с использованием пароля на основе символов.</summary>
      <param name="password">Пароль, используемый при шифровании материала ключа.</param>
      <param name="pbeParameters">Параметры шифрования на основе пароля (PBE), используемые при шифровании материала ключа.</param>
      <param name="destination">Диапазон байтов для получения данных PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате PKCS#8 PrivateKeyInfo в предоставленный буфер.</summary>
      <param name="destination">Диапазон байтов для получения данных PKCS#8 PrivateKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате X.509 SubjectPublicKeyInfo в предоставленный буфер.</summary>
      <param name="destination">Диапазон байтов для получения данных X.509 SubjectPublicKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>Пытается с помощью указанного алгоритма хэширования вычислить хэш-значение указанного диапазона байтов только для чтения и записать результат в предоставленное назначение.</summary>
      <param name="data">Данные, предназначенные для хэширования.</param>
      <param name="destination">Буфер для получения значения хэша.</param>
      <param name="hashAlgorithm">Алгоритм, который будет использоваться для хэширования данных.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <returns>
        <see langword="false" />, если <paramref name="destination" /> имеет недостаточную длину для получения хэш-значения.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>Пытается с помощью указанного алгоритма хэширования и используемого ключа вычислить цифровую подпись ECDSA указанного диапазона байтов только для чтения и записать результат в предоставленное назначение.</summary>
      <param name="data">Данные, которые должны быть подписаны.</param>
      <param name="destination">Буфер для получения подписи.</param>
      <param name="hashAlgorithm">Алгоритм хэширования данных, которые должны быть подписаны.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <returns>
        <see langword="false" />, если <paramref name="destination" /> имеет недостаточную длину для получения подписи.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Пытается создать сигнатуру ECDSA для указанных данных в указанном формате в предоставленном буфере.</summary>
      <param name="data">Данные для хэширования и подписи.</param>
      <param name="destination">Буфер для получения подписи.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> имеет <see langword="null" /> или пустой <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции подписывания произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> достаточно велико для получения сигнатуры; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignDataCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Пытается создать сигнатуру ECDSA для указанных данных в указанном формате в предоставленном буфере.</summary>
      <param name="data">Данные для хэширования и подписи.</param>
      <param name="destination">Буфер для получения подписи.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции подписывания произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> достаточно велико для получения сигнатуры; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Пытается с помощью используемого ключа вычислить цифровую подпись ECDSA указанного диапазона байтов только для чтения, представляющего собой хэш данных, и записать результат в предоставленное назначение.</summary>
      <param name="hash">Хэш-значение подписываемых данных.</param>
      <param name="destination">Буфер для получения подписи.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <returns>
        <see langword="false" />, если <paramref name="destination" /> имеет недостаточную длину для получения подписи.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Пытается создать сигнатуру ECDSA для указанного значения хэша в указанном формате в предоставленном буфере.</summary>
      <param name="hash">Значение хэша для подписи.</param>
      <param name="destination">Буфер для получения подписи.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции подписывания произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> достаточно велико для получения сигнатуры; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHashCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>Пытается создать сигнатуру ECDSA для указанного значения хэша в указанном формате в предоставленном буфере.</summary>
      <param name="hash">Значение хэша для подписи.</param>
      <param name="destination">Буфер для получения подписи.</param>
      <param name="signatureFormat">Формат кодирования, используемый для подписи.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции подписывания произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> достаточно велико для получения сигнатуры; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Проверяет, подходит ли цифровая подпись для текущего ключа и заданных данных, с помощью указанного хэш-алгоритма.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Данные подписи, которые требуется поверить.</param>
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.  
  
-или- 
 <paramref name="signature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <returns>Значение <see langword="true" />, если подпись является допустимой; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленных данных.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для хэширования данных для процесса проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> или <paramref name="signature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> имеет <see langword="null" /> или пустой <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции хэширования или проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Проверяет, подходит ли цифровая подпись для используемого ключа и предоставленного фрагмента данных, с помощью указанного хэш-алгоритма.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="offset">Индекс, начиная с которого нужно вычислять хэш.</param>
      <param name="count">Количество байтов, хэширование которых необходимо выполнить.</param>
      <param name="signature">Данные подписи, которые требуется поверить.</param>
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.  
  
-или- 
 <paramref name="signature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> меньше нуля.  
  
-или- 
 Значение параметра <paramref name="count" /> меньше нуля.  
  
-или- 
 <paramref name="offset" /> + <paramref name="count" /> — 1 приводит к получению значения индекса, который выходит за пределы верхней границы <paramref name="data" />.</exception>
      <returns>Значение <see langword="true" />, если подпись является допустимой; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленных данных.</summary>
      <param name="data">Массив, содержащий данные со знаком.</param>
      <param name="offset">Начальный индекс части <paramref name="data" /> со знаком.</param>
      <param name="count">Число байт в <paramref name="data" /> со знаком.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для хэширования данных для процесса проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> или <paramref name="signature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.
 
-или- 
 Значение параметра <paramref name="offset" /> меньше нуля.
 
-или- 
 Значение параметра <paramref name="count" /> меньше нуля.
 
-или- 
 <paramref name="offset" /> + <paramref name="count" /> — 1 приводит к получению значения индекса, который выходит за пределы верхней границы <paramref name="data" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> имеет <see langword="null" /> или пустой <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции хэширования или проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>Проверяет, подходит ли цифровая подпись для текущего ключа и заданных данных, с помощью указанного хэш-алгоритма.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Данные подписи, которые требуется поверить.</param>
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.  
  
-или- 
 <paramref name="signature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <returns>Значение <see langword="true" />, если подпись является допустимой; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленных данных.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для хэширования данных для процесса проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> или <paramref name="signature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> имеет <see langword="null" /> или пустой <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции хэширования или проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <summary>Проверяет, подходит ли цифровая подпись для текущего ключа и заданных данных, с помощью указанного хэш-алгоритма.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Подпись для проверки.</param>
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <returns>Значение <see langword="true" />, если подпись является допустимой; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленных данных.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для хэширования данных для процесса проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции хэширования или проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyDataCore(System.IO.Stream,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленных данных.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для хэширования данных для процесса проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции хэширования или проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленных данных.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для хэширования данных для процесса проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции хэширования или проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>Проверяет, подходит ли цифровая подпись для используемого ключа и заданного хэша данных.</summary>
      <param name="hash">Хэш-значение проверяемых данных.</param>
      <param name="signature">Цифровая подпись данных, которую требуется проверить с использованием хэш-значения.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="hash" /> или <paramref name="signature" /> имеет значение <see langword="null" />.</exception>
      <returns>Значение <see langword="true" />, если подпись является допустимой; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленного хэша.</summary>
      <param name="hash">Подписанный хэш.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="hash" /> или <paramref name="signature" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Проверяет, подходит ли цифровая подпись для используемого ключа и заданного хэша данных.</summary>
      <param name="hash">Хэш-значение проверяемых данных.</param>
      <param name="signature">Цифровая подпись данных, которую требуется проверить с использованием хэш-значения.</param>
      <returns>Значение <see langword="true" />, если подпись является допустимой; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленного хэша.</summary>
      <param name="hash">Подписанный хэш.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> не является известным форматом.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHashCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>Проверяет допустимость цифровой подписи для предоставленного хэша.</summary>
      <param name="hash">Подписанный хэш.</param>
      <param name="signature">Сигнатура для проверки.</param>
      <param name="signatureFormat">Формат кодирования для <paramref name="signature" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">В операции проверки произошла ошибка.</exception>
      <returns>Значение <see langword="true" />, если цифровая подпись действительна для предоставленных данных; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>Получает имя алгоритма обмена ключами.</summary>
      <returns>Всегда <see langword="null" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>Получает имя алгоритма подписи.</summary>
      <returns>Строка "ECDsa".</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECParameters">
      <summary>Представляет стандартные параметры для алгоритма шифрования на основе эллиптических кривых (ECC).</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Curve">
      <summary>Представляет кривую, связанную с открытым ключом (<see cref="F:System.Security.Cryptography.ECParameters.Q" />) и, дополнительно, с закрытым ключом (<see cref="F:System.Security.Cryptography.ECParameters.D" />).</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.D">
      <summary>Представляет закрытый ключ <see langword="D" /> для алгоритма шифрования на основе эллиптических кривых (ECC), хранящийся в формате с обратным порядком байтов.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Q">
      <summary>Представляет открытый ключ <see langword="Q" /> для алгоритма шифрования на основе эллиптических кривых (ECC).</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECParameters.Validate">
      <summary>Проверяет текущий объект.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Параметры кривой или ключа недопустимы для текущего типа кривой.</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECPoint">
      <summary>Представляет пару координат (X,Y) для структур шифрования на основе эллиптических кривых (ECC).</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.X">
      <summary>Представляет координату Х.</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.Y">
      <summary>Представляет координату Y.</summary>
    </member>
    <member name="T:System.Security.Cryptography.HKDF">
      <summary>RFC 5869. Формирование ключей функций HMAC Extract и Expand (HKDF)</summary>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.DeriveKey(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Int32,System.Byte[],System.Byte[])">
      <summary>Выполняет формирование ключа функций HKDF Expand и Extract.</summary>
      <param name="hashAlgorithmName">Хэш-алгоритм, используемый для операций HMAC.</param>
      <param name="ikm">Материал ключей входных данных.</param>
      <param name="outputLength">Длина материала ключей выходных данных.</param>
      <param name="salt">Необязательное случайное значение (несекретное случайное значение). Если не указано, по умолчанию используется массив байтов той же длины, что и выходные данные указанного хэш-алгоритма.</param>
      <param name="info">Необязательный контекст и сведения, относящиеся к приложению.</param>
      <returns>Материал ключей выходных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.DeriveKey(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Выполняет формирование ключа функций HKDF Expand и Extract.</summary>
      <param name="hashAlgorithmName">Хэш-алгоритм, используемый для операций HMAC.</param>
      <param name="ikm">Материал ключей входных данных.</param>
      <param name="output">Выходной буфер, представляющий материал ключей выходных данных.</param>
      <param name="salt">Случайное значение (несекретное случайное значение).</param>
      <param name="info">Сведения о контексте и приложении (могут быть пустым диапазоном).</param>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Expand(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Int32,System.Byte[])">
      <summary>Выполняет функцию HKDF-Expand, см. раздел 2.3 в RFC 5869.</summary>
      <param name="hashAlgorithmName">Хэш-алгоритм, используемый для операций HMAC.</param>
      <param name="prk">Псевдослучайный ключ, который не короче выходного массива байтов указанного хэш-алгоритма (обычно это выходные данные из шага Expand).</param>
      <param name="outputLength">Длина материала ключей выходных данных.</param>
      <param name="info">Необязательный контекст и сведения, относящиеся к приложению.</param>
      <returns>Материал ключей выходных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Expand(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Выполняет функцию HKDF-Expand. См. раздел 2.3 в RFC 5869.</summary>
      <param name="hashAlgorithmName">Хэш-алгоритм, используемый для операций HMAC.</param>
      <param name="prk">Псевдослучайный ключ, который не короче выходного массива байтов указанного хэш-алгоритма (обычно это выходные данные из шага Expand).</param>
      <param name="output">Буфер назначения для получения материала ключей выходных данных.</param>
      <param name="info">Сведения о контексте и приложении (могут быть пустым диапазоном).</param>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Extract(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>Выполняет функцию HKDF-Extract.
См. раздел 2.2 в RFC 5869.</summary>
      <param name="hashAlgorithmName">Хэш-алгоритм, используемый для операций HMAC.</param>
      <param name="ikm">Материал ключей входных данных.</param>
      <param name="salt">Необязательное случайное значение (несекретное случайное значение). Если не указано, по умолчанию используется массив байтов той же длины, что и выходные данные указанного хэш-алгоритма.</param>
      <returns>Псевдослучайный ключ (prk).</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Extract(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>Выполняет функцию HKDF-Extract.
См. раздел 2.2 в RFC 5869.</summary>
      <param name="hashAlgorithmName">Хэш-алгоритм, используемый для операций HMAC.</param>
      <param name="ikm">Материал ключей входных данных.</param>
      <param name="salt">Случайное значение (несекретное случайное значение).</param>
      <param name="prk">Буфер назначения для получения псевдослучайного ключа (prk).</param>
      <returns>Количество байтов, записанных в буфер <paramref name="prk" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACMD5">
      <summary>Вычисляет хэш-код аутентификации сообщения (HMAC) с помощью хэш-функции <see cref="T:System.Security.Cryptography.MD5" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.HMACMD5" /> ключом, созданным с помощью алгоритма генерации случайных чисел.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.HMACMD5" />, используя указанный ключ.</summary>
      <param name="key">Секретный ключ для шифрования <see cref="T:System.Security.Cryptography.HMACMD5" />. Длина ключа может быть произвольной, но если она превышает 64 байта, ключ хэшируется (с помощью хэш-функции SHA-1) для получения 64-байтового ключа. Поэтому рекомендуется использовать секретный ключ длиной 64 байта.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Security.Cryptography.HMACMD5" />, а при необходимости освобождает также управляемые ресурсы.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Передает данные из объекта в HMAC-алгоритм для вычисления HMAC.</summary>
      <param name="rgb">Входные данные, для которых вычисляется HMAC.</param>
      <param name="ib">Смещение в массиве байтов, начиная с которого следует использовать данные.</param>
      <param name="cb">Число байтов в массиве для использования в качестве данных.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>Передает данные из объекта в HMAC-алгоритм для вычисления HMAC.</summary>
      <param name="source">Входные данные, для которых вычисляется HMAC.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashFinal">
      <summary>Завершает вычисление HMAC после обработки последних данных алгоритмом.</summary>
      <returns>Вычисленное значение HMAC в массиве байтов.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.Initialize">
      <summary>Сбрасывает хэш-алгоритм в исходное состояние.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается завершить вычисление HMAC после обработки последних данных алгоритмом HMAC.</summary>
      <param name="destination">Буфер для получения значения HMAC.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> имеет достаточную длину для получения значения HMAC, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACMD5.Key">
      <summary>Возвращает или задает ключ, используемый при вычислении HMAC.</summary>
      <returns>Ключ, используемый в вычислении HMAC.</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA1">
      <summary>Вычисляет хэш-код проверки подлинности сообщения (HMAC) с помощью хэш-функции <see cref="T:System.Security.Cryptography.SHA1" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.HMACSHA1" /> созданным случайным образом ключом.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.HMACSHA1" /> указанными данными ключа.</summary>
      <param name="key">Секретный ключ для шифрования <see cref="T:System.Security.Cryptography.HMACSHA1" />. Длина ключа может быть произвольной, но если она превышает 64 байта, ключ хэшируется (с помощью хэш-функции SHA-1) для получения 64-байтового ключа. Поэтому рекомендуется использовать секретный ключ длиной 64 байта.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.HMACSHA1" /> с указанными данными ключа и значением, определяющим необходимость использования управляемой версии алгоритма SHA1.</summary>
      <param name="key">Секретный ключ для шифрования <see cref="T:System.Security.Cryptography.HMACSHA1" />. Длина ключа может быть произвольной, но если она превышает 64 байта, ключ хэшируется (с помощью хэш-функции SHA-1) для получения 64-байтового ключа. Поэтому рекомендуется использовать секретный ключ длиной 64 байта.</param>
      <param name="useManagedSha1">Значение <see langword="true" /> для использования управляемой реализации алгоритма SHA1 (класс <see cref="T:System.Security.Cryptography.SHA1Managed" />); значение <see langword="false" /> для использования неуправляемой реализации (класс <see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" />).</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)">
      <summary>Этот член переопределяет <see cref="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)" />; по данной теме может быть доступна более полная документация.

Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" />, а при необходимости освобождает также управляемые ресурсы.</summary>
      <param name="disposing">Значение <see langword="true" />, чтобы освободить управляемые и неуправляемые ресурсы; значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Передает данные, записанные в объект, в хэш-алгоритм SHA1 для вычисления кода проверки подлинности сообщения на основе хэш HMAC.</summary>
      <param name="rgb">Входные данные.</param>
      <param name="ib">Смещение в массиве байтов, начиная с которого следует использовать данные.</param>
      <param name="cb">Число байтов в массиве для использования в качестве данных.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>Передает данные из объекта в HMAC-алгоритм для вычисления HMAC.</summary>
      <param name="source">Входные данные, для которых вычисляется HMAC.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashFinal">
      <summary>Завершает вычисление HMAC после обработки последних данных алгоритмом.</summary>
      <returns>Вычисленное значение HMAC в массиве байтов.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Initialize">
      <summary>Сбрасывает хэш-алгоритм в исходное состояние.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается завершить вычисление HMAC после обработки последних данных алгоритмом HMAC.</summary>
      <param name="destination">Буфер для получения значения HMAC.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> имеет достаточную длину для получения значения HMAC, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA1.Key">
      <summary>Возвращает или задает ключ, используемый в хэш-алгоритме.</summary>
      <returns>Ключ, используемый в хэш-алгоритме.</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA256">
      <summary>Вычисляет хэш-код аутентификации сообщения (HMAC) с помощью хэш-функции <see cref="T:System.Security.Cryptography.SHA256" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.HMACSHA256" /> созданным случайным образом ключом.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.HMACSHA256" /> указанными данными ключа.</summary>
      <param name="key">Секретный ключ для шифрования <see cref="T:System.Security.Cryptography.HMACSHA256" />. Ключ может иметь любую длину. Однако рекомендуемый размер равен 64 байтам. Если длина ключа превышает 64 байта, ключ хэшируется (с помощью хэш-функции SHA-256) для получения 64-байтового ключа. Если он меньше 64 байт, то он заполняется до 64 байт.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Security.Cryptography.HMACSHA256" />, а при необходимости освобождает также управляемые ресурсы.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Передает данные из объекта в HMAC-алгоритм для вычисления HMAC.</summary>
      <param name="rgb">Входные данные, для которых вычисляется HMAC.</param>
      <param name="ib">Смещение в массиве байтов, начиная с которого следует использовать данные.</param>
      <param name="cb">Число байтов в массиве для использования в качестве данных.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>Передает данные из объекта в HMAC-алгоритм для вычисления HMAC.</summary>
      <param name="source">Входные данные, для которых вычисляется HMAC.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashFinal">
      <summary>Завершает вычисление HMAC после обработки последних данных алгоритмом.</summary>
      <returns>Вычисленное значение HMAC в массиве байтов.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.Initialize">
      <summary>Сбрасывает хэш-алгоритм в исходное состояние.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается завершить вычисление HMAC после обработки последних данных алгоритмом HMAC.</summary>
      <param name="destination">Буфер для получения значения HMAC.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> имеет достаточную длину для получения значения HMAC, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA256.Key">
      <summary>Возвращает или задает ключ, используемый при вычислении HMAC.</summary>
      <returns>Ключ, используемый в вычислении HMAC.</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA384">
      <summary>Вычисляет хэш-код проверки подлинности сообщения (HMAC) с помощью хэш-функции <see cref="T:System.Security.Cryptography.SHA384" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.HMACSHA384" /> ключом, созданным с помощью алгоритма генерации случайных чисел.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.HMACSHA384" />, используя указанные данные ключа.</summary>
      <param name="key">Секретный ключ для шифрования <see cref="T:System.Security.Cryptography.HMACSHA384" />. Ключ может иметь любую длину. Однако рекомендуемый размер равен 128 байтам. Если длина ключа превышает 128 байт, ключ хэшируется (с помощью хэш-функции SHA-384) для получения 128-байтового ключа. Если он меньше 128 байт, то он заполняется до 128 байт.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Security.Cryptography.HMACSHA384" />, а при необходимости освобождает также управляемые ресурсы.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Передает данные из объекта в HMAC-алгоритм для вычисления HMAC.</summary>
      <param name="rgb">Входные данные, для которых вычисляется HMAC.</param>
      <param name="ib">Смещение в массиве байтов, начиная с которого следует использовать данные.</param>
      <param name="cb">Число байтов в массиве для использования в качестве данных.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>Передает данные из объекта в HMAC-алгоритм для вычисления HMAC.</summary>
      <param name="source">Входные данные, для которых вычисляется HMAC.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashFinal">
      <summary>Завершает вычисление HMAC после обработки последних данных алгоритмом.</summary>
      <returns>Вычисленное значение HMAC в массиве байтов.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.Initialize">
      <summary>Сбрасывает хэш-алгоритм в исходное состояние.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается завершить вычисление HMAC после обработки последних данных алгоритмом HMAC.</summary>
      <param name="destination">Буфер для получения значения HMAC.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> имеет достаточную длину для получения значения HMAC, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA384.Key">
      <summary>Возвращает или задает ключ, используемый при вычислении HMAC.</summary>
      <returns>Ключ, используемый в вычислении HMAC.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues">
      <summary>Предоставляет обходной путь для реализации .NET Framework 2.0 алгоритма <see cref="T:System.Security.Cryptography.HMACSHA384" />, который не соответствует реализации .NET Framework 2.0 с пакетом обновления 1 (SP1).</summary>
      <returns>
        <see langword="true" />, чтобы включить взаимодействие приложений .NET Framework 2.0 с пакетом обновления 1 (SP1) с приложениями .NET Framework 2.0; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA512">
      <summary>Вычисляет хэш-код проверки подлинности сообщения (HMAC) с помощью хэш-функции <see cref="T:System.Security.Cryptography.SHA512" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.HMACSHA512" /> созданным случайным образом ключом.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.HMACSHA512" /> указанными данными ключа.</summary>
      <param name="key">Секретный ключ для шифрования <see cref="T:System.Security.Cryptography.HMACSHA512" />. Ключ может иметь любую длину. Однако рекомендуемый размер равен 128 байтам. Если длина ключа превышает 128 байт, ключ хэшируется (с помощью хэш-функции SHA-512) для получения 128-байтового ключа. Если он меньше 128 байт, то он заполняется до 128 байт.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Security.Cryptography.HMACSHA512" />, а при необходимости освобождает также управляемые ресурсы.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>Передает данные из объекта в HMAC-алгоритм для вычисления HMAC.</summary>
      <param name="rgb">Входные данные, для которых вычисляется HMAC.</param>
      <param name="ib">Смещение в массиве байтов, начиная с которого следует использовать данные.</param>
      <param name="cb">Число байтов в массиве для использования в качестве данных.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>Передает данные из объекта в HMAC-алгоритм для вычисления HMAC.</summary>
      <param name="source">Входные данные, для которых вычисляется HMAC.</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashFinal">
      <summary>Завершает вычисление HMAC после обработки последних данных алгоритмом.</summary>
      <returns>Вычисленное значение HMAC в массиве байтов.</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.Initialize">
      <summary>Сбрасывает хэш-алгоритм в исходное состояние.</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается завершить вычисление HMAC после обработки последних данных алгоритмом HMAC.</summary>
      <param name="destination">Буфер для получения значения HMAC.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> имеет достаточную длину для получения значения HMAC, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA512.Key">
      <summary>Возвращает или задает ключ, используемый при вычислении HMAC.</summary>
      <returns>Ключ, используемый в вычислении HMAC.</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
      <summary>Предоставляет обходной путь для реализации .NET Framework 2.0 алгоритма <see cref="T:System.Security.Cryptography.HMACSHA512" />, соответствующий реализации .NET Framework 2.0 с пакетом обновления 1 (SP1).</summary>
      <returns>
        <see langword="true" />, чтобы включить взаимодействие приложений .NET Framework 2.0 с пакетом обновления 1 (SP1) с приложениями .NET Framework 2.0; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.IncrementalHash">
      <summary>Обеспечивает поддержку для постепенного вычисления значения хэша или HMAC в нескольких сегментах.</summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])">
      <summary>Добавляет указанные данные к данным, уже обработанным в хэше или HMAC.</summary>
      <param name="data">Данные для обработки.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Security.Cryptography.IncrementalHash" /> уже удален.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)">
      <summary>Добавляет указанное число байтов из указанных данных, начиная с заданного смещения, к данным, уже обработанным в хэше или HMAC.</summary>
      <param name="data">Данные для обработки.</param>
      <param name="offset">Смещение в массиве байтов, начиная с которого следует использовать данные.</param>
      <param name="count">Число байтов, которое нужно использовать из <paramref name="data" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> или <paramref name="offset" /> является отрицательным значением.  
  
-или- 
 <paramref name="count" /> больше, чем длина <paramref name="data" />.</exception>
      <exception cref="T:System.ArgumentException">Сумма <paramref name="offset" /> и <paramref name="count" /> больше, чем длина данных.</exception>
      <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Security.Cryptography.IncrementalHash" /> уже удален.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})">
      <summary>Добавляет указанные данные к данным, уже обработанным в хэше или HMAC (Hash-based Message Authentication Code).</summary>
      <param name="data">Данные для обработки.</param>
      <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Security.Cryptography.IncrementalHash" /> уже удален.</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)">
      <summary>Создает <see cref="T:System.Security.Cryptography.IncrementalHash" /> для указанного алгоритма.</summary>
      <param name="hashAlgorithm">Имя алгоритма хэширования для выполнения.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или является пустой строкой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> — неизвестный алгоритм хэширования.</exception>
      <returns>Экземпляр <see cref="T:System.Security.Cryptography.IncrementalHash" /> готов для вычисления алгоритма хэширования, указанного <paramref name="hashAlgorithm" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>Создает <see cref="T:System.Security.Cryptography.IncrementalHash" /> для алгоритма HMAC с помощью указанного алгоритма хэширования и ключа.</summary>
      <param name="hashAlgorithm">Имя алгоритма хэширования для выполнения в HMAC.</param>
      <param name="key">Секретный ключ для HMAC. Ключ может иметь любую длину, но ключ, длина которого превышает выходной размер указанного алгоритма хэширования, будет хэшироваться для получения правильного размера. Таким образом, рекомендуемым размером секретного ключа является выходной размер указанного алгоритма хэширования.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или является пустой строкой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> — неизвестный алгоритм хэширования.</exception>
      <returns>Экземпляр класса <see cref="T:System.Security.Cryptography.IncrementalHash" /> готов для вычисления указанного алгоритма хэширования.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte})">
      <summary>Создает <see cref="T:System.Security.Cryptography.IncrementalHash" /> для алгоритма HMAC (код проверки подлинности сообщений с помощью хэш-функций), используя хэш-алгоритм, заданный в <paramref name="hashAlgorithm" />, и ключ, заданный в <paramref name="key" />.</summary>
      <param name="hashAlgorithm">Имя алгоритма хэширования для выполнения в HMAC.</param>
      <param name="key">Секретный ключ для HMAC. Ключ может иметь любую длину. При этом ключ, превышающий размер выходных данных хэш-алгоритма, заданного в алгоритме <paramref name="hashAlgorithm" />, будет хэширован (с использованием алгоритма, заданного <paramref name="hashAlgorithm" />) для получения ключа правильного размера. Поэтому рекомендуемый размер секретного ключа — это размер выходных данных хэша, указанного в <paramref name="hashAlgorithm" />.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или является пустой строкой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> — неизвестный алгоритм хэширования.</exception>
      <returns>Экземпляр хэша готов для вычисления алгоритма хэширования, указанного <paramref name="hashAlgorithm" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.Dispose">
      <summary>Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Security.Cryptography.IncrementalHash" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetCurrentHash">
      <summary>Извлекает хэш или HMAC для данных, собранных из предыдущих вызовов методов <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" />, не возвращая объект в исходное состояние.</summary>
      <exception cref="T:System.ObjectDisposedException">Объект уже удален.</exception>
      <returns>Вычисляемый хэш или HMAC.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetCurrentHash(System.Span{System.Byte})">
      <summary>Извлекает хэш или HMAC для данных, собранных из предыдущих вызовов методов <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" />, не возвращая объект в исходное состояние.</summary>
      <param name="destination">Буфер для получения значения хэша или HMAC.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> имеет значение <see cref="P:System.Span`1.Length" /> меньше <see cref="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Объект уже удален.</exception>
      <returns>Число байтов, записанных в <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset">
      <summary>Извлекает хэш или HMAC для данных, собранных из предыдущих вызовов методов <see cref="Overload:System.Security.Cryptography.IncrementalHash.AppendData" />, и сбрасывает объект в исходное состояние.</summary>
      <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Security.Cryptography.IncrementalHash" /> уже удален.</exception>
      <returns>Вычисляемый хэш или HMAC.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset(System.Span{System.Byte})">
      <summary>Извлекает хэш или HMAC для данных, собранных из предыдущих вызовов методов <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" />, возвращая объект в исходное состояние.</summary>
      <param name="destination">Буфер для получения значения хэша или HMAC.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> имеет значение <see cref="P:System.Span`1.Length" /> меньше <see cref="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Объект уже удален.</exception>
      <returns>Число байтов, записанных в <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.TryGetCurrentHash(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается извлечь хэш или HMAC для данных, собранных из предыдущих вызовов методов <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" />, не возвращая объект в исходное состояние.</summary>
      <param name="destination">Буфер для получения значения хэша или HMAC.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />.
Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.ObjectDisposedException">Объект уже удален.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> имеет достаточную длину для получения значения хэша или HMAC, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.TryGetHashAndReset(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается завершить вычисление хэша после обработки последних данных хэш-алгоритмом.</summary>
      <param name="destination">Буфер для получения значения хэша или HMAC.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.ObjectDisposedException">Объект <see cref="T:System.Security.Cryptography.IncrementalHash" /> уже удален.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> имеет достаточную длину для получения значения хэша или HMAC, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.AlgorithmName">
      <summary>Получает имя выполняемого алгоритма. Алгоритмы HMAC предваряются символом "HMAC", чтобы отличаться от дайджеста без ключа.</summary>
      <returns>Имя выполняемого алгоритма.</returns>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes">
      <summary>Получает выходной размер этого алгоритма хэширования или HMAC в байтах.</summary>
      <returns>Размер выходных данных этого алгоритма хэширования или HMAC в байтах.</returns>
    </member>
    <member name="T:System.Security.Cryptography.MaskGenerationMethod">
      <summary>Представляет абстрактный класс, от которого должны наследоваться все алгоритмы создания масок.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.MaskGenerationMethod" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>При переопределении в производном классе создает маску указанной длины с помощью заданного случайного начального значения.</summary>
      <param name="rgbSeed">Случайное начальное значение, используемое для вычисления маски.</param>
      <param name="cbReturn">Длина создаваемой маски в байтах.</param>
      <returns>Случайно созданная маска, длина которой равна параметру <paramref name="cbReturn" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.MD5">
      <summary>Представляет абстрактный класс, от которого наследуются все реализации хэш-алгоритма <see cref="T:System.Security.Cryptography.MD5" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.MD5" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create">
      <summary>Создает экземпляр реализации по умолчанию хэш-алгоритма <see cref="T:System.Security.Cryptography.MD5" />.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">Этот алгоритм был использован с включенным режимом FIPS, однако он не совместим с FIPS.</exception>
      <returns>Новый экземпляр хэш-алгоритма <see cref="T:System.Security.Cryptography.MD5" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create(System.String)">
      <summary>Создает экземпляр заданной реализации хэш-алгоритма <see cref="T:System.Security.Cryptography.MD5" />.</summary>
      <param name="algName">Имя конкретной реализации <see cref="T:System.Security.Cryptography.MD5" />, которую требуется использовать.</param>
      <exception cref="T:System.Reflection.TargetInvocationException">Алгоритм, описание которого содержится в параметре<paramref name="algName" />, использовался с включенным режимом FIPS, но не является FIPS-совместимым.</exception>
      <returns>Новый экземпляр заданной реализации класса <see cref="T:System.Security.Cryptography.MD5" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.Byte[])">
      <summary>Вычисляет хэш данных с помощью алгоритма MD5.</summary>
      <param name="source">Данные для хэширования.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns>Хэш данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>Вычисляет хэш данных с помощью алгоритма MD5.</summary>
      <param name="source">Данные для хэширования.</param>
      <returns>Хэш данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>Вычисляет хэш данных с помощью алгоритма MD5.</summary>
      <param name="source">Данные для хэширования.</param>
      <param name="destination">Буфер для получения значения хэша.</param>
      <exception cref="T:System.ArgumentException">Размер буфера в <paramref name="destination" /> слишком мал для хранения вычисленного хэша. Алгоритм MD5 всегда создает 128-разрядный хэш (16 байт).</exception>
      <returns>Общее количество байт данных, записанных в <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Пытается вычислить хэш данных с помощью алгоритма MD5.</summary>
      <param name="source">Данные для хэширования.</param>
      <param name="destination">Буфер для получения значения хэша.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />.</param>
      <returns>Имеет значение <see langword="false" />, если размер <paramref name="destination" /> слишком мал для хранения вычисленного хэша. В противном случае имеет значение <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.PKCS1MaskGenerationMethod">
      <summary>Вычисляет маски, соответствующие стандарту PKCS #1, для использования алгоритмами обмена ключами.</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.PKCS1MaskGenerationMethod" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>Создает и возвращает маску из заданного случайного начального значения указанной длины.</summary>
      <param name="rgbSeed">Случайное начальное значение, используемое для вычисления маски.</param>
      <param name="cbReturn">Длина создаваемой маски в байтах.</param>
      <returns>Случайно созданная маска, длина которой равна параметру <paramref name="cbReturn" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.PKCS1MaskGenerationMethod.HashName">
      <summary>Возвращает или задает имя типа хэш-алгоритма, используемого для создания маски.</summary>
      <returns>Имя типа, который реализует хэш-алгоритм для вычисления маски.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RandomNumberGenerator">
      <summary>Представляет абстрактный класс, из которого создаются все реализации криптографических генераторов случайных чисел.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create">
      <summary>Создает экземпляр реализации по умолчанию криптографического генератора случайных чисел, позволяющего генерировать случайные данные.</summary>
      <returns>Новый экземпляр криптографического генератора случайных чисел.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
      <summary>Создает экземпляр указанной реализации криптографического генератора случайных чисел.</summary>
      <param name="rngName">Имя реализации генератора случайных чисел, которую необходимо использовать.</param>
      <returns>Новый экземпляр криптографического генератора случайных чисел.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
      <summary>При переопределении в производном классе освобождает все ресурсы, используемые текущим объектом <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
      <summary>При переопределении в производном классе освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Security.Cryptography.RandomNumberGenerator" />, и опционально освобождает управляемые ресурсы.</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Fill(System.Span{System.Byte})">
      <summary>Заполняет диапазон криптостойкими случайными байтами.</summary>
      <param name="data">Диапазон, который заполняется криптостойкими случайными байтами.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
      <summary>При переопределении в производном классе заполняет массив байтов криптостойкой случайной последовательностью значений.</summary>
      <param name="data">Массив, который заполняется криптостойкими случайными байтами.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>Заполняет указанный массив байтов криптостойкой случайной последовательностью значений.</summary>
      <param name="data">Массив, который заполняется криптостойкими случайными байтами.</param>
      <param name="offset">Индекс в массиве, с которого требуется начать заполнение.</param>
      <param name="count">Число байтов, которые требуется заполнить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> или <paramref name="count" /> меньше 0.</exception>
      <exception cref="T:System.ArgumentException">Сумма значений <paramref name="offset" /> и <paramref name="count" /> превышает длину <paramref name="data" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Span{System.Byte})">
      <summary>Заполняет диапазон криптостойкими случайными байтами.</summary>
      <param name="data">Диапазон, который заполняется криптостойкими случайными байтами.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetInt32(System.Int32)">
      <summary>Создает случайное целое число от 0 (включительно) до указанного исключенного верхнего предела, используя генератор криптостойких случайных чисел.</summary>
      <param name="toExclusive">Исключенный верхний предел возвращаемого случайного диапазона.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="toExclusive" /> не больше нуля.</exception>
      <returns>Случайное целое число от 0 (включительно) до <paramref name="toExclusive" /> (с исключением).</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetInt32(System.Int32,System.Int32)">
      <summary>Создает случайное целое число от указанного включенного нижнего предела до указанного исключенного верхнего предела, используя генератор криптостойких случайных чисел.</summary>
      <param name="fromInclusive">Включенный нижний предел возвращаемого случайного диапазона.</param>
      <param name="toExclusive">Исключенный верхний предел возвращаемого случайного диапазона.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="toExclusive" /> не больше параметра <paramref name="fromInclusive" />.</exception>
      <returns>Случайное целое число от <paramref name="fromInclusive" /> (включительно) до <paramref name="toExclusive" /> (с исключением).</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
      <summary>При переопределении в производном классе заполняет массив байтов криптостойкой случайной последовательностью ненулевых значений.</summary>
      <param name="data">Массив, который заполняется криптостойкими случайными ненулевыми байтами.</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Span{System.Byte})">
      <summary>Заполняет диапазон байтов криптостойкой последовательностью случайных ненулевых значений.</summary>
      <param name="data">Диапазон, который заполняется криптостойкими случайными ненулевыми байтами.</param>
    </member>
    <member name="T:System.Security.Cryptography.RC2">
      <summary>Представляет базовый класс, от которого должны производиться все реализации алгоритма <see cref="T:System.Security.Cryptography.RC2" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RC2.EffectiveKeySizeValue">
      <summary>Представляет эффективный размер секретного ключа (в битах), используемого алгоритмом <see cref="T:System.Security.Cryptography.RC2" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.RC2" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create">
      <summary>Создает экземпляр криптографического объекта для выполнения алгоритма <see cref="T:System.Security.Cryptography.RC2" />.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">Этот алгоритм был использован с включенным режимом FIPS, однако он не совместим с FIPS.</exception>
      <returns>Экземпляр криптографического объекта.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create(System.String)">
      <summary>Создает экземпляр криптографического объекта для выполнения заданной реализации алгоритма <see cref="T:System.Security.Cryptography.RC2" />.</summary>
      <param name="AlgName">Имя конкретной реализации <see cref="T:System.Security.Cryptography.RC2" />, которую требуется использовать.</param>
      <exception cref="T:System.Reflection.TargetInvocationException">Алгоритм, описание которого содержится в параметре<paramref name="algName" />, использовался с включенным режимом FIPS, но не является FIPS-совместимым.</exception>
      <returns>Экземпляр криптографического объекта.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RC2.EffectiveKeySize">
      <summary>Получает или задает эффективный размер секретного ключа, используемого алгоритмом <see cref="T:System.Security.Cryptography.RC2" />, в битах.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Недопустимый эффективный размер ключа.</exception>
      <returns>Эффективный размер ключа, используемого алгоритмом <see cref="T:System.Security.Cryptography.RC2" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RC2.KeySize">
      <summary>Получает или задает размер секретного ключа, используемого алгоритмом <see cref="T:System.Security.Cryptography.RC2" />, в битах.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение для размера ключа RC2 меньше значения эффективного размера ключа.</exception>
      <returns>Размер секретного ключа, используемого алгоритмом <see cref="T:System.Security.Cryptography.RC2" />, в битах.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Rfc2898DeriveBytes">
      <summary>Реализует функцию формирования ключа на основе пароля (PBKDF2) посредством генератора псевдослучайных чисел <see cref="T:System.Security.Cryptography.HMACSHA1" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" />, используя пароль, расширяющее значение и число итераций для формирования ключа.</summary>
      <param name="password">Пароль, используемый для формирования ключа.</param>
      <param name="salt">Соль, используемая для формирования ключа.</param>
      <param name="iterations">Число итераций для данной операции.</param>
      <exception cref="T:System.ArgumentException">Размер указанного расширяющего значения менее 8 байт, а число итераций менее 1.</exception>
      <exception cref="T:System.ArgumentNullException">Пароль или расширяющее значение равны <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" />, используя заданные пароль, случайные данные, число итераций и имя хэш-алгоритма для формирования ключа.</summary>
      <param name="password">Пароль, используемый для формирования ключа.</param>
      <param name="salt">Соль ключа, используемая для формирования ключа.</param>
      <param name="iterations">Число итераций для данной операции.</param>
      <param name="hashAlgorithm">Имя хэш-алгоритма, используемое для формирования ключа.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="saltSize" /> меньше нуля.</exception>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> класса <paramref name="hashAlgorithm" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Недопустимое имя хэш-алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" />, используя пароль и соль для формирования ключа.</summary>
      <param name="password">Пароль, используемый для формирования ключа.</param>
      <param name="salt">Соль, используемая для формирования ключа.</param>
      <exception cref="T:System.ArgumentException">Размер указанного расширяющего значения менее 8 байт, а число итераций менее 1.</exception>
      <exception cref="T:System.ArgumentNullException">Пароль или расширяющее значение равны <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" />, используя пароль, расширяющее значение и число итераций для формирования ключа.</summary>
      <param name="password">Пароль, используемый для формирования ключа.</param>
      <param name="salt">Соль, используемая для формирования ключа.</param>
      <param name="iterations">Число итераций для данной операции.</param>
      <exception cref="T:System.ArgumentException">Размер указанного расширяющего значения менее 8 байт, а число итераций менее 1.</exception>
      <exception cref="T:System.ArgumentNullException">Пароль или расширяющее значение равны <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" />, используя заданные пароль, случайные данные, число итераций и имя хэш-алгоритма для формирования ключа.</summary>
      <param name="password">Пароль, используемый для формирования ключа.</param>
      <param name="salt">Соль ключа, используемая для формирования ключа.</param>
      <param name="iterations">Число итераций для данной операции.</param>
      <param name="hashAlgorithm">Имя хэш-алгоритма, используемое для формирования ключа.</param>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> класса <paramref name="hashAlgorithm" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Недопустимое имя хэш-алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" />, используя пароль и соль для формирования ключа.</summary>
      <param name="password">Пароль, используемый для формирования ключа.</param>
      <param name="saltSize">Размер произвольной соли, которую должен создать класс.</param>
      <exception cref="T:System.ArgumentException">Указанный размер расширяющего значения менее 8 байт.</exception>
      <exception cref="T:System.ArgumentNullException">Пароль или расширяющее значение равны <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" />, используя пароль, размер соли и число итераций для формирования ключа.</summary>
      <param name="password">Пароль, используемый для формирования ключа.</param>
      <param name="saltSize">Размер произвольной соли, которую должен создать класс.</param>
      <param name="iterations">Число итераций для данной операции.</param>
      <exception cref="T:System.ArgumentException">Размер указанного расширяющего значения менее 8 байт, а число итераций менее 1.</exception>
      <exception cref="T:System.ArgumentNullException">Пароль или расширяющее значение равны <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iterations" /> выходит за пределы диапазона. Значение этого параметра не должно быть отрицательным.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" />, используя заданные пароль, размер случайных данных, число итераций и имя хэш-алгоритма для формирования ключа.</summary>
      <param name="password">Пароль, используемый для формирования ключа.</param>
      <param name="saltSize">Размер произвольной соли, которую должен создать класс.</param>
      <param name="iterations">Число итераций для данной операции.</param>
      <param name="hashAlgorithm">Имя хэш-алгоритма, используемое для формирования ключа.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="saltSize" /> меньше нуля.</exception>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> класса <paramref name="hashAlgorithm" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Недопустимое имя хэш-алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
      <summary>Возвращает криптографический ключ из объекта <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" />.</summary>
      <param name="algname">Имя алгоритма, используемого для формирования ключа.</param>
      <param name="alghashname">Имя хэш-алгоритма, используемого для формирования ключа.</param>
      <param name="keySize">Размер формируемого ключа в битах.</param>
      <param name="rgbIV">Вектор инициализации, используемый для формирования ключа.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Параметр <paramref name="keySize" /> является неверным.  
  
-или- 
Не удалось получить поставщик служб шифрования (CSP).  
  
-или- 
Значение параметра <paramref name="algname" /> не является допустимым именем алгоритма.  
  
-или- 
Значение параметра <paramref name="alghashname" /> не является допустимым именем хэш-алгоритма.</exception>
      <returns>Сформированный ключ.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые классом <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> (при необходимости освобождает и управляемые ресурсы).</summary>
      <param name="disposing">Значение <see langword="true" /> позволяет освободить как управляемые, так и неуправляемые ресурсы; значение <see langword="false" /> освобождает только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
      <summary>Возвращает псевдослучайный ключ для данного объекта.</summary>
      <param name="cb">Число генерируемых псевдослучайных байтов ключа.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cb" /> выходит за пределы диапазона. Значение этого параметра не должно быть отрицательным.</exception>
      <returns>Массив байтов, заполненный псевдослучайными байтами ключа.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
      <summary>Восстанавливает состояние данной операции.</summary>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
      <summary>Возвращает или задает число итераций для данной операции.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Число итераций менее 1.</exception>
      <returns>Число итераций для данной операции.</returns>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
      <summary>Возвращает или задает значение соли ключа для данной операции.</summary>
      <exception cref="T:System.ArgumentException">Указанный размер расширяющего значения менее 8 байт.</exception>
      <exception cref="T:System.ArgumentNullException">Расширяющее значение равно <see langword="null" />.</exception>
      <returns>Значение соли ключа для данной операции.</returns>
    </member>
    <member name="T:System.Security.Cryptography.Rijndael">
      <summary>Представляет базовый класс, от которого наследуются все реализации алгоритма симметричного шифрования <see cref="T:System.Security.Cryptography.Rijndael" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.Rijndael" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create">
      <summary>Создает криптографический объект для выполнения алгоритма <see cref="T:System.Security.Cryptography.Rijndael" />.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">Этот алгоритм был использован с включенным режимом FIPS, однако он не совместим с FIPS.</exception>
      <returns>Криптографический объект.</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create(System.String)">
      <summary>Создает криптографический объект для выполнения заданной реализации алгоритма <see cref="T:System.Security.Cryptography.Rijndael" />.</summary>
      <param name="algName">Имя конкретной реализации <see cref="T:System.Security.Cryptography.Rijndael" />, которую необходимо создать.</param>
      <exception cref="T:System.Reflection.TargetInvocationException">Алгоритм, описание которого содержится в параметре<paramref name="algName" />, использовался с включенным режимом FIPS, но не является FIPS-совместимым.</exception>
      <returns>Криптографический объект.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RijndaelManaged">
      <summary>Осуществляет доступ к управляемой версии алгоритма <see cref="T:System.Security.Cryptography.Rijndael" />. Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RijndaelManaged" />.</summary>
      <exception cref="T:System.InvalidOperationException">Этот класс не соответствует стандарту FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor">
      <summary>Создает симметричный объект-дешифратор с текущим свойством <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> и вектором инициализации (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <returns>Симметричный объект-дешифратор.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>Создает объект-дешифратор <see cref="T:System.Security.Cryptography.Rijndael" /> для алгоритма симметричного шифрования с заданным ключом (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) и вектором инициализации (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <param name="rgbKey">Секретный ключ, используемый в алгоритме симметричного шифрования. Размер ключа должен составлять 128, 192 или 256 битов.</param>
      <param name="rgbIV">Вектор инициализации, используемый в алгоритме симметричного шифрования.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="rgbKey" /> имеет значение <see langword="null" />.  
  
-или- 
Параметр <paramref name="rgbIV" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение свойства <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> не <see cref="F:System.Security.Cryptography.CipherMode.ECB" />, <see cref="F:System.Security.Cryptography.CipherMode.CBC" /> или <see cref="F:System.Security.Cryptography.CipherMode.CFB" />.</exception>
      <returns>Объект-дешифратор для алгоритма симметричного шифрования <see cref="T:System.Security.Cryptography.Rijndael" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor">
      <summary>Создает симметричный объект-шифратор с текущим свойством <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> и вектором инициализации (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <returns>Симметричный объект-шифратор.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>Создает объект-шифратор <see cref="T:System.Security.Cryptography.Rijndael" /> для алгоритма симметричного шифрования с заданным ключом (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) и вектором инициализации (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />).</summary>
      <param name="rgbKey">Секретный ключ, используемый в алгоритме симметричного шифрования. Размер ключа должен составлять 128, 192 или 256 битов.</param>
      <param name="rgbIV">Вектор инициализации, используемый в алгоритме симметричного шифрования.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="rgbKey" /> имеет значение <see langword="null" />.  
  
-или- 
Параметр <paramref name="rgbIV" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение свойства <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> не <see cref="F:System.Security.Cryptography.CipherMode.ECB" />, <see cref="F:System.Security.Cryptography.CipherMode.CBC" /> или <see cref="F:System.Security.Cryptography.CipherMode.CFB" />.</exception>
      <returns>Объект-шифратор для алгоритма симметричного шифрования <see cref="T:System.Security.Cryptography.Rijndael" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateIV">
      <summary>Генерирует случайный вектор инициализации (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />) для использования данным алгоритмом.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateKey">
      <summary>Генерирует случайный ключ (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />) для использования данным алгоритмом.</summary>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.BlockSize">
      <summary>Возвращает или задает размер блока криптографической операции (в битах).</summary>
      <returns>Размер блока криптографической операции (в битах). Значение по умолчанию — 128 бит.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.IV">
      <summary>Получает или задает вектор инициализации для алгоритма симметричного шифрования.</summary>
      <returns>Вектор инициализации (IV), используемый для симметричного алгоритма.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Key">
      <summary>Получает или задает секретный ключ для алгоритма симметричного шифрования.</summary>
      <returns>Секретный ключ, используемый для симметричного алгоритма.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.KeySize">
      <summary>Получает или задает размер секретного ключа (в битах), используемого алгоритмом симметричного шифрования.</summary>
      <returns>Размер секретного ключа (в битах), используемого для симметричного алгоритма. Значение по умолчанию — 256 бит.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.LegalKeySizes">
      <summary>Возвращает размеры ключа (в битах), которые поддерживаются симметричным алгоритмом.</summary>
      <returns>Размеры ключей в битах, которые поддерживаются симметричным алгоритмом.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Mode">
      <summary>Возвращает или задает режим функционирования симметричного алгоритма.</summary>
      <returns>Режим функционирования симметричного алгоритма. Значение по умолчанию — <see cref="F:System.Security.Cryptography.CipherMode.CBC" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Padding">
      <summary>Возвращает или задает режим заполнения, используемый в симметричном алгоритме.</summary>
      <returns>Режим заполнения, используемый в симметричном алгоритме. Значение по умолчанию — <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSA">
      <summary>Представляет базовый класс, от которого наследуются все реализации алгоритма <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create">
      <summary>Создает экземпляр реализации алгоритма <see cref="T:System.Security.Cryptography.RSA" /> по умолчанию.</summary>
      <returns>Новый экземпляр реализации объекта <see cref="T:System.Security.Cryptography.RSA" /> по умолчанию.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Int32)">
      <summary>Создает новый временный RSA-ключ с заданным размером ключа.</summary>
      <param name="keySizeInBits">Размер ключа в битах.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySizeInBits" /> не поддерживается реализацией по умолчанию.</exception>
      <returns>Новый временный RSA-ключ с заданным размером ключа.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Security.Cryptography.RSAParameters)">
      <summary>Создает новый временный RSA-ключ с заданными параметрами RSA-ключа.</summary>
      <param name="parameters">Параметры для алгоритма <see cref="T:System.Security.Cryptography.RSA" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> не представляет допустимый ключ RSA.</exception>
      <returns>Новый временный RSA-ключ.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.String)">
      <summary>Создает экземпляр заданной реализации класса <see cref="T:System.Security.Cryptography.RSA" />.</summary>
      <param name="algName">Имя используемой реализации <see cref="T:System.Security.Cryptography.RSA" />.</param>
      <returns>Новый экземпляр заданной реализации класса <see cref="T:System.Security.Cryptography.RSA" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>При переопределении в производном классе выполняет расшифровку входных данных с использованием указанного режима заполнения.</summary>
      <param name="data">Расшифровываемые данные.</param>
      <param name="padding">Режим заполнения.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> или <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.

- или -

Длина <paramref name="data" /> не равна количеству байтов для <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" />.

- или -

Этот экземпляр представляет только открытый ключ. 

- или -

Сбой операции расшифровки.</exception>
      <returns>Расшифрованные данные.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])">
      <summary>Если переопределено в производном классе, расшифровывает входные данные с помощью закрытого ключа.</summary>
      <param name="rgb">Зашифрованный текст, который необходимо расшифровать.</param>
      <exception cref="T:System.NotSupportedException">Этот вызов метода не поддерживается. Это исключение выдается, начиная с .NET Framework 4.6.</exception>
      <returns>Результат расшифровки значения параметра <paramref name="rgb" /> в форме обычного текста.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>При переопределении в производном классе выполняет шифрование входных данных с использованием указанного режима заполнения.</summary>
      <param name="data">Данные, которые необходимо зашифровать.</param>
      <param name="padding">Режим заполнения.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> или <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.

- или -

Длина <paramref name="data" /> слишком велика для сочетания <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> и выбранного заполнения.

- или -

Сбой операции шифрования.</exception>
      <returns>Зашифрованные данные.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])">
      <summary>Если переопределено в производном классе, зашифровывает входные данные с помощью открытого ключа.</summary>
      <param name="rgb">Обычный текст, который требуется зашифровать.</param>
      <exception cref="T:System.NotSupportedException">Этот вызов метода не поддерживается. Это исключение выдается, начиная с .NET Framework 4.6.</exception>
      <returns>Результат шифрования значения параметра <paramref name="rgb" /> в форме зашифрованного текста.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)">
      <summary>Если переопределено в производном классе, экспортирует объект <see cref="T:System.Security.Cryptography.RSAParameters" />.</summary>
      <param name="includePrivateParameters">Значение <see langword="true" /> для включения закрытых параметров; в противном случае — значение <see langword="false" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать параметры.</exception>
      <returns>Параметры для <see cref="T:System.Security.Cryptography.RSA" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportRSAPrivateKey">
      <summary>Экспортирует текущий ключ в формате PKCS#1 RSAPrivateKey.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>Массив байтов, содержащий представление этого ключа в формате PKCS#1 RSAPrivateKey.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportRSAPublicKey">
      <summary>Экспортирует открытую часть текущего ключа в формате PKCS#1 RSAPublicKey.</summary>
      <returns>Массив байтов, содержащий представление этого ключа в формате PKCS#1 RSAPublicKey.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.FromXmlString(System.String)">
      <summary>Инициализирует объект <see cref="T:System.Security.Cryptography.RSA" />, используя данные ключа из строки XML.</summary>
      <param name="xmlString">Строка XML, содержащая данные ключа <see cref="T:System.Security.Cryptography.RSA" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="xmlString" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Недопустимый формат параметра <paramref name="xmlString" />.</exception>
      <exception cref="T:System.PlatformNotSupportedException">Только в .NET Core: этот элемент не поддерживается.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>При переопределении в производном классе вычисляет хэш-значение указанного фрагмента массива байтов с помощью заданного хэш-алгоритма.</summary>
      <param name="data">Данные, предназначенные для хэширования.</param>
      <param name="offset">Индекс первого байта в <paramref name="data" />, хэширование которого требуется выполнить.</param>
      <param name="count">Количество байтов, хэширование которых необходимо выполнить.</param>
      <param name="hashAlgorithm">Алгоритм, который должен использоваться при хэшировании данных.</param>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <returns>Хэшированные данные.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>При переопределении в производном классе вычисляет хэш-значение указанного двоичного потока с помощью заданного алгоритма хэширования.</summary>
      <param name="data">Двоичный поток, хэширование которого требуется выполнить.</param>
      <param name="hashAlgorithm">Хэш-алгоритм.</param>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <returns>Хэшированные данные.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару из открытого и закрытого ключей из структуры PKCS#8 EncryptedPrivateKeyInfo после расшифровки с помощью пароля на основе байтов, заменяя ключи для этого объекта.</summary>
      <param name="passwordBytes">Байты, используемые в качестве пароля при расшифровке материала ключа.</param>
      <param name="source">Байты структуры PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

- или -

Содержимое <paramref name="source" />, указывающее, что как функцию формирования ключа (KDF) следует использовать устаревшую версию PKCS#12 KDF, которая требует пароли на основе <see cref="T:System.Char" />.

- или -

Содержимое <paramref name="source" /> не представляет структуру PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.

- или -

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

- или -

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

- или -

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару из открытого и закрытого ключей из структуры PKCS#8 EncryptedPrivateKeyInfo после расшифровки с помощью пароля на основе символов, заменяя ключи для этого объекта.</summary>
      <param name="password">Пароль, используемый при расшифровке материала ключа.</param>
      <param name="source">Байты структуры PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

- или -

Содержимое <paramref name="source" /> не представляет структуру PKCS#8 EncryptedPrivateKeyInfo в кодировке ASN.1-BER.

- или -

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

- или -

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

- или -

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Импортирует зашифрованный закрытый ключ в формате RFC 7468 в кодировке PEM, заменяя ключи для этого объекта.</summary>
      <param name="input">Текст PEM зашифрованного ключа для импорта.</param>
      <param name="passwordBytes">Байты, используемые в качестве пароля при расшифровке материала ключа.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> не содержит ключ в кодировке PEM с распознанной меткой.

- или -

<paramref name="input" /> содержит несколько ключей в кодировке PEM с распознанной меткой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

- или -

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> не представляет структуру ASN.1-BER PKCS#8 EncryptedPrivateKeyInfo.

- или -

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> указывает ключ для алгоритма, отличного от алгоритма, представленного этим экземпляром.

- или -

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> представляет ключ в неподдерживаемом формате.

- или -

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Импортирует зашифрованный закрытый ключ в формате RFC 7468 в кодировке PEM, заменяя ключи для этого объекта.</summary>
      <param name="input">Текст PEM зашифрованного ключа для импорта.</param>
      <param name="password">Пароль, используемый при расшифровке материала ключа.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> не содержит ключ в кодировке PEM с распознанной меткой.

- или -

<paramref name="input" /> содержит несколько ключей в кодировке PEM с распознанной меткой.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Неправильный пароль.

- или -

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> не представляет структуру ASN.1-BER PKCS#8 EncryptedPrivateKeyInfo.

- или -

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> указывает ключ для алгоритма, отличного от алгоритма, представленного этим экземпляром.

- или -

Декодированное из Base 64 содержимое текста PEM из <paramref name="input" /> представляет ключ в неподдерживаемом формате.

- или -

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>Импортирует зашифрованный ключ в формате RFC 7468 в кодировке PEM, заменив ключи для этого объекта.</summary>
      <param name="input">Текст PEM импортируемого ключа.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> не содержит ключ в кодировке PEM с распознанной меткой.

- или -

<paramref name="input" /> содержит несколько ключей в кодировке PEM с распознанной меткой.

- или -

<paramref name="input" /> содержит зашифрованный ключ в кодировке PEM.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>Если переопределено в производном классе, импортирует заданный объект <see cref="T:System.Security.Cryptography.RSAParameters" />.</summary>
      <param name="parameters">Параметры для <see cref="T:System.Security.Cryptography.RSA" />.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару из открытого и закрытого ключей из структуры PKCS#8 PrivateKeyInfo после расшифровки, заменяя ключи для этого объекта.</summary>
      <param name="source">Байты структуры PKCS#8 PrivateKeyInfo в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Содержимое <paramref name="source" /> не представляет структуру PKCS#8 PrivateKeyInfo в кодировке ASN.1-BER.

- или -

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

- или -

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

- или -

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportRSAPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует пару из открытого и закрытого ключей из структуры PKCS#1 RSAPrivateKey после расшифровки, заменяя ключи для этого объекта.</summary>
      <param name="source">Байты структуры PKCS#1 RSAPrivateKey в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Содержимое <paramref name="source" /> не представляет структуру PKCS#1 RSAPrivateKey в кодировке ASN.1-BER.

- или -

Не удалось импортировать ключ.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportRSAPublicKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует открытый ключ из структуры PKCS#1 RSAPublicKey после расшифровки, заменяя ключи для этого объекта.</summary>
      <param name="source">Байты структуры PKCS#1 RSAPublicKey в кодировке ASN.1-BER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Содержимое <paramref name="source" /> не представляет структуру PKCS#1 RSAPublicKey в кодировке ASN.1-BER.

- или -

Ключ не импортирован.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Импортирует открытый ключ из структуры X.509 SubjectPublicKeyInfo после расшифровки, заменяя ключи для этого объекта.</summary>
      <param name="source">Байты структуры X.509 SubjectPublicKeyInfo в кодировке ASN.1-DER.</param>
      <param name="bytesRead">При возврате метода содержит значение, которое показывает количество символов, считанных из <paramref name="source" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Содержимое <paramref name="source" /> не представляет структуру X.509 SubjectPublicKeyInfo в кодировке ASN.1-DER.

- или -

Содержимое <paramref name="source" /> указывает, что ключ относится к алгоритму, отличному от алгоритма, представленного этим экземпляром.

- или -

Содержимое <paramref name="source" /> представляет ключ в неподдерживаемом формате.

- или -

Не удалось выполнить импорт ключа, зависящего от алгоритма.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Вычисляет хэш-значение части заданного массива байтов с помощью указанного алгоритма хэширования и режима заполнения, а затем подписывает полученное хэш-значение.</summary>
      <param name="data">Входные данные для хэширования и подписи.</param>
      <param name="offset">Смещение в массиве, начиная с которого следует использовать данные.</param>
      <param name="count">Число байтов в массиве для использования в качестве данных.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="padding">Режим заполнения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> меньше нуля.  
  
- или - 
 Значение параметра <paramref name="count" /> меньше нуля.  
  
- или - 
 <paramref name="offset" /> + <paramref name="count" /> — 1 приводит к получению значения индекса, который выходит за пределы верхней границы <paramref name="data" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.

- или -

Этот экземпляр представляет только открытый ключ.

- или -

Произошла ошибка при создании подписи.</exception>
      <returns>Подпись RSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Вычисляет хэш-значение заданного массива байтов с помощью указанного алгоритма хэширования и режима заполнения, а затем подписывает полученное хэш-значение.</summary>
      <param name="data">Входные данные для хэширования и подписи.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="padding">Режим заполнения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.

- или -

Этот экземпляр представляет только открытый ключ.

- или -

Произошла ошибка при создании подписи.</exception>
      <returns>Подпись RSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Вычисляет хэш-значение заданного потока с помощью указанного алгоритма хэширования и режима заполнения, а затем подписывает полученное хэш-значение.</summary>
      <param name="data">Входной поток для хэширования и подписи.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, который следует использовать для создания хэш-значения.</param>
      <param name="padding">Режим заполнения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.

- или -

Этот экземпляр представляет только открытый ключ.

- или -

Произошла ошибка при создании подписи.</exception>
      <returns>Подпись RSA для указанных данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>При переопределении в производном классе вычисляет подпись для указанного хэш-значения с использованием указанного заполнения.</summary>
      <param name="hash">Хэш-значение подписываемых данных.</param>
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <param name="padding">Заполнение.</param>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="data" /> или <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.

- или -

Этот экземпляр представляет только открытый ключ.

- или -

Произошла ошибка при создании подписи.</exception>
      <returns>Подпись RSA для указанного хэш-значения.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ToXmlString(System.Boolean)">
      <summary>Создает и возвращает строку XML, содержащую ключ текущего объекта <see cref="T:System.Security.Cryptography.RSA" />.</summary>
      <param name="includePrivateParameters">Значение <see langword="true" />, чтобы включать закрытый и открытый ключ RSA; значение <see langword="false" />, чтобы включать только открытый ключ.</param>
      <exception cref="T:System.PlatformNotSupportedException">Только в .NET Core: этот элемент не поддерживается.</exception>
      <returns>Строка XML, содержащая ключ текущего объекта <see cref="T:System.Security.Cryptography.RSA" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryDecrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <summary>Пытается расшифровать входные данные с использованием указанного режима заполнения и записывает результат в заданный буфер.</summary>
      <param name="data">Расшифровываемые данные.</param>
      <param name="destination">Буфер для получения расшифрованных данных.</param>
      <param name="padding">Режим заполнения.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.

- или -

Длина <paramref name="data" /> не равна количеству байтов для <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" />.

- или -

Этот экземпляр представляет только открытый ключ. 

- или -

Сбой операции расшифровки.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> имеет достаточную длину для получения расшифрованных данных, в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryEncrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <summary>Пытается зашифровать входные данные с использованием указанного режима заполнения и записать результат в заданный буфер.</summary>
      <param name="data">Данные, которые необходимо зашифровать.</param>
      <param name="destination">Буфер для получения зашифрованных данных.</param>
      <param name="padding">Режим заполнения.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.

- или -

Длина <paramref name="data" /> слишком велика для сочетания <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> и выбранного заполнения.

- или -

Сбой операции шифрования.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> имеет достаточную длину для получения зашифрованных данных; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате PKCS#8 EncryptedPrivateKeyInfo в предоставленный буфер с использованием пароля на основе байтов.</summary>
      <param name="passwordBytes">Байты, используемые в качестве пароля при шифровании материала ключа.</param>
      <param name="pbeParameters">Параметры шифрования на основе пароля (PBE), используемые при шифровании материала ключа.</param>
      <param name="destination">Диапазон байтов для получения данных PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.

- или -

<paramref name="pbeParameters" /> указывает, что следует использовать <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />: это требует паролей на основе <see cref="T:System.Char" />.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате PKCS#8 EncryptedPrivateKeyInfo в предоставленный буфер с использованием пароля на основе символов.</summary>
      <param name="password">Пароль, используемый при шифровании материала ключа.</param>
      <param name="pbeParameters">Параметры шифрования на основе пароля (PBE), используемые при шифровании материала ключа.</param>
      <param name="destination">Диапазон байтов для получения данных PKCS#8 EncryptedPrivateKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате PKCS#8 PrivateKeyInfo в предоставленный буфер.</summary>
      <param name="destination">Диапазон байтов для получения данных PKCS#8 PrivateKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportRSAPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате PKCS#1 RSAPrivateKey в предоставленный буфер.</summary>
      <param name="destination">Диапазон байтов для получения данных PKCS#1 RSAPrivateKey.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportRSAPublicKey(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате PKCS#1 RSAPublicKey в предоставленный буфер.</summary>
      <param name="destination">Диапазон байтов для получения данных PKCS#1 RSAPublicKey.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>Пытается экспортировать текущий ключ в формате X.509 SubjectPublicKeyInfo в предоставленный буфер.</summary>
      <param name="destination">Диапазон байтов для получения данных X.509 SubjectPublicKeyInfo.</param>
      <param name="bytesWritten">При возврате метода содержит значение, которое показывает количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Не удалось экспортировать ключ.</exception>
      <returns>
        <see langword="true" />, если размер <paramref name="destination" /> достаточно велик, чтобы вместить выходные данные; в противном случае — <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>Пытается вычислить хэш предоставленных данных с помощью указанного алгоритма и записать результат в заданный буфер.</summary>
      <param name="data">Данные, предназначенные для хэширования.</param>
      <param name="destination">Буфер для получения значения хэша.</param>
      <param name="hashAlgorithm">Алгоритм, который должен использоваться при хэшировании данных.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> имеет достаточную длину для получения хэш-значения, в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <summary>Пытается хэшировать предоставленные данные с помощью указанного алгоритма и подписать хэш текущим ключом, а затем записать подпись в заданный буфер.</summary>
      <param name="data">Входные данные для хэширования и подписи.</param>
      <param name="destination">Буфер для получения подписи RSA.</param>
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <param name="padding">Режим заполнения.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Этот экземпляр представляет только открытый ключ.

- или -

Произошла ошибка при создании подписи.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> имеет достаточную длину для получения подписи RSA; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <summary>Пытается подписать хэш текущим ключом и записать подпись в заданный буфер.</summary>
      <param name="hash">Хэш-значение подписываемых данных.</param>
      <param name="destination" />
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <param name="padding">Заполнение.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />. Этот параметр обрабатывается как неинициализированный.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.

- или -

Этот экземпляр представляет только открытый ключ.

- или -

Произошла ошибка при создании подписи.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="destination" /> имеет достаточную длину для получения подписи RSA; в противном случае значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Проверяет допустимость цифровой подписи, вычисляя хэш-значение указанных данных с помощью указанного алгоритма хэширования и заполнения, а затем сравнивая его с предоставленной подписью.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Данные подписи, которые требуется поверить.</param>
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <param name="padding">Режим заполнения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="signature" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.</exception>
      <returns>Значение <see langword="true" />, если подпись является допустимой; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Проверяет допустимость цифровой подписи, вычисляя хэш-значение данных во фрагменте массива байтов с помощью указанного алгоритма хэширования и заполнения и сравнивая его с предоставленной подписью.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="offset">Индекс, начиная с которого нужно вычислять хэш.</param>
      <param name="count">Количество байтов, хэширование которых необходимо выполнить.</param>
      <param name="signature">Данные подписи, которые требуется поверить.</param>
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <param name="padding">Режим заполнения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="signature" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="offset" /> меньше нуля.  
  
- или - 
 Значение параметра <paramref name="count" /> меньше нуля.  
  
- или - 
 <paramref name="offset" /> + <paramref name="count" /> — 1 приводит к получению значения индекса, который выходит за пределы верхней границы <paramref name="data" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.</exception>
      <returns>Значение <see langword="true" />, если подпись является допустимой; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Проверяет допустимость цифровой подписи, вычисляя хэш-значение указанного потока с помощью указанного алгоритма хэширования и заполнения, а затем сравнивая его с предоставленной подписью.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Данные подписи, которые требуется поверить.</param>
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <param name="padding">Режим заполнения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="signature" /> имеет значение <see langword="null" />.  
  
- или - 
 <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.</exception>
      <returns>Значение <see langword="true" />, если подпись является допустимой; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Проверяет допустимость цифровой подписи, вычисляя хэш-значение указанных данных с помощью указанного алгоритма хэширования и заполнения, а затем сравнивая его с предоставленной подписью.</summary>
      <param name="data">Подписанные данные.</param>
      <param name="signature">Данные подписи, которые требуется поверить.</param>
      <param name="hashAlgorithm">Алгоритм хэширования, используемый для создания хэш-значения данных.</param>
      <param name="padding">Режим заполнения.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.</exception>
      <returns>Значение <see langword="true" />, если подпись является допустимой; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Проверяет допустимость цифровой подписи путем определения хэш-значения в этой подписи с помощью указанного хэш-алгоритма и заполнения, сравнивая его с предоставленным хэш-значением.</summary>
      <param name="hash">Хэш-значение подписанных данных.</param>
      <param name="signature">Данные подписи, которые требуется поверить.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для создания хэш-значения.</param>
      <param name="padding">Режим заполнения.</param>
      <exception cref="T:System.NotImplementedException">Производный класс должен переопределять этот метод.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="hash" /> или <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.</exception>
      <returns>Значение <see langword="true" />, если подпись является допустимой; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Проверяет допустимость цифровой подписи путем определения хэш-значения в этой подписи с помощью указанного хэш-алгоритма и заполнения, сравнивая его с предоставленным хэш-значением.</summary>
      <param name="hash">Хэш-значение подписанных данных.</param>
      <param name="signature">Данные подписи, которые требуется поверить.</param>
      <param name="hashAlgorithm">Хэш-алгоритм, используемый для создания хэш-значения.</param>
      <param name="padding">Режим заполнения.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="hash" /> или <paramref name="padding" /> имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Значение <paramref name="padding" /> неизвестно или не поддерживается этой реализацией.</exception>
      <returns>Значение <see langword="true" />, если подпись является допустимой; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSA.KeyExchangeAlgorithm">
      <summary>Получает имя алгоритма обмена ключами, доступного в этой реализации <see cref="T:System.Security.Cryptography.RSA" />.</summary>
      <returns>Возвращает RSA.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSA.SignatureAlgorithm">
      <summary>Получает имя алгоритма подписи, доступного в этой реализации <see cref="T:System.Security.Cryptography.RSA" />.</summary>
      <returns>Возвращает RSA.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPadding">
      <summary>Задает режим заполнения и параметры для использования с операциями шифрования или расшифровки RSA.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.CreateOaep(System.Security.Cryptography.HashAlgorithmName)">
      <summary>Создает новый экземпляр <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" />, у которого <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> — <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" /> с указанным хэш-алгоритмом.</summary>
      <param name="hashAlgorithm">Хэш-алгоритм.</param>
      <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> класса <paramref name="hashAlgorithm" /> имеет значение <see langword="null" /> или <see cref="F:System.String.Empty" />.</exception>
      <returns>Объект, чей режим <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> — <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" /> с хэш-алгоритмом, заданным <paramref name="hashAlgorithm" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Object)">
      <summary>Определяет, равен ли текущий экземпляр указанному объекту.</summary>
      <param name="obj">Объект для сравнения.</param>
      <returns>Значение <see langword="true" />, если <paramref name="obj" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Определяет, равен ли текущий экземпляр указанному объекту <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" />.</summary>
      <param name="other">Объект для сравнения.</param>
      <returns>Значение <see langword="true" />, если <paramref name="other" /> равен текущему экземпляру; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.GetHashCode">
      <summary>Возвращает хэш-код для этого объекта <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" />.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Equality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Указывает, равны ли значения двух заданных объектов <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" />.</summary>
      <param name="left">Первый из сравниваемых объектов.</param>
      <param name="right">Второй из сравниваемых объектов.</param>
      <returns>Значение <see langword="true" />, если <see langword="left" /> и <see langword="right" /> равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Inequality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>Указывает на наличие неравенства между значениями двух заданных объектов <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" />.</summary>
      <param name="left">Первый из сравниваемых объектов.</param>
      <param name="right">Второй из сравниваемых объектов.</param>
      <returns>Значение <see langword="true" />, если <see langword="left" /> и <see langword="right" /> не равны друг другу; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.ToString">
      <summary>Возвращает строковое представление текущего экземпляра <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" />.</summary>
      <returns>Строковое представление текущего объекта.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Mode">
      <summary>Получает режим заполнения, представленный этим экземпляром <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" />.</summary>
      <returns>Режим заполнения.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepHashAlgorithm">
      <summary>Получает хэш-алгоритм, используемый в сочетании с режимом заполнения <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />.</summary>
      <returns>Хэш-алгоритм.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1">
      <summary>Получает объект, представляющий стандарт шифрования OAEP с хэш-алгоритмом SHA1.</summary>
      <returns>Объект, представляющий стандарт шифрования OAEP с хэш-алгоритмом SHA1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA256">
      <summary>Получает объект, представляющий стандарт шифрования OAEP с хэш-алгоритмом SHA256.</summary>
      <returns>Объект, представляющий стандарт шифрования OAEP с хэш-алгоритмом SHA256.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA384">
      <summary>Получает объект, представляющий стандарт шифрования OAEP с хэш-алгоритмом SHA-384.</summary>
      <returns>Объект, представляющий стандарт шифрования OAEP с хэш-алгоритмом SHA384.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA512">
      <summary>Получает объект, представляющий стандарт шифрования OAEP с хэш-алгоритмом SHA512.</summary>
      <returns>Объект, представляющий стандарт шифрования OAEP с хэш-алгоритмом SHA512.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1">
      <summary>Получает объект, представляющий стандарт шифрования PKCS #1.</summary>
      <returns>Объект, представляющий стандарт шифрования PKCS #1.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPaddingMode">
      <summary>Задает режим заполнения для использования с операциями шифрования или расшифровки RSA.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep">
      <summary>Заполнение для оптимального асимметричного шифрования (заполнение OAEP). Рекомендуется для новых приложений.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Pkcs1">
      <summary>PKCS #1 v1.5 Поддерживается для совместимости с существующими приложениями.</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter">
      <summary>Расшифровывает данные обмена ключа Optimal Asymmetric Encryption Padding (OAEP).</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> с заданным ключом.</summary>
      <param name="key">Экземпляр алгоритма <see cref="T:System.Security.Cryptography.RSA" />, который содержит закрытый ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>Извлекает конфиденциальные сведения из зашифрованных данных обмена ключами.</summary>
      <param name="rgbData">Данные обмена ключами, в которых скрыты конфиденциальные сведения.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Сбой при проверке данных обмена ключами.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Ключ отсутствует.</exception>
      <returns>Конфиденциальные сведения, извлекаемые из данных обмена ключами.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Задает закрытый ключ для расшифровки конфиденциальных данных.</summary>
      <param name="key">Экземпляр алгоритма <see cref="T:System.Security.Cryptography.RSA" />, который содержит закрытый ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.Parameters">
      <summary>Возвращает параметры для обмена ключами Optimal Asymmetric Encryption Padding (OAEP).</summary>
      <returns>XML-строка, содержащая параметры операции обмена ключами OAEP.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter">
      <summary>Создает данные обмена ключа Optimal Asymmetric Encryption Padding (OAEP) с помощью <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> с заданным ключом.</summary>
      <param name="key">Экземпляр алгоритма <see cref="T:System.Security.Cryptography.RSA" />, который содержит открытый ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>Создает из указанных входных данных зашифрованные данные для обмена ключами.</summary>
      <param name="rgbData">Секретные сведения, которые будут переданы при обмене ключами.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Ключ отсутствует.</exception>
      <returns>Зашифрованные данные обмена ключами для отправки предполагаемому получателю.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>Создает из указанных входных данных зашифрованные данные для обмена ключами.</summary>
      <param name="rgbData">Секретные сведения, которые будут переданы при обмене ключами.</param>
      <param name="symAlgType">Этот параметр не используется в текущей версии.</param>
      <returns>Зашифрованные данные обмена ключами для отправки предполагаемому получателю.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Задает открытый ключ, используемый для шифрования данных обмена ключами.</summary>
      <param name="key">Экземпляр алгоритма <see cref="T:System.Security.Cryptography.RSA" />, который содержит открытый ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter">
      <summary>Возвращает или задает параметр, используемый для создания отбивки при создании процесса обмена ключами.</summary>
      <returns>Значение параметра.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters">
      <summary>Возвращает параметры для обмена ключами Optimal Asymmetric Encryption Padding (OAEP).</summary>
      <returns>XML-строка, содержащая параметры операции обмена ключами OAEP.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng">
      <summary>Получает или задает алгоритм генерации случайных чисел, используемый при создании механизма обмена ключами.</summary>
      <returns>Экземпляр используемого алгоритма генерации случайных чисел.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAParameters">
      <summary>Представляет стандартные параметры для алгоритма <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.D">
      <summary>Представляет параметр <see langword="D" /> для алгоритма <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DP">
      <summary>Представляет параметр <see langword="DP" /> для алгоритма <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DQ">
      <summary>Представляет параметр <see langword="DQ" /> для алгоритма <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Exponent">
      <summary>Представляет параметр <see langword="Exponent" /> для алгоритма <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.InverseQ">
      <summary>Представляет параметр <see langword="InverseQ" /> для алгоритма <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Modulus">
      <summary>Представляет параметр <see langword="Modulus" /> для алгоритма <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.P">
      <summary>Представляет параметр <see langword="P" /> для алгоритма <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Q">
      <summary>Представляет параметр <see langword="Q" /> для алгоритма <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter">
      <summary>Расшифровывает данные обмена ключами PKCS #1.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> с заданным ключом.</summary>
      <param name="key">Экземпляр алгоритма <see cref="T:System.Security.Cryptography.RSA" />, который содержит закрытый ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>Извлекает конфиденциальные сведения из зашифрованных данных обмена ключами.</summary>
      <param name="rgbIn">Данные обмена ключами, в которых скрыты конфиденциальные сведения.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Ключ отсутствует.</exception>
      <returns>Конфиденциальные сведения, извлекаемые из данных обмена ключами.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Задает закрытый ключ для расшифровки конфиденциальных данных.</summary>
      <param name="key">Экземпляр алгоритма <see cref="T:System.Security.Cryptography.RSA" />, который содержит закрытый ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.Parameters">
      <summary>Получает параметры для обмена ключами PKCS #1.</summary>
      <returns>Строка XML, содержащая параметры операции обмена ключами PKCS #1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.RNG">
      <summary>Получает или задает алгоритм генерации случайных чисел, используемый при создании механизма обмена ключами.</summary>
      <returns>Экземпляр используемого алгоритма генерации случайных чисел.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter">
      <summary>Создает данные обмена ключами PKCS#1 с помощью <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> с заданным ключом.</summary>
      <param name="key">Экземпляр алгоритма <see cref="T:System.Security.Cryptography.RSA" />, который содержит открытый ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>Создает из указанных входных данных зашифрованные данные для обмена ключами.</summary>
      <param name="rgbData">Секретные сведения, которые будут переданы при обмене ключами.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Объект <paramref name="rgbData" /> имеет слишком большой размер.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Ключ — <see langword="null" />.</exception>
      <returns>Зашифрованные данные обмена ключами для отправки предполагаемому получателю.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>Создает из указанных входных данных зашифрованные данные для обмена ключами.</summary>
      <param name="rgbData">Секретные сведения, которые будут переданы при обмене ключами.</param>
      <param name="symAlgType">Этот параметр не используется в текущей версии.</param>
      <returns>Зашифрованные данные обмена ключами для отправки предполагаемому получателю.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Задает открытый ключ, используемый для шифрования данных обмена ключами.</summary>
      <param name="key">Экземпляр алгоритма <see cref="T:System.Security.Cryptography.RSA" />, который содержит открытый ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters">
      <summary>Получает параметры для обмена ключами PKCS #1.</summary>
      <returns>Строка XML, содержащая параметры операции обмена ключами PKCS #1.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng">
      <summary>Получает или задает алгоритм генерации случайных чисел, используемый при создании механизма обмена ключами.</summary>
      <returns>Экземпляр используемого алгоритма генерации случайных чисел.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter">
      <summary>Проверяет подпись PKCS #1 версии 1.5 <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> с заданным ключом.</summary>
      <param name="key">Экземпляр класса <see cref="T:System.Security.Cryptography.RSA" />, который содержит открытый ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>Задает хэш-алгоритм для подтверждения подписи.</summary>
      <param name="strName">Имя хэш-алгоритма для подтверждения подписи.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Задает открытый ключ, используемый для проверки подписи.</summary>
      <param name="key">Экземпляр класса <see cref="T:System.Security.Cryptography.RSA" />, который содержит открытый ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>Проверяет подпись PKCS #1 <see cref="T:System.Security.Cryptography.RSA" /> для указанных данных.</summary>
      <param name="rgbHash">Данные, подписанные с помощью <paramref name="rgbSignature" />.</param>
      <param name="rgbSignature">Подпись, которую требуется проверить с использованием <paramref name="rgbHash" />.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Ключ — <see langword="null" />.  
  
-или- 
Хэш-алгоритм имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="rgbHash" /> имеет значение <see langword="null" />.  
  
-или- 
Параметр <paramref name="rgbSignature" /> имеет значение <see langword="null" />.</exception>
      <returns>Значение <see langword="true" />, если <paramref name="rgbSignature" /> совпадает с подписью, вычисленной с помощью указанного хэш-алгоритма и ключа для <paramref name="rgbHash" />; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter">
      <summary>Создает подпись PKCS #1 версии 1.5 <see cref="T:System.Security.Cryptography.RSA" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> с заданным ключом.</summary>
      <param name="key">Экземпляр алгоритма <see cref="T:System.Security.Cryptography.RSA" />, который содержит закрытый ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(System.Byte[])">
      <summary>Создает подпись PKCS #1 <see cref="T:System.Security.Cryptography.RSA" /> для указанных данных.</summary>
      <param name="rgbHash">Данные, которые должны быть подписаны.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">Ключ — <see langword="null" />.  
  
-или- 
Хэш-алгоритм имеет значение <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="rgbHash" /> имеет значение <see langword="null" />.</exception>
      <returns>Цифровая подпись для <paramref name="rgbHash" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>Задает хэш-алгоритм для создания подписи.</summary>
      <param name="strName">Имя хэш-алгоритма для создания подписи.</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Задает закрытый ключ, используемый для создания подписи.</summary>
      <param name="key">Экземпляр алгоритма <see cref="T:System.Security.Cryptography.RSA" />, который содержит закрытый ключ.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePadding">
      <summary>Задает режим заполнения и параметры для использования с операциями создания или проверки подписи RSA.</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Object)">
      <summary>Возвращает значение, показывающее, равен ли экземпляр указанному объекту.</summary>
      <param name="obj">Объект для сравнения с текущим экземпляром.</param>
      <returns>Значение <see langword="true" />, если указанный объект равен текущему объекту; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Security.Cryptography.RSASignaturePadding)">
      <summary>Возвращает значение, указывающее, равен ли данный экземпляр указанному объекту <see cref="T:System.Security.Cryptography.RSASignaturePadding" />.</summary>
      <param name="other">Объект для сравнения с текущим экземпляром.</param>
      <returns>Значение <see langword="true" />, если указанный объект равен текущему объекту; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.GetHashCode">
      <summary>Возвращает хэш-код этого экземпляра <see cref="T:System.Security.Cryptography.RSASignaturePadding" />.</summary>
      <returns>Хэш-код данного экземпляра <see cref="T:System.Security.Cryptography.RSASignaturePadding" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Equality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Указывает, равны ли значения двух заданных объектов <see cref="T:System.Security.Cryptography.RSASignaturePadding" />.</summary>
      <param name="left">Первый из сравниваемых объектов.</param>
      <param name="right">Второй из сравниваемых объектов.</param>
      <returns>Значение <see langword="true" />, если <see langword="left" /> и <see langword="right" /> равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Inequality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>Указывает на наличие неравенства между значениями двух заданных объектов <see cref="T:System.Security.Cryptography.RSASignaturePadding" />.</summary>
      <param name="left">Первый из сравниваемых объектов.</param>
      <param name="right">Второй из сравниваемых объектов.</param>
      <returns>Значение <see langword="true" />, если <see langword="left" /> и <see langword="right" /> не равны; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.ToString">
      <summary>Возвращает строковое представление текущего экземпляра <see cref="T:System.Security.Cryptography.RSASignaturePadding" />.</summary>
      <returns>Строковое представление текущего объекта.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Mode">
      <summary>Получает режим заполнения данного экземпляра <see cref="T:System.Security.Cryptography.RSASignaturePadding" />.</summary>
      <returns>Режим заполнения (<see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" /> или <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" />) данного экземпляра.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1">
      <summary>Получает объект, который использует режим заполнения PKCS #1 v1.5.</summary>
      <returns>Объект, использующий режим заполнения <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pss">
      <summary>Получает объект, использующий режим заполнения PSS.</summary>
      <returns>Объект, который использует режим заполнения <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" /> с количеством байт случайных данных, равным размеру хэша.</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePaddingMode">
      <summary>Задает режим заполнения для использования с операциями создания или проверки подписи RSA.</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1">
      <summary>PKCS #1 v1.5</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss">
      <summary>Вероятностная схема подписи.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1">
      <summary>Вычисляет хэш <see cref="T:System.Security.Cryptography.SHA1" /> для входных данных.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.SHA1" />.</summary>
      <exception cref="T:System.InvalidOperationException">Политика данного объекта не соответствует стандарту FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create">
      <summary>Создает экземпляр реализации класса <see cref="T:System.Security.Cryptography.SHA1" /> по умолчанию.</summary>
      <returns>Новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA1" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create(System.String)">
      <summary>Создает экземпляр заданной реализации класса <see cref="T:System.Security.Cryptography.SHA1" />.</summary>
      <param name="hashName">Имя конкретной реализации класса <see cref="T:System.Security.Cryptography.SHA1" />, которую требуется использовать.</param>
      <returns>Новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA1" />, использующий заданную реализацию.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.Byte[])">
      <summary>Вычисляет хэш данных с помощью алгоритма SHA1.</summary>
      <param name="source">Данные для хэширования.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns>Хэш данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>Вычисляет хэш данных с помощью алгоритма SHA1.</summary>
      <param name="source">Данные для хэширования.</param>
      <returns>Хэш данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>Вычисляет хэш данных с помощью алгоритма SHA1.</summary>
      <param name="source">Данные для хэширования.</param>
      <param name="destination">Буфер для получения значения хэша.</param>
      <exception cref="T:System.ArgumentException">Размер буфера в <paramref name="destination" /> слишком мал для хранения вычисленного хэша. Алгоритм SHA1 всегда создает 160-разрядный хэш (20 байт).</exception>
      <returns>Общее количество байт данных, записанных в <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Пытается вычислить хэш данных с помощью алгоритма SHA1.</summary>
      <param name="source">Данные для хэширования.</param>
      <param name="destination">Буфер для получения значения хэша.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />.</param>
      <returns>Имеет значение <see langword="false" />, если размер <paramref name="destination" /> слишком мал для хранения вычисленного хэша. В противном случае имеет значение <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Managed">
      <summary>Вычисляет хэш <see cref="T:System.Security.Cryptography.SHA1" /> для входных данных с помощью управляемой библиотеки.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA1Managed" />.</summary>
      <exception cref="T:System.InvalidOperationException">Этот класс не соответствует стандарту FIPS.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Initialize">
      <summary>Инициализирует экземпляр <see cref="T:System.Security.Cryptography.SHA1Managed" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256">
      <summary>Вычисляет хэш <see cref="T:System.Security.Cryptography.SHA256" /> для входных данных.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.SHA256" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create">
      <summary>Создает экземпляр реализации класса <see cref="T:System.Security.Cryptography.SHA256" /> по умолчанию.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">Только для .NET Framework 4.6.1 и более ранних версий: этот алгоритм был использован с включенным режимом FIPS, однако он несовместим с FIPS.</exception>
      <returns>Новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA256" />. На платформе .NET Framework этот метод создает экземпляр класса <see cref="T:System.Security.Cryptography.SHA256Managed" />, если не используется режим FIPS. Если режим FIPS активен, то он создает экземпляр класса <see cref="T:System.Security.Cryptography.SHA256Cng" />. На платформе .NET Core он возвращает экземпляр закрытого класса, являющегося производным от класса <see cref="T:System.Security.Cryptography.SHA256" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create(System.String)">
      <summary>Создает экземпляр заданной реализации класса <see cref="T:System.Security.Cryptography.SHA256" />.</summary>
      <param name="hashName">Имя конкретной реализации класса <see cref="T:System.Security.Cryptography.SHA256" />, которую требуется использовать.</param>
      <exception cref="T:System.Reflection.TargetInvocationException">Только для .NET Framework: включен режим FIPS, но <paramref name="hashName" /> запрашивает <see cref="T:System.Security.Cryptography.SHA256Managed" />, который несовместим с FIPS.</exception>
      <returns>Новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA256" />, использующий заданную реализацию.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.Byte[])">
      <summary>Вычисляет хэш данных с помощью алгоритма SHA256.</summary>
      <param name="source">Данные для хэширования.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns>Хэш данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>Вычисляет хэш данных с помощью алгоритма SHA256.</summary>
      <param name="source">Данные для хэширования.</param>
      <returns>Хэш данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>Вычисляет хэш данных с помощью алгоритма SHA256.</summary>
      <param name="source">Данные для хэширования.</param>
      <param name="destination">Буфер для получения значения хэша.</param>
      <exception cref="T:System.ArgumentException">Размер буфера в <paramref name="destination" /> слишком мал для хранения вычисленного хэша. Алгоритм SHA256 всегда создает 256-разрядный хэш (32 байта).</exception>
      <returns>Общее количество байт данных, записанных в <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Пытается вычислить хэш данных с помощью алгоритма SHA256.</summary>
      <param name="source">Данные для хэширования.</param>
      <param name="destination">Буфер для получения значения хэша.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />.</param>
      <returns>Имеет значение <see langword="false" />, если размер <paramref name="destination" /> слишком мал для хранения вычисленного хэша. В противном случае имеет значение <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Managed">
      <summary>Вычисляет хэш <see cref="T:System.Security.Cryptography.SHA256" /> для входных данных с помощью управляемой библиотеки.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA256Managed" />, используя управляемую библиотеку.</summary>
      <exception cref="T:System.InvalidOperationException">Параметр безопасности FIPS включен. Эта реализация не входит в состав криптографических алгоритмов, утвержденных в стандартах FIPS для платформы Windows.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Initialize">
      <summary>Инициализирует экземпляр <see cref="T:System.Security.Cryptography.SHA256Managed" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384">
      <summary>Вычисляет хэш <see cref="T:System.Security.Cryptography.SHA384" /> для входных данных.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.SHA384" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create">
      <summary>Создает экземпляр реализации класса <see cref="T:System.Security.Cryptography.SHA384" /> по умолчанию.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">Этот алгоритм был использован с включенным режимом FIPS, однако он не совместим с FIPS.</exception>
      <returns>Новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA384" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create(System.String)">
      <summary>Создает экземпляр заданной реализации класса <see cref="T:System.Security.Cryptography.SHA384" />.</summary>
      <param name="hashName">Имя конкретной реализации класса <see cref="T:System.Security.Cryptography.SHA384" />, которую требуется использовать.</param>
      <exception cref="T:System.Reflection.TargetInvocationException">Алгоритм, описание которого содержится в параметре<paramref name="hashName" />, использовался с включенным режимом FIPS, но не является FIPS-совместимым.</exception>
      <returns>Новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA384" />, использующий заданную реализацию.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.Byte[])">
      <summary>Вычисляет хэш данных с помощью алгоритма SHA384.</summary>
      <param name="source">Данные для хэширования.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns>Хэш данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>Вычисляет хэш данных с помощью алгоритма SHA384.</summary>
      <param name="source">Данные для хэширования.</param>
      <returns>Хэш данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>Вычисляет хэш данных с помощью алгоритма SHA384.</summary>
      <param name="source">Данные для хэширования.</param>
      <param name="destination">Буфер для получения значения хэша.</param>
      <exception cref="T:System.ArgumentException">Размер буфера в <paramref name="destination" /> слишком мал для хранения вычисленного хэша. Алгоритм SHA384 всегда создает 384-разрядный хэш (48 байт).</exception>
      <returns>Общее количество байт данных, записанных в <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Пытается вычислить хэш данных с помощью алгоритма SHA384.</summary>
      <param name="source">Данные для хэширования.</param>
      <param name="destination">Буфер для получения значения хэша.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />.</param>
      <returns>Имеет значение <see langword="false" />, если размер <paramref name="destination" /> слишком мал для хранения вычисленного хэша. В противном случае имеет значение <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Managed">
      <summary>Вычисляет хэш <see cref="T:System.Security.Cryptography.SHA384" /> для входных данных с помощью управляемой библиотеки.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA384Managed" />.</summary>
      <exception cref="T:System.InvalidOperationException">Параметр безопасности FIPS включен. Эта реализация не входит в состав криптографических алгоритмов, утвержденных в стандартах FIPS для платформы Windows.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.Initialize">
      <summary>Инициализирует экземпляр <see cref="T:System.Security.Cryptography.SHA384Managed" />.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512">
      <summary>Вычисляет хэш <see cref="T:System.Security.Cryptography.SHA512" /> для входных данных.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Security.Cryptography.SHA512" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create">
      <summary>Создает экземпляр реализации класса <see cref="T:System.Security.Cryptography.SHA512" /> по умолчанию.</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">Этот алгоритм был использован с включенным режимом FIPS, однако он не совместим с FIPS.</exception>
      <returns>Новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA512" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create(System.String)">
      <summary>Создает экземпляр заданной реализации класса <see cref="T:System.Security.Cryptography.SHA512" />.</summary>
      <param name="hashName">Имя конкретной реализации класса <see cref="T:System.Security.Cryptography.SHA512" />, которую требуется использовать.</param>
      <exception cref="T:System.Reflection.TargetInvocationException">Алгоритм, описание которого содержится в параметре<paramref name="hashName" />, использовался с включенным режимом FIPS, но не является FIPS-совместимым.</exception>
      <returns>Новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA512" />, использующий заданную реализацию.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.Byte[])">
      <summary>Вычисляет хэш данных с помощью алгоритма SHA512.</summary>
      <param name="source">Данные для хэширования.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> имеет значение <see langword="null" />.</exception>
      <returns>Хэш данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>Вычисляет хэш данных с помощью алгоритма SHA512.</summary>
      <param name="source">Данные для хэширования.</param>
      <returns>Хэш данных.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>Вычисляет хэш данных с помощью алгоритма SHA512.</summary>
      <param name="source">Данные для хэширования.</param>
      <param name="destination">Буфер для получения значения хэша.</param>
      <exception cref="T:System.ArgumentException">Размер буфера в <paramref name="destination" /> слишком мал для хранения вычисленного хэша. Алгоритм SHA1 всегда создает 512-разрядный хэш (64 байта).</exception>
      <returns>Общее количество байт данных, записанных в <paramref name="destination" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>Пытается вычислить хэш данных с помощью алгоритма SHA512.</summary>
      <param name="source">Данные для хэширования.</param>
      <param name="destination">Буфер для получения значения хэша.</param>
      <param name="bytesWritten">Этот метод возвращает общее количество байтов, записанных в <paramref name="destination" />.</param>
      <returns>Имеет значение <see langword="false" />, если размер <paramref name="destination" /> слишком мал для хранения вычисленного хэша. В противном случае имеет значение <see langword="true" />.</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Managed">
      <summary>Вычисляет хэш <see cref="T:System.Security.Cryptography.SHA512" /> для входных данных с помощью управляемой библиотеки.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SHA512Managed" />.</summary>
      <exception cref="T:System.InvalidOperationException">Параметр безопасности FIPS включен. Эта реализация не входит в состав криптографических алгоритмов, утвержденных в стандартах FIPS для платформы Windows.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.Initialize">
      <summary>Инициализирует экземпляр класса <see cref="T:System.Security.Cryptography.SHA512Managed" />, используя управляемую библиотеку.</summary>
    </member>
    <member name="T:System.Security.Cryptography.SignatureDescription">
      <summary>Содержит сведения о свойствах цифровой подписи.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SignatureDescription" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor(System.Security.SecurityElement)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.SignatureDescription" /> из указанного потока <see cref="T:System.Security.SecurityElement" />.</summary>
      <param name="el">Объект <see cref="T:System.Security.SecurityElement" />, из которого необходимо получить алгоритмы для описания подписи.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="el" /> имеет значение <see langword="null" />.</exception>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Создает экземпляр <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> с заданным ключом, используя свойство <see cref="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm" />.</summary>
      <param name="key">Ключ, используемый в <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />.</param>
      <returns>Вновь созданный экземпляр <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDigest">
      <summary>Создает экземпляр <see cref="T:System.Security.Cryptography.HashAlgorithm" /> с помощью свойства <see cref="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm" />.</summary>
      <returns>Вновь созданный экземпляр <see cref="T:System.Security.Cryptography.HashAlgorithm" />.</returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>Создает экземпляр <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> с заданным ключом, используя свойство <see cref="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm" />.</summary>
      <param name="key">Ключ, используемый в <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />.</param>
      <returns>Вновь созданный экземпляр <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm">
      <summary>Получает или задает алгоритм проверки подписи для описания подписи.</summary>
      <returns>Алгоритм проверки подписи для описания подписи.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm">
      <summary>Получает или задает алгоритм дайджеста для описания подписи.</summary>
      <returns>Алгоритм дайджеста для описания подписи.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm">
      <summary>Получает или задает алгоритм создания подписи для описания подписи.</summary>
      <returns>Алгоритм создания подписи для описания подписи.</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.KeyAlgorithm">
      <summary>Получает или задает алгоритм с ключом для описания подписи.</summary>
      <returns>Алгоритм с ключом для описания подписи.</returns>
    </member>
    <member name="T:System.Security.Cryptography.TripleDES">
      <summary>Представляет базовый класс для алгоритмов Triple DES, от которых должны наследоваться все реализации <see cref="T:System.Security.Cryptography.TripleDES" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.Cryptography.TripleDES" />.</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create">
      <summary>Создает экземпляр криптографического объекта для выполнения алгоритма <see cref="T:System.Security.Cryptography.TripleDES" />.</summary>
      <returns>Экземпляр криптографического объекта.</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create(System.String)">
      <summary>Создает экземпляр криптографического объекта для выполнения заданной реализации алгоритма <see cref="T:System.Security.Cryptography.TripleDES" />.</summary>
      <param name="str">Имя конкретной реализации <see cref="T:System.Security.Cryptography.TripleDES" />, которую требуется использовать.</param>
      <returns>Экземпляр криптографического объекта.</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])">
      <summary>Определяет, является ли указанный ключ слабым.</summary>
      <param name="rgbKey">Секретный ключ, проверяемый на слабость.</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Недопустимый размер параметра <paramref name="rgbKey" />.</exception>
      <returns>Значение <see langword="true" />, если ключ слабый; в противном случае — значение <see langword="false" />.</returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDES.Key">
      <summary>Получает или задает секретный ключ для алгоритма <see cref="T:System.Security.Cryptography.TripleDES" />.</summary>
      <exception cref="T:System.ArgumentNullException">Предпринята попытка установить для этого ключа значение <see langword="null" />.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">Предпринята попытка установить ключ, длина которого недопустима.  
  
-или- 
Предпринята попытка установить слабый ключ (см. <see cref="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])" />).</exception>
      <returns>Секретный ключ для алгоритма <see cref="T:System.Security.Cryptography.TripleDES" />.</returns>
    </member>
  </members>
</doc>
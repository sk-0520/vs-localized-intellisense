<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Collections.Concurrent</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Concurrent.BlockingCollection`1">
      <summary vsli:raw="Provides blocking and bounding capabilities for thread-safe collections that implement &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">Fornece funcionalidades de bloqueio e delimitação para coleções thread-safe que implementam <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</summary>
      <typeparam name="T" vsli:raw="The type of elements in the collection.">O tipo dos elementos na coleção.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class without an upper-bound.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> sem um limite superior.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class without an upper-bound and using the provided &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt; as its underlying data store.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> sem um limite superior e usando a <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> fornecida como seu armazenamento de dados subjacente.</summary>
      <param name="collection" vsli:raw="The collection to use as the underlying data store.">A coleção a ser usada como armazenamento de dados subjacente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; argument is null.">O argumento <paramref name="collection" /> é nulo.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Collections.Concurrent.IProducerConsumerCollection{`0},System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class with the specified upper-bound and using the provided &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt; as its underlying data store.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> com o limite superior especificado e usando a <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> fornecida como seu repositório de dados subjacente.</summary>
      <param name="collection" vsli:raw="The collection to use as the underlying data store.">A coleção a ser usada como armazenamento de dados subjacente.</param>
      <param name="boundedCapacity" vsli:raw="The bounded size of the collection.">O tamanho limitado da coleção.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; argument is null.">O argumento <paramref name="collection" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;boundedCapacity&quot; /&gt; is not a positive value.">O <paramref name="boundedCapacity" /> não é um valor positivo.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The supplied &lt;paramref name=&quot;collection&quot; /&gt; contains more values than is permitted by &lt;paramref name=&quot;boundedCapacity&quot; /&gt;.">A <paramref name="collection" /> fornecida contém mais valores que o permitido pela <paramref name="boundedCapacity" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class with the specified upper-bound.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> com o limite superior especificado.</summary>
      <param name="boundedCapacity" vsli:raw="The bounded size of the collection.">O tamanho limitado da coleção.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;boundedCapacity&quot; /&gt; is not a positive value.">O <paramref name="boundedCapacity" /> não é um valor positivo.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0)">
      <summary vsli:raw="Adds the item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">Adiciona o item ao <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</summary>
      <param name="item" vsli:raw="The item to be added to the collection. The value can be a null reference.">O item a ser adicionado à coleção. O valor pode ser uma referência nula.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi marcado como concluído com relação a adições.  
  
- ou - 
A coleção subjacente não aceitou o item.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Add(`0,System.Threading.CancellationToken)">
      <summary vsli:raw="Adds the item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">Adiciona o item ao <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</summary>
      <param name="item" vsli:raw="The item to be added to the collection. The value can be a null reference.">O item a ser adicionado à coleção. O valor pode ser uma referência nula.</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">Um token de cancelamento a ser observado.</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">Se o padrão <see cref="T:System.Threading.CancellationToken" /> for cancelado.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed or the &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; that owns &lt;paramref name=&quot;cancellationToken&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado ou o <see cref="T:System.Threading.CancellationTokenSource" /> que possui o <paramref name="cancellationToken" /> foi descartado.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi marcado como concluído com relação a adições.  
  
- ou - 
A coleção subjacente não aceitou o item.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
      <summary vsli:raw="Adds the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">Adiciona o item especificado a qualquer uma das instâncias de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> especificadas.</summary>
      <param name="collections" vsli:raw="The array of collections.">A matriz de coleções.</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">O item a ser adicionado a uma das coleções.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">Pelo menos uma das instâncias de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartada.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">O argumento <paramref name="collections" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">A contagem de <paramref name="collections" /> é maior que o tamanho máximo de 62 para STA e 63 para MTA.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">O argumento <paramref name="collections" /> é uma matriz de tamanho 0 ou contém um elemento nulo, ou pelo menos uma das coleções foi marcada como completa para adição.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">Pelo menos uma coleção subjacente não aceitou o item.</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added.">O índice da coleção na matriz <paramref name="collections" /> na qual o item foi adicionado.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.AddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Threading.CancellationToken)">
      <summary vsli:raw="Adds the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">Adiciona o item especificado a qualquer uma das instâncias de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> especificadas.</summary>
      <param name="collections" vsli:raw="The array of collections.">A matriz de coleções.</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">O item a ser adicionado a uma das coleções.</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">Um token de cancelamento a ser observado.</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">Se o padrão <see cref="T:System.Threading.CancellationToken" /> for cancelado.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">Pelo menos uma coleção subjacente não aceitou o item.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">O argumento <paramref name="collections" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">A contagem de <paramref name="collections" /> é maior que o tamanho máximo de 62 para STA e 63 para MTA.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">O argumento <paramref name="collections" /> é uma matriz de tamanho 0 ou contém um elemento nulo, ou pelo menos uma das coleções foi marcada como completa para adição.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed, or the &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; that created &lt;paramref name=&quot;cancellationToken&quot; /&gt; has been disposed.">Pelo menos uma das instâncias de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartada ou o <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> foi descartado.</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added.">O índice da coleção na matriz <paramref name="collections" /> na qual o item foi adicionado.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding">
      <summary vsli:raw="Marks the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances as not accepting any more additions.">Marca que as instâncias de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> não estão mais aceitando nenhuma adição.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies all of the items in the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance to a compatible one-dimensional array, starting at the specified index of the target array.">Copia todos os itens da instância <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> para uma matriz unidimensional compatível, iniciando no índice especificado da matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados da instância <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; argument is null.">O argumento <paramref name="array" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; argument is less than zero.">O argumento <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; argument is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA; The destination array is too small to hold all of the BlockingCollection elements.&#xA;&#xA; The array rank doesn't match.&#xA;&#xA; The array type is incompatible with the type of the BlockingCollection elements.">O argumento <paramref name="index" /> é igual ou maior que o comprimento da <paramref name="array" />.  
  
A matriz de destino é muito pequena para conter todos os elementos de BlockingCollection.  
  
A classificação da matriz não corresponde.  
  
O tipo de matriz é incompatível com o tipo dos elementos de BlockingCollection.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose">
      <summary vsli:raw="Releases all resources used by the current instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; class.">Libera todos os recursos usados pela instância atual da classe <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Dispose(System.Boolean)">
      <summary vsli:raw="Releases resources used by the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">Libera os recursos usados pela instância <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</summary>
      <param name="disposing" vsli:raw="Whether being disposed explicitly (true) or due to a finalizer (false).">Se está sendo descartado explicitamente (true) ou devido a um finalizador (false).</param>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable">
      <summary vsli:raw="Provides a consuming &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; for items in the collection.">Fornece um consumindo <see cref="T:System.Collections.Generic.IEnumerator`1" /> para itens na coleção.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that removes and returns items from the collection.">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que remove e retorna os itens da coleção.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.GetConsumingEnumerable(System.Threading.CancellationToken)">
      <summary vsli:raw="Provides a consuming &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; for items in the collection.">Fornece um consumindo <see cref="T:System.Collections.Generic.IEnumerable`1" /> para itens na coleção.</summary>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">Um token de cancelamento a ser observado.</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">Se o padrão <see cref="T:System.Threading.CancellationToken" /> for cancelado.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed or the &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; that created &lt;paramref name=&quot;cancellationToken&quot; /&gt; has been disposed">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado ou o <see cref="T:System.Threading.CancellationTokenSource" /> que criou o <paramref name="cancellationToken" /> foi descartado</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; that removes and returns items from the collection.">Um <see cref="T:System.Collections.Generic.IEnumerable`1" /> que remove e retorna os itens da coleção.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary vsli:raw="Provides an &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; for items in the collection.">Fornece um <see cref="T:System.Collections.Generic.IEnumerator`1" /> para itens na coleção.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.Generic.IEnumerator`1&quot; /&gt; for the items in the collection.">Um <see cref="T:System.Collections.Generic.IEnumerator`1" /> para os itens na coleção.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies all of the items in the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance to a compatible one-dimensional array, starting at the specified index of the target array.">Copia todos os itens da instância <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> para uma matriz unidimensional compatível, iniciando no índice especificado da matriz de destino.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados da instância <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; argument is null.">O argumento <paramref name="array" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; argument is less than zero.">O argumento <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; argument is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt;, the array is multidimensional, or the type parameter for the collection cannot be cast automatically to the type of the destination array.">O argumento <paramref name="index" /> é igual ou maior que o comprimento da <paramref name="array" />, a matriz é multidimensional ou o parâmetro de tipo para a coleção não pode ser convertido automaticamente no tipo da matriz de destino.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Provides an &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for items in the collection.">Fornece um <see cref="T:System.Collections.IEnumerator" /> para itens na coleção.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; for the items in the collection.">Um <see cref="T:System.Collections.IEnumerator" /> para os itens na coleção.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take">
      <summary vsli:raw="Removes an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">Remove um item do <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance, or the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; is empty and has been marked as complete with regards to additions.">A coleção subjacente foi modificada fora desta instância de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> ou o <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> está vazio e a coleção foi marcada como concluída para adição.</exception>
      <exception cref="T:System.OperationCanceledException">A <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> está vazia e foi marcada como concluída com relação a adições.</exception>
      <returns vsli:raw="The item that was removed from the collection.">O item removido da coleção.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.Take(System.Threading.CancellationToken)">
      <summary vsli:raw="Removes an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">Remove um item do <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</summary>
      <param name="cancellationToken" vsli:raw="A token that can be used to cancel the &quot;take&quot; operation.">Objeto que pode ser usado para cancelar a operação take.</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">O <see cref="T:System.Threading.CancellationToken" /> está cancelado.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">A <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartada ou a <see cref="T:System.Threading.CancellationTokenSource" /> que criou o token foi cancelada.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance, or the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; is empty and has been marked as complete with regards to additions.">A coleção subjacente foi modificada fora desta instância de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> ou a BlockingCollection está marcada como concluída para adicionar ou a <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> está vazia.</exception>
      <returns vsli:raw="The item that was removed from the collection.">O item removido da coleção.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
      <summary vsli:raw="Takes an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">Toma um item de qualquer uma das instâncias <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> especificadas.</summary>
      <param name="collections" vsli:raw="The array of collections.">A matriz de coleções.</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">O item removido de uma das coleções.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">Pelo menos uma das instâncias de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartada.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">O argumento <paramref name="collections" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">A contagem de <paramref name="collections" /> é maior que o tamanho máximo de 62 para STA e 63 para MTA.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element or &lt;see cref=&quot;M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding&quot; /&gt; has been called on the collection.">O argumento <paramref name="collections" /> é uma matriz de tamanho 0 ou contém um elemento nulo ou <see cref="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding" /> foi chamado na coleção.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">Pelo menos uma das coleções subjacentes foi alterada fora da instância de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed.">O índice da coleção na matriz <paramref name="collections" /> da qual o item foi removido.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Threading.CancellationToken)">
      <summary vsli:raw="Takes an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances while observing the specified cancellation token.">Recebe um item de qualquer uma das instâncias <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> especificadas, observando ao mesmo tempo o token de cancelamento especificado.</summary>
      <param name="collections" vsli:raw="The array of collections.">A matriz de coleções.</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">O item removido de uma das coleções.</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">Um token de cancelamento a ser observado.</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">Se o padrão <see cref="T:System.Threading.CancellationToken" /> for cancelado.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">Pelo menos uma das coleções subjacentes foi alterada fora da instância de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">O argumento <paramref name="collections" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">A contagem de <paramref name="collections" /> é maior que o tamanho máximo de 62 para STA e 63 para MTA.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or &lt;see cref=&quot;M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding&quot; /&gt; has been called on the collection.">O argumento <paramref name="collections" /> é uma matriz de comprimento zero ou contém um elemento nulo, ou <see cref="M:System.Collections.Concurrent.BlockingCollection`1.CompleteAdding" /> foi chamado na coleção.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">Pelo menos uma das instâncias de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartada.</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed.">O índice da coleção na matriz <paramref name="collections" /> da qual o item foi removido.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.ToArray">
      <summary vsli:raw="Copies the items from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance into a new array.">Copia os itens da instância <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> em uma nova matriz.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <returns vsli:raw="An array containing copies of the elements of the collection.">Uma matriz que contém cópias dos elementos da coleção.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0)">
      <summary vsli:raw="Tries to add the specified item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">Tenta adicionar o item especificado ao <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</summary>
      <param name="item" vsli:raw="The item to be added to the collection.">O item a ser adicionado à coleção.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi marcado como concluído com relação a adições.  
  
- ou - 
A coleção subjacente não aceitou o item.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;item&quot; /&gt; could be added; otherwise, &lt;see langword=&quot;false&quot; /&gt;. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown.">
        <see langword="true" /> se <paramref name="item" /> pôde ser adicionado; caso contrário, <see langword="false" />. Se o item for duplicado e a coleção subjacente não aceitar itens duplicados, será gerada uma <see cref="T:System.InvalidOperationException" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32)">
      <summary vsli:raw="Tries to add the specified item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; within the specified time period.">Tenta adicionar o item especificado à <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> dentro do período de tempo especificado.</summary>
      <param name="item" vsli:raw="The item to be added to the collection.">O item a ser adicionado à coleção.</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the collection to accept the item, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.">
        <paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi marcado como concluído com relação a adições.  
  
- ou - 
A coleção subjacente não aceitou o item.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;item&quot; /&gt; could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown.">
        <see langword="true" /> se o <paramref name="item" /> puder ser adicionado à coleção dentro do tempo especificado, caso contrário, false. Se o item for duplicado e a coleção subjacente não aceitar itens duplicados, será gerada uma <see cref="T:System.InvalidOperationException" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.Int32,System.Threading.CancellationToken)">
      <summary vsli:raw="Tries to add the specified item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; within the specified time period, while observing a cancellation token.">Tenta adicionar o item especificado ao <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> no período especificado, enquanto observa um token de cancelamento.</summary>
      <param name="item" vsli:raw="The item to be added to the collection.">O item a ser adicionado à coleção.</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the collection to accept the item, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">Um token de cancelamento a ser observado.</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">Se o padrão <see cref="T:System.Threading.CancellationToken" /> for cancelado.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed or the underlying &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado ou o <see cref="T:System.Threading.CancellationTokenSource" /> subjacente foi descartado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.">
        <paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi marcado como concluído com relação a adições.  
  
- ou - 
A coleção subjacente não aceitou o item.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;item&quot; /&gt; could be added to the collection within the specified time; otherwise, false. If the item is a duplicate, and the underlying collection does not accept duplicate items, then an &lt;see cref=&quot;T:System.InvalidOperationException&quot; /&gt; is thrown.">
        <see langword="true" /> se o <paramref name="item" /> puder ser adicionado à coleção dentro do tempo especificado, caso contrário, false. Se o item for duplicado e a coleção subjacente não aceitar itens duplicados, será gerada uma <see cref="T:System.InvalidOperationException" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAdd(`0,System.TimeSpan)">
      <summary vsli:raw="Tries to add the specified item to the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">Tenta adicionar o item especificado ao <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</summary>
      <param name="item" vsli:raw="The item to be added to the collection.">O item a ser adicionado à coleção.</param>
      <param name="timeout" vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents the number of milliseconds to wait, or a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents -1 milliseconds to wait indefinitely.">Um <see cref="T:System.TimeSpan" /> que representa o número de milissegundos para aguardar ou um <see cref="T:System.TimeSpan" /> que representa -1 milissegundos para aguardar indefinidamente.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> é um número negativo diferente de -1 milissegundos, que representa um tempo limite infinito ou o tempo limite é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete with regards to additions.&#xA;&#xA; -or-&#xA;&#xA; The underlying collection didn't accept the item.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi marcado como concluído com relação a adições.  
  
- ou - 
A coleção subjacente não aceitou o item.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;item&quot; /&gt; could be added to the collection within the specified time span; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <paramref name="item" /> puder ser adicionado à coleção dentro do tempo especificado, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0)">
      <summary vsli:raw="Tries to add the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">Tenta adicionar o item especificado a qualquer uma das instâncias <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> especificadas.</summary>
      <param name="collections" vsli:raw="The array of collections.">A matriz de coleções.</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">O item a ser adicionado a uma das coleções.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">Pelo menos uma das instâncias de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartada.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">O argumento <paramref name="collections" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">A contagem de <paramref name="collections" /> é maior que o tamanho máximo de 62 para STA e 63 para MTA.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">O argumento <paramref name="collections" /> é uma matriz de tamanho 0 ou contém um elemento nulo, ou pelo menos uma das coleções foi marcada como completa para adição.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">Pelo menos uma coleção subjacente não aceitou o item.</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added, or -1 if the item could not be added.">O índice da coleção na matriz <paramref name="collections" /> ao qual o item foi adicionado ou -1 caso o item não possa ser adicionado.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32)">
      <summary vsli:raw="Tries to add the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">Tenta adicionar o item especificado a qualquer uma das instâncias <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> especificadas.</summary>
      <param name="collections" vsli:raw="The array of collections.">A matriz de coleções.</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">O item a ser adicionado a uma das coleções.</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the collection to accept the item, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">Pelo menos uma das instâncias de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartada.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">O argumento <paramref name="collections" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito. 
- ou - 
A contagem de <paramref name="collections" /> é maior que o tamanho máximo de 62 para STA e 63 para MTA.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">O argumento <paramref name="collections" /> é uma matriz de tamanho 0 ou contém um elemento nulo, ou pelo menos uma das coleções foi marcada como completa para adição.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">Pelo menos uma coleção subjacente não aceitou o item.</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added, or -1 if the item could not be added.">O índice da coleção na matriz <paramref name="collections" /> ao qual o item foi adicionado ou -1 caso o item não possa ser adicionado.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.Int32,System.Threading.CancellationToken)">
      <summary vsli:raw="Tries to add the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">Tenta adicionar o item especificado a qualquer uma das instâncias <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> especificadas.</summary>
      <param name="collections" vsli:raw="The array of collections.">A matriz de coleções.</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">O item a ser adicionado a uma das coleções.</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the collection to accept the item, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">Um token de cancelamento a ser observado.</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">Se o padrão <see cref="T:System.Threading.CancellationToken" /> for cancelado.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">Pelo menos uma coleção subjacente não aceitou o item.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">O argumento <paramref name="collections" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito. 
- ou - 
A contagem de <paramref name="collections" /> é maior que o tamanho máximo de 62 para STA e 63 para MTA.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">O argumento <paramref name="collections" /> é uma matriz de tamanho 0 ou contém um elemento nulo, ou pelo menos uma das coleções foi marcada como completa para adição.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">Pelo menos uma das instâncias de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartada.</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added, or -1 if the item could not be added.">O índice da coleção na matriz <paramref name="collections" /> ao qual o item foi adicionado ou -1 caso o item não possa ser adicionado.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryAddToAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0,System.TimeSpan)">
      <summary vsli:raw="Tries to add the specified item to any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances while observing the specified cancellation token.">Tenta adicionar o item especificado a qualquer uma das instâncias <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> especificadas, observando ao mesmo tempo o token de cancelamento especificado.</summary>
      <param name="collections" vsli:raw="The array of collections.">A matriz de coleções.</param>
      <param name="item" vsli:raw="The item to be added to one of the collections.">O item a ser adicionado a uma das coleções.</param>
      <param name="timeout" vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents the number of milliseconds to wait, or a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents -1 milliseconds to wait indefinitely.">Um <see cref="T:System.TimeSpan" /> que representa o número de milissegundos para aguardar ou um <see cref="T:System.TimeSpan" /> que representa -1 milissegundos para aguardar indefinidamente.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances or the &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; that created &lt;paramref name=&quot;cancellationToken&quot; /&gt; has been disposed.">Pelo menos uma das instâncias <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> ou o <see cref="T:System.Threading.CancellationTokenSource" /> que criou <paramref name="cancellationToken" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">O argumento <paramref name="collections" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.&#xA;&#xA;-or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="timeout" /> é um número negativo diferente de -1 milissegundos, que representa um tempo limite infinito ou o tempo limite é maior que <see cref="F:System.Int32.MaxValue" />.  
  
- ou - 
A contagem de <paramref name="collections" /> é maior que o tamanho máximo de 62 para STA e 63 para MTA.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element, or at least one of collections has been marked as complete for adding.">O argumento <paramref name="collections" /> é uma matriz de tamanho 0 ou contém um elemento nulo, ou pelo menos uma das coleções foi marcada como completa para adição.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one underlying collection didn't accept the item.">Pelo menos uma coleção subjacente não aceitou o item.</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array to which the item was added, or -1 if the item could not be added.">O índice da coleção na matriz <paramref name="collections" /> ao qual o item foi adicionado ou -1 caso o item não possa ser adicionado.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@)">
      <summary vsli:raw="Tries to remove an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">Tenta remover um item no <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</summary>
      <param name="item" vsli:raw="The item to be removed from the collection.">O item a ser removido da coleção.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">A coleção subjacente foi alterada fora da instância de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um item pode ser removido; Caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32)">
      <summary vsli:raw="Tries to remove an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; in the specified time period.">Tenta remover um item do <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> no período de tempo especificado.</summary>
      <param name="item" vsli:raw="The item to be removed from the collection.">O item a ser removido da coleção.</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the item to be removed, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.">
        <paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">A coleção subjacente foi alterada fora da instância de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be removed from the collection within the specified  time; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um item puder ser removido da coleção dentro do tempo especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.Int32,System.Threading.CancellationToken)">
      <summary vsli:raw="Tries to remove an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; in the specified time period while observing a cancellation token.">Tenta remover um item do <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> no período especificado, enquanto observa um token de cancelamento.</summary>
      <param name="item" vsli:raw="The item to be removed from the collection.">O item a ser removido da coleção.</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the item to be removed, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">Um token de cancelamento a ser observado.</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; has been canceled.">O <see cref="T:System.Threading.CancellationToken" /> foi cancelado.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed or the underlying &lt;see cref=&quot;T:System.Threading.CancellationTokenSource&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado ou o <see cref="T:System.Threading.CancellationTokenSource" /> subjacente foi descartado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.">
        <paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">A coleção subjacente foi alterada fora da dessa instância de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be removed from the collection within the specified  time; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um item puder ser removido da coleção dentro do tempo especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTake(`0@,System.TimeSpan)">
      <summary vsli:raw="Tries to remove an item from the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; in the specified time period.">Tenta remover um item do <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> no período de tempo especificado.</summary>
      <param name="item" vsli:raw="The item to be removed from the collection.">O item a ser removido da coleção.</param>
      <param name="timeout" vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents the number of milliseconds to wait for the item to be removed, or a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents -1 milliseconds to wait indefinitely.">Um objeto que representa o número de milissegundos de espera ou um objeto que representa -1 milissegundos para esperar por tempo indeterminado.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="timeout" /> é um número negativo diferente de -1 milissegundo, que representa um tempo limite infinito. 
- ou - 
 <paramref name="timeout" /> é maior que <see cref="F:System.Int32.MaxValue" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The underlying collection was modified outside of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">A coleção subjacente foi alterada fora da instância de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item could be removed from the collection within the specified time; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um item puder ser removido da coleção dentro do tempo especificado; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@)">
      <summary vsli:raw="Tries to remove an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">Tenta remover um item de qualquer uma das instâncias <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> especificadas.</summary>
      <param name="collections" vsli:raw="The array of collections.">A matriz de coleções.</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">O item removido de uma das coleções.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">Pelo menos uma das instâncias de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartada.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">O argumento <paramref name="collections" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">A contagem de <paramref name="collections" /> é maior que o tamanho máximo de 62 para STA e 63 para MTA.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element.">O argumento <paramref name="collections" /> é uma matriz de tamanho 0 ou contém um elemento nulo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">Pelo menos uma das coleções subjacentes foi alterada fora da instância de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed, or -1 if an item could not be removed.">O índice da coleção na matriz <paramref name="collections" /> da qual o item foi removido ou -1 caso um item não possa ser removido.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32)">
      <summary vsli:raw="Tries to remove an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">Tenta remover um item de qualquer uma das instâncias <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> especificadas.</summary>
      <param name="collections" vsli:raw="The array of collections to remove an item from.">A matriz de coleções.</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">O item removido de uma das coleções.</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the item to be removed, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">Pelo menos uma das instâncias de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartada.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">O argumento <paramref name="collections" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito. 
- ou - 
A contagem de <paramref name="collections" /> é maior que o tamanho máximo de 62 para STA e 63 para MTA.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element.">O argumento <paramref name="collections" /> é uma matriz de tamanho 0 ou contém um elemento nulo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">Pelo menos uma das coleções subjacentes foi alterada fora da instância de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed, or -1 if an item could not be removed.">O índice da coleção na matriz <paramref name="collections" /> da qual o item foi removido ou -1 caso um item não possa ser removido.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.Int32,System.Threading.CancellationToken)">
      <summary vsli:raw="Tries to remove an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">Tenta remover um item de qualquer uma das instâncias <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> especificadas.</summary>
      <param name="collections" vsli:raw="The array of collections to remove an item from.">A matriz de coleções.</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">O item removido de uma das coleções.</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait for the item to be removed, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">O número de milissegundos para aguardar ou <see cref="F:System.Threading.Timeout.Infinite" /> (- 1) para aguardar indefinidamente.</param>
      <param name="cancellationToken" vsli:raw="A cancellation token to observe.">Um token de cancelamento a ser observado.</param>
      <exception cref="T:System.OperationCanceledException" vsli:raw="The &lt;see cref=&quot;T:System.Threading.CancellationToken&quot; /&gt; is canceled.">Se o padrão <see cref="T:System.Threading.CancellationToken" /> for cancelado.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">Pelo menos uma das coleções subjacentes foi alterada fora da instância de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">O argumento <paramref name="collections" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;millisecondsTimeout&quot; /&gt; is a negative number other than -1, which represents an infinite time-out.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="millisecondsTimeout" /> é um número negativo diferente de -1, que representa um tempo limite infinito. 
- ou - 
A contagem de <paramref name="collections" /> é maior que o tamanho máximo de 62 para STA e 63 para MTA.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element.">O argumento <paramref name="collections" /> é uma matriz de tamanho 0 ou contém um elemento nulo.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">Pelo menos uma das instâncias de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartada.</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed, or -1 if an item could not be removed.">O índice da coleção na matriz <paramref name="collections" /> da qual o item foi removido ou -1 caso um item não possa ser removido.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.BlockingCollection`1.TryTakeFromAny(System.Collections.Concurrent.BlockingCollection{`0}[],`0@,System.TimeSpan)">
      <summary vsli:raw="Tries to remove an item from any one of the specified &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances.">Tenta remover um item de qualquer uma das instâncias <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> especificadas.</summary>
      <param name="collections" vsli:raw="The array of collections.">A matriz de coleções.</param>
      <param name="item" vsli:raw="The item that was removed from one of the collections.">O item removido de uma das coleções.</param>
      <param name="timeout" vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents the number of milliseconds to wait, or a &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that represents -1 milliseconds to wait indefinitely.">Um <see cref="T:System.TimeSpan" /> que representa o número de milissegundos para aguardar ou um <see cref="T:System.TimeSpan" /> que representa -1 milissegundos para aguardar indefinidamente.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="At least one of the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instances has been disposed.">Pelo menos uma das instâncias de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartada.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is null.">O argumento <paramref name="collections" /> é nulo.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1 milliseconds, which represents an infinite time-out&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;timeout&quot; /&gt; is greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.&#xA;&#xA; -or-&#xA;&#xA; The count of &lt;paramref name=&quot;collections&quot; /&gt; is greater than the maximum size of 62 for STA and 63 for MTA.">
        <paramref name="timeout" /> é um número negativo diferente de -1 milissegundos, que representa um tempo limite infinito ou o tempo limite é maior que <see cref="F:System.Int32.MaxValue" />.  
  
- ou - 
A contagem de <paramref name="collections" /> é maior que o tamanho máximo de 62 para STA e 63 para MTA.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;collections&quot; /&gt; argument is a 0-length array or contains a null element.">O argumento <paramref name="collections" /> é uma matriz de tamanho 0 ou contém um elemento nulo.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="At least one of the underlying collections was modified outside of its &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">Pelo menos uma das coleções subjacentes foi alterada fora da instância de <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</exception>
      <returns vsli:raw="The index of the collection in the &lt;paramref name=&quot;collections&quot; /&gt; array from which the item was removed, or -1 if an item could not be removed.">O índice da coleção na matriz <paramref name="collections" /> da qual o item foi removido ou -1 caso um item não possa ser removido.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.BoundedCapacity">
      <summary vsli:raw="Gets the bounded capacity of this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; instance.">Obtém a capacidade limitada dessa instância <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <returns vsli:raw="The bounded capacity of this collection, or -1 if no bound was supplied.">A capacidade limitada dessa coleção ou int.MaxValue, se nenhum limite tiver sido fornecido.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.Count">
      <summary vsli:raw="Gets the number of items contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">Obtém o número de itens contidos no <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <returns vsli:raw="The number of items contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt;.">O número de itens contidos no <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsAddingCompleted">
      <summary vsli:raw="Gets whether this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete for adding.">Obtém se esta <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi marcada como completa para adição.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <returns vsli:raw="Whether this collection has been marked as complete for adding.">Se esta coleção foi marcada como completa para adição.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.IsCompleted">
      <summary vsli:raw="Gets whether this &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been marked as complete for adding and is empty.">Obtém se esta <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi marcada como completa para a adição e está vazia.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <returns vsli:raw="Whether this collection has been marked as complete for adding and is empty.">Se esta coleção foi marcada como completa para a adição e está vazia.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">Obtém um valor que indica se o acesso à <see cref="T:System.Collections.ICollection" /> é sincronizado (thread-safe).</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; has been disposed.">O <see cref="T:System.Collections.Concurrent.BlockingCollection`1" /> foi descartado.</exception>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt; to indicate the access is not synchronized.">Sempre retorna <see langword="false" /> para indicar que o acesso não está sincronizado.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.BlockingCollection`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />. Não há suporte a esta propriedade.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The SyncRoot property is not supported.">Não há suporte para a propriedade SyncRoot.</exception>
      <returns vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;.">Retorna <see langword="null" />.</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentBag`1">
      <summary vsli:raw="Represents a thread-safe, unordered collection of objects.">Representa uma coleção thread-safe não classificada de objetos.</summary>
      <typeparam name="T" vsli:raw="The type of the elements to be stored in the collection.">O tipo dos elementos a serem armazenados na coleção.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; class that contains elements copied from the specified collection.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> que contém elementos copiados da coleção especificada.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">A coleção cujos elementos são copiados para o novo <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="collection" /> é uma referência nula (Nada no Visual Basic).</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.Add(`0)">
      <summary vsli:raw="Adds an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">Adiciona um objeto ao <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</summary>
      <param name="item" vsli:raw="The object to be added to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">O objeto a ser adicionado ao <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />. O valor pode ser uma referência nula (Nada no Visual Basic) para tipos de referência.</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.Clear">
      <summary vsli:raw="Removes all values from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">Remove todos os valores do <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">Copia os elementos <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> em um <see cref="T:System.Array" /> unidimensional existente, começando no índice da matriz especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Um <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> é uma referência nula (Nada no Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- the number of elements in the source &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> é igual ou maior que o tamanho do <paramref name="array" /> -ou- o número de elementos no <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> de origem é maior que o espaço disponível do <paramref name="index" /> até o fim do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">Retorna um enumerador que itera por meio de <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</summary>
      <returns vsli:raw="An enumerator for the contents of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">Um enumerador para o conteúdo de <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary vsli:raw="Attempts to add an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">Tenta adicionar um objeto ao <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</summary>
      <param name="item" vsli:raw="The object to be added to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">O objeto a ser adicionado ao <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />. O valor pode ser uma referência nula (Nada no Visual Basic) para tipos de referência.</param>
      <returns vsli:raw="Always returns true.">Sempre retorna verdadeiro</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia os elementos do <see cref="T:System.Collections.ICollection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Um <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> é uma referência nula (Nada no Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional. -or- &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing. -or- &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;. -or- The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> é multidimensional. -ou- O <paramref name="array" /> não deve ter indexação baseada em zero. -ou- <paramref name="index" /> é igual ou maior que o tamanho da <paramref name="array" /> -ou- O número de elementos no <see cref="T:System.Collections.ICollection" /> de origem é maior que o espaço disponível do <paramref name="index" /> até o fim da <paramref name="array" /> de destino. -ou- O tipo do <see cref="T:System.Collections.ICollection" /> de origem não pode ser convertido automaticamente no tipo do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">Retorna um enumerador que itera por meio de <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</summary>
      <returns vsli:raw="An enumerator for the contents of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">Um enumerador para o conteúdo de <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.ToArray">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; elements to a new array.">Copia os elementos do <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> em uma nova matriz.</summary>
      <returns vsli:raw="A new array containing a snapshot of elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">Uma nova matriz que contém um instantâneo dos elementos copiados de <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryPeek(`0@)">
      <summary vsli:raw="Attempts to return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; without removing it.">Tenta retornar um objeto do <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> sem removê-lo.</summary>
      <param name="result" vsli:raw="When this method returns, &lt;paramref name=&quot;result&quot; /&gt; contains an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; or the default value of &lt;typeparamref name=&quot;T&quot; /&gt; if the operation failed.">Quando o método for retornado, <paramref name="result" /> conterá um objeto do <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> ou o valor padrão de <typeparamref name="T" /> se a operação falhar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an object was returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um objeto foi retornado com sucesso, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentBag`1.TryTake(`0@)">
      <summary vsli:raw="Attempts to remove and return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">Tenta remover e retornar um objeto do <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</summary>
      <param name="result" vsli:raw="When this method returns, &lt;paramref name=&quot;result&quot; /&gt; contains the object removed from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; or the default value of &lt;typeparamref name=&quot;T&quot; /&gt; if the bag is empty.">Quando este método retornar, <paramref name="result" /> conterá o objeto removido do <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> ou o valor padrão de <typeparamref name="T" /> se o multiconjunto estiver vazio.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an object was removed successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um objeto tiver sido removido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">Obtém o número de elementos contidos no <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;.">O número de elementos contidos no <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; is empty.">Obtém um valor que indica se a <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> está vazia.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" /> estiver vazio; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized with the SyncRoot.">Obtém um valor indicando se o acesso ao <see cref="T:System.Collections.ICollection" /> está sincronizado com o SyncRoot.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt; to indicate access is not synchronized.">Sempre retorna <see langword="false" /> para indicar que o acesso não está sincronizado.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentBag`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />. Não há suporte a esta propriedade.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The SyncRoot property is not supported.">Não há suporte para a propriedade SyncRoot.</exception>
      <returns vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;.">Retorna <see langword="null" />.</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentDictionary`2">
      <summary vsli:raw="Represents a thread-safe collection of key/value pairs that can be accessed by multiple threads concurrently.">Representa uma coleção thread-safe de pares chave-valor que podem ser acessados por vários threads ao mesmo tempo.</summary>
      <typeparam name="TKey" vsli:raw="The type of the keys in the dictionary.">O tipo das chaves no dicionário.</typeparam>
      <typeparam name="TValue" vsli:raw="The type of the values in the dictionary.">O tipo dos valores no dicionário.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that is empty, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> que está vazia, tem o nível de simultaneidade padrão, tem a capacidade inicial padrão e usa o comparador padrão para o tipo de chave.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt;, has the default concurrency level, has the default initial capacity, and uses the default comparer for the key type.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> que contém elementos copiados do <see cref="T:System.Collections.Generic.IEnumerable`1" /> especificado, tem o nível de simultaneidade padrão, tem a capacidade inicial padrão e usa o comparador padrão para o tipo de chave.</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">O <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são copiados para o novo <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or any of its keys is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> ou qualquer uma de suas chaves é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="collection" /> contém uma ou mais chaves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; has the default concurrency level, has the default initial capacity, and uses the specified  &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> que contém elementos copiados do <see cref="T:System.Collections.IEnumerable" /> especificado, tem o nível de simultaneidade padrão, tem a capacidade inicial padrão e usa o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">O <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são copiados para o novo <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys.">A implementação de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> a ser usada ao comparar chaves.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that is empty, has the default concurrency level and capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> que está vazia, tem a capacidade e o nível de simultaneidade padrão e usa o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="comparer" vsli:raw="The equality comparison implementation to use when comparing keys.">A implementação de comparação de igualdade a ser usada ao comparar chaves.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`0,`1}},System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that contains elements copied from the specified &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt;, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> que contém elementos copiados da <see cref="T:System.Collections.IEnumerable" /> especificada e usa o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="concurrencyLevel" vsli:raw="The estimated number of threads that will update the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; concurrently, or in .NET 8+ only, -1 to indicate the default concurrency level.">O número estimado de threads que atualizará o <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> simultaneamente.</param>
      <param name="collection" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">O <see cref="T:System.Collections.Generic.IEnumerable`1" /> cujos elementos são copiados para o novo <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys.">A implementação de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> a ser usada ao comparar chaves.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> ou <paramref name="comparer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;concurrencyLevel&quot; /&gt; is less than 1.">
        <paramref name="concurrencyLevel" /> é menor que 1.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; contains one or more duplicate keys.">
        <paramref name="collection" /> contém uma ou mais chaves duplicadas.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that is empty, has the specified concurrency level and capacity, and uses the default comparer for the key type.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> que está vazia, tem a capacidade e o nível de simultaneidade especificados e usa o comparador padrão para o tipo de chave.</summary>
      <param name="concurrencyLevel" vsli:raw="The estimated number of threads that will update the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; concurrently, or in .NET 8+ only, -1 to indicate the default concurrency level.">O número estimado de threads que atualizará o <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> simultaneamente.</param>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; can contain.">O número inicial de elementos que o <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> pode conter.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;concurrencyLevel&quot; /&gt; is less than 1.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;capacity&quot; /&gt; is less than 0.">
        <paramref name="concurrencyLevel" /> é menor que 1.  
  
- ou - 
 <paramref name="capacity" /> é menor que 0.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.#ctor(System.Int32,System.Int32,System.Collections.Generic.IEqualityComparer{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; class that is empty, has the specified concurrency level, has the specified initial capacity, and uses the specified &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt;.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> que está vazia, tem o nível se simultaneidade especificado, tem a capacidade inicial especificada e usa o <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> especificado.</summary>
      <param name="concurrencyLevel" vsli:raw="The estimated number of threads that will update the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; concurrently, or in .NET 8+ only, -1 to indicate the default concurrency level.">O número estimado de threads que atualizará o <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> simultaneamente.</param>
      <param name="capacity" vsli:raw="The initial number of elements that the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; can contain.">O número inicial de elementos que o <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> pode conter.</param>
      <param name="comparer" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.IEqualityComparer`1&quot; /&gt; implementation to use when comparing keys.">A implementação de <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> a ser usada ao comparar chaves.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;comparer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="comparer" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;concurrencyLevel&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than 1.">
        <paramref name="concurrencyLevel" /> ou <paramref name="capacity" /> é menor que 1.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,`1,System.Func{`0,`1,`1})">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key does not already exist, or updates a key/value pair in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; by using the specified function if the key already exists.">Adiciona um par chave-valor ao <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> se a chave ainda não existir ou atualiza um par chave-valor no <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> usando a função especificada se a chave já existir.</summary>
      <param name="key" vsli:raw="The key to be added or whose value should be updated.">A chave a ser adicionada ou cujo valor deve ser atualizado</param>
      <param name="addValue" vsli:raw="The value to be added for an absent key.">O valor a ser adicionado para uma chave ausente</param>
      <param name="updateValueFactory" vsli:raw="The function used to generate a new value for an existing key based on the key's existing value.">A função usada para gerar um novo valor para uma chave existente com base no valor existente da chave</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; or &lt;paramref name=&quot;updateValueFactory&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> ou <paramref name="updateValueFactory" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">O dicionário contém muitos elementos.</exception>
      <returns vsli:raw="The new value for the key. This will be either be &lt;paramref name=&quot;addValue&quot; /&gt; (if the key was absent) or the result of &lt;paramref name=&quot;updateValueFactory&quot; /&gt; (if the key was present).">O novo valor da chave. Será <paramref name="addValue" /> (se a chave estava ausente) ou o resultado de <paramref name="updateValueFactory" /> (se a chave estava presente).</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate(`0,System.Func{`0,`1},System.Func{`0,`1,`1})">
      <summary vsli:raw="Uses the specified functions to add a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key does not already exist, or to update a key/value pair in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key already exists.">Usará as funções especificadas para adicionar um par chave-valor ao <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> se a chave ainda não existir ou para atualizar um par chave-valor no <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> se a chave já existir.</summary>
      <param name="key" vsli:raw="The key to be added or whose value should be updated.">A chave a ser adicionada ou cujo valor deve ser atualizado</param>
      <param name="addValueFactory" vsli:raw="The function used to generate a value for an absent key.">A função usada para gerar um valor para uma chave ausente</param>
      <param name="updateValueFactory" vsli:raw="The function used to generate a new value for an existing key based on the key's existing value.">A função usada para gerar um novo valor para uma chave existente com base no valor existente da chave</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt;, &lt;paramref name=&quot;addValueFactory&quot; /&gt;, or &lt;paramref name=&quot;updateValueFactory&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" />, <paramref name="addValueFactory" /> ou <paramref name="updateValueFactory" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">O dicionário contém muitos elementos.</exception>
      <returns vsli:raw="The new value for the key. This will be either be the result of &lt;paramref name=&quot;addValueFactory&quot; /&gt; (if the key was absent) or the result of &lt;paramref name=&quot;updateValueFactory&quot; /&gt; (if the key was present).">O novo valor da chave. Esse será o resultado de <paramref name="addValueFactory" /> (se a chave estava ausente) ou o resultado de <paramref name="updateValueFactory" /> (se a chave estava presente).</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.AddOrUpdate``1(`0,System.Func{`0,``0,`1},System.Func{`0,`1,``0,`1},``0)">
      <summary vsli:raw="Uses the specified functions and argument to add a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key does not already exist, or to update a key/value pair in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key already exists.">Usará o argumento e as funções especificadas para adicionar um par chave-valor ao <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> se a chave ainda não existir ou para atualizar um par chave-valor no <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> se a chave já existir.</summary>
      <param name="key" vsli:raw="The key to be added or whose value should be updated.">A chave a ser adicionada ou cujo valor deve ser atualizado.</param>
      <param name="addValueFactory" vsli:raw="The function used to generate a value for an absent key.">A função usada para gerar um valor para uma chave ausente.</param>
      <param name="updateValueFactory" vsli:raw="The function used to generate a new value for an existing key based on the key's existing value.">A função usada para gerar um novo valor para uma chave existente com base no valor existente da chave.</param>
      <param name="factoryArgument" vsli:raw="An argument to pass into &lt;paramref name=&quot;addValueFactory&quot; /&gt; and &lt;paramref name=&quot;updateValueFactory&quot; /&gt;.">Um argumento a passar para <paramref name="addValueFactory" /> e <paramref name="updateValueFactory" />.</param>
      <typeparam name="TArg" vsli:raw="The type of an argument to pass into &lt;paramref name=&quot;addValueFactory&quot; /&gt; and &lt;paramref name=&quot;updateValueFactory&quot; /&gt;.">O tipo de um argumento para passar para <paramref name="addValueFactory" /> e <paramref name="updateValueFactory" /> .</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt;, &lt;paramref name=&quot;addValueFactory&quot; /&gt;, or &lt;paramref name=&quot;updateValueFactory&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="key" />, <paramref name="addValueFactory" /> ou <paramref name="updateValueFactory" /> é uma referência nula (Nothing no Visual Basic).</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">O dicionário contém muitos elementos.</exception>
      <returns vsli:raw="The new value for the key. This will be either be the result of &lt;paramref name=&quot;addValueFactory&quot; /&gt; (if the key was absent) or the result of &lt;paramref name=&quot;updateValueFactory&quot; /&gt; (if the key was present).">O novo valor da chave. Esse será o resultado de <paramref name="addValueFactory" /> (se a chave estava ausente) ou o resultado de <paramref name="updateValueFactory" /> (se a chave estava presente).</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.Clear">
      <summary vsli:raw="Removes all keys and values from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">Remove todas as chaves e valores do <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ContainsKey(`0)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; contains the specified key.">Determina se o <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> atual contém a chave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">A chave a ser localizada no <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">Retorna um enumerador que itera por meio de <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</summary>
      <returns vsli:raw="An enumerator for the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">Um enumerador para o <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,`1)">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; if the key does not already exist. Returns the new value, or the existing value if the key exists.">Adiciona um par chave-valor ao <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> se a chave ainda não existe. Retorna o novo valor ou o valor existente se a chave existir.</summary>
      <param name="key" vsli:raw="The key of the element to add.">A chave do elemento a ser adicionada.</param>
      <param name="value" vsli:raw="The value to be added, if the key does not already exist.">O valor a ser adicionado se a chave ainda não existir.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">O dicionário contém muitos elementos.</exception>
      <returns vsli:raw="The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.">O valor da chave. Esse será o valor existente da chave se ela já estiver no dicionário ou o novo valor se ela não estiver no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd(`0,System.Func{`0,`1})">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; by using the specified function if the key does not already exist. Returns the new value, or the existing value if the key exists.">Adiciona um par chave/valor para o <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> usando a função especificada, se a chave ainda não existir. Retorna o novo valor ou o valor existente se a chave existir.</summary>
      <param name="key" vsli:raw="The key of the element to add.">A chave do elemento a ser adicionada.</param>
      <param name="valueFactory" vsli:raw="The function used to generate a value for the key.">A função usada para gerar um valor para a chave.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; or &lt;paramref name=&quot;valueFactory&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> ou <paramref name="valueFactory" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">O dicionário contém muitos elementos.</exception>
      <returns vsli:raw="The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.">O valor da chave. Esse será o valor existente da chave se ela já estiver no dicionário ou o novo valor se ela não estiver no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.GetOrAdd``1(`0,System.Func{`0,``0,`1},``0)">
      <summary vsli:raw="Adds a key/value pair to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; by using the specified function and an argument if the key does not already exist, or returns the existing value if the key exists.">Adiciona um par chave/valor ao <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> usando o argumento e a função especificada se a chave ainda não existir ou retorna o valor existente se a chave já existir.</summary>
      <param name="key" vsli:raw="The key of the element to add.">A chave do elemento a ser adicionada.</param>
      <param name="valueFactory" vsli:raw="The function used to generate a value for the key.">A função usada para gerar um valor para a chave.</param>
      <param name="factoryArgument" vsli:raw="An argument value to pass into &lt;paramref name=&quot;valueFactory&quot; /&gt;.">Um valor de argumento para passar para <paramref name="valueFactory" />.</param>
      <typeparam name="TArg" vsli:raw="The type of an argument to pass into &lt;paramref name=&quot;valueFactory&quot; /&gt;.">O tipo de um argumento a ser passado <paramref name="valueFactory" /> .</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is a &lt;see langword=&quot;null&quot; /&gt; reference (Nothing in Visual Basic).">
        <paramref name="key" /> é uma referência <see langword="null" /> (Nothing no Visual Basic).</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">O dicionário contém muitos elementos.</exception>
      <returns vsli:raw="The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary.">O valor da chave. Esse será o valor existente da chave se ela já estiver no dicionário ou o novo valor se ela não estiver no dicionário.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Adds an item to the collection.">Adiciona um item à coleção.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to add to the dictionary.">O <see cref="T:System.Collections.Generic.KeyValuePair`2" /> a ser adicionado ao dicionário.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; of &lt;paramref name=&quot;keyValuePair&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">O <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> de <paramref name="keyValuePair" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt; contains too many elements.">O <see cref="T:System.Collections.Generic.Dictionary`2" /> contém muitos elementos.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Já existe um elemento com a mesma chave no <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Gets whether the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains an element with the specified key.">Determina se o <see cref="T:System.Collections.Generic.ICollection`1" /> contém um elemento com a chave especificada.</summary>
      <param name="keyValuePair" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">A chave a ser localizada no <see cref="T:System.Collections.Generic.ICollection`1" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.ICollection`1" /> contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an array, starting at the specified array index.">Copia os elementos do <see cref="T:System.Collections.ICollection" /> para uma matriz, começando no índice da matriz especificada.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.ICollection" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> é igual ou maior que o comprimento da <paramref name="array" />.

- ou -

O número de elementos na origem <see cref="T:System.Collections.ICollection" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes the specified key/value pair from the collection.">Remove o par chave/valor especificado da coleção.</summary>
      <param name="keyValuePair" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; to remove.">O <see cref="T:System.Collections.Generic.KeyValuePair`2" /> a ser removido.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; property of &lt;paramref name=&quot;keyValuePair&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">A propriedade <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> de <paramref name="keyValuePair" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns false if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.ICollection`1&quot; /&gt;.">
        <see langword="true" /> se o elemento for removido com êxito; caso contrário, <see langword="false" />. Esse método também retornará false se <paramref name="key" /> não tiver sido encontrado no <see cref="T:System.Collections.Generic.ICollection`1" /> original.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <summary vsli:raw="Adds the specified key and value to the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Adiciona a chave e o valor especificados ao <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key" vsli:raw="The object to use as the key of the element to add.">O objeto a ser usado como chave do elemento a ser adicionado.</param>
      <param name="value" vsli:raw="The object to use as the value of the element to add.">O objeto a ser usado como o valor do elemento a ser adicionado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="An element with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">Já existe um elemento com a mesma chave no <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">O dicionário contém muitos elementos.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Remove o elemento com a chave especificada do <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">A chave do elemento a ser removido.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the element is successfully removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; was not found in the original &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">
        <see langword="true" /> se o elemento for removido com êxito; caso contrário, <see langword="false" />. Esse método também retornará <see langword="false" /> se <paramref name="key" /> não tiver sido encontrado no <see cref="T:System.Collections.Generic.IDictionary`2" /> original.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an array, starting at the specified array index.">Copia os elementos do <see cref="T:System.Collections.ICollection" /> para uma matriz, começando no índice da matriz especificada.</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">A matriz unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.ICollection" />. A matriz deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.">
        <paramref name="index" /> é menor que 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> é igual ou maior que o comprimento da <paramref name="array" />.  
  
- ou - 
O número de elementos na origem <see cref="T:System.Collections.ICollection" /> é maior do que o espaço disponível de <paramref name="index" /> até o final do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Add(System.Object,System.Object)">
      <summary vsli:raw="Adds the specified key and value to the dictionary.">Adiciona a chave e o valor especificados ao dicionário.</summary>
      <param name="key" vsli:raw="The object to use as the key.">O objeto a ser usado como a chave.</param>
      <param name="value" vsli:raw="The object to use as the value.">O objeto a ser usado como o valor.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type  of the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;value&quot; /&gt; is of a type that is not assignable to the type of values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; A value with the same key already exists in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">O <paramref name="key" /> é de um tipo que não é atribuível ao tipo de chave do <see cref="T:System.Collections.Generic.Dictionary`2" />.  
  
- ou - 
 O <paramref name="value" /> é de um tipo que não é atribuível ao tipo de valores no <see cref="T:System.Collections.Generic.Dictionary`2" />.  
  
- ou - 
Já existe um valor com a mesma chave no <see cref="T:System.Collections.Generic.Dictionary`2" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">O dicionário contém muitos elementos.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Contains(System.Object)">
      <summary vsli:raw="Gets a value that indicates the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; contains an element with the specified key.">Obtém um valor que indica que <see cref="T:System.Collections.Generic.IDictionary`2" /> contém um elemento com a chave especificada.</summary>
      <param name="key" vsli:raw="The key to locate in the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">A chave a ser localizada no <see cref="T:System.Collections.Generic.IDictionary`2" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; contains an element with the specified key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.IDictionary`2" /> contiver um elemento com a chave especificada; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#GetEnumerator">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Fornece um <see cref="T:System.Collections.IDictionaryEnumerator" /> para o <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.IDictionaryEnumerator&quot; /&gt; for the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Um <see cref="T:System.Collections.IDictionaryEnumerator" /> para o <see cref="T:System.Collections.Generic.IDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Remove(System.Object)">
      <summary vsli:raw="Removes the element with the specified key from the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Remove o elemento com a chave especificada do <see cref="T:System.Collections.IDictionary" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove.">A chave do elemento a ser removido.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> é <see langword="null" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">Retorna um enumerador que itera por meio de <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</summary>
      <returns vsli:raw="An enumerator for the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">Um enumerador para o <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.ToArray">
      <summary vsli:raw="Copies the key and value pairs stored in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; to a new array.">Copia os pares de chave e valor armazenados em <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> para uma nova matriz.</summary>
      <returns vsli:raw="A new array containing a snapshot of key and value pairs copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">Uma nova matriz que contém um instantâneo de pares de chave e valor copiados de <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryAdd(`0,`1)">
      <summary vsli:raw="Attempts to add the specified key and value to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">Tenta adicionar a chave e o valor especificados ao <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</summary>
      <param name="key" vsli:raw="The key of the element to add.">A chave do elemento a ser adicionada.</param>
      <param name="value" vsli:raw="The value of the element to add. The value can be  &lt;see langword=&quot;null&quot; /&gt; for reference types.">O valor do elemento a ser adicionado. O valor pode ser <see langword="null" /> para tipos de referência.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">O dicionário contém muitos elementos.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key/value pair was added to the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; successfully; &lt;see langword=&quot;false&quot; /&gt; if the key already exists.">
        <see langword="true" /> se o par chave/valor foi adicionado ao <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> com êxito; <see langword="false" /> se a chave já existir.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryGetValue(`0,`1@)">
      <summary vsli:raw="Attempts to get the value associated with the specified key from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">Tenta obter o valor associado à chave especificada do <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</summary>
      <param name="key" vsli:raw="The key of the value to get.">A chave do valor a ser obtido.</param>
      <param name="value" vsli:raw="When this method returns, contains the object from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; that has the specified key, or the default value of the type if the operation failed.">Quando esse método for retornado, ele conterá o objeto do <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> que tem a chave especificada ou o valor padrão do tipo se a operação tiver falhado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key was found in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a chave foi encontrada no <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(`0,`1@)">
      <summary vsli:raw="Attempts to remove and return the value that has the specified key from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">Tenta remover e retornar o valor com a chave especificada do <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</summary>
      <param name="key" vsli:raw="The key of the element to remove and return.">A chave do elemento a ser removido e retornado.</param>
      <param name="value" vsli:raw="When this method returns, contains the object removed from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;, or the default value of  the &lt;see langword=&quot;TValue&quot; /&gt; type if &lt;paramref name=&quot;key&quot; /&gt; does not exist.">Quando for retornado, esse método conterá o objeto removido do <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> ou o valor padrão do tipo <see langword="TValue" /> se <paramref name="key" /> não existir.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object was removed successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um objeto tiver sido removido com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryRemove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <summary vsli:raw="Removes a key and value from the dictionary.">Remove uma chave e o valor do dicionário.</summary>
      <param name="item" vsli:raw="The &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; representing the key and value to remove.">O <see cref="T:System.Collections.Generic.KeyValuePair`2" /> que representa a chave e o valor a serem removidos.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;see cref=&quot;P:System.Collections.Generic.KeyValuePair`2.Key&quot; /&gt; property of &lt;paramref name=&quot;item&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">A propriedade <see cref="P:System.Collections.Generic.KeyValuePair`2.Key" /> de <paramref name="item" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the key and value represented by &lt;paramref name=&quot;item&quot; /&gt; are successfully found and removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a chave e o valor representados por <paramref name="item" /> forem encontrados e removidos com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentDictionary`2.TryUpdate(`0,`1,`1)">
      <summary vsli:raw="Updates the value associated with &lt;paramref name=&quot;key&quot; /&gt; to &lt;paramref name=&quot;newValue&quot; /&gt; if the existing value with &lt;paramref name=&quot;key&quot; /&gt; is equal to &lt;paramref name=&quot;comparisonValue&quot; /&gt;.">Atualizará o valor associado a <paramref name="key" /> para <paramref name="newValue" /> se o valor existente com <paramref name="key" /> for igual a <paramref name="comparisonValue" />.</summary>
      <param name="key" vsli:raw="The key of the value that is compared with &lt;paramref name=&quot;comparisonValue&quot; /&gt; and possibly replaced.">A chave do valor que é comparada com <paramref name="comparisonValue" /> e possivelmente substituída.</param>
      <param name="newValue" vsli:raw="The value that replaces the value of the element that has the specified &lt;paramref name=&quot;key&quot; /&gt; if the comparison results in equality.">O valor que substitui o valor do elemento que foi especificado <paramref name="key" /> se a comparação resulta em igualdade.</param>
      <param name="comparisonValue" vsli:raw="The value that is compared with the value of the element that has the specified &lt;paramref name=&quot;key&quot; /&gt;.">O valor é comparado com o valor do elemento que tem o valor de <paramref name="key" /> especificado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value with &lt;paramref name=&quot;key&quot; /&gt; was equal to &lt;paramref name=&quot;comparisonValue&quot; /&gt; and was replaced with &lt;paramref name=&quot;newValue&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o valor com <paramref name="key" /> era igual a <paramref name="comparisonValue" /> e foi substituído pelo <paramref name="newValue" />; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Count">
      <summary vsli:raw="Gets the number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">Obtém o número de pares chave-valor contidos no <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</summary>
      <exception cref="T:System.OverflowException" vsli:raw="The dictionary contains too many elements.">O dicionário contém muitos elementos.</exception>
      <returns vsli:raw="The number of key/value pairs contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">O número de pares chave-valor contidos no <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; is empty.">Obtém um valor que indica se a <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> está vazia.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> estiver vazio; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Item(`0)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">Obtém ou define o valor associado à chave especificada.</summary>
      <param name="key" vsli:raw="The key of the value to get or set.">A chave do valor a ser obtido ou definido.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException" vsli:raw="The property is retrieved and &lt;paramref name=&quot;key&quot; /&gt; does not exist in the collection.">A propriedade é recuperada e <paramref name="key" /> não existe na coleção.</exception>
      <returns vsli:raw="The value of the key/value pair at the specified index.">O valor do par chave-valor no índice especificado.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Obtém uma coleção que contém as chaves do <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns vsli:raw="A collection of keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Uma coleção de chaves no <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is read-only.">Obtém um valor que indica se o <see cref="T:System.Collections.ICollection" /> é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.ICollection" /> for somente leitura; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Keys">
      <summary vsli:raw="Gets a collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Obtém uma coleção que contém as chaves do <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns vsli:raw="A collection containing the keys in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Uma coleção que contém as chaves no <see cref="T:System.Collections.Generic.Dictionary`2" /> .</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#Generic#IReadOnlyDictionary{TKey@TValue}#Values">
      <summary vsli:raw="Gets a collection that contains the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Obtém uma coleção que contém os valores no <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns vsli:raw="A collection that contains the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Uma coleção que contém os valores no <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value that indicates whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized with the SyncRoot.">Obtém um valor que indica se o acesso ao <see cref="T:System.Collections.ICollection" /> está sincronizado com o SyncRoot.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;. For &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt; this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> caso o acesso ao <see cref="T:System.Collections.ICollection" /> seja sincronizado (thread-safe); do contrário, <see langword="false" />. Para <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> essa propriedade sempre retorna <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />. Não há suporte a esta propriedade.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not supported.">Não há suporte a esta propriedade.</exception>
      <returns vsli:raw="Always returns null.">Sempre retorna um valor nulo.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsFixedSize">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; has a fixed size.">Obtém um valor que indica se o <see cref="T:System.Collections.Generic.IDictionary`2" /> tem um tamanho fixo.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;. For &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.IDictionary`2" /> tiver um valor fixo; caso contrário, <see langword="false" />. Para <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> , essa propriedade sempre retorna <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#IsReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only.">Obtém um valor que indica se o <see cref="T:System.Collections.Generic.IDictionary`2" /> é somente leitura.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;. For &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;, this property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Generic.IDictionary`2" /> for somente leitura; caso contrário, <see langword="false" />. Para <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" /> , essa propriedade sempre retorna <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Item(System.Object)">
      <summary vsli:raw="Gets or sets the value associated with the specified key.">Obtém ou define o valor associado à chave especificada.</summary>
      <param name="key" vsli:raw="The key of the value to get or set.">A chave do valor a ser obtido ou definido.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is  &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A value is being assigned, and &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type or the value type of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">Um valor está sendo atribuído e <paramref name="key" /> é de um tipo que não é atribuível ao tipo de chave ou ao tipo de valor do <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</exception>
      <returns vsli:raw="The value associated with the specified key, or  &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;key&quot; /&gt; is not in the dictionary or &lt;paramref name=&quot;key&quot; /&gt; is of a type that is not assignable to the key type of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentDictionary`2&quot; /&gt;.">O valor associado à chave especificada ou <see langword="null" /> se <paramref name="key" /> não estiver no dicionário ou <paramref name="key" /> for de um tipo que não é atribuível ao tipo de chave de <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Keys">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains the keys of the  &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Obtém um <see cref="T:System.Collections.ICollection" /> que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" />.</summary>
      <returns vsli:raw="An interface that contains the keys of the &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt;.">Uma interface que contém as chaves do <see cref="T:System.Collections.Generic.IDictionary`2" /> .</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.System#Collections#IDictionary#Values">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; that contains the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Obtém um <see cref="T:System.Collections.ICollection" /> que contém os valores no <see cref="T:System.Collections.IDictionary" />.</summary>
      <returns vsli:raw="An interface that contains the values in the &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt;.">Uma interface que contém os valores no <see cref="T:System.Collections.IDictionary" /> .</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentDictionary`2.Values">
      <summary vsli:raw="Gets a collection that contains the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Obtém uma coleção que contém os valores no <see cref="T:System.Collections.Generic.Dictionary`2" />.</summary>
      <returns vsli:raw="A collection that contains the values in the &lt;see cref=&quot;T:System.Collections.Generic.Dictionary`2&quot; /&gt;.">Uma coleção que contém os valores no <see cref="T:System.Collections.Generic.Dictionary`2" />.</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentQueue`1">
      <summary vsli:raw="Represents a thread-safe first in-first out (FIFO) collection.">Representa uma coleção thread-safe PEPS (primeiro a entrar, primeiro a sair).</summary>
      <typeparam name="T" vsli:raw="The type of the elements contained in the queue.">O tipo dos elementos contidos na fila.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; class that contains elements copied from the specified collection.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> que contém elementos copiados da coleção especificada.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">A coleção cujos elementos são copiados para o novo <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; argument is null.">O argumento <paramref name="collection" /> é nulo.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Clear">
      <summary vsli:raw="Removes all objects from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">Remove todos os objetos da <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">Copia os elementos <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> em um <see cref="T:System.Array" /> unidimensional existente, começando no índice da matriz especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Um <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> é uma referência nula (Nada no Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> é igual ou maior que o tamanho do <paramref name="array" /> -ou- O número de elementos no <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> de origem é maior que o espaço disponível do <paramref name="index" /> até o fim da <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.Enqueue(`0)">
      <summary vsli:raw="Adds an object to the end of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">Adiciona um objeto ao final do <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</summary>
      <param name="item" vsli:raw="The object to add to the end of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">O objeto a ser adicionado ao final do <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />. O valor pode ser uma referência nula (Nada no Visual Basic) para tipos de referência.</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">Retorna um enumerador que itera por meio de <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</summary>
      <returns vsli:raw="An enumerator for the contents of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">Um enumerador para o conteúdo de <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary vsli:raw="Attempts to add an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">Tenta adicionar um objeto ao <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">O objeto a ser adicionado ao <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />. O valor pode ser uma referência nula (Nada no Visual Basic) para tipos de referência.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object was added successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto tiver sido adicionado com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
      <summary vsli:raw="Attempts to remove and return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">Tenta remover e retornar um objeto do <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</summary>
      <param name="item" vsli:raw="When this method returns, if the operation was successful, &lt;paramref name=&quot;item&quot; /&gt; contains the object removed. If no object was available to be removed, the value is unspecified.">Quando este método retornar, se a operação tiver sido bem-sucedida, <paramref name="item" /> conterá o objeto removido. Caso nenhum objeto esteja disponível para ser removido, o valor é não especificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element was removed and returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um elemento tiver sido removido e tiver retornado com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia os elementos do <see cref="T:System.Collections.ICollection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentBag`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Um <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.Concurrent.ConcurrentBag`1" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> é uma referência nula (Nada no Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional. -or- &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing. -or- &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;. -or- The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> é multidimensional. -ou- O <paramref name="array" /> não deve ter indexação baseada em zero. -ou- <paramref name="index" /> é igual ou maior que o tamanho da <paramref name="array" /> -ou- O número de elementos no <see cref="T:System.Collections.ICollection" /> de origem é maior que o espaço disponível do <paramref name="index" /> até o fim da <paramref name="array" /> de destino. -ou- O tipo do <see cref="T:System.Collections.ICollection" /> de origem não pode ser convertido automaticamente no tipo do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.ToArray">
      <summary vsli:raw="Copies the elements stored in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; to a new array.">Copia os elementos armazenados em <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> em uma nova matriz.</summary>
      <returns vsli:raw="A new array containing a snapshot of elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">Uma nova matriz que contém um instantâneo dos elementos copiados de <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryDequeue(`0@)">
      <summary vsli:raw="Tries to remove and return the object at the beginning of the concurrent queue.">Tenta remover e retornar o objeto no início da fila simultânea.</summary>
      <param name="result" vsli:raw="When this method returns, if the operation was successful, &lt;paramref name=&quot;result&quot; /&gt; contains the object removed. If no object was available to be removed, the value is unspecified.">Quando este método retornar, se a operação tiver sido bem-sucedida, <paramref name="result" /> conterá o objeto removido. Caso nenhum objeto esteja disponível para ser removido, o valor é não especificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element was removed and returned from the beginning of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um elemento tiver sido removido e retornado do início do <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentQueue`1.TryPeek(`0@)">
      <summary vsli:raw="Tries to return an object from the beginning of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; without removing it.">Tenta retornar um objeto do início da <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> sem removê-lo.</summary>
      <param name="result" vsli:raw="When this method returns, &lt;paramref name=&quot;result&quot; /&gt; contains an object from the beginning of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; or an unspecified value if the operation failed.">Quando este método retorna, o <paramref name="result" /> contém um objeto do início da <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> ou um valor não especificado quando a operação falha.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an object was returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um objeto foi retornado com sucesso, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">Obtém o número de elementos contidos no <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt;.">O número de elementos contidos no <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; is empty.">Obtém um valor que indica se a <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> está vazia.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentQueue`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1" /> estiver vazio; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized with the SyncRoot.">Obtém um valor indicando se o acesso ao <see cref="T:System.Collections.ICollection" /> está sincronizado com o SyncRoot.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt; to indicate access is not synchronized.">Sempre retorna <see langword="false" /> para indicar que o acesso não está sincronizado.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentQueue`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />. Não há suporte a esta propriedade.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The SyncRoot property is not supported.">Não há suporte para a propriedade SyncRoot.</exception>
      <returns vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;.">Retorna <see langword="null" />.</returns>
    </member>
    <member name="T:System.Collections.Concurrent.ConcurrentStack`1">
      <summary vsli:raw="Represents a thread-safe last in-first out (LIFO) collection.">Representa uma coleção thread-safe LIFO (último a entrar, primeiro a sair).</summary>
      <typeparam name="T" vsli:raw="The type of the elements contained in the stack.">O tipo dos elementos contidos na pilha.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; class that contains elements copied from the specified collection.">Inicializa uma nova instância da classe <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> que contém elementos copiados da coleção especificada.</summary>
      <param name="collection" vsli:raw="The collection whose elements are copied to the new &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">A coleção cujos elementos são copiados para o novo <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;collection&quot; /&gt; argument is null.">O argumento <paramref name="collection" /> é nulo.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Clear">
      <summary vsli:raw="Removes all objects from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">Remove todos os objetos da <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; elements to an existing one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at the specified array index.">Copia os elementos <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> em um <see cref="T:System.Array" /> unidimensional existente, começando no índice da matriz especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Um <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> é uma referência nula (Nada no Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> é igual ou maior que o tamanho do <paramref name="array" /> -ou- O número de elementos no <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> de origem é maior que o espaço disponível do <paramref name="index" /> até o fim da <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">Retorna um enumerador que itera por meio de <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</summary>
      <returns vsli:raw="An enumerator for the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">Um enumerador para o <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.Push(`0)">
      <summary vsli:raw="Inserts an object at the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">Insere um objeto na parte superior do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</summary>
      <param name="item" vsli:raw="The object to push onto the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">O objeto a ser enviado por push para o <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />. O valor pode ser uma referência nula (Nada no Visual Basic) para tipos de referência.</param>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[])">
      <summary vsli:raw="Inserts multiple objects at the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; atomically.">Insere vários objetos na parte superior do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> de maneira atômica.</summary>
      <param name="items" vsli:raw="The objects to push onto the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">Os objetos a serem enviados por push para o <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="items" /> é uma referência nula (Nada no Visual Basic).</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.PushRange(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Inserts multiple objects at the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; atomically.">Insere vários objetos na parte superior do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> de maneira atômica.</summary>
      <param name="items" vsli:raw="The objects to push onto the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">Os objetos a serem enviados por push para o <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</param>
      <param name="startIndex" vsli:raw="The zero-based offset in &lt;paramref name=&quot;items&quot; /&gt; at which to begin inserting elements onto the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">O deslocamento de base zero em <paramref name="items" /> no qual começar a inserir elementos na parte superior do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</param>
      <param name="count" vsli:raw="The number of elements to be inserted onto the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">O número de elementos a serem inseridos na parte superior do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="items" /> é uma referência nula (Nada no Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is negative. Or &lt;paramref name=&quot;startIndex&quot; /&gt; is greater than or equal to the length of &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="startIndex" /> ou <paramref name="count" /> é negativo. Ou <paramref name="startIndex" /> é maior que ou igual ao comprimento da <paramref name="items" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; + &lt;paramref name=&quot;count&quot; /&gt; is greater than the length of &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="startIndex" /> + <paramref name="count" /> é maior que o comprimento do <paramref name="items" />.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryAdd(`0)">
      <summary vsli:raw="Attempts to add an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">Tenta adicionar um objeto ao <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;. The value can be a null reference (Nothing in Visual Basic) for reference types.">O objeto a ser adicionado ao <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />. O valor pode ser uma referência nula (Nada no Visual Basic) para tipos de referência.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object was added successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto tiver sido adicionado com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#Concurrent#IProducerConsumerCollection{T}#TryTake(`0@)">
      <summary vsli:raw="Attempts to remove and return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">Tenta remover e retornar um objeto do <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</summary>
      <param name="item" vsli:raw="When this method returns, if the operation was successful, &lt;paramref name=&quot;item&quot; /&gt; contains the object removed. If no object was available to be removed, the value is unspecified.">Quando este método retornar, se a operação tiver sido bem-sucedida, <paramref name="item" /> conterá o objeto removido. Caso nenhum objeto esteja disponível para ser removido, o valor é não especificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element was removed and returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um elemento tiver sido removido e tiver retornado com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">Copia os elementos do <see cref="T:System.Collections.ICollection" /> para um <see cref="T:System.Array" />, começando em um determinado índice <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">Um <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />. O <see cref="T:System.Array" /> deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> é uma referência nula (Nada no Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional. -or- &lt;paramref name=&quot;array&quot; /&gt; does not have zero-based indexing. -or- &lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;. -or- The type of the source &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; cannot be cast automatically to the type of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="array" /> é multidimensional. -ou- O <paramref name="array" /> não deve ter indexação baseada em zero. -ou- <paramref name="index" /> é igual ou maior que o tamanho da <paramref name="array" /> -ou- O número de elementos no <see cref="T:System.Collections.ICollection" /> de origem é maior que o espaço disponível do <paramref name="index" /> até o fim da <paramref name="array" /> de destino. -ou- O tipo do <see cref="T:System.Collections.ICollection" /> de origem não pode ser convertido automaticamente no tipo do <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">Retorna um enumerador que itera em uma coleção.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">Um <see cref="T:System.Collections.IEnumerator" /> que pode ser usado para iterar pela coleção.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.ToArray">
      <summary vsli:raw="Copies the items stored in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; to a new array.">Copia os itens armazenados em <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> em uma nova matriz.</summary>
      <returns vsli:raw="A new array containing a snapshot of elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">Uma nova matriz que contém um instantâneo dos elementos copiados de <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPeek(`0@)">
      <summary vsli:raw="Attempts to return an object from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; without removing it.">Tenta retornar um objeto da parte superior do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> sem removê-lo.</summary>
      <param name="result" vsli:raw="When this method returns, &lt;paramref name=&quot;result&quot; /&gt; contains an object from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; or an unspecified value if the operation failed.">Quando esse método for retornado, <paramref name="result" /> conterá um objeto da parte superior do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> ou um valor não especificado se a operação falhar.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and object was returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um objeto foi retornado com sucesso, caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPop(`0@)">
      <summary vsli:raw="Attempts to pop and return the object at the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">Tenta remover e retornar o objeto na parte superior do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</summary>
      <param name="result" vsli:raw="When this method returns, if the operation was successful, &lt;paramref name=&quot;result&quot; /&gt; contains the object removed. If no object was available to be removed, the value is unspecified.">Quando este método retornar, se a operação tiver sido bem-sucedida, <paramref name="result" /> conterá o objeto removido. Caso nenhum objeto esteja disponível para ser removido, o valor é não especificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an element was removed and returned from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um elemento tiver sido removido e retornado na parte superior do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[])">
      <summary vsli:raw="Attempts to pop and return multiple objects from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; atomically.">Tenta remover e retornar vários objetos da parte superior do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> de forma atômica.</summary>
      <param name="items" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to which objects popped from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; will be added.">O <see cref="T:System.Array" /> a que os objetos removidos da parte superior de <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> serão adicionados.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; is a null argument (Nothing in Visual Basic).">
        <paramref name="items" /> é um argumento nulo (Nada no Visual Basic).</exception>
      <returns vsli:raw="The number of objects successfully popped from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; and inserted in &lt;paramref name=&quot;items&quot; /&gt;.">O número de objetos removidos com êxito da parte superior do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> e inseridos no <paramref name="items" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.ConcurrentStack`1.TryPopRange(`0[],System.Int32,System.Int32)">
      <summary vsli:raw="Attempts to pop and return multiple objects from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; atomically.">Tenta remover e retornar vários objetos da parte superior do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> de forma atômica.</summary>
      <param name="items" vsli:raw="The &lt;see cref=&quot;T:System.Array&quot; /&gt; to which objects popped from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; will be added.">O <see cref="T:System.Array" /> a que os objetos removidos da parte superior de <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> serão adicionados.</param>
      <param name="startIndex" vsli:raw="The zero-based offset in &lt;paramref name=&quot;items&quot; /&gt; at which to begin inserting elements from the top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">O deslocamento de base zero em <paramref name="items" /> no qual começar a inserir elementos da parte superior do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</param>
      <param name="count" vsli:raw="The number of elements to be popped from top of the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; and inserted into &lt;paramref name=&quot;items&quot; /&gt;.">O número de elementos a serem removidos da parte superior do <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> e inseridos em <paramref name="items" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;items&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="items" /> é uma referência nula (Nada no Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is negative. Or &lt;paramref name=&quot;startIndex&quot; /&gt; is greater than or equal to the length of &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="startIndex" /> ou <paramref name="count" /> é negativo. Ou <paramref name="startIndex" /> é maior que ou igual ao comprimento da <paramref name="items" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; + &lt;paramref name=&quot;count&quot; /&gt; is greater than the length of &lt;paramref name=&quot;items&quot; /&gt;.">
        <paramref name="startIndex" /> + <paramref name="count" /> é maior que o comprimento do <paramref name="items" />.</exception>
      <returns vsli:raw="The number of objects successfully popped from the top of the stack and inserted in &lt;paramref name=&quot;items&quot; /&gt;.">O número de objetos removidos com êxito da parte superior da pilha e inseridos no <paramref name="items" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">Obtém o número de elementos contidos no <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt;.">O número de elementos contidos no <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; is empty.">Obtém um valor que indica se a <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> está vazia.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.ConcurrentStack`1&quot; /&gt; is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o <see cref="T:System.Collections.Concurrent.ConcurrentStack`1" /> estiver vazio; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized with the SyncRoot.">Obtém um valor indicando se o acesso ao <see cref="T:System.Collections.ICollection" /> está sincronizado com o SyncRoot.</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt; to indicate access is not synchronized.">Sempre retorna <see langword="false" /> para indicar que o acesso não está sincronizado.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.ConcurrentStack`1.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. This property is not supported.">Obtém um objeto que pode ser usado para sincronizar o acesso ao <see cref="T:System.Collections.ICollection" />. Não há suporte a esta propriedade.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The SyncRoot property is not supported">Não há suporte para a propriedade SyncRoot</exception>
      <returns vsli:raw="Returns &lt;see langword=&quot;null&quot; /&gt;.">Retorna <see langword="null" />.</returns>
    </member>
    <member name="T:System.Collections.Concurrent.EnumerablePartitionerOptions">
      <summary vsli:raw="Specifies options to control the buffering behavior of a partitioner.">Especifica opções para controlar o comportamento de armazenamento em buffer de um particionador.</summary>
    </member>
    <member name="F:System.Collections.Concurrent.EnumerablePartitionerOptions.NoBuffering">
      <summary vsli:raw="Create a partitioner that takes items from the source enumerable one at a time and does not use intermediate storage that can be accessed more efficiently by multiple threads. This option provides support for low latency (items will be processed as soon as they are available from the source) and provides partial support for dependencies between items (a thread cannot deadlock waiting for an item that the thread itself is responsible for processing).">Cria um particionador que recebe itens da fonte enumerável, um de cada vez e não usa o armazenamento intermediário que pode ser acessado de forma mais eficiente por vários threads. Essa opção dá suporte à baixa latência (os itens serão processados assim que estiverem disponíveis da fonte) e dá suporte parcial às dependências entre os itens (um thread não pode ficar em deadlock esperando um item que o próprio thread é responsável por processar).</summary>
    </member>
    <member name="F:System.Collections.Concurrent.EnumerablePartitionerOptions.None">
      <summary vsli:raw="Use the default behavior, which is to use buffering to achieve optimal performance.">Use o comportamento padrão, que é usar o armazenamento em buffer para obter o desempenho ideal.</summary>
    </member>
    <member name="T:System.Collections.Concurrent.IProducerConsumerCollection`1">
      <summary vsli:raw="Defines methods to manipulate thread-safe collections intended for producer/consumer usage. This interface provides a unified representation for producer/consumer collections so that higher level abstractions such as &lt;see cref=&quot;T:System.Collections.Concurrent.BlockingCollection`1&quot; /&gt; can use the collection as the underlying storage mechanism.">Define métodos para manipular coleções thread-safe destinadas a uso pelo produtor/consumidor. Essa interface fornece uma representação unificada de coleções de produtor/consumidor para que abstrações de níveis mais altos, como o <see cref="T:System.Collections.Concurrent.BlockingCollection`1" />, possam usar a coleção como o mecanismo de armazenamento subjacente.</summary>
      <typeparam name="T" vsli:raw="Specifies the type of elements in the collection.">Especifica o tipo dos elementos na coleção.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.CopyTo(`0[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a specified index.">Copia os elementos do <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> para um <see cref="T:System.Array" />, começando em um índice especificado.</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.  &#xA;  &#xA; The array must have zero-based indexing.">Um <see cref="T:System.Array" /> unidimensional que é o destino dos elementos copiados do <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.  
  
A matriz deve ter indexação com base em zero.</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">O índice com base em zero em <paramref name="array" /> no qual a cópia começa.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is a null reference (Nothing in Visual Basic).">
        <paramref name="array" /> é uma referência nula (Nada no Visual Basic).</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero.">
        <paramref name="index" /> é menor que zero.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is equal to or greater than the length of the &lt;paramref name=&quot;array&quot; /&gt; -or- The number of elements in the collection is greater than the available space from &lt;paramref name=&quot;index&quot; /&gt; to the end of the destination &lt;paramref name=&quot;array&quot; /&gt;.">
        <paramref name="index" /> é igual ou maior que o tamanho do <paramref name="array" /> -ou- O número de elementos na coleção é maior que o espaço disponível do <paramref name="index" /> até o fim da <paramref name="array" /> de destino.</exception>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.ToArray">
      <summary vsli:raw="Copies the elements contained in the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt; to a new array.">Copia os elementos contidos na <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" /> em uma nova matriz.</summary>
      <returns vsli:raw="A new array containing the elements copied from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">Uma nova matriz que contém os elementos copiados da <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryAdd(`0)">
      <summary vsli:raw="Attempts to add an object to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">Tenta adicionar um objeto ao <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</summary>
      <param name="item" vsli:raw="The object to add to the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">O objeto a ser adicionado ao <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;item&quot; /&gt; was invalid for this collection.">O <paramref name="item" /> era inválido para esta coleção.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object was added successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se o objeto tiver sido adicionado com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.IProducerConsumerCollection`1.TryTake(`0@)">
      <summary vsli:raw="Attempts to remove and return an object from the &lt;see cref=&quot;T:System.Collections.Concurrent.IProducerConsumerCollection`1&quot; /&gt;.">Tenta remover e retornar um objeto do <see cref="T:System.Collections.Concurrent.IProducerConsumerCollection`1" />.</summary>
      <param name="item" vsli:raw="When this method returns, if the object was removed and returned successfully, &lt;paramref name=&quot;item&quot; /&gt; contains the removed object. If no object was available to be removed, the value is unspecified.">Quando este método retorna, se o objeto foi removido e retornou com êxito, <paramref name="item" /> contém o objeto removido. Caso nenhum objeto esteja disponível para ser removido, o valor é não especificado.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an object was removed and returned successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se um objeto tiver sido removido e tiver retornado com êxito; caso contrário, <see langword="false" />.</returns>
    </member>
    <member name="T:System.Collections.Concurrent.OrderablePartitioner`1">
      <summary vsli:raw="Represents a particular manner of splitting an orderable data source into multiple partitions.">Representa uma maneira particular de dividir uma fonte de dados classificável em várias partições.</summary>
      <typeparam name="TSource" vsli:raw="Type of the elements in the collection.">O tipo dos elementos na coleção.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.#ctor(System.Boolean,System.Boolean,System.Boolean)">
      <summary vsli:raw="Called from constructors in derived classes to initialize the &lt;see cref=&quot;T:System.Collections.Concurrent.OrderablePartitioner`1&quot; /&gt; class with the specified constraints on the index keys.">Chamado de construtores em classes derivadas para inicializar a classe <see cref="T:System.Collections.Concurrent.OrderablePartitioner`1" /> com as restrições especificadas nas chaves de índice.</summary>
      <param name="keysOrderedInEachPartition" vsli:raw="Indicates whether the elements in each partition are yielded in the order of increasing keys.">Indica se os elementos em cada partição são gerados na ordem de chaves crescentes.</param>
      <param name="keysOrderedAcrossPartitions" vsli:raw="Indicates whether elements in an earlier partition always come before elements in a later partition. If true, each element in partition 0 has a smaller order key than any element in partition 1, each element in partition 1 has a smaller order key than any element in partition 2, and so on.">Indica se elementos em uma partição anterior vêm sempre antes de elementos em uma partição posterior. Se true, cada elemento na partição 0 terá uma chave de ordem menor que qualquer elemento na partição 1, cada elemento na partição 1 terá uma chave de ordem menor que qualquer elemento na partição 2 e assim por diante.</param>
      <param name="keysNormalized" vsli:raw="Indicates whether keys are normalized. If true, all order keys are distinct integers in the range [0 .. numberOfElements-1]. If false, order keys must still be distinct, but only their relative order is considered, not their absolute values.">Indica se as chaves são normalizadas. Se true, todas as chaves de ordem serão inteiros distintos no intervalo [0 . numberOfElements-1]. Se falso, as chaves de ordem ainda devem ser diferentes, mas somente sua ordem relativa será considerada e não seus valores absolutos.</param>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetDynamicPartitions">
      <summary vsli:raw="Creates an object that can partition the underlying collection into a variable number of partitions.">Cria um objeto que pode particionar a coleção subjacente em um número variável de partições.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Dynamic partitioning is not supported by the base class. It must be implemented in derived classes.">Não há suporte para o particionamento dinâmico pela classe base. Ele deve ser implementado em classes derivadas.</exception>
      <returns vsli:raw="An object that can create partitions over the underlying data source.">Um objeto que pode criar partições pela fonte de dados subjacente.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderableDynamicPartitions">
      <summary vsli:raw="Creates an object that can partition the underlying collection into a variable number of partitions.">Cria um objeto que pode particionar a coleção subjacente em um número variável de partições.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Dynamic partitioning is not supported by this partitioner.">Este particionador não dá suporte para o particionamento dinâmico.</exception>
      <returns vsli:raw="An object that can create partitions over the underlying data source.">Um objeto que pode criar partições pela fonte de dados subjacente.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetOrderablePartitions(System.Int32)">
      <summary vsli:raw="Partitions the underlying collection into the specified number of orderable partitions.">Particiona a coleção subjacente no número especificado de partições ordenáveis.</summary>
      <param name="partitionCount" vsli:raw="The number of partitions to create.">O número de partições a criar.</param>
      <returns vsli:raw="A list containing &lt;paramref name=&quot;partitionCount&quot; /&gt; enumerators.">Uma lista contendo enumeradores <paramref name="partitionCount" />.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.OrderablePartitioner`1.GetPartitions(System.Int32)">
      <summary vsli:raw="Partitions the underlying collection into the given number of ordered partitions.">Particiona a coleção subjacente no número determinado de partições ordenadas.</summary>
      <param name="partitionCount" vsli:raw="The number of partitions to create.">O número de partições a criar.</param>
      <returns vsli:raw="A list containing &lt;paramref name=&quot;partitionCount&quot; /&gt; enumerators.">Uma lista contendo enumeradores <paramref name="partitionCount" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysNormalized">
      <summary vsli:raw="Gets whether order keys are normalized.">Especifica se as chaves de ordem são normalizadas.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the keys are normalized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> Se as chaves forem normalizadas; caso contrário, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedAcrossPartitions">
      <summary vsli:raw="Gets whether elements in an earlier partition always come before elements in a later partition.">Especifica se os elementos em uma partição anterior vêm sempre antes de elementos em uma partição posterior.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the elements in an earlier partition always come before elements in a later partition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> Se os elementos em uma partição anterior sempre vierem antes dos elementos em uma partição posterior; caso contrário, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Collections.Concurrent.OrderablePartitioner`1.KeysOrderedInEachPartition">
      <summary vsli:raw="Gets whether elements in each partition are yielded in the order of increasing keys.">Especifica se os elementos em cada partição são gerados na ordem de chaves crescentes.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the elements in each partition are yielded in the order of increasing keys; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> Se os elementos em cada partição forem resultantes na ordem de aumento de chaves; caso contrário, <see langword="false" /> .</returns>
    </member>
    <member name="T:System.Collections.Concurrent.Partitioner">
      <summary vsli:raw="Provides common partitioning strategies for arrays, lists, and enumerables.">Fornece estratégias de particionamento comuns para enumeráveis, listas e matrizes.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32)">
      <summary vsli:raw="Creates a partitioner that chunks the user-specified range.">Cria um particionador que divide em partes o intervalo especificado pelo usuário.</summary>
      <param name="fromInclusive" vsli:raw="The lower, inclusive bound of the range.">O limite inferior inclusivo do intervalo.</param>
      <param name="toExclusive" vsli:raw="The upper, exclusive bound of the range.">O limite superior exclusivo do intervalo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;toExclusive&quot; /&gt; argument is less than or equal to the &lt;paramref name=&quot;fromInclusive&quot; /&gt; argument.">O argumento <paramref name="toExclusive" /> é menor ou igual ao argumento <paramref name="fromInclusive" />.</exception>
      <returns vsli:raw="A partitioner.">Um particionador.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Creates a partitioner that chunks the user-specified range.">Cria um particionador que divide em partes o intervalo especificado pelo usuário.</summary>
      <param name="fromInclusive" vsli:raw="The lower, inclusive bound of the range.">O limite inferior inclusivo do intervalo.</param>
      <param name="toExclusive" vsli:raw="The upper, exclusive bound of the range.">O limite superior exclusivo do intervalo.</param>
      <param name="rangeSize" vsli:raw="The size of each subrange.">O tamanho de cada subintervalo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;toExclusive&quot; /&gt; argument is less than or equal to the &lt;paramref name=&quot;fromInclusive&quot; /&gt; argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;rangeSize&quot; /&gt; argument is less than or equal to 0.">O argumento <paramref name="toExclusive" /> é menor ou igual ao argumento <paramref name="fromInclusive" />.  
  
- ou - 
O argumento <paramref name="rangeSize" /> é menor ou igual a 0.</exception>
      <returns vsli:raw="A partitioner.">Um particionador.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64)">
      <summary vsli:raw="Creates a partitioner that chunks the user-specified range.">Cria um particionador que divide em partes o intervalo especificado pelo usuário.</summary>
      <param name="fromInclusive" vsli:raw="The lower, inclusive bound of the range.">O limite inferior inclusivo do intervalo.</param>
      <param name="toExclusive" vsli:raw="The upper, exclusive bound of the range.">O limite superior exclusivo do intervalo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;toExclusive&quot; /&gt; argument is less than or equal to the &lt;paramref name=&quot;fromInclusive&quot; /&gt; argument.">O argumento <paramref name="toExclusive" /> é menor ou igual ao argumento <paramref name="fromInclusive" />.</exception>
      <returns vsli:raw="A partitioner.">Um particionador.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create(System.Int64,System.Int64,System.Int64)">
      <summary vsli:raw="Creates a partitioner that chunks the user-specified range.">Cria um particionador que divide em partes o intervalo especificado pelo usuário.</summary>
      <param name="fromInclusive" vsli:raw="The lower, inclusive bound of the range.">O limite inferior inclusivo do intervalo.</param>
      <param name="toExclusive" vsli:raw="The upper, exclusive bound of the range.">O limite superior exclusivo do intervalo.</param>
      <param name="rangeSize" vsli:raw="The size of each subrange.">O tamanho de cada subintervalo.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;toExclusive&quot; /&gt; argument is less than or equal to the &lt;paramref name=&quot;fromInclusive&quot; /&gt; argument.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;rangeSize&quot; /&gt; argument is less than or equal to 0.">O argumento <paramref name="toExclusive" /> é menor ou igual ao argumento <paramref name="fromInclusive" />.  
  
- ou - 
O argumento <paramref name="rangeSize" /> é menor ou igual a 0.</exception>
      <returns vsli:raw="A partitioner.">Um particionador.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(``0[],System.Boolean)">
      <summary vsli:raw="Creates an orderable partitioner from a &lt;see cref=&quot;T:System.Array&quot; /&gt; instance.">Cria um particionador ordenável de uma instância do <see cref="T:System.Array" />.</summary>
      <param name="array" vsli:raw="The array to be partitioned.">A matriz a ser particionada.</param>
      <param name="loadBalance" vsli:raw="A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.">Um valor booliano que indica se o particionador criado deve balancear carga dinamicamente entre as partições em vez de criar uma partição estaticamente.</param>
      <typeparam name="TSource" vsli:raw="Type of the elements in source array.">O tipo dos elementos na matriz de origem.</typeparam>
      <returns vsli:raw="An orderable partitioner based on the input array.">Um particionador ordenável com base na matriz de entrada.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0})">
      <summary vsli:raw="Creates an orderable partitioner from a &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; instance.">Cria um particionador ordenável de uma instância do <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source" vsli:raw="The enumerable to be partitioned.">O enumerável a ser particionado.</param>
      <typeparam name="TSource" vsli:raw="Type of the elements in source enumerable.">O tipo dos elementos no enumerável de origem.</typeparam>
      <returns vsli:raw="An orderable partitioner based on the input array.">Um particionador ordenável com base na matriz de entrada.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Concurrent.EnumerablePartitionerOptions)">
      <summary vsli:raw="Creates an orderable partitioner from a &lt;see cref=&quot;T:System.Collections.Generic.IEnumerable`1&quot; /&gt; instance.">Cria um particionador ordenável de uma instância do <see cref="T:System.Collections.Generic.IEnumerable`1" />.</summary>
      <param name="source" vsli:raw="The enumerable to be partitioned.">O enumerável a ser particionado.</param>
      <param name="partitionerOptions" vsli:raw="Options to control the buffering behavior of the partitioner.">Opções para controlar o comportamento de buffer do particionador.</param>
      <typeparam name="TSource" vsli:raw="Type of the elements in source enumerable.">O tipo dos elementos no enumerável de origem.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;partitionerOptions&quot; /&gt; argument specifies an invalid value for &lt;see cref=&quot;T:System.Collections.Concurrent.EnumerablePartitionerOptions&quot; /&gt;.">O argumento <paramref name="partitionerOptions" /> especifica um valor inválido para <see cref="T:System.Collections.Concurrent.EnumerablePartitionerOptions" />.</exception>
      <returns vsli:raw="An orderable partitioner based on the input array.">Um particionador ordenável com base na matriz de entrada.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner.Create``1(System.Collections.Generic.IList{``0},System.Boolean)">
      <summary vsli:raw="Creates an orderable partitioner from an &lt;see cref=&quot;T:System.Collections.Generic.IList`1&quot; /&gt; instance.">Cria um particionador ordenável com base em uma instância <see cref="T:System.Collections.Generic.IList`1" />.</summary>
      <param name="list" vsli:raw="The list to be partitioned.">A lista a ser particionada.</param>
      <param name="loadBalance" vsli:raw="A Boolean value that indicates whether the created partitioner should dynamically load balance between partitions rather than statically partition.">Um valor booliano que indica se o particionador criado deve balancear carga dinamicamente entre as partições em vez de criar uma partição estaticamente.</param>
      <typeparam name="TSource" vsli:raw="Type of the elements in source list.">Tipo dos elementos na lista de origem.</typeparam>
      <returns vsli:raw="An orderable partitioner based on the input list.">Um particionador ordenável baseado na lista de entrada.</returns>
    </member>
    <member name="T:System.Collections.Concurrent.Partitioner`1">
      <summary vsli:raw="Represents a particular manner of splitting a data source into multiple partitions.">Representa uma maneira particular de dividir uma fonte de dados em várias partições.</summary>
      <typeparam name="TSource" vsli:raw="Type of the elements in the collection.">O tipo dos elementos na coleção.</typeparam>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.#ctor">
      <summary vsli:raw="Creates a new partitioner instance.">Cria uma nova instância de particionador.</summary>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.GetDynamicPartitions">
      <summary vsli:raw="Creates an object that can partition the underlying collection into a variable number of partitions.">Cria um objeto que pode particionar a coleção subjacente em um número variável de partições.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Dynamic partitioning is not supported by the base class. You must implement it in a derived class.">Não há suporte para o particionamento dinâmico pela classe base. Você deve implementá-la em uma classe derivada.</exception>
      <returns vsli:raw="An object that can create partitions over the underlying data source.">Um objeto que pode criar partições pela fonte de dados subjacente.</returns>
    </member>
    <member name="M:System.Collections.Concurrent.Partitioner`1.GetPartitions(System.Int32)">
      <summary vsli:raw="Partitions the underlying collection into the given number of partitions.">Particiona a coleção subjacente no número de partições determinado.</summary>
      <param name="partitionCount" vsli:raw="The number of partitions to create.">O número de partições a criar.</param>
      <returns vsli:raw="A list containing &lt;paramref name=&quot;partitionCount&quot; /&gt; enumerators.">Uma lista contendo enumeradores <paramref name="partitionCount" />.</returns>
    </member>
    <member name="P:System.Collections.Concurrent.Partitioner`1.SupportsDynamicPartitions">
      <summary vsli:raw="Gets whether additional partitions can be created dynamically.">Especifica se as partições adicionais podem ser criadas dinamicamente.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.Partitioner`1&quot; /&gt; can create partitions dynamically as they are requested; &lt;see langword=&quot;false&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.Concurrent.Partitioner`1&quot; /&gt; can only allocate partitions statically.">
        <see langword="true" /> Se o <see cref="T:System.Collections.Concurrent.Partitioner`1" /> pode criar partições dinamicamente à medida que são solicitadas; <see langword="false" /> se o <see cref="T:System.Collections.Concurrent.Partitioner`1" /> só pode alocar partições estaticamente.</returns>
    </member>
  </members>
</doc>
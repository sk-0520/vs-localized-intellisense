<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.Contracts</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.Contracts.Contract">
      <summary vsli:raw="Contains static methods for representing program contracts such as preconditions, postconditions, and object invariants.">Contém métodos estáticos para representação de contratos de programa, como pré-condições, pós-condições e invariáveis de objeto.</summary>
    </member>
    <member name="E:System.Diagnostics.Contracts.Contract.ContractFailed">
      <summary vsli:raw="Occurs when a contract fails.">Ocorre quando um contrato falha.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set for the analyzer.">Verifica uma condição; se a condição for <see langword="false" />, seguirá a política de escalonamento definida para o analisador.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">A expressão condicional a ser testada.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assert(System.Boolean,System.String)">
      <summary vsli:raw="Checks for a condition; if the condition is &lt;see langword=&quot;false&quot; /&gt;, follows the escalation policy set by the analyzer and displays the specified message.">Verifica uma condição; se a condição for <see langword="false" />, seguirá a política de escalonamento definida pelo analisador e exibirá a mensagem especificada.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">A expressão condicional a ser testada.</param>
      <param name="userMessage" vsli:raw="A message to display if the condition is not met.">Uma mensagem a ser exibida se a condição não for atendida.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean)">
      <summary vsli:raw="Instructs code analysis tools to assume that the specified condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;.">Instrui as ferramentas de análise de código a assumir que a condição especificada é <see langword="true" />, mesmo que ela não possa ser estaticamente comprovada ser sempre <see langword="true" />.</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">A expressão condicional que assumirá <see langword="true" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Assume(System.Boolean,System.String)">
      <summary vsli:raw="Instructs code analysis tools to assume that a condition is &lt;see langword=&quot;true&quot; /&gt;, even if it cannot be statically proven to always be &lt;see langword=&quot;true&quot; /&gt;, and displays a message if the assumption fails.">Instrui as ferramentas de análise de código a pressupor que a condição é <see langword="true" />, mesmo que ela não possa ser estaticamente comprovada ser sempre <see langword="true" /> e exibe uma mensagem se a pressuposição falhar.</summary>
      <param name="condition" vsli:raw="The conditional expression to assume &lt;see langword=&quot;true&quot; /&gt;.">A expressão condicional que assumirá <see langword="true" />.</param>
      <param name="userMessage" vsli:raw="The message to post if the assumption fails.">A mensagem a ser postada se a pressuposição falhar.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EndContractBlock">
      <summary vsli:raw="Marks the end of the contract section when a method's contracts contain only preconditions in the &lt;see langword=&quot;if&quot; /&gt;-&lt;see langword=&quot;then&quot; /&gt;-&lt;see langword=&quot;throw&quot; /&gt; form.">Marca o fim da seção do contrato quando os contratos de um método contêm apenas precondições no formato <see langword="if" />-<see langword="then" />-<see langword="throw" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property.">Especifica um contrato de pós-condição para o método ou a propriedade delimitadora.</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">A expressão condicional a ser testada. A expressão pode incluir os valores de <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" />, <see cref="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)" /> e <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Ensures(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract for a provided exit condition and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">Especifica um contrato de pós-condição para uma condição de saída fornecida e uma mensagem a ser exibida se a condição for <see langword="false" />.</summary>
      <param name="condition" vsli:raw="The conditional expression to test. The expression may include &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.Contracts.Contract.Result``1&quot; /&gt; values.">A expressão condicional a ser testada. A expressão pode incluir os valores de <see cref="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)" /> e <see cref="M:System.Diagnostics.Contracts.Contract.Result``1" />.</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is not &lt;see langword=&quot;true&quot; /&gt;.">Uma mensagem a ser exibida se a expressão não for <see langword="true" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean)">
      <summary vsli:raw="Specifies a postcondition contract for the enclosing method or property, based on the provided exception and condition.">Especifica um contrato de pós-condição para o método ou a propriedade delimitadora, com base na exceção e na condição fornecidas.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">A expressão condicional a ser testada.</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">O tipo de exceção que invoca a verificação de condição.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.EnsuresOnThrow``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a postcondition contract and a message to display if the condition is &lt;see langword=&quot;false&quot; /&gt; for the enclosing method or property, based on the provided exception and condition.">Especifica um contrato de pós-condição e uma mensagem a ser exibida se a condição for <see langword="false" /> para o método ou a propriedade delimitadora, com base na exceção e na condição fornecidas.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">A expressão condicional a ser testada.</param>
      <param name="userMessage" vsli:raw="The message to display if the expression is &lt;see langword=&quot;false&quot; /&gt;.">A mensagem a ser exibida se a expressão for <see langword="false" />.</param>
      <typeparam name="TException" vsli:raw="The type of exception that invokes the postcondition check.">O tipo de exceção que invoca a verificação de condição.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a specified test is true for any integer within a range of integers.">Determina se um teste especificado é verdadeiro para qualquer inteiro dentro do intervalo de inteiros.</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">O primeiro inteiro a passar para <paramref name="predicate" />.</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Um a mais do que o último inteiro a passar para <paramref name="predicate" />.</param>
      <param name="predicate" vsli:raw="The function to evaluate for any value of the integer in the specified range.">A função a ser avaliada para qualquer valor do inteiro no intervalo especificado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> é menor que <paramref name="fromInclusive" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any integer starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">
        <see langword="true" /> se <paramref name="predicate" /> retornar <see langword="true" /> para qualquer inteiro a partir de <paramref name="fromInclusive" /> para <paramref name="toExclusive" /> - 1.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Exists``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether an element within a collection of elements exists within a function.">Determina se um elemento em uma coleção de elementos existe dentro de uma função.</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">A coleção da qual os elementos do tipo <c>T</c> serão desenhados para serem passados para <paramref name="predicate" />.</param>
      <param name="predicate" vsli:raw="The function to evaluate for an element in &lt;paramref name=&quot;collection&quot; /&gt;.">A função a ser avaliada para um elemento na <paramref name="collection" />.</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">O tipo que está contido em <paramref name="collection" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for any element of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <see langword="true" /> se e somente se <paramref name="predicate" /> retornar <see langword="true" /> para qualquer elemento do tipo <paramref name="T" /> em <paramref name="collection" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll(System.Int32,System.Int32,System.Predicate{System.Int32})">
      <summary vsli:raw="Determines whether a particular condition is valid for all integers in a specified range.">Determina se uma determinada condição é válida para todos os números inteiros em um intervalo especificado.</summary>
      <param name="fromInclusive" vsli:raw="The first integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">O primeiro inteiro a passar para <paramref name="predicate" />.</param>
      <param name="toExclusive" vsli:raw="One more than the last integer to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">Um a mais do que o último inteiro a passar para <paramref name="predicate" />.</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of the integers in the specified range.">A função para avaliar a existência de inteiros no intervalo especificado.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="predicate" /> é <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;toExclusive&quot; /&gt; is less than &lt;paramref name=&quot;fromInclusive&quot; /&gt;.">
        <paramref name="toExclusive" /> é menor que <paramref name="fromInclusive" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all integers starting from &lt;paramref name=&quot;fromInclusive&quot; /&gt; to &lt;paramref name=&quot;toExclusive&quot; /&gt; - 1.">
        <see langword="true" /> se <paramref name="predicate" /> retornar <see langword="true" /> para todos os inteiros a partir de <paramref name="fromInclusive" /> para <paramref name="toExclusive" /> ‑ 1.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ForAll``1(System.Collections.Generic.IEnumerable{``0},System.Predicate{``0})">
      <summary vsli:raw="Determines whether all the elements in a collection exist within a function.">Determina se todos os elementos de uma coleção existem em uma função.</summary>
      <param name="collection" vsli:raw="The collection from which elements of type &lt;c&gt;T&lt;/c&gt; will be drawn to pass to &lt;paramref name=&quot;predicate&quot; /&gt;.">A coleção da qual os elementos do tipo <c>T</c> serão desenhados para serem passados para <paramref name="predicate" />.</param>
      <param name="predicate" vsli:raw="The function to evaluate for the existence of all the elements in &lt;paramref name=&quot;collection&quot; /&gt;.">A função a ser avaliada quanto à existência de todos os elementos em <paramref name="collection" />.</param>
      <typeparam name="T" vsli:raw="The type that is contained in &lt;paramref name=&quot;collection&quot; /&gt;.">O tipo que está contido em <paramref name="collection" />.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;collection&quot; /&gt; or &lt;paramref name=&quot;predicate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="collection" /> ou <paramref name="predicate" /> é <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if and only if &lt;paramref name=&quot;predicate&quot; /&gt; returns &lt;see langword=&quot;true&quot; /&gt; for all elements of type &lt;paramref name=&quot;T&quot; /&gt; in &lt;paramref name=&quot;collection&quot; /&gt;.">
        <see langword="true" /> se e somente se <paramref name="predicate" /> retornar <see langword="true" /> para todos os elementos do tipo <paramref name="T" /> em <paramref name="collection" />.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property.">Especifica um contrato invariável para o método ou a propriedade delimitadora.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">A expressão condicional a ser testada.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Invariant(System.Boolean,System.String)">
      <summary vsli:raw="Specifies an invariant contract for the enclosing method or property, and displays a message if the condition for the contract fails.">Especifica um contrato invariável para a propriedade ou o método delimitador e exibe uma mensagem se a condição para o contrato falhar.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">A expressão condicional a ser testada.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">A mensagem a ser exibida se a condição for <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.OldValue``1(``0)">
      <summary vsli:raw="Represents values as they were at the start of a method or property.">Representa valores como eram no início de um método ou propriedade.</summary>
      <param name="value" vsli:raw="The value to represent (field or parameter).">O valor a ser representado (campo ou parâmetro).</param>
      <typeparam name="T" vsli:raw="The type of value.">O tipo do valor.</typeparam>
      <returns vsli:raw="The value of the parameter or field at the start of a method or property.">O valor do parâmetro ou campo no início de um método ou propriedade.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property.">Especifica um contrato de pré-condição para o método ou a propriedade delimitadora.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">A expressão condicional a ser testada.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and displays a message if the condition for the contract fails.">Especifica um contrato de precondição para a propriedade ou o método delimitador e exibe uma mensagem se a condição para o contrato falhar.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">A expressão condicional a ser testada.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">A mensagem a ser exibida se a condição for <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception if the condition for the contract fails.">Especifica um contrato de precondição para a propriedade ou o método delimitador e lança uma exceção se a condição para o contrato falhar.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">A expressão condicional a ser testada.</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">A exceção a ser lançada se a condição for <see langword="false" />.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Requires``1(System.Boolean,System.String)">
      <summary vsli:raw="Specifies a precondition contract for the enclosing method or property, and throws an exception with the provided message if the condition for the contract fails.">Especifica um contrato de precondição para a propriedade ou o método delimitador e lança uma exceção com a mensagem fornecida se a condição para o contrato falhar.</summary>
      <param name="condition" vsli:raw="The conditional expression to test.">A expressão condicional a ser testada.</param>
      <param name="userMessage" vsli:raw="The message to display if the condition is &lt;see langword=&quot;false&quot; /&gt;.">A mensagem a ser exibida se a condição for <see langword="false" />.</param>
      <typeparam name="TException" vsli:raw="The exception to throw if the condition is &lt;see langword=&quot;false&quot; /&gt;.">A exceção a ser lançada se a condição for <see langword="false" />.</typeparam>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.Result``1">
      <summary vsli:raw="Represents the return value of a method or property.">Representa o valor retornado de um método ou uma propriedade.</summary>
      <typeparam name="T" vsli:raw="Type of return value of the enclosing method or property.">Tipo de valor retornado do método ou da propriedade delimitadora.</typeparam>
      <returns vsli:raw="Return value of the enclosing method or property.">Valor retornado do método ou da propriedade delimitadora.</returns>
    </member>
    <member name="M:System.Diagnostics.Contracts.Contract.ValueAtReturn``1(``0@)">
      <summary vsli:raw="Represents the final (output) value of an &lt;see langword=&quot;out&quot; /&gt; parameter when returning from a method.">Representa o valor final (a saída) de um parâmetro <see langword="out" /> ao retornar de um método.</summary>
      <param name="value" vsli:raw="The &lt;see langword=&quot;out&quot; /&gt; parameter.">O parâmetro <see langword="out" />.</param>
      <typeparam name="T" vsli:raw="The type of the &lt;see langword=&quot;out&quot; /&gt; parameter.">O tipo do parâmetro <see langword="out" />.</typeparam>
      <returns vsli:raw="The output value of the &lt;see langword=&quot;out&quot; /&gt; parameter.">O valor de saída do parâmetro <see langword="out" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute">
      <summary vsli:raw="Defines abbreviations that you can use in place of the full contract syntax.">Define as abreviações que podem ser usadas no lugar da sintaxe de contrato completa.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractAbbreviatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractAbbreviatorAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute">
      <summary vsli:raw="Enables the factoring of legacy &lt;see langword=&quot;if-then-throw&quot; /&gt; code into separate methods for reuse, and provides full control over thrown exceptions and arguments.">Permite a fatoração do código <see langword="if-then-throw" /> herdado em métodos separados para reutilização e fornece controle total sobre as exceções lançadas e os argumentos.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractArgumentValidatorAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassAttribute">
      <summary vsli:raw="Specifies that a separate type contains the code contracts for this type.">Especifica que um tipo separado contém os contratos de código para esse tipo.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractClassAttribute" />.</summary>
      <param name="typeContainingContracts" vsli:raw="The type that contains the code contracts for this type.">O tipo que contém os contratos de código desse tipo.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassAttribute.TypeContainingContracts">
      <summary vsli:raw="Gets the type that contains the code contracts for this type.">Obtém o tipo que contém os contratos de código desse tipo.</summary>
      <returns vsli:raw="The type that contains the code contracts for this type.">O tipo que contém os contratos de código desse tipo.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractClassForAttribute">
      <summary vsli:raw="Specifies that a class is a contract for a type.">Especifica que uma classe é um contrato para um tipo.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractClassForAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractClassForAttribute&quot; /&gt; class, specifying the type the current class is a contract for.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractClassForAttribute" />, especificando o tipo para o qual a classe atual é um contrato.</summary>
      <param name="typeContractsAreFor" vsli:raw="The type the current class is a contract for.">O tipo para o qual a classe atual é um contrato.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractClassForAttribute.TypeContractsAreFor">
      <summary vsli:raw="Gets the type that this code contract applies to.">Obtém o tipo a que esse contrato de código se aplica.</summary>
      <returns vsli:raw="The type that this contract applies to.">O tipo ao qual este contrato se aplica.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailedEventArgs">
      <summary vsli:raw="Provides methods and data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Fornece métodos e dados para o evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.#ctor(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Fornece dados para o evento de <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> .</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the contract that failed.">Um dos valores de enumeração que especificam o contrato que falhou.</param>
      <param name="message" vsli:raw="The message for the event.">A mensagem para o evento.</param>
      <param name="condition" vsli:raw="The condition for the event.">A condição para o evento.</param>
      <param name="originalException" vsli:raw="The exception that caused the event.">A exceção que causou o evento.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetHandled">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">Define a propriedade <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled" /> como <see langword="true" />.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractFailedEventArgs.SetUnwind">
      <summary vsli:raw="Sets the &lt;see cref=&quot;P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">Define a propriedade <see cref="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind" /> como <see langword="true" />.</summary>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Condition">
      <summary vsli:raw="Gets the condition for the failure of the contract.">Obtém a condição da falha do contrato.</summary>
      <returns vsli:raw="The condition for the failure.">A condição para a falha.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.FailureKind">
      <summary vsli:raw="Gets the type of contract that failed.">Obtém o tipo de contrato que falhou.</summary>
      <returns vsli:raw="One of the enumeration values that specifies the type of contract that failed.">Um dos valores de enumeração que especifica o tipo de contrato que falhou.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Handled">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event has been handled.">Indica se o evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" /> foi manipulado.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event has been handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> Se o evento foi tratado; caso contrário, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Message">
      <summary vsli:raw="Gets the message that describes the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Obtém a mensagem que descreve o evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <returns vsli:raw="The message that describes the event.">A mensagem que descreve o evento.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.OriginalException">
      <summary vsli:raw="Gets the original exception that caused the &lt;see cref=&quot;E:System.Diagnostics.Contracts.Contract.ContractFailed&quot; /&gt; event.">Obtém a exceção original que causou o evento <see cref="E:System.Diagnostics.Contracts.Contract.ContractFailed" />.</summary>
      <returns vsli:raw="The exception that caused the event.">A exceção que causou o evento.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractFailedEventArgs.Unwind">
      <summary vsli:raw="Indicates whether the code contract escalation policy should be applied.">Indica se a política de escalonamento de contrato do código deve ser aplicada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to apply the escalation policy; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para aplicar a política de escalonamento; caso contrário, <see langword="false" /> . O padrão é <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractFailureKind">
      <summary vsli:raw="Specifies the type of contract that failed.">Especifica o tipo de contrato que falhou.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assert">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assert&quot; /&gt; contract failed.">Um contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Assert" /> com falha.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Assume">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Assume&quot; /&gt; contract failed.">Um contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Assume" /> com falha.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Invariant">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Invariant&quot; /&gt; contract failed.">Um contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Invariant" /> com falha.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Postcondition">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Ensures&quot; /&gt; contract failed.">Um contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Ensures" /> com falha.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.PostconditionOnException">
      <summary vsli:raw="An &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow&quot; /&gt; contract failed.">Um contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.EnsuresOnThrow" /> com falha.</summary>
    </member>
    <member name="F:System.Diagnostics.Contracts.ContractFailureKind.Precondition">
      <summary vsli:raw="A &lt;see cref=&quot;Overload:System.Diagnostics.Contracts.Contract.Requires&quot; /&gt; contract failed.">Um contrato <see cref="Overload:System.Diagnostics.Contracts.Contract.Requires" /> com falha.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute">
      <summary vsli:raw="Marks a method as being the invariant method for a class.">Marca um método como sendo o método invariável de uma classe.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractInvariantMethodAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractInvariantMethodAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractOptionAttribute">
      <summary vsli:raw="Enables you to set contract and tool options at assembly, type, or method granularity.">Permite definir opções de ferramenta e contrato na granularidade de assembly, tipo ou método.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and enable/disable value.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> usando a categoria, a configuração e o valor habilitar/desabilitar fornecidos.</summary>
      <param name="category" vsli:raw="The category for the option to be set.">A categoria da opção a ser definida.</param>
      <param name="setting" vsli:raw="The option setting.">A configuração da opção.</param>
      <param name="enabled" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enable the option; &lt;see langword=&quot;false&quot; /&gt; to disable the option.">
        <see langword="true" /> para habilitar a opção; <see langword="false" /> para desabilitá-la.</param>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractOptionAttribute.#ctor(System.String,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractOptionAttribute&quot; /&gt; class by using the provided category, setting, and value.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractOptionAttribute" /> usando a categoria, a configuração e o valor fornecidos.</summary>
      <param name="category" vsli:raw="The category of the option to be set.">A categoria da opção a ser definida.</param>
      <param name="setting" vsli:raw="The option setting.">A configuração da opção.</param>
      <param name="value" vsli:raw="The value for the setting.">O valor da configuração.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Category">
      <summary vsli:raw="Gets the category of the option.">Obtém a categoria da opção.</summary>
      <returns vsli:raw="The category of the option.">A categoria da opção.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Enabled">
      <summary vsli:raw="Determines if an option is enabled.">Determina se uma opção está habilitada.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the option is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a opção estiver habilitada; caso contrário, <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Setting">
      <summary vsli:raw="Gets the setting for the option.">Obtém a configuração da opção.</summary>
      <returns vsli:raw="The setting for the option.">A configuração da opção.</returns>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractOptionAttribute.Value">
      <summary vsli:raw="Gets the value for the option.">Obtém o valor da opção.</summary>
      <returns vsli:raw="The value for the option.">O valor da opção.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute">
      <summary vsli:raw="Specifies that a field can be used in method contracts when the field has less visibility than the method.">Especifica que um campo pode ser usado em contratos de método quando o campo tem menos visibilidade que o método.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute" />.</summary>
      <param name="name" vsli:raw="The property name to apply to the field.">O nome da propriedade a se aplicar ao campo.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractPublicPropertyNameAttribute.Name">
      <summary vsli:raw="Gets the property name to be applied to the field.">Obtém o nome da propriedade a ser aplicada ao campo.</summary>
      <returns vsli:raw="The property name to be applied to the field.">O nome da propriedade a ser aplicada ao campo.</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute">
      <summary vsli:raw="Specifies that an assembly is a reference assembly that contains contracts.">Especifica que um assembly é um assembly de referência que contém os contratos.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractReferenceAssemblyAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute">
      <summary vsli:raw="Identifies a member that has no run-time behavior.">Identifica um membro que não tem nenhum comportamento em tempo de execução.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractRuntimeIgnoredAttribute" />.</summary>
    </member>
    <member name="T:System.Diagnostics.Contracts.ContractVerificationAttribute">
      <summary vsli:raw="Instructs analysis tools to assume the correctness of an assembly, type, or member without performing static verification.">Instrui ferramentas de análise a assumir que um assembly, tipo ou membro está correto sem executar verificação estática.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.ContractVerificationAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractVerificationAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.ContractVerificationAttribute" />.</summary>
      <param name="value" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to require verification; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> para exigir verificação; caso contrário, <see langword="false" />.</param>
    </member>
    <member name="P:System.Diagnostics.Contracts.ContractVerificationAttribute.Value">
      <summary vsli:raw="Gets the value that indicates whether to verify the contract of the target.">Obtém o valor que indica se é necessário verificar o contrato do destino.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if verification is required; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> se a verificação for necessária; caso contrário, <see langword="false" /> .</returns>
    </member>
    <member name="T:System.Diagnostics.Contracts.PureAttribute">
      <summary vsli:raw="Indicates that a type or method is pure, that is, it does not make any visible state changes.">Indica que um tipo ou método é puro, ou seja, não faz qualquer alteração de estado visível.</summary>
    </member>
    <member name="M:System.Diagnostics.Contracts.PureAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.Contracts.PureAttribute&quot; /&gt; class.">Inicializa uma nova instância da classe <see cref="T:System.Diagnostics.Contracts.PureAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.CompilerServices.ContractHelper">
      <summary vsli:raw="Provides methods that the binary rewriter uses to handle contract failures.">Fornece métodos que o regravador binário usa para lidar com falhas de contrato.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.RaiseContractFailedEvent(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.Exception)">
      <summary vsli:raw="Used by the binary rewriter to activate the default failure behavior.">Usado pelo reescritor binário para ativar o comportamento de falha padrão.</summary>
      <param name="failureKind" vsli:raw="One of the enumeration values that specifies the type of failure.">Um dos valores de enumeração que especifica o tipo de falha.</param>
      <param name="userMessage" vsli:raw="Additional user information.">Informações de usuário adicionais.</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">A descrição da condição que causou a falha.</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">A exceção interna que causou a exceção atual.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;failureKind&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Diagnostics.Contracts.ContractFailureKind&quot; /&gt; value.">
        <paramref name="failureKind" /> não é um valor <see cref="T:System.Diagnostics.Contracts.ContractFailureKind" /> válido.</exception>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) if the event was handled and should not trigger a failure; otherwise, returns the localized failure message.">Uma referência nula (<see langword="Nothing" /> no Visual Basic) se o evento foi manipulado e não deve disparar uma falha, caso contrário, retorna a mensagem de falha localizada.</returns>
    </member>
    <member name="M:System.Runtime.CompilerServices.ContractHelper.TriggerFailure(System.Diagnostics.Contracts.ContractFailureKind,System.String,System.String,System.String,System.Exception)">
      <summary vsli:raw="Triggers the default failure behavior.">Dispara o comportamento de falha padrão.</summary>
      <param name="kind" vsli:raw="One of the enumeration values that specifies the type of failure.">Um dos valores de enumeração que especifica o tipo de falha.</param>
      <param name="displayMessage" vsli:raw="The message to display.">A mensagem a ser exibida.</param>
      <param name="userMessage" vsli:raw="Additional user information.">Informações de usuário adicionais.</param>
      <param name="conditionText" vsli:raw="The description of the condition that caused the failure.">A descrição da condição que causou a falha.</param>
      <param name="innerException" vsli:raw="The inner exception that caused the current exception.">A exceção interna que causou a exceção atual.</param>
    </member>
  </members>
</doc>
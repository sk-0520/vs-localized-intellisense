<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Reflection.Emit</name>
  </assembly>
  <members>
    <member name="T:System.Reflection.Emit.AssemblyBuilder">
      <summary vsli:raw="Defines and represents a dynamic assembly.">Definiert eine dynamische Assembly und stellt diese dar.</summary>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess)">
      <summary vsli:raw="Defines a dynamic assembly that has the specified name and access rights.">Definiert eine dynamische Assembly mit dem angegebenen Namen und den angegebenen Zugriffsrechten.</summary>
      <param name="name" vsli:raw="The name of the assembly.">Der Name der Assembly.</param>
      <param name="access" vsli:raw="The access rights of the assembly.">Die Zugriffsrechte der Assembly.</param>
      <returns vsli:raw="An object that represents the new assembly.">Ein Objekt, das die neue Assembly darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicAssembly(System.Reflection.AssemblyName,System.Reflection.Emit.AssemblyBuilderAccess,System.Collections.Generic.IEnumerable{System.Reflection.Emit.CustomAttributeBuilder})">
      <summary vsli:raw="Defines a new assembly that has the specified name, access rights, and attributes.">Definiert eine neue Assembly mit dem angegebenen Namen sowie den angegebenen Zugriffsrechten und Attributen.</summary>
      <param name="name" vsli:raw="The name of the assembly.">Der Name der Assembly.</param>
      <param name="access" vsli:raw="The access rights of the assembly.">Die Zugriffsrechte der Assembly.</param>
      <param name="assemblyAttributes" vsli:raw="A collection that contains the attributes of the assembly.">Eine Auflistung, die die Attribute der Assembly enthält.</param>
      <returns vsli:raw="An object that represents the new assembly.">Ein Objekt, das die neue Assembly darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.DefineDynamicModule(System.String)">
      <summary vsli:raw="Defines a named transient dynamic module in this assembly.">Definiert ein benanntes flüchtiges dynamisches Modul in dieser Assembly.</summary>
      <param name="name" vsli:raw="The name of the dynamic module.">Der Name des dynamischen Moduls.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; begins with white space.&#xA;&#xA; -or-&#xA;&#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.&#xA;&#xA; -or-&#xA;&#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is greater than the system-defined maximum length.">
        <paramref name="name" /> beginnt mit einem Leerzeichen.  
  
- oder - 
Die Länge von <paramref name="name" /> ist 0 (null).  
  
- oder - 
Die Länge von <paramref name="name" /> übersteigt die vom System definierte Höchstlänge.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <exception cref="T:System.ExecutionEngineException" vsli:raw="The assembly for default symbol writer cannot be loaded.&#xA;&#xA; -or-&#xA;&#xA; The type that implements the default symbol writer interface cannot be found.">Die Assembly für den Standardsymbolwriter kann nicht geladen werden.  
  
 - oder -  
  
 Der Typ, der die Schnittstelle des Symbolwriters implementiert, wurde nicht gefunden.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt; representing the defined dynamic module.">Ein <see cref="T:System.Reflection.Emit.ModuleBuilder" />, das das definierte dynamische Modul darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to the specified object.">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich dem angegebenen Objekt ist.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Ein Objekt, das mit dieser Instanz verglichen werden soll, oder <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="obj" /> dem Typ und dem Wert dieser Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">Gibt die benutzerdefinierten Attribute zurück, die auf den aktuellen <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> angewendet wurden.</summary>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Dieses Argument wird für Objekte dieses Typs ignoriert.</param>
      <returns vsli:raw="An array that contains the custom attributes; the array is empty if there are no attributes.">Ein Array, das die benutzerdefinierten Attribute enthält. Das Array ist leer, wenn keine Attribute vorhanden sind.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;, and that derive from a specified attribute type.">Gibt alle benutzerdefinierten Attribute zurück, die auf den aktuellen <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> angewendet wurden und die von einem angegebenen Attributtyp abgeleitet sind.</summary>
      <param name="attributeType" vsli:raw="The base type from which attributes derive.">Der Basistyp, von dem Attribute abgeleitet werden.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Dieses Argument wird für Objekte dieses Typs ignoriert.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" /> ist kein <see cref="T:System.Type" />-Objekt, das von der Laufzeit bereitgestellt wird. Beispielsweise ist <paramref name="attributeType" /> ein <see cref="T:System.Reflection.Emit.TypeBuilder" />-Objekt.</exception>
      <returns vsli:raw="An array that contains the custom attributes that are derived at any level from &lt;paramref name=&quot;attributeType&quot; /&gt;; the array is empty if there are no such attributes.">Ein Array, das die benutzerdefinierten Attribute enthält, die mit einem beliebigen Grad von <paramref name="attributeType" /> abgeleitet sind. Das Array ist leer, wenn keine solchen Attribute vorhanden sind.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetCustomAttributesData">
      <summary vsli:raw="Returns &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects that contain information about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">Gibt <see cref="T:System.Reflection.CustomAttributeData" />-Objekte zurück, die Informationen zu den Attributen enthalten, die auf den aktuellen <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> angewendet wurden.</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current module.">Eine generische Liste von <see cref="T:System.Reflection.CustomAttributeData" />-Objekten, die Daten zu den Attributen darstellen, die auf das aktuelle Modul angewendet wurden.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetDynamicModule(System.String)">
      <summary vsli:raw="Returns the dynamic module with the specified name.">Gibt das dynamische Modul mit dem angegebenen Namen zurück.</summary>
      <param name="name" vsli:raw="The name of the requested dynamic module.">Der Name des angeforderten dynamischen Moduls.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">Die Länge von <paramref name="name" /> ist 0 (null).</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns vsli:raw="A ModuleBuilder object representing the requested dynamic module.">Ein ModuleBuilder-Objekt, das das angeforderte dynamische Modul darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetExportedTypes">
      <summary vsli:raw="Gets the exported types defined in this assembly.">Ruft die in dieser Assembly definierten exportierten Typen ab.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented.">Diese Methode ist nicht implementiert.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the exported types defined in this assembly.">Ein Array von <see cref="T:System.Type" />, das die in dieser Assembly definierten exportierten Typen enthält.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFile(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; for the specified file in the file table of the manifest of this assembly.">Ruft einen <see cref="T:System.IO.FileStream" /> für die angegebene Datei in der Dateitabelle des Manifests dieser Assembly ab.</summary>
      <param name="name" vsli:raw="The name of the specified file.">Der Name der angegebenen Datei.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Diese Methode wird zurzeit nicht unterstützt.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; for the specified file, or &lt;see langword=&quot;null&quot; /&gt;, if the file is not found.">
        <see cref="T:System.IO.FileStream" /> für die angegebene Datei oder <see langword="null" />, wenn die Datei nicht gefunden wird.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetFiles(System.Boolean)">
      <summary vsli:raw="Gets the files in the file table of an assembly manifest, specifying whether to include resource modules.">Ruft die Dateien in der Dateitabelle eines Assemblymanifests ab und gibt an, ob Ressourcenmodule eingebunden werden sollen.</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Ressourcenmodule eingebunden werden sollen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Diese Methode wird zurzeit nicht unterstützt.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.IO.FileStream&quot; /&gt; objects.">Ein Array von <see cref="T:System.IO.FileStream" />-Objekten.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetLoadedModules(System.Boolean)">
      <summary vsli:raw="Returns all the loaded modules that are part of this assembly, and optionally includes resource modules.">Gibt alle geladenen Module zurück, die Bestandteil dieser Assembly sind, und bindet optional Ressourcenmodule ein.</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Ressourcenmodule eingebunden werden sollen, andernfalls <see langword="false" />.</param>
      <returns vsli:raw="The loaded modules that are part of this assembly.">Die geladenen Module, die Bestandteil dieser Assembly sind.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceInfo(System.String)">
      <summary vsli:raw="Returns information about how the given resource has been persisted.">Gibt Informationen darüber zurück, wie die angegebene Ressource beibehalten wurde.</summary>
      <param name="resourceName" vsli:raw="The name of the resource.">Der Name der Ressource.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Diese Methode wird zurzeit nicht unterstützt.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Reflection.ManifestResourceInfo&quot; /&gt; populated with information about the resource's topology, or &lt;see langword=&quot;null&quot; /&gt; if the resource is not found.">
        <see cref="T:System.Reflection.ManifestResourceInfo" /> mit Informationen zur Topologie der Ressource, oder <see langword="null" />, falls die Ressource nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceNames">
      <summary vsli:raw="Loads the specified manifest resource from this assembly.">Lädt die angegebene Manifestressource aus dieser Assembly.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported on a dynamic assembly. To get the manifest resource names, use &lt;see cref=&quot;M:System.Reflection.Assembly.GetManifestResourceNames&quot; /&gt;.">Diese Methode wird für eine dynamische Assembly nicht unterstützt. Um die Manifestressourcennamen abzurufen, verwenden Sie <see cref="M:System.Reflection.Assembly.GetManifestResourceNames" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns vsli:raw="An array of type &lt;see langword=&quot;String&quot; /&gt; containing the names of all the resources.">Ein Array des Typs <see langword="String" />, das die Namen sämtlicher Ressourcen enthält.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.String)">
      <summary vsli:raw="Loads the specified manifest resource from this assembly.">Lädt die angegebene Manifestressource aus dieser Assembly.</summary>
      <param name="name" vsli:raw="The name of the manifest resource being requested.">Der Name der angeforderten Manifestressource.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Diese Methode wird zurzeit nicht unterstützt.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; representing this manifest resource.">Ein <see cref="T:System.IO.Stream" />, der diese Manifestressource darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetManifestResourceStream(System.Type,System.String)">
      <summary vsli:raw="Loads the specified manifest resource, scoped by the namespace of the specified type, from this assembly.">Lädt die angegebene Manifestressource, deren Gültigkeitsbereich durch den Namespace des angegebenen Typs festgelegt ist, aus dieser Assembly.</summary>
      <param name="type" vsli:raw="The type whose namespace is used to scope the manifest resource name.">Der Typ, dessen Namespace verwendet wird, um den Gültigkeitsbereich des Manifestressourcennamens festzulegen.</param>
      <param name="name" vsli:raw="The name of the manifest resource being requested.">Der Name der angeforderten Manifestressource.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Diese Methode wird zurzeit nicht unterstützt.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Stream&quot; /&gt; representing this manifest resource.">Ein <see cref="T:System.IO.Stream" />, der diese Manifestressource darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModule(System.String)">
      <summary vsli:raw="Gets the specified module in this assembly.">Ruft das angegebene Modul in dieser Assembly ab.</summary>
      <param name="name" vsli:raw="The name of the requested module.">Der Name des angeforderten Moduls.</param>
      <returns vsli:raw="The module being requested, or &lt;see langword=&quot;null&quot; /&gt; if the module is not found.">Das angeforderte Modul oder <see langword="null" />, wenn das Modul nicht gefunden wurde.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetModules(System.Boolean)">
      <summary vsli:raw="Gets all the modules that are part of this assembly, and optionally includes resource modules.">Ruft alle Module ab, die Bestandteil dieser Assembly sind, und bindet optional Ressourcenmodule ein.</summary>
      <param name="getResourceModules" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include resource modules; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Ressourcenmodule eingebunden werden sollen, andernfalls <see langword="false" />.</param>
      <returns vsli:raw="The modules that are part of this assembly.">Die Module, die Bestandteil dieser Assembly sind.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetName(System.Boolean)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; that was specified when the current dynamic assembly was created, and sets the code base as specified.">Ruft den <see cref="T:System.Reflection.AssemblyName" /> ab, der beim Erstellen der aktuellen dynamischen Assembly angegeben wurde, und legt die Codebasis wie angegeben fest.</summary>
      <param name="copiedName" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to set the code base to the location of the assembly after it is shadow-copied; &lt;see langword=&quot;false&quot; /&gt; to set the code base to the original location.">
        <see langword="true" />, um die Codebasis auf den Speicherort der Assembly festzulegen, nachdem sie verborgen kopiert wurde. <see langword="false" />, um die Codebasis auf den ursprünglichen Speicherort festzulegen.</param>
      <returns vsli:raw="The name of the dynamic assembly.">Der Name der dynamischen Assembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetReferencedAssemblies">
      <summary vsli:raw="Gets an incomplete list of &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; objects for the assemblies that are referenced by this &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">Ruft eine unvollständige Liste von <see cref="T:System.Reflection.AssemblyName" />-Objekten für die Assemblys ab, auf die dieser <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> verweist.</summary>
      <returns vsli:raw="An array of assembly names for the referenced assemblies. This array is not a complete list.">Ein Array der Assemblynamen für die Assemblys, auf die verwiesen wird. Dieses Array stellt keine vollständige Liste dar.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo)">
      <summary vsli:raw="Gets the satellite assembly for the specified culture.">Ruft die Satellitenassembly für die angegebene Kultur ab.</summary>
      <param name="culture" vsli:raw="The specified culture.">Die angegebene Kultur.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;culture&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="culture" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The assembly cannot be found.">Die Assembly wurde nicht gefunden.</exception>
      <exception cref="T:System.IO.FileLoadException" vsli:raw="The satellite assembly with a matching file name was found, but the &lt;see langword=&quot;CultureInfo&quot; /&gt; did not match the one specified.">Die Satellitenassembly mit einem übereinstimmenden Dateinamen wurde gefunden, aber die <see langword="CultureInfo" /> stimmte nicht mit der Angabe überein.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The satellite assembly is not a valid assembly.">Die Satellitenassembly ist keine gültige Assembly.</exception>
      <returns vsli:raw="The specified satellite assembly.">Die angegebene Satellitenassembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetSatelliteAssembly(System.Globalization.CultureInfo,System.Version)">
      <summary vsli:raw="Gets the specified version of the satellite assembly for the specified culture.">Ruft die angegebene Version der Satellitenassembly für die angegebene Kultur ab.</summary>
      <param name="culture" vsli:raw="The specified culture.">Die angegebene Kultur.</param>
      <param name="version" vsli:raw="The version of the satellite assembly.">Die Version der Satellitenassembly.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;culture&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="culture" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.IO.FileLoadException" vsli:raw="The satellite assembly with a matching file name was found, but the &lt;see langword=&quot;CultureInfo&quot; /&gt; or the version did not match the one specified.">Die Satellitenassembly mit einem übereinstimmenden Dateinamen wurde gefunden, aber die <see langword="CultureInfo" /> oder die Version stimmte nicht mit der den Angaben überein.</exception>
      <exception cref="T:System.IO.FileNotFoundException" vsli:raw="The assembly cannot be found.">Die Assembly wurde nicht gefunden.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The satellite assembly is not a valid assembly.">Die Satellitenassembly ist keine gültige Assembly.</exception>
      <returns vsli:raw="The specified satellite assembly.">Die angegebene Satellitenassembly.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Gets the specified type from the types that have been defined and created in the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt;.">Ruft den angegebenen Typ aus den Typen ab, die im aktuellen <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> definiert und erstellt wurden.</summary>
      <param name="name" vsli:raw="The name of the type to search for.">Der Name des zu suchenden Typs.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to throw an exception if the type is not found; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um eine Ausnahme auszulösen, wenn der Typ nicht gefunden wurde, andernfalls <see langword="false" />.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to ignore the case of the type name when searching; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um die Groß- und Kleinschreibung des Typnamens beim Suchen zu ignorieren, andernfalls <see langword="false" />.</param>
      <returns vsli:raw="The specified type, or &lt;see langword=&quot;null&quot; /&gt; if the type is not found or has not been created yet.">Der angegebene Typ oder <see langword="null" />, wenn der Typ nicht gefunden oder noch nicht erstellt wurde.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Returns a value that indicates whether one or more instances of the specified attribute type is applied to this member.">Gibt einen Wert zurück, der angibt, ob eine oder mehrere Instanzen des angegebenen Attributtyps auf diesen Member angewendet werden.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to test for.">Der Typ des zu prüfenden Attributs.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Dieses Argument wird für Objekte dieses Typs ignoriert.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt; is applied to this dynamic assembly; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> wenn eine oder mehrere Instanzen von <paramref name="attributeType" /> auf diese dynamische Assembly angewendet werden, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute on this assembly using a specified custom attribute blob.">Legt mithilfe eines angegebenen benutzerdefinierten Attribut-BLOBs ein benutzerdefiniertes Attribut für diese Assembly fest.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Ein Byte-BLOB, das die Attribute darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> oder <paramref name="binaryAttribute" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is not a &lt;see langword=&quot;RuntimeConstructorInfo&quot; /&gt; object.">
        <paramref name="con" /> ist kein <see langword="RuntimeConstructorInfo" />-Objekt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.AssemblyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute on this assembly using a custom attribute builder.">Legt mithilfe eines benutzerdefinierten Attribut-Generators ein benutzerdefiniertes Attribut für diese Assembly fest.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Eine Instanz einer Hilfsklasse zum Definieren des benutzerdefinierten Attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.CodeBase">
      <summary vsli:raw="Gets the location of the assembly, as specified originally (such as in an &lt;see cref=&quot;T:System.Reflection.AssemblyName&quot; /&gt; object).">Ruft den ursprünglich angegebenen Speicherort der Assembly ab (z. B. in einem <see cref="T:System.Reflection.AssemblyName" />-Objekt).</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Diese Methode wird zurzeit nicht unterstützt.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns vsli:raw="The location of the assembly, as specified originally.">Der Speicherort der Assembly, der ursprünglich angegeben wurde.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.EntryPoint">
      <summary vsli:raw="Returns the entry point of this assembly.">Gibt den Einstiegspunkt dieser Assembly zurück.</summary>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns vsli:raw="The entry point of this assembly.">Der Einstiegspunkt dieser Assembly.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.FullName">
      <summary vsli:raw="Gets the display name of the current dynamic assembly.">Ruft den Anzeigenamen der aktuellen dynamischen Assembly ab.</summary>
      <returns vsli:raw="The display name of the dynamic assembly.">Der Anzeigename der dynamischen Assembly.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.GlobalAssemblyCache">
      <summary>Ruft einen Wert ab, der angibt, ob die Assembly aus dem globalen Assemblycache geladen wurde.</summary>
      <returns>Immer <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.HostContext">
      <summary vsli:raw="Gets the host context where the dynamic assembly is being created.">Ruft den Hostkontext ab, in dem die dynamische Assembly erstellt wird.</summary>
      <returns vsli:raw="A value that indicates the host context where the dynamic assembly is being created.">Ein Wert, der den Hostkontext angibt, in dem die dynamische Assembly erstellt wird.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ImageRuntimeVersion">
      <summary>Ruft die Version der Common Language Runtime ab, die in der Datei gespeichert wird, die das Manifest enthält.</summary>
      <exception cref="T:System.Security.SecurityException">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns>Eine Zeichenfolge, die die Version der Common Language Runtime anzeigt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.IsDynamic">
      <summary vsli:raw="Gets a value that indicates that the current assembly is a dynamic assembly.">Ruft einen Wert ab, der angibt, dass die aktuelle Assembly eine dynamische Assembly ist.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;true&quot; /&gt;.">Immer <see langword="true" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.Location">
      <summary vsli:raw="Gets the location, in codebase format, of the loaded file that contains the manifest if it is not shadow-copied.">Ruft den Speicherort der geladenen Datei, die das Manifest enthält, im CodeBase-Format ab, sofern es sich nicht um eine Schattenkopie handelt.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Diese Methode wird zurzeit nicht unterstützt.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns vsli:raw="The location of the loaded file that contains the manifest. If the loaded file has been shadow-copied, the &lt;see langword=&quot;Location&quot; /&gt; is that of the file before being shadow-copied.">Der Speicherort der geladenen Datei, die das Manifest enthält. Wenn eine Schattenkopie der geladenen Datei erstellt wurde, entspricht der <see langword="Location" /> dem der Datei vor dem Erstellen der Schattenkopie.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ManifestModule">
      <summary vsli:raw="Gets the module in the current &lt;see cref=&quot;T:System.Reflection.Emit.AssemblyBuilder&quot; /&gt; that contains the assembly manifest.">Ruft das Modul im aktuellen <see cref="T:System.Reflection.Emit.AssemblyBuilder" /> ab, das das Assemblymanifest enthält.</summary>
      <returns vsli:raw="The manifest module.">Das Manifestmodul.</returns>
    </member>
    <member name="P:System.Reflection.Emit.AssemblyBuilder.ReflectionOnly">
      <summary vsli:raw="Gets a value indicating whether the dynamic assembly is in the reflection-only context.">Ruft einen Wert ab, der angibt, ob sich die dynamische Assembly im reflektionsbezogenen Kontext befindet.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dynamic assembly is in the reflection-only context; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn sich die dynamische Assembly im reflektionsbezogenen Kontext befindet, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Reflection.Emit.AssemblyBuilderAccess">
      <summary vsli:raw="Defines the access modes for a dynamic assembly.">Definiert die Zugriffsmodi für eine dynamische Assembly.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.Run">
      <summary vsli:raw="The dynamic assembly can be executed, but not saved.">Die dynamische Assembly kann ausgeführt, jedoch nicht gespeichert werden.</summary>
    </member>
    <member name="F:System.Reflection.Emit.AssemblyBuilderAccess.RunAndCollect">
      <summary vsli:raw="The dynamic assembly will be automatically unloaded and its memory reclaimed, when it's no longer accessible.">Die dynamische Assembly wird automatisch entladen und der von ihr belegte Arbeitsspeicher wieder freigegeben, wenn kein Zugriff mehr darauf möglich ist.</summary>
    </member>
    <member name="T:System.Reflection.Emit.ConstructorBuilder">
      <summary vsli:raw="Defines and represents a constructor of a dynamic class.">Definiert einen Konstruktor einer dynamischen Klasse und stellt diesen dar.</summary>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Defines a parameter of this constructor.">Definiert einen Parameter dieses Konstruktors.</summary>
      <param name="iSequence" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter.">Die Position des Parameters in der Parameterliste. Parameter werden beginnend mit der Zahl 1 (für den ersten Parameter) indiziert.</param>
      <param name="attributes" vsli:raw="The attributes of the parameter.">Die Attribute des Parameters.</param>
      <param name="strParamName" vsli:raw="The name of the parameter. The name can be the null string.">Der Name des Parameters. Der Name kann aus einer NULL-Zeichenfolge bestehen.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;iSequence&quot; /&gt; is less than 0 (zero), or it is greater than the number of parameters of the constructor.">
        <paramref name="iSequence" /> ist kleiner als 0 (null) oder größer als die Anzahl der Parameter des Konstruktors.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der enthaltende Typ wurde mithilfe von <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</exception>
      <returns vsli:raw="An object that represents the new parameter of this constructor.">Ein Objekt, das den neuen Parameter dieses Konstruktors darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this constructor.">Gibt alle benutzerdefinierten Attribute zurück, die für diesen Konstruktor definiert sind.</summary>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">Steuert die Vererbung benutzerdefinierter Attribute aus Basisklassen. Konvertiert die Zeichenfolgendarstellung einer Zahl in einem angegebenen Stil und einem kulturspezifischen Format in die entsprechende 32-Bit-Ganzzahl mit Vorzeichen.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Diese Methode wird zurzeit nicht unterstützt.</exception>
      <returns vsli:raw="An array of objects representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance.">Ein Array von Objekten, das alle benutzerdefinierten Attribute des Konstruktors darstellt, der von dieser <see cref="T:System.Reflection.Emit.ConstructorBuilder" />-Instanz dargestellt wird.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">Gibt die benutzerdefinierten Attribute zurück, die durch den angegebenen Typ identifiziert werden.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">Der benutzerdefinierte Attributtyp.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">Steuert die Vererbung benutzerdefinierter Attribute aus Basisklassen. Konvertiert die Zeichenfolgendarstellung einer Zahl in einem angegebenen Stil und einem kulturspezifischen Format in die entsprechende 32-Bit-Ganzzahl mit Vorzeichen.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Diese Methode wird zurzeit nicht unterstützt.</exception>
      <returns vsli:raw="An object array that represents the attributes of this constructor.">Ein Array von Objekten, das die Attribute dieses Konstruktors darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; for this constructor.">Ruft einen <see cref="T:System.Reflection.Emit.ILGenerator" /> für diesen Konstruktor ab.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The constructor is a parameterless constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The constructor has &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags indicating that it should not have a method body.">Der Konstruktor ist ein parameterloser Konstruktor.  
  
- oder - 
Der Konstruktor verfügt über <see cref="T:System.Reflection.MethodAttributes" />- oder <see cref="T:System.Reflection.MethodImplAttributes" />-Flags, die angeben, dass er keinen Methodentext enthalten sollte.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object for this constructor.">Ein <see cref="T:System.Reflection.Emit.ILGenerator" />-Objekt für diesen Konstruktor.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetILGenerator(System.Int32)">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; object, with the specified MSIL stream size, that can be used to build a method body for this constructor.">Ruft ein <see cref="T:System.Reflection.Emit.ILGenerator" />-Objekt mit der angegebenen MSIL-Streamgröße ab, mit dem ein Methodentext für diesen Konstruktor erstellt werden kann.</summary>
      <param name="streamSize" vsli:raw="The size of the MSIL stream, in bytes.">Die Größe des MSIL-Streams in Bytes.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The constructor is a parameterless constructor.  &#xA;  &#xA; -or-  &#xA;  &#xA; The constructor has &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags indicating that it should not have a method body.">Der Konstruktor ist ein parameterloser Konstruktor.  
  
- oder - 
Der Konstruktor verfügt über <see cref="T:System.Reflection.MethodAttributes" />- oder <see cref="T:System.Reflection.MethodImplAttributes" />-Flags, die angeben, dass er keinen Methodentext enthalten sollte.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt; for this constructor.">Ein <see cref="T:System.Reflection.Emit.ILGenerator" /> für diesen Konstruktor.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the method implementation flags for this constructor.">Gibt die Methodenimplementierungsflags für diesen Konstruktor zurück.</summary>
      <returns vsli:raw="The method implementation flags for this constructor.">Die Methodenimplementierungsflags für diesen Konstruktor.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.GetParameters">
      <summary vsli:raw="Returns the parameters of this constructor.">Gibt den Parameter dieses Konstruktors zurück.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has not been called on this constructor's type, in the .NET Framework versions 1.0 and 1.1.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde für diesen Konstruktortyp in .NET Framework, Version 1.0 und 1.1, nicht aufgerufen.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has not been called on this constructor's type, in the .NET Framework version 2.0.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde für diesen Konstruktortyp in .NET Framework, Version 2.0, nicht aufgerufen.</exception>
      <returns vsli:raw="An array that represents the parameters of this constructor.">Ein Array von Objekten, das die Parameter dieses Konstruktors darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the constructor reflected by this instance with the specified arguments, under the constraints of the specified &lt;see langword=&quot;Binder&quot; /&gt;.">Ruft den Konstruktor, der von dieser Instanz reflektiert wird, mit den angegebenen Argumenten gemäß den Einschränkung des angegebenen <see langword="Binder" />-Elements dynamisch ab.</summary>
      <param name="obj" vsli:raw="The object that needs to be reinitialized.">Das Objekt, das neu initialisiert werden muss.</param>
      <param name="invokeAttr" vsli:raw="One of the &lt;see langword=&quot;BindingFlags&quot; /&gt; values that specifies the type of binding that is desired.">Einer der <see langword="BindingFlags" />-Werte, der den gewünschten Bindungstyp angibt.</param>
      <param name="binder" vsli:raw="A &lt;see langword=&quot;Binder&quot; /&gt; that defines a set of properties and enables the binding, coercion of argument types, and invocation of members using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, then Binder.DefaultBinding is used.">Ein <see langword="Binder" />, das einen Satz von Eigenschaften definiert sowie die Bindung, die Koersion von Argumenttypen und das Aufrufen von Membern mittels Reflektion ermöglicht. Wenn <paramref name="binder" /><see langword="null" /> ist, wird "Binder.DefaultBinding" verwendet.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters, this should be a null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic).">Eine Argumentliste. Diese ist ein Array von Argumenten, die hinsichtlich Anzahl, Reihenfolge und Typ mit den Parametern des aufzurufenden Konstruktors identisch sind. Wenn keine Parameter vorhanden sind, muss dies ein NULL-Verweis (<see langword="Nothing" /> in Visual Basic) sein.</param>
      <param name="culture" vsli:raw="A &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used.">Eine <see cref="T:System.Globalization.CultureInfo" /> für die Steuerung der Koersion von Typen. Ist diese gleich NULL, wird das <see cref="T:System.Globalization.CultureInfo" /> -Objekt des aktuellen Threads verwendet.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">Diese Methode wird zurzeit nicht unterstützt. Sie können den Konstruktor mit <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> abrufen und <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> für die zurückgegebene <see cref="T:System.Reflection.ConstructorInfo" /> abrufen.</exception>
      <returns vsli:raw="An instance of the class associated with the constructor.">Eine Instanz der Klasse, die dem Konstruktor zugeordnet ist.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the constructor represented by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.">Ruft den durch diese Instanz dargestellten Konstruktor für das angegebene Objekt dynamisch auf und übergibt dabei die angegebenen Parameter unter den Einschränkungen des angegebenen Binders.</summary>
      <param name="invokeAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as InvokeMethod, NonPublic, and so on.">Dies muss ein Bitflag von <see cref="T:System.Reflection.BindingFlags" /> sein, z. B. "InvokeMethod", "NonPublic" usw.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Ein Objekt, das die Bindung, die Umwandlung von Argumenttypen, das Aufrufen von Membern und das Abrufen von <see langword="MemberInfo" />-Objekten über Reflektion ermöglicht. Wenn „binder“ gleich <see langword="null" />ist, wird der Standardbinder verwendet. Siehe <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the constructor to be invoked. If there are no parameters this should be &lt;see langword=&quot;null&quot; /&gt;.">Eine Argumentliste. Diese ist ein Array von Argumenten, die hinsichtlich Anzahl, Reihenfolge und Typ mit den Parametern des aufzurufenden Konstruktors identisch sind. Wenn keine Parameter vorhanden sind, muss dies gleich <see langword="null" /> sein.</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. (For example, this is necessary to convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, since 1000 is represented differently by different cultures.)">Eine Instanz von <see cref="T:System.Globalization.CultureInfo" /> für die Steuerung der Umwandlung von Typen. Ist diese gleich NULL, wird das <see cref="T:System.Globalization.CultureInfo" /> -Objekt des aktuellen Threads verwendet. (Dies ist z. B. erforderlich, um einen <see cref="T:System.String" />, der 1000 darstellt, in einen <see cref="T:System.Double" />-Wert zu konvertieren, da 1000 in verschiedenen Kulturen unterschiedlich dargestellt wird.)</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">Diese Methode wird zurzeit nicht unterstützt. Sie können den Konstruktor mit <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> abrufen und <see cref="M:System.Reflection.ConstructorInfo.Invoke(System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)" /> für die zurückgegebene <see cref="T:System.Reflection.ConstructorInfo" /> abrufen.</exception>
      <returns vsli:raw="The value returned by the invoked constructor.">Der Wert, der von dem aufgerufenen Konstruktor zurückgegeben wird.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">Überprüft, ob der Typ des angegebenen benutzerdefinierten Attributs definiert ist.</summary>
      <param name="attributeType" vsli:raw="A custom attribute type.">Ein benutzerdefinierter Attributtyp.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes. This parameter is ignored.">Steuert die Vererbung benutzerdefinierter Attribute aus Basisklassen. Konvertiert die Zeichenfolgendarstellung einer Zahl in einem angegebenen Stil und einem kulturspezifischen Format in die entsprechende 32-Bit-Ganzzahl mit Vorzeichen.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. You can retrieve the constructor using &lt;see cref=&quot;M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt;.">Diese Methode wird zurzeit nicht unterstützt. Sie können den Konstruktor mit <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> abrufen und <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> für die zurückgegebene <see cref="T:System.Reflection.ConstructorInfo" /> abrufen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Typ des angegebenen benutzerdefinierten Attributs definiert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">Legt ein benutzerdefiniertes Attribut mithilfe eines angegebenen benutzerdefinierten Attribut-BLOBs fest.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Ein Byte-BLOB, das die Attribute darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> oder <paramref name="binaryAttribute" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Legt ein benutzerdefiniertes Attribut mithilfe eines benutzerdefinierten Attribut-Generators fest.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Eine Instanz einer Hilfsklasse zum Definieren des benutzerdefinierten Attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary vsli:raw="Sets the method implementation flags for this constructor.">Legt die Methodenimplementierungsflags für diesen Konstruktor fest.</summary>
      <param name="attributes" vsli:raw="The method implementation flags.">Die Methodenimplementierungsflags.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der enthaltende Typ wurde mithilfe von <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ConstructorBuilder.ToString">
      <summary vsli:raw="Returns this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance as a &lt;see cref=&quot;T:System.String&quot; /&gt;.">Gibt diese <see cref="T:System.Reflection.Emit.ConstructorBuilder" />-Instanz als <see cref="T:System.String" /> zurück.</summary>
      <returns vsli:raw="A string containing the name, attributes, and exceptions of this constructor, followed by the current Microsoft intermediate language (MSIL) stream.">Eine Zeichenfolge, die den Namen, Attribute und Ausnahmen dieses Konstruktors enthält, gefolgt vom aktuellen MSIL-Stream (Microsoft Intermediate Language).</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Attributes">
      <summary vsli:raw="Gets the attributes for this constructor.">Ruft die Attribute für diesen Konstruktor ab.</summary>
      <returns vsli:raw="The attributes for this constructor.">Die Attribute für diesen Konstruktor.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.CallingConvention">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.CallingConventions&quot; /&gt; value that depends on whether the declaring type is generic.">Ruft einen <see cref="T:System.Reflection.CallingConventions" />-Wert ab, der davon abhängt, ob der deklarierende Typ generisch ist.</summary>
      <returns vsli:raw="&lt;see cref=&quot;F:System.Reflection.CallingConventions.HasThis&quot; /&gt; if the declaring type is generic; otherwise, &lt;see cref=&quot;F:System.Reflection.CallingConventions.Standard&quot; /&gt;.">
        <see cref="F:System.Reflection.CallingConventions.HasThis" />, wenn der deklarierende Typ generisch ist, andernfalls <see cref="F:System.Reflection.CallingConventions.Standard" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.DeclaringType">
      <summary vsli:raw="Gets a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this member.">Ruft einen Verweis auf das <see cref="T:System.Type" />-Objekt für den Typ ab, der diesen Member deklariert.</summary>
      <returns vsli:raw="The type that declares this member.">Der Typ, der diesen Member deklariert.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.InitLocals">
      <summary vsli:raw="Gets or sets whether the local variables in this constructor should be zero-initialized.">Ruft die Information ab, ob die lokalen Variablen in diesem Konstruktor mit 0 (null) initialisiert werden sollen, oder legt diese Information fest.</summary>
      <returns vsli:raw="Read/write. Gets or sets whether the local variables in this constructor should be zero-initialized.">Lese-/Schreibzugriff. Ruft die Information ab, ob die lokalen Variablen in diesem Konstruktor mit 0 (null) initialisiert werden sollen, oder legt diese Information fest.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.MethodHandle">
      <summary vsli:raw="Gets the internal handle for the method. Use this handle to access the underlying metadata handle.">Ruft das interne Handle für die Methode ab. Verwenden Sie dieses Handle, um auf das zugrunde liegende Metadatenhandle zuzugreifen.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not supported on this class.">Diese Eigenschaft wird für diese Klasse nicht unterstützt.</exception>
      <returns vsli:raw="The internal handle for the method. Use this handle to access the underlying metadata handle.">Das interne Handle für die Methode. Verwenden Sie dieses Handle, um auf das zugrunde liegende Metadatenhandle zuzugreifen.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Module">
      <summary vsli:raw="Gets the dynamic module in which this constructor is defined.">Ruft das dynamische Modul ab, in dem dieser Konstruktor definiert ist.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; object that represents the dynamic module in which this constructor is defined.">Ein <see cref="T:System.Reflection.Module" />-Objekt, das das dynamische Modul darstellt, in dem dieser Konstruktor definiert ist.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.Name">
      <summary vsli:raw="Retrieves the name of this constructor.">Ruft den Namen des Konstruktors ab.</summary>
      <returns vsli:raw="The name of this constructor.">Der Name dieses Konstruktors.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ConstructorBuilder.ReflectedType">
      <summary vsli:raw="Holds a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this object was obtained.">Enthält einen Verweis auf das <see cref="T:System.Type" />-Objekt, aus dem dieses Objekt abgerufen wurde.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object from which this object was obtained.">Das- <see langword="Type" /> Objekt, aus dem dieses Objekt abgerufen wurde.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EnumBuilder">
      <summary vsli:raw="Describes and represents an enumeration type.">Beschreibt einen Enumerationstyp und stellt ihn dar.</summary>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.CreateTypeInfo">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.TypeInfo&quot; /&gt; object that represents this enumeration.">Ruft ein <see cref="T:System.Reflection.TypeInfo" />-Objekt ab, das diese Enumeration darstellt.</summary>
      <returns vsli:raw="An object that represents this enumeration.">Ein Objekt, das diese Enumeration darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.DefineLiteral(System.String,System.Object)">
      <summary vsli:raw="Defines the named static field in an enumeration type with the specified constant value.">Definiert das benannte statische Feld in einem Enumerationstyp mit dem angegebenen konstanten Wert.</summary>
      <param name="literalName" vsli:raw="The name of the static field.">Der Name des statischen Felds.</param>
      <param name="literalValue" vsli:raw="The constant value of the literal.">Der konstante Wert des Literals.</param>
      <returns vsli:raw="The defined field.">Das definierte Feld.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the public and non-public constructors defined for this class, as specified.">Gibt ein Array von <see cref="T:System.Reflection.ConstructorInfo" />-Objekten zurück, die die für diese Klasse angegebenen definierten öffentlichen und nicht öffentlichen Konstruktoren darstellen.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> sein: <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.">Gibt ein Array von <see cref="T:System.Reflection.ConstructorInfo" />-Objekten zurück, die die angegebenen Konstruktoren darstellen, die für diese Klasse definiert sind. Wenn keine Konstruktoren definiert sind, wird ein leeres Array zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this constructor.">Gibt alle benutzerdefinierten Attribute zurück, die für diesen Konstruktor definiert sind.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Gibt an, ob die Vererbungskette dieses Members nach den Attributen durchsucht werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.ConstructorBuilder&quot; /&gt; instance.">Gibt ein Objektarray zurück, das alle benutzerdefinierten Attribute des Konstruktors darstellt, der von dieser <see cref="T:System.Reflection.Emit.ConstructorBuilder" />-Instanz dargestellt wird.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">Gibt die benutzerdefinierten Attribute zurück, die durch den angegebenen Typ identifiziert werden.</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">Das <see langword="Type" />-Objekt, auf das die benutzerdefinierten Attribute angewendet werden.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Gibt an, ob die Vererbungskette dieses Members nach den Attributen durchsucht werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Returns an array of objects representing the attributes of this constructor that are of &lt;see cref=&quot;T:System.Type&quot; /&gt;&lt;paramref name=&quot;attributeType&quot; /&gt;.">Gibt ein Objektarray zurück, das die Attribute dieses Konstruktors mit dem <see cref="T:System.Type" /><paramref name="attributeType" /> darstellen.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetElementType">
      <summary vsli:raw="Calling this method always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Beim Aufrufen dieser Methode wird immer eine <see cref="T:System.NotSupportedException" /> ausgelöst.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported.">Diese Methode wird zurzeit nicht unterstützt.</exception>
      <returns vsli:raw="This method is not supported. No value is returned.">Diese Methode wird nicht unterstützt. Es wird kein Wert zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEnumUnderlyingType">
      <summary vsli:raw="Returns the underlying integer type of the current enumeration, which is set when the enumeration builder is defined.">Gibt den zugrunde liegenden Ganzzahltyp der aktuellen Enumeration zurück, die beim Definieren des Enumerations-Generators festgelegt wird.</summary>
      <returns vsli:raw="The underlying type.">Der zugrunde liegende Typ.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the event with the specified name.">Gibt das Ereignis mit dem angegebenen Namen zurück.</summary>
      <param name="name" vsli:raw="The name of the event to get.">Der Name des abzurufenden Ereignisses.</param>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dieses Aufrufattribut. Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> sein: <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Returns an &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; object representing the event declared or inherited by this type with the specified name. If there are no matches, &lt;see langword=&quot;null&quot; /&gt; is returned.">Gibt ein <see cref="T:System.Reflection.EventInfo" />-Objekt zurück, das das Ereignis darstellt, das von diesem Typ mit dem angegebenen Namen deklariert oder geerbt wurde. Wenn keine Übereinstimmungen vorhanden sind, wird <see langword="null" /> zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents">
      <summary vsli:raw="Returns the events for the public events declared or inherited by this type.">Gibt die Ereignisse für die öffentlichen Ereignisse zurück, die von diesem Typ deklariert oder geerbt wurden.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.">Gibt ein Array von <see cref="T:System.Reflection.EventInfo" /> -Objekten zurück, die die öffentlichen Ereignisse darstellen, die von diesem Typ deklariert oder geerbt wurden. Wenn keine öffentlichen Ereignisse vorhanden sind, wird ein leeres Array zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public events that are declared by this type.">Gibt die öffentlichen und nicht öffentlichen Ereignisse zurück, die von diesem Typ deklariert werden.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> sein, z. B. <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public and non-public events declared or inherited by this type. An empty array is returned if there are no events, as specified.">Gibt ein Array von <see cref="T:System.Reflection.EventInfo" />-Objekten zurück, die die öffentlichen und nicht öffentlichen Ereignisse darstellen, die von diesem Typ deklariert oder geerbt werden. Wenn es keine Ereignisse wie angegeben gibt, wird ein leeres Array zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the field specified by the given name.">Gibt das vom angegebenen Namen angegebene Feld zurück.</summary>
      <param name="name" vsli:raw="The name of the field to get.">Der Name des abzurufenden Felds.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> sein: <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Returns the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches, then null is returned.">Gibt das <see cref="T:System.Reflection.FieldInfo" />-Objekt zurück, das das Feld darstellt, das von diesem Typ mit dem angegebenen Namen und dem öffentlichen oder nicht öffentlichen Modifizierer deklariert oder geerbt wurde. Wenn keine Übereinstimmungen vorhanden sind, wird NULL zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public fields that are declared by this type.">Gibt die öffentlichen und nicht öffentlichen Felder zurück, die von diesem Typ deklariert werden.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as InvokeMethod, NonPublic, and so on.">Dies muss ein Bitflag von <see cref="T:System.Reflection.BindingFlags" /> sein, z. B. "InvokeMethod", "NonPublic" usw.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.">Gibt ein Array von <see cref="T:System.Reflection.FieldInfo" />-Objekten zurück, die die öffentlichen und nicht öffentlichen Felder darstellen, die von diesem Typ deklariert oder geerbt werden. Wenn keine Felder vorhanden sind, wird ein leeres Array zurückgegeben, wie angegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Returns the interface implemented (directly or indirectly) by this type, with the specified fully-qualified name.">Gibt die von diesem Typ (direkt oder indirekt) implementierte Schnittstelle mit dem angegebenen vollqualifizierten Namen zurück.</summary>
      <param name="name" vsli:raw="The name of the interface.">Der Name der Schnittstelle.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">Falls <see langword="true" />, wird Groß- und Kleinschreibung bei der Suche nicht berücksichtigt. Falls <see langword="false" />, wird Groß- und Kleinschreibung bei der Suche berücksichtigt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the implemented interface. Returns null if no interface matching name is found.">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das die implementierte Schnittstelle darstellt. Gibt NULL zurück, wenn kein mit der Schnittstelle übereinstimmender Name gefunden wird.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Returns an interface mapping for the interface requested.">Gibt eine Schnittstellenzuordnung für die angeforderte Schnittstelle zurück.</summary>
      <param name="interfaceType" vsli:raw="The type of the interface for which the interface mapping is to be retrieved.">Der Typ der Schnittstelle, für die die Schnittstellenzuordnung abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The type does not implement the interface.">Die Schnittstelle wird vom Typ nicht implementiert.</exception>
      <returns vsli:raw="The requested interface mapping.">Die angeforderte Schnittstellenzuordnung.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetInterfaces">
      <summary vsli:raw="Returns an array of all the interfaces implemented on this a class and its base classes.">Gibt ein Array aller für diese Klasse und die zugehörigen Basisklassen implementierten Schnittstellen zurück.</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the implemented interfaces. If none are defined, an empty array is returned.">Gibt ein Array von <see cref="T:System.Type" />-Objekten zurück, die die implementierten Schnittstellen darstellen. Wenn keine definiert sind, wird ein leeres Array zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all members with the specified name, type, and binding that are declared or inherited by this type.">Gibt alle Member mit dem angegebenen Namen, dem Typ und der Bindung zurück, die von diesem Typ deklariert oder geerbt wurden.</summary>
      <param name="name" vsli:raw="The name of the member.">Der Name des Members.</param>
      <param name="type" vsli:raw="The type of member that is to be returned.">Der Typ des zurückzugebenden Members.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> sein: <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public members are returned.">Gibt ein Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten zurück, die die öffentlichen und nicht öffentlichen Member darstellen, die für diesen Typ definiert wurden, wenn <paramref name="nonPublic" /> verwendet wird. Andernfalls werden nur die öffentlichen Member zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the specified members declared or inherited by this type.">Gibt die angegebenen Member zurück, die von diesem Typ deklariert oder geerbt wurden.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> sein: <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.">Gibt ein Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten zurück, die die öffentlichen und nicht öffentlichen Member darstellen, die von diesem Typ deklariert oder geerbt werden. Wenn keine übereinstimmenden Member vorhanden sind, wird ein leeres Array zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public methods declared or inherited by this type, as specified.">Gibt alle öffentlichen und nicht öffentlichen Methoden zurück, die gemäß Angabe von diesem Typ deklariert oder geerbt wurden.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> sein, z. B. <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; objects representing the public and non-public methods defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public methods are returned.">Gibt ein Array von <see cref="T:System.Reflection.MethodInfo" />-Objekten zurück, die die öffentlichen und nicht öffentlichen Methoden darstellen, die für diesen Typ definiert wurden, wenn <paramref name="nonPublic" /> verwendet wird. Andernfalls werden nur die öffentlichen Methoden zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the specified nested type that is declared by this type.">Gibt den angegebenen geschachtelten Typ zurück, der von diesem Typ deklariert wird.</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the nested type to get.">Das <see cref="T:System.String" />, das den Namen des abzurufenden geschachtelten Typs enthält.</param>
      <param name="bindingAttr" vsli:raw="A bitmask comprised of one or more &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; that specify how the search is conducted.  &#xA;  &#xA; -or-  &#xA;  &#xA; Zero, to conduct a case-sensitive search for public methods.">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.  
  
- oder - 
Null, um eine Suche nach öffentlichen Methoden mit Beachtung der Groß-/Kleinschreibung durchzuführen.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the nested type that matches the specified requirements, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.Type" />-Objekt, das den geschachtelten Typ darstellt, der den angegebenen Anforderungen entspricht, sofern gefunden, andernfalls <see langword="null" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared or inherited by this type.">Gibt die öffentlichen und nicht öffentlichen geschachtelten Typen zurück, die von diesem Typ deklariert oder geerbt werden.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> sein, z. B. <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing all the types nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt; that match the specified binding constraints.  &#xA;  &#xA; An empty array of type &lt;see cref=&quot;T:System.Type&quot; /&gt;, if no types are nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt;, or if none of the nested types match the binding constraints.">Ein Array von <see cref="T:System.Type" />-Objekten, die sämtliche im aktuellen <see cref="T:System.Type" /> geschachtelten Typen darstellen, die den angegebenen Bindungseinschränkungen entsprechen.  
  
Ein leeres Array vom Typ <see cref="T:System.Type" />, wenn im aktuellen <see cref="T:System.Type" /> keine Typen geschachtelt sind oder keiner der geschachtelten Typen den Bindungseinschränkungen entspricht.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public properties declared or inherited by this type, as specified.">Gibt alle öffentlichen und nicht öffentlichen Eigenschaften zurück, die gemäß Angabe von diesem Typ deklariert oder geerbt wurden.</summary>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dieses Aufrufattribut. Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> sein: <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.PropertyInfo&quot; /&gt; objects representing the public and non-public properties defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public properties are returned.">Gibt ein Array von <see cref="T:System.Reflection.PropertyInfo" />-Objekten zurück, die die öffentlichen und nicht öffentlichen Eigenschaften darstellen, die für diesen Typ definiert wurden, wenn <paramref name="nonPublic" /> verwendet wird. Andernfalls werden nur die öffentlichen Eigenschaften zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.">Ruft den angegebenen Member auf. Die Methode, die aufgerufen werden soll, muss zugänglich sein und mit der angegebenen Argumentliste unter den Einschränkungen des angegebenen Binders und der Aufrufattribute die spezifischste Übereinstimmung bereitstellen.</summary>
      <param name="name" vsli:raw="The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.">Der Name des aufzurufenden Members. Dies kann ein Konstruktor, eine Methode, eine Eigenschaft oder ein Feld sein. Es muss ein geeignetes Aufrufattribut angegeben werden. Beachten Sie, dass es möglich ist, den Standardmember einer Klasse aufzurufen, indem Sie eine leere Zeichenfolge als Name des Members übergeben.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt;.">Das Attribut für den Aufruf. Dies muss ein Bitflag aus <see langword="BindingFlags" /> sein.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Ein Objekt, das die Bindung, die Umwandlung von Argumenttypen, das Aufrufen von Membern und das Abrufen von <see langword="MemberInfo" />-Objekten über Reflektion ermöglicht. Wenn „binder“ gleich <see langword="null" />ist, wird der Standardbinder verwendet. Siehe <see cref="T:System.Reflection.Binder" />.</param>
      <param name="target" vsli:raw="The object on which to invoke the specified member. If the member is static, this parameter is ignored.">Das Objekt, für das der angegebene Member aufgerufen werden soll. Wenn der Member statisch ist, wird dieser Parameter ignoriert.</param>
      <param name="args" vsli:raw="An argument list. This is an array of objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.">Eine Argumentliste. Dies ist ein Array von Objekten, das die Anzahl, Reihenfolge und den Typ der Parameter des aufzurufenden Members enthält. Wenn keine Parameter vorhanden sind, muss dies gleich NULL sein.</param>
      <param name="modifiers" vsli:raw="An array of the same length as &lt;paramref name=&quot;args&quot; /&gt; with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for details such as this.">Ein Array derselben Länge wie <paramref name="args" /> mit Elementen, die die Argumente darstellen, die den Argumenten des aufzurufenden Members zugeordnet sind. Ein Parameter verfügt über Attribute, die ihm in den Metadaten zugeordnet werden. Sie werden von verschiedenen Interoperabilitätsdiensten verwendet. Informationen wie diese finden Sie in den Metadatenspezifikationen.</param>
      <param name="culture" vsli:raw="An instance of &lt;see langword=&quot;CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see langword=&quot;CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a string that represents 1000 to a double value, since 1000 is represented differently by different cultures.)">Eine Instanz von <see langword="CultureInfo" /> für die Steuerung der Umwandlung von Typen. Ist diese gleich NULL, wird das <see langword="CultureInfo" /> -Objekt des aktuellen Threads verwendet. (Dies ist z. B. erforderlich, um eine Zeichenfolge, die 1000 darstellt, in einen Double-Wert zu konvertieren, da 1000 in verschiedenen Kulturen unterschiedlich dargestellt wird.)</param>
      <param name="namedParameters" vsli:raw="Each parameter in the &lt;paramref name=&quot;namedParameters&quot; /&gt; array gets the value in the corresponding element in the &lt;paramref name=&quot;args&quot; /&gt; array. If the length of &lt;paramref name=&quot;args&quot; /&gt; is greater than the length of &lt;paramref name=&quot;namedParameters&quot; /&gt;, the remaining argument values are passed in order.">Jeder Parameter im <paramref name="namedParameters" />-Array ruft den Wert im entsprechenden Element im <paramref name="args" />-Array ab. Wenn die Länge von <paramref name="args" /> größer als die Länge von <paramref name="namedParameters" /> ist, werden die restlichen Argumentwerte in der Reihenfolge übergeben.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Returns the return value of the invoked member.">Gibt den Rückgabewert des aufgerufenen Members zurück.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">Überprüft, ob der Typ des angegebenen benutzerdefinierten Attributs definiert ist.</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">Das <see langword="Type" />-Objekt, auf das die benutzerdefinierten Attribute angewendet werden.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Gibt an, ob die Vererbungskette dieses Members nach den Attributen durchsucht werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn mindestens eine Instanz von <paramref name="attributeType" /> für diesen Member definiert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array of the current type, with a lower bound of zero.">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das ein eindimensionales Array vom aktuellen Typ mit einer unteren Grenze von 0 (null) darstellt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array of the current type, with a lower bound of zero.">Ein <see cref="T:System.Type" />-Objekt, das ein eindimensionales Array vom aktuellen Typ mit einer unteren Grenze von 0 (null) darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing an array of the current type, with the specified number of dimensions.">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das ein Array vom aktuellen Typ mit der angegebenen Anzahl von Dimensionen darstellt.</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array. This number must be less than or equal to 32.">Die Anzahl von Dimensionen für das Array. Diese Zahl muss kleiner oder gleich 32 sein.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is less than 1.">
        <paramref name="rank" /> ist kleiner als 1.</exception>
      <returns vsli:raw="An object representing an array of the current type, with the specified number of dimensions.">Ein Objekt, das ein Array vom aktuellen Typ mit der angegebenen Anzahl von Dimensionen darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das beim Übergeben als ref-Parameter (ByRef-Parameter in Visual Basic) den aktuellen Typ darstellt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a ref parameter (ByRef parameter in Visual Basic).">Ein <see cref="T:System.Type" />-Objekt, das beim Übergeben als ref-Parameter (ByRef-Parameter in Visual Basic) den aktuellen Typ darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current type.">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das einen Zeiger auf den aktuellen Typ darstellt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current type.">Ein <see cref="T:System.Type" />-Objekt, das einen Zeiger auf den aktuellen Typ darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Legt ein benutzerdefiniertes Attribut mithilfe eines angegebenen benutzerdefinierten Attribut-BLOBs fest.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Ein Byte-BLOB, das die Attribute darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> oder <paramref name="binaryAttribute" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EnumBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">Legt ein benutzerdefiniertes Attribut mithilfe eines benutzerdefinierten Attribut-Generators fest.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Eine Instanz einer Hilfsklasse zum Definieren des benutzerdefinierten Attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Assembly">
      <summary vsli:raw="Retrieves the dynamic assembly that contains this enum definition.">Ruft die dynamische Assembly ab, die diese Enumerationsdefinition enthält.</summary>
      <returns vsli:raw="Read-only. The dynamic assembly that contains this enum definition.">Schreibgeschützt. Die dynamische Assembly, die diese Enumerationsdefinition enthält.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Returns the full path of this enum qualified by the display name of the parent assembly.">Gibt den vollständigen Pfad dieser Enumeration zurück, der durch den Anzeigenamen der übergeordneten Assembly qualifiziert ist.</summary>
      <returns vsli:raw="Read-only. The full path of this enum qualified by the display name of the parent assembly.">Schreibgeschützt. Der vollständige Pfad dieser Enumeration, der durch den Anzeigenamen der übergeordneten Assembly qualifiziert ist.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.BaseType">
      <summary vsli:raw="Returns the parent &lt;see cref=&quot;T:System.Type&quot; /&gt; of this type which is always &lt;see cref=&quot;T:System.Enum&quot; /&gt;.">Gibt den übergeordneten <see cref="T:System.Type" /> dieses Typs, der immer <see cref="T:System.Enum" /> ist.</summary>
      <returns vsli:raw="Read-only. The parent &lt;see cref=&quot;T:System.Type&quot; /&gt; of this type.">Schreibgeschützt. Das übergeordnete <see cref="T:System.Type" /> dieses Typs.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declared this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">Gibt den Typ zurück, der diesen <see cref="T:System.Reflection.Emit.EnumBuilder" /> deklariert hat.</summary>
      <returns vsli:raw="Read-only. The type that declared this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">Schreibgeschützt. Der Typ, der diesen <see cref="T:System.Reflection.Emit.EnumBuilder" /> deklariert hat.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.FullName">
      <summary vsli:raw="Returns the full path of this enum.">Gibt den vollständigen Pfad dieser Enumeration zurück.</summary>
      <returns vsli:raw="Read-only. The full path of this enum.">Schreibgeschützt. Der vollständige Pfad dieser Enumeration.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.GUID">
      <summary vsli:raw="Returns the GUID of this enum.">Gibt die GUID dieser Enumeration zurück.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported in types that are not complete.">Diese Methode wird derzeit nicht in Typen unterstützt, die nicht abgeschlossen sind.</exception>
      <returns vsli:raw="Read-only. The GUID of this enum.">Schreibgeschützt. Die GUID dieser Enumeration.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">Ruft einen Wert ab, der angibt, ob dieses Objekt einen konstruierten generischen Typ darstellt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Objekt einen konstruierten generischen Typ darstellt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.EnumBuilder.IsVariableBoundArray" />
    <member name="P:System.Reflection.Emit.EnumBuilder.Module">
      <summary vsli:raw="Retrieves the dynamic module that contains this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt; definition.">Ruft das dynamische Modul ab, das diese <see cref="T:System.Reflection.Emit.EnumBuilder" />-Definition enthält.</summary>
      <returns vsli:raw="Read-only. The dynamic module that contains this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt; definition.">Schreibgeschützt. Das dynamische Modul, das diese <see cref="T:System.Reflection.Emit.EnumBuilder" />-Definition enthält.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Name">
      <summary vsli:raw="Returns the name of this enum.">Gibt den Namen dieser Enumeration zurück.</summary>
      <returns vsli:raw="Read-only. The name of this enum.">Schreibgeschützt. Der Name dieser Enumeration.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.Namespace">
      <summary vsli:raw="Returns the namespace of this enum.">Gibt den Namespace dieser Enumeration zurück.</summary>
      <returns vsli:raw="Read-only. The namespace of this enum.">Schreibgeschützt. Der Namespace dieser Enumeration.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.ReflectedType">
      <summary vsli:raw="Returns the type that was used to obtain this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">Gibt den Typ zurück, mit dem dieser <see cref="T:System.Reflection.Emit.EnumBuilder" /> abgerufen wurde.</summary>
      <returns vsli:raw="Read-only. The type that was used to obtain this &lt;see cref=&quot;T:System.Reflection.Emit.EnumBuilder&quot; /&gt;.">Schreibgeschützt. Der Typ, mit dem dieser <see cref="T:System.Reflection.Emit.EnumBuilder" /> abgerufen wurde.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.TypeHandle">
      <summary vsli:raw="Retrieves the internal handle for this enum.">Ruft das interne Handle für diese Enumeration ab.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This property is not currently supported.">Diese Eigenschaft wird derzeit nicht unterstützt.</exception>
      <returns vsli:raw="Read-only. The internal handle for this enum.">Schreibgeschützt. Das interne Handle für diese Enumeration.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingField">
      <summary vsli:raw="Returns the underlying field for this enum.">Gibt das zugrunde liegende Feld für diese Enumeration zurück.</summary>
      <returns vsli:raw="Read-only. The underlying field for this enum.">Schreibgeschützt. Das zugrunde liegende Feld für diese Enumeration.</returns>
    </member>
    <member name="P:System.Reflection.Emit.EnumBuilder.UnderlyingSystemType">
      <summary vsli:raw="Returns the underlying system type for this enum.">Gibt den zugrunde liegenden Systemtyp für diese Enumeration zurück.</summary>
      <returns vsli:raw="Read-only. Returns the underlying system type.">Schreibgeschützt. Gibt den zugrunde liegenden Systemtyp zurück.</returns>
    </member>
    <member name="T:System.Reflection.Emit.EventBuilder">
      <summary vsli:raw="Defines events for a class.">Definiert Ereignisse für eine Klasse.</summary>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Adds one of the &quot;other&quot; methods associated with this event. &quot;Other&quot; methods are methods other than the &quot;on&quot; and &quot;raise&quot; methods associated with an event. This function can be called many times to add as many &quot;other&quot; methods.">Fügt eine der Other-Methoden hinzu, die diesem Ereignis zugeordnet sind. Dies sind andere Methoden als die "on"-Methode und die "raise"-Methode, die einem Ereignis zugeordnet sind. Diese Funktion kann mehrmals aufgerufen werden, um dementsprechend viele Other-Methoden hinzuzufügen.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the other method.">Ein <see langword="MethodBuilder" />-Objekt, das die andere Methode darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde für den einschließenden Typ aufgerufen.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetAddOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to subscribe to this event.">Legt die Methode fest, mit der dieses Ereignis abonniert wird.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to subscribe to this event.">Ein <see langword="MethodBuilder" />-Objekt, das die Methode darstellt, mit der dieses Ereignis abonniert wird.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde für den einschließenden Typ aufgerufen.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">Legt ein benutzerdefiniertes Attribut mithilfe eines angegebenen benutzerdefinierten Attribut-BLOBs fest.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Ein Byte-BLOB, das die Attribute darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> oder <paramref name="binaryAttribute" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde für den einschließenden Typ aufgerufen.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">Legt ein benutzerdefiniertes Attribut mithilfe eines benutzerdefinierten Attribut-Generators fest.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to describe the custom attribute.">Eine Instanz einer Hilfsklasse zum Beschreiben des benutzerdefinierten Attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde für den einschließenden Typ aufgerufen.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRaiseMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to raise this event.">Legt die Methode fest, mit der dieses Ereignis ausgelöst wird.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to raise this event.">Ein <see langword="MethodBuilder" />-Objekt, das die Methode darstellt, mit der dieses Ereignis ausgelöst wird.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde für den einschließenden Typ aufgerufen.</exception>
    </member>
    <member name="M:System.Reflection.Emit.EventBuilder.SetRemoveOnMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method used to unsubscribe to this event.">Legt die Methode fest, mit der das Ereignisabonnement aufgehoben wird.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method used to unsubscribe to this event.">Ein <see langword="MethodBuilder" />-Objekt, das die Methode darstellt, mit der dieses Ereignisabonnement aufgehoben wird.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde für den einschließenden Typ aufgerufen.</exception>
    </member>
    <member name="T:System.Reflection.Emit.FieldBuilder">
      <summary vsli:raw="Defines and represents a field. This class cannot be inherited.">Definiert ein Feld und stellt dieses dar. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this field.">Gibt alle für dieses Feld definierten benutzerdefinierten Attribute zurück.</summary>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">Steuert die Vererbung benutzerdefinierter Attribute aus Basisklassen.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.FieldBuilder&quot; /&gt; instance.">Ein Array vom Typ <see cref="T:System.Object" />, das alle benutzerdefinierten Attribute des Konstruktors darstellt, die von dieser <see cref="T:System.Reflection.Emit.FieldBuilder" />-Instanz dargestellt werden.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this field identified by the given type.">Gibt alle für dieses Feld definierten benutzerdefinierten Attribute zurück, die vom angegebenen Typ bezeichnet werden.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">Der benutzerdefinierte Attributtyp.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">Steuert die Vererbung benutzerdefinierter Attribute aus Basisklassen.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Object&quot; /&gt; representing all the custom attributes of the constructor represented by this &lt;see cref=&quot;T:System.Reflection.Emit.FieldBuilder&quot; /&gt; instance.">Ein Array vom Typ <see cref="T:System.Object" />, das alle benutzerdefinierten Attribute des Konstruktors darstellt, die von dieser <see cref="T:System.Reflection.Emit.FieldBuilder" />-Instanz dargestellt werden.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.GetValue(System.Object)">
      <summary vsli:raw="Retrieves the value of the field supported by the given object.">Ruft den Wert des Felds ab, das vom angegebenen Objekt unterstützt wird.</summary>
      <param name="obj" vsli:raw="The object on which to access the field.">Das Objekt, für das auf das Feld zugegriffen werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Object&quot; /&gt; containing the value of the field reflected by this instance.">Ein <see cref="T:System.Object" /> mit dem Wert des Felds, das von dieser Instanz reflektiert wird.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether an attribute having the specified type is defined on a field.">Gibt an, ob ein Attribut mit dem angegebenen Typ für ein Feld definiert ist.</summary>
      <param name="attributeType" vsli:raw="The type of the attribute.">Der Typ des Attributs.</param>
      <param name="inherit" vsli:raw="Controls inheritance of custom attributes from base classes.">Steuert die Vererbung benutzerdefinierter Attribute aus Basisklassen.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the field using &lt;see cref=&quot;M:System.Type.GetField(System.String,System.Reflection.BindingFlags)&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt;.">Diese Methode wird zurzeit nicht unterstützt. Rufen Sie das Feld mithilfe von <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> ab, und rufen Sie <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> für die zurückgegebene <see cref="T:System.Reflection.FieldInfo" /> auf.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this field; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn eine oder mehrere Instanzen von <paramref name="attributeType" /> für dieses Feld definiert sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of this field.">Legt den Standardwert dieses Felds fest.</summary>
      <param name="defaultValue" vsli:raw="The new default value for this field.">Der neue Standardwert für dieses Feld.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der enthaltende Typ wurde mithilfe von <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The field is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the field.  &#xA;  &#xA; -or-  &#xA;  &#xA; The field is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">Das Feld weist keinen unterstützten Typ auf.  
  
- oder - 
Der Typ von <paramref name="defaultValue" /> entspricht nicht dem Typ des Felds.  
  
- oder - 
Das Feld weist den Typ <see cref="T:System.Object" /> oder einen anderen Verweistyp auf, <paramref name="defaultValue" /> ist nicht <see langword="null" />, und der Wert kann nicht dem Verweistyp zugewiesen werden.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Legt ein benutzerdefiniertes Attribut mithilfe eines angegebenen benutzerdefinierten Attribut-BLOBs fest.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Ein Byte-BLOB, das die Attribute darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> oder <paramref name="binaryAttribute" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The parent type of this field is complete.">Der übergeordnete Typ dieses Felds ist vollständig.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">Legt ein benutzerdefiniertes Attribut mithilfe eines benutzerdefinierten Attribut-Generators fest.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Eine Instanz einer Hilfsklasse zum Definieren des benutzerdefinierten Attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The parent type of this field is complete.">Der übergeordnete Typ dieses Felds ist vollständig.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetOffset(System.Int32)">
      <summary vsli:raw="Specifies the field layout.">Gibt das Feldlayout an.</summary>
      <param name="iOffset" vsli:raw="The offset of the field within the type containing this field.">Der Offset des Felds innerhalb des Typs, der dieses Feld enthält.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der enthaltende Typ wurde mithilfe von <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;iOffset&quot; /&gt; is less than zero.">
        <paramref name="iOffset" /> ist kleiner als Null.</exception>
    </member>
    <member name="M:System.Reflection.Emit.FieldBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Globalization.CultureInfo)">
      <summary vsli:raw="Sets the value of the field supported by the given object.">Legt den Wert des Felds fest, das durch das angegebene Objekt unterstützt wird.</summary>
      <param name="obj" vsli:raw="The object on which to access the field.">Das Objekt, für das auf das Feld zugegriffen werden soll.</param>
      <param name="val" vsli:raw="The value to assign to the field.">Der Wert, der dem Feld zugewiesen werden soll.</param>
      <param name="invokeAttr" vsli:raw="A member of &lt;see langword=&quot;IBinder&quot; /&gt; that specifies the type of binding that is desired (for example, IBinder.CreateInstance, IBinder.ExactBinding).">Ein Member von <see langword="IBinder" />, der den gewünschten Typ der Bindung angibt, z. B. IBinder.CreateInstance, IBinder.ExactBinding.</param>
      <param name="binder" vsli:raw="A set of properties and enabling for binding, coercion of argument types, and invocation of members using reflection. If binder is null, then IBinder.DefaultBinding is used.">Eine Gruppe von Eigenschaften, die die Bindung, die Umwandlung von Argumenttypen und das Aufrufen von Membern mithilfe von Reflektion ermöglicht. Wenn der Binder NULL ist, wird IBinder.DefaultBinding verwendet.</param>
      <param name="culture" vsli:raw="The software preferences of a particular culture.">Die Softwareeinstellungen für eine bestimmte Kultur.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Attributes">
      <summary vsli:raw="Indicates the attributes of this field. This property is read-only.">Gibt die Attribute dieses Felds an. Diese Eigenschaft ist schreibgeschützt.</summary>
      <returns vsli:raw="The attributes of this field.">Die Attribute dieses Felds.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.DeclaringType">
      <summary vsli:raw="Indicates a reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this field. This property is read-only.">Gibt einen Verweis auf das <see cref="T:System.Type" />-Objekt für den Typ an, der dieses Feld deklariert. Diese Eigenschaft ist schreibgeschützt.</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the type that declares this field.">Ein Verweis auf das <see cref="T:System.Type" />-Objekt für den Typ, der dieses Feld deklariert.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldHandle">
      <summary vsli:raw="Indicates the internal metadata handle for this field. This property is read-only.">Gibt das interne Metadatenhandle für dieses Feld an. Diese Eigenschaft ist schreibgeschützt.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
      <returns vsli:raw="The internal metadata handle for this field.">Das interne Metadatenhandle für dieses Feld.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.FieldType">
      <summary vsli:raw="Indicates the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of this field. This property is read-only.">Gibt das <see cref="T:System.Type" />-Objekt an, das den Typ dieses Felds darstellt. Diese Eigenschaft ist schreibgeschützt.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of this field.">Das <see cref="T:System.Type" />-Objekt, das den Typ dieses Felds darstellt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Module">
      <summary vsli:raw="Gets the module in which the type that contains this field is being defined.">Ruft das Modul ab, in dem der Typ, der dieses Feld enthält, definiert wird.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; that represents the dynamic module in which this field is being defined.">Eine <see cref="T:System.Reflection.Module" />-Klasse, die das dynamische Modul darstellt, in dem dieses Feld definiert wird.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.Name">
      <summary vsli:raw="Indicates the name of this field. This property is read-only.">Gibt den Namen dieses Felds an. Diese Eigenschaft ist schreibgeschützt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of this field.">Ein <see cref="T:System.String" /> mit dem Namen dieses Felds.</returns>
    </member>
    <member name="P:System.Reflection.Emit.FieldBuilder.ReflectedType">
      <summary vsli:raw="Indicates the reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this object was obtained. This property is read-only.">Gibt den Verweis auf das <see cref="T:System.Type" />-Objekt an, von dem dieses Objekt erhalten wurde. Diese Eigenschaft ist schreibgeschützt.</summary>
      <returns vsli:raw="A reference to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object from which this instance was obtained.">Ein Verweis auf das <see cref="T:System.Type" />-Objekt, von dem diese Instanz erhalten wurde.</returns>
    </member>
    <member name="T:System.Reflection.Emit.GenericTypeParameterBuilder">
      <summary vsli:raw="Defines and creates generic type parameters for dynamically defined generic types and methods. This class cannot be inherited.">Definiert und erstellt generische Typparameter für dynamisch definierte generische Typen und Methoden. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.Equals(System.Object)">
      <summary vsli:raw="Tests whether the given object is an instance of &lt;see langword=&quot;EventToken&quot; /&gt; and is equal to the current instance.">Testet, ob das angegebene Objekt eine Instanz von <see langword="EventToken" /> und gleich der aktuellen Instanz ist.</summary>
      <param name="o" vsli:raw="The object to be compared with the current instance.">Das mit der aktuellen Instanz zu vergleichende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is an instance of &lt;see langword=&quot;EventToken&quot; /&gt; and equals the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="o" /> eine Instanz von <see langword="EventToken" /> und gleich der aktuellen Instanz ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Gibt an, ob die Vererbungskette dieses Members nach den Attributen durchsucht werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">Der Typ des zu suchenden Attributs. Nur Attribute, die diesem Typ zugeordnet werden können, werden zurückgegeben.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Gibt an, ob die Vererbungskette dieses Members nach den Attributen durchsucht werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetElementType">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen eine <see cref="T:System.NotSupportedException" /> aus.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="The type referred to by the current array type, pointer type, or &lt;see langword=&quot;ByRef&quot; /&gt; type; or &lt;see langword=&quot;null&quot; /&gt; if the current type is not an array type, is not a pointer type, and is not passed by reference.">Der Typ, auf den der aktuelle Arraytyp, Zeigertyp oder <see langword="ByRef" />-Typ verweist, oder <see langword="null" />, wenn der aktuelle Typ kein Arraytyp oder kein Zeigertyp ist und nicht als Verweis übergeben wird.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="name" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="name" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericArguments">
      <summary vsli:raw="Not valid for generic type parameters.">Für generische Typparameter ungültig.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not valid for generic type parameters.">Für generische Typparameter ungültig.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetGenericTypeDefinition">
      <summary vsli:raw="Not valid for generic type parameters.">Für generische Typparameter ungültig.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not valid for generic type parameters.">Für generische Typparameter ungültig.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetHashCode">
      <summary vsli:raw="Returns a 32-bit integer hash code for the current instance.">Gibt einen 32-Bit-Ganzzahl-Hashcode für die aktuelle Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit integer hash code.">Ein 32-Bit-Ganzzahl-Hashcode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="name" vsli:raw="The name of the interface.">Der Name der Schnittstelle.</param>
      <param name="ignoreCase" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search without regard for case; &lt;see langword=&quot;false&quot; /&gt; to make a case-sensitive search.">
        <see langword="true" />, um ohne Beachtung der Groß-/Kleinschreibung zu suchen. <see langword="false" />, um bei der Suche die Groß-/Kleinschreibung zu beachten.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="interfaceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the interface type for which the mapping is to be retrieved.">Ein <see cref="T:System.Type" />-Objekt, das den Schnittstellentyp darstellt, für den die Zuordnung abgerufen werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetInterfaces">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="name" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <param name="type" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="name" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <param name="bindingAttr" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="bindingAttr" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="name" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <param name="invokeAttr" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <param name="binder" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <param name="target" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <param name="args" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <param name="modifiers" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <param name="culture" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <param name="namedParameters" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsAssignableFrom(System.Type)">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; exception in all cases.">Löst in allen Fällen eine <see cref="T:System.NotSupportedException" />-Ausnahme aus.</summary>
      <param name="c" vsli:raw="The object to test.">Das zu überprüfende Objekt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; exception in all cases.">Löst in allen Fällen eine <see cref="T:System.NotSupportedException" />-Ausnahme aus.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="attributeType" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <param name="inherit" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.IsSubclassOf(System.Type)">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <param name="c" vsli:raw="Not supported.">Wird nicht unterstützt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType">
      <summary vsli:raw="Returns the type of a one-dimensional array whose element type is the generic type parameter.">Gibt den Typ eines eindimensionalen Arrays zurück, dessen Elementtyp der generische Typparameter ist.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of a one-dimensional array whose element type is the generic type parameter.">Ein <see cref="T:System.Type" />-Objekt, das den Typ eines eindimensionalen Arrays darstellt, dessen Elementtyp der generische Typparameter ist.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns the type of an array whose element type is the generic type parameter, with the specified number of dimensions.">Gibt den Typ eines Arrays, dessen Elementtyp der generische Typparameter ist, mit der angegebenen Anzahl von Dimensionen zurück.</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array.">Die Anzahl von Dimensionen für das Array.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is not a valid number of dimensions. For example, its value is less than 1.">
        <paramref name="rank" /> ist keine gültige Anzahl von Dimensionen. Beispielsweise ist der Wert kleiner als 1.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an array whose element type is the generic type parameter, with the specified number of dimensions.">Ein <see cref="T:System.Type" />-Objekt, das den Typ eines Arrays, dessen Elementtyp der generische Typparameter ist, mit der angegebenen Anzahl von Dimensionen darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current generic type parameter when passed as a reference parameter.">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das beim Übergeben als Verweisparameter den aktuellen generischen Typparameter darstellt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current generic type parameter when passed as a reference parameter.">Ein <see cref="T:System.Type" />-Objekt, das beim Übergeben als Verweisparameter den aktuellen generischen Typparameter darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakeGenericType(System.Type[])">
      <summary vsli:raw="Not valid for incomplete generic type parameters.">Für unvollständige generische Typparameter ungültig.</summary>
      <param name="typeArguments" vsli:raw="An array of type arguments.">Ein Array von Typargumenten.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="This method is invalid for incomplete generic type parameters.">Diese Methode ist für unvollständige generische Typparameter ungültig.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current generic type parameter.">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das einen Zeiger auf den aktuellen generischen Typparameter darstellt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a pointer to the current generic type parameter.">Ein <see cref="T:System.Type" />-Objekt, das einen Zeiger auf den aktuellen generischen Typparameter darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetBaseTypeConstraint(System.Type)">
      <summary vsli:raw="Sets the base type that a type must inherit in order to be substituted for the type parameter.">Legt den Basistyp fest, den ein Typ erben muss, um für den Typparameter ersetzt zu werden.</summary>
      <param name="baseTypeConstraint" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; that must be inherited by any type that is to be substituted for the type parameter.">Das <see cref="T:System.Type" />, das von jedem Typ geerbt werden muss, der für den Typparameter ersetzt werden muss.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Legt ein benutzerdefiniertes Attribut mithilfe eines angegebenen benutzerdefinierten Attribut-BLOBs fest.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attribute.">Ein Byte-BLOB, das das Attribut darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is a null reference.">
        <paramref name="con" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="binaryAttribute" /> ist ein NULL-Verweis.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Legt ein benutzerdefiniertes Attribut mithilfe eines benutzerdefinierten Attribut-Generators fest.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class that defines the custom attribute.">Eine Instanz einer Hilfsklasse zum Definieren des benutzerdefinierten Attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetGenericParameterAttributes(System.Reflection.GenericParameterAttributes)">
      <summary vsli:raw="Sets the variance characteristics and special constraints of the generic parameter, such as the parameterless constructor constraint.">Legt die Varianzmerkmale und besonderen Einschränkungen des generischen Parameters fest, z. B. die parameterlose Konstruktoreinschränkung.</summary>
      <param name="genericParameterAttributes" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; values that represent the variance characteristics and special constraints of the generic type parameter.">Eine bitweise Kombination von <see cref="T:System.Reflection.GenericParameterAttributes" />-Werten, die Varianzmerkmale und besondere Einschränkungen des generischen Typparameters darstellen.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.SetInterfaceConstraints(System.Type[])">
      <summary vsli:raw="Sets the interfaces a type must implement in order to be substituted for the type parameter.">Legt die Schnittstellen fest, die ein Typ implementieren muss, um durch den Typparameter ersetzt werden zu können.</summary>
      <param name="interfaceConstraints" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that represent the interfaces a type must implement in order to be substituted for the type parameter.">Ein Array von <see cref="T:System.Type" />-Objekten, die die Schnittstellen darstellen, die ein Typ implementieren muss, um durch den Typparameter ersetzt werden zu können.</param>
    </member>
    <member name="M:System.Reflection.Emit.GenericTypeParameterBuilder.ToString">
      <summary vsli:raw="Returns a string representation of the current generic type parameter.">Gibt eine Zeichenfolgendarstellung des aktuellen generischen Typparameters zurück.</summary>
      <returns vsli:raw="A string that contains the name of the generic type parameter.">Eine Zeichenfolge, die den Namen des generischen Typparameters enthält.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Assembly">
      <summary vsli:raw="Gets an &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.">Ruft ein <see cref="T:System.Reflection.Assembly" />-Objekt ab, das die dynamische Assembly darstellt, die die generische Typdefinition enthält, zu der der aktuelle Typparameter gehört.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; object representing the dynamic assembly that contains the generic type definition the current type parameter belongs to.">Ein <see cref="T:System.Reflection.Assembly" />-Objekt, das die dynamische Assembly darstellt, die die generische Typdefinition enthält, zu der der aktuelle Typparameter gehört.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">Ruft in allen Fällen <see langword="null" /> ab.</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">In allen Fällen ein NULL-Verweis (<see langword="Nothing" /> in Visual Basic).</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.BaseType">
      <summary vsli:raw="Gets the base type constraint of the current generic type parameter.">Ruft die Basistypeinschränkung des aktuellen generischen Typparameters ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the base type constraint of the generic type parameter, or &lt;see langword=&quot;null&quot; /&gt; if the type parameter has no base type constraint.">Ein <see cref="T:System.Type" />-Objekt, das die Basistypeinschränkung des generischen Typparameters oder <see langword="null" /> darstellt, wenn der Typparameter keine Basistypeinschränkung aufweist.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ContainsGenericParameters">
      <summary vsli:raw="Gets &lt;see langword=&quot;true&quot; /&gt; in all cases.">Ruft in allen Fällen <see langword="true" /> ab.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringMethod">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the declaring method, if the current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; represents a type parameter of a generic method.">Ruft eine <see cref="T:System.Reflection.MethodInfo" /> ab, die die deklarierende Methode darstellt, wenn der aktuelle <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> einen Typparameter einer generischen Methode darstellt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; that represents the declaring method, if the current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; represents a type parameter of a generic method; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Eine <see cref="T:System.Reflection.MethodInfo" />, die die deklarierende Methode darstellt, wenn der aktuelle <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> einen Typparameter einer generischen Methode darstellt, andernfalls <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.DeclaringType">
      <summary vsli:raw="Gets the generic type definition or generic method definition to which the generic type parameter belongs.">Ruft die generische Typdefinition oder generische Methodendefinition ab, zu der der generische Typparameter gehört.</summary>
      <returns vsli:raw="If the type parameter belongs to a generic type, a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing that generic type; if the type parameter belongs to a generic method, a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing that type that declared that generic method.">Wenn der Typparameter zu einem generischen Typ gehört, ein <see cref="T:System.Type" />-Objekt, das den generischen Typ darstellt. Wenn der Typparameter zu einer generischen Methode gehört, ein <see cref="T:System.Type" />-Objekt, das den Typ darstellt, der die generische Methode deklariert hat.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.FullName">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">Ruft in allen Fällen <see langword="null" /> ab.</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">In allen Fällen ein NULL-Verweis (<see langword="Nothing" /> in Visual Basic).</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterAttributes">
      <summary vsli:raw="Gets a combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; flags that describe the covariance and special constraints of the current generic type parameter.">Ruft eine Kombination von <see cref="T:System.Reflection.GenericParameterAttributes" />-Flags ab, die die Kovarianz und die speziellen Einschränkungen des aktuellen generischen Typparameters beschreiben.</summary>
      <returns vsli:raw="A bitwise combination of values that describes the covariance and special constraints of the current generic type parameter.">Eine bitweise Kombination von Werten, die die Kovarianz und die speziellen Einschränkungen des aktuellen generischen Typparameters beschreiben.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GenericParameterPosition">
      <summary vsli:raw="Gets the position of the type parameter in the type parameter list of the generic type or method that declared the parameter.">Ruft die Position des Typparameters in der Typparameterliste des generischen Typs oder der generischen Methode ab, von dem bzw. der der Parameter deklariert wurde.</summary>
      <returns vsli:raw="The position of the type parameter in the type parameter list of the generic type or method that declared the parameter.">Die Position des Typparameters in der Typparameterliste des generischen Typs oder der generischen Methode, von dem bzw. der der Parameter deklariert wurde.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.GUID">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">Ruft einen Wert ab, der angibt, ob dieses Objekt einen konstruierten generischen Typ darstellt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Objekt einen konstruierten generischen Typ darstellt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericParameter">
      <summary vsli:raw="Gets &lt;see langword=&quot;true&quot; /&gt; in all cases.">Ruft in allen Fällen <see langword="true" /> ab.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; in all cases.">
        <see langword="true" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericType">
      <summary vsli:raw="Returns &lt;see langword=&quot;false&quot; /&gt; in all cases.">Gibt immer <see langword="false" /> zurück.</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">
        <see langword="false" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsGenericTypeDefinition">
      <summary vsli:raw="Gets &lt;see langword=&quot;false&quot; /&gt; in all cases.">Ruft in allen Fällen <see langword="false" /> ab.</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">
        <see langword="false" /> in allen Fällen.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.IsVariableBoundArray" />
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Module">
      <summary vsli:raw="Gets the dynamic module that contains the generic type parameter.">Ruft das dynamische Modul ab, das den generischen Typparameter enthält.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; object that represents the dynamic module that contains the generic type parameter.">Ein <see cref="T:System.Reflection.Module" />-Objekt, das das dynamische Modul darstellt, das den generischen Typparameter enthält.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Name">
      <summary vsli:raw="Gets the name of the generic type parameter.">Ruft den Namen des generischen Typparameters ab.</summary>
      <returns vsli:raw="The name of the generic type parameter.">Der Name des generischen Typparameters.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.Namespace">
      <summary vsli:raw="Gets &lt;see langword=&quot;null&quot; /&gt; in all cases.">Ruft in allen Fällen <see langword="null" /> ab.</summary>
      <returns vsli:raw="A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) in all cases.">In allen Fällen ein NULL-Verweis (<see langword="Nothing" /> in Visual Basic).</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.ReflectedType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to obtain the &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt;.">Ruft das <see cref="T:System.Type" />-Objekt ab, mit dem der <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> abgerufen wurde.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to obtain the &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt;.">Das <see cref="T:System.Type" />-Objekt, mit dem der <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" /> abgerufen wurde.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.TypeHandle">
      <summary vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases.">In allen Fällen.</exception>
      <returns vsli:raw="Not supported for incomplete generic type parameters.">Wird für unvollständige generische Typparameter nicht unterstützt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.GenericTypeParameterBuilder.UnderlyingSystemType">
      <summary vsli:raw="Gets the current generic type parameter.">Ruft den aktuellen generischen Typparameter ab.</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; object.">Das aktuelle <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />-Objekt.</returns>
    </member>
    <member name="T:System.Reflection.Emit.MethodBuilder">
      <summary vsli:raw="Defines and represents a method (or constructor) on a dynamic class.">Definiert eine Methode (oder einen Konstruktor) für eine dynamischen Klasse und stellt diese(n) dar.</summary>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineGenericParameters(System.String[])">
      <summary vsli:raw="Sets the number of generic type parameters for the current method, specifies their names, and returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to define their constraints.">Legt die Anzahl von generischen Typparametern für die aktuelle Methode fest, gibt deren Namen an und gibt ein Array von <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />-Objekten zurück, das dazu verwendet werden kann, deren Einschränkungen zu definieren.</summary>
      <param name="names" vsli:raw="An array of strings that represent the names of the generic type parameters.">Ein Array von Zeichenfolgen, die die Namen der generischen Typparameter darstellen.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Generic type parameters have already been defined for this method.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method has been completed already.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)&quot; /&gt; method has been called for the current method.">Es wurden bereits generische Typparameter für diese Methode definiert.  
  
- oder - 
Die Methode wurde bereits abgeschlossen.  
  
- oder - 
Die <see cref="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)" />-Methode wurde für die aktuelle Methode aufgerufen.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="names" /> ist <see langword="null" />.  
  
- oder - 
Ein Element von <paramref name="names" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is an empty array.">
        <paramref name="names" /> ist ein leeres Array.</exception>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects representing the type parameters of the generic method.">Ein Array von <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />-Objekten, die die Typparameter der generischen Methode darstellen.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.DefineParameter(System.Int32,System.Reflection.ParameterAttributes,System.String)">
      <summary vsli:raw="Sets the parameter attributes and the name of a parameter of this method, or of the return value of this method. Returns a ParameterBuilder that can be used to apply custom attributes.">Legt die Parameterattribute und den Namen eines Parameters dieser Methode oder des Rückgabewerts dieser Methode fest. Gibt einen ParameterBuilder zurück, mit dem benutzerdefinierte Attribute angewendet werden können.</summary>
      <param name="position" vsli:raw="The position of the parameter in the parameter list. Parameters are indexed beginning with the number 1 for the first parameter; the number 0 represents the return value of the method.">Die Position des Parameters in der Parameterliste. Parameter werden beginnend mit der Zahl 1 (für den ersten Parameter) indiziert. Die Zahl 0 stellt den Rückgabewert der Methode dar.</param>
      <param name="attributes" vsli:raw="The parameter attributes of the parameter.">Die Parameterattribute des Parameters.</param>
      <param name="strParamName" vsli:raw="The name of the parameter. The name can be the null string.">Der Name des Parameters. Der Name kann aus einer NULL-Zeichenfolge bestehen.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The method has no parameters.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;position&quot; /&gt; is greater than the number of the method's parameters.">Die Methode hat keine Parameter.  
  
- oder - 
 <paramref name="position" /> ist kleiner als Null.  
  
- oder - 
 <paramref name="position" /> ist größer als die Anzahl der Parameter der Methode.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Der enthaltende Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.  
  
- oder - 
Für die aktuelle Methode ist die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
      <returns vsli:raw="Returns a &lt;see langword=&quot;ParameterBuilder&quot; /&gt; object that represents a parameter of this method or the return value of this method.">Gibt ein <see langword="ParameterBuilder" />-Objekt zurück, das einen Parameter dieser Methode oder den Rückgabewert dieser Methode darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Equals(System.Object)">
      <summary vsli:raw="Determines whether the given object is equal to this instance.">Bestimmt, ob das angegebene Objekt gleich dieser Instanz ist.</summary>
      <param name="obj" vsli:raw="The object to compare with this &lt;see langword=&quot;MethodBuilder&quot; /&gt; instance.">Das Objekt, das mit dieser <see langword="MethodBuilder" />-Instanz verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see langword=&quot;MethodBuilder&quot; /&gt; and is equal to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="obj" /> eine Instanz von <see langword="MethodBuilder" /> und gleich diesem Objekt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetBaseDefinition">
      <summary vsli:raw="Return the base implementation for a method.">Gibt die Basisimplementierung für eine Methode zurück.</summary>
      <returns vsli:raw="The base implementation of this method.">Die Basisimplementierung für diese Methode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this method.">Gibt alle für diese Methode definierten benutzerdefinierten Attribute zurück.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">Gibt an, ob die Vererbungskette dieses Members nach den benutzerdefinierten Attributen durchsucht werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Diese Methode wird zurzeit nicht unterstützt. Rufen Sie die Methode mithilfe von <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> ab, und rufen Sie <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> für das zurückgegebene <see cref="T:System.Reflection.MethodInfo" />-Objekt auf.</exception>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of this method.">Gibt ein Objektarray zurück, das alle benutzerdefinierten Attribute dieser Methode darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns the custom attributes identified by the given type.">Gibt die benutzerdefinierten Attribute zurück, die durch den angegebenen Typ identifiziert werden.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">Der benutzerdefinierte Attributtyp.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">Gibt an, ob die Vererbungskette dieses Members nach den benutzerdefinierten Attributen durchsucht werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Diese Methode wird zurzeit nicht unterstützt. Rufen Sie die Methode mithilfe von <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> ab, und rufen Sie <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> für das zurückgegebene <see cref="T:System.Reflection.MethodInfo" />-Objekt auf.</exception>
      <returns vsli:raw="Returns an array of objects representing the attributes of this method that are of type &lt;paramref name=&quot;attributeType&quot; /&gt;.">Gibt ein Array von Objekten zurück, die die Attribute dieser Methode mit dem Typ <paramref name="attributeType" /> darstellen.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericArguments">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that represent the type parameters of the method, if it is generic.">Gibt ein Array von <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />-Objekten zurück, die die Typparameter der Methode darstellen, wenn diese generisch ist.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects representing the type parameters, if the method is generic, or &lt;see langword=&quot;null&quot; /&gt; if the method is not generic.">Ein Array von <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />-Objekten, die für eine generische Methode die Typparameter oder <see langword="null" /> darstellen, wenn die Methode nicht generisch ist.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetGenericMethodDefinition">
      <summary vsli:raw="Returns this method.">Gibt diese Methode zurück.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is not generic. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property returns &lt;see langword=&quot;false&quot; /&gt;.">Die aktuelle Methode ist keine generische Methode. Das bedeutet, dass die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" />-Eigenschaft <see langword="false" /> zurückgibt.</exception>
      <returns vsli:raw="The current instance of &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">Die aktuelle Instanz von <see cref="T:System.Reflection.Emit.MethodBuilder" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetHashCode">
      <summary vsli:raw="Gets the hash code for this method.">Ruft den Hashcode für diese Methode ab.</summary>
      <returns vsli:raw="The hash code for this method.">Der Hashcode für diese Methode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator">
      <summary vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; for this method with a default Microsoft intermediate language (MSIL) stream size of 64 bytes.">Gibt einen <see langword="ILGenerator" /> mit der standardmäßigen MSIL-Streamgröße (Microsoft Intermediate Language) von 64 Bytes für diese Methode zurück.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method should not have a body because of its &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags, for example because it has the &lt;see cref=&quot;F:System.Reflection.MethodAttributes.PinvokeImpl&quot; /&gt; flag.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is a generic method, but not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Die Methode sollte beispielsweise aufgrund ihrer <see cref="T:System.Reflection.MethodAttributes" />- oder <see cref="T:System.Reflection.MethodImplAttributes" />-Flags keinen Text enthalten, weil sie das <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" />-Flag aufweist.  
  
- oder - 
Es handelt sich um eine generische Methode, aber nicht um eine generische Methodendefinition. Das bedeutet, die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" />-Eigenschaft ist <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
      <returns vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; object for this method.">Gibt ein <see langword="ILGenerator" />-Objekt für diese Methode zurück.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetILGenerator(System.Int32)">
      <summary vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; for this method with the specified Microsoft intermediate language (MSIL) stream size.">Gibt einen <see langword="ILGenerator" /> mit der angegebenen MSIL-Streamgröße (Microsoft Intermediate Language) für diese Methode zurück.</summary>
      <param name="size" vsli:raw="The size of the MSIL stream, in bytes.">Die Größe des MSIL-Streams in Bytes.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method should not have a body because of its &lt;see cref=&quot;T:System.Reflection.MethodAttributes&quot; /&gt; or &lt;see cref=&quot;T:System.Reflection.MethodImplAttributes&quot; /&gt; flags, for example because it has the &lt;see cref=&quot;F:System.Reflection.MethodAttributes.PinvokeImpl&quot; /&gt; flag.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is a generic method, but not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Die Methode sollte beispielsweise aufgrund ihrer <see cref="T:System.Reflection.MethodAttributes" />- oder <see cref="T:System.Reflection.MethodImplAttributes" />-Flags keinen Text enthalten, weil sie das <see cref="F:System.Reflection.MethodAttributes.PinvokeImpl" />-Flag aufweist.  
  
- oder - 
Es handelt sich um eine generische Methode, aber nicht um eine generische Methodendefinition. Das bedeutet, die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" />-Eigenschaft ist <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
      <returns vsli:raw="Returns an &lt;see langword=&quot;ILGenerator&quot; /&gt; object for this method.">Gibt ein <see langword="ILGenerator" />-Objekt für diese Methode zurück.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetMethodImplementationFlags">
      <summary vsli:raw="Returns the implementation flags for the method.">Gibt die Implementierungsflags für die Methode zurück.</summary>
      <returns vsli:raw="Returns the implementation flags for the method.">Gibt die Implementierungsflags für die Methode zurück.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.GetParameters">
      <summary vsli:raw="Returns the parameters of this method.">Gibt die Parameter dieser Methode zurück.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see langword=&quot;GetParameters&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Diese Methode wird zurzeit nicht unterstützt. Rufen Sie die Methode mithilfe von <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> ab, und rufen Sie <see langword="GetParameters" /> für das zurückgegebene <see cref="T:System.Reflection.MethodInfo" />-Objekt auf.</exception>
      <returns vsli:raw="An array of &lt;see langword=&quot;ParameterInfo&quot; /&gt; objects that represent the parameters of the method.">Ein Array von <see langword="ParameterInfo" />-Objekten, das die Parameter der Methode darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.Invoke(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Dynamically invokes the method reflected by this instance on the given object, passing along the specified parameters, and under the constraints of the given binder.">Ruft dynamisch und entsprechend den Einschränkungen des angegebenen Binders die Methode auf, die durch diese Instanz für das angegebene Objekt reflektiert wird. Übergibt dabei die angegebenen Parameter.</summary>
      <param name="obj" vsli:raw="The object on which to invoke the specified method. If the method is static, this parameter is ignored.">Das Objekt, für das die angegebene Methode aufgerufen werden soll. Wenn die Methode statisch ist, wird dieser Parameter ignoriert.</param>
      <param name="invokeAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> sein: <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of MemberInfo objects via reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. For more details, see &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Ein Objekt, das die Bindung, die Umwandlung von Argumenttypen, das Aufrufen von Membern und das Abrufen von MemberInfo-Objekten über Reflektion ermöglicht. Wenn „binder“ gleich <see langword="null" />ist, wird der Standardbinder verwendet. Weitere Details finden Sie unter <see cref="T:System.Reflection.Binder" />.</param>
      <param name="parameters" vsli:raw="An argument list. This is an array of arguments with the same number, order, and type as the parameters of the method to be invoked. If there are no parameters this should be &lt;see langword=&quot;null&quot; /&gt;.">Eine Argumentliste. Diese ist ein Array von Argumenten, die hinsichtlich Anzahl, Reihenfolge und Typ mit den Parametern der aufzurufenden Methode identisch sind. Wenn keine Parameter vorhanden sind, muss dies gleich <see langword="null" /> sein.</param>
      <param name="culture" vsli:raw="An instance of &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents 1000 to a &lt;see cref=&quot;T:System.Double&quot; /&gt; value, since 1000 is represented differently by different cultures.)">Eine Instanz von <see cref="T:System.Globalization.CultureInfo" /> für die Steuerung der Umwandlung von Typen. Ist diese gleich NULL, wird das <see cref="T:System.Globalization.CultureInfo" /> -Objekt des aktuellen Threads verwendet. (Dies ist z. B. erforderlich, um ein <see cref="T:System.String" />-Objekt, das 1000 darstellt, in einen <see cref="T:System.Double" />-Wert zu konvertieren, da 1000 in verschiedenen Kulturen unterschiedlich dargestellt wird.)</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Diese Methode wird zurzeit nicht unterstützt. Rufen Sie die Methode mithilfe von <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> ab, und rufen Sie <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> für das zurückgegebene <see cref="T:System.Reflection.MethodInfo" />-Objekt auf.</exception>
      <returns vsli:raw="Returns an object containing the return value of the invoked method.">Gibt ein Objekt zurück, das den Rückgabewert der aufgerufenen Methode enthält.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Checks if the specified custom attribute type is defined.">Überprüft, ob der Typ des angegebenen benutzerdefinierten Attributs definiert ist.</summary>
      <param name="attributeType" vsli:raw="The custom attribute type.">Der benutzerdefinierte Attributtyp.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the custom attributes.">Gibt an, ob die Vererbungskette dieses Members nach den benutzerdefinierten Attributen durchsucht werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Diese Methode wird zurzeit nicht unterstützt. Rufen Sie die Methode mithilfe von <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> ab, und rufen Sie <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> für das zurückgegebene <see cref="T:System.Reflection.MethodInfo" />-Objekt auf.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified custom attribute type is defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Typ des angegebenen benutzerdefinierten Attributs definiert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.MakeGenericMethod(System.Type[])">
      <summary vsli:raw="Returns a generic method constructed from the current generic method definition using the specified generic type arguments.">Gibt eine aus der aktuellen generischen Methodendefinition mit den angegebenen generischen Typargumenten konstruierte generische Methode zurück.</summary>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects that represent the type arguments for the generic method.">Ein Array von <see cref="T:System.Type" />-Objekten, die die Typargumente für die generische Methode darstellen.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; representing the generic method constructed from the current generic method definition using the specified generic type arguments.">Ein <see cref="T:System.Reflection.MethodInfo" />, das die aus der aktuellen generischen Methodendefinition mit den angegebenen generischen Typargumenten konstruierte generische Methode darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Legt ein benutzerdefiniertes Attribut mithilfe eines angegebenen benutzerdefinierten Attribut-BLOBs fest.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Ein Byte-BLOB, das die Attribute darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> oder <paramref name="binaryAttribute" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Für die aktuelle Methode ist die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Sets a custom attribute using a custom attribute builder.">Legt ein benutzerdefiniertes Attribut mithilfe eines benutzerdefinierten Attribut-Generators fest.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to describe the custom attribute.">Eine Instanz einer Hilfsklasse zum Beschreiben des benutzerdefinierten Attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Für die aktuelle Methode ist die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetImplementationFlags(System.Reflection.MethodImplAttributes)">
      <summary vsli:raw="Sets the implementation flags for this method.">Legt die Implementierungsflags für diese Methode fest.</summary>
      <param name="attributes" vsli:raw="The implementation flags to set.">Die festzulegenden Implementierungsflags.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Der enthaltende Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.  
  
- oder - 
Für die aktuelle Methode ist die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetParameters(System.Type[])">
      <summary vsli:raw="Sets the number and types of parameters for a method.">Legt die Anzahl und Typen der Parameter für eine Methode fest.</summary>
      <param name="parameterTypes" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the parameter types.">Ein Array von <see cref="T:System.Type" />-Objekten, die die Parametertypen darstellen.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Die aktuelle Methode ist generisch, die Methodendefinition ist aber nicht generisch. Das bedeutet, die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" />-Eigenschaft ist <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetReturnType(System.Type)">
      <summary vsli:raw="Sets the return type of the method.">Legt den Rückgabetyp der Methode fest.</summary>
      <param name="returnType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the return type of the method.">Ein <see cref="T:System.Type" />-Objekt, das den Rückgabetyp der Methode darstellt.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Die aktuelle Methode ist generisch, die Methodendefinition ist aber nicht generisch. Das bedeutet, die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" />-Eigenschaft ist <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.SetSignature(System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Sets the method signature, including the return type, the parameter types, and the required and optional custom modifiers of the return type and parameter types.">Legt die Methodensignatur fest, einschließlich des Rückgabetyps, der Parametertypen und der erforderlichen und optionalen benutzerdefinierten Modifizierer für den Rückgabetyp und die Parametertypen.</summary>
      <param name="returnType" vsli:raw="The return type of the method.">Der Rückgabetyp der Methode.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die erforderlichen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Methode darstellen. Wenn der Rückgabetyp keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" />an.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die optionalen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Methode darstellen. Wenn der Rückgabetyp keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">Die Typen der Parameter der Methode.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />. Wenn ein bestimmter Parameter keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an. Wenn keiner der Parameter erforderliche benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />. Wenn ein bestimmter Parameter keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an. Wenn keiner der Parameter optionale benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current method is generic, but is not a generic method definition. That is, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Die aktuelle Methode ist generisch, die Methodendefinition ist aber nicht generisch. Das bedeutet, die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" />-Eigenschaft ist <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.MethodBuilder.ToString">
      <summary vsli:raw="Returns this &lt;see langword=&quot;MethodBuilder&quot; /&gt; instance as a string.">Gibt diese <see langword="MethodBuilder" />-Instanz als Zeichenfolge zurück.</summary>
      <returns vsli:raw="Returns a string containing the name, attributes, method signature, exceptions, and local signature of this method followed by the current Microsoft intermediate language (MSIL) stream.">Gibt eine Zeichenfolge zurück, die den Namen, die Attribute, die Methodensignatur, die Ausnahmen und die lokale Signatur dieser Methode enthält, gefolgt vom aktuellen MSIL-Stream (Microsoft Intermediate Language).</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Attributes">
      <summary vsli:raw="Retrieves the attributes for this method.">Ruft die Attribute für diese Methode ab.</summary>
      <returns vsli:raw="Read-only. Retrieves the &lt;see langword=&quot;MethodAttributes&quot; /&gt; for this method.">Schreibgeschützt. Ruft die <see langword="MethodAttributes" /> für diese Methode ab.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.CallingConvention">
      <summary vsli:raw="Returns the calling convention of the method.">Gibt die Aufrufkonvention der Methode zurück.</summary>
      <returns vsli:raw="Read-only. The calling convention of the method.">Schreibgeschützt. Die Aufrufkonvention der Methode.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ContainsGenericParameters">
      <summary vsli:raw="Not supported for this type.">Für diesen Typ nicht unterstützt.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The invoked method is not supported in the base class.">Die aufgerufene Methode wird in der Basisklasse nicht unterstützt.</exception>
      <returns vsli:raw="Not supported.">Wird nicht unterstützt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declares this method.">Gibt den Typ zurück, der diese Methode deklariert.</summary>
      <returns vsli:raw="Read-only. The type that declares this method.">Schreibgeschützt. Der Typ, der diese Methode deklariert.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.InitLocals">
      <summary vsli:raw="Gets or sets a Boolean value that specifies whether the local variables in this method are zero initialized. The default value of this property is &lt;see langword=&quot;true&quot; /&gt;.">Ruft einen booleschen Wert ab, der angibt, ob die lokalen Variablen in dieser Methode mit 0 (null) initialisiert werden, oder legt diesen Wert fest. Der Standardwert dieser Eigenschaft ist <see langword="true" />.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current method, the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethod&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;. (Get or set.)">Für die aktuelle Methode ist die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition" />-Eigenschaft ist <see langword="false" />. (Abrufen oder festlegen.)</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the local variables in this method should be zero initialized; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die lokalen Variablen in der Methode mit 0 (null) initialisiert werden sollen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsConstructedGenericMethod" />
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethod">
      <summary vsli:raw="Gets a value indicating whether the method is a generic method.">Ruft einen Wert ab, der angibt, ob die Methode eine generische Methode ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the method is generic; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Methode generisch ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsGenericMethodDefinition">
      <summary vsli:raw="Gets a value indicating whether the current &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object represents the definition of a generic method.">Ruft einen Wert ab, der angibt, ob das aktuelle <see cref="T:System.Reflection.Emit.MethodBuilder" />-Objekt die Definition einer generischen Methode darstellt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object represents the definition of a generic method; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das aktuelle <see cref="T:System.Reflection.Emit.MethodBuilder" />-Objekt die Definition einer generischen Methode darstellt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityCritical">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen eine <see cref="T:System.NotSupportedException" /> aus.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">In allen Fällen. Diese Eigenschaft wird in dynamischen Assemblys nicht unterstützt.</exception>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen eine <see cref="T:System.NotSupportedException" /> aus.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecuritySafeCritical">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen eine <see cref="T:System.NotSupportedException" /> aus.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">In allen Fällen. Diese Eigenschaft wird in dynamischen Assemblys nicht unterstützt.</exception>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen eine <see cref="T:System.NotSupportedException" /> aus.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.IsSecurityTransparent">
      <summary vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen eine <see cref="T:System.NotSupportedException" /> aus.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="In all cases. This property is not supported in dynamic assemblies.">In allen Fällen. Diese Eigenschaft wird in dynamischen Assemblys nicht unterstützt.</exception>
      <returns vsli:raw="Throws a &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt; in all cases.">Löst in allen Fällen eine <see cref="T:System.NotSupportedException" /> aus.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.MethodHandle">
      <summary vsli:raw="Retrieves the internal handle for the method. Use this handle to access the underlying metadata handle.">Ruft das interne Handle für die Methode ab. Verwenden Sie dieses Handle, um auf das zugrunde liegende Metadatenhandle zuzugreifen.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported. Retrieve the method using &lt;see cref=&quot;M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])&quot; /&gt; and call &lt;see cref=&quot;P:System.Reflection.MethodBase.MethodHandle&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt;.">Diese Methode wird zurzeit nicht unterstützt. Rufen Sie die Methode mithilfe von <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> ab, und rufen Sie <see cref="P:System.Reflection.MethodBase.MethodHandle" /> für das zurückgegebene <see cref="T:System.Reflection.MethodInfo" />-Objekt auf.</exception>
      <returns vsli:raw="Read-only. The internal handle for the method. Use this handle to access the underlying metadata handle.">Schreibgeschützt. Das interne Handle für die Methode. Verwenden Sie dieses Handle, um auf das zugrunde liegende Metadatenhandle zuzugreifen.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Module">
      <summary vsli:raw="Gets the module in which the current method is being defined.">Ruft das Modul ab, in dem die aktuelle Methode definiert wird.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; in which the member represented by the current &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; is being defined.">Das <see cref="T:System.Reflection.Module" />, in dem der durch den aktuellen <see cref="T:System.Reflection.MemberInfo" /> dargestellte Member definiert wird.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.Name">
      <summary vsli:raw="Retrieves the name of this method.">Ruft den Namen dieser Methode ab.</summary>
      <returns vsli:raw="Read-only. Retrieves a string containing the simple name of this method.">Schreibgeschützt. Ruft eine Zeichenfolge ab, die den einfachen Namen dieser Methode enthält.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReflectedType">
      <summary vsli:raw="Retrieves the class that was used in reflection to obtain this object.">Ruft die Klasse ab, die bei der Reflektion verwendet wurde, um dieses Objekt abzurufen.</summary>
      <returns vsli:raw="Read-only. The type used to obtain this method.">Schreibgeschützt. Der Typ, der zum Abrufen dieser Methode verwendet wird.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnParameter">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; object that contains information about the return type of the method, such as whether the return type has custom modifiers.">Ruft ein <see cref="T:System.Reflection.ParameterInfo" />-Objekt ab, das Informationen zum Rückgabetyp der Methode enthält, z: B. ob der Rückgabetyp benutzerdefinierte Modifizierer hat.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The declaring type has not been created.">Der deklarierende Typ wurde nicht erstellt.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.ParameterInfo&quot; /&gt; object that contains information about the return type.">Ein <see cref="T:System.Reflection.ParameterInfo" />-Objekt, das Informationen zum Rückgabetyp enthält.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnType">
      <summary vsli:raw="Gets the return type of the method represented by this &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt;.">Ruft den Rückgabetyp der Methode ab, die von diesem <see cref="T:System.Reflection.Emit.MethodBuilder" /> dargestellt wird.</summary>
      <returns vsli:raw="The return type of the method.">Der Rückgabetyp der Methode.</returns>
    </member>
    <member name="P:System.Reflection.Emit.MethodBuilder.ReturnTypeCustomAttributes">
      <summary vsli:raw="Returns the custom attributes of the method's return type.">Gibt die benutzerdefinierten Attribute des Rückgabetyps der Methode zurück.</summary>
      <returns vsli:raw="Read-only. The custom attributes of the method's return type.">Schreibgeschützt. Die benutzerdefinierten Attribute des Rückgabetyps der Methode.</returns>
    </member>
    <member name="T:System.Reflection.Emit.ModuleBuilder">
      <summary vsli:raw="Defines and represents a module in a dynamic assembly.">Definiert eine stellt ein Modul in einer dynamischen Assembly dar.</summary>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions">
      <summary vsli:raw="Completes the global function definitions and global data definitions for this dynamic module.">Vervollständigt die globalen Funktions- und Datendefinitionen für dieses dynamische Modul.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method was called previously.">Diese Methode wurde bereits aufgerufen.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineEnum(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Defines an enumeration type that is a value type with a single non-static field called &lt;paramref name=&quot;value__&quot; /&gt; of the specified type.">Definiert einen Enumerationstyp, der ein Werttyp mit dem einzelnen, nicht statischen Feld <paramref name="value__" /> des angegebenen Typs ist.</summary>
      <param name="name" vsli:raw="The full path of the enumeration type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der vollständige Pfad des Enumerationstyps. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="visibility" vsli:raw="The type attributes for the enumeration. The attributes are any bits defined by &lt;see cref=&quot;F:System.Reflection.TypeAttributes.VisibilityMask&quot; /&gt;.">Die Typattribute für die Enumeration. Die Attribute sind beliebige, durch <see cref="F:System.Reflection.TypeAttributes.VisibilityMask" /> definierte Bits.</param>
      <param name="underlyingType" vsli:raw="The underlying type for the enumeration. This must be a built-in integer type.">Der zugrunde liegende Typ für die Enumeration. Dabei muss es sich um einen integrierten ganzzahligen Typ handeln.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Attributes other than visibility attributes are provided.  &#xA;  &#xA; -or-  &#xA;  &#xA; An enumeration with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; The visibility attributes do not match the scope of the enumeration. For example, &lt;see cref=&quot;F:System.Reflection.TypeAttributes.NestedPublic&quot; /&gt; is specified for &lt;paramref name=&quot;visibility&quot; /&gt;, but the enumeration is not a nested type.">Außer Sichtbarkeitsattributen werden andere Attribute bereitgestellt.  
  
- oder - 
Eine Enumeration mit dem angegebenen Namen ist in der übergeordneten Assembly dieses Moduls vorhanden.  
  
- oder - 
Die Sichtbarkeitsattribute entsprechen nicht dem Bereich der Enumeration. Beispielsweise ist <see cref="F:System.Reflection.TypeAttributes.NestedPublic" /> für <paramref name="visibility" /> angegeben, die Enumeration ist jedoch kein geschachtelter Typ.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The defined enumeration.">Die definierte Enumeration.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, calling convention, return type, and parameter types.">Definiert eine globale Methode mit den Angaben für Name, Attribute, Aufrufkonvention, Rückgabetyp und Parametertypen.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name der Methode. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Die Attribute der Methode. <paramref name="attributes" /> muss <see cref="F:System.Reflection.MethodAttributes.Static" /> enthalten.</param>
      <param name="callingConvention" vsli:raw="The calling convention for the method.">Die Aufrufkonvention für die Methode.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Der Rückgabetyp der Methode.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Die Typen der Parameter der Methode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">Die Methode ist nicht statisch. Das heißt, <paramref name="attributes" /> enthält nicht <see cref="F:System.Reflection.MethodAttributes.Static" />.  
  
- oder - 
Ein Element im <see cref="T:System.Type" />-Array ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> wurde bereits zuvor aufgerufen.</exception>
      <returns vsli:raw="The defined global method.">Die definierte globale Methode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, calling convention, return type, custom modifiers for the return type, parameter types, and custom modifiers for the parameter types.">Definiert eine globale Methode mit den Angaben für Name, Attribute, Aufrufkonvention, Rückgabetyp, benutzerdefinierte Modifizierer für den Rückgabetyp, Parametertypen und benutzerdefinierte Modifizierer für die Parametertypen.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded null characters.">Der Name der Methode. <paramref name="name" /> darf keine eingebetteten Nullzeichen enthalten.</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Die Attribute der Methode. <paramref name="attributes" /> muss <see cref="F:System.Reflection.MethodAttributes.Static" /> enthalten.</param>
      <param name="callingConvention" vsli:raw="The calling convention for the method.">Die Aufrufkonvention für die Methode.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Der Rückgabetyp der Methode.</param>
      <param name="requiredReturnTypeCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die erforderlichen benutzerdefinierten Modifizierer für den Rückgabetyp darstellen, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" /> oder <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Wenn der Rückgabetyp keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" />an.</param>
      <param name="optionalReturnTypeCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the return type, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt; or &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsBoxed&quot; /&gt;. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die optionalen benutzerdefinierten Modifizierer für den Rückgabetyp darstellen, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" /> oder <see cref="T:System.Runtime.CompilerServices.IsBoxed" />. Wenn der Rückgabetyp keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Die Typen der Parameter der Methode.</param>
      <param name="requiredParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter of the global method. If a particular argument has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the global method has no arguments, or if none of the arguments have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für den entsprechenden Parameter der globalen Methode dar. Wenn ein bestimmtes Argument über keine erforderlichen benutzerdefinierten Modifizierer verfügt, geben Sie anstelle eines Arrays von Typen <see langword="null" /> an. Wenn die globale Methode über keine Argumente oder keines der Argumente über erforderliche benutzerdefinierte Modifizierer verfügt, geben Sie anstelle eines Arrays von Arrays <see langword="null" /> an.</param>
      <param name="optionalParameterTypeCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter. If a particular argument has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If the global method has no arguments, or if none of the arguments have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar. Wenn ein bestimmtes Argument über keine optionalen benutzerdefinierten Modifizierer verfügt, geben Sie anstelle eines Arrays von Typen <see langword="null" /> an. Wenn die globale Methode über keine Argumente oder keines der Argumente über optionale benutzerdefinierte Modifizierer verfügt, geben Sie anstelle eines Arrays von Arrays <see langword="null" /> an.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">Die Methode ist nicht statisch. Das heißt, <paramref name="attributes" /> enthält nicht <see cref="F:System.Reflection.MethodAttributes.Static" />.  
  
- oder - 
Ein Element im <see cref="T:System.Type" />-Array ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; method has been previously called.">Die <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" />-Methode wurde zuvor aufgerufen.</exception>
      <returns vsli:raw="The defined global method.">Die definierte globale Methode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineGlobalMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Defines a global method with the specified name, attributes, return type, and parameter types.">Definiert eine globale Methode mit den Angaben für Name, Attribute, Rückgabetyp und Parametertypen.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name der Methode. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attributes" vsli:raw="The attributes of the method. &lt;paramref name=&quot;attributes&quot; /&gt; must include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.">Die Attribute der Methode. <paramref name="attributes" /> muss <see cref="F:System.Reflection.MethodAttributes.Static" /> enthalten.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Der Rückgabetyp der Methode.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Die Typen der Parameter der Methode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static. That is, &lt;paramref name=&quot;attributes&quot; /&gt; does not include &lt;see cref=&quot;F:System.Reflection.MethodAttributes.Static&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero  &#xA;  &#xA; -or-  &#xA;  &#xA; An element in the &lt;see cref=&quot;T:System.Type&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">Die Methode ist nicht statisch. Das heißt, <paramref name="attributes" /> enthält nicht <see cref="F:System.Reflection.MethodAttributes.Static" />.  
  
- oder - 
Die Länge von <paramref name="name" /> ist 0. 
- oder - 
Ein Element im <see cref="T:System.Type" />-Array ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> wurde bereits zuvor aufgerufen.</exception>
      <returns vsli:raw="The defined global method.">Die definierte globale Methode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an initialized data field in the .sdata section of the portable executable (PE) file.">Definiert ein initialisiertes Datenfeld im .sdata-Abschnitt der übertragbaren ausführbaren Datei (Portable Executable, PE).</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name, der zum Verweisen auf die Daten verwendet wird. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="data" vsli:raw="The binary large object (BLOB) of data.">Das BLOB (Binary Large Object) der Daten.</param>
      <param name="attributes" vsli:raw="The attributes for the field. The default is &lt;see langword=&quot;Static&quot; /&gt;.">Die Attribute für das Feld. Der Standardwert ist <see langword="Static" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;data&quot; /&gt; is less than or equal to zero or greater than or equal to 0x3f0000.">Die Länge von <paramref name="name" /> ist 0 (null).  
  
- oder - 
Die Größe von <paramref name="data" /> ist kleiner oder gleich 0 bzw. größer oder gleich 0x3f0000.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;data&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> oder <paramref name="data" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> wurde bereits zuvor aufgerufen.</exception>
      <returns vsli:raw="A field to reference the data.">Ein Feld zum Verweisen auf die Daten.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">Definiert eine <see langword="PInvoke" />-Methode mit den Angaben für den Namen, den Namen der DLL, in der die Methode definiert ist, für die Attribute der Methode, die Aufrufkonvention der Methode, den Rückgabetyp der Methode, die Parametertypen der Methode und die <see langword="PInvoke" />-Flags.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name der <see langword="PInvoke" />-Methode. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">Der Name der DLL, in der die <see langword="PInvoke" />-Methode definiert ist.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Die Attribute der Methode.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Die Aufrufkonvention der Methode.</param>
      <param name="returnType" vsli:raw="The method's return type.">Der Rückgabetyp der Methode.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Die Typen der Parameter der Methode.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">Die systemeigene Aufrufkonvention.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">Der systemeigene Zeichensatz der Methode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static or if the containing type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.">Die Methode ist nicht statisch, wenn der enthaltende Typ eine Schnittstelle ist.  
  
 - oder -  
  
 Die Methode ist abstrakt.  
  
 - oder -  
  
 Die Methode wurde bereits definiert.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> oder <paramref name="dllName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;">Der enthaltende Typ wurde bereits mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</exception>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">Die definierte <see langword="PInvoke" />-Methode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method with the specified name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">Definiert eine <see langword="PInvoke" />-Methode mit den Angaben für den Namen, den Namen der DLL, in der die Methode definiert ist, für die Attribute der Methode, die Aufrufkonvention der Methode, den Rückgabetyp der Methode, die Parametertypen der Methode und die <see langword="PInvoke" />-Flags.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name der <see langword="PInvoke" />-Methode. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">Der Name der DLL, in der die <see langword="PInvoke" />-Methode definiert ist.</param>
      <param name="entryName" vsli:raw="The name of the entry point in the DLL.">Der Name des Einstiegspunkts in die DLL.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Die Attribute der Methode.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Die Aufrufkonvention der Methode.</param>
      <param name="returnType" vsli:raw="The method's return type.">Der Rückgabetyp der Methode.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Die Typen der Parameter der Methode.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">Die systemeigene Aufrufkonvention.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">Der systemeigene Zeichensatz der Methode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static or if the containing type is an interface or if the method is abstract of if the method was previously defined.">Die Methode ist nicht statisch, der enthaltende Typ ist eine Schnittstelle, die Methode ist abstrakt, oder die Methode wurde bereits definiert.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> oder <paramref name="dllName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;">Der enthaltende Typ wurde bereits mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</exception>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">Die definierte <see langword="PInvoke" />-Methode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; for a private type with the specified name in this module.">Erstellt einen <see langword="TypeBuilder" /> für einen privaten Typ mit dem angegebenen Namen in diesem Modul.</summary>
      <param name="name" vsli:raw="The full path of the type, including the namespace. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der vollständige Pfad des Typs, einschließlich des Namespaces. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Ein Typ mit dem angegebenen Namen ist in der übergeordneten Assembly dieses Moduls vorhanden.  
  
 - oder -  
  
 Geschachtelte Typattribute werden für einen Typ festgelegt, der nicht geschachtelt ist.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A private type with the specified name.">Ein privater Typ mit dem angegebenen Namen.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name and the type attributes.">Erstellt einen <see langword="TypeBuilder" /> anhand der Angaben für den Typnamen und die Typattribute.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der vollständige Pfad des Typs. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">Die Attribute des definierten Typs.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Ein Typ mit dem angegebenen Namen ist in der übergeordneten Assembly dieses Moduls vorhanden.  
  
 - oder -  
  
 Geschachtelte Typattribute werden für einen Typ festgelegt, der nicht geschachtelt ist.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">Ein <see langword="TypeBuilder" />, der mit allen angeforderten Attributen erstellt wurde.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given type name, its attributes, and the type that the defined type extends.">Erstellt einen <see langword="TypeBuilder" /> anhand der Angaben für den Typnamen, die Attribute und den vom definierten Typ erweiterten Typ.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der vollständige Pfad des Typs. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attr" vsli:raw="The attribute to be associated with the type.">Das Attribut, das diesem Typ zugeordnet werden soll.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Der vom definierten Typ erweiterte Typ.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Ein Typ mit dem angegebenen Namen ist in der übergeordneten Assembly dieses Moduls vorhanden.  
  
 - oder -  
  
 Geschachtelte Typattribute werden für einen Typ festgelegt, der nicht geschachtelt ist.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">Ein <see langword="TypeBuilder" />, der mit allen angeforderten Attributen erstellt wurde.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, the attributes, the type that the defined type extends, and the total size of the type.">Erstellt einen <see langword="TypeBuilder" /> anhand der Angaben für den Typnamen, die Attribute, den vom definierten Typ erweiterten Typ und die Gesamtgröße des Typs.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der vollständige Pfad des Typs. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">Die Attribute des definierten Typs.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Der vom definierten Typ erweiterte Typ.</param>
      <param name="typesize" vsli:raw="The total size of the type.">Die Gesamtgröße des Typs.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Ein Typ mit dem angegebenen Namen ist in der übergeordneten Assembly dieses Moduls vorhanden.  
  
 - oder -  
  
 Geschachtelte Typattribute werden für einen Typ festgelegt, der nicht geschachtelt ist.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; object.">Ein <see langword="TypeBuilder" />-Objekt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, the attributes, the type that the defined type extends, and the packing size of the type.">Erstellt einen <see langword="TypeBuilder" /> anhand der Angaben für den Typnamen, die Attribute, den vom definierten Typ erweiterten Typ und die Komprimierungsgröße des Typs.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der vollständige Pfad des Typs. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">Die Attribute des definierten Typs.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Der vom definierten Typ erweiterte Typ.</param>
      <param name="packsize" vsli:raw="The packing size of the type.">Die Komprimierungsgröße des Typs.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Ein Typ mit dem angegebenen Namen ist in der übergeordneten Assembly dieses Moduls vorhanden.  
  
 - oder -  
  
 Geschachtelte Typattribute werden für einen Typ festgelegt, der nicht geschachtelt ist.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; object.">Ein <see langword="TypeBuilder" />-Objekt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, attributes, the type that the defined type extends, the packing size of the defined type, and the total size of the defined type.">Erstellt einen <see langword="TypeBuilder" /> anhand der Angaben für den Typnamen, die Attribute, den vom definierten Typ erweiterten Typ, die Komprimierungsgröße des definierten Typs und die Gesamtgröße des definierten Typs.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der vollständige Pfad des Typs. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attr" vsli:raw="The attributes of the defined type.">Die Attribute des definierten Typs.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Der vom definierten Typ erweiterte Typ.</param>
      <param name="packingSize" vsli:raw="The packing size of the type.">Die Komprimierungsgröße des Typs.</param>
      <param name="typesize" vsli:raw="The total size of the type.">Die Gesamtgröße des Typs.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Ein Typ mit dem angegebenen Namen ist in der übergeordneten Assembly dieses Moduls vorhanden.  
  
 - oder -  
  
 Geschachtelte Typattribute werden für einen Typ festgelegt, der nicht geschachtelt ist.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">Ein <see langword="TypeBuilder" />, der mit allen angeforderten Attributen erstellt wurde.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Constructs a &lt;see langword=&quot;TypeBuilder&quot; /&gt; given the type name, attributes, the type that the defined type extends, and the interfaces that the defined type implements.">Erstellt einen <see langword="TypeBuilder" /> anhand der Angaben für den Typnamen, die Attribute, den vom definierten Typ erweiterten Typ und den vom definierten Typ implementierten Schnittstellen.</summary>
      <param name="name" vsli:raw="The full path of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der vollständige Pfad des Typs. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attr" vsli:raw="The attributes to be associated with the type.">Die Attribute, die diesem Typ zugeordnet werden sollen.</param>
      <param name="parent" vsli:raw="The type that the defined type extends.">Der vom definierten Typ erweiterte Typ.</param>
      <param name="interfaces" vsli:raw="The list of interfaces that the type implements.">Die Liste der vom Typ implementierten Schnittstellen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="A type with the given name exists in the parent assembly of this module.  &#xA;  &#xA; -or-  &#xA;  &#xA; Nested type attributes are set on a type that is not nested.">Ein Typ mit dem angegebenen Namen ist in der übergeordneten Assembly dieses Moduls vorhanden.  
  
 - oder -  
  
 Geschachtelte Typattribute werden für einen Typ festgelegt, der nicht geschachtelt ist.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see langword=&quot;TypeBuilder&quot; /&gt; created with all of the requested attributes.">Ein <see langword="TypeBuilder" />, der mit allen angeforderten Attributen erstellt wurde.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an uninitialized data field in the .sdata section of the portable executable (PE) file.">Definiert ein nicht initialisiertes Datenfeld im .sdata-Abschnitt der übertragbaren ausführbaren Datei (Portable Executable, PE).</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name, der zum Verweisen auf die Daten verwendet wird. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="size" vsli:raw="The size of the data field.">Die Größe des Datenfelds.</param>
      <param name="attributes" vsli:raw="The attributes for the field.">Die Attribute für das Feld.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;size&quot; /&gt; is less than or equal to zero, or greater than or equal to 0x003f0000.">Die Länge von <paramref name="name" /> ist 0 (null).  
  
- oder - 
 <paramref name="size" /> ist kleiner gleich 0 oder größer gleich 0x003f0000.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.ModuleBuilder.CreateGlobalFunctions" /> wurde bereits zuvor aufgerufen.</exception>
      <returns vsli:raw="A field to reference the data.">Ein Feld zum Verweisen auf die Daten.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this instance is equal to the specified object.">Gibt einen Wert zurück, der angibt, ob diese Instanz gleich dem angegebenen Objekt ist.</summary>
      <param name="obj" vsli:raw="An object to compare with this instance, or &lt;see langword=&quot;null&quot; /&gt;.">Ein Objekt, das mit dieser Instanz verglichen werden soll, oder <see langword="null" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; equals the type and value of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="obj" /> dem Typ und dem Wert dieser Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetArrayMethod(System.Type,System.String,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Returns the named method on an array class.">Gibt die benannte Methode für eine Arrayklasse zurück.</summary>
      <param name="arrayClass" vsli:raw="An array class.">Eine Arrayklasse.</param>
      <param name="methodName" vsli:raw="The name of a method on the array class.">Der Name einer Methode für eine Arrayklasse.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Die Aufrufkonvention der Methode.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Der Rückgabetyp der Methode.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Die Typen der Parameter der Methode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;arrayClass&quot; /&gt; is not an array.">
        <paramref name="arrayClass" /> ist kein Array.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;arrayClass&quot; /&gt; or &lt;paramref name=&quot;methodName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="arrayClass" /> oder <paramref name="methodName" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The named method on an array class.">Die benannte Methode für eine Arrayklasse.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">Gibt die benutzerdefinierten Attribute zurück, die auf den aktuellen <see cref="T:System.Reflection.Emit.ModuleBuilder" /> angewendet wurden.</summary>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Dieses Argument wird für Objekte dieses Typs ignoriert.</param>
      <returns vsli:raw="An array that contains the custom attributes; the array is empty if there are no attributes.">Ein Array, das die benutzerdefinierten Attribute enthält. Das Array ist leer, wenn keine Attribute vorhanden sind.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, and that derive from a specified attribute type.">Gibt alle benutzerdefinierten Attribute zurück, die auf den aktuellen <see cref="T:System.Reflection.Emit.ModuleBuilder" /> angewendet wurden und die von einem angegebenen Attributtyp abgeleitet sind.</summary>
      <param name="attributeType" vsli:raw="The base type from which attributes derive.">Der Basistyp, von dem Attribute abgeleitet werden.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Dieses Argument wird für Objekte dieses Typs ignoriert.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" /> ist kein <see cref="T:System.Type" />-Objekt, das von der Laufzeit bereitgestellt wird. Beispielsweise ist <paramref name="attributeType" /> ein <see cref="T:System.Reflection.Emit.TypeBuilder" />-Objekt.</exception>
      <returns vsli:raw="An array that contains the custom attributes that are derived, at any level, from &lt;paramref name=&quot;attributeType&quot; /&gt;; the array is empty if there are no such attributes.">Ein Array, das die benutzerdefinierten Attribute enthält, die auf beliebiger Ebene von <paramref name="attributeType" /> abgeleitet sind. Das Array ist leer, wenn keine solchen Attribute vorhanden sind.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetCustomAttributesData">
      <summary vsli:raw="Returns information about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, expressed as &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects.">Gibt Informationen zu den Attributen zurück, die auf den aktuellen <see cref="T:System.Reflection.Emit.ModuleBuilder" />angewendet wurden. Diese sind als <see cref="T:System.Reflection.CustomAttributeData" /> -Objekte ausgedrückt.</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current module.">Eine generische Liste von <see cref="T:System.Reflection.CustomAttributeData" />-Objekten, die Daten zu den Attributen darstellen, die auf das aktuelle Modul angewendet wurden.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns a module-level field, defined in the .sdata region of the portable executable (PE) file, that has the specified name and binding attributes.">Gibt ein Feld auf Modulebene zurück, das im .sdata-Bereich der PE-Datei (Portable Executable) definiert ist und über den angegebenen Namen und die angegebenen Bindungsattribute verfügt.</summary>
      <param name="name" vsli:raw="The field name.">Der Feldname.</param>
      <param name="bindingAttr" vsli:raw="A combination of the &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">Eine Kombination der <see langword="BindingFlags" />-Bitflags zum Steuern der Suche.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="A field that has the specified name and binding attributes, or &lt;see langword=&quot;null&quot; /&gt; if the field does not exist.">Ein Feld mit dem angegebenen Namen und den angegebenen Bindungsattributen, oder <see langword="null" />, wenn das Feld nicht vorhanden ist.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all fields defined in the .sdata region of the portable executable (PE) file that match the specified binding flags.">Gibt alle im .sdata-Bereich der PE-Datei (Portable Executable) definierten Felder zurück, die den angegebenen Bindungsflags entsprechen.</summary>
      <param name="bindingFlags" vsli:raw="A combination of the &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">Eine Kombination der <see langword="BindingFlags" />-Bitflags zum Steuern der Suche.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="name" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="An array of fields that match the specified flags; the array is empty if no such fields exist.">Ein Array von Feldern, die den angegebenen Flags entsprechen. Das Array ist leer, wenn keine solchen Felder vorhanden sind.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance.">Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the methods that have been defined at the module level for the current &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;, and that match the specified binding flags.">Gibt alle Methoden zurück, die auf Modulebene für den aktuellen <see cref="T:System.Reflection.Emit.ModuleBuilder" /> definiert wurden und den angegebenen Bindungsflags entsprechen.</summary>
      <param name="bindingFlags" vsli:raw="A combination of &lt;see langword=&quot;BindingFlags&quot; /&gt; bit flags used to control the search.">Eine Kombination von <see langword="BindingFlags" />-Bitflags zum Steuern der Suche.</param>
      <returns vsli:raw="An array that contains all the module-level methods that match &lt;paramref name=&quot;bindingFlags&quot; /&gt;.">Ein Array, das alle Methoden auf Modulebene enthält, die <paramref name="bindingFlags" /> entsprechen.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetPEKind(System.Reflection.PortableExecutableKinds@,System.Reflection.ImageFileMachine@)">
      <summary vsli:raw="Gets a pair of values indicating the nature of the code in a module and the platform targeted by the module.">Ruft ein Paar von Werten ab, die die Merkmale des Codes in einem Modul und die Plattform angeben, die das Ziel dieses Moduls darstellt.</summary>
      <param name="peKind" vsli:raw="When this method returns, a combination of the &lt;see cref=&quot;T:System.Reflection.PortableExecutableKinds&quot; /&gt; values indicating the nature of the code in the module.">Diese Methode gibt eine Kombination der <see cref="T:System.Reflection.PortableExecutableKinds" />-Werte zurück, die die Merkmale des Codes im Modul angeben.</param>
      <param name="machine" vsli:raw="When this method returns, one of the &lt;see cref=&quot;T:System.Reflection.ImageFileMachine&quot; /&gt; values indicating the platform targeted by the module.">Diese Methode gibt einen der <see cref="T:System.Reflection.ImageFileMachine" />-Werte zurück, die die Plattform angeben, die das Ziel des Moduls darstellt.</param>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String)">
      <summary vsli:raw="Gets the named type defined in the module.">Ruft den im Modul definierten benannten Typ ab.</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">Der Name des abzurufenden <see cref="T:System.Type" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">Die Länge von <paramref name="className" /> ist 0 (null) oder größer als 1023.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">Der angeforderte <see cref="T:System.Type" /> ist nicht öffentlich, und der Aufrufer besitzt keine <see cref="T:System.Security.Permissions.ReflectionPermission" /> zum Reflektieren nicht öffentlicher Objekte außerhalb der aktuellen Assembly.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">Ein Klasseninitialisierer wird aufgerufen und löst eine Ausnahme aus.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="An error is encountered while loading the &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Beim Laden von <see cref="T:System.Type" /> ist ein Fehler aufgetreten.</exception>
      <returns vsli:raw="The requested type, if the type is defined in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Der angeforderte Typ, wenn der Typ in diesem Modul definiert wurde, andernfalls <see langword="null" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean)">
      <summary vsli:raw="Gets the named type defined in the module, optionally ignoring the case of the type name.">Ruft den im Modul definierten benannten Typ ab, wobei optional die Groß- und Kleinschreibung des Typnamens nicht berücksichtigt wird.</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">Der Name des abzurufenden <see cref="T:System.Type" />.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">Falls <see langword="true" />, wird Groß- und Kleinschreibung bei der Suche nicht berücksichtigt. Falls <see langword="false" />, wird Groß- und Kleinschreibung bei der Suche berücksichtigt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">Die Länge von <paramref name="className" /> ist 0 (null) oder größer als 1023.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">Der angeforderte <see cref="T:System.Type" /> ist nicht öffentlich, und der Aufrufer besitzt keine <see cref="T:System.Security.Permissions.ReflectionPermission" /> zum Reflektieren nicht öffentlicher Objekte außerhalb der aktuellen Assembly.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">Ein Klasseninitialisierer wird aufgerufen und löst eine Ausnahme aus.</exception>
      <returns vsli:raw="The requested type, if the type is defined in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Der angeforderte Typ, wenn der Typ in diesem Modul definiert wurde, andernfalls <see langword="null" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetType(System.String,System.Boolean,System.Boolean)">
      <summary vsli:raw="Gets the named type defined in the module, optionally ignoring the case of the type name. Optionally throws an exception if the type is not found.">Ruft den im Modul definierten benannten Typ ab, wobei optional die Groß- und Kleinschreibung des Typnamens nicht berücksichtigt wird. Löst optional eine Ausnahme aus, wenn der Typ nicht gefunden wird.</summary>
      <param name="className" vsli:raw="The name of the &lt;see cref=&quot;T:System.Type&quot; /&gt; to get.">Der Name des abzurufenden <see cref="T:System.Type" />.</param>
      <param name="throwOnError" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to throw an exception if the type cannot be found; &lt;see langword=&quot;false&quot; /&gt; to return &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="true" /> , damit eine Ausnahme ausgelöst wird, wenn der Typ nicht gefunden werden kann, <see langword="false" /> , damit <see langword="null" />zurückgegeben wird.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">Falls <see langword="true" />, wird Groß- und Kleinschreibung bei der Suche nicht berücksichtigt. Falls <see langword="false" />, wird Groß- und Kleinschreibung bei der Suche berücksichtigt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;className&quot; /&gt; is zero or is greater than 1023.">Die Länge von <paramref name="className" /> ist 0 (null) oder größer als 1023.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;className&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="className" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt; is non-public and the caller does not have &lt;see cref=&quot;T:System.Security.Permissions.ReflectionPermission&quot; /&gt; to reflect non-public objects outside the current assembly.">Der angeforderte <see cref="T:System.Type" /> ist nicht öffentlich, und der Aufrufer besitzt keine <see cref="T:System.Security.Permissions.ReflectionPermission" /> zum Reflektieren nicht öffentlicher Objekte außerhalb der aktuellen Assembly.</exception>
      <exception cref="T:System.Reflection.TargetInvocationException" vsli:raw="A class initializer is invoked and throws an exception.">Ein Klasseninitialisierer wird aufgerufen und löst eine Ausnahme aus.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="&lt;paramref name=&quot;throwOnError&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the specified type is not found.">
        <paramref name="throwOnError" /> ist <see langword="true" />, und der angegebene Typ wurde nicht gefunden.</exception>
      <returns vsli:raw="The specified type, if the type is declared in this module; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Der angegebene Typ, wenn der Typ in diesem Modul deklariert wurde, andernfalls <see langword="null" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.GetTypes">
      <summary vsli:raw="Returns all the classes defined within this module.">Gibt alle in diesem Modul definierten Klassen zurück.</summary>
      <exception cref="T:System.Reflection.ReflectionTypeLoadException" vsli:raw="One or more classes in a module could not be loaded.">Mindestens eine Klasse in einem Modul konnte nicht geladen werden.</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">Der Aufrufer verfügt nicht über die erforderliche Berechtigung.</exception>
      <returns vsli:raw="An array that contains the types defined within the module that is reflected by this instance.">Ein Array, das die Typen enthält, die in dem durch diese Instanz reflektierten Modul definiert sind.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Returns a value that indicates whether the specified attribute type has been applied to this module.">Gibt einen Wert zurück, der angibt, ob der angegebene Attributtyp auf dieses Modul angewendet wurde.</summary>
      <param name="attributeType" vsli:raw="The type of custom attribute to test for.">Der Typ des benutzerdefinierten Attributs, auf das getestet werden soll.</param>
      <param name="inherit" vsli:raw="This argument is ignored for objects of this type.">Dieses Argument wird für Objekte dieses Typs ignoriert.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not a &lt;see cref=&quot;T:System.Type&quot; /&gt; object supplied by the runtime. For example, &lt;paramref name=&quot;attributeType&quot; /&gt; is a &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object.">
        <paramref name="attributeType" /> ist kein <see cref="T:System.Type" />-Objekt, das von der Laufzeit bereitgestellt wird. Beispielsweise ist <paramref name="attributeType" /> ein <see cref="T:System.Reflection.Emit.TypeBuilder" />-Objekt.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt; have been applied to this module; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn eine oder mehrere Instanzen von <paramref name="attributeType" /> auf dieses Modul angewendet werden, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.IsResource">
      <summary vsli:raw="Gets a value indicating whether the object is a resource.">Ruft einen Wert ab, der angibt, ob das Objekt eine Ressource ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is a resource; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Objekt eine Ressource ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveField(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the field identified by the specified metadata token, in the context defined by the specified generic type parameters.">Gibt das vom angegebenen Metadatentoken angegebene Feld im von den angegebenen generischen Typparametern definierten Kontext zurück.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a field in the module.">Ein Metadatentoken, das ein Feld im Modul angibt.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">Ein Array von <see cref="T:System.Type" />-Objekten, die die generischen Typargumente des Typs darstellen, in dessen Gültigkeitsbereich sich das Token befindet, oder <see langword="null" />, wenn dieser Typ nicht generisch ist.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">Ein Array von <see cref="T:System.Type" />-Objekten, die die generischen Typargumente der Methode darstellen, in deren Gültigkeitsbereich sich das Token befindet, oder <see langword="null" />, wenn diese Methode nicht generisch ist.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a field in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; identifies a field whose parent &lt;see langword=&quot;TypeSpec&quot; /&gt; has a signature containing element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" /> ist im Bereich des aktuellen Moduls kein Token für ein Feld.  
  
- oder - 
 <paramref name="metadataToken" /> gibt ein Feld an, dessen übergeordnete <see langword="TypeSpec" /> eine Signatur mit Elementtyp <see langword="var" /> (Typparameter eines generischen Typs) oder <see langword="mvar" /> (Typparameter einer generischen Methode) aufweist, und die erforderlichen Argumente des generischen Typs wurden nicht für <paramref name="genericTypeArguments" /> und/oder <paramref name="genericMethodArguments" /> angegeben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> ist im Bereich des aktuellen Moduls kein gültiges Token.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field that is identified by the specified metadata token.">Ein <see cref="T:System.Reflection.FieldInfo" />-Objekt, das das durch das angegebene Metadatentoken angegebene Feld darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMember(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the type or member identified by the specified metadata token, in the context defined by the specified generic type parameters.">Gibt den vom angegebenen Metadatentoken angegebenen Typ oder Member im von den angegebenen generischen Typparametern definierten Kontext zurück.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a type or member in the module.">Ein Metadatentoken, das einen Typ oder Member im Modul angibt.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">Ein Array von <see cref="T:System.Type" />-Objekten, die die generischen Typargumente des Typs darstellen, in dessen Gültigkeitsbereich sich das Token befindet, oder <see langword="null" />, wenn dieser Typ nicht generisch ist.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">Ein Array von <see cref="T:System.Type" />-Objekten, die die generischen Typargumente der Methode darstellen, in deren Gültigkeitsbereich sich das Token befindet, oder <see langword="null" />, wenn diese Methode nicht generisch ist.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a type or member in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;MethodSpec&quot; /&gt; or &lt;see langword=&quot;TypeSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; identifies a property or event.">
        <paramref name="metadataToken" /> ist im Gültigkeitsbereich des aktuellen Moduls kein Token für einen Typ oder Member.  
  
- oder - 
 <paramref name="metadataToken" /> ist eine <see langword="MethodSpec" /> oder eine <see langword="TypeSpec" />, deren Signatur Elementtyp <see langword="var" /> (Typparameter eines generischen Typs) oder <see langword="mvar" /> (Typparameter einer generischen Methode) enthält, und die erforderlichen Argumente des generischen Typs wurden nicht für <paramref name="genericTypeArguments" /> und/oder <paramref name="genericMethodArguments" /> angegeben.  
  
- oder - 
 <paramref name="metadataToken" /> gibt eine Eigenschaft oder ein Ereignis an.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> ist im Bereich des aktuellen Moduls kein gültiges Token.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; object representing the type or member that is identified by the specified metadata token.">Ein <see cref="T:System.Reflection.MemberInfo" />-Objekt, das den Typ oder Member darstellt, der vom angegebenen Metadatentoken angegeben wird.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveMethod(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the method or constructor identified by the specified metadata token, in the context defined by the specified generic type parameters.">Gibt die vom angegebenen Metadatentoken angegebene Methode oder den vom angegebenen Metadatentoken angegebenen Konstruktor im von den angegebenen generischen Typparametern definierten Kontext zurück.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a method or constructor in the module.">Ein Metadatentoken, das eine Methode oder einen Konstruktor im Modul identifiziert.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">Ein Array von <see cref="T:System.Type" />-Objekten, die die generischen Typargumente des Typs darstellen, in dessen Gültigkeitsbereich sich das Token befindet, oder <see langword="null" />, wenn dieser Typ nicht generisch ist.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">Ein Array von <see cref="T:System.Type" />-Objekten, die die generischen Typargumente der Methode darstellen, in deren Gültigkeitsbereich sich das Token befindet, oder <see langword="null" />, wenn diese Methode nicht generisch ist.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a method or constructor in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;MethodSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" /> ist im Bereich des aktuellen Moduls kein Token für eine Methode oder einen Konstruktor.  
  
- oder - 
 <paramref name="metadataToken" /> ist eine <see langword="MethodSpec" />, deren Signatur Elementtyp <see langword="var" /> (Typparameter eines generischen Typs) oder <see langword="mvar" /> (Typparameter einer generischen Methode) enthält, und die erforderlichen Argumente des generischen Typs wurden für <paramref name="genericTypeArguments" /> und/oder <paramref name="genericMethodArguments" /> nicht angegeben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> ist im Bereich des aktuellen Moduls kein gültiges Token.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; object representing the method that is identified by the specified metadata token.">Ein <see cref="T:System.Reflection.MethodBase" />-Objekt, das die Methode darstellt, die durch das angegebene Metadatentoken angegeben wird.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveSignature(System.Int32)">
      <summary vsli:raw="Returns the signature blob identified by a metadata token.">Gibt das von einem Metadatentoken angegebene Signatur-BLOB zurück.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a signature in the module.">Ein Metadatentoken, das eine Signatur im Modul angibt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid &lt;see langword=&quot;MemberRef&quot; /&gt;, &lt;see langword=&quot;MethodDef&quot; /&gt;, &lt;see langword=&quot;TypeSpec&quot; /&gt;, signature, or &lt;see langword=&quot;FieldDef&quot; /&gt; token in the scope of the current module.">
        <paramref name="metadataToken" /> ist keine gültige <see langword="MemberRef" />, <see langword="MethodDef" />, <see langword="TypeSpec" /> oder Signatur bzw. kein gültiges <see langword="FieldDef" />-Token im Bereich des aktuellen Moduls.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> ist im Bereich des aktuellen Moduls kein gültiges Token.</exception>
      <returns vsli:raw="An array of bytes representing the signature blob.">Ein Bytearray, das den Signatur-BLOB darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveString(System.Int32)">
      <summary vsli:raw="Returns the string identified by the specified metadata token.">Gibt die vom angegebenen Metadatentoken angegebene Zeichenfolge zurück.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a string in the string heap of the module.">Ein Metadatentoken, das eine Zeichenfolge im Zeichenfolgenheap des Moduls angibt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a string in the scope of the current module.">
        <paramref name="metadataToken" /> ist im Gültigkeitsbereich des aktuellen Moduls kein Token für eine Zeichenfolge.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> ist im Bereich des aktuellen Moduls kein gültiges Token.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing a string value from the metadata string heap.">Ein <see cref="T:System.String" />, der einen Zeichenfolgenwert aus dem Metadaten-Zeichenfolgenheap enthält.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.ResolveType(System.Int32,System.Type[],System.Type[])">
      <summary vsli:raw="Returns the type identified by the specified metadata token, in the context defined by the specified generic type parameters.">Gibt den vom angegebenen Metadatentoken angegebenen Typ im von den angegebenen generischen Typparametern definierten Kontext zurück.</summary>
      <param name="metadataToken" vsli:raw="A metadata token that identifies a type in the module.">Ein Metadatentoken, das einen Typ im Modul identifiziert.</param>
      <param name="genericTypeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the type where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that type is not generic.">Ein Array von <see cref="T:System.Type" />-Objekten, die die generischen Typargumente des Typs darstellen, in dessen Gültigkeitsbereich sich das Token befindet, oder <see langword="null" />, wenn dieser Typ nicht generisch ist.</param>
      <param name="genericMethodArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the generic type arguments of the method where the token is in scope, or &lt;see langword=&quot;null&quot; /&gt; if that method is not generic.">Ein Array von <see cref="T:System.Type" />-Objekten, die die generischen Typargumente der Methode darstellen, in deren Gültigkeitsbereich sich das Token befindet, oder <see langword="null" />, wenn diese Methode nicht generisch ist.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a token for a type in the scope of the current module.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;metadataToken&quot; /&gt; is a &lt;see langword=&quot;TypeSpec&quot; /&gt; whose signature contains element type &lt;see langword=&quot;var&quot; /&gt; (a type parameter of a generic type) or &lt;see langword=&quot;mvar&quot; /&gt; (a type parameter of a generic method), and the necessary generic type arguments were not supplied for either or both of &lt;paramref name=&quot;genericTypeArguments&quot; /&gt; and &lt;paramref name=&quot;genericMethodArguments&quot; /&gt;.">
        <paramref name="metadataToken" /> ist im Bereich des aktuellen Moduls kein Token für einen Typ.  
  
- oder - 
 <paramref name="metadataToken" /> ist eine <see langword="TypeSpec" />, deren Signatur Elementtyp <see langword="var" /> (Typparameter eines generischen Typs) oder <see langword="mvar" /> (Typparameter einer generischen Methode) enthält, und die erforderlichen Argumente des generischen Typs wurden für <paramref name="genericTypeArguments" /> und/oder <paramref name="genericMethodArguments" /> nicht angegeben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;metadataToken&quot; /&gt; is not a valid token in the scope of the current module.">
        <paramref name="metadataToken" /> ist im Bereich des aktuellen Moduls kein gültiges Token.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the type that is identified by the specified metadata token.">Ein <see cref="T:System.Type" />-Objekt, das den Typ darstellt, der durch das angegebene Metadatentoken angegeben wird.</returns>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Applies a custom attribute to this module by using a specified binary large object (BLOB) that represents the attribute.">Wendet ein benutzerdefiniertes Attribut auf dieses Modul an, indem ein angegebenes BLOB (Binary Large Object) verwendet wird, das das Attribut darstellt.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="binaryAttribute" vsli:raw="A byte BLOB representing the attribute.">Ein Byte-BLOB, das das Attribut darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> oder <paramref name="binaryAttribute" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.ModuleBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Applies a custom attribute to this module by using a custom attribute builder.">Wendet ein benutzerdefiniertes Attribut auf dieses Modul an, indem ein Generator für benutzerdefinierte Attribute verwendet wird.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class that specifies the custom attribute to apply.">Eine Instanz einer Hilfsklasse, die das anzuwendende benutzerdefinierte Attribut angibt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> ist <see langword="null" />.</exception>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Assembly">
      <summary vsli:raw="Gets the dynamic assembly that defined this instance of &lt;see cref=&quot;T:System.Reflection.Emit.ModuleBuilder&quot; /&gt;.">Ruft die dynamische Assembly ab, die diese Instanz von <see cref="T:System.Reflection.Emit.ModuleBuilder" /> definiert hat.</summary>
      <returns vsli:raw="The dynamic assembly that defined the current dynamic module.">Die dynamische Assembly, die das aktuelle dynamische Modul definiert hat.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.FullyQualifiedName">
      <summary vsli:raw="Gets a &lt;see langword=&quot;String&quot; /&gt; representing the fully qualified name and path to this module.">Ruft einen <see langword="String" /> ab, der den vollqualifizierten Namen und den Pfad zu diesem Modul darstellt.</summary>
      <returns vsli:raw="The fully qualified module name.">Der vollqualifizierte Modulname.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MDStreamVersion">
      <summary vsli:raw="Gets the metadata stream version.">Ruft die Metadatenstreamversion ab.</summary>
      <returns vsli:raw="A 32-bit integer representing the metadata stream version. The high-order two bytes represent the major version number, and the low-order two bytes represent the minor version number.">Eine 32-Bit-Ganzzahl, die die Metadatenstreamversion darstellt. Die beiden höherwertigen Bytes stellen die Hauptversionsnummer dar und die beiden niederwertigen Bytes die Nebenversionsnummer.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.MetadataToken">
      <summary vsli:raw="Gets a token that identifies the current dynamic module in metadata.">Ruft ein Token ab, das das aktuelle dynamische Modul in den Metadaten angibt.</summary>
      <returns vsli:raw="An integer token that identifies the current module in metadata.">Ein Ganzzahltoken, das das aktuelle Modul in den Metadaten angibt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ModuleVersionId">
      <summary vsli:raw="Gets a universally unique identifier (UUID) that can be used to distinguish between two versions of a module.">Ruft einen universellen eindeutigen Bezeichner (Universally Unique Identifier, UUID) ab, der zur Unterscheidung zwischen zwei Versionen eines Moduls verwendet werden kann.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that can be used to distinguish between two versions of a module.">Eine <see cref="T:System.Guid" />, die zur Unterscheidung zwischen zwei Versionen eines Moduls verwendet werden kann.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.Name">
      <summary vsli:raw="A string that indicates that this is an in-memory module.">Eine Zeichenfolge, die angibt, dass es sich um ein speicherinternes Modul handelt.</summary>
      <returns vsli:raw="Text that indicates that this is an in-memory module.">Text, der angibt, dass es sich um ein speicherinternes Modul handelt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.ModuleBuilder.ScopeName">
      <summary vsli:raw="Gets a string that represents the name of the dynamic module.">Ruft eine Zeichenfolge ab, die den Namen des dynamischen Moduls darstellt.</summary>
      <returns vsli:raw="The name of the dynamic module.">Der Name des dynamischen Moduls.</returns>
    </member>
    <member name="T:System.Reflection.Emit.PropertyBuilder">
      <summary vsli:raw="Defines the properties for a type.">Definiert die Eigenschaften für einen Typ.</summary>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.AddOtherMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Adds one of the other methods associated with this property.">Fügt eine der anderen Methoden hinzu, die dieser Eigenschaft zugeordnet sind.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the other method.">Ein <see langword="MethodBuilder" />-Objekt, das die andere Methode darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde für den einschließenden Typ aufgerufen.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetAccessors(System.Boolean)">
      <summary vsli:raw="Returns an array of the public and non-public &lt;see langword=&quot;get&quot; /&gt; and &lt;see langword=&quot;set&quot; /&gt; accessors on this property.">Gibt ein Array der öffentlichen und nicht öffentlichen <see langword="get" />-Accessoren und <see langword="set" />-Accessoren für diese Eigenschaft zurück.</summary>
      <param name="nonPublic" vsli:raw="Indicates whether non-public methods should be returned in the &lt;see langword=&quot;MethodInfo&quot; /&gt; array. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Gibt an, ob im <see langword="MethodInfo" />-Array nicht öffentliche Methoden zurückgegeben werden sollen. <see langword="true" />, wenn nicht öffentliche Methoden eingeschlossen werden sollen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
      <returns vsli:raw="An array of type &lt;see langword=&quot;MethodInfo&quot; /&gt; containing the matching public or non-public accessors, or an empty array if matching accessors do not exist on this property.">Ein Array vom Typ <see langword="MethodInfo" /> mit den passenden öffentlichen und nicht öffentlichen Accessoren bzw. ein leeres Array, wenn für diese Eigenschaft keine übereinstimmenden Accessoren vorhanden sind.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns an array of all the custom attributes for this property.">Gibt ein Array aller benutzerdefinierten Attribute für diese Eigenschaft zurück.</summary>
      <param name="inherit" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, walks up this property's inheritance chain to find the custom attributes.">Wenn <see langword="true" />, wird die Vererbungskette dieser Eigenschaft in Aufwärtsrichtung durchlaufen und nach benutzerdefinierten Attributen durchsucht.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
      <returns vsli:raw="An array of all the custom attributes.">Ein Array aller benutzerdefinierten Attribute.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns an array of custom attributes identified by &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Gibt ein Array benutzerdefinierter Attribute zurück, die durch <see cref="T:System.Type" /> bezeichnet werden.</summary>
      <param name="attributeType" vsli:raw="An array of custom attributes identified by type.">Ein Array benutzerdefinierter Attribute, die durch den Typ bezeichnet werden.</param>
      <param name="inherit" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, walks up this property's inheritance chain to find the custom attributes.">Wenn <see langword="true" />, wird die Vererbungskette dieser Eigenschaft in Aufwärtsrichtung durchlaufen und nach benutzerdefinierten Attributen durchsucht.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
      <returns vsli:raw="An array of custom attributes defined on this reflected member, or &lt;see langword=&quot;null&quot; /&gt; if no attributes are defined on this member.">Ein Array benutzerdefinierter Attribute, die für diesen reflektierten Member definiert sind, oder <see langword="null" />, wenn keine Attribute für diesen Member definiert sind.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetGetMethod(System.Boolean)">
      <summary vsli:raw="Returns the public and non-public get accessor for this property.">Gibt den öffentlichen und nicht öffentlichen Get-Accessor für diese Eigenschaft zurück.</summary>
      <param name="nonPublic" vsli:raw="Indicates whether non-public get accessors should be returned. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Gibt an, ob nicht öffentliche get-Accessoren zurückgegeben werden sollen. <see langword="true" />, wenn nicht öffentliche Methoden eingeschlossen werden sollen, andernfalls <see langword="false" />.</param>
      <returns vsli:raw="A &lt;see langword=&quot;MethodInfo&quot; /&gt; object representing the get accessor for this property, if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;. Returns &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt; and the get accessor is non-public, or if &lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; but no get accessors exist.">Ein <see langword="MethodInfo" />-Objekt, das den Get-Accessor für diese Eigenschaft darstellt, wenn <paramref name="nonPublic" /><see langword="true" /> ist. Gibt <see langword="null" /> zurück, wenn <paramref name="nonPublic" /><see langword="false" /> ist und der Get-Accessor nicht öffentlich ist, oder wenn <paramref name="nonPublic" /><see langword="true" /> ist, aber kein Get-Accessor vorhanden ist.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetIndexParameters">
      <summary vsli:raw="Returns an array of all the index parameters for the property.">Gibt ein Array aller Indexparameter für diese Eigenschaft zurück.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
      <returns vsli:raw="An array of type &lt;see langword=&quot;ParameterInfo&quot; /&gt; containing the parameters for the indexes.">Ein Array vom Typ <see langword="ParameterInfo" />, das die Parameter für die Indizes enthält.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetSetMethod(System.Boolean)">
      <summary vsli:raw="Returns the set accessor for this property.">Gibt den festgelegten Accessor für diese Eigenschaft zurück.</summary>
      <param name="nonPublic" vsli:raw="Indicates whether the accessor should be returned if it is non-public. &lt;see langword=&quot;true&quot; /&gt; if non-public methods are to be included; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Gibt an, ob die Zugriffsmethode zurückgegeben werden soll, wenn sie nicht öffentlich ist. <see langword="true" />, wenn nicht öffentliche Methoden eingeschlossen werden sollen, andernfalls <see langword="false" />.</param>
      <returns vsli:raw="The property's &lt;see langword=&quot;Set&quot; /&gt; method, or &lt;see langword=&quot;null&quot; /&gt;, as shown in the following table.  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Condition&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object representing the Set method for this property.&lt;/term&gt;&lt;description&gt; The set accessor is public.  &#xA;  &#xA; &lt;paramref name=&quot;nonPublic&quot; /&gt; is true and non-public methods can be returned.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; null&lt;/term&gt;&lt;description&gt;&lt;paramref name=&quot;nonPublic&quot; /&gt; is true, but the property is read-only.  &#xA;  &#xA; &lt;paramref name=&quot;nonPublic&quot; /&gt; is false and the set accessor is non-public.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Die <see langword="Set" />-Methode der Eigenschaft, oder <see langword="null" />, wie in der folgenden Tabelle gezeigt.  
  
 <list type="table"><listheader><term> Wert</term><description> Bedingung</description></listheader><item><term> Ein <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die Set-Methode für diese Eigenschaft darstellt.</term><description> Der Set-Accessor ist öffentlich.  
  
 <paramref name="nonPublic" /> ist „true“, und nicht öffentliche Methoden können zurückgegeben werden.</description></item><item><term> NULL</term><description><paramref name="nonPublic" /> ist „true“, die Eigenschaft ist jedoch schreibgeschützt.  
  
 <paramref name="nonPublic" /> ist „false“, und der Set-Accessor ist nicht öffentlich.</description></item></list></returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Object[])">
      <summary vsli:raw="Gets the value of the indexed property by calling the property's getter method.">Ruft durch Aufrufen der Get-Methode der Eigenschaft den Wert der indizierten Eigenschaft ab.</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">Das Objekt, dessen Eigenschaftswert zurückgegeben wird.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">Optionale Indexwerte für indizierte Eigenschaften. Dieser Wert sollte bei nicht indizierten Eigenschaften <see langword="null" /> sein.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
      <returns vsli:raw="The value of the specified indexed property.">Der Wert der angegebenen indizierten Eigenschaft.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.GetValue(System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Gets the value of a property having the specified binding, index, and &lt;see langword=&quot;CultureInfo&quot; /&gt;.">Ruft den Wert einer Eigenschaft mit den Angaben für Bindung, Index und <see langword="CultureInfo" /> ab.</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">Das Objekt, dessen Eigenschaftswert zurückgegeben wird.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;CreateInstance&quot; /&gt;, &lt;see langword=&quot;Static&quot; /&gt;, &lt;see langword=&quot;GetField&quot; /&gt;, &lt;see langword=&quot;SetField&quot; /&gt;, &lt;see langword=&quot;GetProperty&quot; /&gt;, or &lt;see langword=&quot;SetProperty&quot; /&gt;. A suitable invocation attribute must be specified. If a static member is to be invoked, the &lt;see langword=&quot;Static&quot; /&gt; flag of &lt;see langword=&quot;BindingFlags&quot; /&gt; must be set.">Das Attribut für den Aufruf. Hierbei muss es sich um ein Bitflag aus <see langword="BindingFlags" /> handeln: <see langword="InvokeMethod" />, <see langword="CreateInstance" /><see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> oder <see langword="SetProperty" />. Es muss ein geeignetes Aufrufattribut angegeben werden. Wenn ein statischer Member aufgerufen werden soll, muss das <see langword="Static" />-Flag von <see langword="BindingFlags" /> festgelegt werden.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used.">Ein Objekt, das die Bindung, die Umwandlung von Argumenttypen, das Aufrufen von Membern und das Abrufen von <see langword="MemberInfo" />-Objekten über Reflektion ermöglicht. Wenn <paramref name="binder" /> den Wert <see langword="null" /> aufweist, wird der Standardbinder verwendet.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">Optionale Indexwerte für indizierte Eigenschaften. Dieser Wert sollte bei nicht indizierten Eigenschaften <see langword="null" /> sein.</param>
      <param name="culture" vsli:raw="The &lt;see langword=&quot;CultureInfo&quot; /&gt; object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the &lt;see langword=&quot;CultureInfo.Parent&quot; /&gt; method will be called successively in search of a match. If this value is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see langword=&quot;CultureInfo&quot; /&gt; is obtained from the &lt;see langword=&quot;CultureInfo.CurrentUICulture&quot; /&gt; property.">Das <see langword="CultureInfo" />-Objekt, das die Kultur darstellt, für die die Ressource lokalisiert werden soll. Beachten Sie, dass die <see langword="CultureInfo.Parent" />-Methode in der Folge für die Suche nach einer Übereinstimmung aufgerufen wird, wenn die Ressource nicht für diese Kultur lokalisiert wurde. Wenn dieser Wert <see langword="null" /> ist, wird <see langword="CultureInfo" /> aus der <see langword="CultureInfo.CurrentUICulture" />-Eigenschaft abgerufen.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
      <returns vsli:raw="The property value for &lt;paramref name=&quot;obj&quot; /&gt;.">Der Eigenschaftswert für <paramref name="obj" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this property.">Gibt an, ob für diese Eigenschaft eine oder mehrere Instanzen von <paramref name="attributeType" /> definiert sind.</summary>
      <param name="attributeType" vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object to which the custom attributes are applied.">Das <see langword="Type" />-Objekt, auf das die benutzerdefinierten Attribute angewendet werden.</param>
      <param name="inherit" vsli:raw="Specifies whether to walk up this property's inheritance chain to find the custom attributes.">Gibt an, ob für die Suche nach benutzerdefinierten Attributen die Vererbungskette dieser Eigenschaft in Aufwärtsrichtung durchlaufen werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instance of &lt;paramref name=&quot;attributeType&quot; /&gt; is defined on this property; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn eine oder mehrere Instanzen von <paramref name="attributeType" /> für diese Eigenschaft definiert sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetConstant(System.Object)">
      <summary vsli:raw="Sets the default value of this property.">Legt den Standardwert dieser Eigenschaft fest.</summary>
      <param name="defaultValue" vsli:raw="The default value of this property.">Der Standardwert dieser Eigenschaft.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde für den einschließenden Typ aufgerufen.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The property is not one of the supported types.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of &lt;paramref name=&quot;defaultValue&quot; /&gt; does not match the type of the property.  &#xA;  &#xA; -or-  &#xA;  &#xA; The property is of type &lt;see cref=&quot;T:System.Object&quot; /&gt; or other reference type, &lt;paramref name=&quot;defaultValue&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt;, and the value cannot be assigned to the reference type.">Die Eigenschaft weist keinen unterstützten Typ auf.  
  
- oder - 
Der Typ von <paramref name="defaultValue" /> entspricht nicht dem Typ der Eigenschaft.  
  
- oder - 
Die Eigenschaft weist den Typ <see cref="T:System.Object" /> oder einen anderen Verweistyp auf, <paramref name="defaultValue" /> ist nicht <see langword="null" />, und der Wert kann nicht dem Verweistyp zugewiesen werden.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Set a custom attribute using a specified custom attribute blob.">Legt ein benutzerdefiniertes Attribut mithilfe eines angegebenen benutzerdefinierten Attribut-BLOBs fest.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Ein Byte-BLOB, das die Attribute darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> oder <paramref name="binaryAttribute" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde für den einschließenden Typ aufgerufen.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Legt ein benutzerdefiniertes Attribut mithilfe eines benutzerdefinierten Attribut-Generators fest.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Eine Instanz einer Hilfsklasse zum Definieren des benutzerdefinierten Attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="if &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">wenn <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> für den einschließenden Typ aufgerufen wurde.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetGetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method that gets the property value.">Legt die Methode fest, die den Eigenschaftswert abruft.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method that gets the property value.">Ein <see langword="MethodBuilder" />-Objekt, das die Methode zum Abrufen des Eigenschaftswerts darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde für den einschließenden Typ aufgerufen.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetSetMethod(System.Reflection.Emit.MethodBuilder)">
      <summary vsli:raw="Sets the method that sets the property value.">Legt die Methode zum Festlegen des Eigenschaftswerts fest.</summary>
      <param name="mdBuilder" vsli:raw="A &lt;see langword=&quot;MethodBuilder&quot; /&gt; object that represents the method that sets the property value.">Ein <see langword="MethodBuilder" />-Objekt, das die Methode zum Festlegen des Eigenschaftswerts darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;mdBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="mdBuilder" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been called on the enclosing type.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde für den einschließenden Typ aufgerufen.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Object[])">
      <summary vsli:raw="Sets the value of the property with optional index values for index properties.">Legt den Wert der Eigenschaft mit optionalen Indexwerten für Indexeigenschaften fest.</summary>
      <param name="obj" vsli:raw="The object whose property value will be set.">Das Objekt, dessen Eigenschaftswert festgelegt wird.</param>
      <param name="value" vsli:raw="The new value for this property.">Der neue Wert für diese Eigenschaft.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">Optionale Indexwerte für indizierte Eigenschaften. Dieser Wert sollte bei nicht indizierten Eigenschaften <see langword="null" /> sein.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.PropertyBuilder.SetValue(System.Object,System.Object,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object[],System.Globalization.CultureInfo)">
      <summary vsli:raw="Sets the property value for the given object to the given value.">Legt den Eigenschaftswert für das angegebene Objekt auf den angegebenen Wert fest.</summary>
      <param name="obj" vsli:raw="The object whose property value will be returned.">Das Objekt, dessen Eigenschaftswert zurückgegeben wird.</param>
      <param name="value" vsli:raw="The new value for this property.">Der neue Wert für diese Eigenschaft.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;CreateInstance&quot; /&gt;, &lt;see langword=&quot;Static&quot; /&gt;, &lt;see langword=&quot;GetField&quot; /&gt;, &lt;see langword=&quot;SetField&quot; /&gt;, &lt;see langword=&quot;GetProperty&quot; /&gt;, or &lt;see langword=&quot;SetProperty&quot; /&gt;. A suitable invocation attribute must be specified. If a static member is to be invoked, the &lt;see langword=&quot;Static&quot; /&gt; flag of &lt;see langword=&quot;BindingFlags&quot; /&gt; must be set.">Das Attribut für den Aufruf. Hierbei muss es sich um ein Bitflag aus <see langword="BindingFlags" /> handeln: <see langword="InvokeMethod" />, <see langword="CreateInstance" /><see langword="Static" />, <see langword="GetField" />, <see langword="SetField" />, <see langword="GetProperty" /> oder <see langword="SetProperty" />. Es muss ein geeignetes Aufrufattribut angegeben werden. Wenn ein statischer Member aufgerufen werden soll, muss das <see langword="Static" />-Flag von <see langword="BindingFlags" /> festgelegt werden.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If &lt;paramref name=&quot;binder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used.">Ein Objekt, das die Bindung, die Umwandlung von Argumenttypen, das Aufrufen von Membern und das Abrufen von <see langword="MemberInfo" />-Objekten über Reflektion ermöglicht. Wenn <paramref name="binder" /> den Wert <see langword="null" /> aufweist, wird der Standardbinder verwendet.</param>
      <param name="index" vsli:raw="Optional index values for indexed properties. This value should be &lt;see langword=&quot;null&quot; /&gt; for non-indexed properties.">Optionale Indexwerte für indizierte Eigenschaften. Dieser Wert sollte bei nicht indizierten Eigenschaften <see langword="null" /> sein.</param>
      <param name="culture" vsli:raw="The &lt;see langword=&quot;CultureInfo&quot; /&gt; object that represents the culture for which the resource is to be localized. Note that if the resource is not localized for this culture, the &lt;see langword=&quot;CultureInfo.Parent&quot; /&gt; method will be called successively in search of a match. If this value is &lt;see langword=&quot;null&quot; /&gt;, the &lt;see langword=&quot;CultureInfo&quot; /&gt; is obtained from the &lt;see langword=&quot;CultureInfo.CurrentUICulture&quot; /&gt; property.">Das <see langword="CultureInfo" />-Objekt, das die Kultur darstellt, für die die Ressource lokalisiert werden soll. Beachten Sie, dass die <see langword="CultureInfo.Parent" />-Methode in der Folge für die Suche nach einer Übereinstimmung aufgerufen wird, wenn die Ressource nicht für diese Kultur lokalisiert wurde. Wenn dieser Wert <see langword="null" /> ist, wird <see langword="CultureInfo" /> aus der <see langword="CultureInfo.CurrentUICulture" />-Eigenschaft abgerufen.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Attributes">
      <summary vsli:raw="Gets the attributes for this property.">Ruft die Attribute für diese Eigenschaft ab.</summary>
      <returns vsli:raw="Attributes of this property.">Attribute für diese Eigenschaft.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanRead">
      <summary vsli:raw="Gets a value indicating whether the property can be read.">Ruft einen Wert ab, der angibt, ob die Eigenschaft gelesen werden kann.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property can be read; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Objekt gelesen werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.CanWrite">
      <summary vsli:raw="Gets a value indicating whether the property can be written to.">Ruft einen Wert ab, der angibt, ob in die Eigenschaft geschrieben werden kann.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property can be written to; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn in diese Eigenschaft geschrieben werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.DeclaringType">
      <summary vsli:raw="Gets the class that declares this member.">Ruft die Klasse ab, die diesen Member deklariert.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object for the class that declares this member.">Das <see langword="Type" />-Objekt für die Klasse, in der dieser Member deklariert ist.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Module">
      <summary vsli:raw="Gets the module in which the type that declares the current property is being defined.">Ruft das Modul ab, in dem der Typ definiert wird, der die aktuelle Eigenschaft deklariert.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Reflection.Module&quot; /&gt; in which the type that declares the current property is defined.">Das <see cref="T:System.Reflection.Module" />, in dem der Typ definiert wird, der die aktuelle Eigenschaft deklariert.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.Name">
      <summary vsli:raw="Gets the name of this member.">Ruft den Namen dieses Members ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of this member.">Ein <see cref="T:System.String" /> mit dem Namen dieses Members.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.PropertyType">
      <summary vsli:raw="Gets the type of the field of this property.">Ruft den Typ des Felds für diese Eigenschaft ab.</summary>
      <returns vsli:raw="The type of this property.">Der Typ dieser Eigenschaft.</returns>
    </member>
    <member name="P:System.Reflection.Emit.PropertyBuilder.ReflectedType">
      <summary vsli:raw="Gets the class object that was used to obtain this instance of &lt;see langword=&quot;MemberInfo&quot; /&gt;.">Ruft das Klassenobjekt ab, mit dem diese Instanz von <see langword="MemberInfo" /> abgerufen wurde.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;Type&quot; /&gt; object through which this &lt;see langword=&quot;MemberInfo&quot; /&gt; object was obtained.">Das <see langword="Type" />-Objekt, über das dieses <see langword="MemberInfo" />-Objekt abgerufen wurde.</returns>
    </member>
    <member name="T:System.Reflection.Emit.TypeBuilder">
      <summary vsli:raw="Defines and creates new instances of classes during run time.">Definiert und erstellt zur Laufzeit neue Instanzen von Klassen.</summary>
    </member>
    <member name="F:System.Reflection.Emit.TypeBuilder.UnspecifiedTypeSize">
      <summary vsli:raw="Represents that total size for the type is not specified.">Stellt dar, dass die Gesamtgröße für den Typ nicht angegeben ist.</summary>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.AddInterfaceImplementation(System.Type)">
      <summary vsli:raw="Adds an interface that this type implements.">Fügt eine Schnittstelle hinzu, die dieser Typ implementiert.</summary>
      <param name="interfaceType" vsli:raw="The interface that this type implements.">Die Schnittstelle, die dieser Typ implementiert.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;interfaceType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="interfaceType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateType">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the class. After defining fields and methods on the class, &lt;see langword=&quot;CreateType&quot; /&gt; is called in order to load its &lt;see langword=&quot;Type&quot; /&gt; object.">Erstellt ein <see cref="T:System.Type" />-Objekt für die Klasse. Nachdem die Felder und Methoden für die Klasse definiert sind, wird <see langword="CreateType" /> aufgerufen, um das <see langword="Type" />-Objekt der Klasse zu laden.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The enclosing type has not been created.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is non-abstract and contains an abstract method.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is not an abstract class or an interface and has a method without a method body.">Der einschließende Typ wurde nicht erstellt.  
  
 - oder -  
  
 Dieser Typ ist nicht abstrakt und enthält eine abstrakte Methode.  
  
 - oder -  
  
 Dieser Typ ist weder eine abstrakte Klasse noch eine Schnittstelle und hat eine Methode ohne Methodenkörper.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Bad label content in &lt;see cref=&quot;T:System.Reflection.Emit.ILGenerator&quot; /&gt;: You have defined a label without calling &lt;see cref=&quot;M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)&quot; /&gt;.">Ungültiger Bezeichnungsinhalt in <see cref="T:System.Reflection.Emit.ILGenerator" />: Sie haben eine Bezeichnung ohne Aufruf von <see cref="M:System.Reflection.Emit.ILGenerator.MarkLabel(System.Reflection.Emit.Label)" /> definiert.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The type contains invalid Microsoft intermediate language (MSIL) code.  &#xA;  &#xA; -or-  &#xA;  &#xA; The branch target is specified using a 1-byte offset, but the target is at a distance greater than 127 bytes from the branch.">Der Typ enthält ungültigen MSIL-Code (Microsoft Intermediate Language).  
  
 - oder -  
  
 Das Verzweigungsziel ist mit einem Offset von 1 Byte angegeben, die Entfernung des Ziels von der Verzweigung ist jedoch größer als 127 Bytes.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="The type cannot be loaded. For example, it contains a &lt;see langword=&quot;static&quot; /&gt; method that has the calling convention &lt;see cref=&quot;F:System.Reflection.CallingConventions.HasThis&quot; /&gt;.">Der Typ kann nicht geladen werden. Er enthält beispielsweise eine <see langword="static" />-Methode, die die Aufrufkonvention <see cref="F:System.Reflection.CallingConventions.HasThis" /> hat.</exception>
      <returns vsli:raw="Returns the new &lt;see cref=&quot;T:System.Type&quot; /&gt; object for this class.">Gibt das neue <see cref="T:System.Type" />-Objekt für diese Klasse zurück.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.CreateTypeInfo">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Reflection.TypeInfo&quot; /&gt; object that represents this type.">Ruft ein <see cref="T:System.Reflection.TypeInfo" />-Objekt ab, das diesen Typ darstellt.</summary>
      <returns vsli:raw="An object that represents this type.">Ein Objekt, das diesen Typ darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[])">
      <summary vsli:raw="Adds a new constructor to the type, with the given attributes and signature.">Fügt dem Typ einen neuen Konstruktor mit den angegebenen Attributen und der Signatur hinzu.</summary>
      <param name="attributes" vsli:raw="The attributes of the constructor.">Die Attribute des Konstruktors.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the constructor.">Die Aufrufkonvention des Konstruktors.</param>
      <param name="parameterTypes" vsli:raw="The parameter types of the constructor.">Die Parametertypen des Konstruktors.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.</exception>
      <returns vsli:raw="The defined constructor.">Der definierte Konstruktor.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineConstructor(System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new constructor to the type, with the given attributes, signature, and custom modifiers.">Fügt dem Typ einen neuen Konstruktor mit den angegebenen Attributen, der angegebenen Signatur und den angegebenen benutzerdefinierten Modifizierern hinzu.</summary>
      <param name="attributes" vsli:raw="The attributes of the constructor.">Die Attribute des Konstruktors.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the constructor.">Die Aufrufkonvention des Konstruktors.</param>
      <param name="parameterTypes" vsli:raw="The parameter types of the constructor.">Die Parametertypen des Konstruktors.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />. Wenn ein bestimmter Parameter keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an. Wenn keiner der Parameter erforderliche benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />. Wenn ein bestimmter Parameter keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an. Wenn keiner der Parameter optionale benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The size of &lt;paramref name=&quot;requiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;optionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">Die Größe von <paramref name="requiredCustomModifiers" /> oder <paramref name="optionalCustomModifiers" /> entspricht nicht die Größe von <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.  
  
- oder - 
Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
      <returns vsli:raw="The defined constructor.">Der definierte Konstruktor.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineDefaultConstructor(System.Reflection.MethodAttributes)">
      <summary vsli:raw="Defines the parameterless constructor. The constructor defined here will simply call the parameterless constructor of the parent.">Definiert den parameterlosen Konstruktor. Der hier definierte Konstruktor ruft einfach den parameterlosen Konstruktor des übergeordneten Elements auf.</summary>
      <param name="attributes" vsli:raw="A &lt;see langword=&quot;MethodAttributes&quot; /&gt; object representing the attributes to be applied to the constructor.">Ein <see langword="MethodAttributes" />-Objekt, das die auf den Konstruktor anzuwendenden Attribute darstellt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The parent type (base type) does not have a parameterless constructor.">Der übergeordnete Typ (Basistyp) weist keinen parameterlosen Konstruktor auf.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.  
  
- oder - 
Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
      <returns vsli:raw="Returns the constructor.">Gibt den Konstruktor zurück.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineEvent(System.String,System.Reflection.EventAttributes,System.Type)">
      <summary vsli:raw="Adds a new event to the type, with the given name, attributes and event type.">Fügt dem Typ ein neues Ereignis hinzu, das den angegebenen Namen, die angegebenen Attribute und den angegebenen Ereignistyp hat.</summary>
      <param name="name" vsli:raw="The name of the event. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name des Ereignisses. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attributes" vsli:raw="The attributes of the event.">Die Attribute des Ereignisses.</param>
      <param name="eventtype" vsli:raw="The type of the event.">Der Typ des Ereignisses.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">Die Länge von <paramref name="name" /> ist 0 (null).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;eventtype&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="eventtype" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.</exception>
      <returns vsli:raw="The defined event.">Das definierte Ereignis.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Adds a new field to the type, with the given name, attributes, and field type.">Fügt ein neues Feld mit dem angegebenen Namen, den angegebenen Attribute und dem angegebenen Feldtyp zum Typ hinzu.</summary>
      <param name="fieldName" vsli:raw="The name of the field. &lt;paramref name=&quot;fieldName&quot; /&gt; cannot contain embedded nulls.">Der Name des Felds. <paramref name="fieldName" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="type" vsli:raw="The type of the field.">Der Typ des Felds.</param>
      <param name="attributes" vsli:raw="The attributes of the field.">Die Attribute des Felds.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;fieldName&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is System.Void.  &#xA;  &#xA; -or-  &#xA;  &#xA; A total size was specified for the parent class of this field.">Die Länge von <paramref name="fieldName" /> ist 0 (null).  
  
- oder - 
 <paramref name="type" /> ist „System.Void“.  
  
- oder - 
Für die übergeordnete Klasse dieses Felds wurde eine Gesamtgröße angegeben.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fieldName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.</exception>
      <returns vsli:raw="The defined field.">Das definierte Feld.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineField(System.String,System.Type,System.Type[],System.Type[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Adds a new field to the type, with the given name, attributes, field type, and custom modifiers.">Fügt ein neues Feld mit dem angegebenen Namen, den Attributen, dem Feldtyp und den benutzerdefinierten Modifizierern zum Typ hinzu.</summary>
      <param name="fieldName" vsli:raw="The name of the field. &lt;paramref name=&quot;fieldName&quot; /&gt; cannot contain embedded nulls.">Der Name des Felds. <paramref name="fieldName" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="type" vsli:raw="The type of the field.">Der Typ des Felds.</param>
      <param name="requiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers for the field, such as &lt;see cref=&quot;T:Microsoft.VisualC.IsConstModifier&quot; /&gt;.">Gibt ein Array von Typen zurück, das die erforderlichen benutzerdefinierten Modifizierer für das Feld darstellt, z. B. <see cref="T:Microsoft.VisualC.IsConstModifier" />.</param>
      <param name="optionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers for the field, such as &lt;see cref=&quot;T:Microsoft.VisualC.IsConstModifier&quot; /&gt;.">Gibt ein Array von Typen zurück, das die optionalen benutzerdefinierten Modifizierer für das Feld darstellt, z. B. <see cref="T:Microsoft.VisualC.IsConstModifier" />.</param>
      <param name="attributes" vsli:raw="The attributes of the field.">Die Attribute des Felds.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;fieldName&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is System.Void.  &#xA;  &#xA; -or-  &#xA;  &#xA; A total size was specified for the parent class of this field.">Die Länge von <paramref name="fieldName" /> ist 0 (null).  
  
- oder - 
 <paramref name="type" /> ist „System.Void“.  
  
- oder - 
Für die übergeordnete Klasse dieses Felds wurde eine Gesamtgröße angegeben.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fieldName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fieldName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.</exception>
      <returns vsli:raw="The defined field.">Das definierte Feld.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineGenericParameters(System.String[])">
      <summary vsli:raw="Defines the generic type parameters for the current type, specifying their number and their names, and returns an array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to set their constraints.">Definiert die generischen Typparameter für den aktuellen Typ, gibt dabei deren Zahl und deren Namen an und gibt ein Array von <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />-Objekten zurück, das dazu verwendet werden kann, deren Einschränkungen festzulegen.</summary>
      <param name="names" vsli:raw="An array of names for the generic type parameters.">Ein Array von Namen für die generischen Typparameter.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Generic type parameters have already been defined for this type.">Es wurden bereits generische Typparameter für diesen Typ definiert.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of &lt;paramref name=&quot;names&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="names" /> ist <see langword="null" />.  
  
- oder - 
Ein Element von <paramref name="names" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;names&quot; /&gt; is an empty array.">
        <paramref name="names" /> ist ein leeres Array.</exception>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Reflection.Emit.GenericTypeParameterBuilder&quot; /&gt; objects that can be used to define the constraints of the generic type parameters for the current type.">Ein Array von <see cref="T:System.Reflection.Emit.GenericTypeParameterBuilder" />-Objekten, das dazu verwendet werden kann, die Einschränkungen der generischen Typparameter für den aktuellen Typ zu definieren.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineInitializedData(System.String,System.Byte[],System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines initialized data field in the .sdata section of the portable executable (PE) file.">Definiert das initialisierte Datenfeld im ".sdata"-Abschnitt der portierbaren ausführbaren Datei (Portable Executable, PE).</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name, der zum Verweisen auf die Daten verwendet wird. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="data" vsli:raw="The blob of data.">Das Daten-BLOB.</param>
      <param name="attributes" vsli:raw="The attributes for the field.">Die Attribute für das Feld.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of the data is less than or equal to zero, or greater than or equal to 0x3f0000.">Die Länge von <paramref name="name" /> ist 0 (null).  
  
- oder - 
Die Größe der Daten ist kleiner oder gleich 0 (null) bzw. größer oder gleich 0x3f0000.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;data&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> oder <paramref name="data" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; has been previously called.">
        <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> wurde bereits zuvor aufgerufen.</exception>
      <returns vsli:raw="A field to reference the data.">Ein Feld zum Verweisen auf die Daten.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes)">
      <summary vsli:raw="Adds a new method to the type, with the specified name and method attributes.">Fügt eine neue Methode zum Typ mit dem angegebenen Namen und den Methodenattributen hinzu.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name der Methode. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Die Attribute der Methode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">Die Länge von <paramref name="name" /> ist 0 (null).  
  
- oder - 
Der Typ des übergeordneten Elements dieser Methode ist eine Schnittstelle, und diese Methode ist nicht virtuell (<see langword="Overridable" /> in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.  
  
- oder - 
Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">Ein <see cref="T:System.Reflection.Emit.MethodBuilder" />, der die neu definierte Methode darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions)">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, and calling convention.">Fügt eine neue Methode zum Typ mit dem angegebenen Namen, den Methodenattributen und der Aufrufkonvention hinzu.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name der Methode. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Die Attribute der Methode.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Die Aufrufkonvention der Methode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">Die Länge von <paramref name="name" /> ist 0 (null).  
  
- oder - 
Der Typ des übergeordneten Elements dieser Methode ist eine Schnittstelle, und diese Methode ist nicht virtuell (<see langword="Overridable" /> in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.  
  
- oder - 
Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">Ein <see cref="T:System.Reflection.Emit.MethodBuilder" />, der die neu definierte Methode darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, calling convention, and method signature.">Fügt eine neue Methode zum Typ mit dem angegebenen Namen, den Methodenattributen, der Aufrufkonvention und der Methodensignatur hinzu.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name der Methode. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Die Attribute der Methode.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Die Aufrufkonvention der Methode.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Der Rückgabetyp der Methode.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">Die Typen der Parameter der Methode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">Die Länge von <paramref name="name" /> ist 0 (null).  
  
- oder - 
Der Typ des übergeordneten Elements dieser Methode ist eine Schnittstelle, und diese Methode ist nicht virtuell (<see langword="Overridable" /> in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.  
  
- oder - 
Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the newly defined method.">Ein <see cref="T:System.Reflection.Emit.MethodBuilder" />, der die neu definierte Methode darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, calling convention, method signature, and custom modifiers.">Fügt eine neue Methode zum Typ mit dem angegebenen Namen, den Methodenattributen, der Aufrufkonvention, der Methodensignatur und den benutzerdefinierten Modifizierern hinzu.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name der Methode. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Die Attribute der Methode.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the method.">Die Aufrufkonvention der Methode.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Der Rückgabetyp der Methode.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die erforderlichen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Methode darstellen. Wenn der Rückgabetyp keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" />an.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die optionalen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Methode darstellen. Wenn der Rückgabetyp keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">Die Typen der Parameter der Methode.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />. Wenn ein bestimmter Parameter keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an. Wenn keiner der Parameter erforderliche benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />. Wenn ein bestimmter Parameter keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an. Wenn keiner der Parameter optionale benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;parameterTypeRequiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;parameterTypeOptionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">Die Länge von <paramref name="name" /> ist 0 (null).  
  
- oder - 
Der Typ des übergeordneten Elements dieser Methode ist eine Schnittstelle, und diese Methode ist nicht virtuell (<see langword="Overridable" /> in Visual Basic).  
  
- oder - 
Die Größe von <paramref name="parameterTypeRequiredCustomModifiers" /> oder <paramref name="parameterTypeOptionalCustomModifiers" /> entspricht nicht die Größe von <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.  
  
- oder - 
Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; object representing the newly added method.">Ein <see cref="T:System.Reflection.Emit.MethodBuilder" />-Objekt, das die neu hinzugefügte Methode darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethod(System.String,System.Reflection.MethodAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new method to the type, with the specified name, method attributes, and method signature.">Fügt eine neue Methode zum Typ mit dem angegebenen Namen, den Methodenattributen und der Methodensignatur hinzu.</summary>
      <param name="name" vsli:raw="The name of the method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name der Methode. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Die Attribute der Methode.</param>
      <param name="returnType" vsli:raw="The return type of the method.">Der Rückgabetyp der Methode.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the method.">Die Typen der Parameter der Methode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The type of the parent of this method is an interface, and this method is not virtual (&lt;see langword=&quot;Overridable&quot; /&gt; in Visual Basic).">Die Länge von <paramref name="name" /> ist 0 (null).  
  
- oder - 
Der Typ des übergeordneten Elements dieser Methode ist eine Schnittstelle, und diese Methode ist nicht virtuell (<see langword="Overridable" /> in Visual Basic).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.  
  
- oder - 
Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
      <returns vsli:raw="The defined method.">Die definierte Methode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineMethodOverride(System.Reflection.MethodInfo,System.Reflection.MethodInfo)">
      <summary vsli:raw="Specifies a given method body that implements a given method declaration, potentially with a different name.">Gibt einen bestimmten Methodentext an, der eine bestimmte Methodendeklaration, möglicherweise mit einem anderen Namen, implementiert.</summary>
      <param name="methodInfoBody" vsli:raw="The method body to be used. This should be a &lt;see langword=&quot;MethodBuilder&quot; /&gt; object.">Der zu verwendende Methodentext. Dies sollte ein <see langword="MethodBuilder" /> -Objekt sein.</param>
      <param name="methodInfoDeclaration" vsli:raw="The method whose declaration is to be used.">Die Methode, deren Deklaration verwendet werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;methodInfoBody&quot; /&gt; does not belong to this class.">
        <paramref name="methodInfoBody" /> gehört nicht zu dieser Klasse.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;methodInfoBody&quot; /&gt; or &lt;paramref name=&quot;methodInfoDeclaration&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="methodInfoBody" /> oder <paramref name="methodInfoDeclaration" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;methodInfoBody&quot; /&gt; is not the type represented by this &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.  
  
- oder - 
Der deklarierende Typ des <paramref name="methodInfoBody" /> ist nicht der von diesem <see cref="T:System.Reflection.Emit.TypeBuilder" /> dargestellte Typ.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String)">
      <summary vsli:raw="Defines a nested type, given its name.">Definiert einen geschachtelten Typ anhand des Namens.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Kurzname des Typs. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">Die Länge von <paramref name="name" /> ist 0 (null) oder größer als 1023.  
  
- oder - 
Dieser Vorgang würde einen Typ mit einem bereits vorhandenen <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in der aktuellen Assembly erstellen.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The defined nested type.">Der definierte geschachtelte Typ.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes)">
      <summary vsli:raw="Defines a nested type, given its name and attributes.">Definiert einen geschachtelten Typ, wozu dessen Name und Attribute angegeben sind.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Kurzname des Typs. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Die Attribute des Typs.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">Das geschachtelte Attribut ist nicht angegeben.  
  
- oder - 
Dieser Typ ist versiegelt.  
  
- oder - 
Dieser Typ ist ein Array.  
  
- oder - 
Dieser Typ ist eine Schnittstelle, aber der geschachtelte Typ ist keine Schnittstelle.  
  
- oder - 
Die Länge von <paramref name="name" /> ist 0 (null) oder größer als 1023.  
  
- oder - 
Dieser Vorgang würde einen Typ mit einem bereits vorhandenen <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in der aktuellen Assembly erstellen.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The defined nested type.">Der definierte geschachtelte Typ.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, and the type that it extends.">Definiert einen geschachtelten Typ bei gegebenem Namen, Attributen und erweitertem Typ.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Kurzname des Typs. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Die Attribute des Typs.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Der Typ, den der geschachtelte Typ erweitert.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">Das geschachtelte Attribut ist nicht angegeben.  
  
- oder - 
Dieser Typ ist versiegelt.  
  
- oder - 
Dieser Typ ist ein Array.  
  
- oder - 
Dieser Typ ist eine Schnittstelle, aber der geschachtelte Typ ist keine Schnittstelle.  
  
- oder - 
Die Länge von <paramref name="name" /> ist 0 (null) oder größer als 1023.  
  
- oder - 
Dieser Vorgang würde einen Typ mit einem bereits vorhandenen <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in der aktuellen Assembly erstellen.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The defined nested type.">Der definierte geschachtelte Typ.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Int32)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the total size of the type, and the type that it extends.">Definiert einen geschachtelten Typ bei gegebenem Namen, Attributen, Gesamtgröße des Typs und erweitertem Typ.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Kurzname des Typs. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Die Attribute des Typs.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Der Typ, den der geschachtelte Typ erweitert.</param>
      <param name="typeSize" vsli:raw="The total size of the type.">Die Gesamtgröße des Typs.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">Das geschachtelte Attribut ist nicht angegeben.  
  
- oder - 
Dieser Typ ist versiegelt.  
  
- oder - 
Dieser Typ ist ein Array.  
  
- oder - 
Dieser Typ ist eine Schnittstelle, aber der geschachtelte Typ ist keine Schnittstelle.  
  
- oder - 
Die Länge von <paramref name="name" /> ist 0 (null) oder größer als 1023.  
  
- oder - 
Dieser Vorgang würde einen Typ mit einem bereits vorhandenen <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in der aktuellen Assembly erstellen.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The defined nested type.">Der definierte geschachtelte Typ.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the type that it extends, and the packing size.">Definiert einen geschachtelten Typ bei gegebenem Namen, Attributen, erweitertem Typ und Komprimierungsgröße.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Kurzname des Typs. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Die Attribute des Typs.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Der Typ, den der geschachtelte Typ erweitert.</param>
      <param name="packSize" vsli:raw="The packing size of the type.">Die Komprimierungsgröße des Typs.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">Das geschachtelte Attribut ist nicht angegeben.  
  
- oder - 
Dieser Typ ist versiegelt.  
  
- oder - 
Dieser Typ ist ein Array.  
  
- oder - 
Dieser Typ ist eine Schnittstelle, aber der geschachtelte Typ ist keine Schnittstelle.  
  
- oder - 
Die Länge von <paramref name="name" /> ist 0 (null) oder größer als 1023.  
  
- oder - 
Dieser Vorgang würde einen Typ mit einem bereits vorhandenen <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in der aktuellen Assembly erstellen.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The defined nested type.">Der definierte geschachtelte Typ.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Reflection.Emit.PackingSize,System.Int32)">
      <summary vsli:raw="Defines a nested type, given its name, attributes, size, and the type that it extends.">Definiert einen geschachtelten Typ bei gegebenem Namen, Attributen, Größe und erweitertem Typ.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded null values.">Der Kurzname des Typs. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Die Attribute des Typs.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Der Typ, den der geschachtelte Typ erweitert.</param>
      <param name="packSize" vsli:raw="The packing size of the type.">Die Komprimierungsgröße des Typs.</param>
      <param name="typeSize" vsli:raw="The total size of the type.">Die Gesamtgröße des Typs.</param>
      <returns vsli:raw="The defined nested type.">Der definierte geschachtelte Typ.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineNestedType(System.String,System.Reflection.TypeAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Defines a nested type, given its name, attributes, the type that it extends, and the interfaces that it implements.">Definiert einen geschachtelten Typ mit seinem Namen, den Attributen, dem erweiterten Typ und den implementierten Schnittstellen.</summary>
      <param name="name" vsli:raw="The short name of the type. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Kurzname des Typs. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attr" vsli:raw="The attributes of the type.">Die Attribute des Typs.</param>
      <param name="parent" vsli:raw="The type that the nested type extends.">Der Typ, den der geschachtelte Typ erweitert.</param>
      <param name="interfaces" vsli:raw="The interfaces that the nested type implements.">Die vom geschachtelte Typ implementierten Schnittstellen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The nested attribute is not specified.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is sealed.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; This type is an interface, but the nested type is not an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; is zero or greater than 1023.  &#xA;  &#xA; -or-  &#xA;  &#xA; This operation would create a type with a duplicate &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.FullName&quot; /&gt; in the current assembly.">Das geschachtelte Attribut ist nicht angegeben.  
  
- oder - 
Dieser Typ ist versiegelt.  
  
- oder - 
Dieser Typ ist ein Array.  
  
- oder - 
Dieser Typ ist eine Schnittstelle, aber der geschachtelte Typ ist keine Schnittstelle.  
  
- oder - 
Die Länge von <paramref name="name" /> ist 0 (null) oder größer als 1023.  
  
- oder - 
Dieser Vorgang würde einen Typ mit einem bereits vorhandenen <see cref="P:System.Reflection.Emit.TypeBuilder.FullName" /> in der aktuellen Assembly erstellen.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; An element of the &lt;paramref name=&quot;interfaces&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.  
  
- oder - 
Ein Element des <paramref name="interfaces" />-Arrays ist <see langword="null" />.</exception>
      <returns vsli:raw="The defined nested type.">Der definierte geschachtelte Typ.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method given its name, the name of the DLL in which the method is defined, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">Definiert eine <see langword="PInvoke" />-Methode anhand der Angaben für den Namen, den Namen der DLL, in der die Methode definiert ist, für die Attribute der Methode, die Aufrufkonvention der Methode, den Rückgabetyp der Methode, die Parametertypen der Methode und die <see langword="PInvoke" />-Flags.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name der <see langword="PInvoke" />-Methode. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">Der Name der DLL, in der die <see langword="PInvoke" />-Methode definiert ist.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Die Attribute der Methode.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Die Aufrufkonvention der Methode.</param>
      <param name="returnType" vsli:raw="The method's return type.">Der Rückgabetyp der Methode.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Die Typen der Parameter der Methode.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">Die systemeigene Aufrufkonvention.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">Der systemeigene Zeichensatz der Methode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parent type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is zero.">Die Methode ist nicht statisch.  
  
- oder - 
Der übergeordnete Typ ist eine Schnittstelle.  
  
- oder - 
Die Methode ist abstrakt.  
  
- oder - 
Die Methode wurde bereits definiert.  
  
- oder - 
Die Länge von <paramref name="name" /> oder <paramref name="dllName" /> ist 0 (null).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;dllName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> oder <paramref name="dllName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der enthaltende Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</exception>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">Die definierte <see langword="PInvoke" />-Methode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, and the &lt;see langword=&quot;PInvoke&quot; /&gt; flags.">Definiert eine <see langword="PInvoke" />-Methode anhand der Angaben für den Namen, den Namen der DLL, in der die Methode definiert ist, für den Namen des Einstiegspunkts, die Attribute der Methode, die Aufrufkonvention der Methode, den Rückgabetyp der Methode, die Parametertypen der Methode und die <see langword="PInvoke" />-Flags.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name der <see langword="PInvoke" />-Methode. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">Der Name der DLL, in der die <see langword="PInvoke" />-Methode definiert ist.</param>
      <param name="entryName" vsli:raw="The name of the entry point in the DLL.">Der Name des Einstiegspunkts in die DLL.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Die Attribute der Methode.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Die Aufrufkonvention der Methode.</param>
      <param name="returnType" vsli:raw="The method's return type.">Der Rückgabetyp der Methode.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Die Typen der Parameter der Methode.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">Die systemeigene Aufrufkonvention.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">Der systemeigene Zeichensatz der Methode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parent type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is zero.">Die Methode ist nicht statisch.  
  
- oder - 
Der übergeordnete Typ ist eine Schnittstelle.  
  
- oder - 
Die Methode ist abstrakt.  
  
- oder - 
Die Methode wurde bereits definiert.  
  
- oder - 
Die Länge von <paramref name="name" />, <paramref name="dllName" /> oder <paramref name="entryName" /> ist 0 (null).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />, <paramref name="dllName" /> oder <paramref name="entryName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der enthaltende Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</exception>
      <returns vsli:raw="The defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">Die definierte <see langword="PInvoke" />-Methode.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefinePInvokeMethod(System.String,System.String,System.String,System.Reflection.MethodAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][],System.Runtime.InteropServices.CallingConvention,System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Defines a &lt;see langword=&quot;PInvoke&quot; /&gt; method given its name, the name of the DLL in which the method is defined, the name of the entry point, the attributes of the method, the calling convention of the method, the return type of the method, the types of the parameters of the method, the &lt;see langword=&quot;PInvoke&quot; /&gt; flags, and custom modifiers for the parameters and return type.">Definiert eine <see langword="PInvoke" />-Methode anhand der Angaben für den Namen, den Namen der DLL, in der die Methode definiert ist, den Namen des Einstiegspunkts, die Attribute der Methode, die Aufrufkonvention der Methode, den Rückgabetyp der Methode, die Parametertypen der Methode, die <see langword="PInvoke" />-Flags, die benutzerdefinierten Modifizierer für die Parameter und den Rückgabetyp.</summary>
      <param name="name" vsli:raw="The name of the &lt;see langword=&quot;PInvoke&quot; /&gt; method. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name der <see langword="PInvoke" />-Methode. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="dllName" vsli:raw="The name of the DLL in which the &lt;see langword=&quot;PInvoke&quot; /&gt; method is defined.">Der Name der DLL, in der die <see langword="PInvoke" />-Methode definiert ist.</param>
      <param name="entryName" vsli:raw="The name of the entry point in the DLL.">Der Name des Einstiegspunkts in die DLL.</param>
      <param name="attributes" vsli:raw="The attributes of the method.">Die Attribute der Methode.</param>
      <param name="callingConvention" vsli:raw="The method's calling convention.">Die Aufrufkonvention der Methode.</param>
      <param name="returnType" vsli:raw="The method's return type.">Der Rückgabetyp der Methode.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die erforderlichen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Methode darstellen. Wenn der Rückgabetyp keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" />an.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the method. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die optionalen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Methode darstellen. Wenn der Rückgabetyp keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an.</param>
      <param name="parameterTypes" vsli:raw="The types of the method's parameters.">Die Typen der Parameter der Methode.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />. Wenn ein bestimmter Parameter keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an. Wenn keiner der Parameter erforderliche benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />. Wenn ein bestimmter Parameter keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an. Wenn keiner der Parameter optionale benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</param>
      <param name="nativeCallConv" vsli:raw="The native calling convention.">Die systemeigene Aufrufkonvention.</param>
      <param name="nativeCharSet" vsli:raw="The method's native character set.">Der systemeigene Zeichensatz der Methode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The method is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The parent type is an interface.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is abstract.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method was previously defined.  &#xA;  &#xA; -or-  &#xA;  &#xA; The length of &lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; The size of &lt;paramref name=&quot;parameterTypeRequiredCustomModifiers&quot; /&gt; or &lt;paramref name=&quot;parameterTypeOptionalCustomModifiers&quot; /&gt; does not equal the size of &lt;paramref name=&quot;parameterTypes&quot; /&gt;.">Die Methode ist nicht statisch.  
  
- oder - 
Der übergeordnete Typ ist eine Schnittstelle.  
  
- oder - 
Die Methode ist abstrakt.  
  
- oder - 
Die Methode wurde bereits definiert.  
  
- oder - 
Die Länge von <paramref name="name" />, <paramref name="dllName" /> oder <paramref name="entryName" /> ist 0 (null).  
  
- oder - 
Die Größe von <paramref name="parameterTypeRequiredCustomModifiers" /> oder <paramref name="parameterTypeOptionalCustomModifiers" /> entspricht nicht die Größe von <paramref name="parameterTypes" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;dllName&quot; /&gt;, or &lt;paramref name=&quot;entryName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" />, <paramref name="dllName" /> oder <paramref name="entryName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.  
  
- oder - 
Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.Emit.MethodBuilder&quot; /&gt; representing the defined &lt;see langword=&quot;PInvoke&quot; /&gt; method.">Ein <see cref="T:System.Reflection.Emit.MethodBuilder" />, der die definierte <see langword="PInvoke" />-Methode darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new property to the type, with the given name, attributes, calling convention, and property signature.">Fügt dem Typ eine neue Eigenschaft mit den Angaben für den Namen, die Aufrufkonvention und die Signatur der Eigenschaften hinzu.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Den Namen der Eigenschaft. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">Die Attribute der Eigenschaft.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">Die Aufrufkonvention der Eigenschaftenzugriffsmethoden.</param>
      <param name="returnType" vsli:raw="The return type of the property.">Der Rückgabetyp der Eigenschaft.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">Die Typen der Parameter der Eigenschaft.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">Die Länge von <paramref name="name" /> ist 0 (null).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.  
  
- oder - 
Ein Element des <paramref name="parameterTypes" />-Arrays ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.</exception>
      <returns vsli:raw="The defined property.">Die definierte Eigenschaft.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Reflection.CallingConventions,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new property to the type, with the given name, calling convention, property signature, and custom modifiers.">Fügt dem Typ eine neue Eigenschaft hinzu, die den angegebenen Namen, die angegebene Aufrufkonvention, die angegebene Eigenschaftensignatur und die angegebenen benutzerdefinierten Modifizierer hat.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Den Namen der Eigenschaft. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">Die Attribute der Eigenschaft.</param>
      <param name="callingConvention" vsli:raw="The calling convention of the property accessors.">Die Aufrufkonvention der Eigenschaftenzugriffsmethoden.</param>
      <param name="returnType" vsli:raw="The return type of the property.">Der Rückgabetyp der Eigenschaft.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die erforderlichen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Eigenschaft darstellen. Wenn der Rückgabetyp keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" />an.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die optionalen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Eigenschaft darstellen. Wenn der Rückgabetyp keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">Die Typen der Parameter der Eigenschaft.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />. Wenn ein bestimmter Parameter keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an. Wenn keiner der Parameter erforderliche benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />. Wenn ein bestimmter Parameter keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an. Wenn keiner der Parameter optionale benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">Die Länge von <paramref name="name" /> ist 0 (null).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.  
  
- oder - 
Ein Element des <paramref name="parameterTypes" />-Arrays ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.</exception>
      <returns vsli:raw="The defined property.">Die definierte Eigenschaft.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[])">
      <summary vsli:raw="Adds a new property to the type, with the given name and property signature.">Fügt dem Typ eine neue Eigenschaft mit dem angegebenen Namen und der angegebenen Eigenschaftensignatur hinzu.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Den Namen der Eigenschaft. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">Die Attribute der Eigenschaft.</param>
      <param name="returnType" vsli:raw="The return type of the property.">Der Rückgabetyp der Eigenschaft.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">Die Typen der Parameter der Eigenschaft.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">Die Länge von <paramref name="name" /> ist 0 (null).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.  
  
- oder - 
Ein Element des <paramref name="parameterTypes" />-Arrays ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.</exception>
      <returns vsli:raw="The defined property.">Die definierte Eigenschaft.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineProperty(System.String,System.Reflection.PropertyAttributes,System.Type,System.Type[],System.Type[],System.Type[],System.Type[][],System.Type[][])">
      <summary vsli:raw="Adds a new property to the type, with the given name, property signature, and custom modifiers.">Fügt dem Typ eine neue Eigenschaft hinzu, die den angegebenen Namen, die angegebene Eigenschaftensignatur und die angegebenen benutzerdefinierten Modifizierer hat.</summary>
      <param name="name" vsli:raw="The name of the property. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Den Namen der Eigenschaft. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="attributes" vsli:raw="The attributes of the property.">Die Attribute der Eigenschaft.</param>
      <param name="returnType" vsli:raw="The return type of the property.">Der Rückgabetyp der Eigenschaft.</param>
      <param name="returnTypeRequiredCustomModifiers" vsli:raw="An array of types representing the required custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die erforderlichen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Eigenschaft darstellen. Wenn der Rückgabetyp keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" />an.</param>
      <param name="returnTypeOptionalCustomModifiers" vsli:raw="An array of types representing the optional custom modifiers, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;, for the return type of the property. If the return type has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von Typen, die die optionalen benutzerdefinierten Modifizierer, etwa <see cref="T:System.Runtime.CompilerServices.IsConst" />, für den Rückgabetyp der Eigenschaft darstellen. Wenn der Rückgabetyp keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> an.</param>
      <param name="parameterTypes" vsli:raw="The types of the parameters of the property.">Die Typen der Parameter der Eigenschaft.</param>
      <param name="parameterTypeRequiredCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the required custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have required custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die erforderlichen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />. Wenn ein bestimmter Parameter keine erforderlichen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an. Wenn keiner der Parameter erforderliche benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</param>
      <param name="parameterTypeOptionalCustomModifiers" vsli:raw="An array of arrays of types. Each array of types represents the optional custom modifiers for the corresponding parameter, such as &lt;see cref=&quot;T:System.Runtime.CompilerServices.IsConst&quot; /&gt;. If a particular parameter has no optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of types. If none of the parameters have optional custom modifiers, specify &lt;see langword=&quot;null&quot; /&gt; instead of an array of arrays.">Ein Array mit Arrays von Typen. Jedes Array von Typen stellt die optionalen benutzerdefinierten Modifizierer für den entsprechenden Parameter dar, z. B. <see cref="T:System.Runtime.CompilerServices.IsConst" />. Wenn ein bestimmter Parameter keine optionalen benutzerdefinierten Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays von Typen an. Wenn keiner der Parameter optionale benutzerdefinierte Modifizierer hat, geben Sie <see langword="null" /> anstelle eines Arrays mit Arrays an.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The length of &lt;paramref name=&quot;name&quot; /&gt; is zero.">Die Länge von <paramref name="name" /> ist 0 (null).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; Any of the elements of the &lt;paramref name=&quot;parameterTypes&quot; /&gt; array is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="name" /> ist gleich <see langword="null" />.  
  
- oder - 
Irgendeines der Elemente des <paramref name="parameterTypes" />-Arrays ist gleich <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.</exception>
      <returns vsli:raw="The defined property.">Die definierte Eigenschaft.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineTypeInitializer">
      <summary vsli:raw="Defines the initializer for this type.">Definiert den Initialisierer für diesen Typ.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The containing type has been previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der enthaltende Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" /> erstellt.</exception>
      <returns vsli:raw="Returns a type initializer.">Gibt einen Typinitialisierer zurück.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.DefineUninitializedData(System.String,System.Int32,System.Reflection.FieldAttributes)">
      <summary vsli:raw="Defines an uninitialized data field in the &lt;see langword=&quot;.sdata&quot; /&gt; section of the portable executable (PE) file.">Definiert das initialisierte Datenfeld im <see langword=".sdata" />-Abschnitt der portierbaren ausführbaren Datei (Portable Executable, PE).</summary>
      <param name="name" vsli:raw="The name used to refer to the data. &lt;paramref name=&quot;name&quot; /&gt; cannot contain embedded nulls.">Der Name, der zum Verweisen auf die Daten verwendet wird. <paramref name="name" /> darf keine eingebetteten NULL-Werte enthalten.</param>
      <param name="size" vsli:raw="The size of the data field.">Die Größe des Datenfelds.</param>
      <param name="attributes" vsli:raw="The attributes for the field.">Die Attribute für das Feld.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Length of &lt;paramref name=&quot;name&quot; /&gt; is zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;size&quot; /&gt; is less than or equal to zero, or greater than or equal to 0x003f0000.">Die Länge von <paramref name="name" /> ist 0 (null).  
  
- oder - 
 <paramref name="size" /> ist kleiner gleich 0 oder größer gleich 0x003f0000.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.</exception>
      <returns vsli:raw="A field to reference the data.">Ein Feld zum Verweisen auf die Daten.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructor(System.Type,System.Reflection.ConstructorInfo)">
      <summary vsli:raw="Returns the constructor of the specified constructed generic type that corresponds to the specified constructor of the generic type definition.">Gibt den Konstruktor des angegebenen konstruierten generischen Typs zurück, der dem angegebenen Konstruktor der generischen Typdefinition entspricht.</summary>
      <param name="type" vsli:raw="The constructed generic type whose constructor is returned.">Der konstruierte generische Typ, dessen Konstruktor zurückgegeben wird.</param>
      <param name="constructor" vsli:raw="A constructor on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which constructor of &lt;paramref name=&quot;type&quot; /&gt; to return.">Ein Konstruktor für die generische Typdefinition von <paramref name="type" />, die angibt, welcher Konstruktor von <paramref name="type" /> zurückgegeben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;constructor&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;constructor&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> stellt keinen generischen Typ dar.  
  
- oder - 
 <paramref name="type" /> ist nicht vom Typ <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
  
- oder - 
Der deklarierende Typ von <paramref name="constructor" /> ist keine generische Typdefinition.  
  
- oder - 
Der deklarierende Typ von <paramref name="constructor" /> ist nicht die generische Typdefinition von <paramref name="type" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; object that represents the constructor of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;constructor&quot; /&gt;, which specifies a constructor belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">Ein <see cref="T:System.Reflection.ConstructorInfo" />-Objekt, das den Konstruktor von <paramref name="type" /> entsprechend <paramref name="constructor" /> darstellt und einen Konstruktor angibt, der zur generischen Typdefinition von <paramref name="type" /> gehört.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetConstructors(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the public and non-public constructors defined for this class, as specified.">Gibt ein Array von <see cref="T:System.Reflection.ConstructorInfo" />-Objekten zurück, die die für diese Klasse angegebenen definierten öffentlichen und nicht öffentlichen Konstruktoren darstellen.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> wie in <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw. sein.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Diese Methode ist für unvollständige Typen nicht implementiert.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.ConstructorInfo&quot; /&gt; objects representing the specified constructors defined for this class. If no constructors are defined, an empty array is returned.">Gibt ein Array von <see cref="T:System.Reflection.ConstructorInfo" />-Objekten zurück, die die angegebenen Konstruktoren darstellen, die für diese Klasse definiert sind. Wenn keine Konstruktoren definiert sind, wird ein leeres Array zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes defined for this type.">Gibt alle für diesen Typ definierten benutzerdefinierten Attribute zurück.</summary>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Gibt an, ob die Vererbungskette dieses Members nach den Attributen durchsucht werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Diese Methode wird bei unvollständigen Typen derzeit nicht unterstützt. Rufen Sie den Typ mithilfe von <see cref="M:System.Type.GetType" /> ab, und rufen Sie <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> für den zurückgegebenen <see cref="T:System.Type" />auf.</exception>
      <returns vsli:raw="Returns an array of objects representing all the custom attributes of this type.">Gibt ein Objektarray zurück, das alle benutzerdefinierten Attribute dieses Typs darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="Returns all the custom attributes of the current type that are assignable to a specified type.">Gibt alle benutzerdefinierten Attribute des aktuellen Typs zurück, die einem angegebenen Typ zugewiesen werden können.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">Der Typ des zu suchenden Attributs. Nur Attribute, die diesem Typ zugeordnet werden können, werden zurückgegeben.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Gibt an, ob die Vererbungskette dieses Members nach den Attributen durchsucht werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Diese Methode wird bei unvollständigen Typen derzeit nicht unterstützt. Rufen Sie den Typ mithilfe von <see cref="M:System.Type.GetType" /> ab, und rufen Sie <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Boolean)" /> für den zurückgegebenen <see cref="T:System.Type" />auf.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The type must be a type provided by the underlying runtime system.">Der Typ muss ein vom zugrunde liegenden Laufzeitsystem bereitgestellter Typ sein.</exception>
      <returns vsli:raw="An array of custom attributes defined on the current type.">Ein Array benutzerdefinierter Attribute, die für den aktuellen Typ definiert sind.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetElementType">
      <summary vsli:raw="Calling this method always throws &lt;see cref=&quot;T:System.NotSupportedException&quot; /&gt;.">Beim Aufrufen dieser Methode wird immer eine <see cref="T:System.NotSupportedException" /> ausgelöst.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not supported.">Diese Methode wird nicht unterstützt.</exception>
      <returns vsli:raw="This method is not supported. No value is returned.">Diese Methode wird nicht unterstützt. Es wird kein Wert zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvent(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the event with the specified name.">Gibt das Ereignis mit dem angegebenen Namen zurück.</summary>
      <param name="name" vsli:raw="The name of the event to search for.">Der Name des Ereignisses, nach dem gesucht werden soll.</param>
      <param name="bindingAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values that limits the search.">Eine bitweise Kombination von <see cref="T:System.Reflection.BindingFlags" />-Werten, die die Suche einschränkt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Diese Methode ist für unvollständige Typen nicht implementiert.</exception>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; object representing the event declared or inherited by this type with the specified name, or &lt;see langword=&quot;null&quot; /&gt; if there are no matches.">Ein <see cref="T:System.Reflection.EventInfo" />-Objekt, das das Ereignis darstellt, das von diesem Typ mit dem angegebenen Namen deklariert oder geerbt wurde, oder <see langword="null" />, wenn keine Übereinstimmungen vorhanden sind.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents">
      <summary vsli:raw="Returns the public events declared or inherited by this type.">Gibt die öffentlichen Ereignisse zurück, die von diesem Typ deklariert oder geerbt wurden.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Diese Methode ist für unvollständige Typen nicht implementiert.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the public events declared or inherited by this type. An empty array is returned if there are no public events.">Gibt ein Array von <see cref="T:System.Reflection.EventInfo" /> -Objekten zurück, die die öffentlichen Ereignisse darstellen, die von diesem Typ deklariert oder geerbt wurden. Wenn keine öffentlichen Ereignisse vorhanden sind, wird ein leeres Array zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetEvents(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public events that are declared by this type.">Gibt die öffentlichen und nicht öffentlichen Ereignisse zurück, die von diesem Typ deklariert werden.</summary>
      <param name="bindingAttr" vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; values that limits the search.">Eine bitweise Kombination von <see cref="T:System.Reflection.BindingFlags" />-Werten, die die Suche einschränkt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Diese Methode ist für unvollständige Typen nicht implementiert.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; objects representing the events declared or inherited by this type that match the specified binding flags. An empty array is returned if there are no matching events.">Gibt ein Array von <see cref="T:System.Reflection.EventInfo" />-Objekten zurück, die die von diesem Typ deklarierten oder geerbten Ereignisse darstellen, die mit den angegebenen Bindungsflags übereinstimmen. Wenn keine übereinstimmenden Ereignisse vorhanden sind, wird ein leeres Array zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the field specified by the given name.">Gibt das vom angegebenen Namen angegebene Feld zurück.</summary>
      <param name="name" vsli:raw="The name of the field to get.">Der Name des abzurufenden Felds.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> wie in <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw. sein.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Diese Methode ist für unvollständige Typen nicht implementiert.</exception>
      <returns vsli:raw="Returns the &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object representing the field declared or inherited by this type with the specified name and public or non-public modifier. If there are no matches then &lt;see langword=&quot;null&quot; /&gt; is returned.">Gibt das <see cref="T:System.Reflection.FieldInfo" />-Objekt zurück, das das Feld darstellt, das von diesem Typ mit dem angegebenen Namen und dem öffentlichen oder nicht öffentlichen Modifizierer deklariert oder geerbt wurde. Wenn keine Übereinstimmungen vorhanden sind, wird <see langword="null" /> zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetField(System.Type,System.Reflection.FieldInfo)">
      <summary vsli:raw="Returns the field of the specified constructed generic type that corresponds to the specified field of the generic type definition.">Gibt das Feld des angegebenen konstruierten generischen Typs zurück, der dem angegebenen Feld der generischen Typdefinition entspricht.</summary>
      <param name="type" vsli:raw="The constructed generic type whose field is returned.">Der konstruierte generische Typ, dessen Feld zurückgegeben wird.</param>
      <param name="field" vsli:raw="A field on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which field of &lt;paramref name=&quot;type&quot; /&gt; to return.">Ein Feld zur generischen Typdefinition von <paramref name="type" />, das angibt, welches Feld von <paramref name="type" /> zurückgegeben werden muss.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;field&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;field&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="type" /> stellt keinen generischen Typ dar.  
  
- oder - 
 <paramref name="type" /> ist nicht vom Typ <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
  
- oder - 
Der deklarierende Typ von <paramref name="field" /> ist keine generische Typdefinition.  
  
- oder - 
Der deklarierende Typ von <paramref name="field" /> ist nicht die generische Typdefinition von <paramref name="type" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; object that represents the field of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;field&quot; /&gt;, which specifies a field belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">Ein <see cref="T:System.Reflection.FieldInfo" />-Objekt, das das Feld von <paramref name="type" /> darstellt, das <paramref name="field" /> entspricht, welches ein Feld angibt, das zur generischen Typdefinition von <paramref name="type" /> gehört.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetFields(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public fields that are declared by this type.">Gibt die öffentlichen und nicht öffentlichen Felder zurück, die von diesem Typ deklariert werden.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> sein: <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Diese Methode ist für unvollständige Typen nicht implementiert.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.FieldInfo&quot; /&gt; objects representing the public and non-public fields declared or inherited by this type. An empty array is returned if there are no fields, as specified.">Gibt ein Array von <see cref="T:System.Reflection.FieldInfo" />-Objekten zurück, die die öffentlichen und nicht öffentlichen Felder darstellen, die von diesem Typ deklariert oder geerbt werden. Wenn keine Felder vorhanden sind, wird ein leeres Array zurückgegeben, wie angegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericArguments">
      <summary vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the type arguments of a generic type or the type parameters of a generic type definition.">Gibt ein Array von <see cref="T:System.Type" />-Objekten zurück, die die Typargumente eines generischen Typs oder die Typparameter einer generischen Typdefinition darstellen.</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects. The elements of the array represent the type arguments of a generic type or the type parameters of a generic type definition.">Ein Array von <see cref="T:System.Type" />-Objekten. Die Elemente des Arrays stellen die Typargumente eines generischen Typs oder die Typparameter einer generischen Typdefinition dar.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetGenericTypeDefinition">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a generic type definition from which the current type can be obtained.">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das eine generische Typdefinition darstellt, aus der der aktuelle Typ abgerufen werden kann.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current type is not generic. That is, &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">Der aktuelle Typ ist nicht generisch. Das heißt, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" /> gibt <see langword="false" /> zurück.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a generic type definition from which the current type can be obtained.">Ein <see cref="T:System.Type" />-Objekt, das eine generische Typdefinition darstellt, aus der der aktuelle Typ abgerufen werden kann.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterface(System.String,System.Boolean)">
      <summary vsli:raw="Returns the interface implemented (directly or indirectly) by this class with the fully qualified name matching the given interface name.">Gibt die von dieser Klasse (direkt oder indirekt) implementierte Schnittstelle mit dem vollqualifizierten Namen zurück, der dem angegebenen Namen der Schnittstelle entspricht.</summary>
      <param name="name" vsli:raw="The name of the interface.">Der Name der Schnittstelle.</param>
      <param name="ignoreCase" vsli:raw="If &lt;see langword=&quot;true&quot; /&gt;, the search is case-insensitive. If &lt;see langword=&quot;false&quot; /&gt;, the search is case-sensitive.">Falls <see langword="true" />, wird Groß- und Kleinschreibung bei der Suche nicht berücksichtigt. Falls <see langword="false" />, wird Groß- und Kleinschreibung bei der Suche berücksichtigt.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Diese Methode ist für unvollständige Typen nicht implementiert.</exception>
      <returns vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the implemented interface. Returns null if no interface matching name is found.">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das die implementierte Schnittstelle darstellt. Gibt NULL zurück, wenn kein mit der Schnittstelle übereinstimmender Name gefunden wird.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaceMap(System.Type)">
      <summary vsli:raw="Returns an interface mapping for the requested interface.">Gibt eine Schnittstellenzuordnung für die angeforderte Schnittstelle zurück.</summary>
      <param name="interfaceType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the interface for which the mapping is to be retrieved.">Der <see cref="T:System.Type" /> der Schnittstelle, für die die Zuordnung abgerufen werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Diese Methode ist für unvollständige Typen nicht implementiert.</exception>
      <returns vsli:raw="Returns the requested interface mapping.">Gibt die angeforderte Schnittstellenzuordnung zurück.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetInterfaces">
      <summary vsli:raw="Returns an array of all the interfaces implemented on this type and its base types.">Gibt ein Array aller für diesen Typ und die zugehörigen Basistypen implementierten Schnittstellen zurück.</summary>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing the implemented interfaces. If none are defined, an empty array is returned.">Gibt ein Array von <see cref="T:System.Type" />-Objekten zurück, die die implementierten Schnittstellen darstellen. Wenn keine definiert sind, wird ein leeres Array zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public members declared or inherited by this type, as specified.">Gibt alle öffentlichen und nicht öffentlichen Member zurück, die gemäß Angabe von diesem Typ deklariert oder geerbt wurden.</summary>
      <param name="name" vsli:raw="The name of the member.">Der Name des Members.</param>
      <param name="type" vsli:raw="The type of the member to return.">Der Typ des zurückzugebenden Members.</param>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> wie in <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw. sein.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Diese Methode ist für unvollständige Typen nicht implementiert.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public members are returned.">Gibt ein Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten zurück, die die öffentlichen und nicht öffentlichen Member darstellen, die für diesen Typ definiert wurden, wenn <paramref name="nonPublic" /> verwendet wird. Andernfalls werden nur die öffentlichen Member zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMembers(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the members for the public and non-public members declared or inherited by this type.">Gibt alle Member für die öffentlichen und nicht öffentlichen Member zurück, die von diesem Typ deklariert oder geerbt wurden.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, such as &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> sein, z. B. <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Diese Methode ist für unvollständige Typen nicht implementiert.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MemberInfo&quot; /&gt; objects representing the public and non-public members declared or inherited by this type. An empty array is returned if there are no matching members.">Gibt ein Array von <see cref="T:System.Reflection.MemberInfo" />-Objekten zurück, die die öffentlichen und nicht öffentlichen Member darstellen, die von diesem Typ deklariert oder geerbt werden. Wenn keine übereinstimmenden Member vorhanden sind, wird ein leeres Array zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethod(System.Type,System.Reflection.MethodInfo)">
      <summary vsli:raw="Returns the method of the specified constructed generic type that corresponds to the specified method of the generic type definition.">Gibt die Methode des angegebenen konstruierten generischen Typs zurück, der der angegebenen Methode der generischen Typdefinition entspricht.</summary>
      <param name="type" vsli:raw="The constructed generic type whose method is returned.">Der konstruierte generische Typ, dessen Methode zurückgegeben wird.</param>
      <param name="method" vsli:raw="A method on the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;, which specifies which method of &lt;paramref name=&quot;type&quot; /&gt; to return.">Eine Methode für die generische Typdefinition von <paramref name="type" />, die angibt, welche Methode von <paramref name="type" /> zurückgegeben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is a generic method that is not a generic method definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; does not represent a generic type.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;type&quot; /&gt; is not of type &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;method&quot; /&gt; is not a generic type definition.  &#xA;  &#xA; -or-  &#xA;  &#xA; The declaring type of &lt;paramref name=&quot;method&quot; /&gt; is not the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">
        <paramref name="method" /> ist eine generische Methode, aber keine generische Methodendefinition.  
  
- oder - 
 <paramref name="type" /> stellt keinen generischen Typ dar.  
  
- oder - 
 <paramref name="type" /> ist nicht vom Typ <see cref="T:System.Reflection.Emit.TypeBuilder" />.  
  
- oder - 
Der deklarierende Typ von <paramref name="method" /> ist keine generische Typdefinition.  
  
- oder - 
Der deklarierende Typ von <paramref name="method" /> ist nicht die generische Typdefinition von <paramref name="type" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object that represents the method of &lt;paramref name=&quot;type&quot; /&gt; corresponding to &lt;paramref name=&quot;method&quot; /&gt;, which specifies a method belonging to the generic type definition of &lt;paramref name=&quot;type&quot; /&gt;.">Ein <see cref="T:System.Reflection.MethodInfo" />-Objekt, das die Methode von <paramref name="type" /> entsprechend <paramref name="method" /> darstellt und eine Methode angibt, die zur generischen Typdefinition von <paramref name="type" /> gehört.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetMethods(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public methods declared or inherited by this type, as specified.">Gibt alle öffentlichen und nicht öffentlichen Methoden zurück, die gemäß Angabe von diesem Typ deklariert oder geerbt wurden.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> wie in <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw. sein.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Diese Methode ist für unvollständige Typen nicht implementiert.</exception>
      <returns vsli:raw="Returns an array of &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; objects representing the public and non-public methods defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public methods are returned.">Gibt ein Array von <see cref="T:System.Reflection.MethodInfo" />-Objekten zurück, die die öffentlichen und nicht öffentlichen Methoden darstellen, die für diesen Typ definiert wurden, wenn <paramref name="nonPublic" /> verwendet wird. Andernfalls werden nur die öffentlichen Methoden zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedType(System.String,System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared by this type.">Gibt die öffentlichen und nicht öffentlichen geschachtelten Typen zurück, die von diesem Typ deklariert werden.</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; containing the name of the nested type to get.">Das <see cref="T:System.String" />, das den Namen des abzurufenden geschachtelten Typs enthält.</param>
      <param name="bindingAttr" vsli:raw="A bitmask comprised of one or more &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; that specify how the search is conducted.  &#xA;  &#xA; -or-  &#xA;  &#xA; Zero, to conduct a case-sensitive search for public methods.">Eine Bitmaske aus einem oder mehreren <see cref="T:System.Reflection.BindingFlags" />, die angeben, wie die Suche durchgeführt wird.  
  
- oder - 
Null, um eine Suche nach öffentlichen Methoden mit Beachtung der Groß-/Kleinschreibung durchzuführen.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Diese Methode ist für unvollständige Typen nicht implementiert.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing the nested type that matches the specified requirements, if found; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Ein <see cref="T:System.Type" />-Objekt, das den geschachtelten Typ darstellt, der den angegebenen Anforderungen entspricht, sofern gefunden, andernfalls <see langword="null" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetNestedTypes(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns the public and non-public nested types that are declared or inherited by this type.">Gibt die öffentlichen und nicht öffentlichen geschachtelten Typen zurück, die von diesem Typ deklariert oder geerbt werden.</summary>
      <param name="bindingAttr" vsli:raw="This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt;, as in &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> wie in <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw. sein.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Diese Methode ist für unvollständige Typen nicht implementiert.</exception>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.Type&quot; /&gt; objects representing all the types nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt; that match the specified binding constraints.  &#xA;  &#xA; An empty array of type &lt;see cref=&quot;T:System.Type&quot; /&gt;, if no types are nested within the current &lt;see cref=&quot;T:System.Type&quot; /&gt;, or if none of the nested types match the binding constraints.">Ein Array von <see cref="T:System.Type" />-Objekten, die sämtliche im aktuellen <see cref="T:System.Type" /> geschachtelten Typen darstellen, die den angegebenen Bindungseinschränkungen entsprechen.  
  
Ein leeres Array vom Typ <see cref="T:System.Type" />, wenn im aktuellen <see cref="T:System.Type" /> keine Typen geschachtelt sind oder keiner der geschachtelten Typen den Bindungseinschränkungen entspricht.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.GetProperties(System.Reflection.BindingFlags)">
      <summary vsli:raw="Returns all the public and non-public properties declared or inherited by this type, as specified.">Gibt alle öffentlichen und nicht öffentlichen Eigenschaften zurück, die gemäß Angabe von diesem Typ deklariert oder geerbt wurden.</summary>
      <param name="bindingAttr" vsli:raw="This invocation attribute. This must be a bit flag from &lt;see cref=&quot;T:System.Reflection.BindingFlags&quot; /&gt; : &lt;see langword=&quot;InvokeMethod&quot; /&gt;, &lt;see langword=&quot;NonPublic&quot; /&gt;, and so on.">Dieses Aufrufattribut. Dies muss ein Bitflag aus <see cref="T:System.Reflection.BindingFlags" /> sein: <see langword="InvokeMethod" />, <see langword="NonPublic" /> usw.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not implemented for incomplete types.">Diese Methode ist für unvollständige Typen nicht implementiert.</exception>
      <returns vsli:raw="Returns an array of &lt;see langword=&quot;PropertyInfo&quot; /&gt; objects representing the public and non-public properties defined on this type if &lt;paramref name=&quot;nonPublic&quot; /&gt; is used; otherwise, only the public properties are returned.">Gibt ein Array von <see langword="PropertyInfo" />-Objekten zurück, die die öffentlichen und nicht öffentlichen Eigenschaften darstellen, die für diesen Typ definiert wurden, wenn <paramref name="nonPublic" /> verwendet wird. Andernfalls werden nur die öffentlichen Eigenschaften zurückgegeben.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])">
      <summary vsli:raw="Invokes the specified member. The method that is to be invoked must be accessible and provide the most specific match with the specified argument list, under the constraints of the specified binder and invocation attributes.">Ruft den angegebenen Member auf. Die Methode, die aufgerufen werden soll, muss zugänglich sein und mit der angegebenen Argumentliste unter den Einschränkungen des angegebenen Binders und der Aufrufattribute die spezifischste Übereinstimmung bereitstellen.</summary>
      <param name="name" vsli:raw="The name of the member to invoke. This can be a constructor, method, property, or field. A suitable invocation attribute must be specified. Note that it is possible to invoke the default member of a class by passing an empty string as the name of the member.">Der Name des aufzurufenden Members. Dies kann ein Konstruktor, eine Methode, eine Eigenschaft oder ein Feld sein. Es muss ein geeignetes Aufrufattribut angegeben werden. Beachten Sie, dass es möglich ist, den Standardmember einer Klasse aufzurufen, indem Sie eine leere Zeichenfolge als Name des Members übergeben.</param>
      <param name="invokeAttr" vsli:raw="The invocation attribute. This must be a bit flag from &lt;see langword=&quot;BindingFlags&quot; /&gt;.">Das Attribut für den Aufruf. Dies muss ein Bitflag aus <see langword="BindingFlags" /> sein.</param>
      <param name="binder" vsli:raw="An object that enables the binding, coercion of argument types, invocation of members, and retrieval of &lt;see langword=&quot;MemberInfo&quot; /&gt; objects using reflection. If binder is &lt;see langword=&quot;null&quot; /&gt;, the default binder is used. See &lt;see cref=&quot;T:System.Reflection.Binder&quot; /&gt;.">Ein Objekt, das die Bindung, die Umwandlung von Argumenttypen, das Aufrufen von Membern und das Abrufen von <see langword="MemberInfo" />-Objekten über Reflektion ermöglicht. Wenn „binder“ gleich <see langword="null" />ist, wird der Standardbinder verwendet. Siehe <see cref="T:System.Reflection.Binder" />.</param>
      <param name="target" vsli:raw="The object on which to invoke the specified member. If the member is static, this parameter is ignored.">Das Objekt, für das der angegebene Member aufgerufen werden soll. Wenn der Member statisch ist, wird dieser Parameter ignoriert.</param>
      <param name="args" vsli:raw="An argument list. This is an array of Objects that contains the number, order, and type of the parameters of the member to be invoked. If there are no parameters this should be null.">Eine Argumentliste. Dies ist ein Array von Objekten, das die Anzahl, Reihenfolge und den Typ der Parameter des aufzurufenden Members enthält. Wenn keine Parameter vorhanden sind, muss dies gleich NULL sein.</param>
      <param name="modifiers" vsli:raw="An array of the same length as &lt;paramref name=&quot;args&quot; /&gt; with elements that represent the attributes associated with the arguments of the member to be invoked. A parameter has attributes associated with it in the metadata. They are used by various interoperability services. See the metadata specs for more details.">Ein Array derselben Länge wie <paramref name="args" /> mit Elementen, die die Argumente darstellen, die den Argumenten des aufzurufenden Members zugeordnet sind. Ein Parameter verfügt über Attribute, die ihm in den Metadaten zugeordnet werden. Sie werden von verschiedenen Interoperabilitätsdiensten verwendet. Weitere Informationen finden Sie in den Metadatenspezifikationen.</param>
      <param name="culture" vsli:raw="An instance of &lt;see langword=&quot;CultureInfo&quot; /&gt; used to govern the coercion of types. If this is null, the &lt;see langword=&quot;CultureInfo&quot; /&gt; for the current thread is used. (Note that this is necessary to, for example, convert a String that represents 1000 to a Double value, since 1000 is represented differently by different cultures.)">Eine Instanz von <see langword="CultureInfo" /> für die Steuerung der Umwandlung von Typen. Ist diese gleich NULL, wird das <see langword="CultureInfo" /> -Objekt des aktuellen Threads verwendet. (Dies ist z. B. erforderlich, um eine Zeichenfolge, die 1000 darstellt, in einen Double-Wert zu konvertieren, da 1000 in verschiedenen Kulturen unterschiedlich dargestellt wird.)</param>
      <param name="namedParameters" vsli:raw="Each parameter in the &lt;paramref name=&quot;namedParameters&quot; /&gt; array gets the value in the corresponding element in the &lt;paramref name=&quot;args&quot; /&gt; array. If the length of &lt;paramref name=&quot;args&quot; /&gt; is greater than the length of &lt;paramref name=&quot;namedParameters&quot; /&gt;, the remaining argument values are passed in order.">Jeder Parameter im <paramref name="namedParameters" />-Array ruft den Wert im entsprechenden Element im <paramref name="args" />-Array ab. Wenn die Länge von <paramref name="args" /> größer als die Länge von <paramref name="namedParameters" /> ist, werden die restlichen Argumentwerte in der Reihenfolge übergeben.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types.">Diese Methode wird bei unvollständigen Typen derzeit nicht unterstützt.</exception>
      <returns vsli:raw="Returns the return value of the invoked member.">Gibt den Rückgabewert des aufgerufenen Members zurück.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsAssignableFrom(System.Type)">
      <summary vsli:raw="Gets a value that indicates whether a specified &lt;see cref=&quot;T:System.Type&quot; /&gt; can be assigned to this object.">Ruft einen Wert ab, der angibt, ob ein angegebenes <see cref="T:System.Type" /> diesem Objekt zugeordnet werden kann.</summary>
      <param name="c" vsli:raw="The object to test.">Das zu überprüfende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;c&quot; /&gt; parameter and the current type represent the same type, or if the current type is in the inheritance hierarchy of &lt;paramref name=&quot;c&quot; /&gt;, or if the current type is an interface that &lt;paramref name=&quot;c&quot; /&gt; supports. &lt;see langword=&quot;false&quot; /&gt; if none of these conditions are valid, or if &lt;paramref name=&quot;c&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="true" />, wenn der <paramref name="c" />-Parameter und der aktuelle Typ denselben Typ darstellen, oder wenn sich der aktuelle Typ in der Vererbungshierarchie von <paramref name="c" /> befindet, oder wenn der aktuelle Typ eine Schnittstelle ist, die von <paramref name="c" /> unterstützt wird. <see langword="false" />, wenn keine dieser Bedingungen gültig sind oder wenn <paramref name="c" /><see langword="null" /> ist.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsCreated">
      <summary vsli:raw="Returns a value that indicates whether the current dynamic type has been created.">Gibt einen Wert zurück, der angibt, ob der aktuelle dynamische Typ erstellt wurde.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method has been called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />-Methode aufgerufen wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Determines whether a custom attribute is applied to the current type.">Bestimmt, ob ein benutzerdefiniertes Attribut auf den aktuellen Typ angewendet wird.</summary>
      <param name="attributeType" vsli:raw="The type of attribute to search for. Only attributes that are assignable to this type are returned.">Der Typ des zu suchenden Attributs. Nur Attribute, die diesem Typ zugeordnet werden können, werden zurückgegeben.</param>
      <param name="inherit" vsli:raw="Specifies whether to search this member's inheritance chain to find the attributes.">Gibt an, ob die Vererbungskette dieses Members nach den Attributen durchsucht werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types. Retrieve the type using &lt;see cref=&quot;M:System.Type.GetType&quot; /&gt; and call &lt;see cref=&quot;M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)&quot; /&gt; on the returned &lt;see cref=&quot;T:System.Type&quot; /&gt;.">Diese Methode wird bei unvollständigen Typen derzeit nicht unterstützt. Rufen Sie den Typ mithilfe von <see cref="M:System.Type.GetType" /> ab, und rufen Sie <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> für den zurückgegebenen <see cref="T:System.Type" />auf.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is not defined.">
        <paramref name="attributeType" /> ist nicht definiert.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if one or more instances of &lt;paramref name=&quot;attributeType&quot; /&gt;, or an attribute derived from &lt;paramref name=&quot;attributeType&quot; /&gt;, is defined on this type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn mindestens eine Instanz von <paramref name="attributeType" /> oder ein von <paramref name="attributeType" /> abgeleitetes Attribut für diesen Typ definiert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.IsSubclassOf(System.Type)">
      <summary vsli:raw="Determines whether this type is derived from a specified type.">Bestimmt, ob dieser Typ von einem angegebenen Typ abgeleitet ist.</summary>
      <param name="c" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that is to be checked.">Ein zu prüfender <see cref="T:System.Type" />.</param>
      <returns vsli:raw="Read-only. Returns &lt;see langword=&quot;true&quot; /&gt; if this type is the same as the type &lt;paramref name=&quot;c&quot; /&gt;, or is a subtype of type &lt;paramref name=&quot;c&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">Schreibgeschützt. Gibt <see langword="true" /> zurück, wenn dieser Typ dem Typ <paramref name="c" /> entspricht oder ein Untertyp von Typ <paramref name="c" /> ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a one-dimensional array of the current type, with a lower bound of zero.">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das ein eindimensionales Array vom aktuellen Typ mit einer unteren Grenze von 0 (null) darstellt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object representing a one-dimensional array type whose element type is the current type, with a lower bound of zero.">Ein <see cref="T:System.Type" />-Objekt, das einen eindimensionalen Arraytyp, dessen Elementtyp dem aktuellen Typ entspricht, mit einer unteren Grenze von 0 (null) darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeArrayType(System.Int32)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents an array of the current type, with the specified number of dimensions.">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das ein Array vom aktuellen Typ mit der angegebenen Anzahl von Dimensionen darstellt.</summary>
      <param name="rank" vsli:raw="The number of dimensions for the array.">Die Anzahl von Dimensionen für das Array.</param>
      <exception cref="T:System.IndexOutOfRangeException" vsli:raw="&lt;paramref name=&quot;rank&quot; /&gt; is not a valid array dimension.">
        <paramref name="rank" /> ist keine gültige Arraydimension.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents a one-dimensional array of the current type.">Ein <see cref="T:System.Type" />-Objekt, das ein eindimensionales Array des aktuellen Typs darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeByRefType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a &lt;see langword=&quot;ref&quot; /&gt; parameter (&lt;see langword=&quot;ByRef&quot; /&gt; in Visual Basic).">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das beim Übergeben als <see langword="ref" />-Parameter (<see langword="ByRef" /> in Visual Basic) den aktuellen Typ darstellt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the current type when passed as a &lt;see langword=&quot;ref&quot; /&gt; parameter (&lt;see langword=&quot;ByRef&quot; /&gt; in Visual Basic).">Ein <see cref="T:System.Type" />-Objekt, das beim Übergeben als <see langword="ref" />-Parameter (<see langword="ByRef" /> in Visual Basic) den aktuellen Typ darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakeGenericType(System.Type[])">
      <summary vsli:raw="Substitutes the elements of an array of types for the type parameters of the current generic type definition, and returns the resulting constructed type.">Ersetzt die Typparameter der aktuellen generischen Typdefinition durch die Elemente eines Arrays von Typen und gibt den resultierenden konstruierten Typ zurück.</summary>
      <param name="typeArguments" vsli:raw="An array of types to be substituted for the type parameters of the current generic type definition.">Ein Array von Typen, die die Typparameter der aktuellen generischen Typdefinition ersetzen sollen.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The current type does not represent the definition of a generic type. That is, &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; returns &lt;see langword=&quot;false&quot; /&gt;.">Der aktuelle Typ stellt keine Definition eines generischen Typs dar. Das heißt, <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" /> gibt <see langword="false" /> zurück.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="typeArguments" /> ist <see langword="null" />.  
  
- oder - 
Eines der Elemente von <paramref name="typeArguments" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.Type.Module&quot; /&gt; property of any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;P:System.Reflection.Module.Assembly&quot; /&gt; property of the module of any element of &lt;paramref name=&quot;typeArguments&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Die <see cref="P:System.Type.Module" />-Eigenschaft eines beliebigen Elements von <paramref name="typeArguments" /> ist <see langword="null" />.  
  
- oder - 
Die <see cref="P:System.Reflection.Module.Assembly" />-Eigenschaft des Moduls eines beliebigen Elements von <paramref name="typeArguments" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; representing the constructed type formed by substituting the elements of &lt;paramref name=&quot;typeArguments&quot; /&gt; for the type parameters of the current generic type.">Ein <see cref="T:System.Type" />, der den konstruierten Typ darstellt, der durch Ersetzen der Typparameter des aktuellen generischen Typs durch die Elemente von <paramref name="typeArguments" /> erstellt wurde.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.MakePointerType">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an unmanaged pointer to the current type.">Gibt ein <see cref="T:System.Type" />-Objekt zurück, das den Typ eines nicht verwalteten Zeigers auf den aktuellen Typ darstellt.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the type of an unmanaged pointer to the current type.">Ein <see cref="T:System.Type" />-Objekt, das den Typ eines nicht verwalteten Zeigers auf den aktuellen Typ darstellt.</returns>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.ConstructorInfo,System.Byte[])">
      <summary vsli:raw="Sets a custom attribute using a specified custom attribute blob.">Legt ein benutzerdefiniertes Attribut mithilfe eines angegebenen benutzerdefinierten Attribut-BLOBs fest.</summary>
      <param name="con" vsli:raw="The constructor for the custom attribute.">Der Konstruktor für das benutzerdefinierte Attribut.</param>
      <param name="binaryAttribute" vsli:raw="A byte blob representing the attributes.">Ein Byte-BLOB, das die Attribute darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;con&quot; /&gt; or &lt;paramref name=&quot;binaryAttribute&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="con" /> oder <paramref name="binaryAttribute" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetCustomAttribute(System.Reflection.Emit.CustomAttributeBuilder)">
      <summary vsli:raw="Set a custom attribute using a custom attribute builder.">Legt ein benutzerdefiniertes Attribut mithilfe eines benutzerdefinierten Attribut-Generators fest.</summary>
      <param name="customBuilder" vsli:raw="An instance of a helper class to define the custom attribute.">Eine Instanz einer Hilfsklasse zum Definieren des benutzerdefinierten Attributs.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;customBuilder&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="customBuilder" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.SetParent(System.Type)">
      <summary vsli:raw="Sets the base type of the type currently under construction.">Legt den Basistyp des Typs fest, der sich derzeit in Bearbeitung befindet.</summary>
      <param name="parent" vsli:raw="The new base type.">Der neue Basistyp.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The type was previously created using &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;parent&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, and the current instance represents an interface whose attributes do not include &lt;see cref=&quot;F:System.Reflection.TypeAttributes.Abstract&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; For the current dynamic type, the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericType&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;, but the &lt;see cref=&quot;P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt;.">Der Typ wurde zuvor mit <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />erstellt.  
  
- oder - 
 <paramref name="parent" /> ist <see langword="null" />, und die aktuelle Instanz stellt eine Schnittstelle dar, deren Attribute <see cref="F:System.Reflection.TypeAttributes.Abstract" /> nicht einbeziehen.  
  
- oder - 
Für den aktuellen dynamischen Typ ist die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericType" />-Eigenschaft <see langword="true" />, aber die <see cref="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition" />-Eigenschaft ist <see langword="false" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;parent&quot; /&gt; is an interface. This exception condition is new in the .NET Framework version 2.0.">
        <paramref name="parent" /> ist eine Schnittstelle. Diese Ausnahmebedingung ist neu in .NET Framework, Version 2.0.</exception>
    </member>
    <member name="M:System.Reflection.Emit.TypeBuilder.ToString">
      <summary vsli:raw="Returns the name of the type excluding the namespace.">Gibt den Namen des Typs ohne den Namespace zurück.</summary>
      <returns vsli:raw="Read-only. The name of the type excluding the namespace.">Schreibgeschützt. Der Name des Typs ohne den Namespace.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Assembly">
      <summary vsli:raw="Retrieves the dynamic assembly that contains this type definition.">Ruft die dynamische Assembly ab, die diese Typdefinition enthält.</summary>
      <returns vsli:raw="Read-only. Retrieves the dynamic assembly that contains this type definition.">Schreibgeschützt. Ruft die dynamische Assembly ab, die diese Typdefinition enthält.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.AssemblyQualifiedName">
      <summary vsli:raw="Returns the full name of this type qualified by the display name of the assembly.">Gibt den vollständigen Name des Typs zurück, der durch den Anzeigenamen der Assembly gekennzeichnet ist.</summary>
      <returns vsli:raw="Read-only. The full name of this type qualified by the display name of the assembly.">Schreibgeschützt. Der vollständige Name des Typs, der durch den Anzeigenamen der Assembly gekennzeichnet ist.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.BaseType">
      <summary vsli:raw="Retrieves the base type of this type.">Ruft den Basistyp dieses Typs ab.</summary>
      <returns vsli:raw="Read-only. Retrieves the base type of this type.">Schreibgeschützt. Ruft den Basistyp dieses Typs ab.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringMethod">
      <summary vsli:raw="Gets the method that declared the current generic type parameter.">Ruft die Methode ab, die den aktuellen generischen Typparameter deklariert hat.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.MethodBase&quot; /&gt; that represents the method that declared the current type, if the current type is a generic type parameter; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">Eine <see cref="T:System.Reflection.MethodBase" /> zur Darstellung der Methode, die den aktuellen Typ deklariert hat, wenn der aktuelle Typ ein generischer Typparameter ist, andernfalls <see langword="null" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.DeclaringType">
      <summary vsli:raw="Returns the type that declared this type.">Gibt den Typ zurück, der diesen Typ deklariert hat.</summary>
      <returns vsli:raw="Read-only. The type that declared this type.">Schreibgeschützt. Der Typ, der diesen Typ deklariert hat.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.FullName">
      <summary vsli:raw="Retrieves the full path of this type.">Ruft den vollständigen Pfad dieses Typs ab.</summary>
      <returns vsli:raw="Read-only. Retrieves the full path of this type.">Schreibgeschützt. Ruft den vollständigen Pfad dieses Typs ab.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterAttributes">
      <summary vsli:raw="Gets a value that indicates the covariance and special constraints of the current generic type parameter.">Ruft einen Wert ab, der die Kovarianz und die speziellen Einschränkungen des aktuellen generischen Typparameters angibt.</summary>
      <returns vsli:raw="A bitwise combination of &lt;see cref=&quot;T:System.Reflection.GenericParameterAttributes&quot; /&gt; values that describes the covariance and special constraints of the current generic type parameter.">Eine bitweise Kombination von <see cref="T:System.Reflection.GenericParameterAttributes" />-Werten, die die Kovarianz und die speziellen Einschränkungen des aktuellen generischen Typparameters beschreiben.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GenericParameterPosition">
      <summary vsli:raw="Gets the position of a type parameter in the type parameter list of the generic type that declared the parameter.">Ruft die Position eines Typparameters in der Typparameterliste des generischen Typs ab, der den Parameter deklariert hat.</summary>
      <returns vsli:raw="If the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type parameter, the position of the type parameter in the type parameter list of the generic type that declared the parameter; otherwise, undefined.">Die Position des Typparameters in der Typparameterliste des generischen Typs, der den Parameter deklariert hat, wenn das aktuelle <see cref="T:System.Reflection.Emit.TypeBuilder" />-Objekt einen generischen Typparameter darstellt, andernfalls nicht definiert.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.GUID">
      <summary vsli:raw="Retrieves the GUID of this type.">Ruft die GUID dieses Typs ab.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="This method is not currently supported for incomplete types.">Diese Methode wird bei unvollständigen Typen derzeit nicht unterstützt.</exception>
      <returns vsli:raw="Read-only. Retrieves the GUID of this type.">Schreibgeschützt. Ruft die GUID dieses Typs ab.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsByRefLike" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsConstructedGenericType">
      <summary vsli:raw="Gets a value that indicates whether this object represents a constructed generic type.">Ruft einen Wert ab, der angibt, ob dieses Objekt einen konstruierten generischen Typ darstellt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object represents a constructed generic type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Objekt einen konstruierten generischen Typ darstellt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericParameter">
      <summary vsli:raw="Gets a value indicating whether the current type is a generic type parameter.">Ruft einen Wert ab, der angibt, ob der aktuelle Typ ein generischer Typparameter ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type parameter; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das aktuelle <see cref="T:System.Reflection.Emit.TypeBuilder" />-Objekt einen generischen Typparameter darstellt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericType">
      <summary vsli:raw="Gets a value indicating whether the current type is a generic type.">Ruft einen Wert ab, der angibt, ob der aktuelle Typ ein generischer Typ ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type represented by the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object is generic; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der durch das aktuelle <see cref="T:System.Reflection.Emit.TypeBuilder" />-Objekt dargestellte Typ generisch ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsGenericTypeDefinition">
      <summary vsli:raw="Gets a value indicating whether the current &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; represents a generic type definition from which other generic types can be constructed.">Ruft einen Wert ab, der angibt, ob der aktuelle <see cref="T:System.Reflection.Emit.TypeBuilder" /> eine generische Typdefinition darstellt, aus der andere generische Typen konstruiert werden können.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Reflection.Emit.TypeBuilder&quot; /&gt; object represents a generic type definition; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses <see cref="T:System.Reflection.Emit.TypeBuilder" />-Objekt eine generische Typdefinition darstellt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityCritical">
      <summary vsli:raw="Gets a value that indicates whether the current type is security-critical or security-safe-critical, and therefore can perform critical operations.">Ruft einen Wert ab, der angibt, ob der aktuelle Typ sicherheitsrelevant ist und daher wichtige Vorgänge ausführen darf.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">Der aktuelle dynamische Typ wurde nicht durch Aufrufen der <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />-Methode erstellt.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current type is security-critical or security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is transparent.">
        <see langword="true" />, wenn der aktuelle Typ sicherheitsrelevant ist. <see langword="false" />, wenn er sicherheitstransparent ist.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecuritySafeCritical">
      <summary vsli:raw="Gets a value that indicates whether the current type is security-safe-critical; that is, whether it can perform critical operations and can be accessed by transparent code.">Ruft einen Wert ab, der angibt, ob der aktuelle Typ sicherheitsgeschützt ist, d. h. ob er wichtige Vorgänge ausführen darf und ob von transparentem Code auf ihn zugegriffen werden kann.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">Der aktuelle dynamische Typ wurde nicht durch Aufrufen der <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />-Methode erstellt.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current type is security-safe-critical; &lt;see langword=&quot;false&quot; /&gt; if it is security-critical or transparent.">
        <see langword="true" />, wenn der aktuelle Typ sicherheitsgeschützt ist. <see langword="false" />, wenn er sicherheitsgeschützt oder transparent ist.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSecurityTransparent">
      <summary vsli:raw="Gets a value that indicates whether the current type is transparent, and therefore cannot perform critical operations.">Ruft einen Wert ab, der angibt, ob der aktuelle Typ transparent ist und daher keine wichtigen Vorgänge ausführen kann.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="The current dynamic type has not been created by calling the &lt;see cref=&quot;M:System.Reflection.Emit.TypeBuilder.CreateType&quot; /&gt; method.">Der aktuelle dynamische Typ wurde nicht durch Aufrufen der <see cref="M:System.Reflection.Emit.TypeBuilder.CreateType" />-Methode erstellt.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is security-transparent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Typ sicherheitstransparent ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.IsSZArray" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsTypeDefinition" />
    <member name="P:System.Reflection.Emit.TypeBuilder.IsVariableBoundArray" />
    <member name="P:System.Reflection.Emit.TypeBuilder.Module">
      <summary vsli:raw="Retrieves the dynamic module that contains this type definition.">Ruft das dynamische Modul ab, das diese Typdefinition enthält.</summary>
      <returns vsli:raw="Read-only. Retrieves the dynamic module that contains this type definition.">Schreibgeschützt. Ruft das dynamische Modul ab, das diese Typdefinition enthält.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Name">
      <summary vsli:raw="Retrieves the name of this type.">Ruft den Namen dieses Typs ab.</summary>
      <returns vsli:raw="Read-only. Retrieves the &lt;see cref=&quot;T:System.String&quot; /&gt; name of this type.">Schreibgeschützt. Ruft den <see cref="T:System.String" />-Namen dieses Typs ab.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Namespace">
      <summary vsli:raw="Retrieves the namespace where this &lt;see langword=&quot;TypeBuilder&quot; /&gt; is defined.">Ruft den Namespace ab, in dem dieser <see langword="TypeBuilder" /> definiert ist.</summary>
      <returns vsli:raw="Read-only. Retrieves the namespace where this &lt;see langword=&quot;TypeBuilder&quot; /&gt; is defined.">Schreibgeschützt. Ruft den Namespace ab, in dem dieser <see langword="TypeBuilder" /> definiert ist.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.PackingSize">
      <summary vsli:raw="Retrieves the packing size of this type.">Ruft die Komprimierungsgröße dieses Typs ab.</summary>
      <returns vsli:raw="Read-only. Retrieves the packing size of this type.">Schreibgeschützt. Ruft die Komprimierungsgröße dieses Typs ab.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.ReflectedType">
      <summary vsli:raw="Returns the type that was used to obtain this type.">Gibt den Typ zurück, mit dem dieser Typ abgerufen wurde.</summary>
      <returns vsli:raw="Read-only. The type that was used to obtain this type.">Schreibgeschützt. Der Typ, mit dem dieser Typ abgerufen wurde.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.Size">
      <summary vsli:raw="Retrieves the total size of a type.">Ruft die Gesamtgröße eines Typs ab.</summary>
      <returns vsli:raw="Read-only. Retrieves this type's total size.">Schreibgeschützt. Ruft die Gesamtgröße dieses Typs ab.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.TypeHandle">
      <summary vsli:raw="Not supported in dynamic modules.">Wird in dynamischen Modulen nicht unterstützt.</summary>
      <exception cref="T:System.NotSupportedException" vsli:raw="Not supported in dynamic modules.">Wird in dynamischen Modulen nicht unterstützt.</exception>
      <returns vsli:raw="Read-only.">Schreibgeschützt.</returns>
    </member>
    <member name="P:System.Reflection.Emit.TypeBuilder.UnderlyingSystemType">
      <summary vsli:raw="Returns the underlying system type for this &lt;see langword=&quot;TypeBuilder&quot; /&gt;.">Gibt den zugrunde liegenden Systemtyp für diesen <see langword="TypeBuilder" /> zurück.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This type is an enumeration, but there is no underlying system type.">Dieser Typ ist eine Enumeration, aber es ist kein zugrunde liegender Systemtyp vorhanden.</exception>
      <returns vsli:raw="Read-only. Returns the underlying system type.">Schreibgeschützt. Gibt den zugrunde liegenden Systemtyp zurück.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Diagnostics.StackTrace</name>
  </assembly>
  <members>
    <member name="T:System.Diagnostics.StackFrame">
      <summary vsli:raw="Provides information about a &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt;, which represents a function call on the call stack for the current thread.">Stellt Informationen zu einem <see cref="T:System.Diagnostics.StackFrame" /> bereit, der einen Funktionsaufruf in der Aufrufliste für den aktuellen Thread darstellt.</summary>
    </member>
    <member name="F:System.Diagnostics.StackFrame.OFFSET_UNKNOWN">
      <summary vsli:raw="Defines the value that is returned from the &lt;see cref=&quot;M:System.Diagnostics.StackFrame.GetNativeOffset&quot; /&gt; or &lt;see cref=&quot;M:System.Diagnostics.StackFrame.GetILOffset&quot; /&gt; method when the native or Microsoft intermediate language (MSIL) offset is unknown. This field is constant.">Definiert den Wert, der von der <see cref="M:System.Diagnostics.StackFrame.GetNativeOffset" />-Methode oder der <see cref="M:System.Diagnostics.StackFrame.GetILOffset" />-Methode zurückgegeben wird, wenn der Offset in MSIL (Microsoft Intermediate Language) oder der systemeigenen Sprache nicht bekannt ist. Dieses Feld ist konstant.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackFrame" />-Klasse.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class, optionally capturing source information.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackFrame" />-Klasse und zeichnet optional Quellinformationen auf.</summary>
      <param name="needFileInfo" vsli:raw="" />
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that corresponds to a frame above the current stack frame.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackFrame" />-Klasse, die einem Rahmen über dem aktuellen Stapelrahmen entspricht.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack to skip.">Die Anzahl der zu überspringenden Stapelrahmen.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that corresponds to a frame above the current stack frame, optionally capturing source information.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackFrame" />-Klasse, die einem Rahmen über dem aktuellen Stapelrahmen entspricht, und zeichnet optional Quellinformationen auf.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack to skip.">Die Anzahl der zu überspringenden Stapelrahmen.</param>
      <param name="needFileInfo" vsli:raw="" />
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that contains only the given file name and line number.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackFrame" />-Klasse, die nur den angegebenen Dateinamen und die angegebene Zeilennummer enthält.</summary>
      <param name="fileName" vsli:raw="The file name.">Der Dateiname.</param>
      <param name="lineNumber" vsli:raw="The line number in the specified file.">Die Zeilennummer in der angegebenen Datei.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.#ctor(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class that contains only the given file name, line number, and column number.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackFrame" />-Klasse, die nur den angegebenen Dateinamen, die angegebene Zeilennummer und die angegebene Spaltennummer enthält.</summary>
      <param name="fileName" vsli:raw="The file name.">Der Dateiname.</param>
      <param name="lineNumber" vsli:raw="The line number in the specified file.">Die Zeilennummer in der angegebenen Datei.</param>
      <param name="colNumber" vsli:raw="The column number in the specified file.">Die Spaltennummer in der angegebenen Datei.</param>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileColumnNumber">
      <summary vsli:raw="Gets the column number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">Ruft die Spaltennummer in der Datei mit dem ausgeführten Code ab. Diese Informationen werden i. d. R. aus den Debugsymbolen für das ausführbare Programm extrahiert.</summary>
      <returns vsli:raw="The file column number, or 0 (zero) if the file column number cannot be determined.">Die Dateispaltennummer oder 0 (null), wenn die Dateispaltennummer nicht bestimmt werden kann.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileLineNumber">
      <summary vsli:raw="Gets the line number in the file that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">Ruft die Zeilennummer in der Datei mit dem ausgeführten Code ab. Diese Informationen werden i. d. R. aus den Debugsymbolen für das ausführbare Programm extrahiert.</summary>
      <returns vsli:raw="The file line number, or 0 (zero) if the file line number cannot be determined.">Die Dateizeilennummer oder 0 (null), wenn die Dateizeilennummer nicht bestimmt werden kann.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetFileName">
      <summary vsli:raw="Gets the file name that contains the code that is executing. This information is typically extracted from the debugging symbols for the executable.">Ruft den Dateinamen mit dem ausgeführten Code ab. Diese Informationen werden i. d. R. aus den Debugsymbolen für das ausführbare Programm extrahiert.</summary>
      <returns vsli:raw="The file name, or &lt;see langword=&quot;null&quot; /&gt; if the file name cannot be determined.">Der Dateiname oder <see langword="null" />, wenn der Dateiname nicht bestimmt werden kann.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetILOffset">
      <summary vsli:raw="Gets the offset from the start of the Microsoft intermediate language (MSIL) code for the method that is executing. This offset might be an approximation depending on whether or not the just-in-time (JIT) compiler is generating debugging code. The generation of this debugging information is controlled by the &lt;see cref=&quot;T:System.Diagnostics.DebuggableAttribute&quot; /&gt;.">Ruft den Offset vom Beginn des MSIL-Codes (Microsoft Intermediate Language) für die ausgeführte Methode ab. Dabei kann es sich um einen Näherungswert handeln. Das hängt davon ab, ob der JIT-Compiler (Just-In-Time) den Debuggingcode erzeugt. Die Generierung dieser Debuginformation wird vom <see cref="T:System.Diagnostics.DebuggableAttribute" /> kontrolliert.</summary>
      <returns vsli:raw="The offset from the start of the MSIL code for the method that is executing.">Der Offset vom Beginn des MSIL-Codes für die ausgeführte Methode.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetMethod">
      <summary vsli:raw="Gets the method in which the frame is executing.">Ruft die Methode ab, in der der Rahmen ausgeführt wird.</summary>
      <returns vsli:raw="The method in which the frame is executing.">Die Methode, in der der Rahmen ausgeführt wird.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.GetNativeOffset">
      <summary vsli:raw="Gets the offset from the start of the native just-in-time (JIT)-compiled code for the method that is being executed. The generation of this debugging information is controlled by the &lt;see cref=&quot;T:System.Diagnostics.DebuggableAttribute&quot; /&gt; class.">Ruft den Offset vom Beginn des programmeigenen JIT (Just-In-Time)-kompilierten Codes für die ausgeführte Methode ab. Die Generierung dieser Debuginformation wird von der <see cref="T:System.Diagnostics.DebuggableAttribute" />-Klasse gesteuert.</summary>
      <returns vsli:raw="The offset from the start of the JIT-compiled code for the method that is being executed.">Der Offset vom Beginn des JIT-kompilierten Codes für die ausgeführte Methode.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrame.ToString">
      <summary vsli:raw="Builds a readable representation of the stack trace.">Erstellt eine lesbare Darstellung der Stapelüberwachung.</summary>
      <returns vsli:raw="A readable representation of the stack trace.">Eine lesbare Darstellung der Stapelüberwachung.</returns>
    </member>
    <member name="T:System.Diagnostics.StackFrameExtensions">
      <summary vsli:raw="Provides extension methods for the &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; class, which represents a function call on the call stack for the current thread.">Bietet Erweiterungsmethoden für die Klasse <see cref="T:System.Diagnostics.StackFrame" />, die eine Funktionsaufruf der Aufrufliste für den aktuellen Thread darstellt.</summary>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeImageBase(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Returns a pointer to the base address of the native image that this stack frame is executing.">Gibt einen Zeiger auf die Basisadresse des mit dem nativen Image zurück, das vom Stapelrahmen ausgeführt wird.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Ein Stapelrahmen.</param>
      <returns vsli:raw="A pointer to the base address of the native image or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; if you're targeting the .NET Framework.">Ein Zeiger auf die Basisadresse des nativen Images oder <see cref="F:System.IntPtr.Zero" />, wenn Sie auf das .NET Framework abzielen.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.GetNativeIP(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Gets an interface pointer to the start of the native code for the method that is being executed.">Ruft einen Schnittstellenzeiger auf den Anfang des nativen Codes für die Methode ab, die ausgeführt wird.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Ein Stapelrahmen.</param>
      <returns vsli:raw="An interface pointer to the start of the native code for the method that is being executed or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; if you're targeting the .NET Framework.">Ruft einen Schnittstellenzeiger auf den Anfang des nativen Codes für die Methode ab, die ausgeführt wird, oder <see cref="F:System.IntPtr.Zero" />, wenn Sie auf das .NET Framework abzielen.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasILOffset(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether an offset from the start of the IL code for the method that is executing is available.">Zeigt an, ob ein Offset vom Beginn des IL-Codes für die ausgeführte Methode verfügbar ist.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Ein Stapelrahmen.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the offset is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Offset verfügbar ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasMethod(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether information about the method in which the specified frame is executing is available.">Gibt an, ob Informationen über die Methode vorliegen, in der der angegebene Frame ausgeführt wird.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Ein Stapelrahmen.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if information about the method in which the current frame is executing is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Informationen zu der Methode vorliegen, in der der aktuelle Frame ausgeführt wird; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasNativeImage(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether the native image is available for the specified stack frame.">Gibt an, ob das native Image für den angegebenen Stapelrahmen verfügbar ist.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Ein Stapelrahmen.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a native image is available for this stack frame; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn ein natives Image für diesen Stapelrahmen verfügbar ist; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.StackFrameExtensions.HasSource(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Indicates whether the file that contains the code that the specified stack frame is executing is available.">Gibt an, ob die Datei verfügbar ist, die den Code enthält, den der angegebene Stapelrahmen ausführt.</summary>
      <param name="stackFrame" vsli:raw="A stack frame.">Ein Stapelrahmen.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the code that the specified stack frame is executing is available; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Code verfügbar ist, den der angegebene Stapelrahmen ausführt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.StackTrace">
      <summary vsli:raw="Represents a stack trace, which is an ordered collection of one or more stack frames.">Stellt eine Stapelüberwachung dar, d. h. eine geordnete Auflistung mindestens eines Stapelrahmens.</summary>
    </member>
    <member name="F:System.Diagnostics.StackTrace.METHODS_TO_SKIP">
      <summary vsli:raw="Defines the default for the number of methods to omit from the stack trace. This field is constant.">Definiert den Standardwert für die Anzahl von Methoden, die von der Stapelüberwachung ausgeschlossen werden sollen. Dieses Feld ist konstant.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse aus dem Rahmen des Aufrufers.</summary>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, optionally capturing source information.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse aus dem Rahmen des Aufrufers und zeichnet bei Bedarf Quellinformationen auf.</summary>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Dateiname, Zeilennummer und Spaltennummer aufgezeichnet werden sollen, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Diagnostics.StackFrame)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class that contains a single frame.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse, die einen einzelnen Rahmen enthält.</summary>
      <param name="frame" vsli:raw="The frame that the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; object should contain.">Der Rahmen, den das <see cref="T:System.Diagnostics.StackTrace" />-Objekt enthalten soll.</param>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse unter Verwendung des bereitgestellten Ausnahmeobjekts.</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">Das Ausnahmeobjekt, von dem aus die Stapelüberwachung erstellt werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Der Parameter <paramref name="e" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class, using the provided exception object and optionally capturing source information.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse unter Verwendung des bereitgestellten Ausnahmeobjekts und zeichnet optional Quellinformationen auf.</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">Das Ausnahmeobjekt, von dem aus die Stapelüberwachung erstellt werden soll.</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Dateiname, Zeilennummer und Spaltennummer aufgezeichnet werden sollen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Der Parameter <paramref name="e" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object and skipping the specified number of frames.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse unter Verwendung des bereitgestellten Ausnahmeobjekts, wobei die angegebene Anzahl von Rahmen übersprungen wird.</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">Das Ausnahmeobjekt, von dem aus die Stapelüberwachung erstellt werden soll.</param>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">Die Anzahl der Stapelrahmen, ab der die Überwachung begonnen werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Der Parameter <paramref name="e" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">Der <paramref name="skipFrames" />-Parameter ist negativ.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Exception,System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class using the provided exception object, skipping the specified number of frames and optionally capturing source information.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse unter Verwendung des bereitgestellten Ausnahmeobjekts. Dabei wird die angegebene Anzahl von Rahmen übersprungen, und Quellinformationen können wahlweise aufgezeichnet werden.</summary>
      <param name="e" vsli:raw="The exception object from which to construct the stack trace.">Das Ausnahmeobjekt, von dem aus die Stapelüberwachung erstellt werden soll.</param>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">Die Anzahl der Stapelrahmen, ab der die Überwachung begonnen werden soll.</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Dateiname, Zeilennummer und Spaltennummer aufgezeichnet werden sollen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The parameter &lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Der Parameter <paramref name="e" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">Der <paramref name="skipFrames" />-Parameter ist negativ.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, skipping the specified number of frames.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse aus dem Rahmen des Aufrufers, wobei die angegebene Anzahl von Rahmen übersprungen wird.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">Die Anzahl der Stapelrahmen, ab der die Überwachung begonnen werden soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">Der <paramref name="skipFrames" />-Parameter ist negativ.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.#ctor(System.Int32,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.StackTrace&quot; /&gt; class from the caller's frame, skipping the specified number of frames and optionally capturing source information.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.StackTrace" />-Klasse aus dem Rahmen des Aufrufers. Dabei wird die angegebene Anzahl von Rahmen übersprungen, und Quellinformationen können wahlweise aufgezeichnet werden.</summary>
      <param name="skipFrames" vsli:raw="The number of frames up the stack from which to start the trace.">Die Anzahl der Stapelrahmen, ab der die Überwachung begonnen werden soll.</param>
      <param name="fNeedFileInfo" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to capture the file name, line number, and column number; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn Dateiname, Zeilennummer und Spaltennummer aufgezeichnet werden sollen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;skipFrames&quot; /&gt; parameter is negative.">Der <paramref name="skipFrames" />-Parameter ist negativ.</exception>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)">
      <summary vsli:raw="Gets the specified stack frame.">Ruft den angegebenen Stapelrahmen ab.</summary>
      <param name="index" vsli:raw="The index of the stack frame requested.">Der Index des angeforderten Stapelrahmens.</param>
      <returns vsli:raw="The specified stack frame.">Der angegebene Stapelrahmen.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.GetFrames">
      <summary vsli:raw="Returns a copy of all stack frames in the current stack trace.">Gibt eine Kopie aller Stapelrahmen in der aktuellen Stapelüberwachung zurück.</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.Diagnostics.StackFrame&quot; /&gt; representing the function calls in the stack trace.">Ein Array vom Typ <see cref="T:System.Diagnostics.StackFrame" />, das die Funktionsaufrufe im Stapelrahmen darstellt.</returns>
    </member>
    <member name="M:System.Diagnostics.StackTrace.ToString">
      <summary vsli:raw="Builds a readable representation of the stack trace.">Erstellt eine lesbare Darstellung der Stapelüberwachung.</summary>
      <returns vsli:raw="A readable representation of the stack trace.">Eine lesbare Darstellung der Stapelüberwachung.</returns>
    </member>
    <member name="P:System.Diagnostics.StackTrace.FrameCount">
      <summary vsli:raw="Gets the number of frames in the stack trace.">Ruft die Anzahl von Rahmen in der Stapelüberwachung ab.</summary>
      <returns vsli:raw="The number of frames in the stack trace.">Die Anzahl von Frames in der Stapelüberwachung.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder">
      <summary vsli:raw="Represents a symbol binder for managed code.">Stellt einen Symbolbinder für verwalteten Code dar.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder.GetReader(System.Int32,System.String,System.String)">
      <summary vsli:raw="Gets the interface of the symbol reader for the current file.">Ruft die Schnittstelle des Symbolreaders für die aktuelle Datei ab.</summary>
      <param name="importer" vsli:raw="The metadata import interface.">Die Metadatenimport-Schnittstelle.</param>
      <param name="filename" vsli:raw="The name of the file for which the reader interface is required.">Der Name der Datei, für die die Readerschnittstelle erforderlich ist.</param>
      <param name="searchPath" vsli:raw="The search path used to locate the symbol file.">Der Suchpfad zum Suchen der Symboldatei.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolReader&quot; /&gt; interface that reads the debugging symbols.">Die <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" />-Schnittstelle, die die Debugsymbole liest.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolBinder1">
      <summary vsli:raw="Represents a symbol binder for managed code.">Stellt einen Symbolbinder für verwalteten Code dar.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolBinder1.GetReader(System.IntPtr,System.String,System.String)">
      <summary vsli:raw="Gets the interface of the symbol reader for the current file.">Ruft die Schnittstelle des Symbolreaders für die aktuelle Datei ab.</summary>
      <param name="importer" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that refers to the metadata import interface.">Ein <see cref="T:System.IntPtr" />, der auf die Schnittstelle für den Metadatenimport verweist.</param>
      <param name="filename" vsli:raw="The name of the file for which the reader interface is required.">Der Name der Datei, für die die Readerschnittstelle erforderlich ist.</param>
      <param name="searchPath" vsli:raw="The search path used to locate the symbol file.">Der Suchpfad zum Suchen der Symboldatei.</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolReader&quot; /&gt; interface that reads the debugging symbols.">Die <see cref="T:System.Diagnostics.SymbolStore.ISymbolReader" />-Schnittstelle, die die Debugsymbole liest.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocument">
      <summary vsli:raw="Represents a document referenced by a symbol store.">Stellt ein Dokument dar, auf das von einem Symbolspeicher verwiesen wird.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.FindClosestLine(System.Int32)">
      <summary vsli:raw="Returns the closest line that is a sequence point, given a line in the current document that might or might not be a sequence point.">Gibt die nächstgelegene Zeile zurück, die ein Sequenzpunkt ist, ausgehend von einer Zeile im aktuellen Dokument, die ein Sequenzpunkt sein kann, es aber nicht sein muss.</summary>
      <param name="line" vsli:raw="The specified line in the document.">Die angegebene Zeile im Dokument.</param>
      <returns vsli:raw="The closest line that is a sequence point.">Die nächste Zeile, die ein Sequenzpunkt ist.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetCheckSum">
      <summary vsli:raw="Gets the checksum.">Ruft die Prüfsumme ab.</summary>
      <returns vsli:raw="The checksum.">Die Prüfsumme.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocument.GetSourceRange(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Gets the embedded document source for the specified range.">Ruft die Quelle des eingebetteten Dokuments für den angegebenen Bereich ab.</summary>
      <param name="startLine" vsli:raw="The starting line in the current document.">Die Anfangszeile im aktuellen Dokument.</param>
      <param name="startColumn" vsli:raw="The starting column in the current document.">Die Anfangsspalte im aktuellen Dokument.</param>
      <param name="endLine" vsli:raw="The ending line in the current document.">Die Endzeile im aktuellen Dokument.</param>
      <param name="endColumn" vsli:raw="The ending column in the current document.">Die Endspalte im aktuellen Dokument.</param>
      <returns vsli:raw="The document source for the specified range.">Die Quelle des Dokuments für den angegebenen Bereich.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.CheckSumAlgorithmId">
      <summary vsli:raw="Gets the checksum algorithm identifier.">Ruft den Bezeichner für den Prüfsummenalgorithmus ab.</summary>
      <returns vsli:raw="A GUID identifying the checksum algorithm. The value is all zeros, if there is no checksum.">Eine GUID zur Kennzeichnung des Prüfsummenalgorithmus. Wenn keine Prüfsumme vorhanden ist, besteht der Wert ausschließlich aus Nullen.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.DocumentType">
      <summary vsli:raw="Gets the type of the current document.">Ruft den Typ des aktuellen Dokuments ab.</summary>
      <returns vsli:raw="The type of the current document.">Der Typ des aktuellen Dokuments.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.HasEmbeddedSource">
      <summary vsli:raw="Checks whether the current document is stored in the symbol store.">Überprüft, ob das aktuelle Dokument im Symbolspeicher gespeichert ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current document is stored in the symbol store; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das aktuelle Dokument im Symbolspeicher gespeichert ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.Language">
      <summary vsli:raw="Gets the language of the current document.">Ruft die Sprache des aktuellen Dokuments ab.</summary>
      <returns vsli:raw="The language of the current document.">Die Sprache des aktuellen Dokuments.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.LanguageVendor">
      <summary vsli:raw="Gets the language vendor of the current document.">Ruft den Compilerhersteller des aktuellen Dokuments ab.</summary>
      <returns vsli:raw="The language vendor of the current document.">Der Compilerhersteller des aktuellen Dokuments.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.SourceLength">
      <summary vsli:raw="Gets the length, in bytes, of the embedded source.">Ruft die Länge der eingebetteten Quelle in Bytes ab.</summary>
      <returns vsli:raw="The source length of the current document.">Die Länge der Quelle des aktuellen Dokuments.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolDocument.URL">
      <summary vsli:raw="Gets the URL of the current document.">Ruft die URL des aktuellen Dokuments ab.</summary>
      <returns vsli:raw="The URL of the current document.">Die URL des aktuellen Dokuments.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolDocumentWriter">
      <summary vsli:raw="Represents a document referenced by a symbol store.">Stellt ein Dokument dar, auf das von einem Symbolspeicher verwiesen wird.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetCheckSum(System.Guid,System.Byte[])">
      <summary vsli:raw="Sets checksum information.">Legt Prüfsummeninformationen fest.</summary>
      <param name="algorithmId" vsli:raw="The GUID representing the algorithm ID.">Die GUID, die die Algorithmus-ID darstellt.</param>
      <param name="checkSum" vsli:raw="The checksum.">Die Prüfsumme.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolDocumentWriter.SetSource(System.Byte[])">
      <summary vsli:raw="Stores the raw source for a document in the symbol store.">Speichert die unformatierte Quelle eines Dokuments im Symbolspeicher.</summary>
      <param name="source" vsli:raw="The document source represented as unsigned bytes.">Die Quelle des Dokuments, als Bytes ohne Vorzeichen dargestellt.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolMethod">
      <summary vsli:raw="Represents a method within a symbol store.">Stellt eine Methode in einem Symbolspeicher dar.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetNamespace">
      <summary vsli:raw="Gets the namespace that the current method is defined within.">Ruft den Namespace ab, in dem die aktuelle Methode definiert ist.</summary>
      <returns vsli:raw="The namespace that the current method is defined within.">Der Namespace, in dem die aktuelle Methode definiert ist.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetOffset(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets the Microsoft intermediate language (MSIL) offset within the method that corresponds to the specified position.">Ruft den MSIL-Offset (Microsoft Intermediate Language) innerhalb der Methode ab, der der angegebenen Position entspricht.</summary>
      <param name="document" vsli:raw="The document for which the offset is requested.">Das Dokument, für das der Offset angefordert wird.</param>
      <param name="line" vsli:raw="The document line corresponding to the offset.">Die Dokumentzeile, die dem Offset entspricht.</param>
      <param name="column" vsli:raw="The document column corresponding to the offset.">Die Dokumentspalte, die dem Offset entspricht.</param>
      <returns vsli:raw="The offset within the specified document.">Der Offset im angegebenen Dokument.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetParameters">
      <summary vsli:raw="Gets the parameters for the current method.">Ruft die Parameter für die aktuelle Methode ab.</summary>
      <returns vsli:raw="The array of parameters for the current method.">Das Array von Parametern für die aktuelle Methode.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetRanges(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets an array of start and end offset pairs that correspond to the ranges of Microsoft intermediate language (MSIL) that a given position covers within this method.">Ruft ein Array von Start-/Endoffsetpaaren ab, die den Bereichen der MSIL (Microsoft Intermediate Language) entsprechen, die von einer angegebenen Position innerhalb dieser Methode abgedeckt werden.</summary>
      <param name="document" vsli:raw="The document for which the offset is requested.">Das Dokument, für das der Offset angefordert wird.</param>
      <param name="line" vsli:raw="The document line corresponding to the ranges.">Die Dokumentzeile, die den Bereichen entspricht.</param>
      <param name="column" vsli:raw="The document column corresponding to the ranges.">Die Dokumentspalte, die den Bereichen entspricht.</param>
      <returns vsli:raw="An array of start and end offset pairs.">Ein Array von Start-/Endoffsetpaaren.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetScope(System.Int32)">
      <summary vsli:raw="Returns the most enclosing lexical scope when given an offset within a method.">Gibt den umfassendsten lexikalischen Gültigkeitsbereich zurück, wenn ein Offset innerhalb einer Methode angegeben ist.</summary>
      <param name="offset" vsli:raw="The byte offset within the method of the lexical scope.">Der Byteoffset innerhalb der Methode des lexikalischen Gültigkeitsbereichs.</param>
      <returns vsli:raw="The most enclosing lexical scope for the given byte offset within the method.">Der umfassendste lexikalische Gültigkeitsbereich, wenn ein Offset innerhalb einer Methode angegeben ist.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSequencePoints(System.Int32[],System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Gets the sequence points for the current method.">Ruft die Sequenzpunkte für die aktuelle Methode ab.</summary>
      <param name="offsets" vsli:raw="The array of byte offsets from the beginning of the method for the sequence points.">Das Array von Byteoffsets ab dem Anfang der Methode für die Sequenzpunkte.</param>
      <param name="documents" vsli:raw="The array of documents in which the sequence points are located.">Das Array von Dokumenten, in denen sich die Sequenzpunkte befinden.</param>
      <param name="lines" vsli:raw="The array of lines in the documents at which the sequence points are located.">Das Array von Zeilen in den Dokumenten, in denen sich die Sequenzpunkte befinden.</param>
      <param name="columns" vsli:raw="The array of columns in the documents at which the sequence points are located.">Das Array von Spalten in den Dokumenten, in denen sich die Sequenzpunkte befinden.</param>
      <param name="endLines" vsli:raw="The array of lines in the documents at which the sequence points end.">Das Array von Zeilen in den Dokumenten, in denen die Sequenzpunkte enden.</param>
      <param name="endColumns" vsli:raw="The array of columns in the documents at which the sequence points end.">Das Array von Spalten in den Dokumenten, in denen die Sequenzpunkte enden.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolMethod.GetSourceStartEnd(System.Diagnostics.SymbolStore.ISymbolDocument[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Gets the start and end positions for the source of the current method.">Ruft die Anfangs- und Endpositionen für die Quelle der aktuellen Methode ab.</summary>
      <param name="docs" vsli:raw="The starting and ending source documents.">Die Anfangs- und Endquelldokumente.</param>
      <param name="lines" vsli:raw="The starting and ending lines in the corresponding source documents.">Die Anfangs- und Endzeilen in den entsprechenden Quelldokumenten.</param>
      <param name="columns" vsli:raw="The starting and ending columns in the corresponding source documents.">Die Anfangs- und Endspalten in den entsprechenden Quelldokumenten.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the positions were defined; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Positionen definiert wurden, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.RootScope">
      <summary vsli:raw="Gets the root lexical scope for the current method. This scope encloses the entire method.">Ruft den lexikalischen Stammgültigkeitsbereich für die aktuelle Methode ab. Dieser Gültigkeitsbereich umfasst die gesamte Methode.</summary>
      <returns vsli:raw="The root lexical scope that encloses the entire method.">Der lexikalische Stammgültigkeitsbereich, der die gesamte Methode einschließt.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.SequencePointCount">
      <summary vsli:raw="Gets a count of the sequence points in the method.">Ruft die Anzahl der Sequenzpunkte in der Methode ab.</summary>
      <returns vsli:raw="The count of the sequence points in the method.">Die Anzahl der Sequenzpunkte in der Methode.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolMethod.Token">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; containing the metadata for the current method.">Ruft das <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> mit den Metadaten für die aktuelle Methode ab.</summary>
      <returns vsli:raw="The metadata token for the current method.">Das Metadatentoken für die aktuelle Methode.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolNamespace">
      <summary vsli:raw="Represents a namespace within a symbol store.">Stellt einen Namespace in einem Symbolspeicher dar.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetNamespaces">
      <summary vsli:raw="Gets the child members of the current namespace.">Ruft die untergeordneten Member des aktuellen Namespaces ab.</summary>
      <returns vsli:raw="The child members of the current namespace.">Die untergeordneten Member des aktuellen Namespaces.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolNamespace.GetVariables">
      <summary vsli:raw="Gets all the variables defined at global scope within the current namespace.">Ruft alle Variablen ab, die im globalen Gültigkeitsbereich innerhalb des aktuellen Namespaces definiert sind.</summary>
      <returns vsli:raw="The variables defined at global scope within the current namespace.">Die Variablen, die im globalen Gültigkeitsbereich innerhalb des aktuellen Namespaces definiert sind.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolNamespace.Name">
      <summary vsli:raw="Gets the current namespace.">Ruft den aktuellen Namespace ab.</summary>
      <returns vsli:raw="The current namespace.">Der aktuelle Namespace.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolReader">
      <summary vsli:raw="Represents a symbol reader for managed code.">Stellt einen Symbolreader für verwalteten Code dar.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Gets a document specified by the language, vendor, and type.">Ruft ein Dokument ab, das durch Sprache, Hersteller und Typ angegeben ist.</summary>
      <param name="url" vsli:raw="The URL that identifies the document.">Die URL, die das Dokument kennzeichnet.</param>
      <param name="language" vsli:raw="The document language. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">Die Dokumentsprache. Sie können für diesen Parameter <see cref="F:System.Guid.Empty" /> angeben.</param>
      <param name="languageVendor" vsli:raw="The identity of the vendor for the document language. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">Die Identität des Herstellers für die Dokumentsprache. Sie können für diesen Parameter <see cref="F:System.Guid.Empty" /> angeben.</param>
      <param name="documentType" vsli:raw="The type of the document. You can specify this parameter as &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">Der Typ des Dokuments. Sie können für diesen Parameter <see cref="F:System.Guid.Empty" /> angeben.</param>
      <returns vsli:raw="The specified document.">Das angegebene Dokument.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetDocuments">
      <summary vsli:raw="Gets an array of all documents defined in the symbol store.">Ruft ein Array aller im Symbolspeicher definierten Dokumente ab.</summary>
      <returns vsli:raw="An array of all documents defined in the symbol store.">Ein Array aller im Symbolspeicher definierten Dokumente.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetGlobalVariables">
      <summary vsli:raw="Gets all global variables in the module.">Ruft alle globalen Variablen im Modul ab.</summary>
      <returns vsli:raw="An array of all variables in the module.">Ein Array aller Variablen im Modul.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Gets a symbol reader method object when given the identifier of a method.">Ruft ein Methodenobjekt des Symbolreaders ab, wenn der Bezeichner einer Methode angegeben ist.</summary>
      <param name="method" vsli:raw="The metadata token of the method.">Das Metadatentoken der Methode.</param>
      <returns vsli:raw="The symbol reader method object for the specified method identifier.">Das Methodenobjekt des Symbolreaders für den angegebenen Methodenbezeichner.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethod(System.Diagnostics.SymbolStore.SymbolToken,System.Int32)">
      <summary vsli:raw="Gets a symbol reader method object when given the identifier of a method and its edit and continue version.">Ruft ein Methodenobjekt des Symbolreaders ab, wenn der Bezeichner einer Methode sowie deren Version für Bearbeiten und Fortfahren angegeben ist.</summary>
      <param name="method" vsli:raw="The metadata token of the method.">Das Metadatentoken der Methode.</param>
      <param name="version" vsli:raw="The edit and continue version of the method.">Die Version für Bearbeiten und Fortfahren der Methode.</param>
      <returns vsli:raw="The symbol reader method object for the specified method identifier.">Das Methodenobjekt des Symbolreaders für den angegebenen Methodenbezeichner.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetMethodFromDocumentPosition(System.Diagnostics.SymbolStore.ISymbolDocument,System.Int32,System.Int32)">
      <summary vsli:raw="Gets a symbol reader method object that contains a specified position in a document.">Ruft das Methodenobjekt des Symbolreaders ab, das eine angegebene Position in einem Dokument enthält.</summary>
      <param name="document" vsli:raw="The document in which the method is located.">Das Dokument, in dem sich die Methode befindet.</param>
      <param name="line" vsli:raw="The position of the line within the document. The lines are numbered, beginning with 1.">Die Position der Zeile im Dokument. Die Zeilen sind fortlaufend nummeriert, beginnend mit 1.</param>
      <param name="column" vsli:raw="The position of column within the document. The columns are numbered, beginning with 1.">Die Position der Spalte im Dokument. Die Spalten sind fortlaufend nummeriert, beginnend mit 1.</param>
      <returns vsli:raw="The reader method object for the specified position in the document.">Das Methodenobjekt des Symbolreaders für die angegebene Position im Dokument.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetNamespaces">
      <summary vsli:raw="Gets the namespaces that are defined in the global scope within the current symbol store.">Ruft die Namespaces ab, die im aktuellen Symbolspeicher mit globalem Gültigkeitsbereich definiert sind.</summary>
      <returns vsli:raw="The namespaces defined in the global scope within the current symbol store.">Die Namespaces, die im aktuellen Symbolspeicher mit globalem Gültigkeitsbereich definiert sind.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String)">
      <summary vsli:raw="Gets an attribute value when given the attribute name.">Ruft einen Attributwert ab, wenn der Attributname angegeben ist.</summary>
      <param name="parent" vsli:raw="The metadata token for the object for which the attribute is requested.">Das Metadatentoken für das Objekt, für das das Attribut angefordert wird.</param>
      <param name="name" vsli:raw="The attribute name.">Der Attributname.</param>
      <returns vsli:raw="The value of the attribute.">Der Wert des Attributs.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolReader.GetVariables(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Gets the variables that are not local when given the parent.">Ruft die nicht lokalen Variablen ab, wenn das übergeordnete Element angegeben ist.</summary>
      <param name="parent" vsli:raw="The metadata token for the type for which the variables are requested.">Das Metadatentoken für den Typ, für den die Variablen angefordert werden.</param>
      <returns vsli:raw="An array of variables for the parent.">Ein Array von Variablen für das übergeordnete Element.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolReader.UserEntryPoint">
      <summary vsli:raw="Gets the metadata token for the method that was specified as the user entry point for the module, if any.">Ruft das Metadatentoken für die Methode ab, die als benutzerdefinierter Einstiegspunkt für das ggf. vorhandene Modul angegeben wurde.</summary>
      <returns vsli:raw="The metadata token for the method that is the user entry point for the module.">Das Metadatentoken für die Methode, die der benutzerdefinierte Einstiegspunkt für das Modul ist.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolScope">
      <summary vsli:raw="Represents a lexical scope within &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolMethod&quot; /&gt;, providing access to the start and end offsets of the scope, as well as its child and parent scopes.">Stellt einen lexikalischen Gültigkeitsbereich in <see cref="T:System.Diagnostics.SymbolStore.ISymbolMethod" /> dar, der Zugriff auf den Anfangs- und den Endoffset des Gültigkeitsbereichs sowie auf die zugehörigen untergeordneten und übergeordneten Gültigkeitsbereiche bietet.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetChildren">
      <summary vsli:raw="Gets the child lexical scopes of the current lexical scope.">Ruft die untergeordneten lexikalischen Gültigkeitsbereiche des aktuellen lexikalischen Gültigkeitsbereichs ab.</summary>
      <returns vsli:raw="The child lexical scopes that of the current lexical scope.">Die untergeordneten lexikalischen Gültigkeitsbereiche des aktuellen lexikalischen Gültigkeitsbereichs.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetLocals">
      <summary vsli:raw="Gets the local variables within the current lexical scope.">Ruft die lokalen Variablen im aktuellen lexikalischen Gültigkeitsbereich ab.</summary>
      <returns vsli:raw="The local variables within the current lexical scope.">Die lokalen Variablen im aktuellen lexikalischen Gültigkeitsbereich.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolScope.GetNamespaces">
      <summary vsli:raw="Gets the namespaces that are used within the current scope.">Ruft die Namespaces ab, die im aktuellen Gültigkeitsbereich verwendet werden.</summary>
      <returns vsli:raw="The namespaces that are used within the current scope.">Die Namespaces, die im aktuellen Gültigkeitsbereich verwendet werden.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.EndOffset">
      <summary vsli:raw="Gets the end offset of the current lexical scope.">Ruft den Endoffset des aktuellen lexikalischen Gültigkeitsbereichs ab.</summary>
      <returns vsli:raw="The end offset of the current lexical scope.">Der Endoffset des aktuellen lexikalischen Gültigkeitsbereichs.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Method">
      <summary vsli:raw="Gets the method that contains the current lexical scope.">Ruft die Methode ab, die den aktuellen lexikalischen Gültigkeitsbereich enthält.</summary>
      <returns vsli:raw="The method that contains the current lexical scope.">Die Methode, die den aktuellen lexikalischen Gültigkeitsbereich enthält.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.Parent">
      <summary vsli:raw="Gets the parent lexical scope of the current scope.">Ruft den übergeordneten lexikalischen Gültigkeitsbereich des aktuellen Gültigkeitsbereichs ab.</summary>
      <returns vsli:raw="The parent lexical scope of the current scope.">Der übergeordnete lexikalische Gültigkeitsbereich des aktuellen Gültigkeitsbereichs.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolScope.StartOffset">
      <summary vsli:raw="Gets the start offset of the current lexical scope.">Ruft den Anfangsoffset des aktuellen lexikalischen Gültigkeitsbereichs ab.</summary>
      <returns vsli:raw="The start offset of the current lexical scope.">Der Anfangsoffset des aktuellen lexikalischen Gültigkeitsbereichs.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolVariable">
      <summary vsli:raw="Represents a variable within a symbol store.">Stellt eine Variable in einem Symbolspeicher dar.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolVariable.GetSignature">
      <summary vsli:raw="Gets the variable signature.">Ruft die Variablensignatur ab.</summary>
      <returns vsli:raw="The variable signature as an opaque blob.">Die Variablensignatur als nicht transparenter BLOB.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField1">
      <summary vsli:raw="Gets the first address of a variable.">Ruft die erste Adresse einer Variablen ab.</summary>
      <returns vsli:raw="The first address of the variable.">Die erste Adresse der Variablen.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField2">
      <summary vsli:raw="Gets the second address of a variable.">Ruft die zweite Adresse einer Variablen ab.</summary>
      <returns vsli:raw="The second address of the variable.">Die zweite Adresse der Variablen.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressField3">
      <summary vsli:raw="Gets the third address of a variable.">Ruft die dritte Adresse einer Variablen ab.</summary>
      <returns vsli:raw="The third address of the variable.">Die dritte Adresse der Variablen.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.AddressKind">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymAddressKind&quot; /&gt; value describing the type of the address.">Ruft den <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" />-Wert ab, der den Typ der Adresse beschreibt.</summary>
      <returns vsli:raw="The type of the address. One of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymAddressKind&quot; /&gt; values.">Der Typ der Adresse. Einer der <see cref="T:System.Diagnostics.SymbolStore.SymAddressKind" />-Werte.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Attributes">
      <summary vsli:raw="Gets the attributes of the variable.">Ruft die Attribute der Variablen ab.</summary>
      <returns vsli:raw="The variable attributes.">Die Attribute der Variablen.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.EndOffset">
      <summary vsli:raw="Gets the end offset of a variable within the scope of the variable.">Ruft den Endoffset einer Variablen im Gültigkeitsbereich der Variablen ab.</summary>
      <returns vsli:raw="The end offset of the variable.">Der Endoffset der Variablen.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.Name">
      <summary vsli:raw="Gets the name of the variable.">Ruft den Namen der Variablen ab.</summary>
      <returns vsli:raw="The name of the variable.">Der Name der Variablen.</returns>
    </member>
    <member name="P:System.Diagnostics.SymbolStore.ISymbolVariable.StartOffset">
      <summary vsli:raw="Gets the start offset of the variable within the scope of the variable.">Ruft den Anfangsoffset der Variablen im Gültigkeitsbereich der Variablen ab.</summary>
      <returns vsli:raw="The start offset of the variable.">Der Anfangsoffset der Variablen.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.ISymbolWriter">
      <summary vsli:raw="Represents a symbol writer for managed code.">Stellt einen Symbolwriter für verwalteten Code dar.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Close">
      <summary vsli:raw="Closes &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; and commits the symbols to the symbol store.">Schließt <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> und übergibt die Symbole an den Symbolspeicher.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseMethod">
      <summary vsli:raw="Closes the current method.">Schließt die aktuelle Methode.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseNamespace">
      <summary vsli:raw="Closes the most recent namespace.">Schließt den zuletzt verwendeten Namespace.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)">
      <summary vsli:raw="Closes the current lexical scope.">Schließt den aktuellen lexikalischen Gültigkeitsbereich.</summary>
      <param name="endOffset" vsli:raw="The points past the last instruction in the scope.">Die Punkte nach der letzten Anweisung im Gültigkeitsbereich.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineDocument(System.String,System.Guid,System.Guid,System.Guid)">
      <summary vsli:raw="Defines a source document.">Definiert ein Quelldokument.</summary>
      <param name="url" vsli:raw="The URL that identifies the document.">Die URL, die das Dokument kennzeichnet.</param>
      <param name="language" vsli:raw="The document language. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">Die Dokumentsprache. Dieser Parameter kann <see cref="F:System.Guid.Empty" /> sein.</param>
      <param name="languageVendor" vsli:raw="The identity of the vendor for the document language. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">Die Identität des Herstellers für die Dokumentsprache. Dieser Parameter kann <see cref="F:System.Guid.Empty" /> sein.</param>
      <param name="documentType" vsli:raw="The type of the document. This parameter can be &lt;see cref=&quot;F:System.Guid.Empty&quot; /&gt;.">Der Typ des Dokuments. Dieser Parameter kann <see cref="F:System.Guid.Empty" /> sein.</param>
      <returns vsli:raw="The object that represents the document.">Das Objekt, das das Dokument darstellt.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a field in a type or a global field.">Definiert ein Feld in einem Typ oder einem globalen Feld.</summary>
      <param name="parent" vsli:raw="The metadata type or method token.">Der Metadatentyp oder das Methodentoken.</param>
      <param name="name" vsli:raw="The field name.">Der Feldname.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the field attributes.">Eine bitweise Kombination der Feldattribute.</param>
      <param name="signature" vsli:raw="The field signature.">Die Feldsignatur.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt; and &lt;paramref name=&quot;addr2&quot; /&gt;.">Die Adresstypen für <paramref name="addr1" /> und <paramref name="addr2" />.</param>
      <param name="addr1" vsli:raw="The first address for the field specification.">Die erste Adresse für die Feldangabe.</param>
      <param name="addr2" vsli:raw="The second address for the field specification.">Die zweite Adresse für die Feldangabe.</param>
      <param name="addr3" vsli:raw="The third address for the field specification.">Die dritte Adresse für die Feldangabe.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineGlobalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single global variable.">Definiert eine einzelne globale Variable.</summary>
      <param name="name" vsli:raw="The global variable name.">Der Name der globalen Variablen.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the global variable attributes.">Eine bitweise Kombination der globalen Variablenattribute.</param>
      <param name="signature" vsli:raw="The global variable signature.">Die Signatur der globalen Variablen.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">Die Adresstypen für <paramref name="addr1" />, <paramref name="addr2" /> und <paramref name="addr3" />.</param>
      <param name="addr1" vsli:raw="The first address for the global variable specification.">Die erste Adresse für die Angabe der globalen Variablen.</param>
      <param name="addr2" vsli:raw="The second address for the global variable specification.">Die zweite Adresse für die Angabe der globalen Variablen.</param>
      <param name="addr3" vsli:raw="The third address for the global variable specification.">Die dritte Adresse für die Angabe der globalen Variablen.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single variable in the current lexical scope.">Definiert eine einzelne Variable im aktuellen lexikalischen Gültigkeitsbereich.</summary>
      <param name="name" vsli:raw="The local variable name.">Der Name der lokalen Variablen.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the local variable attributes.">Eine bitweise Kombination der lokalen Variablenattribute.</param>
      <param name="signature" vsli:raw="The local variable signature.">Die Signatur der lokalen Variablen.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">Die Adresstypen für <paramref name="addr1" />, <paramref name="addr2" /> und <paramref name="addr3" />.</param>
      <param name="addr1" vsli:raw="The first address for the local variable specification.">Die erste Adresse für die Angabe der lokalen Variablen.</param>
      <param name="addr2" vsli:raw="The second address for the local variable specification.">Die zweite Adresse für die Angabe der lokalen Variablen.</param>
      <param name="addr3" vsli:raw="The third address for the local variable specification.">Die dritte Adresse für die Angabe der lokalen Variablen.</param>
      <param name="startOffset" vsli:raw="The start offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope.">Der Anfangsoffset für die Variable. Wenn der Parameter 0 (null) ist, wird er ignoriert, und die Variable ist im gesamten Gültigkeitsbereich definiert. Wenn der Parameter ungleich 0 (null) ist, fällt die Variable in die Offsets des aktuellen Gültigkeitsbereichs.</param>
      <param name="endOffset" vsli:raw="The end offset for the variable. If this parameter is zero, it is ignored and the variable is defined throughout the entire scope. If the parameter is nonzero, the variable falls within the offsets of the current scope.">Der Endoffset für die Variable. Wenn der Parameter 0 (null) ist, wird er ignoriert, und die Variable ist im gesamten Gültigkeitsbereich definiert. Wenn der Parameter ungleich 0 (null) ist, fällt die Variable in die Offsets des aktuellen Gültigkeitsbereichs.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines a single parameter in the current method. The type of each parameter is taken from its position within the signature of the method.">Definiert einen einzelnen Parameter in der aktuellen Methode. Der Typ jedes Parameters wird anhand der Position in der Signatur der Methode bestimmt.</summary>
      <param name="name" vsli:raw="The parameter name.">Der Name des Parameters.</param>
      <param name="attributes" vsli:raw="A bitwise combination of the parameter attributes.">Eine bitweise Kombination der Parameterattribute.</param>
      <param name="sequence" vsli:raw="The parameter signature.">Die Parametersignatur.</param>
      <param name="addrKind" vsli:raw="The address types for &lt;paramref name=&quot;addr1&quot; /&gt;, &lt;paramref name=&quot;addr2&quot; /&gt;, and &lt;paramref name=&quot;addr3&quot; /&gt;.">Die Adresstypen für <paramref name="addr1" />, <paramref name="addr2" /> und <paramref name="addr3" />.</param>
      <param name="addr1" vsli:raw="The first address for the parameter specification.">Die erste Adresse für die Parameterangabe.</param>
      <param name="addr2" vsli:raw="The second address for the parameter specification.">Die zweite Adresse für die Parameterangabe.</param>
      <param name="addr3" vsli:raw="The third address for the parameter specification.">Die dritte Adresse für die Parameterangabe.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineSequencePoints(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32[],System.Int32[],System.Int32[],System.Int32[],System.Int32[])">
      <summary vsli:raw="Defines a group of sequence points within the current method.">Definiert eine Gruppe von Sequenzpunkten in der aktuellen Methode.</summary>
      <param name="document" vsli:raw="The document object for which the sequence points are being defined.">Das Dokumentobjekt, für das die Sequenzpunkte definiert werden.</param>
      <param name="offsets" vsli:raw="The sequence point offsets measured from the beginning of methods.">Die Offsets der Sequenzpunkte, gemessen vom Methodenanfang.</param>
      <param name="lines" vsli:raw="The document lines for the sequence points.">Die Dokumentzeilen für die Sequenzpunkte.</param>
      <param name="columns" vsli:raw="The document positions for the sequence points.">Die Dokumentpositionen für die Sequenzpunkte.</param>
      <param name="endLines" vsli:raw="The document end lines for the sequence points.">Die Dokumentendzeilen für die Sequenzpunkte.</param>
      <param name="endColumns" vsli:raw="The document end positions for the sequence points.">Die Dokumentendpositionen für die Sequenzpunkte.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.Initialize(System.IntPtr,System.String,System.Boolean)">
      <summary vsli:raw="Sets the metadata emitter interface to associate with a writer.">Legt die Metadatenemitter-Schnittstelle fest, die einem Writer zugeordnet werden soll.</summary>
      <param name="emitter" vsli:raw="The metadata emitter interface.">Die Metadatenemitter-Schnittstelle.</param>
      <param name="filename" vsli:raw="The file name for which the debugging symbols are written. Some writers require a file name, and others do not. If a file name is specified for a writer that does not use file names, this parameter is ignored.">Der Name der Datei, für die Debugsymbole geschrieben werden. Nicht alle Writer verlangen einen Dateinamen. Wenn für einen Writer, der keine Dateinamen verwendet, ein Dateiname angegeben ist, wird dieser Parameter ignoriert.</param>
      <param name="fFullBuild" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; indicates that this is a full rebuild; &lt;see langword=&quot;false&quot; /&gt; indicates that this is an incremental compilation.">
        <see langword="true" /> gibt eine vollständige Neuerstellung, <see langword="false" /> eine inkrementelle Kompilierung an.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenMethod(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Opens a method to place symbol information into.">Öffnet eine Methode, um in dieser Symbolinformationen zu platzieren.</summary>
      <param name="method" vsli:raw="The metadata token for the method to be opened.">Das Metadatentoken für die zu öffnende Methode.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenNamespace(System.String)">
      <summary vsli:raw="Opens a new namespace.">Öffnet einen neuen Namespace.</summary>
      <param name="name" vsli:raw="The name of the new namespace.">Der Name des neuen Namespaces.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)">
      <summary vsli:raw="Opens a new lexical scope in the current method.">Öffnet einen neuen lexikalischen Gültigkeitsbereich in der aktuellen Methode.</summary>
      <param name="startOffset" vsli:raw="The offset, in bytes, from the beginning of the method to the first instruction in the lexical scope.">Der Offset in Bytes vom Anfang der Methode zur ersten Anweisung im lexikalischen Gültigkeitsbereich.</param>
      <returns vsli:raw="An opaque scope identifier that can be used with &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)&quot; /&gt; to define the start and end offsets of a scope at a later time. In this case, the offsets passed to &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)&quot; /&gt; and &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)&quot; /&gt; are ignored. A scope identifier is valid only in the current method.">Ein nicht transparenter Bezeichner für einen Gültigkeitsbereich zur Verwendung mit <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)" />, um die Anfangs- und Endoffsets eines Gültigkeitsbereichs zu einem späteren Zeitpunkt zu definieren. In diesem Fall werden die an <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.OpenScope(System.Int32)" /> und <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.CloseScope(System.Int32)" /> übergebenen Offsets ignoriert. Ein Bezeichner für einen Gültigkeitsbereich ist nur innerhalb der aktuellen Methode gültig.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)">
      <summary vsli:raw="Specifies the true start and end of a method within a source file. Use &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)&quot; /&gt; to specify the extent of a method, independent of the sequence points that exist within the method.">Gibt den tatsächlichen Anfang und das tatsächliche Ende einer Methode in einer Quelldatei an. Geben Sie die Reichweite einer Methode mit <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetMethodSourceRange(System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32,System.Diagnostics.SymbolStore.ISymbolDocumentWriter,System.Int32,System.Int32)" /> und unabhängig von den in dieser Methode vorhandenen Sequenzpunkten an.</summary>
      <param name="startDoc" vsli:raw="The document that contains the starting position.">Das Dokument, das die Anfangsposition enthält.</param>
      <param name="startLine" vsli:raw="The starting line number.">Die Nummer der Anfangszeile.</param>
      <param name="startColumn" vsli:raw="The starting column.">Die Anfangsspalte.</param>
      <param name="endDoc" vsli:raw="The document that contains the ending position.">Das Dokument, das die Endposition enthält.</param>
      <param name="endLine" vsli:raw="The ending line number.">Die Nummer der Endzeile.</param>
      <param name="endColumn" vsli:raw="The ending column number.">Die Nummer der Endspalte.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetScopeRange(System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Defines the offset range for the specified lexical scope.">Definiert den Offsetbereich für den angegebenen lexikalischen Gültigkeitsbereich.</summary>
      <param name="scopeID" vsli:raw="The identifier of the lexical scope.">Der Bezeichner des lexikalischen Gültigkeitsbereichs.</param>
      <param name="startOffset" vsli:raw="The byte offset of the beginning of the lexical scope.">Der Byteoffset des Anfangs des lexikalischen Gültigkeitsbereichs.</param>
      <param name="endOffset" vsli:raw="The byte offset of the end of the lexical scope.">Der Byteoffset des Endes des lexikalischen Gültigkeitsbereichs.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetSymAttribute(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Byte[])">
      <summary vsli:raw="Defines an attribute when given the attribute name and the attribute value.">Definiert ein Attribut, wenn Attributname und Attributwert angegeben sind.</summary>
      <param name="parent" vsli:raw="The metadata token for which the attribute is being defined.">Das Metadatentoken, für das das Attribut definiert wird.</param>
      <param name="name" vsli:raw="The attribute name.">Der Attributname.</param>
      <param name="data" vsli:raw="The attribute value.">Der Attributwert.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUnderlyingWriter(System.IntPtr)">
      <summary vsli:raw="Sets the underlying &lt;see langword=&quot;ISymUnmanagedWriter&quot; /&gt; (the corresponding unmanaged interface) that a managed &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; uses to emit symbols.">Legt den zugrunde liegenden <see langword="ISymUnmanagedWriter" /> (die entsprechende nicht verwaltete Schnittstelle) fest, der von einem verwalteten <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" /> für die Ausgabe von Symbolen verwendet wird.</summary>
      <param name="underlyingWriter" vsli:raw="A pointer to code that represents the underlying writer.">Ein Zeiger für Code, der den zugrunde liegenden Writer darstellt.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.SetUserEntryPoint(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Identifies the user-defined method as the entry point for the current module.">Kennzeichnet die benutzerdefinierte Methode als Einstiegspunkt für das aktuelle Modul.</summary>
      <param name="entryMethod" vsli:raw="The metadata token for the method that is the user entry point.">Das Metadatentoken für die Methode, die der benutzerdefinierte Einstiegspunkt ist.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.ISymbolWriter.UsingNamespace(System.String)">
      <summary vsli:raw="Specifies that the given, fully qualified namespace name is used within the open lexical scope.">Gibt an, dass der angegebene voll gekennzeichnete Name des Namespaces im geöffneten lexikalischen Gültigkeitsbereich verwendet wird.</summary>
      <param name="fullName" vsli:raw="The fully qualified name of the namespace.">Der voll gekennzeichnete Name des Namespaces.</param>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymAddressKind">
      <summary vsli:raw="Specifies address types for local variables, parameters, and fields in the methods &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)&quot; /&gt;, &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)&quot; /&gt;, and &lt;see cref=&quot;M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)&quot; /&gt; of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.ISymbolWriter&quot; /&gt; interface.">Gibt Adresstypen für lokale Variablen, Parameter und Felder in den Methoden <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineLocalVariable(System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />, <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineParameter(System.String,System.Reflection.ParameterAttributes,System.Int32,System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> und <see cref="M:System.Diagnostics.SymbolStore.ISymbolWriter.DefineField(System.Diagnostics.SymbolStore.SymbolToken,System.String,System.Reflection.FieldAttributes,System.Byte[],System.Diagnostics.SymbolStore.SymAddressKind,System.Int32,System.Int32,System.Int32)" /> der <see cref="T:System.Diagnostics.SymbolStore.ISymbolWriter" />-Schnittstelle an.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.BitField">
      <summary vsli:raw="A bit field. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the position where the field starts, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the field length.">Ein Bitfeld. Der <paramref name="addr1" />-Parameter stellt die Position dar, an der das Feld beginnt, und der <paramref name="addr2" />-Parameter stellt die Feldlänge dar.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.ILOffset">
      <summary vsli:raw="A Microsoft intermediate language (MSIL) offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the MSIL local variable or parameter index.">Ein MSIL-Offset (Microsoft Intermediate Language). Der <paramref name="addr1" />-Parameter ist der Index der lokalen MSIL-Variablen oder des entsprechenden Parameters.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeOffset">
      <summary vsli:raw="A native offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the offset from the start of the parent.">Ein systemeigener Offset. Der <paramref name="addr1" />-Parameter ist der Offset vom Beginn des übergeordneten Elements.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegister">
      <summary vsli:raw="A native register address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the register in which the variable is stored.">Eine systemeigene Registeradresse. Der <paramref name="addr1" />-Parameter ist das Register, in dem die Variable gespeichert wird.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRegister">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the low-order register, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the high-order register.">Eine auf das Register bezogene Adresse. Der <paramref name="addr1" />-Parameter ist das niederwertige Register, und der <paramref name="addr2" />-Parameter ist das höherwertige Register.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterRelative">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the register, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset.">Eine auf das Register bezogene Adresse. Der <paramref name="addr1" />-Parameter ist das Register, und der <paramref name="addr2" />-Parameter ist der Offset.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRegisterStack">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the low-order register, the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the stack register, and the &lt;paramref name=&quot;addr3&quot; /&gt; parameter is the offset from the stack pointer to the high-order part of the value.">Eine auf das Register bezogene Adresse. Der <paramref name="addr1" />-Parameter ist das niederwertige Register, der <paramref name="addr2" />-Parameter ist das Stapelregister, und der <paramref name="addr3" />-Parameter ist der Offset vom Stapelzeiger zum höherwertigen Teil des Werts.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeRVA">
      <summary vsli:raw="A native Relevant Virtual Address (RVA). The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the RVA in the module.">Eine systemeigene RVA (Relative Virtual Address). Der <paramref name="addr1" />-Parameter ist die RVA im Modul.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeSectionOffset">
      <summary vsli:raw="A native section offset. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the section, and the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset.">Ein systemeigener Bereichsoffset. Der <paramref name="addr1" />-Parameter ist der Bereich, und der <paramref name="addr2" />-Parameter ist der Offset.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymAddressKind.NativeStackRegister">
      <summary vsli:raw="A register-relative address. The &lt;paramref name=&quot;addr1&quot; /&gt; parameter is the stack register, the &lt;paramref name=&quot;addr2&quot; /&gt; parameter is the offset from the stack pointer to the low-order part of the value, and the &lt;paramref name=&quot;addr3&quot; /&gt; parameter is the high-order register.">Eine auf das Register bezogene Adresse. Der <paramref name="addr1" />-Parameter ist das Stapelregister, der <paramref name="addr2" />-Parameter ist der Offset vom Stapelzeiger zum niederwertigen Teil des Werts, und der <paramref name="addr3" />-Parameter ist das höherwertige Register.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymbolToken">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure is an object representation of a token that represents symbolic information.">Die <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Struktur ist eine Objektdarstellung eines Tokens, das Symbolinformationen darstellt.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure when given a value.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Struktur, wenn ein Wert angegeben ist.</summary>
      <param name="val" vsli:raw="The value to be used for the token.">Der für das Token zu verwendende Wert.</param>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Determines whether &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance.">Bestimmt, ob <paramref name="obj" /> gleich dieser Instanz ist.</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; to check.">Der zu überprüfende <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="obj" /> gleich dieser Instanz ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.Equals(System.Object)">
      <summary vsli:raw="Determines whether &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; and is equal to this instance.">Bestimmt, ob <paramref name="obj" /> eine Instanz von <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> und gleich dieser Instanz ist.</summary>
      <param name="obj" vsli:raw="The object to check.">Das zu überprüfende Objekt.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; is an instance of &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; and is equal to this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="obj" /> eine Instanz von <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" /> und gleich dieser Instanz ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetHashCode">
      <summary vsli:raw="Generates the hash code for the current token.">Generiert den Hashcode für das aktuelle Token.</summary>
      <returns vsli:raw="The hash code for the current token.">Der Hashcode für das aktuelle Token.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.GetToken">
      <summary vsli:raw="Gets the value of the current token.">Ruft den Wert des aktuellen Tokens ab.</summary>
      <returns vsli:raw="The value of the current token.">Der Wert des aktuellen Tokens.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Equality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Returns a value indicating whether two &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; objects are equal.">Gibt einen Wert zurück, der angibt, ob zwei <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Objekte gleich sind.</summary>
      <param name="a" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">Eine <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Struktur.</param>
      <param name="b" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">Eine <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Struktur.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; and &lt;paramref name=&quot;b&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="a" /> und <paramref name="b" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymbolToken.op_Inequality(System.Diagnostics.SymbolStore.SymbolToken,System.Diagnostics.SymbolStore.SymbolToken)">
      <summary vsli:raw="Returns a value indicating whether two &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; objects are not equal.">Gibt einen Wert zurück, der angibt, ob zwei <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Objekte ungleich sind.</summary>
      <param name="a" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">Eine <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Struktur.</param>
      <param name="b" vsli:raw="A &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymbolToken&quot; /&gt; structure.">Eine <see cref="T:System.Diagnostics.SymbolStore.SymbolToken" />-Struktur.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;a&quot; /&gt; and &lt;paramref name=&quot;b&quot; /&gt; are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="a" /> und <paramref name="b" /> ungleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymDocumentType">
      <summary vsli:raw="Holds the public GUIDs for document types to be used with the symbol store.">Enthält die öffentlichen GUIDs für Dokumenttypen, die mit dem Symbolspeicher verwendet werden sollen.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymDocumentType.Text">
      <summary vsli:raw="Specifies the GUID of the document type to be used with the symbol store.">Gibt die GUID des Dokumenttyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymDocumentType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymDocumentType&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.SymbolStore.SymDocumentType" />-Klasse.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageType">
      <summary vsli:raw="Holds the public GUIDs for language types to be used with the symbol store.">Enthält die öffentlichen GUIDs für Sprachtypen, die mit dem Symbolspeicher verwendet werden sollen.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Basic">
      <summary vsli:raw="Specifies the GUID of the Basic language type to be used with the symbol store.">Gibt die GUID des Basic-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.C">
      <summary vsli:raw="Specifies the GUID of the C language type to be used with the symbol store.">Gibt die GUID des C-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Cobol">
      <summary vsli:raw="Specifies the GUID of the Cobol language type to be used with the symbol store.">Gibt die GUID des COBOL-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CPlusPlus">
      <summary vsli:raw="Specifies the GUID of the C++ language type to be used with the symbol store.">Gibt die GUID des C++-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.CSharp">
      <summary vsli:raw="Specifies the GUID of the C# language type to be used with the symbol store.">Gibt die GUID des C#-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.ILAssembly">
      <summary vsli:raw="Specifies the GUID of the ILAssembly language type to be used with the symbol store.">Gibt die GUID des ILAssembly-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Java">
      <summary vsli:raw="Specifies the GUID of the Java language type to be used with the symbol store.">Gibt die GUID des Java-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.JScript">
      <summary vsli:raw="Specifies the GUID of the JScript language type to be used with the symbol store.">Gibt die GUID des JScript-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.MCPlusPlus">
      <summary vsli:raw="Specifies the GUID of the C++ language type to be used with the symbol store.">Gibt die GUID des C++-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.Pascal">
      <summary vsli:raw="Specifies the GUID of the Pascal language type to be used with the symbol store.">Gibt die GUID des Pascal-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageType.SMC">
      <summary vsli:raw="Specifies the GUID of the SMC language type to be used with the symbol store.">Gibt die GUID des SMC-Sprachtyps an, der mit dem Symbolspeicher verwendet werden soll.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageType.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymLanguageType&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.SymbolStore.SymLanguageType" />-Klasse.</summary>
    </member>
    <member name="T:System.Diagnostics.SymbolStore.SymLanguageVendor">
      <summary vsli:raw="Holds the public GUIDs for language vendors to be used with the symbol store.">Enthält die öffentlichen GUIDs für Compilerhersteller, die mit dem Symbolspeicher verwendet werden sollen.</summary>
    </member>
    <member name="F:System.Diagnostics.SymbolStore.SymLanguageVendor.Microsoft">
      <summary vsli:raw="Specifies the GUID of the Microsoft language vendor.">Gibt die GUID des Microsoft-Compilerherstellers an.</summary>
    </member>
    <member name="M:System.Diagnostics.SymbolStore.SymLanguageVendor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Diagnostics.SymbolStore.SymLanguageVendor&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Diagnostics.SymbolStore.SymLanguageVendor" />-Klasse.</summary>
    </member>
  </members>
</doc>
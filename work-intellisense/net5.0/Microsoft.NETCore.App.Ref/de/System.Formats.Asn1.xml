<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Formats.Asn1</name>
  </assembly>
  <members>
    <member name="T:System.Formats.Asn1.Asn1Tag">
      <summary>Dieser Typ stellt ein ASN.1-Tag dar, wie in der ITU-T-Empfehlung X.680 beschrieben.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.Boolean">
      <summary>Stellt das universelle Klassentag für einen booleschen Wert dar.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.ConstructedBitString">
      <summary>Stellt das universelle Klassentag für einen Bitzeichenfolgenwert bei einer konstruierten Codierung dar.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.ConstructedOctetString">
      <summary>Stellt das universelle Klassentag für einen Oktettzeichenfolgenwert bei einer konstruierten Codierung dar.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.Enumerated">
      <summary>Stellt das universelle Klassentag für einen Enumerationswert dar.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.GeneralizedTime">
      <summary>Stellt das universelle Klassentag für einen GeneralizedTime-Wert dar.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.Integer">
      <summary>Stellt das universelle Klassentag für einen Ganzzahlwert dar.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.Null">
      <summary>Stellt das universelle Klassentag für einen <see langword="null" />-Wert dar.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.ObjectIdentifier">
      <summary>Stellt das universelle Klassentag für einen Objektbezeichnerwert dar.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.PrimitiveBitString">
      <summary>Stellt das universelle Klassentag für einen Bitzeichenfolgenwert bei einer primitiven Codierung dar.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.PrimitiveOctetString">
      <summary>Stellt das universelle Klassentag für einen Oktettzeichenfolgenwert bei einer primitiven Codierung dar.</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.Sequence">
      <summary>Stellt das universelle Klassentag für einen Sequenzwert dar (immer eine konstruierte Codierung).</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.SetOf">
      <summary>Stellt das universelle Klassentag für einen SetOf-Wert dar (immer eine konstruierte Codierung).</summary>
    </member>
    <member name="F:System.Formats.Asn1.Asn1Tag.UtcTime">
      <summary>Stellt das universelle Klassentag für einen UtcTime-Wert dar.</summary>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.#ctor(System.Formats.Asn1.TagClass,System.Int32,System.Boolean)">
      <summary>Erstellt ein <see cref="T:System.Formats.Asn1.Asn1Tag" />-Element für einen angegebenen Wert innerhalb einer angegebenen Tagklasse.</summary>
      <param name="tagClass">Die Tagklasse für dieses Tag.</param>
      <param name="tagValue">Der numerische Wert für dieses Tag.</param>
      <param name="isConstructed">
        <see langword="true" /> bei einem konstruierten Tag, <see langword="false" /> bei einem primitiven Tag.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="tagClass" /> ist kein bekannter Wert.
Oder <paramref name="tagValue" /> ist ein negativer Wert.</exception>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.#ctor(System.Formats.Asn1.UniversalTagNumber,System.Boolean)">
      <summary>Erstellt ein <see cref="T:System.Formats.Asn1.Asn1Tag" />-Element für ein Tag aus der UNIVERSAL-Klasse.</summary>
      <param name="universalTagNumber">Einer der Enumerationswerte, der den semantischen Typ für dieses Tag angibt.</param>
      <param name="isConstructed">
        <see langword="true" /> bei einem konstruierten Tag, <see langword="false" /> bei einem primitiven Tag.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="universalTagNumber" /> ist kein bekannter Wert.</exception>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.AsConstructed">
      <summary>Erzeugt ein Tag mit denselben <see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" />- und <see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" />-Werten, <see cref="P:System.Formats.Asn1.Asn1Tag.IsConstructed" /> ist jedoch <see langword="true" />.</summary>
      <returns>Ein Tag mit denselben <see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" />- und <see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" />-Werten, <see cref="P:System.Formats.Asn1.Asn1Tag.IsConstructed" /> ist jedoch <see langword="true" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.AsPrimitive">
      <summary>Erzeugt ein Tag mit denselben <see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" />- und <see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" />-Werten, <see cref="P:System.Formats.Asn1.Asn1Tag.IsConstructed" /> ist jedoch <see langword="false" />.</summary>
      <returns>Ein Tag mit denselben <see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" />- und <see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" />-Werten, <see cref="P:System.Formats.Asn1.Asn1Tag.IsConstructed" /> ist jedoch <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.CalculateEncodedSize">
      <summary>Gibt die Anzahl von Bytes an, die für die BER-Codierung dieses Tags erforderlich sind.</summary>
      <returns>Die Anzahl von Bytes, die für die BER-Codierung dieses Tags erforderlich sind.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.Decode(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>Liest ein BER-codiertes Tag, das bei <paramref name="source" /> beginnt.</summary>
      <param name="source">Die schreibgeschützte Bytesequenz, die mit einem BER-codierten Tag beginnt.</param>
      <param name="bytesConsumed">Wenn diese Methode zurückgegeben wird, ist die Anzahl von Bytes für das codierte Tag enthalten. Dieser Parameter wird nicht initialisiert behandelt.</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Die bereitgestellten Daten lassen sich nicht in ein Tag decodieren.</exception>
      <returns>Das decodierte Tag.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.Encode(System.Span{System.Byte})">
      <summary>Schreibt die BER-codierte Version dieses Tags in <paramref name="destination" />.</summary>
      <param name="destination">Der Start für das Schreiben des codierten Tags.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" />.<see cref="P:System.Span`1.Length" /> &lt; <see cref="M:System.Formats.Asn1.Asn1Tag.CalculateEncodedSize" />.</exception>
      <returns>Die Anzahl der Bytes, die in <paramref name="destination" /> geschrieben wurden.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.Equals(System.Formats.Asn1.Asn1Tag)">
      <summary>Testet, ob <paramref name="other" /> dieselbe Codierung wie dieses Tag aufweist.</summary>
      <param name="other">Das Tag, das auf Gleichheit geprüft werden soll.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="other" /> dieselben Werte für <see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" />, <see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> und <see cref="P:System.Formats.Asn1.Asn1Tag.IsConstructed" /> aufweist; anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.Equals(System.Object)">
      <summary>Testet, ob <paramref name="obj" /> ein <see cref="T:System.Formats.Asn1.Asn1Tag" /> mit derselben Codierung wie dieses Tag ist.</summary>
      <param name="obj">Das Objekt, dessen Wert auf Gleichheit geprüft werden soll.</param>
      <returns>
        <see langword="false" />, wenn <paramref name="obj" /> kein <see cref="T:System.Formats.Asn1.Asn1Tag" /> ist, anderenfalls <see cref="M:System.Formats.Asn1.Asn1Tag.Equals(System.Formats.Asn1.Asn1Tag)" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.GetHashCode">
      <summary>Gibt den Hashcode für diese Instanz zurück.</summary>
      <returns>Ein 32-Bit-Hashcode als ganze Zahl mit Vorzeichen.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.HasSameClassAndValue(System.Formats.Asn1.Asn1Tag)">
      <summary>Testet, ob <paramref name="other" /> dieselben <see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" />- und <see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" />-Werte aufweist wie dieses Tag. Es erfolgt kein Abgleich für <see cref="P:System.Formats.Asn1.Asn1Tag.IsConstructed" />.</summary>
      <param name="other">Das Tag, dessen Konzept auf Gleichheit geprüft werden soll.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="other" /> dieselben <see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" />- und <see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" />-Werte wie dieses Tag aufweist, anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.op_Equality(System.Formats.Asn1.Asn1Tag,System.Formats.Asn1.Asn1Tag)">
      <summary>Testet, ob zwei <see cref="T:System.Formats.Asn1.Asn1Tag" />-Werte dieselbe BER-Codierung aufweisen.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> dieselbe BER-Codierung aufweisen, anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.op_Inequality(System.Formats.Asn1.Asn1Tag,System.Formats.Asn1.Asn1Tag)">
      <summary>Testet, ob zwei <see cref="T:System.Formats.Asn1.Asn1Tag" />-Werte eine unterschiedliche BER-Codierung aufweisen.</summary>
      <param name="left">Der erste zu vergleichende Wert.</param>
      <param name="right">Der zweite zu vergleichende Wert.</param>
      <returns>
        <see langword="true" />, wenn <paramref name="left" /> und <paramref name="right" /> eine unterschiedliche BER-Codierung aufweisen, anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.ToString">
      <summary>Stellt eine Textdarstellung dieses Tags für das Debuggen bereit.</summary>
      <returns>Eine Textdarstellung dieses Tags, die für das Debuggen geeignet ist.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.TryDecode(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.Asn1Tag@,System.Int32@)">
      <summary>Versucht, ein BER-codiertes Tag zu lesen, das bei <paramref name="source" /> beginnt.</summary>
      <param name="source">Die schreibgeschützte Bytesequenz, die mit einem BER-codierten Tag beginnt.</param>
      <param name="tag">Das decodierte Tag.</param>
      <param name="bytesConsumed">Wenn diese Methode zurückgegeben wird, ist die Anzahl von Bytes enthalten, die zum codierten Tag beigetragen haben. Bei einem Fehler wird der Wert 0 zurückgegeben. Dieser Parameter wird nicht initialisiert behandelt.</param>
      <returns>
        <see langword="true" />, wenn ein Tag ordnungsgemäß decodiert wurde, anderenfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.Asn1Tag.TryEncode(System.Span{System.Byte},System.Int32@)">
      <summary>Versucht, die BER-codierte Version dieses Tags in <paramref name="destination" /> zu schreiben.</summary>
      <param name="destination">Der Start für das Schreiben des codierten Tags.</param>
      <param name="bytesWritten">Empfängt bei erfolgreichem Vorgang den Wert von <see cref="M:System.Formats.Asn1.Asn1Tag.CalculateEncodedSize" />, bei einem Fehler den Wert 0.</param>
      <returns>
        <see langword="false" /> bei <paramref name="destination" />.<see cref="P:System.Span`1.Length" /> &lt; <see cref="M:System.Formats.Asn1.Asn1Tag.CalculateEncodedSize" />(), anderenfalls <see langword="true" />.</returns>
    </member>
    <member name="P:System.Formats.Asn1.Asn1Tag.IsConstructed">
      <summary>Gibt an, ob das Tag eine konstruierte Codierung (<see langword="true" />) darstellt oder eine primitive Codierung (<see langword="false" />).</summary>
    </member>
    <member name="P:System.Formats.Asn1.Asn1Tag.TagClass">
      <summary>Die Tagklasse, zu der dieses Tag gehört.</summary>
    </member>
    <member name="P:System.Formats.Asn1.Asn1Tag.TagValue">
      <summary>Der numerische Wert für dieses Tag.</summary>
    </member>
    <member name="T:System.Formats.Asn1.AsnContentException">
      <summary>Die Ausnahme, die ausgelöst wird, wenn ein codierter ASN.1-Wert nicht erfolgreich decodiert werden kann.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnContentException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Formats.Asn1.AsnContentException" />-Klasse unter Verwendung der Standardmeldung.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnContentException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Formats.Asn1.AsnContentException" />-Klasse mit serialisierten Daten.</summary>
      <param name="info">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
      <param name="context">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
    </member>
    <member name="M:System.Formats.Asn1.AsnContentException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Formats.Asn1.AsnContentException" />-Klasse unter Verwendung der bereitgestellten Meldung.</summary>
      <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
    </member>
    <member name="M:System.Formats.Asn1.AsnContentException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Formats.Asn1.AsnContentException" />-Klasse mit einer angegebenen Meldung und der Ausnahme, die die Ursache dieser Ausnahme ist.</summary>
      <param name="message">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="inner">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist.</param>
    </member>
    <member name="T:System.Formats.Asn1.AsnDecoder">
      <summary>Stellt zustandslose Methoden zum Decodieren von BER-, CER- oder DER-codierten ASN.1-Daten bereit.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadBitString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen Bitzeichenfolgenwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln und gibt den Inhalt in einem neuen Array zurück.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="unusedBitCount">Bei Erfolg wird die Anzahl der Bits im letzten Byte empfangen, die vom Writer als „nicht verwendet“ gemeldet wurden.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 3).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>Ein Array, das den Inhalt des Bitzeichenfolgenwerts enthält.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadBoolean(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen booleschen Wert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 1).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>Der decodierte Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadCharacterString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.UniversalTagNumber,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als Zeichenfolge mit dem angegebenen Tag und Codierungstyp und gibt die decodierte Zeichenfolge zurück.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="encodingType">Einer der Enumerationswerte, der den zu verarbeitenden Werttyp darstellt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das universelle Tag, das für den angeforderten Codierungstyp geeignet ist.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.
Oder <paramref name="encodingType" /> ist kein bekannter Zeichenfolgentyp.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.
Oder die Zeichenfolge konnte nicht erfolgreich decodiert werden.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist nicht identisch mit <paramref name="encodingType" />.</exception>
      <returns>Der decodierte Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadEncodedValue(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Sucht den Inhaltsbereich für den codierten Wert am Anfang des <paramref name="source" />-Puffers unter Verwendung der angegebenen Codierungsregeln.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="contentOffset">Die Rückgabe dieser Methode ist der Offset der Inhaltsnutzlast relativ zum Anfang von <paramref name="source" />.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="contentLength">Die Rückgabe dieser Methode ist die Anzahl der Bytes in der Inhaltsnutzlast (die 0 sein kann).
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">
        <paramref name="source" /> stellt keinen Wert dar, der gemäß den angegebenen Codierungsregeln codiert ist.</exception>
      <returns>Das Tag, das den Inhalt identifiziert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadEnumeratedBytes(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen Enumerationswert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln und gibt den Inhalt als Segment des Puffers zurück.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 10).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>Das Segment des Puffers, das die Bytes des Enumerationswerts enthält, im big-endian-Format mit Vorzeichen.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadEnumeratedValue(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Type,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen Enumerationswert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln und konvertiert diesen in die von <paramref name="enumType" /> angegebene nicht-[<see cref="T:System.FlagsAttribute" />]-Enumeration.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="enumType">Typobjekt, das den Zieltyp darstellt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 10).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der codierte Wert ist zu groß für einen <paramref name="enumType" />-Wert.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> ist kein Enumerationstyp.
Oder <paramref name="enumType" /> wurde mit <see cref="T:System.FlagsAttribute" /> deklariert.
Oder <paramref name="enumType" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="enumType" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> ist <see langword="null" />.</exception>
      <returns>Der in einen <paramref name="enumType" /> konvertierte Enumerationswert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadEnumeratedValue``1(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen Enumerationswert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln und konvertiert diesen in die von <typeparamref name="TEnum" /> angegebene nicht-[<see cref="T:System.FlagsAttribute" />]-Enumeration.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 10).</param>
      <typeparam name="TEnum">Ziel-Aufzählungs Typen</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der codierte Wert ist zu groß für einen <typeparamref name="TEnum" />-Wert.</exception>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="TEnum" /> ist kein Enumerationstyp.
Oder <typeparamref name="TEnum" /> wurde mit <see cref="T:System.FlagsAttribute" /> deklariert.
Oder <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>Der in ein <typeparamref name="TEnum" />-Element konvertierte Enumerationswert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadGeneralizedTime(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen GeneralizedTime-Wert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 24).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>Der decodierte Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadInteger(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen Integerwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 2).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>Der decodierte numerische Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadIntegerBytes(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen Integerwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln und gibt den Inhalt als Segment des Puffers zurück.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 2).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>Das Segment des Puffers, das die Bytes des Integerwerts in einem big-endian-Format mit Vorzeichen enthält.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadNamedBitList(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest eine NamedBitList aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 3).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>Die Bits aus dem codierten Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadNamedBitListValue(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Type,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest eine NamedBitList aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln und konvertiert diesen in die durch <paramref name="flagsEnumType" /> angegebene [<see cref="T:System.FlagsAttribute" />]-Enumeration.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="flagsEnumType">Typobjekt, das den Zieltyp darstellt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 3).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der codierte Wert ist zu groß für einen <paramref name="flagsEnumType" />-Wert.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="flagsEnumType" /> ist kein Enumerationstyp.
Oder <paramref name="flagsEnumType" /> wurde nicht mit <see cref="T:System.FlagsAttribute" /> deklariert oder <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="flagsEnumType" /> ist gleich <see langword="null" />.</exception>
      <returns>Der in einen <paramref name="flagsEnumType" /> konvertierte NamedBitList-Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadNamedBitListValue``1(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest eine NamedBitList aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln und konvertiert diesen in die durch <typeparamref name="TFlagsEnum" /> angegebene [<see cref="T:System.FlagsAttribute" />]-Enumeration.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 3).</param>
      <typeparam name="TFlagsEnum">Ziel-Aufzählungs Typen</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der codierte Wert ist zu groß für einen <typeparamref name="TFlagsEnum" />-Wert.</exception>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="TFlagsEnum" /> ist kein Enumerationstyp.
Oder <typeparamref name="TFlagsEnum" /> wurde nicht mit <see cref="T:System.FlagsAttribute" /> deklariert oder <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>Der in ein <typeparamref name="TFlagsEnum" />-Element konvertierte NamedBitList-Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadNull(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen <see langword="null" />-Wert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 5).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadObjectIdentifier(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen Objektbezeichnerwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 6).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>Der decodierte Objektbezeichner in punktierter Dezimalschreibweise.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadOctetString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen Oktett-Zeichenfolgenwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln und gibt den Inhalt in einem neuen Array zurück.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 4).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>Ein Array, das den Inhalt des Oktett-Zeichenfolgenwerts enthält.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadSequence(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen Sequence- oder Sequence-Of-Wert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="contentOffset">Die Rückgabe dieser Methode ist der Offset der Inhaltsnutzlast relativ zum Anfang von <paramref name="source" />.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="contentLength">Die Rückgabe dieser Methode ist die Anzahl der Bytes in der Inhaltsnutzlast (die 0 sein kann).
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 16).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadSetOf(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Int32@,System.Boolean,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen Set-Of-Wert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="contentOffset">Die Rückgabe dieser Methode ist der Offset der Inhaltsnutzlast relativ zum Anfang von <paramref name="source" />.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="contentLength">Die Rückgabe dieser Methode ist die Anzahl der Bytes in der Inhaltsnutzlast (die 0 sein kann).
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="skipSortOrderValidation">
        <see langword="true" />, um die Daten immer in der Reihenfolge zu akzeptieren, in der sie vorliegen, <see langword="false" />, um zu bestätigen, dass die Daten ordnungsgemäß sortiert sind, wenn die Codierungsregeln besagen, dass Sortierung erforderlich war (CER und DER).</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 17).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.ReadUtcTime(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen UtcTime-Wert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="twoDigitYearMax">Das größte Jahr, das mit diesem Wert dargestellt werden soll.
Der Standardwert (2049) stellt den Bereich 1950 bis 2049 für X.509-Zertifikate dar.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 24).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.
Oder <paramref name="twoDigitYearMax" /> liegt nicht im Bereich [99, 9999].</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>Der decodierte Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadBitString(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Versucht, einen Bit-Zeichenfolgenwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln in <paramref name="destination" /> zu kopieren.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="destination">Der Puffer, in den geschrieben werden soll.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="unusedBitCount">Bei Erfolg wird die Anzahl der Bits im letzten Byte empfangen, die vom Writer als „nicht verwendet“ gemeldet wurden.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesWritten">Die Rückgabe dieser Methode ist die Gesamtzahl der in <paramref name="destination" /> geschriebenen Bytes.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 3).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.
Oder <paramref name="destination" /> überschneidet sich mit <paramref name="source" />.</exception>
      <returns>
        <see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um den Wert der Bitzeichenfolge zu empfangen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadCharacterString(System.ReadOnlySpan{System.Byte},System.Span{System.Char},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.UniversalTagNumber,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest einen Zeichenfolgenwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln und kopiert die decodierte Zeichenfolge in einen bereitgestellten Zielpuffer.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="destination">Der Puffer, in den geschrieben werden soll.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="encodingType">Einer der Enumerationswerte, der den zu verarbeitenden Werttyp darstellt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="charsWritten">Die Rückgabe dieser Methode ist die Anzahl der in <paramref name="destination" /> geschriebenen Zeichen.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das universelle Tag, das für den angeforderten Codierungstyp geeignet ist.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.
Oder <paramref name="encodingType" /> ist kein bekannter Zeichenfolgentyp.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.
Oder die Zeichenfolge konnte nicht erfolgreich decodiert werden.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist nicht identisch mit <paramref name="encodingType" />.</exception>
      <returns>
        <see langword="true" /> und bewegt den Reader vorwärts, wenn <paramref name="destination" /> eine ausreichende Länge zum Empfangen des Werts hatte, andernfalls, <see langword="false" /> und der Reader wird nicht vorwärtsbewegt.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadCharacterStringBytes(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.Asn1Tag,System.Int32@,System.Int32@)">
      <summary>Versucht, einen Zeichenfolgenwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln zu lesen, wobei die nicht verarbeiteten Bytes in den bereitgestellten Zielpuffer kopiert werden.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="destination">Der Puffer, in den geschrieben werden soll.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesWritten">Bei Erfolg wird die Anzahl der in <paramref name="destination" /> geschriebenen Bytes empfangen.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist kein Zeichenfolgen-Tagtyp.
Oder <paramref name="destination" /> überschneidet sich mit <paramref name="source" />.</exception>
      <returns>
        <see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um den Wert der nicht verarbeiteten Zeichenfolge zu empfangen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadEncodedValue(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.Asn1Tag@,System.Int32@,System.Int32@,System.Int32@)">
      <summary>Versucht, den Inhaltsbereich für den codierten Wert am Anfang des <paramref name="source" />-Puffers mithilfe der angegebenen Codierungsregeln zu ermitteln.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="tag">Die Rückgabe dieser Methode ist das Tag, das den Inhalt identifiziert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="contentOffset">Die Rückgabe dieser Methode ist der Offset der Inhaltsnutzlast relativ zum Anfang von <paramref name="source" />.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="contentLength">Die Rückgabe dieser Methode ist die Anzahl der Bytes in der Inhaltsnutzlast (die 0 sein kann).
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <returns>
        <see langword="true" />, wenn <paramref name="source" /> eine gültige strukturelle Codierung für die angegebenen Codierungsregeln darstellt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadInt32(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Versucht, einen Integerwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln als 32-Bit-Wert mit Vorzeichen zu lesen.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="value">Empfängt bei Erfolg den interpretierten numerischen Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 2).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>
        <see langword="true" />, wenn der Integerwert zwischen <see cref="F:System.Int32.MinValue" /> und <see cref="F:System.Int32.MaxValue" /> (einschließlich) liegt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadInt64(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int64@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Versucht, einen Integerwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln als 64-Bit-Wert mit Vorzeichen zu lesen.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="value">Empfängt bei Erfolg den interpretierten numerischen Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 2).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>
        <see langword="true" />, wenn der Integerwert zwischen <see cref="F:System.Int64.MinValue" /> und <see cref="F:System.Int64.MaxValue" /> (einschließlich) liegt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadOctetString(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Versucht, einen Oktett-Zeichenfolgenwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln zu lesen, wobei der Wert in den bereitgestellten Zielpuffer kopiert wird.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="destination">Der Puffer, in den geschrieben werden soll.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesWritten">Die Rückgabe dieser Methode ist die Gesamtzahl der in <paramref name="destination" /> geschriebenen Bytes.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 4).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.
Oder <paramref name="destination" /> überschneidet sich mit <paramref name="source" />.</exception>
      <returns>
        <see langword="true" />, wenn <paramref name="destination" /> groß genug ist, um den Wert der Oktettzeichenfolge zu empfangen, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadPrimitiveBitString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Int32@,System.ReadOnlySpan{System.Byte}@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Versucht, einen Bit-Zeichenfolgenwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln abzurufen, wenn der Wert in einer einzelnen (primitiven) Codierung enthalten ist.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="unusedBitCount">Bei Erfolg wird die Anzahl der Bits im letzten Byte empfangen, die vom Writer als „nicht verwendet“ gemeldet wurden.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="value">Empfängt bei Erfolg ein Segment des Eingabepuffers, das dem Wert der Bitzeichenfolge entspricht.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 3).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>
        <see langword="true" />, wenn der Bit-Zeichenfolgenwert eine primitive Codierung aufweist und alle als nicht verwendet gemeldeten Bits auf 0 festgelegt sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadPrimitiveCharacterStringBytes(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.Asn1Tag,System.ReadOnlySpan{System.Byte}@,System.Int32@)">
      <summary>Versucht, einen nicht verarbeiteten Zeichenfolgenwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln abzurufen, wenn der Wert in einer einzelnen (primitiven) Codierung enthalten ist.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll.</param>
      <param name="value">Empfängt bei Erfolg ein Segment des Eingabepuffers, das dem Wert der Bitzeichenfolge entspricht.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist kein Zeichenfolgen-Tagtyp.</exception>
      <returns>
        <see langword="true" />, wenn der Zeichenfolgenwert eine primitive Codierung aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadPrimitiveOctetString(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.ReadOnlySpan{System.Byte}@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Versucht, einen Oktett-Zeichenfolgenwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln abzurufen, wenn der Wert in einer einzelnen (primitiven) Codierung enthalten ist.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="value">Empfängt bei Erfolg ein Segment des Eingabepuffers, das dem Wert der Oktettzeichenfolge entspricht.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 4).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>
        <see langword="true" />, wenn der Oktett-Zeichenfolgenwert eine primitive Codierung aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadUInt32(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.UInt32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Versucht, einen Integerwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln als 32-Bit-Wert ohne Vorzeichen zu lesen.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="value">Empfängt bei Erfolg den interpretierten numerischen Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 2).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>
        <see langword="true" />, wenn der Integerwert zwischen <see cref="F:System.UInt32.MinValue" /> und <see cref="F:System.UInt32.MaxValue" /> (einschließlich) liegt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnDecoder.TryReadUInt64(System.ReadOnlySpan{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.UInt64@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Versucht, einen Integerwert aus <paramref name="source" /> mit einem angegebenen Tag gemäß den angegebenen Codierungsregeln als 64-Bit-Wert ohne Vorzeichen zu lesen.</summary>
      <param name="source">Der Puffer, der codierte Daten enthält.</param>
      <param name="ruleSet">Die Codierungseinschränkungen, die beim Interpretieren der Daten verwendet werden sollen.</param>
      <param name="value">Empfängt bei Erfolg den interpretierten numerischen Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="bytesConsumed">Die Rückgabe dieser Methode ist die Gesamtzahl der Bytes für den codierten Wert.
Dieser Parameter wird nicht initialisiert behandelt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universell 2).</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert weist nicht das richtige Tag auf.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>
        <see langword="true" />, wenn der Integerwert zwischen <see cref="F:System.UInt64.MinValue" /> und <see cref="F:System.UInt64.MaxValue" /> (einschließlich) liegt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Formats.Asn1.AsnEncodingRules">
      <summary>Der Codierungsregelsatz für einen <see cref="T:System.Formats.Asn1.AsnReader" /> oder <see cref="T:System.Formats.Asn1.AsnWriter" />.</summary>
    </member>
    <member name="F:System.Formats.Asn1.AsnEncodingRules.BER">
      <summary>ITU-T X.690 Basic Encoding Rules</summary>
    </member>
    <member name="F:System.Formats.Asn1.AsnEncodingRules.CER">
      <summary>ITU-T X.690 Canonical Encoding Rules</summary>
    </member>
    <member name="F:System.Formats.Asn1.AsnEncodingRules.DER">
      <summary>ITU-T X. 690 Distinguished Encoding Rules</summary>
    </member>
    <member name="T:System.Formats.Asn1.AsnReader">
      <summary>Ein zustandsbehafteter Vorwärtsreader für BER-, CER- oder DER-codierte ASN.1-Daten.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.#ctor(System.ReadOnlyMemory{System.Byte},System.Formats.Asn1.AsnEncodingRules,System.Formats.Asn1.AsnReaderOptions)">
      <summary>Erstellen Sie ein <see cref="T:System.Formats.Asn1.AsnReader" />-Element für <paramref name="data" /> mit einem angegebenen Regelsatz.</summary>
      <param name="data">Die zu lesenden Daten.</param>
      <param name="ruleSet">Die Codierungseinschränkungen für den Reader.</param>
      <param name="options">Zusätzliche Optionen für den Reader.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.PeekContentBytes">
      <summary>Ruft eine <see cref="T:System.ReadOnlyMemory`1" />-Ansicht der Inhaltsoktette (Bytes) des nächsten codierten Werts ab, ohne dass der Reader fortfährt.</summary>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der Reader wird an einem Punkt positioniert, an dem das Tag oder die Länge gemäß den aktuellen Codierungsregeln ungültig ist.</exception>
      <returns>Die Bytes der Inhaltsoktette des nächsten codierten Werts.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.PeekEncodedValue">
      <summary>Ruft eine <see cref="T:System.ReadOnlyMemory`1" />-Ansicht des nächsten codierten Werts ab, ohne dass der Reader fortfährt. Bei Codierungen mit unbegrenzter Länge umfasst dies den Marker für das Ende des Inhalts.</summary>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der Reader wird an einem Punkt positioniert, an dem das Tag oder die Länge gemäß den aktuellen Codierungsregeln ungültig ist.</exception>
      <returns>Die Bytes des nächsten codierten Werts.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.PeekTag">
      <summary>Liest das codierte Tag an der nächsten Datenposition, ohne dass der Reader vorwärtsbewegt wird.</summary>
      <exception cref="T:System.Formats.Asn1.AsnContentException">An der aktuellen Position des Readers konnte ein Tag nicht decodiert werden.</exception>
      <returns>Der decodierte Tagwert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadBitString(System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als BIT STRING mit einem angegebenen Tag und gibt den Wert in einem Bytearray zurück.</summary>
      <param name="unusedBitCount">Bei erfolgreichem Vorgang wird die Anzahl von Bits im letzten Byte empfangen, die vom Writer als „nicht verwendet“ gemeldet wurden.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 1).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Eine Kopie des Werts in einem neu zugeordneten Array mit präziser Größe.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadBoolean(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als booleschen Wert mit einem angegebenen Tag.</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 1).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Der decodierte Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadCharacterString(System.Formats.Asn1.UniversalTagNumber,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als Zeichenfolge mit dem angegebenen Tag und Codierungstyp und gibt den decodierten Wert als Zeichenfolge zurück.</summary>
      <param name="encodingType">Einer der Enumerationswerte, der den zu verarbeitenden Werttyp darstellt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das universelle Tag, das für den angeforderten Codierungstyp geeignet ist.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encodingType" /> ist kein bekannter Zeichenfolgentyp.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.
Oder die Zeichenfolge konnte nicht erfolgreich decodiert werden.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist nicht identisch mit <paramref name="encodingType" />.</exception>
      <returns>Der decodierte Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadEncodedValue">
      <summary>Ruft eine <see cref="T:System.ReadOnlyMemory`1" />-Ansicht des nächsten codierten Werts ab, und der Reader wird bis zu einer Position nach diesem Wert vorwärtsbewegt. Bei einer Codierung mit unbegrenzter Länge umfasst dies den Marker für das Ende des Inhalts.</summary>
      <returns>Eine <see cref="T:System.ReadOnlyMemory`1" />-Ansicht des nächsten codierten Werts.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadEnumeratedBytes(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als Enumerationswert mit einem angegebenen Tag und gibt die Inhalte als <see cref="T:System.ReadOnlyMemory`1" /> für die ursprünglichen Daten zurück.</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 10).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Die Bytes des Enumerationswerts, im big-endian-Format mit Vorzeichen.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadEnumeratedValue(System.Type,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als Enumerationswert mit einem angegebenen Tag und konvertiert ihn in den Nicht-[<see cref="T:System.FlagsAttribute" />]-Enumerationswert, der von <paramref name="enumType" /> angegeben ist.</summary>
      <param name="enumType">Typobjekt, das den Zieltyp darstellt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 10).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der codierte Wert ist zu groß für einen <paramref name="enumType" />-Wert.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="enumType" /> ist kein Enumerationstyp.
Oder <paramref name="enumType" /> wurde mit <see cref="T:System.FlagsAttribute" /> deklariert.
Oder <paramref name="enumType" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="enumType" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="enumType" /> ist <see langword="null" />.</exception>
      <returns>Der in ein <paramref name="enumType" />-Element konvertierte Enumerationswert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadEnumeratedValue``1(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als Enumerationswert mit einem angegebenen Tag und konvertiert ihn in den Nicht-[<see cref="T:System.FlagsAttribute" />]-Enumerationswert, der von <typeparamref name="TEnum" /> angegeben ist.</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 10).</param>
      <typeparam name="TEnum">Ziel-Aufzählungs Typen</typeparam>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der codierte Wert ist zu groß für einen <typeparamref name="TEnum" />-Wert.</exception>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="TEnum" /> ist kein Enumerationstyp.
Oder <typeparamref name="TEnum" /> wurde mit <see cref="T:System.FlagsAttribute" /> deklariert.
Oder <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Der in ein <typeparamref name="TEnum" />-Element konvertierte Enumerationswert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadGeneralizedTime(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als GeneralizedTime-Wert mit einem angegebenen Tag.</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 24).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Der decodierte Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadInteger(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als Ganzzahl mit einem angegebenen Tag.</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 2).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Der decodierte Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadIntegerBytes(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als Ganzzahl mit einem angegebenen Tag und gibt die Inhalte als <see cref="T:System.ReadOnlyMemory`1" /> für die ursprünglichen Daten zurück.</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 2).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Die Bytes des Ganzzahlwerts, im big-endian-Format mit Vorzeichen.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadNamedBitList(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als NamedBitList mit einem angegebenen Tag.</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll.</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Die Bits aus dem codierten Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadNamedBitListValue(System.Type,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als NamedBitList mit einem angegebenen Tag und konvertiert ihn in den [<see cref="T:System.FlagsAttribute" />]-Enumerationswert, der von <paramref name="flagsEnumType" /> angegeben ist.</summary>
      <param name="flagsEnumType">Typobjekt, das den Zieltyp darstellt.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll.</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der codierte Wert ist zu groß für einen <paramref name="flagsEnumType" />-Wert.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="flagsEnumType" /> ist kein Enumerationstyp.
Oder <paramref name="flagsEnumType" /> wurde nicht mit <see cref="T:System.FlagsAttribute" /> deklariert oder <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="flagsEnumType" /> ist gleich <see langword="null" />.</exception>
      <returns>Der in ein <paramref name="flagsEnumType" />-Element konvertierte NamedBitList-Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadNamedBitListValue``1(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als NamedBitList mit einem angegebenen Tag und konvertiert ihn in den [<see cref="T:System.FlagsAttribute" />]-Enumerationswert, der von <typeparamref name="TFlagsEnum" /> angegeben ist.</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll.</param>
      <typeparam name="TFlagsEnum">Ziel-Aufzählungs Typen</typeparam>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der codierte Wert ist zu groß für einen <typeparamref name="TFlagsEnum" />-Wert.</exception>
      <exception cref="T:System.ArgumentException">
        <typeparamref name="TFlagsEnum" /> ist kein Enumerationstyp.
Oder <typeparamref name="TFlagsEnum" /> wurde nicht mit <see cref="T:System.FlagsAttribute" /> deklariert oder <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Der in ein <typeparamref name="TFlagsEnum" />-Element konvertierte NamedBitList-Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadNull(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als NULL mit einem angegebenen Tag.</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 5).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadObjectIdentifier(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als OBJECT IDENTIFIER mit einem angegebenen Tag und gibt den Wert in einer Zeichenfolge im Dezimalpunktformat zurück.</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 6).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Der Objekt-ID-Wert in einer Zeichenfolge im Dezimalpunktformat.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadOctetString(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als OCTET STRING mit dem UNIVERSAL 4-Tag und gibt den Wert in einem Bytearray zurück.</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 4).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Eine Kopie des Werts in einem neu zugeordneten Array mit präziser Größe.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als SEQUENCE oder SEQUENCE-OF mit dem angegebenen Tag und gibt das Ergebnis als neuen Reader zurück, der beim ersten Wert in der Sequenz positioniert ist (oder mit <see cref="P:System.Formats.Asn1.AsnReader.HasData" />  ==  <see langword="false" /> ).</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 16).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Ein neuer Reader, der beim ersten Wert in der Sequenz positioniert ist (oder mit <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />).</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadSetOf(System.Boolean,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als SET-OF mit dem angegebenen Tag und gibt das Ergebnis als neuen Reader zurück, der beim ersten Wert im SET-OF-Element positioniert ist (oder mit <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />).</summary>
      <param name="skipSortOrderValidation">
        <see langword="true" />, um die Daten immer in der Reihenfolge zu akzeptieren, in der sie vorliegen, <see langword="false" />, um zu bestätigen, dass die Daten ordnungsgemäß sortiert sind, wenn die Codierungsregeln besagen, dass eine Sortierung erforderlich war (CER und DER).</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 17).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Ein neuer Reader, der beim ersten Wert im SET-OF-Element positioniert ist (oder mit <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />).</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als SET-OF mit dem angegebenen Tag und gibt das Ergebnis als neuen Reader zurück, der beim ersten Wert im SET-OF-Element positioniert ist (oder mit <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />). Dabei wird der <see cref="P:System.Formats.Asn1.AsnReaderOptions.SkipSetSortOrderVerification" />-Wert des Konstruktors verwendet (Standardwert <see langword="false" />).</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 17).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Ein neuer Reader, der beim ersten Wert im SET-OF-Element positioniert ist (oder mit <see cref="P:System.Formats.Asn1.AsnReader.HasData" /> == <see langword="false" />).</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadUtcTime(System.Int32,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als UTCTime mit einem angegebenen Tag.</summary>
      <param name="twoDigitYearMax">Das größte Jahr, das mit diesem Wert dargestellt werden soll.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 23).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Der decodierte Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ReadUtcTime(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als UTCTime mit einem angegebenen Tag unter Verwendung des <see cref="P:System.Formats.Asn1.AsnReaderOptions.UtcTimeTwoDigitYearMax" />-Werts aus den Optionen, die an den Konstruktor übergeben werden (Standardwert 2049).</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 23).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>Der decodierte Wert.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.ThrowIfNotEmpty">
      <summary>Löst einen standardisierten <see cref="T:System.Formats.Asn1.AsnContentException" /> aus, wenn der Reader über verbleibende Daten verfügt. Wenn <see cref="P:System.Formats.Asn1.AsnReader.HasData" /><see langword="false" /> zurückgibt, wird keine Funktion ausgeführt.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadBitString(System.Span{System.Byte},System.Int32@,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als BIT STRING mit einem angegebenen Tag und kopiert den Wert in einen angegebenen Zielpuffer.</summary>
      <param name="destination">Der Puffer, in den geschrieben werden soll.</param>
      <param name="unusedBitCount">Bei erfolgreichem Vorgang wird die Anzahl von Bits im letzten Byte empfangen, die vom Writer als „nicht verwendet“ gemeldet wurden.</param>
      <param name="bytesWritten">Empfängt bei Erfolg die Anzahl von Bytes, die in <paramref name="destination" /> geschrieben werden.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 1).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>
        <see langword="true" /> und bewegt den Reader vorwärts, wenn <paramref name="destination" /> eine ausreichende Länge zum Empfangen des Werts hatte, andernfalls <see langword="false" />, und der Reader wird nicht vorwärtsbewegt.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadCharacterString(System.Span{System.Char},System.Formats.Asn1.UniversalTagNumber,System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als Zeichenfolge mit dem angegebenen Tag und Codierungstyp und kopiert den decodierten Wert in einen angegebenen Zielpuffer.</summary>
      <param name="destination">Der Puffer, in den geschrieben werden soll.</param>
      <param name="encodingType">Einer der Enumerationswerte, der den zu verarbeitenden Werttyp darstellt.</param>
      <param name="charsWritten">Empfängt bei Erfolg die Anzahl von Zeichen, die in <paramref name="destination" /> geschrieben wurden.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das universelle Tag, das für den angeforderten Codierungstyp geeignet ist.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encodingType" /> ist kein bekannter Zeichenfolgentyp.</exception>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.
Oder die Zeichenfolge konnte nicht erfolgreich decodiert werden.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist nicht identisch mit <paramref name="encodingType" />.</exception>
      <returns>
        <see langword="true" /> und bewegt den Reader vorwärts, wenn <paramref name="destination" /> eine ausreichende Länge zum Empfangen des Werts hatte, andernfalls <see langword="false" />, und der Reader wird nicht vorwärtsbewegt.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadCharacterStringBytes(System.Span{System.Byte},System.Formats.Asn1.Asn1Tag,System.Int32@)">
      <summary>Liest den nächsten Wert als Zeichenfolge mit dem angegebenen Tag und kopiert die nicht verarbeiteten Bytes in einen angegebenen Zielpuffer.</summary>
      <param name="destination">Der Puffer, in den geschrieben werden soll.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll.</param>
      <param name="bytesWritten">Empfängt bei Erfolg die Anzahl von Bytes, die in <paramref name="destination" /> geschrieben werden.</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist kein Zeichenfolgen-Tagtyp.</exception>
      <returns>
        <see langword="true" /> und bewegt den Reader vorwärts, wenn <paramref name="destination" /> eine ausreichende Länge zum Empfangen des Werts hatte, andernfalls <see langword="false" />, und der Reader wird nicht vorwärtsbewegt.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadInt32(System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Versucht, den nächsten Wert als Ganzzahl mit einem angegebenen Tag zu lesen (32-Bit-Wert mit Vorzeichen).</summary>
      <param name="value">Empfängt bei erfolgreichem Vorgang den decodierten Wert.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 2).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>
        <see langword="false" /> und bewegt den Reader nicht vorwärts, wenn der Wert nicht zwischen <see cref="F:System.Int32.MinValue" /> und <see cref="F:System.Int32.MaxValue" /> liegt. Anderenfalls wird <see langword="true" /> zurückgegeben, und der Reader wird vorwärtsbewegt.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadInt64(System.Int64@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Versucht, den nächsten Wert als Ganzzahl mit einem angegebenen Tag zu lesen (64-Bit-Wert mit Vorzeichen).</summary>
      <param name="value">Empfängt bei erfolgreichem Vorgang den decodierten Wert.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 2).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>
        <see langword="false" /> und bewegt den Reader nicht vorwärts, wenn der Wert nicht zwischen <see cref="F:System.Int64.MinValue" /> und <see cref="F:System.Int64.MaxValue" /> liegt. Anderenfalls wird <see langword="true" /> zurückgegeben, und der Reader wird vorwärtsbewegt.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadOctetString(System.Span{System.Byte},System.Int32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als OCTET STRING mit einem angegebenen Tag und kopiert den Wert in einen angegebenen Zielpuffer.</summary>
      <param name="destination">Der Puffer, in den geschrieben werden soll.</param>
      <param name="bytesWritten">Empfängt bei Erfolg die Anzahl von Bytes, die in <paramref name="destination" /> geschrieben werden.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 4).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>
        <see langword="true" /> und bewegt den Reader vorwärts, wenn <paramref name="destination" /> eine ausreichende Länge zum Empfangen des Werts hatte, andernfalls <see langword="false" />, und der Reader wird nicht vorwärtsbewegt.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadPrimitiveBitString(System.Int32@,System.ReadOnlyMemory{System.Byte}@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Liest den nächsten Wert als BIT STRING mit einem angegebenen Tag und gibt die Inhalte als <see cref="T:System.ReadOnlyMemory`1" /> für die ursprünglichen Daten zurück.</summary>
      <param name="unusedBitCount">Bei erfolgreichem Vorgang wird die Anzahl von Bits im letzten Byte empfangen, die vom Writer als „nicht verwendet“ gemeldet wurden.</param>
      <param name="value">Bei erfolgreichem Vorgang wird ein <see cref="T:System.ReadOnlyMemory`1" />-Element für die ursprünglichen Daten empfangen, das dem Wert von BIT STRING entspricht.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 1).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>
        <see langword="true" /> und bewegt den Reader vorwärts, wenn der BIT STRING-Wert eine primitive Codierung aufwies. <see langword="false" /> und bewegt den Reader nicht vorwärts, wenn der Wert eine konstruierte Codierung aufwies.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadPrimitiveCharacterStringBytes(System.Formats.Asn1.Asn1Tag,System.ReadOnlyMemory{System.Byte}@)">
      <summary>Liest den nächsten Wert als Zeichen mit einem angegebenen Tag und gibt die Inhalte als nicht verarbeitetes <see cref="T:System.ReadOnlyMemory`1" />-Element für die ursprünglichen Daten zurück.</summary>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll.</param>
      <param name="contents">Bei erfolgreichem Vorgang wird ein <see cref="T:System.ReadOnlyMemory`1" />-Element für die ursprünglichen Daten empfangen, das dem Wert der Zeichenfolge entspricht.</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist kein Zeichenfolgen-Tagtyp.</exception>
      <returns>
        <see langword="true" /> und bewegt den Reader vorwärts, wenn der Zeichenfolgenwert eine primitive Codierung aufwies. <see langword="false" /> und bewegt den Reader nicht vorwärts, wenn der Wert eine konstruierte Codierung aufwies.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadPrimitiveOctetString(System.ReadOnlyMemory{System.Byte}@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Versucht, den nächsten Wert als OCTET STRING mit einem angegebenen Tag zu lesen, und gibt die Inhalte als <see cref="T:System.ReadOnlyMemory`1" />-Element für die ursprünglichen Daten zurück.</summary>
      <param name="contents">Bei erfolgreichem Vorgang wird ein <see cref="T:System.ReadOnlyMemory`1" />-Element für die ursprünglichen Daten empfangen, das dem Wert von OCTET STRING entspricht.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll.</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>
        <see langword="true" /> und bewegt den Reader vorwärts, wenn der OCTET STRING-Wert eine primitive Codierung aufwies. <see langword="false" /> und bewegt den Reader nicht vorwärts, wenn der Wert eine konstruierte Codierung aufwies.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadUInt32(System.UInt32@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Versucht, den nächsten Wert als Ganzzahl mit einem angegebenen Tag zu lesen (als 32-Bit-Wert ohne Vorzeichen).</summary>
      <param name="value">Empfängt bei erfolgreichem Vorgang den decodierten Wert.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 2).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>
        <see langword="false" /> und bewegt den Reader nicht vorwärts, wenn der Wert nicht zwischen <see cref="F:System.UInt32.MinValue" /> und <see cref="F:System.UInt32.MaxValue" /> liegt. Anderenfalls wird <see langword="true" /> zurückgegeben, und der Reader wird vorwärtsbewegt.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnReader.TryReadUInt64(System.UInt64@,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Versucht, den nächsten Wert als Ganzzahl mit einem angegebenen Tag zu lesen (als 64-Bit-Wert ohne Vorzeichen).</summary>
      <param name="value">Empfängt bei erfolgreichem Vorgang den decodierten Wert.</param>
      <param name="expectedTag">Das Tag, das vor dem Lesen überprüft werden soll, oder <see langword="null" /> für das Standardtag (Universal 2).</param>
      <exception cref="T:System.Formats.Asn1.AsnContentException">Der nächste Wert verfügt nicht über das korrekte Tag.
Oder die Längencodierung ist gemäß den aktuellen Codierungsregeln ungültig.
Oder der Inhalt ist gemäß den aktuellen Codierungsregeln ungültig.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="expectedTag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <returns>
        <see langword="false" /> und bewegt den Reader nicht vorwärts, wenn der Wert nicht zwischen <see cref="F:System.UInt64.MinValue" /> und <see cref="F:System.UInt64.MaxValue" /> liegt. Anderenfalls wird <see langword="true" /> zurückgegeben, und der Reader wird vorwärtsbewegt.</returns>
    </member>
    <member name="P:System.Formats.Asn1.AsnReader.HasData">
      <summary>Ruft eine Angabe dazu ab, ob der Reader über verbleibende Daten zur Verarbeitung verfügt.</summary>
      <returns>
        <see langword="true" /> , wenn weitere Daten für den Reader zur Verarbeitung verfügbar sind. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Formats.Asn1.AsnReader.RuleSet">
      <summary>Ruft die Codierungsregeln ab, die von diesem Reader verwendet werden.</summary>
      <returns>Die von diesem Reader verwendeten Codierungsregeln.</returns>
    </member>
    <member name="T:System.Formats.Asn1.AsnReaderOptions">
      <summary>Gibt Optionen an, die das Verhalten eines <see cref="T:System.Formats.Asn1.AsnReader" /> ändern.</summary>
    </member>
    <member name="P:System.Formats.Asn1.AsnReaderOptions.SkipSetSortOrderVerification">
      <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob der Reader die Sortierreihenfolge für einen Set- oder Set-Of-Wert umgehen soll.</summary>
      <returns>
        <see langword="true" /> , wenn der Reader nicht überprüfen soll, ob ein Satz oder ein Satz von Werten ordnungsgemäß für die aktuellen Codierungsregeln sortiert ist. andernfalls <see langword="false" /> .
Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.Formats.Asn1.AsnReaderOptions.UtcTimeTwoDigitYearMax">
      <summary>Ruft das größte Jahr ab, das durch einen UtcTime-Wert dargestellt werden soll, oder legt dieses fest.</summary>
      <returns>Das größte Jahr, das mit einem utcTime-Wert dargestellt werden soll. Der Standardwert ist 2049.</returns>
    </member>
    <member name="T:System.Formats.Asn1.AsnWriter">
      <summary>Ein Writer für BER-, CER- und DER-codierte ASN.1-Daten.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.#ctor(System.Formats.Asn1.AsnEncodingRules)">
      <summary>Erstellt einen neuen <see cref="T:System.Formats.Asn1.AsnWriter" /> mit einem angegebenen Satz von Codierungsregeln.</summary>
      <param name="ruleSet">Die Codierungseinschränkungen für den Writer.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="ruleSet" /> ist nicht definiert.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.CopyTo(System.Formats.Asn1.AsnWriter)">
      <summary>Kopiert den Wert dieses Writers in einen anderen.</summary>
      <param name="destination">Der Writer, der den Wert empfangen soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destination" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Ein <see cref="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> oder <see cref="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> wurde nicht über <see cref="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> oder <see cref="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> geschlossen.
Oder dieser Writer ist leer.
Oder dieser Writer stellt mehrere Werte der obersten Ebene dar.
Oder der Wert dieses Writers wird in einer Weise codiert, die nicht mit dem Regelsatz für den Zielwriter kompatibel ist.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.Encode">
      <summary>Gibt ein neues Array zurück, das den codierten Wert enthält.</summary>
      <exception cref="T:System.InvalidOperationException">Ein <see cref="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> oder <see cref="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> wurde nicht über <see cref="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> oder <see cref="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> geschlossen.</exception>
      <returns>Ein Array mit genauer Größe, das den codierten Wert enthält.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.Encode(System.Span{System.Byte})">
      <summary>Schreibt die codierte Darstellung der Daten in <paramref name="destination" />.</summary>
      <param name="destination">Der Puffer, in den geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Ein <see cref="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> oder <see cref="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> wurde nicht über <see cref="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> oder <see cref="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> geschlossen.</exception>
      <returns>Die Anzahl der Bytes, die in <paramref name="destination" /> geschrieben wurden.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.EncodedValueEquals(System.Formats.Asn1.AsnWriter)">
      <summary>Ermittelt, ob <see cref="M:System.Formats.Asn1.AsnWriter.Encode" /> eine mit <paramref name="other" /> identische Ausgabe generieren würde.</summary>
      <param name="other">Die Instanz, mit der codierte Werte verglichen werden.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="other" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Ein <see cref="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> oder <see cref="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> wurde nicht über <see cref="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> oder <see cref="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> geschlossen.</exception>
      <returns>
        <see langword="true" />, wenn die ausstehenden codierten Daten mit identisch <paramref name="other" /> sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.EncodedValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Ermittelt, ob <see cref="M:System.Formats.Asn1.AsnWriter.Encode" /> eine mit <paramref name="other" /> identische Ausgabe generieren würde.</summary>
      <param name="other">Der codierte Wert, mit dem verglichen werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Ein <see cref="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> oder <see cref="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> wurde nicht über <see cref="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> oder <see cref="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> geschlossen.</exception>
      <returns>
        <see langword="true" />, wenn die ausstehenden codierten Daten mit identisch <paramref name="other" /> sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.GetEncodedLength">
      <summary>Ruft die Anzahl der Bytes ab, die von <see cref="M:System.Formats.Asn1.AsnWriter.TryEncode(System.Span{System.Byte},System.Int32@)" /> geschrieben würden.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" />, <see cref="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> oder <see cref="M:System.Formats.Asn1.AsnWriter.PushOctetString(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> wurde ohne die entsprechende Pop-Methode aufgerufen.</exception>
      <returns>Die Anzahl der Bytes, die von <see cref="M:System.Formats.Asn1.AsnWriter.TryEncode(System.Span{System.Byte},System.Int32@)" /> geschrieben würden.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.PopOctetString(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Gibt an, dass die geöffnete Oktettzeichenfolge mit dem Tag UNIVERSAL 4 geschlossen und der Writer an den übergeordneten Kontext zurückgegeben wird.</summary>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 4).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <exception cref="T:System.InvalidOperationException">Der Writer befindet sich derzeit nicht innerhalb einer Oktettzeichenfolge mit dem angegebenen Tag.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Gibt an, dass die geöffnete Sequenz mit dem angegebenen Tag geschlossen und der Writer an den übergeordneten Kontext zurückgegeben wird.</summary>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 16).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <exception cref="T:System.InvalidOperationException">Der Writer befindet sich derzeit nicht in einer Sequenz mit dem angegebenen Tag.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Gibt an, dass das geöffnete Set-Of-Element mit dem angegebenen Tag geschlossen und der Writer an den übergeordneten Kontext zurückgegeben wird.</summary>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 17).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <exception cref="T:System.InvalidOperationException">Der Writer befindet sich derzeit nicht innerhalb eines Set-Of-Elements mit dem angegebenen Tag.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.PushOctetString(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Beginnt mit dem Schreiben eines Oktett-Zeichenfolgenwerts mit einem angegebenen Tag.</summary>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 4).</param>
      <returns>Ein verwerfbarer Wert, der <see cref="M:System.Formats.Asn1.AsnWriter.PopOctetString(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> automatisch aufruft.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Beginnt mit dem Schreiben einer Sequenz mit einem angegebenen Tag.</summary>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 16).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>Ein verwerfbarer Wert, der <see cref="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> automatisch aufruft.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Beginnt mit dem Schreiben eines Set-Of-Elements mit einem angegebenen Tag.</summary>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 17).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <returns>Ein verwerfbarer Wert, der <see cref="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> automatisch aufruft.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.Reset">
      <summary>Setzt den Writer so zurück, dass keine Daten vorhanden sind, ohne Ressourcen freizugeben.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.TryEncode(System.Span{System.Byte},System.Int32@)">
      <summary>Versucht, die codierte Darstellung der Daten in <paramref name="destination" /> zu schreiben.</summary>
      <param name="destination">Der Puffer, in den geschrieben werden soll.</param>
      <param name="bytesWritten">Empfängt bei Erfolg die Anzahl der in <paramref name="destination" /> geschriebenen Bytes.</param>
      <exception cref="T:System.InvalidOperationException">Ein <see cref="M:System.Formats.Asn1.AsnWriter.PushSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> oder <see cref="M:System.Formats.Asn1.AsnWriter.PushSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> wurde nicht über <see cref="M:System.Formats.Asn1.AsnWriter.PopSequence(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> oder <see cref="M:System.Formats.Asn1.AsnWriter.PopSetOf(System.Nullable{System.Formats.Asn1.Asn1Tag})" /> geschlossen.</exception>
      <returns>
        <see langword="true" />, wenn die Codierung erfolgreich war, <see langword="false" />, wenn <paramref name="destination" /> zu klein ist.</returns>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteBitString(System.ReadOnlySpan{System.Byte},System.Int32,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen Bit-Zeichenfolgenwert mit einem angegebenen Tag.</summary>
      <param name="value">Der zu schreibende Wert.</param>
      <param name="unusedBitCount">Die Anzahl der nachstehenden Bits, die nicht semantisch sind.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 3).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.
Oder <paramref name="value" /> hat die Länge 0 und <paramref name="unusedBitCount" /> ist nicht 0 oder <paramref name="value" /> ist nicht leer, und alle von <paramref name="unusedBitCount" /> identifizierten Bits sind festgelegt.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="unusedBitCount" /> liegt nicht im Bereich [0,7].</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteBoolean(System.Boolean,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen booleschen Wert mit einem angegebenen Tag.</summary>
      <param name="value">Der zu schreibende Wert.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 1).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteCharacterString(System.Formats.Asn1.UniversalTagNumber,System.ReadOnlySpan{System.Char},System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt die angegebene Zeichenfolge unter Verwendung des angegebenen Codierungstyps mit dem angegebenen Tag, das dem Codierungstyp entspricht.</summary>
      <param name="encodingType">Einer der Enumerationswerte, der die zu verwendende Codierung darstellt.</param>
      <param name="str">Die zu schreibende Zeichenfolge.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das universelle Tag, das für den angeforderten Codierungstyp geeignet ist.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encodingType" /> ist kein eingeschränkter Zeichenfolgen-Codierungstyp.
Oder <paramref name="encodingType" /> ist ein eingeschränkter Zeichenfolgen-Codierungstyp, der von dieser Methode derzeit nicht unterstützt wird.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteCharacterString(System.Formats.Asn1.UniversalTagNumber,System.String,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt die angegebene Zeichenfolge unter Verwendung des angegebenen Codierungstyps mit dem angegebenen Tag, das dem Codierungstyp entspricht.</summary>
      <param name="encodingType">Einer der Enumerationswerte, der die zu verwendende Codierung darstellt.</param>
      <param name="value">Die zu schreibende Zeichenfolge.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das universelle Tag, das für den angeforderten Codierungstyp geeignet ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist gleich <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="encodingType" /> ist kein eingeschränkter Zeichenfolgen-Codierungstyp.
Oder <paramref name="encodingType" /> ist ein eingeschränkter Zeichenfolgen-Codierungstyp, der von dieser Methode derzeit nicht unterstützt wird.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteEncodedValue(System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt einen einzelnen Wert, der bereits codiert wurde.</summary>
      <param name="value">Der zu schreibende Wert.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> konnte gemäß den aktuellen Codierungsregeln nicht gelesen werden.
Oder <paramref name="value" /> enthält Daten, die über das Ende des ersten Werts hinausgehen.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteEnumeratedValue(System.Enum,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen Nicht-[<see cref="T:System.FlagsAttribute" />]-Enumerationswert als „Enumerated“ mit dem Tag UNIVERSAL 10.</summary>
      <param name="value">Der zu schreibende geschachtelte Enumerationswert.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 10).</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.
Oder <paramref name="value" /> ist kein geschachtelter Enumerationswert.
Oder der ungeschachtelte Typ von <paramref name="value" /> wird als [<see cref="T:System.FlagsAttribute" />] deklariert.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteEnumeratedValue``1(``0,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen Nicht-[<see cref="T:System.FlagsAttribute" />]-Enumerationswert als „Enumerated“ mit dem Tag UNIVERSAL 10.</summary>
      <param name="value">Der zu schreibende geschachtelte Enumerationswert.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 10).</param>
      <typeparam name="TEnum">Der zu schreibende nicht-[ <see cref="T:System.FlagsAttribute" /> ]-Enumerationstyp.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.
Oder <typeparamref name="TEnum" /> ist keine Enumeration.
Oder <typeparamref name="TEnum" /> wird als [<see cref="T:System.FlagsAttribute" />] deklariert.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteGeneralizedTime(System.DateTimeOffset,System.Boolean,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt den bereitgestellten <see cref="T:System.DateTimeOffset" /> als GeneralizedTime mit einem angegebenen Tag UNIVERSAL 24, wobei optional die Sekundenbruchteile ausgeschlossen werden.</summary>
      <param name="value">Der zu schreibende Wert.</param>
      <param name="omitFractionalSeconds">
        <see langword="true" />, wenn die Sekundenbruchteile in <paramref name="value" /> selbst dann als 0 behandelt werden sollen, wenn ein Wert ungleich NULL vorhanden ist.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 24).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteInteger(System.Int64,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen Integerwert mit einem angegebenen Tag.</summary>
      <param name="value">Der zu schreibende Wert.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 2).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteInteger(System.Numerics.BigInteger,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen Integerwert mit einem angegebenen Tag.</summary>
      <param name="value">Der zu schreibende Wert.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 2).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteInteger(System.ReadOnlySpan{System.Byte},System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen Integerwert mit einem angegebenen Tag.</summary>
      <param name="value">Der zu schreibende Integerwert in der big-endian-Bytereihenfolge mit Vorzeichen.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 2).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <exception cref="T:System.ArgumentException">Die 9 signifikantesten Bits sind alle festgelegt.
Oder die 9 signifikantesten Bits sind alle nicht festgelegt.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteInteger(System.UInt64,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen Integerwert mit einem angegebenen Tag.</summary>
      <param name="value">Der zu schreibende Wert.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 2).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteIntegerUnsigned(System.ReadOnlySpan{System.Byte},System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen Integerwert mit einem angegebenen Tag.</summary>
      <param name="value">Der zu schreibende Integerwert in big-endian-Bytereihenfolge ohne Vorzeichen.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 2).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <exception cref="T:System.ArgumentException">Die 9 signifikantesten Bits sind alle nicht festgelegt.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteNamedBitList(System.Collections.BitArray,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen Bit-Arraywert als NamedBitList mit einem angegebenen Tag.</summary>
      <param name="value">Die zu schreibende Bits.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 3).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht korrekt.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteNamedBitList(System.Enum,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen [<see cref="T:System.FlagsAttribute" />]-Enumerationswert als NamedBitList mit einem angegebenen Tag.</summary>
      <param name="value">Der zu schreibende geschachtelte Enumerationswert.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 3).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.
Oder <paramref name="value" /> ist kein geschachtelter Enumerationswert.
Oder der nicht geschachtelte Typ von <paramref name="value" /> wird nicht als [<see cref="T:System.FlagsAttribute" />] deklariert.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteNamedBitList``1(``0,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen [<see cref="T:System.FlagsAttribute" />]-Enumerationswert als NamedBitList mit einem angegebenen Tag.</summary>
      <param name="value">Der zu schreibende Enumerationswert.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 3).</param>
      <typeparam name="TEnum">Der [ <see cref="T:System.FlagsAttribute" /> ]-Enumerationstyp, der geschrieben werden soll.</typeparam>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.
Oder <typeparamref name="TEnum" /> ist kein Enumerationswert.
Oder <typeparamref name="TEnum" /> ist nicht als [<see cref="T:System.FlagsAttribute" />] deklariert.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteNull(System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt NULL mit einem angegebenen Tag.</summary>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 5).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteObjectIdentifier(System.ReadOnlySpan{System.Char},System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen Objektbezeichner mit einem angegebenen Tag.</summary>
      <param name="oidValue">Der zu schreibende Objektbezeichner.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 6).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.
Oder <paramref name="oidValue" /> ist kein gültiger punktierter Dezimalobjektbezeichner.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteObjectIdentifier(System.String,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen Objektbezeichner mit einem angegebenen Tag.</summary>
      <param name="oidValue">Der zu schreibende Objektbezeichner.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 6).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.
Oder <paramref name="oidValue" /> ist kein gültiger punktierter Dezimalobjektbezeichner.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidValue" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteOctetString(System.ReadOnlySpan{System.Byte},System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt einen Oktett-Zeichenfolgenwert mit einem angegebenen Tag.</summary>
      <param name="value">Der zu schreibende Wert.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 4).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteUtcTime(System.DateTimeOffset,System.Int32,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt den bereitgestellten Wert als UTCTime mit einem angegebenen Tag, sofern das Jahr im zulässigen Bereich liegt.</summary>
      <param name="value">Der zu schreibende Wert.</param>
      <param name="twoDigitYearMax">Das maximale gültige Jahr für <paramref name="value" /> nach der Konvertierung in UTC.
Übergibt für den X.509-Time.utcTime-Bereich von 1950 bis 2049 den Wert <c>2049</c>.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 23).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="value" />.<see cref="P:System.DateTimeOffset.Year" /> (nach der Konvertierung in UTC) liegt nicht im Bereich (<paramref name="twoDigitYearMax" /> - 100, <paramref name="twoDigitYearMax" />].</exception>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.WriteUtcTime(System.DateTimeOffset,System.Nullable{System.Formats.Asn1.Asn1Tag})">
      <summary>Schreibt den bereitgestellten Wert als UTCTime mit einem angegebenen Tag und akzeptiert das zweistellige Jahr als im Kontext gültig.</summary>
      <param name="value">Der zu schreibende Wert.</param>
      <param name="tag">Das zu schreibende Tag oder <see langword="null" /> für das Standardtag (Universal 23).</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagClass" /> ist <see cref="F:System.Formats.Asn1.TagClass.Universal" />, aber <paramref name="tag" />.<see cref="P:System.Formats.Asn1.Asn1Tag.TagValue" /> ist für die Methode nicht richtig.</exception>
    </member>
    <member name="P:System.Formats.Asn1.AsnWriter.RuleSet">
      <summary>Ruft die Codierungsregeln ab, die von diesem Writer verwendet werden.</summary>
      <returns>Die von diesem Writer verwendeten Codierungsregeln.</returns>
    </member>
    <member name="T:System.Formats.Asn1.AsnWriter.Scope">
      <summary>Stellt ein <see cref="T:System.IDisposable" />-Ziel zum sicheren Schließen eines geöffneten Tags mithilfe eines lexikalischen Bereichs als logischen Bereich bereit.</summary>
    </member>
    <member name="M:System.Formats.Asn1.AsnWriter.Scope.Dispose">
      <summary>Führt anwendungsspezifische Aufgaben durch, die mit der Freigabe, der Zurückgabe oder dem Zurücksetzen von nicht verwalteten Ressourcen zusammenhängen.</summary>
    </member>
    <member name="T:System.Formats.Asn1.TagClass">
      <summary>Die Tagklasse für ein bestimmtes ASN.1-Tag.</summary>
    </member>
    <member name="F:System.Formats.Asn1.TagClass.Application">
      <summary>Die Application-Tagklasse.</summary>
    </member>
    <member name="F:System.Formats.Asn1.TagClass.ContextSpecific">
      <summary>Die Context-Specific-Tagklasse.</summary>
    </member>
    <member name="F:System.Formats.Asn1.TagClass.Private">
      <summary>Die Private-Tagklasse.</summary>
    </member>
    <member name="F:System.Formats.Asn1.TagClass.Universal">
      <summary>Die Universal-Tagklasse.</summary>
    </member>
    <member name="T:System.Formats.Asn1.UniversalTagNumber">
      <summary>Tagzuweisungen für die UNIVERSAL-Klasse in ITU-T X.680.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.BitString">
      <summary>Der Tagwert der Universal-Klasse für Bit-Zeichenfolge.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.BMPString">
      <summary>Der Tagwert der Universal-Klasse für BMPString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Boolean">
      <summary>Der Tagwert der Universal-Klasse für Boolean.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Date">
      <summary>Der Tagwert der Universal-Klasse für Date.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.DateTime">
      <summary>Der Tagwert der Universal-Klasse für Date-Time.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Duration">
      <summary>Der Tagwert der Universal-Klasse für Duration.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Embedded">
      <summary>Der Tagwert der Universal-Klasse für Embedded-PDV.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.EndOfContents">
      <summary>Der reservierte Bezeichner für die End-of-Content-Markierung in einer unbestimmten Längencodierung.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Enumerated">
      <summary>Der Tagwert der Universal-Klasse für Enumerated.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.External">
      <summary>Der Tagwert der Universal-Klasse für External.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.GeneralizedTime">
      <summary>Der Tagwert der Universal-Klasse für GeneralizedTime.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.GeneralString">
      <summary>Der Tagwert der Universal-Klasse für GeneralString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.GraphicString">
      <summary>Der Tagwert der Universal-Klasse für GraphicString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.IA5String">
      <summary>Der Tagwert der Universal-Klasse für IA5String.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.InstanceOf">
      <summary>Der Tagwert der Universal-Klasse für Instance-Of.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Integer">
      <summary>Der Tagwert der Universal-Klasse für Integer.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.ISO646String">
      <summary>Der Tagwert der Universal-Klasse für ISO646String (VisibleString).</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Null">
      <summary>Der Tagwert der Universal-Klasse für NULL.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.NumericString">
      <summary>Der Tagwert der Universal-Klasse für NumericString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.ObjectDescriptor">
      <summary>Der Tagwert der Universal-Klasse für Object Descriptor.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.ObjectIdentifier">
      <summary>Der Tagwert der Universal-Klasse für Object Identifier.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.ObjectIdentifierIRI">
      <summary>Der Tagwert der Universal-Klasse für Object Identifier Internationalized Resource Identifier (IRI).</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.OctetString">
      <summary>Der Tagwert der Universal-Klasse für Octet String.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.PrintableString">
      <summary>Der Tagwert der Universal-Klasse für PrintableString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Real">
      <summary>Der Tagwert der Universal-Klasse für Real.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.RelativeObjectIdentifier">
      <summary>Der Tagwert der Universal-Klasse für Relative Object Identifier.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.RelativeObjectIdentifierIRI">
      <summary>Der Tagwert der Universal-Klasse für Relative Object Identifier Internationalized Resource Identifier (IRI).</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Sequence">
      <summary>Der Tagwert der Universal-Klasse für Sequence.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.SequenceOf">
      <summary>Der Tagwert der Universal-Klasse für Sequence-Of.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Set">
      <summary>Der Tagwert der Universal-Klasse für Set.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.SetOf">
      <summary>Der Tagwert der Universal-Klasse für Set-Of.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.T61String">
      <summary>Der Tagwert der Universal-Klasse für T61String (TeletexString).</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.TeletexString">
      <summary>Der Tagwert der Universal-Klasse für TeletexString (T61String).</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.Time">
      <summary>Der Tagwert der Universal-Klasse für Time.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.TimeOfDay">
      <summary>Der Tagwert der Universal-Klasse für Time-Of-Day.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.UniversalString">
      <summary>Der Tagwert der Universal-Klasse für UniversalString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.UnrestrictedCharacterString">
      <summary>Der Tagwert der Universal-Klasse für eine uneingeschränkte Zeichenfolge.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.UtcTime">
      <summary>Der Tagwert der Universal-Klasse für UTCTime.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.UTF8String">
      <summary>Der Tagwert der Universal-Klasse für UTF8String.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.VideotexString">
      <summary>Der Tagwert der Universal-Klasse für VideotexString.</summary>
    </member>
    <member name="F:System.Formats.Asn1.UniversalTagNumber.VisibleString">
      <summary>Der Tagwert der Universal-Klasse für VisibleString (ISO646String).</summary>
    </member>
  </members>
</doc>
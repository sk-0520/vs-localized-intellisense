<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Text.Json</name>
  </assembly>
  <members>
    <member name="T:System.Text.Json.JsonCommentHandling">
      <summary>Definiert, wie die <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur Kommentare handhabt.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Allow">
      <summary>Lässt Kommentare in der JSON-Eingabe zu und behandelt diese als gültige Token. Während des Lesens kann der Aufrufer auf die Kommentarwerte zugreifen.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Disallow">
      <summary>Lässt keine Kommentare in der JSON-Eingabe zu. Wenn Kommentare gefunden werden, werden sie als ungültiges JSON behandelt, und eine <see cref="T:System.Text.Json.JsonException" /> wird ausgelöst. Dies ist der Standardwert.</summary>
    </member>
    <member name="F:System.Text.Json.JsonCommentHandling.Skip">
      <summary>Lässt Kommentare in der JSON-Eingabe zu und ignoriert sie. Der <see cref="T:System.Text.Json.Utf8JsonReader" /> verhält sich, als wären keine Kommentare vorhanden.</summary>
    </member>
    <member name="T:System.Text.Json.JsonDocument">
      <summary>Stellt einen Mechanismus zum Untersuchen des strukturellen Inhalts eines JSON-Werts ohne automatisches Instanziieren von Datenwerten bereit.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Dispose">
      <summary>Gibt die von dieser <see cref="T:System.Text.Json.JsonDocument" />-Instanz verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>Analysiert eine Sequenz als UTF-8-codierten Text, der einen einzelnen JSON-Bytewert in einem JsonDocument darstellt.</summary>
      <param name="utf8Json">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="options">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> enthält nicht unterstützte Optionen.</exception>
      <returns>Eine JsonDocument-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.IO.Stream,System.Text.Json.JsonDocumentOptions)">
      <summary>Analysiert einen <see cref="T:System.IO.Stream" /> als UTF-8-codierte Daten, die einen einzelnen JSON-Wert in einem JsonDocument darstellen. Der Stream wird vollständig gelesen.</summary>
      <param name="utf8Json">Die zu analysierenden JSON-Daten.</param>
      <param name="options">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> enthält nicht unterstützte Optionen.</exception>
      <returns>Eine JsonDocument-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Byte},System.Text.Json.JsonDocumentOptions)">
      <summary>Analysiert Arbeitsspeicher als UTF-8-codierten Text, der einen einzelnen JSON-Bytewert in einem JsonDocument darstellt.</summary>
      <param name="utf8Json">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="options">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> enthält nicht unterstützte Optionen.</exception>
      <returns>Eine JsonDocument-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.ReadOnlyMemory{System.Char},System.Text.Json.JsonDocumentOptions)">
      <summary>Analysiert Text, der einen einzelnen JSON-Zeichenwert in einem JsonDocument darstellt.</summary>
      <param name="json">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="options">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> enthält nicht unterstützte Optionen.</exception>
      <returns>Eine JsonDocument-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.Parse(System.String,System.Text.Json.JsonDocumentOptions)">
      <summary>Analysiert Text, der einen einzelnen JSON-Zeichenfolgenwert in einem JsonDocument darstellt.</summary>
      <param name="json">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="options">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> enthält nicht unterstützte Optionen.</exception>
      <returns>Eine JsonDocument-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseAsync(System.IO.Stream,System.Text.Json.JsonDocumentOptions,System.Threading.CancellationToken)">
      <summary>Analysiert einen <see cref="T:System.IO.Stream" /> als UTF-8-codierte Daten, die einen einzelnen JSON-Wert in einem JsonDocument darstellen. Der Stream wird vollständig gelesen.</summary>
      <param name="utf8Json">Die zu analysierenden JSON-Daten.</param>
      <param name="options">Optionen zum Steuern des Readerverhaltens während der Analyse.</param>
      <param name="cancellationToken">Das Token zum Überwachen von Abbruchanforderungen.</param>
      <exception cref="T:System.Text.Json.JsonException">
        <paramref name="utf8Json" /> stellt keinen gültigen einzelnen JSON-Wert dar.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="options" /> enthält nicht unterstützte Optionen.</exception>
      <returns>Eine Aufgabe zum Produzieren einer JsonDocument-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.ParseValue(System.Text.Json.Utf8JsonReader@)">
      <summary>Analysiert einen JSON-Wert (einschließlich Objekte oder Arrays) aus dem angegebenen Reader.</summary>
      <param name="reader">Der Reader zum Lesen.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> enthält nicht unterstützte Optionen.

- oder -

Das aktuelle <paramref name="reader" />-Token startet nicht oder stellt einen Wert dar.</exception>
      <exception cref="T:System.Text.Json.JsonException">Es konnte kein Wert aus dem Reader gelesen werden.</exception>
      <returns>Ein JsonDocument, das den Wert (und geschachtelte Werte) darstellt, die aus dem Reader gelesen werden.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.TryParseValue(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonDocument@)">
      <summary>Versucht, einen JSON-Wert (einschließlich Objekte oder Arrays) aus dem angegebenen Reader zu analysieren.</summary>
      <param name="reader">Der Reader zum Lesen.</param>
      <param name="document">Wenn diese Methode zurückgegeben wird, enthält sie das analysierte Dokument.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> enthält nicht unterstützte Optionen.

- oder -

Das aktuelle <paramref name="reader" />-Token startet nicht oder stellt einen Wert dar.</exception>
      <exception cref="T:System.Text.Json.JsonException">Es konnte kein Wert aus dem Reader gelesen werden.</exception>
      <returns>
        <see langword="true" />, wenn ein Wert gelesen und in ein JsonDocument analysiert wurde; <see langword="false" />, wenn dem Reader beim Analysieren die Daten ausgegangen sind. Alle anderen Fälle führen dazu, dass eine Ausnahme ausgelöst wird.</returns>
    </member>
    <member name="M:System.Text.Json.JsonDocument.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Schreibt das Dokument als JSON-Wert in den angegebenen Writer.</summary>
      <param name="writer">Der Writer, in den das Dokument geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="writer" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Text.Json.JsonElement.ValueKind" />-Eigenschaft von diesem <see cref="P:System.Text.Json.JsonDocument.RootElement" /> würde zu ungültigem JSON-Code führen.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
    </member>
    <member name="P:System.Text.Json.JsonDocument.RootElement">
      <summary>Ruft das Stammelement dieses JSON-Dokuments ab.</summary>
      <returns>Ein, <see cref="T:System.Text.Json.JsonElement" /> der den Wert des Dokuments darstellt.</returns>
    </member>
    <member name="T:System.Text.Json.JsonDocumentOptions">
      <summary>Bietet dem Benutzer die Möglichkeit, benutzerdefiniertes Verhalten beim Analysieren von JSON zum Erstellen von <see cref="T:System.Text.Json.JsonDocument" /> zu definieren.</summary>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.AllowTrailingCommas">
      <summary>Ruft einen Wert ab, der angibt, ob ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array in der gelesenen JSON-Nutzlast zulässig ist (und ignoriert wird), oder legt diesen Wert fest.</summary>
      <returns>
        <see langword="true" /> , wenn ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array zulässig ist. andernfalls <see langword="false" /> . Die Standardeinstellung ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.CommentHandling">
      <summary>Ruft einen Wert ab, der bestimmt, wie <see cref="T:System.Text.Json.JsonDocument" /> beim Durchlesen der JSON-Daten Kommentare behandelt, oder legt diesen fest.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Die Enumeration für die Kommentarbehandlung wird auf einen Wert festgelegt, der nicht unterstützt wird (oder nicht innerhalb des <see cref="T:System.Text.Json.JsonCommentHandling" />-Enumeratiosbereichs liegt).</exception>
      <returns>Einer der Enumerationswerte, der angibt, wie Kommentare behandelt werden.</returns>
    </member>
    <member name="P:System.Text.Json.JsonDocumentOptions.MaxDepth">
      <summary>Ruft die beim Analysieren von JSON-Daten maximal zulässige Tiefe ab oder legt sie fest, wobei standardmäßig (d.h. 0 ) eine maximale Tiefe von 64 angegeben wird.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Die maximale Tiefe wird auf einen negativen Wert festgelegt.</exception>
      <returns>Die maximal zulässige Tiefe beim Auswerten von JSON-Daten.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement">
      <summary>Stellt einen bestimmten JSON-Wert innerhalb eines <see cref="T:System.Text.Json.JsonDocument" /> dar.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.Clone">
      <summary>Ruft ein JsonElement ab, das nach Ablauf der Lebensdauer des ursprünglichen <see cref="T:System.Text.Json.JsonDocument" /> sicher gespeichert werden kann.</summary>
      <returns>Ein JsonElement, das nach Ablauf der Lebensdauer des ursprünglichen <see cref="T:System.Text.Json.JsonDocument" /> sicher gespeichert werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateArray">
      <summary>Ruft einen Enumerator zum Aufzählen der Werte in dem JSON-Array auf, das durch dieses JsonElement dargestellt wird.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Ein Enumerator zum Aufzählen der Werte in dem JSON-Array, das durch dieses JsonElement dargestellt wird.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.EnumerateObject">
      <summary>Ruft einen Enumerator zum Aufzählen der Eigenschaften in dem JSON-Objekt auf, das durch dieses JsonElement dargestellt wird.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Ein Enumerator zum Aufzählen der Eigenschaften in dem JSON-Objekt, das durch dieses JsonElement dargestellt wird.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetArrayLength">
      <summary>Ruft die Anzahl der in dem aktuellen Arraywert enthaltenen Werte ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Die Anzahl der in dem aktuellen Arraywert enthaltenen Werte.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBoolean">
      <summary>Ruft den Wert des Elements als <see cref="T:System.Boolean" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist weder <see cref="F:System.Text.Json.JsonValueKind.True" /> noch <see cref="F:System.Text.Json.JsonValueKind.False" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Der Wert des Elements als <see cref="T:System.Boolean" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetByte">
      <summary>Ruft die aktuelle JSON-Zahl als <see cref="T:System.Byte" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Der Wert kann nicht als <see cref="T:System.Byte" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Die aktuelle JSON-Zahl als <see cref="T:System.Byte" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetBytesFromBase64">
      <summary>Ruft den Wert des Elements als Bytearray ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">Der Wert ist nicht als Base64-Text codiert und kann daher nicht in Bytes decodiert werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Der Wert, der als Bytearray decodiert wird.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTime">
      <summary>Ruft den Wert des Elements als <see cref="T:System.DateTime" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">Der Wert darf nicht als <see cref="T:System.DateTime" /> gelesen werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Der Wert des Elements als <see cref="T:System.DateTime" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDateTimeOffset">
      <summary>Ruft den Wert des Elements als <see cref="T:System.DateTimeOffset" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">Der Wert darf nicht als <see cref="T:System.DateTimeOffset" /> gelesen werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Der Wert des Elements als <see cref="T:System.DateTimeOffset" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDecimal">
      <summary>Ruft die aktuelle JSON-Zahl als <see cref="T:System.Decimal" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Der Wert kann nicht als <see cref="T:System.Decimal" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Die aktuelle JSON-Zahl als <see cref="T:System.Decimal" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetDouble">
      <summary>Ruft die aktuelle JSON-Zahl als <see cref="T:System.Double" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Der Wert kann nicht als <see cref="T:System.Double" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Die aktuelle JSON-Zahl als <see cref="T:System.Double" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetGuid">
      <summary>Ruft den Wert des Elements als <see cref="T:System.Guid" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.FormatException">Der Wert kann nicht als <see cref="T:System.Guid" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Der Wert des Elements als <see cref="T:System.Guid" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt16">
      <summary>Ruft die aktuelle JSON-Zahl als <see cref="T:System.Int16" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Der Wert kann nicht als <see cref="T:System.Int16" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Die aktuelle JSON-Zahl als <see cref="T:System.Int16" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt32">
      <summary>Ruft die aktuelle JSON-Zahl als <see cref="T:System.Int32" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Der Wert kann nicht als <see cref="T:System.Int32" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Die aktuelle JSON-Zahl als <see cref="T:System.Int32" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetInt64">
      <summary>Ruft die aktuelle JSON-Zahl als <see cref="T:System.Int64" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Der Wert kann nicht als <see cref="T:System.Int64" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Die aktuelle JSON-Zahl als <see cref="T:System.Int64" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Byte})">
      <summary>Ruft ein <see cref="T:System.Text.Json.JsonElement" /> ab, das den Wert einer durch <paramref name="utf8PropertyName" /> identifizierten erforderlichen Eigenschaft darstellt.</summary>
      <param name="utf8PropertyName">Die UTF-8-Darstellung (ohne Bytereihenfolge-Marke (Byte-Order-Mark, BOM)) des Namens der zurückzugebenden Eigenschaft.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Es wurde keine Eigenschaft mit dem angeforderten Namen gefunden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Ein <see cref="T:System.Text.Json.JsonElement" />, das den Wert der angeforderten Eigenschaft darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.ReadOnlySpan{System.Char})">
      <summary>Ruft ein <see cref="T:System.Text.Json.JsonElement" /> ab, das den Wert einer durch <paramref name="propertyName" /> identifizierten erforderlichen Eigenschaft darstellt.</summary>
      <param name="propertyName">Der Name der Eigenschaft, deren Wert zurückzugeben ist.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Es wurde keine Eigenschaft mit dem angeforderten Namen gefunden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Ein <see cref="T:System.Text.Json.JsonElement" />, das den Wert der angeforderten Eigenschaft darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetProperty(System.String)">
      <summary>Ruft ein <see cref="T:System.Text.Json.JsonElement" /> ab, das den Wert einer durch <paramref name="propertyName" /> identifizierten erforderlichen Eigenschaft darstellt.</summary>
      <param name="propertyName">Der Name der Eigenschaft, deren Wert zurückzugeben ist.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.Collections.Generic.KeyNotFoundException">Es wurde keine Eigenschaft mit dem angeforderten Namen gefunden.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Ein <see cref="T:System.Text.Json.JsonElement" />, das den Wert der angeforderten Eigenschaft darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetRawText">
      <summary>Ruft eine Zeichenfolge ab, die die ursprünglichen, diesen Wert sichernden Eingabedaten darstellt.</summary>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Die ursprünglichen, diesen Wert sichernden Eingabedaten.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSByte">
      <summary>Ruft die aktuelle JSON-Zahl als <see cref="T:System.SByte" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Der Wert kann nicht als <see cref="T:System.SByte" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Die aktuelle JSON-Zahl als <see cref="T:System.SByte" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetSingle">
      <summary>Ruft die aktuelle JSON-Zahl als <see cref="T:System.Single" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Der Wert kann nicht als <see cref="T:System.Single" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Die aktuelle JSON-Zahl als <see cref="T:System.Single" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetString">
      <summary>Ruft den Wert des Elements als <see cref="T:System.String" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist weder <see cref="F:System.Text.Json.JsonValueKind.String" /> noch <see cref="F:System.Text.Json.JsonValueKind.Null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Der Wert des Elements als <see cref="T:System.String" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt16">
      <summary>Ruft die aktuelle JSON-Zahl als <see cref="T:System.UInt16" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Der Wert kann nicht als <see cref="T:System.UInt16" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Die aktuelle JSON-Zahl als <see cref="T:System.UInt16" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt32">
      <summary>Ruft die aktuelle JSON-Zahl als <see cref="T:System.UInt32" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Der Wert kann nicht als <see cref="T:System.UInt32" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Die aktuelle JSON-Zahl als <see cref="T:System.UInt32" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.GetUInt64">
      <summary>Ruft die aktuelle JSON-Zahl als <see cref="T:System.UInt64" /> ab.</summary>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.FormatException">Der Wert kann nicht als <see cref="T:System.UInt64" /> dargestellt werden.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Die aktuelle JSON-Zahl als <see cref="T:System.UInt64" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ToString">
      <summary>Ruft gemäß dem Werttyp eine Zeichenfolgendarstellung für den aktuellen Wert ab.</summary>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Eine Zeichenfolgendarstellung für den aktuellen Wert gemäß dem Werttyp.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetByte(System.Byte@)">
      <summary>Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.Byte" /> darzustellen.</summary>
      <param name="value">Enthält nach dem Beenden der Methode die Byteentsprechung des aktuellen JSON-Zahlentyps, wenn die Konvertierung erfolgreich war.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Zahl als <see cref="T:System.Byte" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>Versucht, die aktuelle JSON-Zeichenfolge als Bytearray darzustellen, und legt dazu Base64-Codierung zugrunde.</summary>
      <param name="value">Enthält die decodierte binäre Darstellung des Base64-Texts, wenn die Methode erfolgreich ist.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte Tokenwert als gültiger Base64-Text codiert ist und erfolgreich in Bytes decodiert werden kann; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTime(System.DateTime@)">
      <summary>Es wird versucht, die aktuelle JSON-Zeichenfolge als <see cref="T:System.DateTime" /> darzustellen.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie Datum und Uhrzeit gemäß der aktuellen JSON-Zeichenfolge.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Zeichenfolge als <see cref="T:System.DateTime" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>Es wird versucht, die aktuelle JSON-Zeichenfolge als <see cref="T:System.DateTimeOffset" /> darzustellen.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie Datum und Uhrzeit gemäß der aktuellen JSON-Zeichenfolge.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Zeichenfolge als <see cref="T:System.DateTimeOffset" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDecimal(System.Decimal@)">
      <summary>Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.Decimal" /> darzustellen.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie die dezimale Entsprechung der aktuellen JSON-Zahl.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Zahl als <see cref="T:System.Decimal" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetDouble(System.Double@)">
      <summary>Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.Double" /> darzustellen.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie einen Gleitkommawert mit doppelter Genauigkeit gemäß der aktuellen JSON-Zahl.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Zahl als <see cref="T:System.Double" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetGuid(System.Guid@)">
      <summary>Es wird versucht, die aktuelle JSON-Zeichenfolge als <see cref="T:System.Guid" /> darzustellen.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie die GUID gemäß der aktuellen JSON-Zeichenfolge.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Zeichenfolge als <see cref="T:System.Guid" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt16(System.Int16@)">
      <summary>Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.Int16" /> darzustellen.</summary>
      <param name="value">Enthält nach dem Beenden der Methode die 16-Bit-Integerentsprechung des aktuellen JSON-Zahlentyps, wenn die Konvertierung erfolgreich war.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Zahl als <see cref="T:System.Int16" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt32(System.Int32@)">
      <summary>Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.Int32" /> darzustellen.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den 32-Bit-Ganzzahlwert gemäß der aktuellen JSON-Zahl.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Zahl als <see cref="T:System.Int32" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetInt64(System.Int64@)">
      <summary>Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.Int64" /> darzustellen.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den 64-Bit-Ganzzahlwert gemäß der aktuellen JSON-Zahl.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Zahl als <see cref="T:System.Int64" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonElement@)">
      <summary>Sucht im aktuellen Objekt nach einer Eigenschaft mit dem Namen <paramref name="utf8PropertyName" />, wobei ein Wert zurückgegeben wird, der angibt, ob eine solche Eigenschaft vorhanden ist. Wenn die Eigenschaft vorhanden ist, weist die Methode ihren Wert dem <paramref name="value" />-Argument zu.</summary>
      <param name="utf8PropertyName">Die UTF-8-Darstellung (ohne Bytereihenfolge-Marke (Byte-Order-Mark, BOM)) des Namens der zurückzugebenden Eigenschaft.</param>
      <param name="value">Empfängt den Wert der gefundenen Eigenschaft.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Eigenschaft gefunden wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.ReadOnlySpan{System.Char},System.Text.Json.JsonElement@)">
      <summary>Sucht im aktuellen Objekt nach einer Eigenschaft mit dem Namen <paramref name="propertyName" />, wobei ein Wert zurückgegeben wird, der angibt, ob eine solche Eigenschaft vorhanden ist. Wenn die Eigenschaft vorhanden ist, weist die Methode ihren Wert dem <paramref name="value" />-Argument zu.</summary>
      <param name="propertyName">Der Name der zu suchenden Eigenschaft.</param>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den Wert der angegebenen Eigenschaft.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Eigenschaft gefunden wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetProperty(System.String,System.Text.Json.JsonElement@)">
      <summary>Sucht im aktuellen Objekt nach einer Eigenschaft mit dem Namen <paramref name="propertyName" />, wobei ein Wert zurückgegeben wird, der angibt, ob eine solche Eigenschaft vorhanden ist. Wenn die Eigenschaft vorhanden ist, wird ihr Wert dem <paramref name="value" />-Argument zugewiesen.</summary>
      <param name="propertyName">Der Name der zu suchenden Eigenschaft.</param>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den Wert der angegebenen Eigenschaft.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Object" />.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Eigenschaft gefunden wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSByte(System.SByte@)">
      <summary>Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.SByte" /> darzustellen.</summary>
      <param name="value">Enthält nach dem Beenden der Methode die Byteentsprechung mit Vorzeichen des aktuellen JSON-Zahlentyps, wenn die Konvertierung erfolgreich war.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Zahl als <see cref="T:System.SByte" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetSingle(System.Single@)">
      <summary>Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.Single" /> darzustellen.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie einen Gleitkommawert mit einfacher Genauigkeit gemäß der aktuellen JSON-Zahl.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Zahl als <see cref="T:System.Single" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt16(System.UInt16@)">
      <summary>Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.UInt16" /> darzustellen.</summary>
      <param name="value">Enthält nach dem Beenden der Methode die 16-Bit-Integerentsprechung ohne Vorzeichen des aktuellen JSON-Zahlentyps, wenn die Konvertierung erfolgreich war.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Zahl als <see cref="T:System.UInt16" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt32(System.UInt32@)">
      <summary>Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.UInt32" /> darzustellen.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den 32-Bit-Ganzzahlwert ohne Vorzeichen gemäß der aktuellen JSON-Zahl.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Zahl als <see cref="T:System.UInt32" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.TryGetUInt64(System.UInt64@)">
      <summary>Es wird versucht, die aktuelle JSON-Zahl als <see cref="T:System.UInt64" /> darzustellen.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den 64-Bit-Ganzzahlwert ohne Vorzeichen gemäß der aktuellen JSON-Zahl.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Number" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>
        <see langword="true" />, wenn die Zahl als <see cref="T:System.UInt64" /> dargestellt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Vergleicht den Text, der durch einen UTF8-codierten Bytebereich dargestellt wird, mit dem Zeichenfolgenwert dieses Elements.</summary>
      <param name="utf8Text">Der UTF-8-codierte Text für den Vergleich.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns>
        <see langword="true" />, wenn der Zeichenfolgenwert dieses Elements dieselbe UTF-8-Codierung wie <paramref name="utf8Text" /> aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.ReadOnlySpan{System.Char})">
      <summary>Vergleicht einen angegebenen schreibgeschützten Zeichenbereich mit dem Zeichenfolgenwert dieses Elements.</summary>
      <param name="text">Der Text, mit dem verglichen werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns>
        <see langword="true" />, wenn der Zeichenfolgenwert dieses Elements mit <paramref name="text" /> übereinstimmt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ValueEquals(System.String)">
      <summary>Vergleicht eine angegebene Zeichenfolge mit dem Zeichenfolgenwert dieses Elements.</summary>
      <param name="text">Der Text, mit dem verglichen werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.String" />.</exception>
      <returns>
        <see langword="true" />, wenn der Zeichenfolgenwert dieses Elements mit <paramref name="text" /> übereinstimmt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Schreibt das Element als JSON-Wert in den angegebenen Writer.</summary>
      <param name="writer">Der Writer, in den das Element geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="writer" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Text.Json.JsonElement.ValueKind" />-Eigenschaft dieses Werts ist <see cref="F:System.Text.Json.JsonValueKind.Undefined" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
    </member>
    <member name="P:System.Text.Json.JsonElement.Item(System.Int32)">
      <summary>Ruft den Wert am angegebenen Index ab, wenn der aktuelle Wert ein <see cref="F:System.Text.Json.JsonValueKind.Array" /> ist.</summary>
      <param name="index">Der Elementindex.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="P:System.Text.Json.JsonElement.ValueKind" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonValueKind.Array" />.</exception>
      <exception cref="T:System.IndexOutOfRangeException">
        <paramref name="index" /> befindet sich nicht im Bereich [0, <see cref="M:System.Text.Json.JsonElement.GetArrayLength" />()).</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Der Wert am angegebenen Index.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ValueKind">
      <summary>Ruft den Typ des aktuellen JSON-Werts ab.</summary>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
      <returns>Der Typ des aktuellen JSON-Werts.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ArrayEnumerator">
      <summary>Stellt einen Enumerator für die Inhalte eines JSON-Arrays dar.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Dispose">
      <summary>Gibt die von dieser <see cref="T:System.Text.Json.JsonElement.ArrayEnumerator" />-Instanz verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, mit dem das Array durchlaufen werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.MoveNext">
      <summary>Setzt den Enumerator auf das nächste Element der Auflistung.</summary>
      <returns>
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der Auflistung überschritten hat.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.Reset">
      <summary>Setzt den Enumerator auf seine anfängliche Position vor dem ersten Element in der Auflistung.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonElement}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein Enumerator für ein Array mit <see cref="T:System.Text.Json.JsonElement" />-Elementen, das zum Durchlaufen der Sammlung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.Current">
      <summary>Ruft das Element in der Auflistung an der aktuellen Position des Enumerators ab.</summary>
      <returns>Das Element in der Auflistung an der aktuellen Position des Enumerators.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ArrayEnumerator.System#Collections#IEnumerator#Current">
      <summary>Ruft das Element in der Auflistung an der aktuellen Position des Enumerators ab.</summary>
      <returns>Das Element in der Auflistung an der aktuellen Position des Enumerators.</returns>
    </member>
    <member name="T:System.Text.Json.JsonElement.ObjectEnumerator">
      <summary>Stellt einen Enumerator für die Eigenschaften eines JSON-Objekts dar.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Dispose">
      <summary>Gibt die von dieser <see cref="T:System.Text.Json.JsonElement.ObjectEnumerator" />-Instanz verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der die Eigenschaften eines Objekts durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen des Objekts verwendet werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.MoveNext">
      <summary>Setzt den Enumerator auf das nächste Element der Auflistung.</summary>
      <returns>
        <see langword="true" />, wenn der Enumerator erfolgreich auf das nächste Element gesetzt wurde, <see langword="false" />, wenn der Enumerator das Ende der Auflistung überschritten hat.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.Reset">
      <summary>Setzt den Enumerator auf seine anfängliche Position vor dem ersten Element in der Auflistung.</summary>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#Generic#IEnumerable{System#Text#Json#JsonProperty}#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein Enumerator für <see cref="T:System.Text.Json.JsonProperty" />-Objekte, der zum Durchlaufen der Sammlung verwendet werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerable#GetEnumerator">
      <summary>Gibt einen Enumerator zurück, der eine Auflistung durchläuft.</summary>
      <returns>Ein Enumerator, der zum Durchlaufen der Auflistung verwendet werden kann.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.Current">
      <summary>Ruft das Element in der Auflistung an der aktuellen Position des Enumerators ab.</summary>
      <returns>Das Element in der Auflistung an der aktuellen Position des Enumerators.</returns>
    </member>
    <member name="P:System.Text.Json.JsonElement.ObjectEnumerator.System#Collections#IEnumerator#Current">
      <summary>Ruft das Element in der Auflistung an der aktuellen Position des Enumerators ab.</summary>
      <returns>Das Element in der Auflistung an der aktuellen Position des Enumerators.</returns>
    </member>
    <member name="T:System.Text.Json.JsonEncodedText">
      <summary>Stellt Methoden zum Transformieren von UTF-8- oder UTF-16-codiertem Text in eine Form bereit, die für JSON geeignet ist.</summary>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Byte},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Codiert einen UTF-8-Textwert als JSON-Zeichenfolge</summary>
      <param name="utf8Value">Der codierte UTF-8-Text, der in codierten JSON-Text konvertiert werden soll</param>
      <param name="encoder">Der Encoder, der beim Versehen von Zeichenfolgen mit Escapezeichen verwendet wird, oder <see langword="null" />, um den Standardencoder zu verwenden</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="utf8Value" /> ist zu groß.

- oder -

<paramref name="utf8Value" /> enthält ungültige UTF-8-Bytes</exception>
      <returns>Der codierte JSON-Text</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.ReadOnlySpan{System.Char},System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Codiert den angegebenen Textwert als JSON-Zeichenfolge</summary>
      <param name="value">Der in codierten JSON-Text zu konvertierende Wert</param>
      <param name="encoder">Der Encoder, der beim Versehen von Zeichenfolgen mit Escapezeichen verwendet wird, oder <see langword="null" />, um den Standardencoder zu verwenden</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> ist zu groß.

- oder -

<paramref name="value" /> enthält ungültige UTF-16-Zeichen</exception>
      <returns>Der codierte JSON-Text</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Encode(System.String,System.Text.Encodings.Web.JavaScriptEncoder)">
      <summary>Codiert den Textwert der Zeichenfolge als JSON-Zeichenfolge.</summary>
      <param name="value">Der in codierten JSON-Text zu konvertierende Wert</param>
      <param name="encoder">Der Encoder, der beim Versehen von Zeichenfolgen mit Escapezeichen verwendet wird, oder <see langword="null" />, um den Standardencoder zu verwenden</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="value" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> ist zu groß.

- oder -

<paramref name="value" /> enthält ungültige UTF-16-Zeichen</exception>
      <returns>Der codierte JSON-Text</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Object)">
      <summary>Bestimmt, ob diese Instanz und ein angegebenes Objekt, das ebenfalls eine <see cref="T:System.Text.Json.JsonEncodedText" />-Instanz sein muss, denselben Wert haben.</summary>
      <param name="obj">Das mit dieser Instanz zu vergleichende Objekt.</param>
      <returns>
        <see langword="true" />, wenn die angegebene Instanz und <paramref name="obj" /> gleich sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.Equals(System.Text.Json.JsonEncodedText)">
      <summary>Bestimmt, ob diese Instanz und eine andere angegebene <see cref="T:System.Text.Json.JsonEncodedText" />-Instanz denselben Wert haben.</summary>
      <param name="other">Das mit dieser Instanz zu vergleichende Objekt.</param>
      <returns>
        <see langword="true" />, wenn diese Instanz und <paramref name="other" /> den gleichen Wert haben, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.GetHashCode">
      <summary>Gibt den Hashcode für diesen <see cref="T:System.Text.Json.JsonEncodedText" /> zurück.</summary>
      <returns>Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="M:System.Text.Json.JsonEncodedText.ToString">
      <summary>Konvertiert den Wert dieser Instanz in einen <see cref="T:System.String" />.</summary>
      <returns>Die zugrunde liegende UTF-16-codierte Zeichenfolge.</returns>
    </member>
    <member name="P:System.Text.Json.JsonEncodedText.EncodedUtf8Bytes">
      <summary>Ruft die UTF-8-codierte Darstellung des vorcodierten JSON-Texts ab.</summary>
      <returns>Die UTF-8-codierte Darstellung des vorcodierten JSON-Texts.</returns>
    </member>
    <member name="T:System.Text.Json.JsonException">
      <summary>Definiert ein benutzerdefiniertes Ausnahmeobjekt, das ausgelöst wird, wenn ungültiger JSON-Text angetroffen wird, wenn die definierte Maximaltiefe überschritten wird oder der JSON-Text nicht mit dem Typ einer Eigenschaft oder eines Objekts kompatibel ist.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.JsonException" />-Klasse.</summary>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Erstellt ein neues Ausnahmeobjekt mit serialisierten Daten.</summary>
      <param name="info">Die serialisierten Objektdaten über die ausgelöste Ausnahme.</param>
      <param name="context">Ein Objekt, das die Kontextinformationen über die Quelle oder das Ziel enthält.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.JsonException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
      <param name="message">Die kontextspezifische Fehlermeldung.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.Exception)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.JsonException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message">Die kontextspezifische Fehlermeldung.</param>
      <param name="innerException">Die Ausnahme, die die aktuelle Ausnahme verursacht hat.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64})">
      <summary>Erstellt ein neues Ausnahmeobjekt, um Fehlerinformationen an den Benutzer weiterzugeben.</summary>
      <param name="message">Die kontextspezifische Fehlermeldung.</param>
      <param name="path">Der Pfad, unter dem das ungültige JSON gefunden wurde.</param>
      <param name="lineNumber">Die Zeilennummer (beginnend mit 0), in der der ungültige JSON-Code beim Deserialisieren gefunden wurde.</param>
      <param name="bytePositionInLine">Die Byteanzahl innerhalb der aktuellen Zeile (beginnend mit 0), bei der der ungültige JSON-Code gefunden wurde.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.#ctor(System.String,System.String,System.Nullable{System.Int64},System.Nullable{System.Int64},System.Exception)">
      <summary>Erstellt ein neues Ausnahmeobjekt, das eine angegebene innere Ausnahme enthält, um Fehlerinformationen an den Benutzer weiterzugeben.</summary>
      <param name="message">Die kontextspezifische Fehlermeldung.</param>
      <param name="path">Der Pfad, unter dem das ungültige JSON gefunden wurde.</param>
      <param name="lineNumber">Die Zeilennummer (beginnend mit 0), in der der ungültige JSON-Code beim Deserialisieren gefunden wurde.</param>
      <param name="bytePositionInLine">Die Byteanzahl (beginnend mit 0) innerhalb der aktuellen Zeile, bei der der ungültige JSON-Code gefunden wurde.</param>
      <param name="innerException">Die Ausnahme, die die aktuelle Ausnahme verursacht hat.</param>
    </member>
    <member name="M:System.Text.Json.JsonException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Legt <see cref="T:System.Runtime.Serialization.SerializationInfo" /> mit Informationen zur Ausnahme fest.</summary>
      <param name="info">Die serialisierten Objektdaten über die ausgelöste Ausnahme.</param>
      <param name="context">Ein Objekt, das die Kontextinformationen über die Quelle oder das Ziel enthält.</param>
    </member>
    <member name="P:System.Text.Json.JsonException.BytePositionInLine">
      <summary>Ruft die nullbasierte Anzahl der gelesenen Bytes innerhalb der aktuellen Zeile vor der Ausnahme ab.</summary>
      <returns>Die null basierte Anzahl von Bytes, die in der aktuellen Zeile vor der Ausnahme gelesen werden.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.LineNumber">
      <summary>Ruft die nullbasierte Anzahl der gelesenen Zeilen vor der Ausnahme ab.</summary>
      <returns>Die null basierte Anzahl von Zeilen, die vor der Ausnahme gelesen wurden.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Message">
      <summary>Ruft eine Meldung ab, mit der die aktuelle Ausnahme beschrieben wird.</summary>
      <returns>Die Fehlermeldung, die die aktuelle Ausnahme beschreibt.</returns>
    </member>
    <member name="P:System.Text.Json.JsonException.Path">
      <summary>Ruft den Pfad innerhalb des JSON-Codes ab, unter dem die Ausnahme aufgetreten ist.</summary>
      <returns>Der Pfad in dem JSON-Code, in dem die Ausnahme aufgetreten ist.</returns>
    </member>
    <member name="T:System.Text.Json.JsonNamingPolicy">
      <summary>Bestimmt die Benennungsrichtlinie, die verwendet wird, um einen zeichenfolgenbasierten Namen in ein anderes Format zu konvertieren, z.B. in ein Format, das Camel-Case-Schreibweise verwendet.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.JsonNamingPolicy" />.</summary>
    </member>
    <member name="M:System.Text.Json.JsonNamingPolicy.ConvertName(System.String)">
      <summary>Konvertiert den angegebenen Namen beim Überschreiben in einer abgeleiteten Klasse gemäß der Richtlinie.</summary>
      <param name="name">Der zu konvertierende Name.</param>
      <returns>Der konvertierte Name.</returns>
    </member>
    <member name="P:System.Text.Json.JsonNamingPolicy.CamelCase">
      <summary>Ruft die Benennungsrichtlinie für die Camel-Case-Schreibweise ab.</summary>
      <returns>Die Benennungs Richtlinie für die Kamel-Schreibweise.</returns>
    </member>
    <member name="T:System.Text.Json.JsonProperty">
      <summary>Stellt eine einzelne Eigenschaft für ein JSON-Objekt dar.</summary>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Vergleicht den angegebenen UTF-8-codierten Text mit dem Namen dieser Eigenschaft.</summary>
      <param name="utf8Text">Der UTF-8-codierte Text für den Vergleich.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="T:System.Type" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns>
        <see langword="true" />, wenn der Name dieser Eigenschaft dieselbe UTF-8-Codierung wie <paramref name="utf8Text" /> aufweist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.ReadOnlySpan{System.Char})">
      <summary>Vergleicht den angegebenen Text als Zeichenbereich mit dem Namen dieser Eigenschaft.</summary>
      <param name="text">Der Text, mit dem verglichen werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="T:System.Type" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns>
        <see langword="true" />, wenn der Name dieser Eigenschaft mit <paramref name="text" /> übereinstimmt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.NameEquals(System.String)">
      <summary>Vergleicht die angegebene Zeichenfolge mit dem Namen dieser Eigenschaft.</summary>
      <param name="text">Der Text, mit dem verglichen werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Der <see cref="T:System.Type" /> dieses Werts ist nicht <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />.</exception>
      <returns>
        <see langword="true" />, wenn der Name dieser Eigenschaft mit <paramref name="text" /> übereinstimmt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.ToString">
      <summary>Stellt eine Zeichenfolgendarstellung der Eigenschaft zum Debuggen bereit.</summary>
      <returns>Eine Zeichenfolge, die den nicht interpretierten Wert der Eigenschaft enthält, beginnend mit dem Deklarieren von „open-quote“ und endend am letzten Zeichen, das Teil des Werts ist.</returns>
    </member>
    <member name="M:System.Text.Json.JsonProperty.WriteTo(System.Text.Json.Utf8JsonWriter)">
      <summary>Schreibt die Eigenschaft als benannte JSON-Objekteigenschaft in den bereitgestellten Writer.</summary>
      <param name="writer">Der Writer, in den die Eigenschaft geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Text.Json.JsonProperty.Name" /> ist zu groß, um eine JSON-Objekteigenschaft zu sein.</exception>
      <exception cref="T:System.InvalidOperationException">Die <see cref="P:System.Text.Json.JsonElement.ValueKind" />-Eigenschaft für <see cref="P:System.Text.Json.JsonProperty.Value" /> dieser JSON-Eigenschaft würde zu ungültigem JSON-Code führen.</exception>
      <exception cref="T:System.ObjectDisposedException">Das übergeordnete <see cref="T:System.Text.Json.JsonDocument" /> wurde verworfen.</exception>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Name">
      <summary>Ruft den Namen dieser Eigenschaft ab.</summary>
      <returns>Der Name dieser Eigenschaft.</returns>
    </member>
    <member name="P:System.Text.Json.JsonProperty.Value">
      <summary>Ruft den Wert dieser Eigenschaft ab.</summary>
      <returns>Der Wert dieser Eigenschaft.</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderOptions">
      <summary>Bietet dem Benutzer die Möglichkeit, benutzerdefiniertes Verhalten beim Lesen von JSON zu definieren.</summary>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.AllowTrailingCommas">
      <summary>Ruft einen Wert ab, der definiert, ob ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array in der gelesenen JSON-Nutzlast zulässig ist (und ignoriert wird), oder legt diesen fest.</summary>
      <returns>
        <see langword="true" /> , wenn ein zusätzliches Komma zulässig ist. andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.CommentHandling">
      <summary>Ruft einen Wert ab, der bestimmt, wie <see cref="T:System.Text.Json.Utf8JsonReader" /> beim Durchlesen der JSON-Daten Kommentare behandelt, oder legt diesen fest.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Die Eigenschaft wird auf einen Wert festgelegt, der kein Element der <see cref="T:System.Text.Json.JsonCommentHandling" />-Enumeration ist.</exception>
      <returns>Einer der Enumerationswerte, der angibt, wie Kommentare behandelt werden.</returns>
    </member>
    <member name="P:System.Text.Json.JsonReaderOptions.MaxDepth">
      <summary>Ruft die beim Lesen von JSON maximal zulässige Tiefe ab oder legt sie fest, wobei standardmäßig (d.h. 0 (null)) eine maximale Tiefe von 64 angegeben wird.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">Die maximale Tiefe wird auf einen negativen Wert festgelegt.</exception>
      <returns>Die maximal zulässige Tiefe beim Lesen von JSON.</returns>
    </member>
    <member name="T:System.Text.Json.JsonReaderState">
      <summary>Definiert einen nicht transparenten Typ, der alle relevanten Statusinformationen enthält und speichert, die <see cref="T:System.Text.Json.Utf8JsonReader" /> bereitgestellt werden müssen, um den Lesevorgang nach der Verarbeitung unvollständiger Daten fortzusetzen.</summary>
    </member>
    <member name="M:System.Text.Json.JsonReaderState.#ctor(System.Text.Json.JsonReaderOptions)">
      <summary>Erstellt eine neue <see cref="T:System.Text.Json.JsonReaderState" />-Instanz.</summary>
      <param name="options">Definiert das benutzerdefinierte Verhalten des <see cref="T:System.Text.Json.Utf8JsonReader" />, das sich vom JSON RFC unterscheidet (z.B. die Handhabung von Kommentaren oder die maximal zulässige Tiefe beim Lesen). In der Standardeinstellung folgt <see cref="T:System.Text.Json.Utf8JsonReader" /> streng dem JSON RFC (Kommentare im JSON-Code sind ungültig) und liest bis zu einer maximalen Tiefe von 64.</param>
      <exception cref="T:System.ArgumentException">Die maximale Tiefe wird auf einen nicht positiven Wert (&lt; 0) festgelegt.</exception>
    </member>
    <member name="P:System.Text.Json.JsonReaderState.Options">
      <summary>Ruft das benutzerdefinierte Verhalten ab, das beim Lesen von JSON-Daten mithilfe der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur verwendet werden soll und möglicherweise von der strengen Einhaltung der JSON-Spezifikation abweicht, die das Standardverhalten darstellt.</summary>
      <returns>Das beim Lesen von JSON-Daten zu verwendende benutzerdefinierte Verhalten.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializer">
      <summary>Stellt Funktionen zum Serialisieren von Objekten oder Werttypen in JSON und zum Deserialisieren von JSON in Objekte oder Werttypen bereit.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.ReadOnlySpan{System.Byte},System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Analysiert den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz eines angegebenen Typs.</summary>
      <param name="utf8Json">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="returnType">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</param>
      <param name="options">Optionen zum Steuern des Verhaltens während der Analyse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig.

- oder -

<typeparamref name="returnType" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es sind noch Daten im Bereich über einen einzelnen JSON-Wert hinaus vorhanden.</exception>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="returnType" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns>Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.String,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Analysiert den Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz eines angegebenen Typs.</summary>
      <param name="json">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="returnType">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</param>
      <param name="options">Optionen zum Steuern des Verhaltens während der Analyse.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="json" /> oder <paramref name="returnType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig.
          
- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es sind noch Daten in der Zeichenfolge über einen einzelnen JSON-Wert hinaus vorhanden.</exception>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="returnType" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns>Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Liest einen JSON-Wert (einschließlich Objekten oder Arrays) aus dem bereitgestellten Reader und konvertiert ihn in eine Instanz eines angegebenen Typs.</summary>
      <param name="reader">Der Reader, aus dem der JSON-Inhalt gelesen werden soll.</param>
      <param name="returnType">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</param>
      <param name="options">Optionen zum Steuern des Serialisiererverhaltens während des Lesevorgangs.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="returnType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig.
          
- oder -

<typeparamref name="returnType" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es konnte kein Wert aus dem Reader gelesen werden.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> verwendet nicht unterstützte Optionen.</exception>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="returnType" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns>Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonSerializerOptions)">
      <summary>Analysiert den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird.</summary>
      <param name="utf8Json">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="options">Optionen zum Steuern des Verhaltens während der Analyse.</param>
      <typeparam name="TValue">Der Zieltyp des UTF-8-codierten Texts.</typeparam>
      <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig.

- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es sind noch Daten im Bereich über einen einzelnen JSON-Wert hinaus vorhanden.</exception>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns>Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.String,System.Text.Json.JsonSerializerOptions)">
      <summary>Analysiert den Text, der einen einzelnen JSON-Wert darstellt, in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird.</summary>
      <param name="json">Ruft den zu analysierenden JSON-Text ab.</param>
      <param name="options">Optionen zum Steuern des Verhaltens während der Analyse.</param>
      <typeparam name="TValue">Der Zieltyp des JSON-Werts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="json" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig.

- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es sind noch Daten in der Zeichenfolge über einen einzelnen JSON-Wert hinaus vorhanden.</exception>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns>Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Deserialize``1(System.Text.Json.Utf8JsonReader@,System.Text.Json.JsonSerializerOptions)">
      <summary>Liest einen JSON-Wert (einschließlich Objekten oder Arrays) aus dem bereitgestellten Reader in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird.</summary>
      <param name="reader">Der Reader, aus dem der JSON-Inhalt gelesen werden soll.</param>
      <param name="options">Optionen zum Steuern des Serialisiererverhaltens während des Lesevorgangs.</param>
      <typeparam name="TValue">Der Zieltyp des JSON-Werts.</typeparam>
      <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig.

- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es konnte kein Wert aus dem Reader gelesen werden.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="reader" /> verwendet nicht unterstützte Optionen.</exception>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns>Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync(System.IO.Stream,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Liest den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, asynchron in eine Instanz eines angegebenen Typs. Der Datenstrom wird vollständig gelesen.</summary>
      <param name="utf8Json">Die zu analysierenden JSON-Daten.</param>
      <param name="returnType">Der Typ des Objekts, in das konvertiert und das zurückgegeben werden soll.</param>
      <param name="options">Optionen zum Steuern des Verhaltens während des Lesevorgangs.</param>
      <param name="cancellationToken">Ein Abbruchtoken, das verwendet werden kann, um den Lesevorgang abzubrechen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> oder <paramref name="returnType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig.

- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es verbleiben Daten im Datenstrom.</exception>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="returnType" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns>Eine <paramref name="returnType" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.DeserializeAsync``1(System.IO.Stream,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Kiest den UTF-8-codierten Text, der einen einzelnen JSON-Wert darstellt, asynchron in eine Instanz des Typs, der durch einen generischen Typparameter angegeben wird. Der Datenstrom wird vollständig gelesen.</summary>
      <param name="utf8Json">Die zu analysierenden JSON-Daten.</param>
      <param name="options">Optionen zum Steuern des Verhaltens während des Lesevorgangs.</param>
      <param name="cancellationToken">Ein Token, das verwendet werden kann, um den Lesevorgang abzubrechen.</param>
      <typeparam name="TValue">Der Zieltyp des JSON-Werts.</typeparam>
      <exception cref="T:System.Text.Json.JsonException">Der JSON-Code ist ungültig.

- oder -

<typeparamref name="TValue" /> ist nicht mit dem JSON-Code kompatibel.

- oder -

Es verbleiben Daten im Datenstrom.</exception>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> ist <see langword="null" />.</exception>
      <returns>Eine <typeparamref name="TValue" />-Darstellung des JSON-Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Konvertiert den Wert eines angegebenen Typs in eine JSON-Zeichenfolge.</summary>
      <param name="value">Der zu konvertierende Wert.</param>
      <param name="inputType">Der Typ des <paramref name="value" />-Elements, das konvertiert werden soll.</param>
      <param name="options">Optionen zum Steuern des Konvertierungsverhaltens.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> ist nicht mit <paramref name="value" /> kompatibel.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="inputType" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns>Die JSON-Zeichenfolgendarstellung des Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize(System.Text.Json.Utf8JsonWriter,System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Schreibt die JSON-Darstellung des angegebenen Typs in den bereitgestellten Writer.</summary>
      <param name="writer">Der JSON-Writer, in den geschrieben werden soll.</param>
      <param name="value">Der zu konvertierende und zu schreibende Wert.</param>
      <param name="inputType">Der Typ des <paramref name="value" />-Elements, das konvertiert werden soll.</param>
      <param name="options">Optionen zum Steuern des Serialisierungsverhaltens.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> ist nicht mit <paramref name="value" /> kompatibel.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> oder <paramref name="inputType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="inputType" /> oder die serialisierbaren Member vorhanden.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Konvertiert den Wert eines von einem generischen Typparameter angegebenen Typs in eine JSON-Zeichenfolge.</summary>
      <param name="value">Der zu konvertierende Wert.</param>
      <param name="options">Optionen zum Steuern des Serialisierungsverhaltens.</param>
      <typeparam name="TValue">Der Typ des zu serialisierenden Werts.</typeparam>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns>Eine JSON-Zeichenfolgendarstellung des Werts.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.Serialize``1(System.Text.Json.Utf8JsonWriter,``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Schreibt die JSON-Darstellung eines Typs, der von einem generischen Typparameter angegeben wird, in den bereitgestellten Writer.</summary>
      <param name="writer">Ein JSON-Writer, in den geschrieben werden soll.</param>
      <param name="value">Der zu konvertierende und zu schreibende Wert.</param>
      <param name="options">Optionen zum Steuern des Serialisierungsverhaltens.</param>
      <typeparam name="TValue">Der Typ des zu serialisierenden Werts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="writer" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync(System.IO.Stream,System.Object,System.Type,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Konvertiert den Wert eines angegebenen Typs asynchron in UTF-8-codierten JSON-Text und schreibt ihn in den angegebenen Datenstrom.</summary>
      <param name="utf8Json">Der UTF-8-Datenstrom, in den geschrieben werden soll.</param>
      <param name="value">Der zu konvertierende Wert.</param>
      <param name="inputType">Der Typ des <paramref name="value" />-Elements, das konvertiert werden soll.</param>
      <param name="options">Optionen zum Steuern des Serialisierungsverhaltens.</param>
      <param name="cancellationToken">Ein Token, das verwendet werden kann, um den Schreibvorgang abzubrechen.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> ist nicht mit <paramref name="value" /> kompatibel.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> oder <paramref name="inputType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="inputType" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns>Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeAsync``1(System.IO.Stream,``0,System.Text.Json.JsonSerializerOptions,System.Threading.CancellationToken)">
      <summary>Konvertiert einen Wert eines Typs, der durch einen generischen Typparameter angegeben wird, asynchron in UTF-8-codierten JSON-Text und schreibt ihn in einen Datenstrom.</summary>
      <param name="utf8Json">Der UTF-8-Datenstrom, in den geschrieben werden soll.</param>
      <param name="value">Der zu konvertierende Wert.</param>
      <param name="options">Optionen zum Steuern des Serialisierungsverhaltens.</param>
      <param name="cancellationToken">Ein Token, das verwendet werden kann, um den Schreibvorgang abzubrechen.</param>
      <typeparam name="TValue">Der Typ des zu serialisierenden Werts.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns>Eine Aufgabe, die den asynchronen Schreibvorgang darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(System.Object,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Konvertiert einen Wert des angegebenen Typs in eine JSON-Zeichenfolge, die als UTF-8-Bytes codiert ist.</summary>
      <param name="value">Der zu konvertierende Wert.</param>
      <param name="inputType">Der Typ des <paramref name="value" />-Elements, das konvertiert werden soll.</param>
      <param name="options">Optionen zum Steuern des Konvertierungsverhaltens.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputType" /> ist nicht mit <paramref name="value" /> kompatibel.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <paramref name="inputType" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns>Eine JSON-Zeichenfolgendarstellung des Werts, die als UTF-8-Bytes codiert ist.</returns>
    </member>
    <member name="M:System.Text.Json.JsonSerializer.SerializeToUtf8Bytes``1(``0,System.Text.Json.JsonSerializerOptions)">
      <summary>Konvertiert den Wert eines Typs, der durch einen generischen Typparameter angegeben wird, in eine als UTF-8-Bytes codierte JSON-Zeichenfolge.</summary>
      <param name="value">Der zu konvertierende Wert.</param>
      <param name="options">Optionen zum Steuern des Konvertierungsverhaltens.</param>
      <typeparam name="TValue">Der Typ des Werts.</typeparam>
      <exception cref="T:System.NotSupportedException">Es ist keine kompatible <see cref="System.Text.Json.Serialization.JsonConverter" />-Klasse für <typeparamref name="TValue" /> oder die serialisierbaren Member vorhanden.</exception>
      <returns>Eine JSON-Zeichenfolgendarstellung des Werts, die als UTF-8-Bytes codiert ist.</returns>
    </member>
    <member name="T:System.Text.Json.JsonSerializerDefaults">
      <summary>Gibt an, welche Standardoptionen von <see cref="T:System.Text.Json.JsonSerializerOptions" /> verwendet werden.</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.General">
      <summary>Gibt an, dass allgemeine Werte verwendet werden sollen. Dies sind die gleichen Einstellungen, die angewendet werden, wenn keine <see cref="T:System.Text.Json.JsonSerializerDefaults" /> angegeben sind.</summary>
    </member>
    <member name="F:System.Text.Json.JsonSerializerDefaults.Web">
      <summary>Gibt an, dass Werte verwendet werden sollen, die für webbasierte Szenarien besser geeignet sind.</summary>
    </member>
    <member name="T:System.Text.Json.JsonSerializerOptions">
      <summary>Stellt Optionen bereit, die mit der <see cref="T:System.Text.Json.JsonSerializer" />-Klasse verwendet werden sollen</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.JsonSerializerOptions" />-Klasse.</summary>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerDefaults)">
      <summary>Konstruiert eine neue <see cref="T:System.Text.Json.JsonSerializerOptions" />-Instanz mit einer vordefinierten Menge von Optionen, die durch die angegebenen <see cref="T:System.Text.Json.JsonSerializerDefaults" /> bestimmt wird.</summary>
      <param name="defaults">Der zu diskutierende <see cref="T:System.Text.Json.JsonSerializerDefaults" />.</param>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.#ctor(System.Text.Json.JsonSerializerOptions)">
      <summary>Kopiert die Optionen aus einer <see cref="T:System.Text.Json.JsonSerializerOptions" />-Instanz in eine neue Instanz.</summary>
      <param name="options">Die Optionsinstanz, aus der Optionen kopiert werden sollen.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="options" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.JsonSerializerOptions.GetConverter(System.Type)">
      <summary>Gibt den Konverter für den angegebenen Typ zurück</summary>
      <param name="typeToConvert">Der Typ, für den ein Konverter zurückgegeben wird</param>
      <exception cref="T:System.InvalidOperationException">Der konfigurierte <see cref="System.Text.Json.Serialization.JsonConverter" /> für <paramref name="typeToConvert" /> gab einen ungültigen Konverter zurück.</exception>
      <exception cref="T:System.NotSupportedException">Es ist kein kompatibler <see cref="System.Text.Json.Serialization.JsonConverter" /> für <paramref name="typeToConvert" /> oder seine serialisierbaren Member vorhanden.</exception>
      <returns>Der erste Konverter, der den angegebenen Typ unterstützt, oder <see langword="null" />, wenn kein Konverter vorhanden ist</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.AllowTrailingCommas">
      <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array in der deserialisierten JSON-Nutzlast zulässig ist (und ignoriert wird)</summary>
      <exception cref="T:System.InvalidOperationException">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
      <returns>
        <see langword="true" /> , wenn ein zusätzliches Komma am Ende einer Liste von JSON-Werten in einem Objekt oder Array zulässig ist (und ignoriert wird); <see langword="false" /> andernfalls.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Converters">
      <summary>Ruft die Liste der registrierten benutzerdefinierten Konverter ab</summary>
      <returns>Die Liste der benutzerdefinierten Konverter.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultBufferSize">
      <summary>Ruft die Standardpuffergröße in Byte ab, die beim Erstellen temporärer Puffer verwendet werden soll, oder legt diese fest.</summary>
      <exception cref="T:System.ArgumentException">Die Puffergröße ist kleiner als 1.</exception>
      <exception cref="T:System.InvalidOperationException">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
      <returns>Die Standardpuffergröße in Bytes.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition">
      <summary>Gibt eine Bedingung an, um festzulegen, wann Eigenschaften mit Standardwerten bei der Serialisierung oder Deserialisierung ignoriert werden.
Der Standardwert ist <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never" />.</summary>
      <exception cref="T:System.ArgumentException">Die Eigenschaft ist auf <see cref="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always" /> festgelegt.</exception>
      <exception cref="T:System.InvalidOperationException">Diese Eigenschaft wird festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.

- oder -

<see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" /> wurde auf <see langword="true" /> festgelegt. Diese Eigenschaften können nicht gleichzeitig verwendet werden.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.DictionaryKeyPolicy">
      <summary>Ruft die Richtlinie ab, die zum Konvertieren des Namens eines <see cref="T:System.Collections.IDictionary" />-Schlüssels in ein anderes Format (z. B. die Camel-Case-Schreibweise) verwendet wird, oder legt sie fest.</summary>
      <returns>Die Richtlinie, die verwendet wird, um einen <see cref="T:System.Collections.IDictionary" /> Schlüsselnamen in ein anderes Format zu konvertieren.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.Encoder">
      <summary>Ruft den Encoder ab oder legt den Encoder fest, der beim Versehen von Zeichenfolgen mit Escapezeichen verwendet wird, oder <see langword="null" />, um den Standardencoder zu verwenden.</summary>
      <returns>Die JavaScript-Zeichencodierung.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues">
      <summary>Ruft einen Wert ab, der bestimmt, ob <see langword="null" />-Werte während der Serialisierung und Deserialisierung ignoriert werden, oder legt ihn fest. Der Standardwert ist <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.

- oder -

<see cref="P:System.Text.Json.JsonSerializerOptions.DefaultIgnoreCondition" /> wurde auf nicht auf einen Standardwert festgelegt. Diese Eigenschaften können nicht gleichzeitig verwendet werden.</exception>
      <returns>
        <see langword="true" /> So ignorieren Sie NULL-Werte während der Serialisierung und Deserialisierung andernfalls Siehe langword = "false"/ &gt; .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyFields">
      <summary>Bestimmt, ob schreibgeschützte Felder während der Serialisierung ignoriert werden. Eine Eigenschaft ist schreibgeschützt, wenn sie nicht mit dem <see langword="readonly" />-Schlüsselwort gekennzeichnet ist. Der Standardwert ist <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException">Diese Eigenschaft wird festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
      <returns>
        <see langword="true" /> , wenn schreibgeschützte Felder bei der Serialisierung ignoriert werden sollen. <see langword="false" /> andernfalls.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IgnoreReadOnlyProperties">
      <summary>Ruft einen Wert ab, der bestimmt, ob schreibgeschützte Eigenschaften während der Serialisierung ignoriert werden Der Standardwert ist <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
      <returns>
        <see langword="true" /> So ignorieren Sie schreibgeschützte Eigenschaften während der Serialisierung andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.IncludeFields">
      <summary>Bestimmt, ob Felder bei Serialisierung und Deserialisierung behandelt werden.
Der Standardwert ist <see langword="false" />.</summary>
      <exception cref="T:System.InvalidOperationException">Diese Eigenschaft wird festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.MaxDepth">
      <summary>Ruft die bei der Serialisierung oder Deserialisierung von JSON maximal zulässige Tiefe ab oder legt sie auf den Standardwert 0 (null) fest, wobei eine maximale Tiefe von 64 angegeben wird.</summary>
      <exception cref="T:System.InvalidOperationException">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Die maximale Tiefe wird auf einen negativen Wert festgelegt.</exception>
      <returns>Die maximal zulässige Tiefe bei der Serialisierung oder Deserialisierung von JSON.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.NumberHandling">
      <summary>Gibt an, wie Zahlentypen bei der Serialisierung oder Deserialisierung behandelt werden sollen.</summary>
      <exception cref="T:System.InvalidOperationException">Diese Eigenschaft wird festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNameCaseInsensitive">
      <summary>Ruft einen Wert ab oder legt einen Wert fest, der bestimmt, ob der Name einer Eigenschaft bei der Deserialisierung einen Vergleich ohne Beachtung der Groß-/Kleinschreibung verwendet. Der Standardwert ist <see langword="false" />.</summary>
      <returns>
        <see langword="true" /> So vergleichen Sie Eigenschaftsnamen unter Berücksichtigung der Groß-/Kleinschreibung andernfalls <see langword="false" /> .</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.PropertyNamingPolicy">
      <summary>Ruft einen Wert ab oder legt einen Wert fest, der die Richtlinie angibt, mit der der Name einer Eigenschaft in einem Objekt in ein anderes Format konvertiert wird (z. B. Camel-Case), oder <see langword="null" />, um die Eigenschaftsnamen unverändert zu lassen</summary>
      <returns>Eine Benennungs Richtlinie für Eigenschaften oder, <see langword="null" /> um Eigenschaftsnamen unverändert zu lassen.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReadCommentHandling">
      <summary>Ruft einen Wert ab oder legt einen Wert fest, der definiert, wie Kommentare während der Deserialisierung behandelt werden</summary>
      <exception cref="T:System.InvalidOperationException">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Die Enumeration für die Kommentarbehandlung wird auf einen Wert festgelegt, der nicht unterstützt wird (oder nicht innerhalb des <see cref="T:System.Text.Json.JsonCommentHandling" />-Enumeratiosbereichs liegt).</exception>
      <returns>Ein Wert, der angibt, ob Kommentare zulässig, unzulässig oder übersprungen werden.</returns>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.ReferenceHandler">
      <summary>Konfiguriert, wie Objektverweise beim Lesen und Schreiben von JSON behandelt werden sollen.</summary>
    </member>
    <member name="P:System.Text.Json.JsonSerializerOptions.WriteIndented">
      <summary>Ruft einen Wert ab oder legt einen Wert fest, der definiert, ob JSON eine automatische Strukturierung und Einrückung verwenden soll. Standardmäßig wird JSON ohne zusätzlichen Leerraum serialisiert.</summary>
      <exception cref="T:System.InvalidOperationException">Diese Eigenschaft wurde festgelegt, nachdem die Serialisierung oder Deserialisierung stattgefunden hat.</exception>
      <returns>
        <see langword="true" /> , wenn JSON bei der Serialisierung Recht gedruckt werden soll. andernfalls <see langword="false" /> . Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="T:System.Text.Json.JsonTokenType">
      <summary>Definiert die verschiedenen JSON-Token, aus denen ein JSON-Text besteht.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Comment">
      <summary>Der Tokentyp ist eine Kommentarzeichenfolge.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndArray">
      <summary>Der Tokentyp stellt das Ende eines JSON-Arrays dar.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.EndObject">
      <summary>Der Tokentyp stellt das Ende eines JSON-Objekts dar.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.False">
      <summary>Der Tokentyp ist das JSON-Literal false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.None">
      <summary>Es ist kein Wert vorhanden (im Gegensatz zu <see cref="F:System.Text.Json.JsonTokenType.Null" />).</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Null">
      <summary>Der Tokentyp ist das JSON-Literal NULL.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.Number">
      <summary>Der Tokentyp ist eine JSON-Zahl.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.PropertyName">
      <summary>Der Tokentyp ist ein JSON-Eigenschaftenname.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartArray">
      <summary>Der Tokentyp stellt den Anfang eines JSON-Arrays dar.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.StartObject">
      <summary>Der Tokentyp stellt den Anfang eines JSON-Objekts dar.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.String">
      <summary>Der Tokentyp ist eine JSON-Zeichenfolge.</summary>
    </member>
    <member name="F:System.Text.Json.JsonTokenType.True">
      <summary>Der Tokentyp ist das JSON-Literal true.</summary>
    </member>
    <member name="T:System.Text.Json.JsonValueKind">
      <summary>Gibt den Datentyp eines JSON-Werts an.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Array">
      <summary>Ein JSON-Array.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.False">
      <summary>Der JSON-Wert false.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Null">
      <summary>Der JSON-Wert NULL.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Number">
      <summary>Ein JSON-Zahlenwert.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Object">
      <summary>Ein JSON-Objekt.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.String">
      <summary>Eine JSON-Zeichenfolge.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.True">
      <summary>Der JSON-Wert true.</summary>
    </member>
    <member name="F:System.Text.Json.JsonValueKind.Undefined">
      <summary>Es ist kein Wert vorhanden (im Gegensatz zu <see cref="F:System.Text.Json.JsonValueKind.Null" />).</summary>
    </member>
    <member name="T:System.Text.Json.JsonWriterOptions">
      <summary>Ermöglicht dem Benutzer das Definieren von benutzerdefiniertem Verhalten beim Schreiben von JSON mit dem <see cref="T:System.Text.Json.Utf8JsonWriter" />.</summary>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Encoder">
      <summary>Ruft den Encoder ab oder legt den Encoder fest, der beim Versehen von Zeichenfolgen mit Escapezeichen verwendet wird, oder <see langword="null" />, um den Standardencoder zu verwenden.</summary>
      <returns>Der JavaScript-Zeichen Encoder, mit dem das Escapeverhalten überschrieben wird.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.Indented">
      <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob der <see cref="T:System.Text.Json.Utf8JsonWriter" /> die JSON-Ausgabe formatieren soll. Dazu gehört das Einrücken geschachtelter JSON-Token, das Hinzufügen neuer Zeilen und das Einfügen von Leerzeichen zwischen Eigenschaftsnamen und -werten.</summary>
      <returns>
        <see langword="true" /> So formatieren Sie die JSON-Ausgabe <see langword="false" /> , wenn ohne zusätzlichen Leerraum geschrieben werden soll. Der Standardwert ist <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.JsonWriterOptions.SkipValidation">
      <summary>Ruft einen Wert ab oder legt einen Wert fest, der angibt, ob der <see cref="T:System.Text.Json.Utf8JsonWriter" /> die strukturelle Überprüfung überspringen und dem Benutzer das Schreiben von ungültigem JSON ermöglichen soll.</summary>
      <returns>
        <see langword="true" /> um die strukturelle Validierung zu überspringen und ungültige JSON zuzulassen. <see langword="false" /> , um <see cref="T:System.InvalidOperationException" /> bei jedem Versuch, einen ungültigen JSON-Code zu schreiben, eine auszulösen</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonAttribute">
      <summary>Stellt die Basisklasse für Serialisierungsattribute bereit.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonAttribute.#ctor">
      <summary>Erstellt eine neue Instanz der <see cref="T:System.Text.Json.Serialization.JsonAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConstructorAttribute">
      <summary>Gibt beim Platzieren in einem Konstruktor an, dass der Konstruktor verwendet werden soll, um bei der Deserialisierung Instanzen des Typs zu erstellen.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConstructorAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonConstructorAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter">
      <summary>Konvertiert ein Objekt oder einen Wert in bzw. aus JSON.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter.CanConvert(System.Type)">
      <summary>Bestimmt beim Überschreiben in einer abgeleiteten Klasse, ob die Konverterinstanz den angegebenen Objekttyp konvertieren kann</summary>
      <param name="typeToConvert">Der Typ des Objekts, um zu überprüfen, ob es von der Konverterinstanz konvertiert werden kann</param>
      <returns>
        <see langword="true" />, wenn die Instanz den angegebenen Objekttyp konvertieren kann; andernfalls <see langword="false" /></returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverter`1">
      <summary>Konvertiert ein Objekt oder einen Wert in bzw. aus JSON.</summary>
      <typeparam name="T">Der Typ des Objekts oder Werts, der vom Konverter behandelt wird.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonConverter`1" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.CanConvert(System.Type)">
      <summary>Bestimmt, ob der angegebene Typ konvertiert werden kann.</summary>
      <param name="typeToConvert">Der Typ, mit dem verglichen werden soll.</param>
      <returns>
        <see langword="true" />, wenn der Typ konvertiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Read(System.Text.Json.Utf8JsonReader@,System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Liest und konvertiert den JSON-Code in den Typ <typeparamref name="T" />.</summary>
      <param name="reader">Der Reader.</param>
      <param name="typeToConvert">Der zu konvertierende Typ.</param>
      <param name="options">Ein Objekt, das die zu verwendenden Serialisierungsoptionen angibt.</param>
      <returns>Der konvertierte Wert.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverter`1.Write(System.Text.Json.Utf8JsonWriter,`0,System.Text.Json.JsonSerializerOptions)">
      <summary>Schreibt einen angegebenen Wert als JSON.</summary>
      <param name="writer">Das Writer-Objekt, in das geschrieben werden soll.</param>
      <param name="value">Der in JSON zu konvertierende Wert.</param>
      <param name="options">Ein Objekt, das die zu verwendenden Serialisierungsoptionen angibt.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverter`1.HandleNull">
      <summary>Gibt an, ob <see langword="null" /> bei der Serialisierung an den Konverter übergeben werden soll und ob <see cref="F:System.Text.Json.JsonTokenType.Null" /> bei der Deserialisierung übergeben werden soll.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterAttribute">
      <summary>Gibt bei Anordnung in einer Eigenschaft oder einem Typ den Konvertertyp an, der verwendet werden soll.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" />.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.#ctor(System.Type)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> mit dem angegebenen Konvertertyp.</summary>
      <param name="converterType">Der Typ des Konverters.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterAttribute.CreateConverter(System.Type)">
      <summary>Bei einer Überschreibung in einer abgeleiteten Klasse und Festlegung von <see cref="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType" /> auf <see langword="null" /> kann mit der abgeleiteten Klasse ein <see cref="T:System.Text.Json.Serialization.JsonConverter" />-Element erstellt werden, um einen zusätzlichen Status zu übergeben.</summary>
      <param name="typeToConvert">Der Typ des Konverters.</param>
      <returns>Der benutzerdefinierte Konverter.</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonConverterAttribute.ConverterType">
      <summary>Ruft den Typ von <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> ab. Es wird <see langword="null" /> zurückgegeben, wenn die Erstellung ohne Typ durchgeführt wurde.</summary>
      <returns>Der Typ des <see cref="T:System.Text.Json.Serialization.JsonConverterAttribute" /> oder, <see langword="null" /> Wenn er ohne Typ erstellt wurde.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonConverterFactory">
      <summary>Unterstützt das Konvertieren verschiedener Typen mithilfe eines Factorymusters.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.#ctor">
      <summary>Initialisiert beim Überschreiben in einer abgeleiteten Klasse eine neue Instanz der <see cref="T:System.Text.Json.Serialization.JsonConverterFactory" />-Klasse.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonConverterFactory.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Erstellt einen Konverter für einen angegebenen Typ.</summary>
      <param name="typeToConvert">Der vom Konverter verarbeitete Typ.</param>
      <param name="options">Die zu verwendenden Serialisierungsoptionen.</param>
      <returns>Ein Konverter, für den <typeparamref name="T" /> mit <paramref name="typeToConvert" /> kompatibel ist.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonExtensionDataAttribute">
      <summary>Bei der Platzierung in einer Eigenschaft vom Typ <see cref="T:System.Collections.Generic.IDictionary`2" /> werden alle Eigenschaften, die nicht über ein übereinstimmendes Element verfügen, während der Deserialisierung diesem Wörterbuch hinzugefügt und während der Serialisierung geschrieben.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonExtensionDataAttribute.#ctor">
      <summary>Instanziiert eine neue Instanz der <see cref="T:System.Text.Json.Serialization.JsonExtensionDataAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreAttribute">
      <summary>Verhindert, dass eine Eigenschaft serialisiert oder deserialisiert wird.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIgnoreAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" />.</summary>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonIgnoreAttribute.Condition">
      <summary>Gibt die Bedingung an, die erfüllt sein muss, damit eine Eigenschaft ignoriert wird.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIgnoreCondition">
      <summary>Steuert, wie das <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute" /> bei der Serialisierung und Deserialisierung Eigenschaften ignoriert.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Always">
      <summary>Die Eigenschaft wird immer ignoriert.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.Never">
      <summary>Die Eigenschaft wird immer serialisiert und deserialisiert, unabhängig von der Konfiguration von <see cref="P:System.Text.Json.JsonSerializerOptions.IgnoreNullValues" />.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingDefault">
      <summary>Die Eigenschaft wird nur ignoriert, wenn sie <see langword="null" /> lautet.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull">
      <summary>Wenn der Wert <see langword="null" /> ist, wird die Eigenschaft während der Serialisierung ignoriert. Dies wird nur auf Verweistypeigenschaften und -felder angewendet.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonIncludeAttribute">
      <summary>Gibt an, dass der Member in die Serialisierung und Deserialisierung einbezogen werden soll.</summary>
      <exception cref="T:System.InvalidOperationException">Das Attribut wird auf eine nicht öffentliche Eigenschaft angewendet.</exception>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonIncludeAttribute.#ctor">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonIncludeAttribute" />.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandling">
      <summary>Bestimmt, wie <see cref="T:System.Text.Json.JsonSerializer" /> Zahlen bei der Serialisierung und Deserialisierung behandelt.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowNamedFloatingPointLiterals">
      <summary>Die <see cref="F:System.Text.Json.JsonTokenType.String" />-Token „NaN“, „Infinity“ und „-Infinity“ können als Gleitkommakonstanten gelesen werden, und die <see cref="T:System.Single" />- und <see cref="T:System.Double" />-Werte für diese Konstanten werden als ihre entsprechenden JSON-Zeichenfolgendarstellungen geschrieben.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.AllowReadingFromString">
      <summary>Zahlen können aus <see cref="F:System.Text.Json.JsonTokenType.String" />-Token gelesen werden. Dies verhindert nicht, dass Zahlen aus <see cref="F:System.Text.Json.JsonTokenType.Number" />-Token gelesen werden.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.Strict">
      <summary>Zahlen werden nur aus <see cref="F:System.Text.Json.JsonTokenType.Number" />-Token gelesen und nur als JSON-Zahlen (ohne Anführungszeichen) geschrieben.</summary>
    </member>
    <member name="F:System.Text.Json.Serialization.JsonNumberHandling.WriteAsString">
      <summary>Zahlen werden als JSON-Zeichenfolgen (mit Anführungszeichen) geschrieben, nicht als JSON-Zahlen.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute">
      <summary>Gibt bei Platzierung in einem Typ, einer Eigenschaft oder einem Feld an, welche <see cref="T:System.Text.Json.Serialization.JsonNumberHandling" />-Einstellungen beim Serialisieren oder Deserialisieren von Zahlen verwendet werden sollen.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonNumberHandlingAttribute.#ctor(System.Text.Json.Serialization.JsonNumberHandling)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonNumberHandlingAttribute" />.</summary>
      <param name="handling">Eine bitweise Kombination der Enumerationswerte, die angeben, wie Zahlentypen bei der Serialisierung oder Deserialisierung behandelt werden sollen.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonNumberHandlingAttribute.Handling">
      <summary>Gibt an, welche Einstellungen beim Serialisieren oder Deserialisieren von Zahlen verwendet werden sollen.</summary>
      <returns>Ein-Objekt, das die Serialisierungs-und deserialisierungseinstellungen der Zahl bestimmt.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonPropertyNameAttribute">
      <summary>Gibt den Eigenschaftsnamen an, der beim Serialisieren und Deserialisieren im JSON-Code vorhanden ist. Dadurch wird jede von <see cref="T:System.Text.Json.JsonNamingPolicy" />angegebene Benennungsrichtlinie außer Kraft gesetzt.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonPropertyNameAttribute.#ctor(System.String)">
      <summary>Initialisiert eine neue Instanz von <see cref="T:System.Text.Json.Serialization.JsonPropertyNameAttribute" /> mit dem angegebenen Eigenschaftsnamen.</summary>
      <param name="name">Den Namen der Eigenschaft.</param>
    </member>
    <member name="P:System.Text.Json.Serialization.JsonPropertyNameAttribute.Name">
      <summary>Ruft den Namen der Eigenschaft ab.</summary>
      <returns>Den Namen der Eigenschaft.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.JsonStringEnumConverter">
      <summary>Konvertiert Enumerationswerte in und aus Zeichenfolgen.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor">
      <summary>Initialisiert eine Instanz der <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" />-Klasse mit der Standardbenennungsrichtlinie, die Integerwerte zulässt.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.#ctor(System.Text.Json.JsonNamingPolicy,System.Boolean)">
      <summary>Initialisiert eine Instanz der <see cref="T:System.Text.Json.Serialization.JsonStringEnumConverter" />-Klasse mit einer angegebenen Benennungsrichtlinie und einem Wert, der angibt, ob nicht definierte Enumerationswerte zulässig sind.</summary>
      <param name="namingPolicy">Die optionale Benennungsrichtlinie zum Schreiben von Enumerationswerten.</param>
      <param name="allowIntegerValues">
        <see langword="true" />, um nicht definierte Enumerationswerte zuzulassen, andernfalls <see langword="false" />. Wenn <see langword="true" /> und kein Enumerationswert definiert ist, wird eine Zahl anstelle einer Zeichenfolge ausgegeben.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CanConvert(System.Type)">
      <summary>Bestimmt, ob der angegebene Typ in eine Enumeration konvertiert werden kann.</summary>
      <param name="typeToConvert">Der zu überprüfende Typ.</param>
      <returns>
        <see langword="true" />, wenn der Typ konvertiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.JsonStringEnumConverter.CreateConverter(System.Type,System.Text.Json.JsonSerializerOptions)">
      <summary>Erstellt einen Konverter für den angegebenen Typ.</summary>
      <param name="typeToConvert">Der vom Konverter verarbeitete Typ.</param>
      <param name="options">Die zu verwendenden Serialisierungsoptionen.</param>
      <returns>Ein Konverter, für den <typeparamref name="T" /> mit <paramref name="typeToConvert" /> kompatibel ist.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler">
      <summary>Diese Klasse definiert, wie der <see cref="T:System.Text.Json.JsonSerializer" /> mit Verweisen auf Serialisierung und Deserialisierung umgeht.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Serialization.ReferenceHandler" />-Klasse.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler.CreateResolver">
      <summary>Gibt den für jeden Serialisierungsaufruf verwendeten <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> zurück.</summary>
      <returns>Der Resolver, der für Serialisierung und Deserialisierung verwendet werden soll.</returns>
    </member>
    <member name="P:System.Text.Json.Serialization.ReferenceHandler.Preserve">
      <summary>Metadateneigenschaften werden bei der Deserialisierung von JSON-Objekten und -Arrays in Verweistypen berücksichtigt und bei der Serialisierung von Verweistypen geschrieben. Dies ist notwendig, um aus Objekten mit Zyklen oder duplizierten Verweisen Roundtrip-fähigen JSON-Code zu erstellen.</summary>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceHandler`1">
      <summary>Diese Klasse definiert, wie der <see cref="T:System.Text.Json.JsonSerializer" /> mit Verweisen auf Serialisierung und Deserialisierung umgeht.</summary>
      <typeparam name="T">Der Typ der <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> , die bei jedem Serialisierungs-oder deserialisierungsaufruftyp erstellt werden soll.</typeparam>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.#ctor">
      <summary>Initialisiert eine neue Instanz der generischen <see cref="T:System.Text.Json.Serialization.ReferenceHandler`1" />-Klasse, mit der eine <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />Instanz des angegebenen <typeparam name="T" />. erstellt werden kann.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceHandler`1.CreateResolver">
      <summary>Erstellt einen neuen <see cref="T:System.Text.Json.Serialization.ReferenceResolver" /> des Typs <typeparamref name="T" />, der für jeden Serialisierungsaufruf verwendet wird.</summary>
      <returns>Der neue Resolver, der für Serialisierung und Deserialisierung verwendet werden soll.</returns>
    </member>
    <member name="T:System.Text.Json.Serialization.ReferenceResolver">
      <summary>Diese Klasse definiert, wie der <see cref="T:System.Text.Json.JsonSerializer" /> mit Verweisen auf Serialisierung und Deserialisierung umgeht.
Definiert das Kernverhalten bei Beibehaltung von Verweisen auf Serialisierung und Deserialisierung.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.#ctor">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Serialization.ReferenceResolver" />-Klasse.</summary>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.AddReference(System.String,System.Object)">
      <summary>Fügt dem Behälter mit Verweisen einen Eintrag mit der angegebenen ID und dem angegebenen Wert hinzu.
Diese Methode wird aufgerufen, wenn eine $id-Metadateneigenschaft aus einem JSON-Objekt gelesen wird.</summary>
      <param name="referenceId">Der Bezeichner des JSON-Objekts oder -Arrays.</param>
      <param name="value">Der Wert des CLR-Verweistypobjekts, das sich aus dem Analysieren des JSON-Objekts ergibt.</param>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.GetReference(System.Object,System.Boolean@)">
      <summary>Ruft den Verweisbezeichner des angegebenen Werts ab, falls vorhanden. Andernfalls wird eine neue ID zugewiesen.
Diese Methode wird aufgerufen, bevor ein CLR-Objekt geschrieben wird, damit wir entscheiden können, ob wir $id schreiben und den Rest seiner Eigenschaften aufzählen oder $ref und zum nächsten Objekt übergehen.</summary>
      <param name="value">Der Wert des CLR-Verweistypobjekts, für das eine ID abgerufen werden soll.</param>
      <param name="alreadyExists">Wenn diese Methode zurückgegeben wird, <see langword="true" />, sofern bereits ein Verweis auf einen Wert vorhanden ist. Andernfalls <see langword="false" />.</param>
      <returns>Die Verweis-ID für das angegebene Objekt.</returns>
    </member>
    <member name="M:System.Text.Json.Serialization.ReferenceResolver.ResolveReference(System.String)">
      <summary>Gibt das CLR-Verweistypobjekt zurück, das auf die angegebene Verweis-ID verweist. Diese Methode wird aufgerufen, wenn die Metadateneigenschaft $ref gelesen wird.</summary>
      <param name="referenceId">Die Verweis-ID, die sich auf das zurückgegebene Objekt bezieht.</param>
      <returns>Das Verweistypobjekt, das sich auf die angegebene Verweis-ID bezieht.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonReader">
      <summary>Stellt eine leistungsstarke API für schreibgeschützten Zugriff auf UTF-8-codierten JSON-Text in Vorwärtsrichtung bereit.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur, mit der eine schreibgeschützte Sequenz mit UTF-8-codiertem Text verarbeitet und angegeben wird, ob die Eingabe den gesamten zu verarbeitenden Text enthält.</summary>
      <param name="jsonData">Der zu verarbeitende UTF-8 codierte JSON-Text.</param>
      <param name="isFinalBlock">
        <see langword="true" />, um anzugeben, dass die Eingabesequenz die gesamten zu verarbeitenden Daten enthält. <see langword="false" />, um anzugeben, dass der Eingabebereich nur einen Teil der Daten enthält und weitere Daten später folgen.</param>
      <param name="state">Ein Objekt, das den Readerzustand enthält. Wenn dies der erste Aufruf an den Konstruktor ist, übergeben Sie den Standardzustand. Andernfalls übergeben Sie den Wert der <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" />-Eigenschaft aus der vorherigen Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.Buffers.ReadOnlySequence{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur, mit der eine schreibgeschützte Sequenz mit UTF-8-codiertem Text verarbeitet wird, indem die angegebenen Optionen verwendet werden.</summary>
      <param name="jsonData">Der zu verarbeitende UTF-8 codierte JSON-Text.</param>
      <param name="options">Definiert das benutzerdefinierte Verhalten des <see cref="T:System.Text.Json.Utf8JsonReader" />-Elements, das sich vom JSON RFC unterscheidet (z. B. die Handhabung von Kommentaren oder die maximal zulässige Tiefe beim Lesen). In der Standardeinstellung folgt <see cref="T:System.Text.Json.Utf8JsonReader" /> streng dem JSON RFC. Kommentare im JSON-Code sind ungültig, und die maximale Tiefe beträgt 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Boolean,System.Text.Json.JsonReaderState)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur, mit der ein schreibgeschützter Bereich mit UTF-8-codiertem Text verarbeitet und angegeben wird, ob die Eingabe den gesamten zu verarbeitenden Text enthält.</summary>
      <param name="jsonData">Der zu verarbeitende UTF-8 codierte JSON-Text.</param>
      <param name="isFinalBlock">
        <see langword="true" />, um anzugeben, dass die Eingabesequenz die gesamten zu verarbeitenden Daten enthält. <see langword="false" />, um anzugeben, dass der Eingabebereich nur einen Teil der Daten enthält und weitere Daten später folgen.</param>
      <param name="state">Ein Objekt, das den Readerzustand enthält. Wenn dies der erste Aufruf an den Konstruktor ist, übergeben Sie den Standardzustand. Andernfalls übergeben Sie den Wert der <see cref="P:System.Text.Json.Utf8JsonReader.CurrentState" />-Eigenschaft aus der vorherigen Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" />.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.#ctor(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonReaderOptions)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur, mit der ein schreibgeschützter Bereich mit UTF-8-codiertem Text verarbeitet wird, indem die angegebenen Optionen verwendet werden.</summary>
      <param name="jsonData">Der zu verarbeitende UTF-8 codierte JSON-Text.</param>
      <param name="options">Definiert das benutzerdefinierte Verhalten des <see cref="T:System.Text.Json.Utf8JsonReader" />-Elements, das sich vom JSON RFC unterscheidet (z. B. die Handhabung von Kommentaren oder die maximal zulässige Tiefe beim Lesen). In der Standardeinstellung folgt <see cref="T:System.Text.Json.Utf8JsonReader" /> streng dem JSON RFC. Kommentare im JSON-Code sind ungültig, und die maximale Tiefe beträgt 64.</param>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBoolean">
      <summary>Liest den nächsten JSON-Tokenwert aus der Quelle als einen <see cref="T:System.Boolean" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist kein boolescher Wert (d.h. <see cref="F:System.Text.Json.JsonTokenType.True" /> oder <see cref="F:System.Text.Json.JsonTokenType.False" />).</exception>
      <returns>
        <see langword="true" />, wenn <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> den Wert <see cref="F:System.Text.Json.JsonTokenType.True" /> hat. <see langword="false" />, wenn <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> den Wert <see cref="F:System.Text.Json.JsonTokenType.False" /> hat.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetByte">
      <summary>Analysiert den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Byte" />.</summary>
      <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist keine <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Das numerische Format des JSON-Tokenwerts ist falsch (enthält beispielsweise einen Bruch oder ist in wissenschaftlicher Notation geschrieben).
          
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Byte.MinValue" /> oder größer als <see cref="F:System.Byte.MaxValue" /> ist.</exception>
      <returns>Der Wert des UTF-8-codierten Tokens.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetBytesFromBase64">
      <summary>Analysiert den Wert des aktuellen JSON-Tokens aus der Quelle und decodiert die Base64-codierte JSON-Zeichenfolge als Bytearray.</summary>
      <exception cref="T:System.InvalidOperationException">Der Typ des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">Der Wert wird nicht als Base64-Text codiert und kann daher nicht in Bytes decodiert werden.

- oder -

Der Wert enthält ungültige oder mehr als zwei Auffüllzeichen.

- oder -

Der Wert ist unvollständig. Das bedeutet, dass die Länge der JSON-Zeichenfolge kein Vielfaches von 4 ist.</exception>
      <returns>Das Bytearray, das den Wert des aktuellen JSON-Tokens darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetComment">
      <summary>Analysiert den Wert des aktuellen JSON-Tokens aus der Quelle als Kommentar, in einen <see cref="T:System.String" /> transcodiert.</summary>
      <exception cref="T:System.InvalidOperationException">Das JSON-Token ist kein Kommentar.</exception>
      <returns>Der Kommentar, der den Wert des aktuellen JSON-Tokens darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTime">
      <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.DateTime" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">Der Wert des JSON-Tokens darf nicht als <see cref="T:System.DateTime" /> gelesen werden.
        
- oder - 
Der gesamte UTF-8-codierte Tokenwert kann nicht in einen <see cref="T:System.DateTime" />-Wert analysiert werden.

- oder -

Der Wert des JSON-Tokens liegt in einem nicht unterstützten Format vor.</exception>
      <returns>Datum und Uhrzeit, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich analysiert werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDateTimeOffset">
      <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.DateTimeOffset" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">Der Wert des JSON-Tokens darf nicht als <see cref="T:System.DateTimeOffset" /> gelesen werden.

- oder - 
Der gesamte UTF-8-codierte Tokenwert kann nicht in einen <see cref="T:System.DateTimeOffset" />-Wert analysiert werden.

- oder -

Der Wert des JSON-Tokens liegt in einem nicht unterstützten Format vor.</exception>
      <returns>Offset von Datum und Uhrzeit, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich analysiert werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDecimal">
      <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Decimal" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <exception cref="T:System.FormatException">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Decimal.MinValue" /> oder größer als <see cref="F:System.Decimal.MaxValue" /> ist.</exception>
      <returns>Der in einen <see cref="T:System.Decimal" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetDouble">
      <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Double" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <exception cref="T:System.FormatException">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Double.MinValue" /> oder größer als <see cref="F:System.Double.MaxValue" /> ist.</exception>
      <returns>Der in einen <see cref="T:System.Double" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetGuid">
      <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Guid" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <exception cref="T:System.FormatException">Der Wert des JSON-Tokens liegt in einem für eine GUID nicht unterstützten Format vor.
        
- oder -

Der gesamte UTF-8-codierte Tokenwert kann nicht in einen <see cref="T:System.Guid" />-Wert analysiert werden.</exception>
      <returns>Der GUID-Wert, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich analysiert werden kann.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt16">
      <summary>Analysiert den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Int16" />.</summary>
      <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist keine <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Das numerische Format des JSON-Tokenwerts ist falsch (enthält beispielsweise einen Bruch oder ist in wissenschaftlicher Notation geschrieben).
          
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Int16.MinValue" /> oder größer als <see cref="F:System.Int16.MaxValue" /> ist.</exception>
      <returns>Der in einen <see cref="T:System.Int16" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt32">
      <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Int32" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <exception cref="T:System.FormatException">Der JSON-Tokenwert hat das falsche numerische Format. Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.
            
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Int32.MinValue" /> oder größer als <see cref="F:System.Int32.MaxValue" /> ist.</exception>
      <returns>Der in einen <see cref="T:System.Int32" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetInt64">
      <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Int64" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <exception cref="T:System.FormatException">Der JSON-Tokenwert hat das falsche numerische Format. Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.
            
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Int64.MinValue" /> oder größer als <see cref="F:System.Int64.MaxValue" /> ist.</exception>
      <returns>Der in einen <see cref="T:System.Int64" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSByte">
      <summary>Analysiert den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.SByte" />.</summary>
      <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist keine <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Das numerische Format des JSON-Tokenwerts ist falsch (enthält beispielsweise einen Bruch oder ist in wissenschaftlicher Notation geschrieben).
          
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.SByte.MinValue" /> oder größer als <see cref="F:System.SByte.MaxValue" /> ist.</exception>
      <returns>Der in einen <see cref="T:System.SByte" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetSingle">
      <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.Single" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <exception cref="T:System.FormatException">Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.Single.MinValue" /> oder größer als <see cref="F:System.Single.MaxValue" /> ist.</exception>
      <returns>Der in einen <see cref="T:System.Single" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetString">
      <summary>Liest den nächsten JSON-Tokenwert aus der Quelle (ohne Escapezeichen und als Zeichenfolge transcodiert).</summary>
      <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist keine Zeichenfolge (d. h. keine <see cref="F:System.Text.Json.JsonTokenType.String" />-, <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />- oder <see cref="F:System.Text.Json.JsonTokenType.Null" />-Enumeration).

- oder -

Die JSON-Zeichenfolge enthält ungültige UTF-8-Bytes oder ungültige UTF-16-Ersatzzeichen.</exception>
      <returns>Der in eine Zeichenfolge analysierte Tokenwert oder <see langword="null" />, wenn <see cref="P:System.Text.Json.Utf8JsonReader.TokenType" /> auf <see cref="F:System.Text.Json.JsonTokenType.Null" /> festgelegt ist.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt16">
      <summary>Analysiert den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.UInt16" />.</summary>
      <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist keine <see cref="F:System.Text.Json.JsonTokenType.Number" />.</exception>
      <exception cref="T:System.FormatException">Das numerische Format des JSON-Tokenwerts ist falsch (enthält beispielsweise einen Bruch oder ist in wissenschaftlicher Notation geschrieben).
          
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.UInt16.MinValue" /> oder größer als <see cref="F:System.UInt16.MaxValue" /> ist.</exception>
      <returns>Der in einen <see cref="T:System.UInt16" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt32">
      <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.UInt32" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <exception cref="T:System.FormatException">Der JSON-Tokenwert hat das falsche numerische Format. Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.

- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.UInt32.MinValue" /> oder größer als <see cref="F:System.UInt32.MaxValue" /> ist.</exception>
      <returns>Der in einen <see cref="T:System.UInt32" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.GetUInt64">
      <summary>Liest den nächsten JSON-Tokenwert aus der Quelle und analysiert ihn in einen <see cref="T:System.UInt64" />-Wert.</summary>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <exception cref="T:System.FormatException">Der JSON-Tokenwert hat das falsche numerische Format. Er enthält z.B. eine Dezimalzahl oder ist in wissenschaftlicher Schreibweise geschrieben.
            
- oder -

Der JSON-Tokenwert stellt eine Zahl dar, die kleiner als <see cref="F:System.UInt64.MinValue" /> oder größer als <see cref="F:System.UInt64.MaxValue" /> ist.</exception>
      <returns>Der in einen <see cref="T:System.UInt64" />-Wert analysierte UTF-8 codierte Tokenwert.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Read">
      <summary>Liest das nächste JSON-Token aus der Eingabequelle.</summary>
      <exception cref="T:System.Text.Json.JsonException">Ein gemäß JSON RFC ungültiges JSON-Token wurde festgestellt.
        
- oder -

Die aktuelle Tiefe übersteigt den rekursiven Grenzwert, der durch die maximale Tiefe festgelegt ist.</exception>
      <returns>
        <see langword="false" />, wenn das Token erfolgreich gelesen wurde, andernfalls <see langword="true" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.Skip">
      <summary>Überspringt die untergeordneten Elemente des aktuellen JSON-Tokens.</summary>
      <exception cref="T:System.InvalidOperationException">Dem Reader wurden Teildaten übergeben, und weitere Daten folgen (d.h., <see cref="P:System.Text.Json.Utf8JsonReader.IsFinalBlock" /> ist <see langword="false" />).</exception>
      <exception cref="T:System.Text.Json.JsonException">Beim Überspringen wurde ein gemäß JSON-RFC ungültiges JSON-Token gefunden.

- oder -

Die aktuelle Tiefe übersteigt den rekursiven Grenzwert, der durch die maximale Tiefe festgelegt ist.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetByte(System.Byte@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Byte" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Byte" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetBytesFromBase64(System.Byte[]@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle zu analysieren. Die Base64-codierte JSON-Zeichenfolge wird als Bytearray decodiert, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, ist die decodierte binäre Darstellung des Base64-Texts enthalten.</param>
      <exception cref="T:System.InvalidOperationException">Das JSON-Token ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte Tokenwert als gültiger Base64-Text codiert ist und erfolgreich in Bytes decodiert werden kann; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTime(System.DateTime@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.DateTime" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.DateTime" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDateTimeOffset(System.DateTimeOffset@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.DateTimeOffset" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.DateTimeOffset" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDecimal(System.Decimal@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Decimal" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Decimal" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetDouble(System.Double@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Double" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Double" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetGuid(System.Guid@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Guid" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException">Der Wert des JSON-Tokens ist kein <see cref="F:System.Text.Json.JsonTokenType.String" />.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Guid" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt16(System.Int16@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Int16" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Int16" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt32(System.Int32@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Int32" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Int32" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetInt64(System.Int64@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Int64" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Int64" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSByte(System.SByte@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.SByte" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.SByte" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetSingle(System.Single@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.Single" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.Single" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt16(System.UInt16@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.UInt16" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.UInt16" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt32(System.UInt32@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.UInt32" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.UInt32" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TryGetUInt64(System.UInt64@)">
      <summary>Es wird versucht, den aktuellen JSON-Tokenwert aus der Quelle als <see cref="T:System.UInt64" /> zu analysieren, und es wird ein Wert zurückgegeben, mit dem der Erfolg bzw. Misserfolg des Vorgangs angegeben wird.</summary>
      <param name="value">Wenn diese Methode zurückgegeben wird, enthält sie den analysierten Wert.</param>
      <exception cref="T:System.InvalidOperationException">Der JSON-Tokenwert ist kein <see cref="F:System.Text.Json.JsonTokenType.Number" />-Wert.</exception>
      <returns>
        <see langword="true" />, wenn der gesamte UTF-8-codierte Tokenwert erfolgreich in einen <see cref="T:System.UInt64" />-Wert analysiert werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.TrySkip">
      <summary>Versucht, die untergeordneten Elemente des aktuellen JSON-Tokens zu überspringen.</summary>
      <exception cref="T:System.Text.Json.JsonException">Beim Überspringen wurde ein gemäß JSON-RFC ungültiges JSON-Token gefunden.
          
- oder - 

Die aktuelle Tiefe übersteigt den rekursiven Grenzwert, der durch die maximale Tiefe festgelegt ist.</exception>
      <returns>
        <see langword="true" /> wenn genügend Daten vorhanden waren, um die untergeordneten Elemente erfolgreich zu überspringen; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Byte})">
      <summary>Vergleicht den UTF-8-codierten Text in einem schreibgeschützten Bytebereich mit dem JSON-Tokenwert ohne Escapezeichen in der Quelle und gibt einen Wert zurück, der angibt, ob eine Übereinstimmung besteht.</summary>
      <param name="utf8Text">Der UTF-8-codierte Text für den Vergleich.</param>
      <exception cref="T:System.InvalidOperationException">Das JSON-Token ist keine JSON-Zeichenfolge (also nicht <see cref="F:System.Text.Json.JsonTokenType.String" /> oder <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      <returns>
        <see langword="true" />, wenn der JSON-Tokenwert in der Quelle mit dem UTF-8-codierten Suchtext übereinstimmt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.ReadOnlySpan{System.Char})">
      <summary>Vergleicht den Text in einem Zeichenbereich mit dem JSON-Tokenwert ohne Escapezeichen in der Quelle und gibt einen Wert zurück, der angibt, ob eine Übereinstimmung besteht.</summary>
      <param name="text">Der Text, mit dem verglichen werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Das JSON-Token ist keine JSON-Zeichenfolge (also nicht <see cref="F:System.Text.Json.JsonTokenType.String" /> oder <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      <returns>
        <see langword="true" />, wenn der JSON-Tokenwert in der Quelle mit dem Suchtext übereinstimmt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonReader.ValueTextEquals(System.String)">
      <summary>Vergleicht den angegebenen Zeichenfolgentext mit dem JSON-Tokenwert ohne Escapezeichen in der Quelle und gibt einen Wert zurück, der angibt, ob eine Übereinstimmung besteht.</summary>
      <param name="text">Der Text, mit dem verglichen werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Das JSON-Token ist keine JSON-Zeichenfolge (also nicht <see cref="F:System.Text.Json.JsonTokenType.String" /> oder <see cref="F:System.Text.Json.JsonTokenType.PropertyName" />).</exception>
      <returns>
        <see langword="true" />, wenn der JSON-Tokenwert in der Quelle mit dem Suchtext übereinstimmt, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.BytesConsumed">
      <summary>Ruft die gesamte Anzahl von Bytes ab, die von dieser Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" /> bisher verbraucht wurden.</summary>
      <returns>Die bisher verbrauchte Gesamtanzahl von Bytes.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentDepth">
      <summary>Ruft die Tiefe des aktuellen Tokens ab.</summary>
      <returns>Die Tiefe des aktuellen Tokens.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.CurrentState">
      <summary>Ruft den aktuellen <see cref="T:System.Text.Json.Utf8JsonReader" />-Zustand ab, um ihn an einen <see cref="T:System.Text.Json.Utf8JsonReader" />-Konstruktor mit weiteren Daten zu übergeben.</summary>
      <returns>Der aktuelle Reader-Zustand.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.HasValueSequence">
      <summary>Ruft einen Wert an, der angibt, welche <c>Value</c>-Eigenschaft zum Abrufen des Tokenwerts zu verwenden ist.</summary>
      <returns>
        <see langword="true" /> , wenn <see cref="P:System.Text.Json.Utf8JsonReader.ValueSequence" /> verwendet werden soll, um den Tokenwert zu erhalten;, <see langword="false" /> Wenn <see cref="P:System.Text.Json.Utf8JsonReader.ValueSpan" /> stattdessen verwendet werden soll.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.IsFinalBlock">
      <summary>Ruft den Modus dieser Instanz von <see cref="T:System.Text.Json.Utf8JsonReader" /> ab, der angibt, ob die gesamten JSON-Daten übergeben wurden oder weitere folgen.</summary>
      <returns>
        <see langword="true" /> , wenn der Reader mit der Eingabe Spanne oder Sequenz erstellt wurde, die die gesamten JSON-Daten enthält, die verarbeitet werden sollen. <see langword="false" /> , wenn der Reader mit einer Eingabe Spanne oder Sequenz erstellt wurde, die möglicherweise partielle JSON-Daten mit weiteren Daten enthält, die befolgt werden sollen.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.Position">
      <summary>Ruft die aktuelle <see cref="T:System.SequencePosition" /> innerhalb des bereitgestellten UTF-8-codierten ReadOnlySequence&lt;Byte&gt; der Eingabe oder einen <see cref="T:System.SequencePosition" />-Standardwert ab, wenn die <see cref="T:System.Text.Json.Utf8JsonReader" />-Struktur mit einem ReadOnlySpan&lt;Byte&gt; erstellt wurde.</summary>
      <returns>Der aktuelle <see cref="T:System.SequencePosition" /> innerhalb des bereitgestellten UTF-8-codierten Eingabe-sequenzbyte &lt; &gt; oder ein Standardwert, <see cref="T:System.SequencePosition" /> Wenn die <see cref="T:System.Text.Json.Utf8JsonReader" /> Struktur mit einem Read-lyspan-Byte erstellt wurde &lt; &gt; .</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenStartIndex">
      <summary>Ruft den Index ab, an dem das zuletzt verarbeitete JSON-Token beginnt (innerhalb des angegebenen UTF-8-codierten Eingabetexts), wobei Leerraum übersprungen wird.</summary>
      <returns>Der Start Index des letzten verarbeiteten JSON-Tokens innerhalb des angegebenen UTF-8-codierten Eingabe Texts.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.TokenType">
      <summary>Ruft den Typ des zuletzt verarbeiteten JSON-Tokens im UTF-8-codierten JSON-Text ab.</summary>
      <returns>Der Typ des zuletzt verarbeiteten JSON-Tokens.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSequence">
      <summary>Ruft den Rohwert des zuletzt verarbeiteten Tokens als ReadOnlySequence&lt;byte&gt;-Slice der Eingangsnutzlast nur ab, wenn das Token in mehreren Segmenten enthalten ist.</summary>
      <returns>Eine schreibgeschützte Byte-Sequenz.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonReader.ValueSpan">
      <summary>Ruft den Rohwert des zuletzt verarbeiteten Tokens als ReadOnlySpan&lt;byte&gt;-Slice der Eingangsnutzlast ab, wenn das Token in ein einzelnes Segment passt oder wenn der Leser mit einer JSON-Nutzlast konstruiert wurde, die in einem ReadOnlySpan&lt;byte&gt; enthalten ist.</summary>
      <returns>Ein schreibgeschützter Bytes-Span.</returns>
    </member>
    <member name="T:System.Text.Json.Utf8JsonWriter">
      <summary>Bietet eine leistungsstarke API für das Schreiben von UTF-8-codiertem JSON-Text in Vorwärtsrichtung ohne Zwischenspeicherung.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.Buffers.IBufferWriter{System.Byte},System.Text.Json.JsonWriterOptions)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonWriter" />-Klasse unter Verwendung der angegebenen <see cref="T:System.Buffers.IBufferWriter`1" />, um die Ausgabe zu schreiben, und von Anpassungsoptionen.</summary>
      <param name="bufferWriter">Das Ziel für das Schreiben von JSON-Text.</param>
      <param name="options">Definiert das angepasste Verhalten des <see cref="T:System.Text.Json.Utf8JsonWriter" />. Standardmäßig wird minimierter JSON-Text (ohne zusätzliche Leerzeichen) geschrieben und überprüft, ob der geschriebene JSON-Text gemäß JSON RFC strukturell gültig ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bufferWriter" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.#ctor(System.IO.Stream,System.Text.Json.JsonWriterOptions)">
      <summary>Initialisiert eine neue Instanz der <see cref="T:System.Text.Json.Utf8JsonWriter" />-Klasse unter Verwendung des angegebenen Datenstroms, um die Ausgabe zu schreiben, und von Anpassungsoptionen.</summary>
      <param name="utf8Json">Das Ziel für das Schreiben von JSON-Text.</param>
      <param name="options">Definiert das angepasste Verhalten des <see cref="T:System.Text.Json.Utf8JsonWriter" />. Standardmäßig wird minimierter JSON-Text (ohne zusätzliche Leerzeichen) geschrieben und überprüft, ob der geschriebene JSON-Text gemäß JSON RFC strukturell gültig ist.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Dispose">
      <summary>Committet übrig gebliebenen JSON-Text, der noch nicht geleert wurde, und gibt alle Ressourcen frei, die von der aktuellen Instanz verwendet werden.</summary>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.DisposeAsync">
      <summary>Committet asynchron übrig gebliebenen JSON-Text, der noch nicht geleert wurde, und gibt alle Ressourcen frei, die von der aktuellen Instanz verwendet werden.</summary>
      <returns>Eine Aufgabe, die den asynchronen Löschvorgang darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Flush">
      <summary>Committet den bisher geschriebenen JSON-Text, sodass er für das Ausgabeziel sichtbar ist.</summary>
      <exception cref="T:System.ObjectDisposedException">Die Instanz wurde verworfen.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.FlushAsync(System.Threading.CancellationToken)">
      <summary>Committet asynchron den bisher geschriebenen JSON-Text, sodass er für das Ausgabeziel sichtbar ist.</summary>
      <param name="cancellationToken">Das Token zum Überwachen von Abbruchanforderungen. Der Standardwert ist <see cref="P:System.Threading.CancellationToken.None" />.</param>
      <exception cref="T:System.ObjectDisposedException">Die Instanz wurde verworfen.</exception>
      <returns>Eine Aufgabe, die den asynchronen Löschvorgang darstellt.</returns>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset">
      <summary>Setzt den internen Zustand dieser Instanz zurück, sodass sie wiederverwendet werden kann.</summary>
      <exception cref="T:System.ObjectDisposedException">Die Instanz wurde verworfen.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.Buffers.IBufferWriter{System.Byte})">
      <summary>Setzt den internen Zustand dieser Instanz zurück, sodass sie mit einer neuen Instanz von <see cref="T:System.Buffers.IBufferWriter`1" /> wiederverwendet werden kann.</summary>
      <param name="bufferWriter">Das Ziel für das Schreiben von JSON-Text.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="bufferWriter" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Die Instanz wurde verworfen.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.Reset(System.IO.Stream)">
      <summary>Setzt den internen Zustand dieser Instanz zurück, sodass sie mit einer neuen Instanz von <see cref="T:System.IO.Stream" /> wiederverwendet werden kann.</summary>
      <param name="utf8Json">Das Ziel für das Schreiben von JSON-Text.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="utf8Json" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ObjectDisposedException">Die Instanz wurde verworfen.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt den Eigenschaftennamen und unformatierten Byte-Wert (als Base64-codierte JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Name der zu schreibenden Eigenschaft.</param>
      <param name="bytes">Die Binärdaten, die als Base64-codierter Text geschrieben werden sollen.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt den Eigenschaftennamen und unformatierten Byte-Wert (als Base64-codierte JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="bytes">Die Binärdaten, die als Base64-codierter Text geschrieben werden sollen.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt den Eigenschaftennamen und unformatierten Byte-Wert (als Base64-codierte JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="bytes">Die Binärdaten, die als Base64-codierter Text geschrieben werden sollen.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64String(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und unformatierten Byte-Wert (als Base64-codierte JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Name der zu schreibenden Eigenschaft.</param>
      <param name="bytes">Die Binärdaten, die als Base64-codierter Text geschrieben werden sollen.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBase64StringValue(System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt den unformatierten Bytewert als Base64-codierte JSON-Zeichenfolge als Element eines JSON-Arrays.</summary>
      <param name="bytes">Die Binärdaten, die als Base64-codiertes JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden sollen.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Byte},System.Boolean)">
      <summary>Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Boolean" />-Wert (als JSON-Literal true oder false) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value">Der Wert, der als JSON-Literale " true " oder " false " als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.ReadOnlySpan{System.Char},System.Boolean)">
      <summary>Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Boolean" />-Wert (als JSON-Literal true oder false) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Literale " true " oder " false " als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.String,System.Boolean)">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Boolean" />-Wert (als JSON-Literal true oder false) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Literale " true " oder " false " als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBoolean(System.Text.Json.JsonEncodedText,System.Boolean)">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Boolean" />-Wert (als JSON-Literal true oder false) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Literale " true " oder " false " als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteBooleanValue(System.Boolean)">
      <summary>Schreibt einen <see cref="T:System.Boolean" />-Wert (als JSON-Literal true oder false) als ein Element eines JSON-Arrays.</summary>
      <param name="value">Der Wert, der als JSON-Literale " true " oder " false " als Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt einen UTF-8-Textwert als JSON-Kommentar.</summary>
      <param name="utf8Value">Der UTF-8-codierte Wert, der als JSON-Kommentar innerhalb von geschrieben werden soll <c> / *..* / </c>.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Wert ist zu groß.
        
- oder -

<paramref name="utf8Value" /> enthält ein Kommentar Trennzeichen (d <c>*/</c> . h.).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.ReadOnlySpan{System.Char})">
      <summary>Schreibt einen UTF-16-Textwert als JSON-Kommentar.</summary>
      <param name="value">Der UTF-16-codierte Wert, der als UTF-8-transcodierter JSON-Kommentar innerhalb von geschrieben werden soll <c> / *..* / </c>.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Wert ist zu groß.
        
- oder -

<paramref name="value" /> enthält ein Kommentar Trennzeichen (d <c>*/</c> . h.).</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteCommentValue(System.String)">
      <summary>Schreibt einen Zeichenfolgentextwert als JSON-Kommentar.</summary>
      <param name="value">Der UTF-16-codierte Wert, der als UTF-8-transcodierter JSON-Kommentar innerhalb von geschrieben werden soll <c> / *..* / </c>.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Wert ist zu groß.
        
- oder -

<paramref name="value" /> enthält ein Kommentar Trennzeichen (d <c>*/</c> . h.).</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="value" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndArray">
      <summary>Schreibt das Ende eines JSON-Arrays.</summary>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteEndObject">
      <summary>Schreibt das Ende eines JSON-Objekts.</summary>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und das JSON-Literal NULL als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.ReadOnlySpan{System.Char})">
      <summary>Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und das JSON-Literal NULL als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.String)">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und das JSON-Literal NULL als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNull(System.Text.Json.JsonEncodedText)">
      <summary>Schreibt den Eigenschaftennamen und das JSON-Literal null als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNullValue">
      <summary>Schreibt den JSON-literalen null als Element eines JSON-Arrays.</summary>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Decimal)">
      <summary>Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Double)">
      <summary>Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int32)">
      <summary>Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Int64)">
      <summary>Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.Single)">
      <summary>Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt32)">
      <summary>Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Byte},System.UInt64)">
      <summary>Schreibt einen als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Decimal)">
      <summary>Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Double)">
      <summary>Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int32)">
      <summary>Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Int64)">
      <summary>Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.Single)">
      <summary>Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt32)">
      <summary>Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.ReadOnlySpan{System.Char},System.UInt64)">
      <summary>Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Decimal)">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Double)">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int32)">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Int64)">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.Single)">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt32)">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.String,System.UInt64)">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Decimal)">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Double)">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Double" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int32)">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Int64)">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.Single)">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Single" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt32)">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumber(System.Text.Json.JsonEncodedText,System.UInt64)">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zahl als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Decimal)">
      <summary>Schreibt einen <see cref="T:System.Decimal" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</summary>
      <param name="value">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Double)">
      <summary>Schreibt einen <see cref="T:System.Double" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</summary>
      <param name="value">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int32)">
      <summary>Schreibt einen <see cref="T:System.Int32" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</summary>
      <param name="value">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Int64)">
      <summary>Schreibt einen <see cref="T:System.Int64" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</summary>
      <param name="value">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.Single)">
      <summary>Schreibt einen <see cref="T:System.Single" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</summary>
      <param name="value">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt32)">
      <summary>Schreibt einen <see cref="T:System.UInt32" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</summary>
      <param name="value">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteNumberValue(System.UInt64)">
      <summary>Schreibt einen <see cref="T:System.UInt64" />-Wert (als JSON-Zahl) als ein Element eines JSON-Arrays.</summary>
      <param name="value">Der Wert, der als JSON-Zahl als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt den UTF-8-Eigenschaftennamen (als JSON-Zeichenfolge) als ersten Teil des Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.ReadOnlySpan{System.Char})">
      <summary>Schreibt den Eigenschaftennamen (als JSON-Zeichenfolge) als ersten Teil des Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.String)">
      <summary>Schreibt den Eigenschaftennamen (als JSON-Zeichenfolge) als ersten Teil des Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="propertyName" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WritePropertyName(System.Text.Json.JsonEncodedText)">
      <summary>Schreibt den vorcodierten Eigenschaftennamen (als JSON-Zeichenfolge) als ersten Teil des Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray">
      <summary>Schreibt den Anfang eines JSON-Arrays.</summary>
      <exception cref="T:System.InvalidOperationException">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000.

- oder -

Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt den Anfang eines JSON-Arrays mit einem als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen als Schlüssel.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Arrays.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000.

- oder -
       
Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.ReadOnlySpan{System.Char})">
      <summary>Schreibt den Anfang eines JSON-Arrays mit einem als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen als Schlüssel.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Arrays, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000.

- oder -
       
Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.String)">
      <summary>Schreibt den Anfang eines JSON-Arrays mit einem als Zeichenfolge angegebenen Eigenschaftennamen als Schlüssel.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Arrays, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000.

- oder -
       
Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartArray(System.Text.Json.JsonEncodedText)">
      <summary>Schreibt den Anfang eines JSON-Arrays mit einem vorcodierten Eigenschaftennamen als Schlüssel.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Arrays, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.InvalidOperationException">Die Tiefe des JSON-Codes hat die maximale Tiefe 1.000 überschritten.
    
- oder -

Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject">
      <summary>Schreibt den Anfang eines JSON-Objekts.</summary>
      <exception cref="T:System.InvalidOperationException">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000.

- oder -

Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt den Anfang eines JSON-Objekts mit einem als schreibgeschützte Spanne von Bytes angegebenen Eigenschaftennamen als Schlüssel.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000. 

- oder -
       
Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.ReadOnlySpan{System.Char})">
      <summary>Schreibt den Anfang eines JSON-Objekts mit einem als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen als Schlüssel.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000. 

- oder -
       
Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.String)">
      <summary>Schreibt den Anfang eines JSON-Objekts mit einem als Zeichenfolge angegebenen Eigenschaftennamen als Schlüssel.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Die Tiefe des JSON-Codes überschreitet die maximale Tiefe 1.000. 

- oder -
       
Validierung ist aktiviert, und dieser Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStartObject(System.Text.Json.JsonEncodedText)">
      <summary>Schreibt den Anfang eines JSON-Objekts mit einem vorcodierten Eigenschaftennamen als Schlüssel.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <exception cref="T:System.InvalidOperationException">Die Tiefe des JSON-Codes hat die maximale Tiefe 1.000 überschritten.
          
- oder -

Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTime)">
      <summary>Schreibt einen UTF-8-Eigenschaftennamen und einen <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.DateTimeOffset)">
      <summary>Schreibt einen UTF-8-Eigenschaftennamen und einen <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Guid)">
      <summary>Schreibt einen UTF-8-Eigenschaftennamen und einen <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt einen UTF-8-Eigenschaftennamen und UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="utf8Value">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Char})">
      <summary>Schreibt einen UTF-8-Eigenschaftennamen und UTF-16-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.String)">
      <summary>Schreibt einen UTF-8-Eigenschaftennamen und Zeichenfolgentextwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Byte},System.Text.Json.JsonEncodedText)">
      <summary>Schreibt den UTF-8-Eigenschaftennamen und vorcodierten Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="utf8PropertyName">Der UTF-8-codierte Eigenschaftenname des zu schreibenden JSON-Objekts.</param>
      <param name="value">Der JSON-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und diese Methode würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTime)">
      <summary>Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.DateTimeOffset)">
      <summary>Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Guid)">
      <summary>Schreibt einen als schreibgeschützte Zeichenspanne angegebenen Eigenschaftennamen und einen <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt einen UTF-16-Eigenschaftennamen und UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="utf8Value">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>Schreibt einen UTF-16-Eigenschaftennamen und UTF-16-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.String)">
      <summary>Schreibt einen UTF-16-Eigenschaftennamen und Zeichenfolgentextwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.ReadOnlySpan{System.Char},System.Text.Json.JsonEncodedText)">
      <summary>Schreibt den Eigenschaftennamen und vorcodierten Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der JSON-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTime)">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.DateTimeOffset)">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Guid)">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="utf8Value">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.ReadOnlySpan{System.Char})">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen UTF-16-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.String)">
      <summary>Schreibt einen als Zeichenfolge angegebenen Eigenschaftennamen und einen Zeichenfolgentextwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der UTF-16-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der UTF-16-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname oder Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.String,System.Text.Json.JsonEncodedText)">
      <summary>Schreibt den Eigenschaftennamen und vorcodierten Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der JSON-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Eigenschaftenname ist zu lang.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
      <exception cref="T:System.ArgumentNullException">Der <paramref name="propertyName" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTime)">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.DateTimeOffset)">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Guid)">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und UTF-8-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="utf8Value">Der UTF-8-codierte Wert, der als JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.ReadOnlySpan{System.Char})">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.String)">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und Zeichenfolgen-Textwert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteString(System.Text.Json.JsonEncodedText,System.Text.Json.JsonEncodedText)">
      <summary>Schreibt den vorcodierten Eigenschaftennamen und vorcodierten Wert (als JSON-Zeichenfolge) als Teil eines Name-Wert-Paars eines JSON-Objekts.</summary>
      <param name="propertyName">Der JSON-codierte Eigenschaftenname des JSON-Objekts, das zu transcodieren und als UTF-8 zu schreiben ist.</param>
      <param name="value">Der JSON-codierte Wert, der als UTF-8-transcodierte JSON-Zeichenfolge als Teil des Name-Wert-Paars geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTime)">
      <summary>Schreibt einen <see cref="T:System.DateTime" />-Wert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</summary>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.DateTimeOffset)">
      <summary>Schreibt einen <see cref="T:System.DateTimeOffset" />-Wert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</summary>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Guid)">
      <summary>Schreibt einen <see cref="T:System.Guid" />-Wert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</summary>
      <param name="value">Der Wert, der als JSON-Zeichenfolge als ein Element eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Vorgang würde im Schreiben ungültiger JSON-Daten resultieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Byte})">
      <summary>Schreibt einen UTF-8-Textwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</summary>
      <param name="utf8Value">Der UTF-8-codierte Wert, der als JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.ReadOnlySpan{System.Char})">
      <summary>Schreibt einen UTF-16-Textwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</summary>
      <param name="value">Der UTF-16-codierte Wert, der als UTF-8-transcodiertes JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.String)">
      <summary>Schreibt einen Zeichenfolgentextwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</summary>
      <param name="value">Der UTF-16-codierte Wert, der als UTF-8-transcodiertes JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.ArgumentException">Der angegebene Wert ist zu groß.</exception>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="M:System.Text.Json.Utf8JsonWriter.WriteStringValue(System.Text.Json.JsonEncodedText)">
      <summary>Schreibt den vorcodierten Textwert (als JSON-Zeichenfolge) als ein Element eines JSON-Arrays.</summary>
      <param name="value">Der JSON-codierte Wert, der als UTF-8-transcodiertes JSON-Zeichenfolgenelement eines JSON-Arrays geschrieben werden soll.</param>
      <exception cref="T:System.InvalidOperationException">Validierung ist aktiviert, und der Schreibvorgang würde ungültige JSON-Daten produzieren.</exception>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesCommitted">
      <summary>Ruft die Gesamtzahl der Bytes ab, die bisher durch die aktuelle Instanz an die Ausgabe committet wurden.</summary>
      <returns>Die Gesamtanzahl der Bytes, die von bis zu an die Ausgabe committet wurden <see cref="T:System.Text.Json.Utf8JsonWriter" /> .</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.BytesPending">
      <summary>Ruft die Anzahl der bisher vom <see cref="T:System.Text.Json.Utf8JsonWriter" /> geschriebenen Bytes ab, die noch nicht in die Ausgabe geleert und committet wurden.</summary>
      <returns>Die Anzahl von Bytes, die bisher von der geschrieben wurden <see cref="T:System.Text.Json.Utf8JsonWriter" /> , die noch nicht in die Ausgabe geleert wurden und für die ein Commit ausgeführt wurde.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.CurrentDepth">
      <summary>Ruft die Tiefe des aktuellen Tokens ab.</summary>
      <returns>Die Tiefe des aktuellen Tokens.</returns>
    </member>
    <member name="P:System.Text.Json.Utf8JsonWriter.Options">
      <summary>Ruft das benutzerdefinierte Verhalten ab, wenn JSON-Daten mithilfe dieser Instanz geschrieben werden, die angibt, ob die Ausgabe beim Schreiben formatiert, die strukturelle JSON-Überprüfung übersprungen werden soll und welche Zeichen mit Escapezeichen versehen werden sollen.</summary>
      <returns>Das benutzerdefinierte Verhalten dieser Instanz des Writers zum Formatieren, validieren und Escapezeichen.</returns>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.CodeDom</name>
  </assembly>
  <members>
    <member name="T:Microsoft.CSharp.CSharpCodeProvider">
      <summary vsli:raw="Provides access to instances of the C# code generator and code compiler.">C# コード ジェネレーターと C# コード コンパイラのインスタンスへのアクセスを提供します。</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.CSharp.CSharpCodeProvider&quot; /&gt; class.">
        <see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.CSharp.CSharpCodeProvider&quot; /&gt; class by using the specified provider options.">指定したプロバイダー オプションを使用して、<see cref="T:Microsoft.CSharp.CSharpCodeProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="providerOptions" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; object that contains the provider options.">構成ファイルのプロバイダー オプションが格納された <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateCompiler">
      <summary vsli:raw="Gets an instance of the C# code compiler.">C# コード コンパイラのインスタンスを取得します。</summary>
      <returns vsli:raw="An instance of the C# &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; implementation.">C# <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 実装のインスタンス。</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.CreateGenerator">
      <summary vsli:raw="Gets an instance of the C# code generator.">C# コード ジェネレーターのインスタンスを取得します。</summary>
      <returns vsli:raw="An instance of the C# &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; implementation.">C# <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 実装のインスタンス。</returns>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">指定したテキスト ライターおよびコード ジェネレーターのオプションを使用して、指定したクラス メンバーのコードを生成します。</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to generate code for.">コード生成の対象となる <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">書き込み先の <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; to use when generating the code.">コードの生成時に使用する <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:Microsoft.CSharp.CSharpCodeProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type of object.">指定したオブジェクト型の <see cref="T:System.ComponentModel.TypeConverter" /> を取得します。</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">型コンバーターを取得する対象のオブジェクトの型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">指定した型の <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="P:Microsoft.CSharp.CSharpCodeProvider.FileExtension">
      <summary vsli:raw="Gets the file name extension to use when creating source code files.">ソース コード ファイルを作成するときに使用するファイル名拡張子を取得します。</summary>
      <returns vsli:raw="The file name extension to use for generated source code files.">生成されるソース コード ファイルで使用するファイル名の拡張子。</returns>
    </member>
    <member name="T:Microsoft.VisualBasic.VBCodeProvider">
      <summary vsli:raw="Provides access to instances of the Visual Basic code generator and code compiler.">Visual Basic コード ジェネレーターと Visual Basic コード コンパイラのインスタンスへのアクセスを提供します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.VisualBasic.VBCodeProvider&quot; /&gt; class.">
        <see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:Microsoft.VisualBasic.VBCodeProvider&quot; /&gt; class by using the specified provider options.">指定したプロバイダー オプションを使用して、<see cref="T:Microsoft.VisualBasic.VBCodeProvider" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="providerOptions" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.IDictionary`2&quot; /&gt; object that contains the provider options.">構成ファイルのプロバイダー オプションが格納された <see cref="T:System.Collections.Generic.IDictionary`2" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateCompiler">
      <summary vsli:raw="Gets an instance of the Visual Basic code compiler.">Visual Basic コード コンパイラのインスタンスを取得します。</summary>
      <returns vsli:raw="An instance of the Visual Basic &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; implementation.">Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> 実装のインスタンス。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.CreateGenerator">
      <summary vsli:raw="Gets an instance of the Visual Basic code generator.">Visual Basic コード ジェネレーターのインスタンスを取得します。</summary>
      <returns vsli:raw="An instance of the Visual Basic &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; implementation.">Visual Basic <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> 実装のインスタンス。</returns>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">指定したテキスト ライターおよびコード ジェネレーターのオプションを使用して、指定したクラス メンバーのコードを生成します。</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to generate code for.">コード生成の対象となる <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to write to.">書き込み先の <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; to use when generating the code.">コードの生成時に使用する <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:Microsoft.VisualBasic.VBCodeProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type of object.">指定したオブジェクト型の <see cref="T:System.ComponentModel.TypeConverter" /> を取得します。</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">型コンバーターを取得する対象のオブジェクトの型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type.">指定した型の <see cref="T:System.ComponentModel.TypeConverter" />。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.FileExtension">
      <summary vsli:raw="Gets the file name extension to use when creating source code files.">ソース コード ファイルを作成するときに使用するファイル名拡張子を取得します。</summary>
      <returns vsli:raw="The file name extension to use for generated source code files.">生成されるソース コード ファイルで使用するファイル名の拡張子。</returns>
    </member>
    <member name="P:Microsoft.VisualBasic.VBCodeProvider.LanguageOptions">
      <summary vsli:raw="Gets a language features identifier.">言語機能識別子を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.LanguageOptions&quot; /&gt; that indicates special features of the language.">言語の特殊な機能を示す <see cref="T:System.CodeDom.Compiler.LanguageOptions" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeArgumentReferenceExpression">
      <summary vsli:raw="Represents a reference to the value of an argument passed to a method.">メソッドに渡される引数の値への参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArgumentReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; class using the specified parameter name.">パラメーター名を指定して、<see cref="T:System.CodeDom.CodeArgumentReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="parameterName" vsli:raw="The name of the parameter to reference.">参照するパラメーターの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeArgumentReferenceExpression.ParameterName">
      <summary vsli:raw="Gets or sets the name of the parameter this expression references.">この式が参照するパラメーターの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the parameter to reference.">参照するパラメーターの名前。</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayCreateExpression">
      <summary vsli:raw="Represents an expression that creates an array.">配列を作成する式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and code expression indicating the number of indexes for the array.">配列のデータ型、および配列のインデックス数を示すコード式を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; indicating the data type of the array to create.">作成する配列のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">作成する配列のインデックスの数を示す式。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and initialization expressions.">配列のデータ型と初期化式を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the array to create.">作成する配列のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">配列を初期化するために使用する式の配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and number of indexes for the array.">配列のデータ型と配列のインデックス数を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; indicating the data type of the array to create.">作成する配列のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">作成する配列のインデックスの数。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and code expression indicating the number of indexes for the array.">配列のデータ型名、および配列のインデックス数を示すコード式を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">作成する配列のデータ型の名前。</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">作成する配列のインデックスの数を示す式。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and initializers.">配列のデータ型名と初期化子を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">作成する配列のデータ型の名前。</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">配列を初期化するために使用する式の配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type name and number of indexes for the array.">配列のデータ型名と配列のインデックス数を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType" vsli:raw="The name of the data type of the array to create.">作成する配列のデータ型の名前。</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">作成する配列のインデックスの数。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and code expression indicating the number of indexes for the array.">配列のデータ型、および配列のインデックス数を示すコード式を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">作成する配列のデータ型。</param>
      <param name="size" vsli:raw="An expression that indicates the number of indexes of the array to create.">作成する配列のインデックスの数を示す式。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and initializers.">配列のデータ型と初期化子を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">作成する配列のデータ型。</param>
      <param name="initializers" vsli:raw="An array of expressions to use to initialize the array.">配列を初期化するために使用する式の配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeArrayCreateExpression.#ctor(System.Type,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; class using the specified array data type and number of indexes for the array.">配列のデータ型と配列のインデックス数を指定して、<see cref="T:System.CodeDom.CodeArrayCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType" vsli:raw="The data type of the array to create.">作成する配列のデータ型。</param>
      <param name="size" vsli:raw="The number of indexes of the array to create.">作成する配列のインデックスの数。</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.CreateType">
      <summary vsli:raw="Gets or sets the type of array to create.">作成する配列の型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array.">配列の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Initializers">
      <summary vsli:raw="Gets the initializers with which to initialize the array.">配列を初期化するために使用する初期化子を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the initialization values.">初期値を示す <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.Size">
      <summary vsli:raw="Gets or sets the number of indexes in the array.">配列のインデックス数を取得または設定します。</summary>
      <returns vsli:raw="The number of indexes in the array.">配列のインデックス数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayCreateExpression.SizeExpression">
      <summary vsli:raw="Gets or sets the expression that indicates the size of the array.">配列のサイズを示す式を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the size of the array.">配列のサイズを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeArrayIndexerExpression">
      <summary vsli:raw="Represents a reference to an index of an array.">配列のインデックスへの参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeArrayIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; class using the specified target object and indexes.">対象オブジェクトとインデックスを指定して、<see cref="T:System.CodeDom.CodeArrayIndexerExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the array the indexer targets.">インデクサーの対象である配列を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="indices" vsli:raw="The index or indexes to reference.">参照する 1 つ以上のインデックス。</param>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.Indices">
      <summary vsli:raw="Gets or sets the index or indexes of the indexer expression.">インデクサー式の 1 つ以上のインデックスを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the index or indexes of the indexer expression.">インデクサー式の 1 つ以上のインデックスを示す <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeArrayIndexerExpression.TargetObject">
      <summary vsli:raw="Gets or sets the target object of the array indexer.">この配列インデクサーの対象オブジェクトを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the array being indexed.">インデックス付け対象の配列を表す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAssignStatement">
      <summary vsli:raw="Represents a simple assignment statement.">単純な代入ステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeAssignStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAssignStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; class using the specified expressions.">式を指定して、<see cref="T:System.CodeDom.CodeAssignStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="left" vsli:raw="The variable to assign to.">代入先の変数。</param>
      <param name="right" vsli:raw="The value to assign.">代入する値。</param>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Left">
      <summary vsli:raw="Gets or sets the expression representing the object or reference to assign to.">代入先のオブジェクトや参照を表す式を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object or reference to assign to.">代入先のオブジェクトや参照を示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAssignStatement.Right">
      <summary vsli:raw="Gets or sets the expression representing the object or reference to assign.">代入するオブジェクトや参照を表す式を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object or reference to assign.">代入するオブジェクトや式を示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttachEventStatement">
      <summary vsli:raw="Represents a statement that attaches an event-handler delegate to an event.">イベント ハンドラーのデリゲートをイベントに結び付けるステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeAttachEventStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class using the specified event and delegate.">イベントとデリゲートを指定して、<see cref="T:System.CodeDom.CodeAttachEventStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="eventRef" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to attach an event handler to.">イベント ハンドラーを結び付けるイベントを示す <see cref="T:System.CodeDom.CodeEventReferenceExpression" />。</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler.">新しいイベント ハンドラーを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttachEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; class using the specified object containing the event, event name, and event-handler delegate.">イベント、イベント名、およびイベント ハンドラー デリゲートを格納しているオブジェクトを指定して、<see cref="T:System.CodeDom.CodeAttachEventStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">イベントを格納するオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="eventName" vsli:raw="The name of the event to attach an event handler to.">イベント ハンドラーを結び付けるイベントの名前。</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler.">新しいイベント ハンドラーを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Event">
      <summary vsli:raw="Gets or sets the event to attach an event-handler delegate to.">イベント ハンドラー デリゲートを結び付けるイベントを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to attach an event handler to.">イベント ハンドラーを結び付けるイベントを示す <see cref="T:System.CodeDom.CodeEventReferenceExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttachEventStatement.Listener">
      <summary vsli:raw="Gets or sets the new event-handler delegate to attach to the event.">イベントに結び付ける新しいイベント ハンドラーのデリゲートを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the new event handler to attach.">結び付ける新しいイベント ハンドラーを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgument">
      <summary vsli:raw="Represents an argument used in a metadata attribute declaration.">メタデータ属性宣言で使用する引数を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class using the specified value.">指定した値を使用して、<see cref="T:System.CodeDom.CodeAttributeArgument" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the value of the argument.">引数の値を表す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgument.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; class using the specified name and value.">名前と値を指定して、<see cref="T:System.CodeDom.CodeAttributeArgument" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the attribute property the argument applies to.">引数が適用される属性プロパティの名前。</param>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the value of the argument.">引数の値を表す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Name">
      <summary vsli:raw="Gets or sets the name of the attribute.">属性の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the attribute property the argument is for.">引数が適用される属性プロパティの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgument.Value">
      <summary vsli:raw="Gets or sets the value for the attribute argument.">属性引数の値を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the value for the attribute argument.">属性引数の値を示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeArgumentCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeAttributeArgument" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; objects with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.#ctor(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; class containing the elements of the specified source collection.">指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Add(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to the collection.">指定した <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to add.">追加する <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクト。</param>
      <returns vsli:raw="The index at which the new element was inserted.">新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; array to the end of the collection.">指定した <see cref="T:System.CodeDom.CodeAttributeArgument" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeAttributeArgument" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.AddRange(System.CodeDom.CodeAttributeArgumentCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; object to the end of the collection.">別の <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> オブジェクトの内容をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Contains(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object.">指定した <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to locate in the collection.">コレクション内で検索する <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.CopyTo(System.CodeDom.CodeAttributeArgument[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">配列先が多次元です。  
  
- または - 
<see cref="T:System.CodeDom.CodeAttributeArgumentCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.IndexOf(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object in the collection, if it exists in the collection.">指定した <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to locate in the collection.">コレクション内で検索する <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクト。</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Insert(System.Int32,System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object into the collection at the specified index.">このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトを挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to insert.">挿入する <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeArgumentCollection.Remove(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object from the collection.">指定した <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object to remove from the collection.">コレクションから削除する <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="P:System.CodeDom.CodeAttributeArgumentCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; object at the specified index in the collection.">コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeAttributeArgument" /> オブジェクトを取得または設定します。</summary>
      <param name="index" vsli:raw="The index of the collection to access.">アクセスするコレクションのインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; at each valid index.">有効な各インデックスにある <see cref="T:System.CodeDom.CodeAttributeArgument" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclaration">
      <summary vsli:raw="Represents an attribute declaration.">属性宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified code type reference.">指定したコードの型参照を使用して、<see cref="T:System.CodeDom.CodeAttributeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the attribute.">属性を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified code type reference and arguments.">コード型参照と引数を指定して、<see cref="T:System.CodeDom.CodeAttributeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the attribute.">属性を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="arguments" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the arguments for the attribute.">属性の引数を含む <see cref="T:System.CodeDom.CodeAttributeArgument" /> 型の配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified name.">指定された名前を使用して、<see cref="T:System.CodeDom.CodeAttributeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the attribute.">属性の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclaration.#ctor(System.String,System.CodeDom.CodeAttributeArgument[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; class using the specified name and arguments.">名前と引数を指定して、<see cref="T:System.CodeDom.CodeAttributeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the attribute.">属性の名前。</param>
      <param name="arguments" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgument&quot; /&gt; that contains the arguments for the attribute.">属性の引数を含む <see cref="T:System.CodeDom.CodeAttributeArgument" /> 型の配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Arguments">
      <summary vsli:raw="Gets the arguments for the attribute.">属性の引数を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeArgumentCollection&quot; /&gt; that contains the arguments for the attribute.">属性の引数を格納する <see cref="T:System.CodeDom.CodeAttributeArgumentCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.AttributeType">
      <summary vsli:raw="Gets the code type reference for the code attribute declaration.">コード属性宣言のコード型参照を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that identifies the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> を示す <see cref="T:System.CodeDom.CodeAttributeDeclaration" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclaration.Name">
      <summary vsli:raw="Gets or sets the name of the attribute being declared.">宣言する属性の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the attribute.">属性の名前。</returns>
    </member>
    <member name="T:System.CodeDom.CodeAttributeDeclarationCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclaration[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; objects with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.#ctor(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; class containing the elements of the specified source collection.">指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Add(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object with the specified value to the collection.">指定した値で、<see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to add.">追加する <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクト。</param>
      <returns vsli:raw="The index at which the new element was inserted.">新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclaration[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; array to the end of the collection.">指定した <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.AddRange(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; object to the end of the collection.">別の <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> オブジェクトの内容をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Contains(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Gets or sets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object.">指定した <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得または設定します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to locate.">検索する <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.CopyTo(System.CodeDom.CodeAttributeDeclaration[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">配列先が多次元です。  
  
- または - 
<see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.IndexOf(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object in the collection, if it exists in the collection.">指定した <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to locate in the collection.">コレクション内で検索する <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクト。</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object into the collection at the specified index.">このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトを挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to insert.">挿入する <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.CodeAttributeDeclarationCollection.Remove(System.CodeDom.CodeAttributeDeclaration)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object from the collection.">指定した <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object to remove from the collection.">コレクションから削除する <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="P:System.CodeDom.CodeAttributeDeclarationCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; object at the specified index.">指定したインデックスの位置にある <see cref="T:System.CodeDom.CodeAttributeDeclaration" /> オブジェクトを取得または設定します。</summary>
      <param name="index" vsli:raw="The index of the collection to access.">アクセスするコレクションのインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclaration&quot; /&gt; at each valid index.">有効な各インデックスにある <see cref="T:System.CodeDom.CodeAttributeDeclaration" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeBaseReferenceExpression">
      <summary vsli:raw="Represents a reference to the base class.">基本クラスの参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBaseReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBaseReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeBaseReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorExpression">
      <summary vsli:raw="Represents an expression that consists of a binary operation between two expressions.">2 つの式の間の二項演算から構成される式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeBinaryOperatorExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeBinaryOperatorType,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; class using the specified parameters.">指定されたパラメーターを使用して、<see cref="T:System.CodeDom.CodeBinaryOperatorExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="left" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; on the left of the operator.">演算子の左辺にある <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="op" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorType&quot; /&gt; indicating the type of operator.">演算子の種類を示す <see cref="T:System.CodeDom.CodeBinaryOperatorType" />。</param>
      <param name="right" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; on the right of the operator.">演算子の右辺にある <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Left">
      <summary vsli:raw="Gets or sets the code expression on the left of the operator.">演算子の左辺にあるコード式を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the left operand.">左オペランドを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Operator">
      <summary vsli:raw="Gets or sets the operator in the binary operator expression.">二項演算式の演算子を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorType&quot; /&gt; that indicates the type of operator in the expression.">式内の演算子の種類を示す <see cref="T:System.CodeDom.CodeBinaryOperatorType" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeBinaryOperatorExpression.Right">
      <summary vsli:raw="Gets or sets the code expression on the right of the operator.">演算子の右辺にあるコード式を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the right operand.">右オペランドを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeBinaryOperatorType">
      <summary vsli:raw="Defines identifiers for supported binary operators.">サポートする二項演算子の識別子を定義します。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Add">
      <summary vsli:raw="Addition operator.">加算演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Assign">
      <summary vsli:raw="Assignment operator.">代入演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseAnd">
      <summary vsli:raw="Bitwise and operator.">ビットごとの AND 演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BitwiseOr">
      <summary vsli:raw="Bitwise or operator.">ビットごとの OR 演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanAnd">
      <summary vsli:raw="Boolean and operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.">ブール代数の AND 演算子。 これはショートサーキット演算子を表します。 ショートサーキット演算子は、正しい値を返すために必要な式だけを評価します。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.BooleanOr">
      <summary vsli:raw="Boolean or operator. This represents a short circuiting operator. A short circuiting operator will evaluate only as many expressions as necessary before returning a correct value.">ブール代数の OR 演算子。 これはショートサーキット演算子を表します。 ショートサーキット演算子は、正しい値を返すために必要な式だけを評価します。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Divide">
      <summary vsli:raw="Division operator.">除算演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThan">
      <summary vsli:raw="Greater than operator.">大なり演算子です。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.GreaterThanOrEqual">
      <summary vsli:raw="Greater than or equal operator.">以上演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityEquality">
      <summary vsli:raw="Identity equal operator.">ID 等値演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.IdentityInequality">
      <summary vsli:raw="Identity not equal operator.">ID 不等演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThan">
      <summary vsli:raw="Less than operator.">小なり演算子です。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.LessThanOrEqual">
      <summary vsli:raw="Less than or equal operator.">以下演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Modulus">
      <summary vsli:raw="Modulus operator.">剰余演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Multiply">
      <summary vsli:raw="Multiplication operator.">乗算演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.Subtract">
      <summary vsli:raw="Subtraction operator.">減算演算子。</summary>
    </member>
    <member name="F:System.CodeDom.CodeBinaryOperatorType.ValueEquality">
      <summary vsli:raw="Value equal operator.">等値演算子。</summary>
    </member>
    <member name="T:System.CodeDom.CodeCastExpression">
      <summary vsli:raw="Represents an expression cast to a data type or interface.">データ型またはインターフェイスにキャストする式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeCastExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">キャスト先の型と式を指定して、<see cref="T:System.CodeDom.CodeCastExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the destination type of the cast.">キャスト先の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">キャストする <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">キャスト先の型と式を指定して、<see cref="T:System.CodeDom.CodeCastExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetType" vsli:raw="The name of the destination type of the cast.">キャスト先の型の名前。</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">キャストする <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeCastExpression.#ctor(System.Type,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; class using the specified destination type and expression.">キャスト先の型と式を指定して、<see cref="T:System.CodeDom.CodeCastExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetType" vsli:raw="The destination data type of the cast.">キャスト先のデータ型。</param>
      <param name="expression" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to cast.">キャストする <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.Expression">
      <summary vsli:raw="Gets or sets the expression to cast.">キャストする式を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the code to cast.">キャストするコードを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCastExpression.TargetType">
      <summary vsli:raw="Gets or sets the destination type of the cast.">キャスト先の型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the destination type to cast to.">キャスト先の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClause">
      <summary vsli:raw="Represents a &lt;see langword=&quot;catch&quot; /&gt; exception block of a &lt;see langword=&quot;try/catch&quot; /&gt; statement.">
        <see langword="catch" /> ステートメントの <see langword="try/catch" /> 例外ブロックを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeCatchClause" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception.">例外のローカル変数名を指定して、<see cref="T:System.CodeDom.CodeCatchClause" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">例外の catch 句で宣言されたローカル変数の名前。 これは省略可能です。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception and exception type.">例外のローカル変数名と例外の種類を指定して、<see cref="T:System.CodeDom.CodeCatchClause" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">例外の catch 句で宣言されたローカル変数の名前。 これは省略可能です。</param>
      <param name="catchExceptionType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of exception to catch.">キャッチする例外の種類を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClause.#ctor(System.String,System.CodeDom.CodeTypeReference,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; class using the specified local variable name for the exception, exception type and statement collection.">例外のローカル変数名、例外の種類、およびステートメント コレクションを指定して、<see cref="T:System.CodeDom.CodeCatchClause" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="localName" vsli:raw="The name of the local variable declared in the catch clause for the exception. This is optional.">例外の catch 句で宣言されたローカル変数の名前。 これは省略可能です。</param>
      <param name="catchExceptionType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of exception to catch.">キャッチする例外の種類を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="statements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that represent the contents of the catch block.">catch ブロックの内容を表す <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトの配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.CatchExceptionType">
      <summary vsli:raw="Gets or sets the type of the exception to handle with the catch block.">catch ブロックで処理される例外の型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the exception to handle.">処理する例外の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.LocalName">
      <summary vsli:raw="Gets or sets the variable name of the exception that the &lt;see langword=&quot;catch&quot; /&gt; clause handles.">
        <see langword="catch" /> 句で処理する例外の変数名を取得または設定します。</summary>
      <returns vsli:raw="The name for the exception variable that the &lt;see langword=&quot;catch&quot; /&gt; clause handles.">
        <see langword="catch" /> 句で処理する例外変数の名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCatchClause.Statements">
      <summary vsli:raw="Gets the statements within the catch block.">catch ブロック内で、ステートメントを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements within the catch block.">catch ブロック内のステートメントが格納される <see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCatchClauseCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeCatchClause" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.#ctor(System.CodeDom.CodeCatchClauseCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; class containing the elements of the specified source collection.">指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeCatchClauseCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Add(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to the collection.">指定した <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to add.">追加する <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクト。</param>
      <returns vsli:raw="The index at which the new element was inserted.">新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; array to the end of the collection.">指定した <see cref="T:System.CodeDom.CodeCatchClause" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeCatchClause" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.AddRange(System.CodeDom.CodeCatchClauseCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; object to the end of the collection.">別の <see cref="T:System.CodeDom.CodeCatchClauseCollection" /> オブジェクトの内容をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeCatchClauseCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Contains(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object.">指定した <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to locate in the collection.">コレクション内で検索する <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.CopyTo(System.CodeDom.CodeCatchClause[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">配列先が多次元です。  
  
- または - 
<see cref="T:System.CodeDom.CodeCatchClauseCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.IndexOf(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object in the collection, if it exists in the collection.">指定した <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to locate in the collection.">コレクション内で検索する <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクト。</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Insert(System.Int32,System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object into the collection at the specified index.">このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトを挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to insert.">挿入する <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.CodeCatchClauseCollection.Remove(System.CodeDom.CodeCatchClause)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object from the collection.">指定した <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object to remove from the collection.">コレクションから削除する <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="P:System.CodeDom.CodeCatchClauseCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object at the specified index in the collection.">コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトを取得または設定します。</summary>
      <param name="index" vsli:raw="The index of the collection to access.">アクセスするコレクションのインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; object at each valid index.">有効な各インデックスにある <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクト。</returns>
    </member>
    <member name="T:System.CodeDom.CodeChecksumPragma">
      <summary vsli:raw="Represents a code checksum pragma code entity.">コード チェックサムのプラグマ コード エンティティの表現。</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeChecksumPragma&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeChecksumPragma" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeChecksumPragma.#ctor(System.String,System.Guid,System.Byte[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeChecksumPragma&quot; /&gt; class using a file name, a GUID representing the checksum algorithm, and a byte stream representing the checksum data.">ファイル名、チェックサム アルゴリズムを表す GUID、およびチェックサム データを表すバイト ストリームを使用して、<see cref="T:System.CodeDom.CodeChecksumPragma" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName" vsli:raw="The path to the checksum file.">チェックサム ファイルへのパス。</param>
      <param name="checksumAlgorithmId" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that identifies the checksum algorithm to use.">使用するチェックサム アルゴリズムを識別する <see cref="T:System.Guid" />。</param>
      <param name="checksumData" vsli:raw="A byte array that contains the checksum data.">チェックサム データを格納するバイト配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumAlgorithmId">
      <summary vsli:raw="Gets or sets a GUID that identifies the checksum algorithm to use.">使用するチェックサム アルゴリズムを識別する GUID を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; that identifies the checksum algorithm to use.">使用するチェックサム アルゴリズムを識別する <see cref="T:System.Guid" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.ChecksumData">
      <summary vsli:raw="Gets or sets the value of the data for the checksum calculation.">チェックサムの計算に使用するデータの値を取得または設定します。</summary>
      <returns vsli:raw="A byte array that contains the data for the checksum calculation.">チェックサムの計算に使用するデータを格納するバイト配列。</returns>
    </member>
    <member name="P:System.CodeDom.CodeChecksumPragma.FileName">
      <summary vsli:raw="Gets or sets the path to the checksum file.">チェックサム ファイルへのパスを取得または設定します。</summary>
      <returns vsli:raw="The path to the checksum file.">チェックサム ファイルへのパス。</returns>
    </member>
    <member name="T:System.CodeDom.CodeComment">
      <summary vsli:raw="Represents a comment.">コメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeComment" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class with the specified text as contents.">内容としてテキストを指定して、<see cref="T:System.CodeDom.CodeComment" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text" vsli:raw="The contents of the comment.">コメントの内容。</param>
    </member>
    <member name="M:System.CodeDom.CodeComment.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; class using the specified text and documentation comment flag.">テキストとドキュメント コメント フラグを指定して、<see cref="T:System.CodeDom.CodeComment" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text" vsli:raw="The contents of the comment.">コメントの内容。</param>
      <param name="docComment" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コメントがドキュメント コメントの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeComment.DocComment">
      <summary vsli:raw="Gets or sets a value that indicates whether the comment is a documentation comment.">コメントがドキュメント コメントかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コメントがドキュメント コメントの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeComment.Text">
      <summary vsli:raw="Gets or sets the text of the comment.">コメントのテキストを取得または設定します。</summary>
      <returns vsli:raw="A string containing the comment text.">コメント テキストを含む文字列。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatement">
      <summary vsli:raw="Represents a statement consisting of a single comment.">単一のコメントから成るステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeCommentStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.CodeDom.CodeComment)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified comment.">コメントを指定して、<see cref="T:System.CodeDom.CodeCommentStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="comment" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; that indicates the comment.">コメントを示す <see cref="T:System.CodeDom.CodeComment" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified text as contents.">内容としてテキストを指定して、<see cref="T:System.CodeDom.CodeCommentStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text" vsli:raw="The contents of the comment.">コメントの内容。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatement.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; class using the specified text and documentation comment flag.">テキストとドキュメント コメント フラグを指定して、<see cref="T:System.CodeDom.CodeCommentStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text" vsli:raw="The contents of the comment.">コメントの内容。</param>
      <param name="docComment" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the comment is a documentation comment; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コメントがドキュメント コメントの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatement.Comment">
      <summary vsli:raw="Gets or sets the contents of the comment.">コメントの内容を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; that indicates the comment.">コメントを示す <see cref="T:System.CodeDom.CodeComment" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCommentStatementCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeCommentStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; objects with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.#ctor(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; class containing the elements of the specified source collection.">指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeCommentStatementCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Add(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to the collection.">指定した <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to add.">追加する <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクト。</param>
      <returns vsli:raw="The index at which the new element was inserted.">新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatement[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; array to the end of the collection.">指定した <see cref="T:System.CodeDom.CodeCommentStatement" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeCommentStatement" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.AddRange(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; object to the end of the collection.">別の <see cref="T:System.CodeDom.CodeCommentStatementCollection" /> オブジェクトの内容をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeCommentStatementCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Contains(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object.">指定した <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; to search for in the collection.">コレクション内で検索される <see cref="T:System.CodeDom.CodeCommentStatement" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.CopyTo(System.CodeDom.CodeCommentStatement[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; beginning at the specified index.">指定した 1 次元の <see cref="T:System.Array" /> にコレクション オブジェクトをコピーします。コピー操作は、指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">配列先が多次元です。  
  
- または - 
<see cref="T:System.CodeDom.CodeCommentStatementCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.IndexOf(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object in the collection, if it exists in the collection.">指定した <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to locate.">検索する <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクト。</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Insert(System.Int32,System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Inserts a &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object into the collection at the specified index.">コレクション内の指定したインデックス位置に、<see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトを挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index where the item should be inserted.">項目を挿入する位置の 0 から始まるインデックス番号。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to insert.">挿入する <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.CodeCommentStatementCollection.Remove(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object from the collection.">指定した <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object to remove from the collection.">コレクションから削除する <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="P:System.CodeDom.CodeCommentStatementCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object at the specified index in the collection.">コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクトを取得または設定します。</summary>
      <param name="index" vsli:raw="The index of the collection to access.">アクセスするコレクションのインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatement&quot; /&gt; object at each valid index.">有効な各インデックスにある <see cref="T:System.CodeDom.CodeCommentStatement" /> オブジェクト。</returns>
    </member>
    <member name="T:System.CodeDom.CodeCompileUnit">
      <summary vsli:raw="Provides a container for a CodeDOM program graph.">CodeDOM プログラム グラフ用のコンテナーを提供します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeCompileUnit.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeCompileUnit" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.AssemblyCustomAttributes">
      <summary vsli:raw="Gets a collection of custom attributes for the generated assembly.">生成されるアセンブリのカスタム属性のコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes for the generated assembly.">生成されるアセンブリのカスタム属性を示す <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.EndDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">終了ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">終了ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.Namespaces">
      <summary vsli:raw="Gets the collection of namespaces.">名前空間のコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; that indicates the namespaces that the compile unit uses.">コンパイル単位で使用される名前空間を示す <see cref="T:System.CodeDom.CodeNamespaceCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.ReferencedAssemblies">
      <summary vsli:raw="Gets the referenced assemblies.">参照アセンブリを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.StringCollection&quot; /&gt; that contains the file names of the referenced assemblies.">参照されるアセンブリのファイル名を格納した <see cref="T:System.Collections.Specialized.StringCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeCompileUnit.StartDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">開始ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">開始ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクト。</returns>
    </member>
    <member name="T:System.CodeDom.CodeConditionStatement">
      <summary vsli:raw="Represents a conditional branch statement, typically represented as an &lt;see langword=&quot;if&quot; /&gt; statement.">通常は <see langword="if" /> ステートメントとして表される、条件分岐ステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeConditionStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class using the specified condition and statements.">条件とステートメントを指定して、<see cref="T:System.CodeDom.CodeConditionStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="condition" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to evaluate.">評価する式を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="trueStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;true&quot; /&gt;.">条件が <see langword="true" /> の場合に実行されるステートメントを格納している、<see cref="T:System.CodeDom.CodeStatement" /> 型の配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeConditionStatement.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeStatement[],System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConditionStatement&quot; /&gt; class using the specified condition and statements.">条件とステートメントを指定して、<see cref="T:System.CodeDom.CodeConditionStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="condition" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the condition to evaluate.">評価する条件を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="trueStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;true&quot; /&gt;.">条件が <see langword="true" /> の場合に実行されるステートメントを格納している、<see cref="T:System.CodeDom.CodeStatement" /> 型の配列。</param>
      <param name="falseStatements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements to execute if the condition is &lt;see langword=&quot;false&quot; /&gt;.">条件が <see langword="false" /> の場合に実行されるステートメントを格納している、<see cref="T:System.CodeDom.CodeStatement" /> 型の配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.Condition">
      <summary vsli:raw="Gets or sets the expression to evaluate &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> か <see langword="false" /> と評価される式を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; to evaluate &lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> か <see langword="false" /> と評価される <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.FalseStatements">
      <summary vsli:raw="Gets the collection of statements to execute if the conditional expression evaluates to &lt;see langword=&quot;false&quot; /&gt;.">条件式が <see langword="false" /> と評価される場合に実行されるステートメントのコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements to execute if the conditional expression evaluates to &lt;see langword=&quot;false&quot; /&gt;.">条件式が <see langword="false" /> と評価される場合に実行されるステートメントを格納している、<see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConditionStatement.TrueStatements">
      <summary vsli:raw="Gets the collection of statements to execute if the conditional expression evaluates to &lt;see langword=&quot;true&quot; /&gt;.">条件式が <see langword="true" /> と評価される場合に実行されるステートメントのコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; containing the statements to execute if the conditional expression evaluates to &lt;see langword=&quot;true&quot; /&gt;.">条件式が <see langword="true" /> と評価される場合に実行されるステートメントを格納している、<see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeConstructor">
      <summary vsli:raw="Represents a declaration for an instance constructor of a type.">型のインスタンス コンストラクターの宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeConstructor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeConstructor&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeConstructor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.BaseConstructorArgs">
      <summary vsli:raw="Gets the collection of base constructor arguments.">基本コンストラクターの引数のコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the base constructor arguments.">基本コンストラクターの引数を格納している <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeConstructor.ChainedConstructorArgs">
      <summary vsli:raw="Gets the collection of chained constructor arguments.">チェイン コンストラクターの引数のコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the chained constructor arguments.">チェイン コンストラクターの引数を格納している <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDefaultValueExpression">
      <summary vsli:raw="Represents a reference to a default value.">既定値への参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDefaultValueExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeDefaultValueExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDefaultValueExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDefaultValueExpression&quot; /&gt; class using the specified code type reference.">指定したコードの型参照を使用して、<see cref="T:System.CodeDom.CodeDefaultValueExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that specifies the reference to a value type.">値の型への参照を指定する <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeDefaultValueExpression.Type">
      <summary vsli:raw="Gets or sets the data type reference for a default value.">既定値に対するデータ型参照を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; object representing a data type that has a default value.">既定値が設定されたデータ型を表す <see cref="T:System.CodeDom.CodeTypeReference" /> オブジェクト。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateCreateExpression">
      <summary vsli:raw="Represents an expression that creates a delegate.">デリゲートを作成する式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateCreateExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateCreateExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeDelegateCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="delegateType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the delegate.">デリゲートのデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object containing the event-handler method.">イベント ハンドラー メソッドを格納するオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="methodName" vsli:raw="The name of the event-handler method.">イベント ハンドラー メソッドの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.DelegateType">
      <summary vsli:raw="Gets or sets the data type of the delegate.">デリゲートのデータ型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the delegate.">デリゲートのデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.MethodName">
      <summary vsli:raw="Gets or sets the name of the event handler method.">イベント ハンドラー メソッドの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the event handler method.">イベント ハンドラー メソッドの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateCreateExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the event-handler method.">イベント ハンドラー メソッドを格納するオブジェクトを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object containing the event-handler method.">イベント ハンドラー メソッドを格納するオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDelegateInvokeExpression">
      <summary vsli:raw="Represents an expression that raises an event.">イベントを発生する式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class using the specified target object.">対象オブジェクトを指定して、<see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object.">対象オブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeDelegateInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDelegateInvokeExpression&quot; /&gt; class using the specified target object and parameters.">対象オブジェクトとパラメーターを指定して、<see cref="T:System.CodeDom.CodeDelegateInvokeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object.">対象オブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters.">パラメーターを示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトの配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.Parameters">
      <summary vsli:raw="Gets or sets the parameters to pass to the event handling methods attached to the event.">イベントに結び付けられたイベント処理メソッドに渡すパラメーターを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the parameters to pass to the event handling methods attached to the event.">イベントに結び付けられたイベント処理メソッドに渡すパラメーターを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDelegateInvokeExpression.TargetObject">
      <summary vsli:raw="Gets or sets the event to invoke.">呼び出されるイベントを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event to invoke.">呼び出されるイベントを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirectionExpression">
      <summary vsli:raw="Represents an expression used as a method invoke parameter along with a reference direction indicator.">参照方向のインジケーターと共にメソッド呼び出しのパラメーターとして使用される式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectionExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeDirectionExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectionExpression.#ctor(System.CodeDom.FieldDirection,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectionExpression&quot; /&gt; class using the specified field direction and expression.">フィールドの方向と式を指定して、<see cref="T:System.CodeDom.CodeDirectionExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="direction" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt; that indicates the field direction of the expression.">式のフィールドの方向を示す <see cref="T:System.CodeDom.FieldDirection" />。</param>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the code expression to represent.">表すコード式を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Direction">
      <summary vsli:raw="Gets or sets the field direction for this direction expression.">この方向式のフィールドの方向を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt; that indicates the field direction for this direction expression.">この方向式のフィールドの方向を示す <see cref="T:System.CodeDom.FieldDirection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeDirectionExpression.Expression">
      <summary vsli:raw="Gets or sets the code expression to represent.">表すコード式を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to represent.">表す式を示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeDirective">
      <summary vsli:raw="Serves as the base class for code directive classes.">コード ディレクティブ クラスの基本クラスとして機能します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirective.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeDirective" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeDirectiveCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeDirectiveCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirective[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class with the code directive objects in the specified array.">指定した配列のコード ディレクティブ オブジェクトを使用して、<see cref="T:System.CodeDom.CodeDirectiveCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.#ctor(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; class with the elements in the specified code directive collection.">指定したコード ディレクティブ コレクションの要素を使用して、<see cref="T:System.CodeDom.CodeDirectiveCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Add(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to the collection.">指定した <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to add.">追加する <see cref="T:System.CodeDom.CodeDirective" /> オブジェクト。</param>
      <returns vsli:raw="The index position at which the new element was inserted.">新しい要素が挿入されたインデックス位置。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirective[])">
      <summary vsli:raw="Adds an array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to the end of the collection.">コレクションの末尾に <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトの配列を追加します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to add to the collection.">コレクションに追加する <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.AddRange(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object to the end of the collection.">指定した <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクトの内容をコレクションの末尾に追加します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; objects to add to the collection.">コレクションに追加する <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクトを格納している <see cref="T:System.CodeDom.CodeDirective" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Contains(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object.">指定した <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトがコレクションに格納されているかどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to search for in the collection.">このコレクション内で検索する <see cref="T:System.CodeDom.CodeDirective" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.CopyTo(System.CodeDom.CodeDirective[],System.Int32)">
      <summary vsli:raw="Copies the contents of the collection to a one-dimensional array beginning at the specified index.">指定したインデックスをコピー開始位置として、1 次元配列にコレクションの内容をコピーします。</summary>
      <param name="array" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; that is the destination of the values copied from the collection.">コレクションの値のコピー先となる <see cref="T:System.CodeDom.CodeDirective" /> 型の配列。</param>
      <param name="index" vsli:raw="The index in the array at which to begin inserting collection objects.">コレクション オブジェクトの挿入開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; is greater than the available space between the index of the target array specified by &lt;paramref name=&quot;index&quot; /&gt; and the end of the target array.">配列先が多次元です。  
  
- または - 
<see cref="T:System.CodeDom.CodeDirectiveCollection" /> 内の要素の数が、<paramref name="index" /> で指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the target array's minimum index.">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.IndexOf(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object, if it exists in the collection.">指定した <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to locate in the collection.">コレクション内で検索する <see cref="T:System.CodeDom.CodeDirective" /> オブジェクト。</param>
      <returns vsli:raw="The index position in the collection of the specified object, if found; otherwise, -1.">見つかった場合はコレクション内での指定したオブジェクトのインデックス位置。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Insert(System.Int32,System.CodeDom.CodeDirective)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object into the collection at the specified index.">このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトを挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index position where the specified object should be inserted.">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス位置。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to insert.">挿入する <see cref="T:System.CodeDom.CodeDirective" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;index&quot; /&gt; is greater than &lt;see cref=&quot;P:System.Collections.CollectionBase.Count&quot; /&gt;.">
        <paramref name="index" /> が 0 未満です。  
  
- または - 
 <paramref name="index" /> が <see cref="P:System.Collections.CollectionBase.Count" /> より大きくなっています。</exception>
    </member>
    <member name="M:System.CodeDom.CodeDirectiveCollection.Remove(System.CodeDom.CodeDirective)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object from the collection.">指定した <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object to remove from the collection.">コレクションから削除する <see cref="T:System.CodeDom.CodeDirective" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="P:System.CodeDom.CodeDirectiveCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; object at the specified index in the collection.">コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeDirective" /> オブジェクトを取得または設定します。</summary>
      <param name="index" vsli:raw="The index position to access.">アクセスするインデックス位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the valid range of index positions for the collection.">
        <paramref name="index" /> が、コレクションのインデックス位置の有効範囲外です。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeDirective&quot; /&gt; at the index position.">インデックス位置にある <see cref="T:System.CodeDom.CodeDirective" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeEntryPointMethod">
      <summary vsli:raw="Represents the entry point method of an executable.">実行可能ファイルのエントリ ポイント メソッドを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEntryPointMethod.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEntryPointMethod&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeEntryPointMethod" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeEventReferenceExpression">
      <summary vsli:raw="Represents a reference to an event.">イベントへの参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeEventReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeEventReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; class using the specified target object and event name.">対象オブジェクトとイベント名を指定して、<see cref="T:System.CodeDom.CodeEventReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">イベントを格納するオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="eventName" vsli:raw="The name of the event to reference.">参照されるイベントの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.EventName">
      <summary vsli:raw="Gets or sets the name of the event.">イベントの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the event.">イベントの名前です。</returns>
    </member>
    <member name="P:System.CodeDom.CodeEventReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the event.">イベントを格納するオブジェクトを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">イベントを格納するオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpression">
      <summary vsli:raw="Represents a code expression. This is a base class for other code expression objects that is never instantiated.">コード式を表します。 これは、他のコード式オブジェクトの基本クラスです。このクラスがインスタンス化されることはありません。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeExpressionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeExpressionCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.#ctor(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; class containing the elements of the specified source collection.">指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeExpressionCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeExpressionCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Add(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to the collection.">指定した <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to add.">追加する <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
      <returns vsli:raw="The index at which the new element was inserted.">新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">指定された配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeExpression" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.AddRange(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Copies the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; object to the end of the collection.">別の <see cref="T:System.CodeDom.CodeExpressionCollection" /> オブジェクトの内容をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeExpressionCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Contains(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object.">指定した <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to locate in the collection.">コレクション内で検索する <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.CopyTo(System.CodeDom.CodeExpression[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">配列先が多次元です。  
  
- または - 
<see cref="T:System.CodeDom.CodeExpressionCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.IndexOf(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object in the collection, if it exists in the collection.">指定した <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to locate in the collection.">コレクション内で検索する <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
      <returns vsli:raw="The index of the specified object, if found, in the collection; otherwise, -1.">見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Insert(System.Int32,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object into the collection at the specified index.">このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトを挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to insert.">挿入する <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.CodeExpressionCollection.Remove(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object from the collection.">指定した <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to remove from the collection.">コレクションから削除する <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="P:System.CodeDom.CodeExpressionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object at the specified index in the collection.">コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトを取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the collection to access.">アクセスするコレクションの、0 から始まるインデックス番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object at each valid index.">有効な各インデックスにある <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</returns>
    </member>
    <member name="T:System.CodeDom.CodeExpressionStatement">
      <summary vsli:raw="Represents a statement that consists of a single expression.">単一の式から成るステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeExpressionStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeExpressionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeExpressionStatement&quot; /&gt; class by using the specified expression.">式を指定して、<see cref="T:System.CodeDom.CodeExpressionStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; for the statement.">ステートメントの <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeExpressionStatement.Expression">
      <summary vsli:raw="Gets or sets the expression for the statement.">ステートメントの式を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression for the statement.">ステートメントの式を示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeFieldReferenceExpression">
      <summary vsli:raw="Represents a reference to a field.">フィールドへの参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeFieldReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeFieldReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeFieldReferenceExpression&quot; /&gt; class using the specified target object and field name.">対象オブジェクトとフィールド名を指定して、<see cref="T:System.CodeDom.CodeFieldReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the field.">フィールドを格納するオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="fieldName" vsli:raw="The name of the field.">フィールドの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.FieldName">
      <summary vsli:raw="Gets or sets the name of the field to reference.">参照されるフィールドの名前を取得または設定します。</summary>
      <returns vsli:raw="A string containing the field name.">フィールド名を含む文字列。</returns>
    </member>
    <member name="P:System.CodeDom.CodeFieldReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the field to reference.">参照されるフィールドを格納したオブジェクトを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the field to reference.">参照されるフィールドを格納したオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeGotoStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;goto&quot; /&gt; statement.">
        <see langword="goto" /> ステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeGotoStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeGotoStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeGotoStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeGotoStatement&quot; /&gt; class using the specified label name.">ラベル名を指定して、<see cref="T:System.CodeDom.CodeGotoStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="label" vsli:raw="The name of the label at which to continue program execution.">プログラムの実行を再開する位置のラベルの名前。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;Label&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="Label" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.CodeDom.CodeGotoStatement.Label">
      <summary vsli:raw="Gets or sets the name of the label at which to continue program execution.">プログラムの実行を再開する位置のラベルの名前を取得または設定します。</summary>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The label cannot be set because &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.">
        <paramref name="value" /> が <see langword="null" /> または空の文字列のため、ラベルを設定できません。</exception>
      <returns vsli:raw="A string that indicates the name of the label at which to continue program execution.">プログラムの実行を再開する位置のラベルの名前を示す文字列。</returns>
    </member>
    <member name="T:System.CodeDom.CodeIndexerExpression">
      <summary vsli:raw="Represents a reference to an indexer property of an object.">オブジェクトのインデクサー プロパティへの参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIndexerExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeIndexerExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIndexerExpression.#ctor(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIndexerExpression&quot; /&gt; class using the specified target object and index.">対象オブジェクトとインデックスを指定して、<see cref="T:System.CodeDom.CodeIndexerExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject" vsli:raw="The target object.">ターゲット オブジェクト。</param>
      <param name="indices" vsli:raw="The index or indexes of the indexer expression.">インデクサー式の 1 つ以上のインデックス。</param>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.Indices">
      <summary vsli:raw="Gets the collection of indexes of the indexer expression.">インデクサー式のインデックスのコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the index or indexes of the indexer expression.">インデクサー式の 1 つ以上のインデックスを示す <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIndexerExpression.TargetObject">
      <summary vsli:raw="Gets or sets the target object that can be indexed.">インデックス付けできる対象オブジェクトを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the indexer object.">インデクサー オブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeIterationStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;for&quot; /&gt; statement, or a loop through a block of statements, using a test expression as a condition for continuing to loop.">
        <see langword="for" /> ステートメント、またはループの続行条件としてテスト式を使用するステートメントのブロックを反復処理するループを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIterationStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeIterationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeIterationStatement.#ctor(System.CodeDom.CodeStatement,System.CodeDom.CodeExpression,System.CodeDom.CodeStatement,System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeIterationStatement&quot; /&gt; class using the specified parameters.">指定されたパラメーターを使用して、<see cref="T:System.CodeDom.CodeIterationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="initStatement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the loop initialization statement.">ループ初期化ステートメントを格納する <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <param name="testExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; containing the expression to test for exit condition.">終了条件をテストする対象となる式を格納する <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="incrementStatement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the per-cycle increment statement.">循環ごとに値が増加するステートメントを格納する <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <param name="statements" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the statements within the loop.">ループ内のステートメントを格納する <see cref="T:System.CodeDom.CodeStatement" /> 型の配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.IncrementStatement">
      <summary vsli:raw="Gets or sets the statement that is called after each loop cycle.">ループ循環後に繰り返し呼び出されるステートメントを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the per cycle increment statement.">循環ごとに値が増加するステートメントを示す <see cref="T:System.CodeDom.CodeStatement" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.InitStatement">
      <summary vsli:raw="Gets or sets the loop initialization statement.">ループ初期化ステートメントを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the loop initialization statement.">ループ初期化ステートメントを示す <see cref="T:System.CodeDom.CodeStatement" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.Statements">
      <summary vsli:raw="Gets the collection of statements to be executed within the loop.">ループ内で実行されるステートメントのコレクションを取得します。</summary>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the statements within the loop.">ループ内のステートメントを示す <see cref="T:System.CodeDom.CodeStatement" /> 型の配列。</returns>
    </member>
    <member name="P:System.CodeDom.CodeIterationStatement.TestExpression">
      <summary vsli:raw="Gets or sets the expression to test as the condition that continues the loop.">ループの続行条件としてテストする対象となる式を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to test.">テストする対象となる式を示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeLabeledStatement">
      <summary vsli:raw="Represents a labeled statement or a stand-alone label.">ラベル付きステートメントまたはスタンドアロンのラベルを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeLabeledStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class using the specified label name.">ラベル名を指定して、<see cref="T:System.CodeDom.CodeLabeledStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="label" vsli:raw="The name of the label.">ラベルの名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeLabeledStatement.#ctor(System.String,System.CodeDom.CodeStatement)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLabeledStatement&quot; /&gt; class using the specified label name and statement.">ラベル名とステートメントを指定して、<see cref="T:System.CodeDom.CodeLabeledStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="label" vsli:raw="The name of the label.">ラベルの名前。</param>
      <param name="statement" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to associate with the label.">ラベルに関連付ける <see cref="T:System.CodeDom.CodeStatement" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Label">
      <summary vsli:raw="Gets or sets the name of the label.">ラベルの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the label.">ラベルの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeLabeledStatement.Statement">
      <summary vsli:raw="Gets or sets the optional associated statement.">省略可能な関連付けられているステートメントを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; that indicates the statement associated with the label.">このラベルに関連付けられているステートメントを示す <see cref="T:System.CodeDom.CodeStatement" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeLinePragma">
      <summary vsli:raw="Represents a specific location within a specific file.">特定ファイル内の特定の位置を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeLinePragma" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeLinePragma.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeLinePragma" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName" vsli:raw="The file name of the associated file.">関連付けられたファイルの名前。</param>
      <param name="lineNumber" vsli:raw="The line number to store a reference to.">参照を格納する行番号。</param>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.FileName">
      <summary vsli:raw="Gets or sets the name of the associated file.">関連付けられたファイルの名前を取得または設定します。</summary>
      <returns vsli:raw="The file name of the associated file.">関連付けられたファイルの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeLinePragma.LineNumber">
      <summary vsli:raw="Gets or sets the line number of the associated reference.">関連付けられた参照の行番号を取得または設定します。</summary>
      <returns vsli:raw="The line number.">行番号。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberEvent">
      <summary vsli:raw="Represents a declaration for an event of a type.">型のイベントの宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberEvent.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberEvent&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeMemberEvent" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.ImplementationTypes">
      <summary vsli:raw="Gets or sets the data type that the member event implements.">メンバー イベントが実装しているデータ型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the data type or types that the member event implements.">メンバー イベントが実装している 1 つ以上のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the privately implemented data type, if any.">プライベートに実装されているデータ型が存在する場合は、そのデータ型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type that the event privately implements.">イベントがプライベートに実装しているデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberEvent.Type">
      <summary vsli:raw="Gets or sets the data type of the delegate type that handles the event.">イベントを処理するデリゲート型のデータ型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the delegate type that handles the event.">イベントを処理するデリゲート型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberField">
      <summary vsli:raw="Represents a declaration for a field of a type.">型のフィールドの宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeMemberField" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">フィールドの種類とフィールド名を指定して、<see cref="T:System.CodeDom.CodeMemberField" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="An object that indicates the type of the field.">フィールドの型を示すオブジェクト。</param>
      <param name="name" vsli:raw="The name of the field.">フィールドの名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">フィールドの種類とフィールド名を指定して、<see cref="T:System.CodeDom.CodeMemberField" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The type of the field.">フィールドの型。</param>
      <param name="name" vsli:raw="The name of the field.">フィールドの名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeMemberField.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberField&quot; /&gt; class using the specified field type and field name.">フィールドの種類とフィールド名を指定して、<see cref="T:System.CodeDom.CodeMemberField" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The type of the field.">フィールドの型。</param>
      <param name="name" vsli:raw="The name of the field.">フィールドの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.InitExpression">
      <summary vsli:raw="Gets or sets the initialization expression for the field.">フィールドの初期化式を取得または設定します。</summary>
      <returns vsli:raw="The initialization expression for the field.">フィールドの初期化式。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberField.Type">
      <summary vsli:raw="Gets or sets the type of the field.">フィールドの型を取得または設定します。</summary>
      <returns vsli:raw="The type of the field.">フィールドの型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberMethod">
      <summary vsli:raw="Represents a declaration for a method of a type.">型のメソッドの宣言を表します。</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateImplementationTypes">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.ImplementationTypes&quot; /&gt; collection is accessed.">
        <see cref="P:System.CodeDom.CodeMemberMethod.ImplementationTypes" /> コレクションが最初にアクセスされたときに発生するイベント。</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateParameters">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.Parameters&quot; /&gt; collection is accessed.">
        <see cref="P:System.CodeDom.CodeMemberMethod.Parameters" /> コレクションが最初にアクセスされたときに発生するイベント。</summary>
    </member>
    <member name="E:System.CodeDom.CodeMemberMethod.PopulateStatements">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.Statements&quot; /&gt; collection is accessed.">
        <see cref="P:System.CodeDom.CodeMemberMethod.Statements" /> コレクションが最初にアクセスされたときに発生するイベント。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberMethod.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberMethod&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeMemberMethod" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ImplementationTypes">
      <summary vsli:raw="Gets the data types of the interfaces implemented by this method, unless it is a private method implementation, which is indicated by the &lt;see cref=&quot;P:System.CodeDom.CodeMemberMethod.PrivateImplementationType&quot; /&gt; property.">メソッドの実装が <see cref="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType" /> プロパティで示されるプライベート メソッド実装である場合を除き、このメソッドによって実装されるインターフェイスのデータ型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the interfaces implemented by this method.">このメソッドによって実装されるインターフェイスを示す <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Parameters">
      <summary vsli:raw="Gets the parameter declarations for the method.">メソッドのパラメーター宣言を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the method parameters.">メソッドのパラメーターを示す <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the data type of the interface this method, if private, implements a method of, if any.">このメソッドによってプライベート メソッドが実装されるインターフェイスがある場合に、そのインターフェイスのデータ型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the interface with the method that the private method whose declaration is represented by this &lt;see cref=&quot;T:System.CodeDom.CodeMemberMethod&quot; /&gt; implements.">この <see cref="T:System.CodeDom.CodeTypeReference" /> によって表される宣言のプライベート メソッドがインターフェイスのメソッドを実装する場合、そのインターフェイスのデータ型を示す <see cref="T:System.CodeDom.CodeMemberMethod" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnType">
      <summary vsli:raw="Gets or sets the data type of the return value of the method.">メソッドの戻り値のデータ型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the value returned by the method.">メソッドの戻り値のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.ReturnTypeCustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the return type of the method.">メソッドの戻り値の型のカスタム属性を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes.">カスタム属性を示す <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.Statements">
      <summary vsli:raw="Gets the statements within the method.">メソッド内で、ステートメントを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the statements within the method.">メソッド内のステートメントを示す <see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberMethod.TypeParameters">
      <summary vsli:raw="Gets the type parameters for the current generic method.">現在のジェネリック メソッドの型パラメーターを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; that contains the type parameters for the generic method.">ジェネリック メソッドの型パラメーターを格納する <see cref="T:System.CodeDom.CodeTypeParameterCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMemberProperty">
      <summary vsli:raw="Represents a declaration for a property of a type.">型のプロパティの宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMemberProperty.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMemberProperty&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeMemberProperty" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.GetStatements">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;get&quot; /&gt; statements for the property.">プロパティの <see langword="get" /> ステートメントのコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that contains the &lt;see langword=&quot;get&quot; /&gt; statements for the member property.">メンバー プロパティの <see langword="get" /> ステートメントを格納する <see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasGet">
      <summary vsli:raw="Gets or sets a value indicating whether the property has a &lt;see langword=&quot;get&quot; /&gt; method accessor.">プロパティに <see langword="get" /> メソッド アクセサーがあるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see langword=&quot;Count&quot; /&gt; property of the &lt;see cref=&quot;P:System.CodeDom.CodeMemberProperty.GetStatements&quot; /&gt; collection is non-zero, or if the value of this property has been set to &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.CodeDom.CodeMemberProperty.GetStatements" /> コレクションの <see langword="true" /> プロパティが非ゼロの場合か、このプロパティの値が <see langword="Count" /> に設定されていた場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.HasSet">
      <summary vsli:raw="Gets or sets a value indicating whether the property has a &lt;see langword=&quot;set&quot; /&gt; method accessor.">プロパティに <see langword="set" /> メソッド アクセサーがあるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Collections.CollectionBase.Count&quot; /&gt; property of the &lt;see cref=&quot;P:System.CodeDom.CodeMemberProperty.SetStatements&quot; /&gt; collection is non-zero; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.Collections.CollectionBase.Count" /> コレクションの <see cref="P:System.CodeDom.CodeMemberProperty.SetStatements" /> プロパティが非ゼロの場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.ImplementationTypes">
      <summary vsli:raw="Gets the data types of any interfaces that the property implements.">プロパティが実装しているすべてのインターフェイスのデータ型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; that indicates the data types the property implements.">プロパティが実装しているデータ型を示す <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Parameters">
      <summary vsli:raw="Gets the collection of declaration expressions for the property.">プロパティの宣言式のコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the declaration expressions for the property.">プロパティの宣言式を示す <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.PrivateImplementationType">
      <summary vsli:raw="Gets or sets the data type of the interface, if any, this property, if private, implements.">このプロパティがプライベートである場合に実装するインターフェイスがあるときに、そのインターフェイスのデータ型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the interface, if any, the property, if private, implements.">このプロパティがプライベートである場合に実装するインターフェイスがあるときに、そのインターフェイスのデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.SetStatements">
      <summary vsli:raw="Gets the collection of &lt;see langword=&quot;set&quot; /&gt; statements for the property.">プロパティの <see langword="set" /> ステートメントのコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that contains the &lt;see langword=&quot;set&quot; /&gt; statements for the member property.">メンバー プロパティの <see langword="set" /> ステートメントを格納する <see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMemberProperty.Type">
      <summary vsli:raw="Gets or sets the data type of the property.">プロパティのデータ型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the property.">プロパティのデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodInvokeExpression">
      <summary vsli:raw="Represents an expression that invokes a method.">メソッドを呼び出す式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class using the specified target object, method name, and parameters.">対象オブジェクト、メソッド名、およびパラメーターを指定して、<see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the target object with the method to invoke.">呼び出されるメソッドのある対象オブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="methodName" vsli:raw="The name of the method to invoke.">呼び出すメソッドの名前。</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters to call the method with.">メソッドの呼び出しに使用するパラメーターを示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodInvokeExpression.#ctor(System.CodeDom.CodeMethodReferenceExpression,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodInvokeExpression&quot; /&gt; class using the specified method and parameters.">メソッドとパラメーターを指定して、<see cref="T:System.CodeDom.CodeMethodInvokeExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="method" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; that indicates the method to invoke.">呼び出されるメソッドを示す <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />。</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicate the parameters with which to invoke the method.">メソッドを呼び出すために使用するパラメーターを示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトの配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Method">
      <summary vsli:raw="Gets or sets the method to invoke.">呼び出されるメソッドを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; that indicates the method to invoke.">呼び出されるメソッドを示す <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodInvokeExpression.Parameters">
      <summary vsli:raw="Gets the parameters to invoke the method with.">メソッドの呼び出しに使用するパラメーターを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the parameters to invoke the method with.">メソッドの呼び出しに使用するパラメーターを示す <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReferenceExpression">
      <summary vsli:raw="Represents a reference to a method.">メソッドへの参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class using the specified target object and method name.">対象オブジェクトとメソッド名を指定して、<see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object to target.">対象オブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="methodName" vsli:raw="The name of the method to call.">呼び出すメソッドの名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeMethodReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt; class using the specified target object, method name, and generic type arguments.">対象オブジェクト、メソッド名、およびジェネリック型引数を指定して、<see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object to target.">対象オブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="methodName" vsli:raw="The name of the method to call.">呼び出すメソッドの名前。</param>
      <param name="typeParameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; values that specify the &lt;see cref=&quot;P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments&quot; /&gt; for this &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt;.">この <see cref="T:System.CodeDom.CodeTypeReference" /> の <see cref="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments" /> を指定する <see cref="T:System.CodeDom.CodeMethodReferenceExpression" /> 値の配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.MethodName">
      <summary vsli:raw="Gets or sets the name of the method to reference.">参照されるメソッドの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the method to reference.">参照されるメソッドの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the expression that indicates the method to reference.">参照されるメソッドを示す式を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that represents the method to reference.">参照されるメソッドを表す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeMethodReferenceExpression.TypeArguments">
      <summary vsli:raw="Gets the type arguments for the current generic method reference expression.">現在のジェネリック メソッド参照式の型引数を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the type arguments for the current code &lt;see cref=&quot;T:System.CodeDom.CodeMethodReferenceExpression&quot; /&gt;.">現在のコード <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> の型引数を格納する <see cref="T:System.CodeDom.CodeMethodReferenceExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeMethodReturnStatement">
      <summary vsli:raw="Represents a return value statement.">値を返す return ステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReturnStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeMethodReturnStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeMethodReturnStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeMethodReturnStatement&quot; /&gt; class using the specified expression.">指定した式を使用して、<see cref="T:System.CodeDom.CodeMethodReturnStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the return value.">戻り値を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeMethodReturnStatement.Expression">
      <summary vsli:raw="Gets or sets the return value.">戻り値を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the value to return for the return statement, or &lt;see langword=&quot;null&quot; /&gt; if the statement is part of a subroutine.">return ステートメントで返す値を示す <see cref="T:System.CodeDom.CodeExpression" />。return ステートメントがサブルーチンの一部である場合は <see langword="null" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespace">
      <summary vsli:raw="Represents a namespace declaration.">名前空間宣言を表します。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateComments">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Comments&quot; /&gt; collection is accessed.">
        <see cref="P:System.CodeDom.CodeNamespace.Comments" /> コレクションが最初にアクセスされたときに発生するイベント。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateImports">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Imports&quot; /&gt; collection is accessed.">
        <see cref="P:System.CodeDom.CodeNamespace.Imports" /> コレクションが最初にアクセスされたときに発生するイベント。</summary>
    </member>
    <member name="E:System.CodeDom.CodeNamespace.PopulateTypes">
      <summary vsli:raw="An event that will be raised the first time the &lt;see cref=&quot;P:System.CodeDom.CodeNamespace.Types&quot; /&gt; collection is accessed.">
        <see cref="P:System.CodeDom.CodeNamespace.Types" /> コレクションが最初にアクセスされたときに発生するイベント。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeNamespace" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespace.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; class using the specified name.">指定された名前を使用して、<see cref="T:System.CodeDom.CodeNamespace" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the namespace being declared.">宣言する名前空間の名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Comments">
      <summary vsli:raw="Gets the comments for the namespace.">名前空間のコメントを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that indicates the comments for the namespace.">名前空間のコメントを示す <see cref="T:System.CodeDom.CodeCommentStatementCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Imports">
      <summary vsli:raw="Gets the collection of namespace import directives used by the namespace.">名前空間で使用する名前空間インポート ディレクティブのコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImportCollection&quot; /&gt; that indicates the namespace import directives used by the namespace.">名前空間で使用する名前空間インポートディレクティブを示す <see cref="T:System.CodeDom.CodeNamespaceImportCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Name">
      <summary vsli:raw="Gets or sets the name of the namespace.">名前空間の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the namespace.">名前空間の名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespace.Types">
      <summary vsli:raw="Gets the collection of types that the namespace contains.">名前空間に格納されている型のコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; that indicates the types contained in the namespace.">名前空間に格納される型を示す <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespace[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeNamespaceCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeNamespace" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; objects with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="One or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.#ctor(System.CodeDom.CodeNamespaceCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; class that contains the elements of the specified source collection.">指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeNamespaceCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeNamespaceCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Add(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object to the collection.">指定した <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to add.">追加する <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <returns vsli:raw="The index at which the new element was inserted.">新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespace[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; array to the end of the collection.">指定した <see cref="T:System.CodeDom.CodeNamespace" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeNamespace" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.AddRange(System.CodeDom.CodeNamespaceCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; object to the end of the collection.">指定した <see cref="T:System.CodeDom.CodeNamespaceCollection" /> オブジェクトの内容をコレクションの末尾に追加します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeNamespaceCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Contains(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object.">指定した <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to search for in the collection.">コレクション内で検索される <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeNamespace" /> がコレクションに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.CopyTo(System.CodeDom.CodeNamespace[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">配列先が多次元です。  
  
- または - 
<see cref="T:System.CodeDom.CodeNamespaceCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.IndexOf(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt;, if it exists in the collection.">指定された <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクトが <see cref="T:System.CodeDom.CodeNamespaceCollection" /> コレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to locate.">検索する <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt;, if it is found, in the collection; otherwise, -1.">指定された <see cref="T:System.CodeDom.CodeNamespace" /> のインデックスがコレクション内に存在する場合はそのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Insert(System.Int32,System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object into the collection at the specified index.">このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクトを挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index where the new item should be inserted.">新しい項目を挿入する位置の 0 から始まるインデックス番号。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to insert.">挿入する <see cref="T:System.CodeDom.CodeNamespace" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceCollection.Remove(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object from the collection.">指定した <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; to remove from the collection.">コレクションから削除する <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceCollection&quot; /&gt; object at the specified index in the collection.">コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeNamespaceCollection" /> オブジェクトを取得または設定します。</summary>
      <param name="index" vsli:raw="The index of the collection to access.">アクセスするコレクションのインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; at each valid index.">有効な各インデックスにある <see cref="T:System.CodeDom.CodeNamespace" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImport">
      <summary vsli:raw="Represents a namespace import directive that indicates a namespace to use.">使用する名前空間を示す名前空間インポート ディレクティブを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImport.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; class using the specified namespace to import.">インポートする名前空間を指定して、<see cref="T:System.CodeDom.CodeNamespaceImport" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="nameSpace" vsli:raw="The name of the namespace to import.">インポートする名前空間の名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.LinePragma">
      <summary vsli:raw="Gets or sets the line and file the statement occurs on.">ステートメントのファイルと行を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; that indicates the context of the statement.">ステートメントのコンテキストを示す <see cref="T:System.CodeDom.CodeLinePragma" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImport.Namespace">
      <summary vsli:raw="Gets or sets the namespace to import.">インポートする名前空間を取得または設定します。</summary>
      <returns vsli:raw="The name of the namespace to import.">インポートする名前空間の名前。</returns>
    </member>
    <member name="T:System.CodeDom.CodeNamespaceImportCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImportCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeNamespaceImportCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Add(System.CodeDom.CodeNamespaceImport)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object to the collection.">
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object to add to the collection.">コレクションに追加する <see cref="T:System.CodeDom.CodeNamespaceImport" /> オブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.AddRange(System.CodeDom.CodeNamespaceImport[])">
      <summary vsli:raw="Adds a set of &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; objects to the collection.">
        <see cref="T:System.CodeDom.CodeNamespaceImport" /> オブジェクトのセットをコレクションに追加します。</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeNamespaceImport" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.Clear">
      <summary vsli:raw="Clears the collection of members.">メンバーのコレクションを消去します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that enumerates the collection members.">コレクション メンバーを列挙する列挙子を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that indicates the collection members.">コレクション メンバーを示す <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; to an &lt;see cref=&quot;T:System.Array&quot; /&gt;, starting at a particular &lt;see cref=&quot;T:System.Array&quot; /&gt; index.">
        <see cref="T:System.Collections.ICollection" /> の要素を <see cref="T:System.Array" /> にコピーします。<see cref="T:System.Array" /> の特定のインデックスからコピーが開始されます。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The array must have zero-based indexing.">
        <see cref="T:System.Array" /> からコピーされる要素のコピー先となる 1 次元の <see cref="T:System.Collections.ICollection" />。 配列には、0 から始まるインデックスが設定されている必要があります。</param>
      <param name="index" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that can iterate through a collection.">コレクションを反復処理できる列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Add(System.Object)">
      <summary vsli:raw="Adds an object to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">オブジェクトを <see cref="T:System.Collections.IList" /> に追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to add to the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> に追加する <see cref="T:System.Collections.IList" />。</param>
      <returns vsli:raw="The position at which the new element was inserted.">新しい要素が挿入された位置。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Clear">
      <summary vsli:raw="Removes all items from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> からすべての項目を削除します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Contains(System.Object)">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; contains a specific value.">
        <see cref="T:System.Collections.IList" /> に特定の値が格納されているかどうかを判断します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> 内で検索される <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is in the list; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">値がリストに存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IndexOf(System.Object)">
      <summary vsli:raw="Determines the index of a specific item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> 内の特定の項目のインデックスを確認します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to locate in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> 内で検索される <see cref="T:System.Object" />。</param>
      <returns vsli:raw="The index of &lt;paramref name=&quot;value&quot; /&gt; if it is found in the list; otherwise, -1.">リストに存在する場合は <paramref name="value" /> のインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Insert(System.Int32,System.Object)">
      <summary vsli:raw="Inserts an item in the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; at the specified position.">指定した位置にある <see cref="T:System.Collections.IList" /> に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which &lt;paramref name=&quot;value&quot; /&gt; should be inserted.">
        <paramref name="value" /> を挿入する位置の、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to insert into the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> に挿入する <see cref="T:System.Object" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Remove(System.Object)">
      <summary vsli:raw="Removes the first occurrence of a specific object from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">特定のオブジェクトが <see cref="T:System.Collections.IList" /> 内にあるときに、最初に出現したものを削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Object" /> から削除する <see cref="T:System.Collections.IList" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the element at the specified index of the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt;.">
        <see cref="T:System.Collections.IList" /> の指定したインデックスにある要素を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">削除する要素の、0 から始まるインデックス番号。</param>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Count">
      <summary vsli:raw="Gets the number of namespaces in the collection.">コレクション内の名前空間の数を取得します。</summary>
      <returns vsli:raw="The number of namespaces in the collection.">コレクション内の名前空間の数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object at the specified index in the collection.">コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeNamespaceImport" /> オブジェクトを取得または設定します。</summary>
      <param name="index" vsli:raw="The index of the collection to access.">アクセスするコレクションのインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespaceImport&quot; /&gt; object at each valid index.">有効な各インデックスにある <see cref="T:System.CodeDom.CodeNamespaceImport" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> に格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe).">
        <see cref="T:System.Collections.ICollection" /> へのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;. This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。 このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.  This property always returns &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトです。  このプロパティは常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsFixedSize">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size.">
        <see cref="T:System.Collections.IList" /> が固定サイズかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; has a fixed size; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が固定サイズの場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。  このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only.">
        <see cref="T:System.Collections.IList" /> が読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Collections.IList&quot; /&gt; is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  This property always returns &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が読み取り専用である場合は <see cref="T:System.Collections.IList" />。それ以外の場合は <see langword="false" />。  このプロパティは常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.CodeDom.CodeNamespaceImportCollection.System#Collections#IList#Item(System.Int32)">
      <summary vsli:raw="Gets or sets the element at the specified index.">指定したインデックスにある要素を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to get or set.">取得または設定する要素の、0 から始まるインデックス番号。</param>
      <returns vsli:raw="The element at the specified index.">指定したインデックス位置にある要素。</returns>
    </member>
    <member name="T:System.CodeDom.CodeObject">
      <summary vsli:raw="Provides a common base class for most Code Document Object Model (CodeDOM) objects.">ほとんどの CodeDOM (Code Document Object Model) オブジェクトの共通基本クラスを提供します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeObject.UserData">
      <summary vsli:raw="Gets the user-definable data for the current object.">現在のオブジェクトのユーザー定義可能なデータを取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IDictionary&quot; /&gt; containing user data for the current object.">現在のオブジェクトのユーザー データを格納する <see cref="T:System.Collections.IDictionary" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeObjectCreateExpression">
      <summary vsli:raw="Represents an expression that creates a new instance of a type.">型の新しいインスタンスを作成する式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeObjectCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.CodeDom.CodeTypeReference,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">型とパラメーターを指定して、<see cref="T:System.CodeDom.CodeObjectCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the object to create.">作成するオブジェクトのデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">オブジェクトを作成するために使用するパラメーターを示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.String,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">型とパラメーターを指定して、<see cref="T:System.CodeDom.CodeObjectCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType" vsli:raw="The name of the data type of object to create.">作成するオブジェクトのデータ型の名前。</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">オブジェクトを作成するために使用するパラメーターを示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeObjectCreateExpression.#ctor(System.Type,System.CodeDom.CodeExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeObjectCreateExpression&quot; /&gt; class using the specified type and parameters.">型とパラメーターを指定して、<see cref="T:System.CodeDom.CodeObjectCreateExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="createType" vsli:raw="The data type of the object to create.">作成するオブジェクトのデータ型。</param>
      <param name="parameters" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; objects that indicates the parameters to use to create the object.">オブジェクトを作成するために使用するパラメーターを示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトの配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.CreateType">
      <summary vsli:raw="Gets or sets the data type of the object to create.">作成するオブジェクトのデータ型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the data type of the object to create.">作成するオブジェクトのデータ型に対する <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeObjectCreateExpression.Parameters">
      <summary vsli:raw="Gets or sets the parameters to use in creating the object.">オブジェクトの作成に使用するパラメーターを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpressionCollection&quot; /&gt; that indicates the parameters to use when creating the object.">オブジェクトを作成するときに使用するパラメーターを示す <see cref="T:System.CodeDom.CodeExpressionCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpression">
      <summary vsli:raw="Represents a parameter declaration for a method, property, or constructor.">メソッド、プロパティ、またはコンストラクターのパラメーター宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">パラメーター型とパラメーター名を指定して、<see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="An object that indicates the type of the parameter to declare.">宣言するパラメーターの型を示すオブジェクト。</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">宣言するパラメーターの名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">パラメーター型とパラメーター名を指定して、<see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The type of the parameter to declare.">宣言するパラメーターの型。</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">宣言するパラメーターの名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpression.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; class using the specified parameter type and name.">パラメーター型とパラメーター名を指定して、<see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The type of the parameter to declare.">宣言するパラメーターの型。</param>
      <param name="name" vsli:raw="The name of the parameter to declare.">宣言するパラメーターの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.CustomAttributes">
      <summary vsli:raw="Gets or sets the custom attributes for the parameter declaration.">パラメーター宣言のカスタム属性を取得または設定します。</summary>
      <returns vsli:raw="An object that indicates the custom attributes.">カスタム属性を示すオブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Direction">
      <summary vsli:raw="Gets or sets the direction of the field.">フィールドの方向を取得または設定します。</summary>
      <returns vsli:raw="An object that indicates the direction of the field.">フィールドの方向を示すオブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Name">
      <summary vsli:raw="Gets or sets the name of the parameter.">パラメーターの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the parameter.">パラメーターの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpression.Type">
      <summary vsli:raw="Gets or sets the type of the parameter.">パラメーターの型を取得または設定します。</summary>
      <returns vsli:raw="The type of the parameter.">パラメーターの型。</returns>
    </member>
    <member name="T:System.CodeDom.CodeParameterDeclarationExpressionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; objects with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="one or more objects in the array are &lt;see langword=&quot;null&quot; /&gt;.">配列内の 1 つ以上のオブジェクトが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.#ctor(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; class containing the elements of the specified source collection.">指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Add(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to the collection.">指定された <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> をコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to add.">追加する <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <returns vsli:raw="The index at which the new element was inserted.">新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpression[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">指定された配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; containing the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.AddRange(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; to the end of the collection.">別の <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> の内容をコレクションの末尾に追加します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; containing the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Contains(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt;.">指定した <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> がコレクションに格納されているかどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to search for in the collection.">コレクションで検索する <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.CopyTo(System.CodeDom.CodeParameterDeclarationExpression[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance beginning at the specified index.">指定したインデックスをコピー開始位置として、1 次元の <see cref="T:System.Array" /> インスタンスにコレクション オブジェクトをコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">配列先が多次元です。  
  
- または - 
<see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.IndexOf(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt;, if it exists in the collection.">指定した <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> がコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to locate in the collection.">コレクション内で検索する <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Insert(System.Int32,System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; into the collection at the specified index.">コレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to insert.">挿入する <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeParameterDeclarationExpressionCollection.Remove(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; from the collection.">指定された <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> をコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; to remove from the collection.">コレクションから削除する <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="P:System.CodeDom.CodeParameterDeclarationExpressionCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; at the specified index in the collection.">コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" /> を取得または設定します。</summary>
      <param name="index" vsli:raw="The index of the collection to access.">アクセスするコレクションのインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpression&quot; /&gt; at each valid index.">有効な各インデックスにある <see cref="T:System.CodeDom.CodeParameterDeclarationExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodePrimitiveExpression">
      <summary vsli:raw="Represents a primitive data type value.">プリミティブ データ型の値を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePrimitiveExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodePrimitiveExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodePrimitiveExpression.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePrimitiveExpression&quot; /&gt; class using the specified object.">指定されたオブジェクトを使用して、<see cref="T:System.CodeDom.CodePrimitiveExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The object to represent.">表すオブジェクト。</param>
    </member>
    <member name="P:System.CodeDom.CodePrimitiveExpression.Value">
      <summary vsli:raw="Gets or sets the primitive data type to represent.">表すプリミティブ データ型を取得または設定します。</summary>
      <returns vsli:raw="The primitive data type instance to represent the value of.">値を表すプリミティブ データ型のインスタンス。</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertyReferenceExpression">
      <summary vsli:raw="Represents a reference to the value of a property.">プロパティの値への参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertyReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertyReferenceExpression.#ctor(System.CodeDom.CodeExpression,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertyReferenceExpression&quot; /&gt; class using the specified target object and property name.">対象オブジェクトとプロパティ名を指定して、<see cref="T:System.CodeDom.CodePropertyReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the property to reference.">参照するプロパティを格納したオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="propertyName" vsli:raw="The name of the property to reference.">参照されるプロパティの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.PropertyName">
      <summary vsli:raw="Gets or sets the name of the property to reference.">参照されるプロパティの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the property to reference.">参照されるプロパティの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodePropertyReferenceExpression.TargetObject">
      <summary vsli:raw="Gets or sets the object that contains the property to reference.">参照するプロパティを格納したオブジェクトを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the property to reference.">参照するプロパティを格納したオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodePropertySetValueReferenceExpression">
      <summary vsli:raw="Represents the value argument of a property set method call within a property set method.">プロパティ設定メソッドの中の、プロパティ設定メソッドの呼び出しの値引数を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodePropertySetValueReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodePropertySetValueReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodePropertySetValueReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeRegionDirective">
      <summary vsli:raw="Specifies the name and mode for a code region.">コード領域の名前およびモードの指定。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionDirective&quot; /&gt; class with default values.">
        <see cref="T:System.CodeDom.CodeRegionDirective" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRegionDirective.#ctor(System.CodeDom.CodeRegionMode,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionDirective&quot; /&gt; class, specifying its mode and name.">モードと名前を指定して、<see cref="T:System.CodeDom.CodeRegionDirective" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="regionMode" vsli:raw="One of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionMode&quot; /&gt; values.">
        <see cref="T:System.CodeDom.CodeRegionMode" /> 値のいずれか 1 つ。</param>
      <param name="regionText" vsli:raw="The name for the region.">領域の名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionMode">
      <summary vsli:raw="Gets or sets the mode for the region directive.">領域ディレクティブのモードを取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.CodeDom.CodeRegionMode&quot; /&gt; values. The default is &lt;see cref=&quot;F:System.CodeDom.CodeRegionMode.None&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeRegionMode" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.CodeDom.CodeRegionMode.None" /> です。</returns>
    </member>
    <member name="P:System.CodeDom.CodeRegionDirective.RegionText">
      <summary vsli:raw="Gets or sets the name of the region.">領域の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the region.">領域の名前。</returns>
    </member>
    <member name="T:System.CodeDom.CodeRegionMode">
      <summary vsli:raw="Specifies the start or end of a code region.">コード領域の先頭または末尾を指定します。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.End">
      <summary vsli:raw="End of the region.">領域の末尾。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.None">
      <summary vsli:raw="Not used.">使用しません。</summary>
    </member>
    <member name="F:System.CodeDom.CodeRegionMode.Start">
      <summary vsli:raw="Start of the region.">領域の先頭。</summary>
    </member>
    <member name="T:System.CodeDom.CodeRemoveEventStatement">
      <summary vsli:raw="Represents a statement that removes an event handler.">イベント ハンドラーの結び付けを解除するステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeRemoveEventStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeEventReferenceExpression,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class with the specified event and event handler.">イベントとイベント ハンドラーを指定して、<see cref="T:System.CodeDom.CodeRemoveEventStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="eventRef" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to detach the event handler from.">イベント ハンドラーの割り当てを解除する対象のイベントを示す <see cref="T:System.CodeDom.CodeEventReferenceExpression" />。</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">削除するイベント ハンドラーを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeRemoveEventStatement.#ctor(System.CodeDom.CodeExpression,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeRemoveEventStatement&quot; /&gt; class using the specified target object, event name, and event handler.">対象オブジェクト、イベント名、およびイベント ハンドラーを指定して、<see cref="T:System.CodeDom.CodeRemoveEventStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetObject" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the object that contains the event.">イベントを格納するオブジェクトを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="eventName" vsli:raw="The name of the event.">イベントの名前です。</param>
      <param name="listener" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">削除するイベント ハンドラーを示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Event">
      <summary vsli:raw="Gets or sets the event to remove a listener from.">リスナーの結び付けを解除する対象となるイベントを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeEventReferenceExpression&quot; /&gt; that indicates the event to remove a listener from.">リスナーの結び付けを解除する対象となるイベントを示す <see cref="T:System.CodeDom.CodeEventReferenceExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeRemoveEventStatement.Listener">
      <summary vsli:raw="Gets or sets the event handler to remove.">削除するイベント ハンドラーを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the event handler to remove.">削除するイベント ハンドラーを示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetCompileUnit">
      <summary vsli:raw="Represents a literal code fragment that can be compiled.">コンパイルできるリテラル コード片を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetCompileUnit&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetCompileUnit.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetCompileUnit&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeSnippetCompileUnit" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The literal code fragment to represent.">表すリテラル コード片。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.LinePragma">
      <summary vsli:raw="Gets or sets the line and file information about where the code is located in a source code document.">ソース コード ドキュメント内でのコードの位置を示す行情報およびファイル情報を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; that indicates the position of the code fragment.">コード片の位置を示す <see cref="T:System.CodeDom.CodeLinePragma" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeSnippetCompileUnit.Value">
      <summary vsli:raw="Gets or sets the literal code fragment to represent.">表すリテラル コード片を取得または設定します。</summary>
      <returns vsli:raw="The literal code fragment.">リテラル コード片。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetExpression">
      <summary vsli:raw="Represents a literal expression.">リテラル式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeSnippetExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetExpression&quot; /&gt; class using the specified literal expression.">リテラル式を指定して、<see cref="T:System.CodeDom.CodeSnippetExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The literal expression to represent.">表すリテラル式。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetExpression.Value">
      <summary vsli:raw="Gets or sets the literal string of code.">コードのリテラル文字列を取得または設定します。</summary>
      <returns vsli:raw="The literal string.">リテラル文字列。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetStatement">
      <summary vsli:raw="Represents a statement using a literal code fragment.">リテラル コード片を使用してステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeSnippetStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetStatement.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetStatement&quot; /&gt; class using the specified code fragment.">コード片を指定して、<see cref="T:System.CodeDom.CodeSnippetStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="The literal code fragment of the statement to represent.">表すステートメントのリテラル コード片。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetStatement.Value">
      <summary vsli:raw="Gets or sets the literal code fragment statement.">リテラル コード片ステートメントを取得します。</summary>
      <returns vsli:raw="The literal code fragment statement.">リテラル コード片ステートメント。</returns>
    </member>
    <member name="T:System.CodeDom.CodeSnippetTypeMember">
      <summary vsli:raw="Represents a member of a type using a literal code fragment.">リテラル コード片を使用して、型のメンバーを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetTypeMember&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeSnippetTypeMember" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeSnippetTypeMember.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeSnippetTypeMember&quot; /&gt; class using the specified text.">テキストを指定して、<see cref="T:System.CodeDom.CodeSnippetTypeMember" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="text" vsli:raw="The literal code fragment for the type member.">型メンバーのリテラル コード片。</param>
    </member>
    <member name="P:System.CodeDom.CodeSnippetTypeMember.Text">
      <summary vsli:raw="Gets or sets the literal code fragment for the type member.">型メンバーのリテラル コード片を取得または設定します。</summary>
      <returns vsli:raw="The literal code fragment for the type member.">型メンバーのリテラル コード片。</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatement">
      <summary vsli:raw="Represents the &lt;see langword=&quot;abstract&quot; /&gt; base class from which all code statements derive.">すべてのコード ステートメントの派生元となる <see langword="abstract" /> 基本クラスを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeStatement.EndDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object that contains end directives.">終了ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">終了ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.LinePragma">
      <summary vsli:raw="Gets or sets the line on which the code statement occurs.">コード ステートメントのある行を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; object that indicates the context of the code statement.">コード ステートメントのコンテキストを示す <see cref="T:System.CodeDom.CodeLinePragma" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeStatement.StartDirectives">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object that contains start directives.">開始ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">開始ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクト。</returns>
    </member>
    <member name="T:System.CodeDom.CodeStatementCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeStatementCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.#ctor(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; class that contains the elements of the specified source collection.">指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeStatementCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeStatementCollection" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to the collection.">指定した <see cref="T:System.CodeDom.CodeExpression" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object to add.">追加する <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
      <returns vsli:raw="The index at which the new element was inserted.">新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Add(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to the collection.">指定した <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to add.">追加する <see cref="T:System.CodeDom.CodeStatement" /> オブジェクト。</param>
      <returns vsli:raw="The index at which the new element was inserted.">新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Adds a set of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects to the collection.">
        <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトのセットをコレクションに追加します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects to add to the collection.">コレクションに追加する <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.AddRange(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object to the end of the collection.">別の <see cref="T:System.CodeDom.CodeStatementCollection" /> オブジェクトの内容をコレクションの末尾に追加します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object that contains the objects to add to the collection.">コレクションに追加するオブジェクトが格納された <see cref="T:System.CodeDom.CodeStatementCollection" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Contains(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object.">指定した <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to search for in the collection.">このコレクション内で検索する <see cref="T:System.CodeDom.CodeStatement" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.CopyTo(System.CodeDom.CodeStatement[],System.Int32)">
      <summary vsli:raw="Copies the elements of the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; object to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">指定されたインデックスを開始位置として、<see cref="T:System.CodeDom.CodeStatementCollection" /> オブジェクトの要素を 1 次元 <see cref="T:System.Array" /> のインスタンスにコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">配列先が多次元です。  
  
- または - 
<see cref="T:System.CodeDom.CodeStatementCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.IndexOf(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt;, if it exists in the collection.">指定された <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトが <see cref="T:System.CodeDom.CodeStatementCollection" /> コレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to locate in the collection.">コレクション内で検索する <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <returns vsli:raw="The index of the specified object, if it is found, in the collection; otherwise, -1.">見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Insert(System.Int32,System.CodeDom.CodeStatement)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object into the collection at the specified index.">このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトを挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object to insert.">挿入する <see cref="T:System.CodeDom.CodeStatement" /> オブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.CodeStatementCollection.Remove(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object from the collection.">指定した <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; to remove from the collection.">コレクションから削除する <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="P:System.CodeDom.CodeStatementCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; object at the specified index in the collection.">コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトを取得または設定します。</summary>
      <param name="index" vsli:raw="The index of the collection to access.">アクセスするコレクションのインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; at each valid index.">有効な各インデックスにある <see cref="T:System.CodeDom.CodeStatement" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeThisReferenceExpression">
      <summary vsli:raw="Represents a reference to the current local class instance.">現在のローカル クラスのインスタンスへの参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThisReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThisReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeThisReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeThrowExceptionStatement">
      <summary vsli:raw="Represents a statement that throws an exception.">例外をスローするステートメントを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThrowExceptionStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeThrowExceptionStatement.#ctor(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeThrowExceptionStatement&quot; /&gt; class with the specified exception type instance.">例外型のインスタンスを指定して、<see cref="T:System.CodeDom.CodeThrowExceptionStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="toThrow" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the exception to throw.">スローする例外を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeThrowExceptionStatement.ToThrow">
      <summary vsli:raw="Gets or sets the exception to throw.">スローする例外を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; representing an instance of the exception to throw.">スローする例外のインスタンスを表す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTryCatchFinallyStatement">
      <summary vsli:raw="Represents a &lt;see langword=&quot;try&quot; /&gt; block with any number of &lt;see langword=&quot;catch&quot; /&gt; clauses and, optionally, a &lt;see langword=&quot;finally&quot; /&gt; block.">任意の数の <see langword="try" /> 句と、省略可能な <see langword="catch" /> ブロックを持つ <see langword="finally" /> ブロックを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class using the specified statements for try and catch clauses.">try 句および catch 句のステートメントを指定して、<see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tryStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the statements to try.">トライするステートメントを示す <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトの配列。</param>
      <param name="catchClauses" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects that indicate the clauses to catch.">キャッチする句を示す <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTryCatchFinallyStatement.#ctor(System.CodeDom.CodeStatement[],System.CodeDom.CodeCatchClause[],System.CodeDom.CodeStatement[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTryCatchFinallyStatement&quot; /&gt; class using the specified statements for try, catch clauses, and finally statements.">try 句、catch 句、finally ステートメントなどのステートメントを指定して、<see cref="T:System.CodeDom.CodeTryCatchFinallyStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tryStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the statements to try.">トライするステートメントを示す <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトの配列。</param>
      <param name="catchClauses" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCatchClause&quot; /&gt; objects that indicate the clauses to catch.">キャッチする句を示す <see cref="T:System.CodeDom.CodeCatchClause" /> オブジェクトの配列。</param>
      <param name="finallyStatements" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; objects that indicate the finally statements to use.">使用する finally ステートメントを示す <see cref="T:System.CodeDom.CodeStatement" /> オブジェクトの配列。</param>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.CatchClauses">
      <summary vsli:raw="Gets the catch clauses to use.">使用する catch 句を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCatchClauseCollection&quot; /&gt; that indicates the catch clauses to use.">使用する catch 句を示す <see cref="T:System.CodeDom.CodeCatchClauseCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.FinallyStatements">
      <summary vsli:raw="Gets the finally statements to use.">使用する finally ステートメントを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the finally statements.">finally ステートメントを示す <see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTryCatchFinallyStatement.TryStatements">
      <summary vsli:raw="Gets the statements to try.">トライするステートメントを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatementCollection&quot; /&gt; that indicates the statements to try.">トライするステートメントを示す <see cref="T:System.CodeDom.CodeStatementCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeConstructor">
      <summary vsli:raw="Represents a static constructor for a class.">クラスの静的コンストラクターを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeConstructor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeConstructor&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeConstructor" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclaration">
      <summary vsli:raw="Represents a type declaration for a class, structure, interface, or enumeration.">クラス、構造体、インターフェイス、または列挙体の型宣言を表します。</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateBaseTypes">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.CodeDom.CodeTypeDeclaration.BaseTypes&quot; /&gt; collection is accessed for the first time.">
        <see cref="P:System.CodeDom.CodeTypeDeclaration.BaseTypes" /> コレクションが最初にアクセスされたときに発生します。</summary>
    </member>
    <member name="E:System.CodeDom.CodeTypeDeclaration.PopulateMembers">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.CodeDom.CodeTypeDeclaration.Members&quot; /&gt; collection is accessed for the first time.">
        <see cref="P:System.CodeDom.CodeTypeDeclaration.Members" /> コレクションが最初にアクセスされたときに発生します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclaration.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; class with the specified name.">指定した名前を使用して、<see cref="T:System.CodeDom.CodeTypeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name for the new type.">新しい型の名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.BaseTypes">
      <summary vsli:raw="Gets the base types of the type.">型の基本型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; object that indicates the base types of the type.">型の基本型を示す <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsClass">
      <summary vsli:raw="Gets or sets a value indicating whether the type is a class or reference type.">型がクラスまたは参照型かどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a class or reference type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型がクラスまたは参照型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsEnum">
      <summary vsli:raw="Gets or sets a value indicating whether the type is an enumeration.">型が列挙体かどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an enumeration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型が列挙体である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsInterface">
      <summary vsli:raw="Gets or sets a value indicating whether the type is an interface.">型がインターフェイスかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型がインターフェイスである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsPartial">
      <summary vsli:raw="Gets or sets a value indicating whether the type declaration is complete or partial.">型宣言が完全か部分的かを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class or structure declaration is a partial representation of the implementation; &lt;see langword=&quot;false&quot; /&gt; if the declaration is a complete implementation of the class or structure. The default is &lt;see langword=&quot;false&quot; /&gt;.">クラス宣言または構造体宣言が部分的な実装表現である場合は、<see langword="true" />。これらの宣言がクラスまたは構造体の完全な実装である場合は、<see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.IsStruct">
      <summary vsli:raw="Gets or sets a value indicating whether the type is a value type (struct).">型が値型 (構造体) かどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a value type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型が値型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.Members">
      <summary vsli:raw="Gets the collection of class members for the represented type.">表される型のクラス メンバーのコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; object that indicates the class members.">クラス メンバーを示す <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeAttributes">
      <summary vsli:raw="Gets or sets the attributes of the type.">型の属性を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Reflection.TypeAttributes&quot; /&gt; object that indicates the attributes of the type.">型の属性を示す <see cref="T:System.Reflection.TypeAttributes" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclaration.TypeParameters">
      <summary vsli:raw="Gets the type parameters for the type declaration.">型宣言の型パラメーターを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; that contains the type parameters for the type declaration.">型宣言の型パラメーターを格納する <see cref="T:System.CodeDom.CodeTypeParameterCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDeclarationCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclaration[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeTypeDeclaration" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; objects with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.#ctor(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; class that contains the elements of the specified source collection.">指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> オブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Add(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to the collection.">指定した <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to add.">追加する <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクト。</param>
      <returns vsli:raw="The index at which the new element was inserted.">新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclaration[])">
      <summary vsli:raw="Copies the elements of the specified array to the end of the collection.">指定された配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeTypeDeclaration" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.AddRange(System.CodeDom.CodeTypeDeclarationCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object to the end of the collection.">別の <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> オブジェクトの内容をコレクションの末尾に追加します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object that contains the objects to add to the collection.">コレクションに追加するオブジェクトが格納された <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Contains(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object.">指定した <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to search for in the collection.">このコレクション内で検索する <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.CopyTo(System.CodeDom.CodeTypeDeclaration[],System.Int32)">
      <summary vsli:raw="Copies the elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; object to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, starting at the specified index.">指定されたインデックスを開始位置として、<see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> オブジェクトの要素を 1 次元 <see cref="T:System.Array" /> のインスタンスにコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">配列先が多次元です。  
  
- または - 
<see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.IndexOf(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclarationCollection&quot; /&gt;, if it exists in the collection.">指定された <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトが <see cref="T:System.CodeDom.CodeTypeDeclarationCollection" /> コレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; to locate in the collection.">コレクション内で検索する <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
      <returns vsli:raw="The index of the specified object, if it is found, in the collection; otherwise, -1.">見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Insert(System.Int32,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object into the collection at the specified index.">このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトを挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object to insert.">挿入する <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeDeclarationCollection.Remove(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object from the collection.">指定した <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; to remove from the collection.">コレクションから削除する <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeDeclarationCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object at the specified index in the collection.">コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクトを取得または設定します。</summary>
      <param name="index" vsli:raw="The index of the collection to access.">アクセスするコレクションのインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; at each valid index.">有効な各インデックスにある <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeDelegate">
      <summary vsli:raw="Represents a delegate declaration.">デリゲート宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDelegate&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeDelegate" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeDelegate.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeDelegate&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeDelegate" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the delegate.">デリゲートの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.Parameters">
      <summary vsli:raw="Gets the parameters of the delegate.">デリゲートのパラメーターを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeParameterDeclarationExpressionCollection&quot; /&gt; that indicates the parameters of the delegate.">デリゲートのパラメーターを示す <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeDelegate.ReturnType">
      <summary vsli:raw="Gets or sets the return type of the delegate.">デリゲートの戻り値の型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the return type of the delegate.">デリゲートの戻り値の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMember">
      <summary vsli:raw="Provides a base class for a member of a type. Type members include fields, methods, properties, constructors and nested types.">型のメンバーの基本クラスを提供します。 型のメンバーには、フィールド、メソッド、プロパティ、コンストラクター、および入れ子にされた型があります。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMember.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Attributes">
      <summary vsli:raw="Gets or sets the attributes of the member.">メンバーの属性を取得または設定します。</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.CodeDom.MemberAttributes&quot; /&gt; values used to indicate the attributes of the member. The default value is &lt;see cref=&quot;F:System.CodeDom.MemberAttributes.Private&quot; /&gt; | &lt;see cref=&quot;F:System.CodeDom.MemberAttributes.Final&quot; /&gt;.">メンバーの属性を表す <see cref="T:System.CodeDom.MemberAttributes" /> 値のビットごとの組み合わせ。 既定値は <see cref="F:System.CodeDom.MemberAttributes.Private" /> | <see cref="F:System.CodeDom.MemberAttributes.Final" />です。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Comments">
      <summary vsli:raw="Gets the collection of comments for the type member.">型メンバーのコメント コレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCommentStatementCollection&quot; /&gt; that indicates the comments for the member.">メンバーのコメントを示す <see cref="T:System.CodeDom.CodeCommentStatementCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.CustomAttributes">
      <summary vsli:raw="Gets or sets the custom attributes of the member.">メンバーのカスタム属性を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes of the member.">メンバーのカスタム属性を示す <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.EndDirectives">
      <summary vsli:raw="Gets the end directives for the member.">メンバーの終了ディレクティブを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing end directives.">終了ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.LinePragma">
      <summary vsli:raw="Gets or sets the line on which the type member statement occurs.">型メンバーのステートメントが発生する行を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeLinePragma&quot; /&gt; object that indicates the location of the type member declaration.">型メンバーの宣言の位置を示す <see cref="T:System.CodeDom.CodeLinePragma" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.Name">
      <summary vsli:raw="Gets or sets the name of the member.">メンバーの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the member.">メンバーの名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeMember.StartDirectives">
      <summary vsli:raw="Gets the start directives for the member.">メンバーの開始ディレクティブを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeDirectiveCollection&quot; /&gt; object containing start directives.">開始ディレクティブを含む <see cref="T:System.CodeDom.CodeDirectiveCollection" /> オブジェクト。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeMemberCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeMember" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMember[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeTypeMember" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; objects with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeMember" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.#ctor(System.CodeDom.CodeTypeMemberCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; class containing the elements of the specified source collection.">指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeMemberCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Add(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; with the specified value to the collection.">指定した値で、<see cref="T:System.CodeDom.CodeTypeMember" /> をコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to add.">追加する <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <returns vsli:raw="The index at which the new element was inserted.">新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMember[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; array to the end of the collection.">指定した <see cref="T:System.CodeDom.CodeTypeMember" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; containing the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeTypeMember" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.AddRange(System.CodeDom.CodeTypeMemberCollection)">
      <summary vsli:raw="Adds the contents of another &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; to the end of the collection.">別の <see cref="T:System.CodeDom.CodeTypeMemberCollection" /> の内容をコレクションの末尾に追加します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; containing the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeTypeMemberCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Contains(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt;.">指定した <see cref="T:System.CodeDom.CodeTypeMember" /> がコレクションに格納されているかどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to search for in the collection.">コレクション内で検索される <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains the specified object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションに指定したオブジェクトが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.CopyTo(System.CodeDom.CodeTypeMember[],System.Int32)">
      <summary vsli:raw="Copies the collection objects to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance, beginning at the specified index.">コレクション オブジェクトを指定のインデックスから開始する 1 次元 <see cref="T:System.Array" /> インスタンスにコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The destination array is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMemberCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">配列先が多次元です。  
  
- または - 
<see cref="T:System.CodeDom.CodeTypeMemberCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.IndexOf(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt;, if it exists in the collection.">指定した <see cref="T:System.CodeDom.CodeTypeMember" /> がコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to locate in the collection.">コレクション内で検索する <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <returns vsli:raw="The index in the collection of the specified object, if found; otherwise, -1.">見つかった場合はコレクション内での指定したオブジェクトのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Insert(System.Int32,System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; into the collection at the specified index.">コレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeTypeMember" /> を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index where the specified object should be inserted.">指定したオブジェクトの挿入位置を示す、0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to insert.">挿入する <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeMemberCollection.Remove(System.CodeDom.CodeTypeMember)">
      <summary vsli:raw="Removes a specific &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; from the collection.">コレクションから特定の <see cref="T:System.CodeDom.CodeTypeMember" /> を削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; to remove from the collection.">コレクションから削除する <see cref="T:System.CodeDom.CodeTypeMember" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeMemberCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; at the specified index in the collection.">コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeTypeMember" /> を取得または設定します。</summary>
      <param name="index" vsli:raw="The index of the collection to access.">アクセスするコレクションのインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; at each valid index.">有効な各インデックスにある <see cref="T:System.CodeDom.CodeTypeMember" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeOfExpression">
      <summary vsli:raw="Represents a &lt;see langword=&quot;typeof&quot; /&gt; expression, an expression that returns a &lt;see cref=&quot;T:System.Type&quot; /&gt; for a specified type name.">指定した型名の <see cref="T:System.Type" /> を返す式である、<see langword="typeof" /> 式を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeOfExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeOfExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type for the &lt;see langword=&quot;typeof&quot; /&gt; expression.">
        <see langword="typeof" /> 式のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class using the specified type.">指定された型を使用して、<see cref="T:System.CodeDom.CodeTypeOfExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The name of the data type for the &lt;see langword=&quot;typeof&quot; /&gt; expression.">
        <see langword="typeof" /> 式のデータ型の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeOfExpression.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeOfExpression&quot; /&gt; class using the specified type.">指定された型を使用して、<see cref="T:System.CodeDom.CodeTypeOfExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The data type of the data type of the &lt;see langword=&quot;typeof&quot; /&gt; expression.">
        <see langword="typeof" /> 式のデータ型のデータ型。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeOfExpression.Type">
      <summary vsli:raw="Gets or sets the data type referenced by the &lt;see langword=&quot;typeof&quot; /&gt; expression.">
        <see langword="typeof" /> 式で参照されるデータ型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type referenced by the &lt;see langword=&quot;typeof&quot; /&gt; expression. This property will never return &lt;see langword=&quot;null&quot; /&gt;, and defaults to the &lt;see cref=&quot;T:System.Void&quot; /&gt; type.">
        <see langword="typeof" /> 式で参照されるデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。 このプロパティによって <see langword="null" /> が返されることはありません。このプロパティは、既定で <see cref="T:System.Void" /> 型に設定されます。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameter">
      <summary vsli:raw="Represents a type parameter of a generic type or method.">ジェネリック型またはジェネリック メソッドの型パラメーターを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameter.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; class with the specified type parameter name.">指定した型パラメーター名を使用して <see cref="T:System.CodeDom.CodeTypeParameter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the type parameter.">型パラメーターの名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Constraints">
      <summary vsli:raw="Gets the constraints for the type parameter.">型パラメーターの制約を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; object that contains the constraints for the type parameter.">型パラメーターの制約を含む <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> オブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.CustomAttributes">
      <summary vsli:raw="Gets the custom attributes of the type parameter.">型パラメーターのカスタム属性を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the custom attributes of the type parameter. The default is &lt;see langword=&quot;null&quot; /&gt;.">型パラメーターのカスタム属性を示す <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。 既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.HasConstructorConstraint">
      <summary vsli:raw="Gets or sets a value indicating whether the type parameter has a constructor constraint.">型パラメーターにコンストラクターの制約があるかどうかを表す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type parameter has a constructor constraint; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">型パラメーターにコンストラクターの制約が設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameter.Name">
      <summary vsli:raw="Gets or sets the name of the type parameter.">型パラメーターの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the type parameter. The default is an empty string (&quot;&quot;).">型パラメーターの名前。 既定値は、空の文字列 ("") です。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeParameterCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor">
      <summary vsli:raw="Initializes a new, empty instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> クラスの新しい空のインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameter[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeTypeParameter" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.#ctor(System.CodeDom.CodeTypeParameterCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; class containing the elements of the specified source collection.">指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeParameterCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection.">指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; to add.">追加する <see cref="T:System.CodeDom.CodeTypeParameter" />。</param>
      <returns vsli:raw="The zero-based index at which the new element was inserted.">新しい要素が挿入された位置の、0 から始まるインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Add(System.String)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection using the specified data type name.">指定したデータ型名を使用して、指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトをコレクションに追加します。</summary>
      <param name="value" vsli:raw="The name of a data type for which to add the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to the collection.">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトをコレクションに追加する対象のデータ型の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameter[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; array to the end of the collection.">指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; containing the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeTypeParameter" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.AddRange(System.CodeDom.CodeTypeParameterCollection)">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; to the end of the collection.">指定した <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> の要素をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; containing the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; objects to add to the collection.">コレクションに追加する <see cref="T:System.CodeDom.CodeTypeParameterCollection" /> オブジェクトを格納している <see cref="T:System.CodeDom.CodeTypeParameter" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Contains(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Determines whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object.">指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトがコレクションに格納されているかどうかを確認します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to search for in the collection.">このコレクション内で検索する <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトがコレクションに格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.CopyTo(System.CodeDom.CodeTypeParameter[],System.Int32)">
      <summary vsli:raw="Copies the items in the collection to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; at the specified index.">指定した 1 次元の <see cref="T:System.Array" /> の指定したインデックス位置に、コレクション内の項目をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameterCollection&quot; /&gt; is greater than the available space between the index of the target array specified by &lt;paramref name=&quot;index&quot; /&gt; and the end of the target array.">
        <paramref name="array" /> が多次元です。  
  
- または - 
<see cref="T:System.CodeDom.CodeTypeParameterCollection" /> 内の要素の数が、<paramref name="index" /> で指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than the target array's lowest index.">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.IndexOf(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object, if it exists in the collection.">指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to locate in the collection.">コレクション内で検索する <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクト。</param>
      <returns vsli:raw="The zero-based index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object in the collection if found; otherwise, -1.">指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトがコレクションに存在する場合は、そのオブジェクトの 0 から始まるインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Insert(System.Int32,System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object into the collection at the specified index.">このコレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトを挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index at which to insert the item.">項目を挿入する位置を示す 0 から始まるインデックス。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to insert.">挿入する <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクト。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeParameterCollection.Remove(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object from the collection.">指定した <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトをコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object to remove from the collection.">コレクションから削除する <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeParameterCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object at the specified index in the collection.">コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクトを取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the collection object to access.">アクセスするコレクション オブジェクトの、0 から始まるインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is outside the valid range of indexes for the collection.">
        <paramref name="index" /> が、コレクションのインデックスの正しい範囲から外れています。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; object at the specified index.">指定したインデックス位置にある <see cref="T:System.CodeDom.CodeTypeParameter" /> オブジェクト。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReference">
      <summary vsli:raw="Represents a reference to a type.">型への参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeParameter)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified code type parameter.">コード型パラメーターを指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeParameter" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeParameter&quot; /&gt; that represents the type of the type parameter.">型パラメーターの型を表す <see cref="T:System.CodeDom.CodeTypeParameter" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.CodeDom.CodeTypeReference,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified array type and rank.">配列の型とランクを指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="arrayType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array.">配列の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="rank" vsli:raw="The number of dimensions in the array.">配列の次元数。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name.">型名を指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">参照される型の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name and type arguments.">型名と型引数を指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">参照される型の名前。</param>
      <param name="typeArguments" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; values.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> 値の配列です。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.CodeDom.CodeTypeReferenceOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type name and code type reference option.">型名とコード型参照オプションを指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="typeName" vsli:raw="The name of the type to reference.">参照される型の名前。</param>
      <param name="codeTypeReferenceOption" vsli:raw="The code type reference option, one of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> のいずれかの値である、コード型参照オプション。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified array type name and rank.">配列の型名とランクを指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="baseType" vsli:raw="The name of the type of the elements of the array.">配列の要素の型の名前。</param>
      <param name="rank" vsli:raw="The number of dimensions of the array.">配列の次元の数。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type.">指定された型を使用して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to reference.">参照する <see cref="T:System.Type" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;type&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="type" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReference.#ctor(System.Type,System.CodeDom.CodeTypeReferenceOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; class using the specified type and code type reference.">型とコード型参照を指定して、<see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to reference.">参照する <see cref="T:System.Type" />。</param>
      <param name="codeTypeReferenceOption" vsli:raw="The code type reference option, one of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> のいずれかの値である、コード型参照オプション。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayElementType">
      <summary vsli:raw="Gets or sets the type of the elements in the array.">配列内の要素の型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the array elements.">配列の要素の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.ArrayRank">
      <summary vsli:raw="Gets or sets the array rank of the array.">配列の配列ランクを取得または設定します。</summary>
      <returns vsli:raw="The number of dimensions of the array.">配列の次元の数。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.BaseType">
      <summary vsli:raw="Gets or sets the name of the type being referenced.">参照される型の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the type being referenced.">参照先の型の名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.Options">
      <summary vsli:raw="Gets or sets the code type reference option.">コード型参照オプションを取得または設定します。</summary>
      <returns vsli:raw="A bitwise combination of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceOptions&quot; /&gt; values.">
        <see cref="T:System.CodeDom.CodeTypeReferenceOptions" /> 値のビットごとの組み合わせ。</returns>
    </member>
    <member name="P:System.CodeDom.CodeTypeReference.TypeArguments">
      <summary vsli:raw="Gets the type arguments for the current generic type reference.">現在のジェネリック型参照の型引数を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the type arguments for the current &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; object.">現在の <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> オブジェクトの型引数を含む <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class containing the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.CodeTypeReference" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; objects with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeReference" /> オブジェクトの配列。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.#ctor(System.CodeDom.CodeTypeReferenceCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; class containing the elements of the specified source collection.">指定したソース コレクションの要素を格納する <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">指定された <see cref="T:System.CodeDom.CodeTypeReference" /> をコレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to add.">追加する <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns vsli:raw="The index at which the new element was inserted.">新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.String)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection using the specified data type name.">指定したデータ型名を使用して、<see cref="T:System.CodeDom.CodeTypeReference" /> をコレクションに追加します。</summary>
      <param name="value" vsli:raw="The name of a data type for which to add a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> をコレクションに追加する対象のデータ型の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Add(System.Type)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection using the specified data type.">指定したデータ型を使用して、<see cref="T:System.CodeDom.CodeTypeReference" /> をコレクションに追加します。</summary>
      <param name="value" vsli:raw="The data type for which to add a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to the collection.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> をコレクションに追加する対象のデータ型。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReference[])">
      <summary vsli:raw="Copies the elements of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; array to the end of the collection.">指定した <see cref="T:System.CodeDom.CodeTypeReference" /> 配列の要素をコレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; containing the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeTypeReference" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.AddRange(System.CodeDom.CodeTypeReferenceCollection)">
      <summary vsli:raw="Adds the contents of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; to the end of the collection.">指定した <see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> の内容をコレクションの末尾に追加します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; containing the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.CodeTypeReferenceCollection" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Contains(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets a value indicating whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">指定した <see cref="T:System.CodeDom.CodeTypeReference" /> がコレクションに格納されているかどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to search for in the collection.">コレクション内で検索される <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> がコレクションに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.CopyTo(System.CodeDom.CodeTypeReference[],System.Int32)">
      <summary vsli:raw="Copies the items in the collection to the specified one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; at the specified index.">指定した 1 次元の <see cref="T:System.Array" /> の指定したインデックス位置に、コレクション内の項目をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from the collection.">コレクションから値がコピーされる先の 1 次元の <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index of the array at which to begin inserting.">挿入の開始位置を示す、配列内のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceCollection&quot; /&gt; is greater than the available space between the index of the target array specified by the &lt;paramref name=&quot;index&quot; /&gt; parameter and the end of the target array.">
        <paramref name="array" /> パラメーターは多次元です。  
  
- または - 
<see cref="T:System.CodeDom.CodeTypeReferenceCollection" /> 内の要素の数が、<paramref name="index" /> パラメーターで指定されたターゲット配列のインデックスからターゲット配列の末尾までの間にある使用可能な空間の大きさを超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the target array's minimum index.">
        <paramref name="index" /> パラメーターが、ターゲット配列の最小インデックスより小さい値です。</exception>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.IndexOf(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the index in the collection of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;, if it exists in the collection.">指定した <see cref="T:System.CodeDom.CodeTypeReference" /> がコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to locate in the collection.">コレクション内で検索する <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; in the collection if found; otherwise, -1.">指定した <see cref="T:System.CodeDom.CodeTypeReference" /> がコレクション内に存在する場合は、そのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Insert(System.Int32,System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Inserts a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; into the collection at the specified index.">
        <see cref="T:System.CodeDom.CodeTypeReference" /> をコレクション内の指定したインデックスに挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index where the item should be inserted.">項目を挿入する位置の 0 から始まるインデックス番号。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to insert.">挿入する <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceCollection.Remove(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Removes the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; from the collection.">指定された <see cref="T:System.CodeDom.CodeTypeReference" /> をコレクションから削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; to remove from the collection.">コレクションから削除する <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; at the specified index in the collection.">コレクション内の指定したインデックスでの <see cref="T:System.CodeDom.CodeTypeReference" /> を取得または設定します。</summary>
      <param name="index" vsli:raw="The index of the collection to access.">アクセスするコレクションのインデックス。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> パラメーターが、コレクションのインデックスの有効範囲外です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; at each valid index.">有効な各インデックスにある <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceExpression">
      <summary vsli:raw="Represents a reference to a data type.">データ型への参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified type.">指定された型を使用して、<see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type to reference.">参照するデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified data type name.">データ型名を指定して、<see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The name of the data type to reference.">参照するデータ型の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeTypeReferenceExpression.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeTypeReferenceExpression&quot; /&gt; class using the specified data type.">データ型を指定して、<see cref="T:System.CodeDom.CodeTypeReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="An instance of the data type to reference.">参照するデータ型のインスタンス。</param>
    </member>
    <member name="P:System.CodeDom.CodeTypeReferenceExpression.Type">
      <summary vsli:raw="Gets or sets the data type to reference.">参照するデータ型を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type to reference.">参照するデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeTypeReferenceOptions">
      <summary vsli:raw="Specifies how the code type reference is to be resolved.">コード型参照の解決方法を指定します。</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GenericTypeParameter">
      <summary vsli:raw="Resolve the type from the type parameter.">型パラメーターから型を解決します。</summary>
    </member>
    <member name="F:System.CodeDom.CodeTypeReferenceOptions.GlobalReference">
      <summary vsli:raw="Resolve the type from the root namespace.">ルート名前空間から型を解決します。</summary>
    </member>
    <member name="T:System.CodeDom.CodeVariableDeclarationStatement">
      <summary vsli:raw="Represents a variable declaration.">変数宣言を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified type and name.">型と名前を指定して、<see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the variable.">変数のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="name" vsli:raw="The name of the variable.">変数の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.CodeDom.CodeTypeReference,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">データ型、変数名、および初期化式を指定して、<see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type of the variable.">変数の型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <param name="name" vsli:raw="The name of the variable.">変数の名前。</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">変数の初期化式を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type name and variable name.">データ型名と変数名を指定して、<see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The name of the data type of the variable.">変数のデータ型の名前。</param>
      <param name="name" vsli:raw="The name of the variable.">変数の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.String,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">データ型、変数名、および初期化式を指定して、<see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The name of the data type of the variable.">変数のデータ型の名前。</param>
      <param name="name" vsli:raw="The name of the variable.">変数の名前。</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">変数の初期化式を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type and variable name.">データ型と変数名を指定して、<see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The data type for the variable.">変数のデータ型。</param>
      <param name="name" vsli:raw="The name of the variable.">変数の名前。</param>
    </member>
    <member name="M:System.CodeDom.CodeVariableDeclarationStatement.#ctor(System.Type,System.String,System.CodeDom.CodeExpression)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableDeclarationStatement&quot; /&gt; class using the specified data type, variable name, and initialization expression.">データ型、変数名、および初期化式を指定して、<see cref="T:System.CodeDom.CodeVariableDeclarationStatement" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="type" vsli:raw="The data type of the variable.">変数のデータ型。</param>
      <param name="name" vsli:raw="The name of the variable.">変数の名前。</param>
      <param name="initExpression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">変数の初期化式を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.InitExpression">
      <summary vsli:raw="Gets or sets the initialization expression for the variable.">変数の初期化式を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the initialization expression for the variable.">変数の初期化式を示す <see cref="T:System.CodeDom.CodeExpression" />。</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Name">
      <summary vsli:raw="Gets or sets the name of the variable.">変数の名前を取得します。値の設定も可能です。</summary>
      <returns vsli:raw="The name of the variable.">変数の名前。</returns>
    </member>
    <member name="P:System.CodeDom.CodeVariableDeclarationStatement.Type">
      <summary vsli:raw="Gets or sets the data type of the variable.">変数のデータ型を取得します。値の設定も可能です。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the data type of the variable.">変数のデータ型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</returns>
    </member>
    <member name="T:System.CodeDom.CodeVariableReferenceExpression">
      <summary vsli:raw="Represents a reference to a local variable.">ローカル変数への参照を表します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableReferenceExpression&quot; /&gt; class.">
        <see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.CodeVariableReferenceExpression.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.CodeVariableReferenceExpression&quot; /&gt; class using the specified local variable name.">ローカル変数名を指定して、<see cref="T:System.CodeDom.CodeVariableReferenceExpression" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="variableName" vsli:raw="The name of the local variable to reference.">参照されるローカル変数の名前。</param>
    </member>
    <member name="P:System.CodeDom.CodeVariableReferenceExpression.VariableName">
      <summary vsli:raw="Gets or sets the name of the local variable to reference.">参照されるローカル変数の名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the local variable to reference.">参照されるローカル変数の名前。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeCompiler">
      <summary vsli:raw="Provides an example implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; interface.">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> インターフェイスの実装例を提供します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeCompiler&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CodeCompiler" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.CmdArgsFromParameters(System.CodeDom.Compiler.CompilerParameters)">
      <summary vsli:raw="Gets the command arguments to be passed to the compiler from the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt;.">指定した <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> からコンパイラに渡されるコマンド引数を取得します。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; that indicates the compiler options.">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" />。</param>
      <returns vsli:raw="The command arguments.">コマンド引数。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Compiles the specified compile unit using the specified options, and returns the results from the compilation.">指定したオプションを使用して、指定したコンパイル単位をコンパイルし、そのコンパイル結果を返します。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; object that indicates the source to compile.">コンパイルするソースを示す <see cref="T:System.CodeDom.CodeCompileUnit" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The results of compilation.">コンパイルの結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles the specified compile units using the specified options, and returns the results from the compilation.">指定したオプションを使用して、指定した複数のコンパイル単位をコンパイルし、そのコンパイル結果を返します。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="ea" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects that indicates the source to compile.">コンパイルするソースを示す <see cref="T:System.CodeDom.CodeCompileUnit" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;ea&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="ea" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The results of compilation.">コンパイルの結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles the specified file using the specified options, and returns the results from the compilation.">指定したオプションを使用して、指定したファイルをコンパイルし、そのコンパイル結果を返します。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="fileName" vsli:raw="The file name to compile.">コンパイルするファイルの名前。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="fileName" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The results of compilation.">コンパイルの結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles the specified files using the specified options, and returns the results from the compilation.">指定したオプションを使用して、指定した複数のファイルをコンパイルし、そのコンパイル結果を返します。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="fileNames" vsli:raw="An array of strings that indicates the file names of the files to compile.">コンパイルするファイルの名前を示す文字列の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileNames&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="fileNames" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The results of compilation.">コンパイルの結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles the specified source code string using the specified options, and returns the results from the compilation.">指定したオプションを使用して、指定したソース コード文字列をコンパイルし、そのコンパイル結果を返します。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="source" vsli:raw="The source code string to compile.">コンパイルするソース コード文字列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The results of compilation.">コンパイルの結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.FromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles the specified source code strings using the specified options, and returns the results from the compilation.">指定したオプションを使用して、指定した複数のソース コード文字列をコンパイルし、そのコンパイル結果を返します。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="sources" vsli:raw="An array of strings containing the source code to compile.">コンパイルするソース コードを格納している文字列の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;sources&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="sources" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The results of compilation.">コンパイルの結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.GetResponseFileCmdArgs(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Gets the command arguments to use when invoking the compiler to generate a response file.">応答ファイルを生成するためにコンパイラを呼び出すときに使用するコマンド引数を取得します。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="cmdArgs" vsli:raw="A command arguments string.">コマンド引数文字列。</param>
      <returns vsli:raw="The command arguments to use to generate a response file, or &lt;see langword=&quot;null&quot; /&gt; if there are no response file arguments.">応答ファイルを生成するときに使用するコマンド引数。応答ファイルを生成するときに引数を指定しない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.JoinStringArray(System.String[],System.String)">
      <summary vsli:raw="Joins the specified string arrays.">指定した複数の文字列配列を結合します。</summary>
      <param name="sa" vsli:raw="The array of strings to join.">結合する文字列の配列。</param>
      <param name="separator" vsli:raw="The separator to use.">使用する区切り記号。</param>
      <returns vsli:raw="The concatenated string.">連結された文字列。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.ProcessCompilerOutputLine(System.CodeDom.Compiler.CompilerResults,System.String)">
      <summary vsli:raw="Processes the specified line from the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt;.">指定した <see cref="T:System.CodeDom.Compiler.CompilerResults" /> の指定した行を処理します。</summary>
      <param name="results" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; that indicates the results of compilation.">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" />。</param>
      <param name="line" vsli:raw="The line to process.">処理対象の行。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)" />」をご覧ください。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the source to compile.">コンパイルするソースを示す <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The results of compilation.">コンパイルの結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />」をご覧ください。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="ea" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects that indicates the source to compile.">コンパイルするソースを示す <see cref="T:System.CodeDom.CodeCompileUnit" /> オブジェクトの配列。</param>
      <returns vsli:raw="The results of compilation.">コンパイルの結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)" />」をご覧ください。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="fileName" vsli:raw="The file name to compile.">コンパイルするファイルの名前。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The results of compilation.">コンパイルの結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />」をご覧ください。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="fileNames" vsli:raw="An array of strings that indicates the file names to compile.">コンパイルするファイルの名前を示す文字列の配列。</param>
      <returns vsli:raw="The results of compilation.">コンパイルの結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)" />」をご覧ください。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="source" vsli:raw="A string that indicates the source code to compile.">コンパイルするソース コードを示す文字列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The results of compilation.">コンパイルの結果。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeCompiler.System#CodeDom#Compiler#ICodeCompiler#CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="For a description of this member, see &lt;see cref=&quot;M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])&quot; /&gt;.">このメンバーの詳細については、「<see cref="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])" />」をご覧ください。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler options.">コンパイラ オプションを示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="sources" vsli:raw="An array of strings that indicates the source code to compile.">コンパイルするソース コードを示す文字列の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;options&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="options" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The results of compilation.">コンパイルの結果。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.CompilerName">
      <summary vsli:raw="Gets the name of the compiler executable.">コンパイラ実行可能ファイルの名前を取得します。</summary>
      <returns vsli:raw="The name of the compiler executable.">コンパイラ実行可能ファイルの名前。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeCompiler.FileExtension">
      <summary vsli:raw="Gets the file name extension to use for source files.">ソース ファイルに使用するファイル名拡張子を取得します。</summary>
      <returns vsli:raw="The file name extension to use for source files.">ソース ファイルに使用するファイル名拡張子。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeDomProvider">
      <summary vsli:raw="Provides a base class for &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementations. This class is abstract.">
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> の実装の基本クラスを提供します。 このクラスは抽象クラスです。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles an assembly based on the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; trees contained in the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects, using the specified compiler settings.">指定したコンパイラ設定を使用して、指定した <see cref="N:System.CodeDom" /> オブジェクトの配列に含まれている <see cref="T:System.CodeDom.CodeCompileUnit" /> ツリーに基づいてアセンブリをコンパイルします。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for the compilation.">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="compilationUnits" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">コンパイルするコードを示す <see cref="T:System.CodeDom.CodeCompileUnit" /> 型の配列。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of the compilation.">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.">指定したコンパイラ設定を使用して、指定したファイルに格納されているソース コードからアセンブリをコンパイルします。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for the compilation.">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="fileNames" vsli:raw="An array of the names of the files to compile.">コンパイルするファイルの名前の配列。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.">指定したコンパイラ設定を使用して、ソース コードが格納されている指定した文字列の配列からアセンブリをコンパイルします。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the compiler settings for this compilation.">このコンパイルのコンパイラ設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="sources" vsli:raw="An array of source code strings to compile.">コンパイルするソース コード文字列の配列。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler&quot; /&gt; method is overridden in a derived class.">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
      <summary vsli:raw="When overridden in a derived class, creates a new code compiler.">派生クラスでオーバーライドされると、新しいコード コンパイラを作成します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeCompiler&quot; /&gt; that can be used for compilation of &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> ベースのソース コードをコンパイルするために使用できる <see cref="N:System.CodeDom" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">指定した値のエスケープ識別子を作成します。</summary>
      <param name="value" vsli:raw="The string for which to create an escaped identifier.">エスケープ識別子作成の対象となる文字列。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
      <returns vsli:raw="The escaped identifier for the value.">その値のエスケープ識別子。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator.">派生クラスでオーバーライドされると、新しいコード ジェネレーターを作成します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator using the specified &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; for output.">派生クラスでオーバーライドされると、出力用に指定されている <see cref="T:System.IO.TextWriter" /> を使用して、新しいコード ジェネレーターを作成します。</summary>
      <param name="output" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to use to output.">出力に使用する <see cref="T:System.IO.TextWriter" />。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
      <summary vsli:raw="When overridden in a derived class, creates a new code generator using the specified file name for output.">派生クラスでオーバーライドされると、出力用に指定されているファイル名を使用して、新しいコード ジェネレーターを作成します。</summary>
      <param name="fileName" vsli:raw="The file name to output to.">出力ファイル名。</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; that can be used to generate &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; based source code representations.">
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
      <summary vsli:raw="When overridden in a derived class, creates a new code parser.">派生クラスでオーバーライドされると、新しいコード パーサーを作成します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeParser&quot; /&gt; that can be used to parse source code. The base implementation always returns &lt;see langword=&quot;null&quot; /&gt;.">ソース コードを解析するために使用できる <see cref="T:System.CodeDom.Compiler.ICodeParser" />。 基本実装では、常に <see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the specified language.">指定した言語の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを取得します。</summary>
      <param name="language" vsli:raw="The language name.">言語名。</param>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; does not have a configured provider on this computer.">このコンピューターには、<paramref name="language" /> の構成済みのプロバイダーがありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="language" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
      <returns vsli:raw="A CodeDOM provider that is implemented for the specified language name.">指定した言語名に対して実装される CodeDOM プロバイダー。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the specified language and provider options.">指定された言語オプションおよびプロバイダー オプションの <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを取得します。</summary>
      <param name="language" vsli:raw="The language name.">言語名。</param>
      <param name="providerOptions" vsli:raw="A collection of provider options from the configuration file.">構成ファイルのプロバイダー オプションのコレクション。</param>
      <returns vsli:raw="A CodeDOM provider that is implemented for the specified language name and options.">指定した言語名およびオプションに対して実装される CodeDOM プロバイダー。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">指定した値の有効な識別子を作成します。</summary>
      <param name="value" vsli:raw="The string for which to generate a valid identifier.">有効な識別子生成の対象となる文字列。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
      <returns vsli:raw="A valid identifier for the specified value.">指定した値の有効な識別子。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.">指定した CodeDOM (Code Document Object Model) コンパイル単位のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
      <param name="compileUnit" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; for which to generate code.">コード生成の対象となる <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which the output code is sent.">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.">指定した CodeDOM (Code Document Object Model) 式のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
      <param name="expression" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; object that indicates the expression for which to generate code.">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.">指定した CodeDOM (Code Document Object Model) メンバー宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
      <param name="member" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeMember&quot; /&gt; object that indicates the member for which to generate code.">コード生成の対象となるメンバーを示す <see cref="T:System.CodeDom.CodeTypeMember" /> オブジェクト。</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="This method is not overridden in a derived class.">このメソッドは、派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.">指定した CodeDOM (Code Document Object Model) 名前空間のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
      <param name="codeNamespace" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; object that indicates the namespace for which to generate code.">コード生成の対象となる名前空間を示す <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクト。</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.">指定した CodeDOM (Code Document Object Model) ステートメントのコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
      <param name="statement" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the CodeDOM elements for which to generate code.">コード生成の対象となる CodeDOM 要素を格納する <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.">指定した CodeDOM (Code Document Object Model) 型宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
      <param name="codeType" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; object that indicates the type for which to generate code.">コード生成の対象となる型を示す <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクト。</param>
      <param name="writer" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to which output code is sent.">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
      <summary vsli:raw="Returns the language provider and compiler configuration settings for this computer.">このコンピューターの言語プロバイダーおよびコンパイラの構成設定を返します。</summary>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
      <returns vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; representing the settings of all configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementations.">構成済みのすべての <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 実装の設定を表す <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 型の配列。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
      <summary vsli:raw="Returns the language provider and compiler configuration settings for the specified language.">指定した言語の言語プロバイダーおよびコンパイラの構成設定を返します。</summary>
      <param name="language" vsli:raw="A language name.">言語名。</param>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; does not have a configured provider on this computer.">このコンピューターには、<paramref name="language" /> の構成済みのプロバイダーがありません。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="language" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; object populated with settings of the configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation.">構成済みの <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 実装の設定で作成された <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> オブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified data type.">指定したデータ ソースの <see cref="T:System.ComponentModel.TypeConverter" /> を取得します。</summary>
      <param name="type" vsli:raw="The type of object to retrieve a type converter for.">型コンバーターを取得する対象のオブジェクトの型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type, or &lt;see langword=&quot;null&quot; /&gt; if a &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; for the specified type cannot be found.">指定した型の <see cref="T:System.ComponentModel.TypeConverter" />。指定した型の <see cref="T:System.ComponentModel.TypeConverter" /> が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
      <summary vsli:raw="Returns a language name associated with the specified file name extension, as configured in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; compiler configuration section.">
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> のコンパイラ構成セクションに構成されている、指定したファイル名拡張子に関連付けられた言語名を返します。</summary>
      <param name="extension" vsli:raw="A file name extension.">ファイル名拡張子。</param>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; does not have a configured language provider on this computer.">このコンピューターには、<paramref name="extension" /> の構成済みの言語プロバイダーがありません。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="extension" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
      <returns vsli:raw="A language name associated with the file name extension, as configured in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; compiler configuration settings.">
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> のコンパイラ構成設定に構成されている、ファイル名拡張子に関連付けられた言語名。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">指定した <see cref="T:System.CodeDom.CodeTypeReference" /> で示される型を取得します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type to return.">返される型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
      <returns vsli:raw="A text representation of the specified type, formatted for the language in which code is generated by this code generator. In Visual Basic, for example, passing in a &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; for the &lt;see cref=&quot;T:System.Int32&quot; /&gt; type will return &quot;Integer&quot;.">このコード ジェネレーターによってコードを生成する際に使用する言語用に書式設定された、指定した型のテキスト表現。 たとえば、Visual Basic では、<see cref="T:System.CodeDom.CodeTypeReference" /> 型の <see cref="T:System.Int32" /> を渡すと、"Integer" が返されます。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
      <summary vsli:raw="Tests whether a file name extension has an associated &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation configured on the computer.">コンピューター上に、ファイル名拡張子の関連する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されているかどうかを調べます。</summary>
      <param name="extension" vsli:raw="A file name extension.">ファイル名拡張子。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;extension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="extension" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation is configured for the specified file name extension; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したファイル名拡張子に対して、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
      <summary vsli:raw="Tests whether a language has a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation configured on the computer.">コンピューター上に、言語の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されているかどうかを調べます。</summary>
      <param name="language" vsli:raw="The language name.">言語名。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;language&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="language" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.Security.SecurityException" vsli:raw="The caller does not have the required permission.">呼び出し元に、必要なアクセス許可がありません。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation is configured for the specified language; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した言語に対して、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
      <summary vsli:raw="Returns a value that indicates whether the specified value is a valid identifier for the current language.">指定した値が現在の言語で有効な識別子かどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="The value to verify as a valid identifier.">有効な識別子かどうかを検査する値。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> パラメーターが有効な識別子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
      <summary vsli:raw="Compiles the code read from the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">指定したテキスト ストリームから読み取ったコードを <see cref="T:System.CodeDom.CodeCompileUnit" /> にコンパイルします。</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; object that is used to read the code to be parsed.">解析するコードの読み取りに使用する <see cref="T:System.IO.TextReader" /> オブジェクト。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that contains a representation of the parsed code.">コードの解析後の表現を格納する <see cref="T:System.CodeDom.CodeCompileUnit" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Returns a value indicating whether the specified code generation support is provided.">指定したコードを生成できるかどうかを示す値を返します。</summary>
      <param name="generatorSupport" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object that indicates the type of code generation support to verify.">検査するコード生成サポートの種類を示す <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> オブジェクト。</param>
      <exception cref="T:System.NotImplementedException" vsli:raw="Neither this method nor the &lt;see cref=&quot;M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator&quot; /&gt; method is overridden in a derived class.">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified code generation support is provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したコードを生成できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
      <summary vsli:raw="Gets the default file name extension to use for source code files in the current language.">現在の言語のソース コード ファイルに使用する既定のファイル名拡張子を取得します。</summary>
      <returns vsli:raw="A file name extension corresponding to the extension of the source files of the current language. The base implementation always returns &lt;see cref=&quot;F:System.String.Empty&quot; /&gt;.">現在の言語のソース ファイルの拡張子に対応するファイル名拡張子。 基本実装では、常に <see cref="F:System.String.Empty" /> を返します。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
      <summary vsli:raw="Gets a language features identifier.">言語機能識別子を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.LanguageOptions&quot; /&gt; that indicates special features of the language.">言語の特殊な機能を示す <see cref="T:System.CodeDom.Compiler.LanguageOptions" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGenerator">
      <summary vsli:raw="Provides an example implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeGenerator&quot; /&gt; interface. This class is abstract.">
        <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> インターフェイスの実装例を提供します。 このクラスは抽象クラスです。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGenerator&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CodeGenerator" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ContinueOnNewLine(System.String)">
      <summary vsli:raw="Generates a line-continuation character and outputs the specified string on a new line.">行連結文字を生成し、指定した文字列を新しい行に出力します。</summary>
      <param name="st" vsli:raw="The string to write on the new line.">新しい行に書き込まれる文字列。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">指定した値のエスケープ識別子を作成します。</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">エスケープ識別子を作成する対象の文字列。</param>
      <returns vsli:raw="The escaped identifier for the value.">その値のエスケープ識別子。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">指定した値の有効な識別子を作成します。</summary>
      <param name="value" vsli:raw="A string to create a valid identifier for.">有効な識別子を作成する対象の文字列。</param>
      <returns vsli:raw="A valid identifier for the value.">その値の有効な識別子。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArgumentReferenceExpression(System.CodeDom.CodeArgumentReferenceExpression)">
      <summary vsli:raw="Generates code for the specified argument reference expression.">指定した引数参照式のコードを生成します。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArgumentReferenceExpression&quot; /&gt; that indicates the expression to generate code for.">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeArgumentReferenceExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <summary vsli:raw="Generates code for the specified array creation expression.">指定した配列作成式のコードを生成します。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArrayCreateExpression&quot; /&gt; that indicates the expression to generate code for.">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeArrayCreateExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateArrayIndexerExpression(System.CodeDom.CodeArrayIndexerExpression)">
      <summary vsli:raw="Generates code for the specified array indexer expression.">指定した配列インデクサー式のコードを生成します。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeArrayIndexerExpression&quot; /&gt; that indicates the expression to generate code for.">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeArrayIndexerExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAssignStatement(System.CodeDom.CodeAssignStatement)">
      <summary vsli:raw="Generates code for the specified assignment statement.">指定した代入ステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAssignStatement&quot; /&gt; that indicates the statement to generate code for.">コード生成の対象となるステートメントを示す <see cref="T:System.CodeDom.CodeAssignStatement" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttachEventStatement(System.CodeDom.CodeAttachEventStatement)">
      <summary vsli:raw="Generates code for the specified attach event statement.">指定した結合イベント ステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttachEventStatement&quot; /&gt; that indicates the statement to generate code for.">コード生成の対象となるステートメントを示す <see cref="T:System.CodeDom.CodeAttachEventStatement" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsEnd(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute block end.">指定した属性ブロックの終了のコードを生成します。</summary>
      <param name="attributes" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the end of the attribute block to generate code for.">コード生成の対象となる属性ブロックの終了を示す <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateAttributeDeclarationsStart(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute block start.">指定した属性ブロックの開始のコードを生成します。</summary>
      <param name="attributes" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeAttributeDeclarationCollection&quot; /&gt; that indicates the start of the attribute block to generate code for.">コード生成の対象となる属性ブロックの開始を示す <see cref="T:System.CodeDom.CodeAttributeDeclarationCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBaseReferenceExpression(System.CodeDom.CodeBaseReferenceExpression)">
      <summary vsli:raw="Generates code for the specified base reference expression.">指定したベース参照式のコードを生成します。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBaseReferenceExpression&quot; /&gt; that indicates the expression to generate code for.">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeBaseReferenceExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateBinaryOperatorExpression(System.CodeDom.CodeBinaryOperatorExpression)">
      <summary vsli:raw="Generates code for the specified binary operator expression.">指定した二項演算式のコードを生成します。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeBinaryOperatorExpression&quot; /&gt; that indicates the expression to generate code for.">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeBinaryOperatorExpression" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <summary vsli:raw="Generates code for the specified cast expression.">指定したキャスト式のコードを生成します。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCastExpression&quot; /&gt; that indicates the expression to generate code for.">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeCastExpression" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified class member using the specified text writer and code generator options.">指定したテキスト ライターおよびコード ジェネレーターのオプションを使用して、指定したクラス メンバーのコードを生成します。</summary>
      <param name="member" vsli:raw="The class member to generate code for.">コード生成の対象となるクラス メンバー。</param>
      <param name="writer" vsli:raw="The text writer to output code to.">コードの出力先となるテキスト ライター。</param>
      <param name="options" vsli:raw="The options to use when generating the code.">コードの生成時に使用するオプション。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.CodeDom.Compiler.CodeGenerator.Output&quot; /&gt; property is not &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="P:System.CodeDom.Compiler.CodeGenerator.Output" /> プロパティは <see langword="null" /> ではありません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateComment(System.CodeDom.CodeComment)">
      <summary vsli:raw="Generates code for the specified comment.">指定したコメントのコードを生成します。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeComment&quot; /&gt; to generate code for.">コード生成の対象となる <see cref="T:System.CodeDom.CodeComment" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatement(System.CodeDom.CodeCommentStatement)">
      <summary vsli:raw="Generates code for the specified comment statement.">指定したコメント ステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="The statement to generate code for.">コード生成の対象となるステートメント。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;see cref=&quot;P:System.CodeDom.CodeCommentStatement.Comment&quot; /&gt; property of &lt;paramref name=&quot;e&quot; /&gt; is not set.">
        <paramref name="e" /> の <see cref="P:System.CodeDom.CodeCommentStatement.Comment" /> プロパティが設定されていません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <summary vsli:raw="Generates code for the specified comment statements.">指定した複数のコメント ステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnit(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the specified compile unit.">指定したコンパイル単位のコードを生成します。</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">コード生成の対象となるコンパイル単位。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitEnd(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the end of a compile unit.">コンパイル単位の終了のコードを生成します。</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">コード生成の対象となるコンパイル単位。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateCompileUnitStart(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the start of a compile unit.">コンパイル単位の開始のコードを生成します。</summary>
      <param name="e" vsli:raw="The compile unit to generate code for.">コード生成の対象となるコンパイル単位。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConditionStatement(System.CodeDom.CodeConditionStatement)">
      <summary vsli:raw="Generates code for the specified conditional statement.">指定した条件付きステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="The statement to generate code for.">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateConstructor(System.CodeDom.CodeConstructor,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified constructor.">指定したコンストラクターのコードを生成します。</summary>
      <param name="e" vsli:raw="The constructor to generate code for.">コード生成の対象となるコンストラクター。</param>
      <param name="c" vsli:raw="The type of the object that this constructor constructs.">このコンストラクターが構築するオブジェクトの型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDecimalValue(System.Decimal)">
      <summary vsli:raw="Generates code for the specified decimal value.">指定した 10 進値のコードを生成します。</summary>
      <param name="d" vsli:raw="The decimal value to generate code for.">コード生成の対象となる 10 進値。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDefaultValueExpression(System.CodeDom.CodeDefaultValueExpression)">
      <summary vsli:raw="Generates code for the specified reference to a default value.">既定値への指定した参照のコードを生成します。</summary>
      <param name="e" vsli:raw="The reference to generate code for.">コード生成の対象となる参照。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateCreateExpression(System.CodeDom.CodeDelegateCreateExpression)">
      <summary vsli:raw="Generates code for the specified delegate creation expression.">指定したデリゲート作成式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDelegateInvokeExpression(System.CodeDom.CodeDelegateInvokeExpression)">
      <summary vsli:raw="Generates code for the specified delegate invoke expression.">指定したデリゲート呼び出し式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectionExpression(System.CodeDom.CodeDirectionExpression)">
      <summary vsli:raw="Generates code for the specified direction expression.">指定した方向式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDirectives(System.CodeDom.CodeDirectiveCollection)">
      <summary vsli:raw="Generates code for the specified code directives.">指定したコード ディレクティブのコードを生成します。</summary>
      <param name="directives" vsli:raw="The code directives to generate code for.">コード生成の対象となるコード ディレクティブ。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateDoubleValue(System.Double)">
      <summary vsli:raw="Generates code for a double-precision floating point number.">倍精度浮動小数点数のコードを生成します。</summary>
      <param name="d" vsli:raw="The value to generate code for.">コード生成の対象となる値。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified entry point method.">指定したエントリ ポイント メソッドのコードを生成します。</summary>
      <param name="e" vsli:raw="The entry point for the code.">コードのエントリ ポイント。</param>
      <param name="c" vsli:raw="The code that declares the type.">型を宣言するコード。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEvent(System.CodeDom.CodeMemberEvent,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified event.">指定したイベントのコードを生成します。</summary>
      <param name="e" vsli:raw="The member event to generate code for.">コード生成の対象となるメンバー イベント。</param>
      <param name="c" vsli:raw="The type of the object that this event occurs on.">このイベントが発生するオブジェクトの型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateEventReferenceExpression(System.CodeDom.CodeEventReferenceExpression)">
      <summary vsli:raw="Generates code for the specified event reference expression.">指定したイベント参照式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpression(System.CodeDom.CodeExpression)">
      <summary vsli:raw="Generates code for the specified code expression.">指定したコード式のコードを生成します。</summary>
      <param name="e" vsli:raw="The code expression to generate code for.">コード生成の対象となるコード式。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="e" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt;.">
        <paramref name="e" /> は有効な <see cref="T:System.CodeDom.CodeStatement" /> ではありません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateExpressionStatement(System.CodeDom.CodeExpressionStatement)">
      <summary vsli:raw="Generates code for the specified expression statement.">指定した式ステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="The statement to generate code for.">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateField(System.CodeDom.CodeMemberField)">
      <summary vsli:raw="Generates code for the specified member field.">指定したメンバー フィールドのコードを生成します。</summary>
      <param name="e" vsli:raw="The field to generate code for.">コード生成の対象となるフィールド。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateFieldReferenceExpression(System.CodeDom.CodeFieldReferenceExpression)">
      <summary vsli:raw="Generates code for the specified field reference expression.">指定したフィールド参照式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateGotoStatement(System.CodeDom.CodeGotoStatement)">
      <summary vsli:raw="Generates code for the specified &lt;see langword=&quot;goto&quot; /&gt; statement.">指定した <see langword="goto" /> ステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIndexerExpression(System.CodeDom.CodeIndexerExpression)">
      <summary vsli:raw="Generates code for the specified indexer expression.">指定したインデクサー式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateIterationStatement(System.CodeDom.CodeIterationStatement)">
      <summary vsli:raw="Generates code for the specified iteration statement.">指定した繰り返しステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="The statement to generate code for.">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLabeledStatement(System.CodeDom.CodeLabeledStatement)">
      <summary vsli:raw="Generates code for the specified labeled statement.">指定したラベル付きステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="The statement to generate code for.">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <summary vsli:raw="Generates code for the specified line pragma end.">指定した line プラグマの終了のコードを生成します。</summary>
      <param name="e" vsli:raw="The end of the line pragma to generate code for.">コード生成の対象となる line プラグマの終了。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <summary vsli:raw="Generates code for the specified line pragma start.">指定した line プラグマの開始のコードを生成します。</summary>
      <param name="e" vsli:raw="The start of the line pragma to generate code for.">コード生成の対象となる line プラグマの開始。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified method.">指定したメソッドのコードを生成します。</summary>
      <param name="e" vsli:raw="The member method to generate code for.">コード生成の対象となるメンバー メソッド。</param>
      <param name="c" vsli:raw="The type of the object that this method occurs on.">このメソッドが出現するオブジェクトの型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <summary vsli:raw="Generates code for the specified method invoke expression.">指定したメソッド呼び出し式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <summary vsli:raw="Generates code for the specified method reference expression.">指定したメソッド参照式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateMethodReturnStatement(System.CodeDom.CodeMethodReturnStatement)">
      <summary vsli:raw="Generates code for the specified method return statement.">指定したメソッドの return ステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="The statement to generate code for.">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespace(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace.">指定した名前空間のコードを生成します。</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">コード生成の対象となる名前空間。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceEnd(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the end of a namespace.">名前空間の終了のコードを生成します。</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">コード生成の対象となる名前空間。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImport(System.CodeDom.CodeNamespaceImport)">
      <summary vsli:raw="Generates code for the specified namespace import.">指定した名前空間へのインポートのコードを生成します。</summary>
      <param name="e" vsli:raw="The namespace import to generate code for.">コード生成の対象となる名前空間インポート。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceImports(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace import.">指定した名前空間へのインポートのコードを生成します。</summary>
      <param name="e" vsli:raw="The namespace import to generate code for.">コード生成の対象となる名前空間インポート。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaces(System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Generates code for the namespaces in the specified compile unit.">指定したコンパイル単位にある名前空間のコードを生成します。</summary>
      <param name="e" vsli:raw="The compile unit to generate namespaces for.">名前空間生成の対象となるコンパイル単位。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateNamespaceStart(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the start of a namespace.">名前空間の開始のコードを生成します。</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">コード生成の対象となる名前空間。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateObjectCreateExpression(System.CodeDom.CodeObjectCreateExpression)">
      <summary vsli:raw="Generates code for the specified object creation expression.">指定したオブジェクト作成式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateParameterDeclarationExpression(System.CodeDom.CodeParameterDeclarationExpression)">
      <summary vsli:raw="Generates code for the specified parameter declaration expression.">指定したパラメーター宣言式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePrimitiveExpression(System.CodeDom.CodePrimitiveExpression)">
      <summary vsli:raw="Generates code for the specified primitive expression.">指定したプリミティブ式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; uses an invalid data type. Only the following data types are valid:  &#xA;  &#xA;- string  &#xA;  &#xA;- char  &#xA;  &#xA;- byte  &#xA;  &#xA;- Int16  &#xA;  &#xA;- Int32  &#xA;  &#xA;- Int64  &#xA;&#xA;- Half&#xA;  &#xA;- Single  &#xA;  &#xA;- Double  &#xA;  &#xA;- Decimal">
        <paramref name="e" /> は無効なデータ型を使用しています。 次のデータ型のみが有効です。 
-   string 
-   char 
-   byte 
-   Int16 
-   Int32 
-   Int64 
-   Single 
-   Double 
-   Decimal</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateProperty(System.CodeDom.CodeMemberProperty,System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified property.">指定したプロパティのコードを生成します。</summary>
      <param name="e" vsli:raw="The property to generate code for.">コード生成の対象となるプロパティ。</param>
      <param name="c" vsli:raw="The type of the object that this property occurs on.">このプロパティが出現するオブジェクトの型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertyReferenceExpression(System.CodeDom.CodePropertyReferenceExpression)">
      <summary vsli:raw="Generates code for the specified property reference expression.">指定したプロパティ参照式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GeneratePropertySetValueReferenceExpression(System.CodeDom.CodePropertySetValueReferenceExpression)">
      <summary vsli:raw="Generates code for the specified property set value reference expression.">指定したプロパティ セット値参照式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateRemoveEventStatement(System.CodeDom.CodeRemoveEventStatement)">
      <summary vsli:raw="Generates code for the specified remove event statement.">指定した削除イベント ステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="The statement to generate code for.">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSingleFloatValue(System.Single)">
      <summary vsli:raw="Generates code for a single-precision floating point number.">単精度浮動小数点数のコードを生成します。</summary>
      <param name="s" vsli:raw="The value to generate code for.">コード生成の対象となる値。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetCompileUnit(System.CodeDom.CodeSnippetCompileUnit)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment compile unit.">指定したリテラル コード片コンパイル単位のコードを出力します。</summary>
      <param name="e" vsli:raw="The literal code fragment compile unit to generate code for.">コード生成の対象となるリテラル コード片コンパイル単位。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetExpression(System.CodeDom.CodeSnippetExpression)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment expression.">指定したリテラル コード片式のコードを出力します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetMember(System.CodeDom.CodeSnippetTypeMember)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment class member.">指定したリテラル コード片クラス メンバーのコードを出力します。</summary>
      <param name="e" vsli:raw="The member to generate code for.">コード生成の対象となるメンバー。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateSnippetStatement(System.CodeDom.CodeSnippetStatement)">
      <summary vsli:raw="Outputs the code of the specified literal code fragment statement.">指定したリテラル コード片ステートメントのコードを出力します。</summary>
      <param name="e" vsli:raw="The statement to generate code for.">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatement(System.CodeDom.CodeStatement)">
      <summary vsli:raw="Generates code for the specified statement.">指定したステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="The statement to generate code for.">コード生成の対象となるステートメント。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;e&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt;.">
        <paramref name="e" /> は有効な <see cref="T:System.CodeDom.CodeStatement" /> ではありません。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <summary vsli:raw="Generates code for the specified statement collection.">指定したステートメント コレクションのコードを生成します。</summary>
      <param name="stmts" vsli:raw="" />
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThisReferenceExpression(System.CodeDom.CodeThisReferenceExpression)">
      <summary vsli:raw="Generates code for the specified this reference expression.">指定した this 参照式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateThrowExceptionStatement(System.CodeDom.CodeThrowExceptionStatement)">
      <summary vsli:raw="Generates code for the specified throw exception statement.">指定した throw 例外ステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="The statement to generate code for.">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTryCatchFinallyStatement(System.CodeDom.CodeTryCatchFinallyStatement)">
      <summary vsli:raw="Generates code for the specified &lt;c&gt;try-catch-finally&lt;/c&gt; statement.">指定した <c>try-catch-finally</c> ステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="The statement to generate code for.">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeConstructor(System.CodeDom.CodeTypeConstructor)">
      <summary vsli:raw="Generates code for the specified class constructor.">指定したクラス コンストラクターのコードを生成します。</summary>
      <param name="e" vsli:raw="The class constructor to generate code for.">コード生成の対象となるクラス コンストラクター。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeEnd(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified end of the class.">指定したクラスの終了のコードを生成します。</summary>
      <param name="e" vsli:raw="The end of the class to generate code for.">コード生成の対象となるクラスの終了。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <summary vsli:raw="Generates code for the specified type of expression.">指定した型の式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeReferenceExpression(System.CodeDom.CodeTypeReferenceExpression)">
      <summary vsli:raw="Generates code for the specified type reference expression.">指定した型参照式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypes(System.CodeDom.CodeNamespace)">
      <summary vsli:raw="Generates code for the specified namespace and the classes it contains.">指定した名前空間とその名前空間に格納されているクラスのコードを生成します。</summary>
      <param name="e" vsli:raw="The namespace to generate classes for.">クラス生成の対象となる名前空間。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateTypeStart(System.CodeDom.CodeTypeDeclaration)">
      <summary vsli:raw="Generates code for the specified start of the class.">指定したクラスの開始のコードを生成します。</summary>
      <param name="e" vsli:raw="The start of the class to generate code for.">コード生成の対象となるクラスの開始。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableDeclarationStatement(System.CodeDom.CodeVariableDeclarationStatement)">
      <summary vsli:raw="Generates code for the specified variable declaration statement.">指定した変数宣言ステートメントのコードを生成します。</summary>
      <param name="e" vsli:raw="The statement to generate code for.">コード生成の対象となるステートメント。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GenerateVariableReferenceExpression(System.CodeDom.CodeVariableReferenceExpression)">
      <summary vsli:raw="Generates code for the specified variable reference expression.">指定した変数参照式のコードを生成します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the name of the specified data type.">指定したデータ型の名前を取得します。</summary>
      <param name="value" vsli:raw="The type whose name will be returned.">名前が返される型。</param>
      <returns vsli:raw="The name of the data type reference.">データ型参照の名前。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified value is a valid identifier.">指定した値が有効な識別子かどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The value to test for conflicts with valid identifiers.">有効な識別子と競合するかどうかをテストする対象の値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">値が有効な識別子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.IsValidLanguageIndependentIdentifier(System.String)">
      <summary vsli:raw="Gets a value indicating whether the specified string is a valid identifier.">指定した文字列が有効な識別子かどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The string to test for validity.">有効かどうかをテストする対象の文字列。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified string is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した文字列が有効な識別子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeArgument(System.CodeDom.CodeAttributeArgument)">
      <summary vsli:raw="Outputs an argument in an attribute block.">属性ブロックにある引数を出力します。</summary>
      <param name="arg" vsli:raw="The attribute argument to generate code for.">コード生成の対象となる属性引数。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <summary vsli:raw="Generates code for the specified attribute declaration collection.">指定した属性宣言コレクションのコードを生成します。</summary>
      <param name="attributes" vsli:raw="The attributes to generate code for.">コード生成の対象となる属性。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputDirection(System.CodeDom.FieldDirection)">
      <summary vsli:raw="Generates code for the specified &lt;see cref=&quot;T:System.CodeDom.FieldDirection&quot; /&gt;.">指定した <see cref="T:System.CodeDom.FieldDirection" /> のコードを生成します。</summary>
      <param name="dir" vsli:raw="One of the enumeration values that indicates the attribute of the field.">フィールドの属性を示す列挙値の 1 つ。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection)">
      <summary vsli:raw="Generates code for the specified expression list.">指定した式リストのコードを生成します。</summary>
      <param name="expressions" vsli:raw="The expressions to generate code for.">コード生成の対象となる式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputExpressionList(System.CodeDom.CodeExpressionCollection,System.Boolean)">
      <summary vsli:raw="Generates code for the specified expression list.">指定した式リストのコードを生成します。</summary>
      <param name="expressions" vsli:raw="The expressions to generate code for.">コード生成の対象となる式。</param>
      <param name="newlineBetweenItems" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to insert a new line after each item; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">各項目の後に改行文字を挿入する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputFieldScopeModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Outputs a field scope modifier that corresponds to the specified attributes.">指定した属性に対応するフィールド スコープ修飾子を出力します。</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that specifies the attributes.">属性を指定する列挙値の 1 つ。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputIdentifier(System.String)">
      <summary vsli:raw="Outputs the specified identifier.">指定した識別子を出力します。</summary>
      <param name="ident" vsli:raw="The identifier to output.">出力する識別子。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Generates code for the specified member access modifier.">指定したメンバー アクセス修飾子のコードを生成します。</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the member access modifier to generate code for.">コード生成の対象となるメンバー アクセス修飾子を示す列挙値の 1 つ。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <summary vsli:raw="Generates code for the specified member scope modifier.">指定したメンバー スコープ修飾子のコードを生成します。</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the member scope modifier to generate code for.">コード生成の対象となるメンバー スコープ修飾子を示す列挙値の 1 つ。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputOperator(System.CodeDom.CodeBinaryOperatorType)">
      <summary vsli:raw="Generates code for the specified operator.">指定した演算子のコードを生成します。</summary>
      <param name="op" vsli:raw="The operator to generate code for.">コード生成の対象となる演算子。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <summary vsli:raw="Generates code for the specified parameters.">指定したパラメーターのコードを生成します。</summary>
      <param name="parameters" vsli:raw="The parameter declaration expressions to generate code for.">コード生成の対象となるパラメーター宣言式。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputType(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Generates code for the specified type.">指定した型のコードを生成します。</summary>
      <param name="typeRef" vsli:raw="The type to generate code for.">コード生成の対象となる型。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeAttributes(System.Reflection.TypeAttributes,System.Boolean,System.Boolean)">
      <summary vsli:raw="Generates code for the specified type attributes.">指定した型属性のコードを生成します。</summary>
      <param name="attributes" vsli:raw="One of the enumeration values that indicates the type attributes to generate code for.">コード生成の対象となる型属性を示す列挙値の 1 つ。</param>
      <param name="isStruct" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is a struct; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型が構造体である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
      <param name="isEnum" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is an enum; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型が列挙型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.OutputTypeNamePair(System.CodeDom.CodeTypeReference,System.String)">
      <summary vsli:raw="Generates code for the specified object type and name pair.">指定したオブジェクト型とオブジェクト名の組み合わせのコードを生成します。</summary>
      <param name="typeRef" vsli:raw="The type.">型。</param>
      <param name="name" vsli:raw="The name for the object.">オブジェクトの名前。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.QuoteSnippetString(System.String)">
      <summary vsli:raw="Converts the specified string by formatting it with escape codes.">エスケープ コード書式を付けることによって、指定した文字列を変換します。</summary>
      <param name="value" vsli:raw="The string to convert.">変換する文字列。</param>
      <returns vsli:raw="The converted string.">変換された文字列。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the specified code generation support is provided.">指定したコードを生成できるかどうかを示す値を取得します。</summary>
      <param name="support" vsli:raw="The type of code generation support to test for.">コードを生成できるかどうかをテストする対象の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified code generation support is provided; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したコードを生成できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">指定した値のエスケープ識別子を作成します。</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">エスケープ識別子を作成する対象の文字列。</param>
      <returns vsli:raw="The escaped identifier for the value.">その値のエスケープ識別子。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">指定した値の有効な識別子を作成します。</summary>
      <param name="value" vsli:raw="The string to generate a valid identifier for.">有効な識別子を作成する対象の文字列。</param>
      <returns vsli:raw="A valid identifier for the specified value.">指定した値の有効な識別子。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.">指定した Code Document Object Model (CodeDOM) の コンパイル ユニットのコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e" vsli:raw="The CodeDOM compilation unit to generate code for.">コードを生成する CodeDOM コンパイル ユニット。</param>
      <param name="w" vsli:raw="The text writer to output code to.">コードの出力先となるテキスト ライター。</param>
      <param name="o" vsli:raw="The options to use for generating code.">コード生成に使用するオプション。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> が使用できません。 メソッドの呼び出しが行われる前に <paramref name="w" /> が閉じられた可能性があります。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.">指定した Code Document Object Model (CodeDOM) の式のコードを生成し、指定したテキスト ライターに出力します。</summary>
      <param name="e" vsli:raw="The expression to generate code for.">コードを生成する式。</param>
      <param name="w" vsli:raw="The text writer to output code to.">コードの出力先となるテキスト ライター。</param>
      <param name="o" vsli:raw="The options to use for generating code.">コード生成に使用するオプション。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> が使用できません。 メソッドの呼び出しが行われる前に <paramref name="w" /> が閉じられた可能性があります。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.">指定した Code Document Object Model (CodeDOM) の名前空間のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e" vsli:raw="The namespace to generate code for.">コード生成の対象となる名前空間。</param>
      <param name="w" vsli:raw="The text writer to output code to.">コードの出力先となるテキスト ライター。</param>
      <param name="o" vsli:raw="The options to use for generating code.">コード生成に使用するオプション。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> が使用できません。 メソッドの呼び出しが行われる前に <paramref name="w" /> が閉じられた可能性があります。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.">指定した Code Document Object Model (CodeDOM) のステートメントのコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e" vsli:raw="The statement that contains the CodeDOM elements to translate.">翻訳する CodeDOM 要素を含むステートメント。</param>
      <param name="w" vsli:raw="The text writer to output code to.">コードの出力先となるテキスト ライター。</param>
      <param name="o" vsli:raw="The options to use for generating code.">コード生成に使用するオプション。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> が使用できません。 メソッドの呼び出しが行われる前に <paramref name="w" /> が閉じられた可能性があります。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.">指定した Code Document Object Model (CodeDOM) の型宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e" vsli:raw="The type to generate code for.">コード生成の対象となる型。</param>
      <param name="w" vsli:raw="The text writer to output code to.">コードの出力先となるテキスト ライター。</param>
      <param name="o" vsli:raw="The options to use for generating code.">コード生成に使用するオプション。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;w&quot; /&gt; is not available. &lt;paramref name=&quot;w&quot; /&gt; may have been closed before the method call was made.">
        <paramref name="w" /> が使用できません。 メソッドの呼び出しが行われる前に <paramref name="w" /> が閉じられた可能性があります。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">指定した <see cref="T:System.CodeDom.CodeTypeReference" /> で示される型を取得します。</summary>
      <param name="type" vsli:raw="The type to return.">返す型。</param>
      <returns vsli:raw="The name of the data type reference.">データ型参照の名前。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value that indicates whether the specified value is a valid identifier for the current language.">指定した値が現在の言語で有効な識別子かどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The value to test.">テストする値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> パラメーターが有効な識別子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the generator provides support for the language features represented by the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object.">ジェネレーターが、指定した <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> オブジェクトで表される言語機能のサポートを提供するかどうかを示す値を取得します。</summary>
      <param name="support" vsli:raw="The capabilities to test the generator for.">コード ジェネレーターがサポートしているかどうかをテストする対象の機能。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified capabilities are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した機能がサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.System#CodeDom#Compiler#ICodeGenerator#ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified value is not a valid identifier.">指定した値が有効な識別子ではない場合に、例外をスローします。</summary>
      <param name="value" vsli:raw="The identifier to validate.">検証する識別子。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified string is not a valid identifier.">指定した文字列が有効な識別子ではない場合に、例外をスローします。</summary>
      <param name="value" vsli:raw="The identifier to test for validity as an identifier.">識別子として有効かどうかをテストする対象の識別子。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified identifier is invalid or conflicts with reserved or language keywords.">指定した識別子が無効な場合、または予約済みキーワードや言語キーワードと競合する場合。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGenerator.ValidateIdentifiers(System.CodeDom.CodeObject)">
      <summary vsli:raw="Attempts to validate each identifier field contained in the specified &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; or &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; tree.">指定した <see cref="T:System.CodeDom.CodeObject" /> または <see cref="N:System.CodeDom" /> のツリーに格納されている各識別子フィールドの検証を試みます。</summary>
      <param name="e" vsli:raw="An object to test for invalid identifiers.">無効な識別子をテストするオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified &lt;see cref=&quot;T:System.CodeDom.CodeObject&quot; /&gt; contains an invalid identifier.">指定した <see cref="T:System.CodeDom.CodeObject" /> に無効な識別子が含まれています。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentClass">
      <summary vsli:raw="Gets the code type declaration for the current class.">現在のクラスのコード型宣言を取得します。</summary>
      <returns vsli:raw="The code type declaration for the current class.">現在のクラスのコード型宣言。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMember">
      <summary vsli:raw="Gets the current member of the class.">クラスの現在のメンバーを取得します。</summary>
      <returns vsli:raw="The current member of the class.">クラスの現在のメンバー。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentMemberName">
      <summary vsli:raw="Gets the current member name.">現在のメンバーの名前を取得します。</summary>
      <returns vsli:raw="The name of the current member.">現在のメンバーの名前。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.CurrentTypeName">
      <summary vsli:raw="Gets the current class name.">現在のクラスの名前を取得します。</summary>
      <returns vsli:raw="The current class name.">現在のクラスの名前。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Indent">
      <summary vsli:raw="Gets or sets the amount of spaces to indent each indentation level.">各インデント レベルにインデント幅として適用する空白文字の数を取得または設定します。</summary>
      <returns vsli:raw="The number of spaces to indent for each indentation level.">各インデント レベルにインデント幅として適用する空白文字の数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentClass">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a class.">生成されている現在のオブジェクトがクラスかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a class; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のオブジェクトがクラスである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentDelegate">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a delegate.">生成されている現在のオブジェクトがデリゲートかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a delegate; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のオブジェクトがデリゲートである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentEnum">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is an enumeration.">生成されている現在のオブジェクトが列挙体かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is an enumeration; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のオブジェクトが列挙体である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentInterface">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is an interface.">生成されている現在のオブジェクトがインターフェイスかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is an interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のオブジェクトがインターフェイスである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.IsCurrentStruct">
      <summary vsli:raw="Gets a value indicating whether the current object being generated is a value type or struct.">生成されている現在のオブジェクトが値型または構造体かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object is a value type or struct; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のオブジェクトが値型または構造体である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.NullToken">
      <summary vsli:raw="Gets the token that represents &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="null" /> を表すトークンを取得します。</summary>
      <returns vsli:raw="The token that represents &lt;see langword=&quot;null&quot; /&gt;.">
        <see langword="null" /> を表すトークン。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Options">
      <summary vsli:raw="Gets the options to be used by the code generator.">コード ジェネレーターで使用されるオプションを取得します。</summary>
      <returns vsli:raw="An object that indicates the options for the code generator to use.">コード ジェネレーターで使用されるオプションを示すオブジェクト。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGenerator.Output">
      <summary vsli:raw="Gets the text writer to use for output.">出力に使用するテキスト ライターを取得します。</summary>
      <returns vsli:raw="The text writer to use for output.">出力に使用するテキスト ライター。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeGeneratorOptions">
      <summary vsli:raw="Represents a set of options used by a code generator.">コード ジェネレーターで使用するオプションのセットを表します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeGeneratorOptions.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BlankLinesBetweenMembers">
      <summary vsli:raw="Gets or sets a value indicating whether to insert blank lines between members.">各メンバーの間に空行を挿入するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if blank lines should be inserted; otherwise, &lt;see langword=&quot;false&quot; /&gt;. By default, the value of this property is &lt;see langword=&quot;true&quot; /&gt;.">空行を挿入する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定では、このプロパティの値は <see langword="true" /> です。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.BracingStyle">
      <summary vsli:raw="Gets or sets the style to use for bracing.">中かっこの記述時に適用するスタイルを取得または設定します。</summary>
      <returns vsli:raw="A string containing the bracing style to use.">使用する中かっこスタイルを格納している文字列。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.ElseOnClosing">
      <summary vsli:raw="Gets or sets a value indicating whether to append an &lt;see langword=&quot;else&quot; /&gt;, &lt;see langword=&quot;catch&quot; /&gt;, or &lt;see langword=&quot;finally&quot; /&gt; block, including brackets, at the closing line of each previous &lt;see langword=&quot;if&quot; /&gt; or &lt;see langword=&quot;try&quot; /&gt; block.">
        <see langword="else" />、<see langword="catch" />、<see langword="finally" /> の各ブロックを中かっこも含め、先行する <see langword="if" /> ブロックまたは <see langword="try" /> ブロックの終了行に追加するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an else should be appended; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value of this property is &lt;see langword=&quot;false&quot; /&gt;.">else を追加する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 このプロパティの既定値は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.IndentString">
      <summary vsli:raw="Gets or sets the string to use for indentations.">インデントに使用する文字列を取得または設定します。</summary>
      <returns vsli:raw="A string containing the characters to use for indentations.">インデントに使用する文字を格納している文字列。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.Item(System.String)">
      <summary vsli:raw="Gets or sets the object at the specified index.">指定したインデックスにあるオブジェクトを取得または設定します。</summary>
      <param name="index" vsli:raw="The name associated with the object to retrieve.">取得するオブジェクトに関連付けられた名前。</param>
      <returns vsli:raw="The object associated with the specified name. If no object associated with the specified name exists in the collection, &lt;see langword=&quot;null&quot; /&gt;.">指定した名前に関連付けられているオブジェクト。 指定した名前に関連付けられたオブジェクトがコレクションに存在しない場合は、<see langword="null" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CodeGeneratorOptions.VerbatimOrder">
      <summary vsli:raw="Gets or sets a value indicating whether to generate members in the order in which they occur in member collections.">メンバーがメンバー コレクションに現れる順番でメンバーを生成するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to generate the members in the order in which they occur in the member collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value of this property is &lt;see langword=&quot;false&quot; /&gt;.">メンバーがメンバー コレクションに現れる順番でメンバーを生成する場合は、<see langword="true" />。それ以外の場合は <see langword="false" />。 このプロパティの既定値は <see langword="false" /> です。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CodeParser">
      <summary vsli:raw="Provides an empty implementation of the &lt;see cref=&quot;T:System.CodeDom.Compiler.ICodeParser&quot; /&gt; interface.">
        <see cref="T:System.CodeDom.Compiler.ICodeParser" /> インターフェイスの空実装を提供します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeParser&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CodeParser" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CodeParser.Parse(System.IO.TextReader)">
      <summary vsli:raw="Compiles the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">指定したテキスト ストリームを <see cref="T:System.CodeDom.CodeCompileUnit" /> にコンパイルします。</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; that is used to read the code to be parsed.">解析するコードの読み取りに使用する <see cref="T:System.IO.TextReader" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; containing the code model produced from parsing the code.">コードの解析から生成されるコード モデルを格納した <see cref="T:System.CodeDom.CodeCompileUnit" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerError">
      <summary vsli:raw="Represents a compiler error or warning.">コンパイラのエラーまたは警告を表します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.#ctor(System.String,System.Int32,System.Int32,System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; class using the specified file name, line, column, error number, and error text.">ファイル名、行、列、エラー番号、およびエラー テキストを指定して、<see cref="T:System.CodeDom.Compiler.CompilerError" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="fileName" vsli:raw="The file name of the file that the compiler was compiling when it encountered the error.">エラーの発生時に、コンパイラによってコンパイルされていたファイルの名前。</param>
      <param name="line" vsli:raw="The line of the source of the error.">エラーの原因となった行。</param>
      <param name="column" vsli:raw="The column of the source of the error.">エラーの原因となった列。</param>
      <param name="errorNumber" vsli:raw="The error number of the error.">エラーのエラー番号。</param>
      <param name="errorText" vsli:raw="The error message text.">エラー メッセージ テキストです。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerError.ToString">
      <summary vsli:raw="Provides an implementation of Object's &lt;see cref=&quot;M:System.Object.ToString&quot; /&gt; method.">オブジェクトの <see cref="M:System.Object.ToString" /> メソッドの実装を提供します。</summary>
      <returns vsli:raw="A string representation of the compiler error.">コンパイラ エラーの文字列形式。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Column">
      <summary vsli:raw="Gets or sets the column number where the source of the error occurs.">エラーの原因となった列の番号を取得または設定します。</summary>
      <returns vsli:raw="The column number of the source file where the compiler encountered the error.">コンパイラでエラーが発生したソース ファイルの列の番号。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorNumber">
      <summary vsli:raw="Gets or sets the error number.">エラー番号を取得または設定します。</summary>
      <returns vsli:raw="The error number as a string.">エラー番号を示す文字列。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.ErrorText">
      <summary vsli:raw="Gets or sets the text of the error message.">エラー メッセージのテキストを取得または設定します。</summary>
      <returns vsli:raw="The text of the error message.">エラー メッセージのテキスト。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.FileName">
      <summary vsli:raw="Gets or sets the file name of the source file that contains the code which caused the error.">エラーの原因となったコードが含まれるソース ファイルのファイル名を取得または設定します。</summary>
      <returns vsli:raw="The file name of the source file that contains the code which caused the error.">エラーの原因となったコードが含まれるソース ファイルのファイル名。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.IsWarning">
      <summary vsli:raw="Gets or sets a value that indicates whether the error is a warning.">エラーが警告かどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the error is a warning; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">エラーが警告である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerError.Line">
      <summary vsli:raw="Gets or sets the line number where the source of the error occurs.">エラーの原因となった行の番号を取得または設定します。</summary>
      <returns vsli:raw="The line number of the source file where the compiler encountered the error.">コンパイラでエラーが発生したソース ファイルの行の番号。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerErrorCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerError[])">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; that contains the specified array of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects.">
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> オブジェクトの指定した配列を格納する <see cref="T:System.CodeDom.Compiler.CompilerError" /> の新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="An array of &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; objects to initialize the collection with.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.Compiler.CompilerError" /> オブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.#ctor(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; class that contains the contents of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">指定した <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> の内容を格納する、<see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; object with which to initialize the collection.">コレクションを初期化するために使用する <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Add(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Adds the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object to the error collection.">指定した <see cref="T:System.CodeDom.Compiler.CompilerError" /> オブジェクトをエラー コレクションに追加します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object to add.">追加する <see cref="T:System.CodeDom.Compiler.CompilerError" /> オブジェクト。</param>
      <returns vsli:raw="The index at which the new element was inserted.">新しい要素が挿入された位置のインデックス。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerError[])">
      <summary vsli:raw="Copies the elements of an array to the end of the error collection.">配列の要素をエラー コレクションの末尾にコピーします。</summary>
      <param name="value" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; that contains the objects to add to the collection.">コレクションに追加するオブジェクトを格納している <see cref="T:System.CodeDom.Compiler.CompilerError" /> 型の配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.AddRange(System.CodeDom.Compiler.CompilerErrorCollection)">
      <summary vsli:raw="Adds the contents of the specified compiler error collection to the end of the error collection.">指定したコンパイラ エラー コレクションの内容をエラー コレクションの末尾に追加します。</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; object that contains the objects to add to the collection.">コレクションに追加するオブジェクトが格納された <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Contains(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Gets a value that indicates whether the collection contains the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object.">指定した <see cref="T:System.CodeDom.Compiler.CompilerError" /> オブジェクトがコレクションに含まれているかどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to locate.">検索する <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; is contained in the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> がコレクションに含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.CopyTo(System.CodeDom.Compiler.CompilerError[],System.Int32)">
      <summary vsli:raw="Copies the collection values to a one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; instance at the specified index.">1 次元の <see cref="T:System.Array" /> インスタンスの指定したインデックス位置に、コレクション値をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the values copied from &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">
        <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> からコピーされる値のコピー先となる 1 次元 <see cref="T:System.Array" />。</param>
      <param name="index" vsli:raw="The index in the array at which to start copying.">配列のコピーを開始する位置のインデックス。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter is multidimensional.  &#xA;  &#xA; -or-  &#xA;  &#xA; The number of elements in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; is greater than the available space between the index value of the &lt;paramref name=&quot;arrayIndex&quot; /&gt; parameter in the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter and the end of the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter.">
        <paramref name="array" /> パラメーターに指定されている配列が多次元です。  
  
- または - 
<see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 内の要素の数が、<paramref name="arrayIndex" /> パラメーターで指定されている配列内の、<paramref name="array" /> パラメーターで指定されているインデックス値から、<paramref name="array" /> パラメーターで指定されている配列の末尾までで使用できる数を超えています。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;array&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;index&quot; /&gt; parameter is less than the lowbound of the array indicated by the &lt;paramref name=&quot;array&quot; /&gt; parameter.">
        <paramref name="index" /> パラメーターの値が、<paramref name="array" /> パラメーターで指定されている配列の下限値より小さくなっています。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.IndexOf(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Gets the index of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; object in the collection, if it exists in the collection.">指定した <see cref="T:System.CodeDom.Compiler.CompilerError" /> オブジェクトがコレクション内に存在する場合は、コレクション内でのそのインデックスを取得します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to locate.">検索する <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
      <returns vsli:raw="The index of the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; in the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;, if found; otherwise, -1.">指定した <see cref="T:System.CodeDom.Compiler.CompilerError" /> が <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" /> 内に存在する場合は、そのインデックス。それ以外の場合は -1。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Insert(System.Int32,System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Inserts the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; into the collection at the specified index.">コレクション内の指定したインデックス位置に、指定した <see cref="T:System.CodeDom.Compiler.CompilerError" /> を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index where the compiler error should be inserted.">コンパイラ エラーを挿入する位置の 0 から始まるインデックス番号。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to insert.">挿入する <see cref="T:System.CodeDom.Compiler.CompilerError" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerErrorCollection.Remove(System.CodeDom.Compiler.CompilerError)">
      <summary vsli:raw="Removes a specific &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; from the collection.">コレクションから特定の <see cref="T:System.CodeDom.Compiler.CompilerError" /> を削除します。</summary>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; to remove from the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt;.">
        <see cref="T:System.CodeDom.Compiler.CompilerError" /> から削除する <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The specified object is not found in the collection.">指定したオブジェクトがコレクション内で見つかりません。</exception>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasErrors">
      <summary vsli:raw="Gets a value that indicates whether the collection contains errors.">コレクションにエラーが格納されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションにエラーが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.HasWarnings">
      <summary vsli:raw="Gets a value that indicates whether the collection contains warnings.">コレクションに警告が格納されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection contains warnings; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションに警告が格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerErrorCollection.Item(System.Int32)">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; at the specified index.">指定したインデックス位置にある <see cref="T:System.CodeDom.Compiler.CompilerError" /> を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the entry to locate in the collection.">コレクションでエントリの位置を示す 0 から始まるインデックス番号。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The index value indicated by the &lt;paramref name=&quot;index&quot; /&gt; parameter is outside the valid range of indexes for the collection.">
        <paramref name="index" /> パラメーターに指定されているインデックス値が、コレクションのインデックスの有効範囲外にあります。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerError&quot; /&gt; at each valid index.">有効な各インデックスにある <see cref="T:System.CodeDom.Compiler.CompilerError" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerInfo">
      <summary vsli:raw="Represents the configuration settings of a language provider. This class cannot be inherited.">言語プロバイダーの構成設定を表します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateDefaultCompilerParameters">
      <summary vsli:raw="Gets the configured compiler settings for the language provider implementation.">言語プロバイダー実装の構成済みのコンパイラ設定を取得します。</summary>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; instance that contains the compiler options and settings configured for the language provider.">言語プロバイダー用に構成されたコンパイラ オプションおよびコンパイラ設定を格納する読み取り専用の <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> インスタンス。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the current language provider settings.">現在の言語プロバイダー設定の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを返します。</summary>
      <returns vsli:raw="A CodeDOM provider associated with the language provider configuration.">言語プロバイダーの構成に関連付けられた CodeDOM プロバイダー。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.CreateProvider(System.Collections.Generic.IDictionary{System.String,System.String})">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; instance for the current language provider settings and specified options.">現在の言語プロバイダー設定および指定されたオプションの <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを返します。</summary>
      <param name="providerOptions" vsli:raw="A collection of provider options from the configuration file.">構成ファイルのプロバイダー オプションのコレクション。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;providerOptions&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="providerOptions" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The provider does not support options.">プロバイダーでオプションがサポートされていません。</exception>
      <returns vsli:raw="A CodeDOM provider associated with the language provider configuration and specified options.">言語プロバイダーの構成および指定されたオプションに関連付けられた CodeDOM プロバイダー。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified object represents the same language provider and compiler settings as the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt;.">指定したオブジェクトが表す言語プロバイダー設定とコンパイラ設定が、現在の <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> と同一であるかどうかを判断します。</summary>
      <param name="o" vsli:raw="The object to compare with the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt;.">現在の <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> と比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; object and its value is the same as this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="o" /> が <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> オブジェクトで、このインスタンスと同じ値を保持している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetExtensions">
      <summary vsli:raw="Returns the file name extensions supported by the language provider.">言語プロバイダーがサポートするファイル名拡張子を返します。</summary>
      <returns vsli:raw="An array of file name extensions supported by the language provider.">言語プロバイダーがサポートするファイル名拡張子の配列。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current instance.">現在のインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code for the current &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerInfo&quot; /&gt; instance, suitable for use in hashing algorithms and data structures such as a hash table.">現在の <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> インスタンスの 32 ビット符号付き整数ハッシュ コード。ハッシュ アルゴリズムや、ハッシュ テーブルのようなデータ構造での使用に適しています。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerInfo.GetLanguages">
      <summary vsli:raw="Gets the language names supported by the language provider.">言語プロバイダーがサポートする言語名を取得します。</summary>
      <returns vsli:raw="An array of language names supported by the language provider.">言語プロバイダーがサポートする言語名の配列。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.CodeDomProviderType">
      <summary vsli:raw="Gets the type of the configured &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; implementation.">構成済みの <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装の種類を取得します。</summary>
      <exception cref="T:System.Configuration.ConfigurationException" vsli:raw="The language provider is not configured on this computer.">このコンピューターには、言語プロバイダーが構成されていません。</exception>
      <exception cref="T:System.Configuration.ConfigurationErrorsException" vsli:raw="Cannot locate the type because it is a &lt;see langword=&quot;null&quot; /&gt; or empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; Cannot locate the type because the name for the &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeDomProvider&quot; /&gt; cannot be found in the configuration file.">型が <see langword="null" /> または空の文字列のため、特定できません。  
  
- または - 
<see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> の名前が構成ファイルに見つからないため、型を特定できません。</exception>
      <returns vsli:raw="A read-only &lt;see cref=&quot;T:System.Type&quot; /&gt; instance that represents the configured language provider type.">構成済みの言語プロバイダーの種類を表す、読み取り専用の <see cref="T:System.Type" /> インスタンス。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerInfo.IsCodeDomProviderTypeValid">
      <summary vsli:raw="Returns a value indicating whether the language provider implementation is configured on the computer.">コンピューター上に言語プロバイダー実装が構成されているかどうかを示す値を返します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the language provider implementation type is configured on the computer; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンピューター上に言語プロバイダー実装の種類が構成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerParameters">
      <summary vsli:raw="Represents the parameters used to invoke a compiler.">コンパイラを呼び出すために使用するパラメーターを表します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class.">
        <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[])">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names.">指定したアセンブリ名を使用して、<see cref="T:System.CodeDom.Compiler.CompilerParameters" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">参照するアセンブリの名前。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names and output file name.">指定したアセンブリ名と出力ファイル名を使用して、<see cref="T:System.CodeDom.Compiler.CompilerParameters" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">参照するアセンブリの名前。</param>
      <param name="outputName" vsli:raw="The output file name.">出力ファイル名。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerParameters.#ctor(System.String[],System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; class using the specified assembly names, output name, and a value indicating whether to include debug information.">指定したアセンブリ名、出力名、デバッグ情報を含めるかどうかを示す値を使用して、<see cref="T:System.CodeDom.Compiler.CompilerParameters" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="assemblyNames" vsli:raw="The names of the assemblies to reference.">参照するアセンブリの名前。</param>
      <param name="outputName" vsli:raw="The output file name.">出力ファイル名。</param>
      <param name="includeDebugInformation" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include debug information; &lt;see langword=&quot;false&quot; /&gt; to exclude debug information.">デバッグ情報を含める場合は <see langword="true" />。デバッグ情報を除外する場合は <see langword="false" />。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CompilerOptions">
      <summary vsli:raw="Gets or sets optional command-line arguments to use when invoking the compiler.">コンパイラを起動するときに使用する、オプションのコマンド ライン引数を取得または設定します。</summary>
      <returns vsli:raw="Any additional command-line arguments for the compiler.">コンパイラに対する追加のコマンド ライン引数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.CoreAssemblyFileName">
      <summary vsli:raw="Gets or sets the name of the core or standard assembly that contains basic types such as &lt;see cref=&quot;T:System.Object&quot; /&gt;, &lt;see cref=&quot;T:System.String&quot; /&gt;, or &lt;see cref=&quot;T:System.Int32&quot; /&gt;.">
        <see cref="T:System.Object" />、<see cref="T:System.String" />、<see cref="T:System.Int32" /> などの基本型を含むコアまたは標準アセンブリの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the core assembly that contains basic types.">基本型を格納しているコア アセンブリの名前。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.EmbeddedResources">
      <summary vsli:raw="Gets the .NET resource files to include when compiling the assembly output.">アセンブリ出力をコンパイルするときに含める .NET Framework リソース ファイルを取得します。</summary>
      <returns vsli:raw="A collection that contains the file paths of .NET resources to include in the generated assembly.">生成されるアセンブリに含めるための .NET Framework リソースのファイル パスを格納するコレクション。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateExecutable">
      <summary vsli:raw="Gets or sets a value indicating whether to generate an executable.">実行可能ファイルを生成するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an executable should be generated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">実行可能ファイルを生成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.GenerateInMemory">
      <summary vsli:raw="Gets or sets a value indicating whether to generate the output in memory.">メモリ内で出力を生成するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the compiler should generate the output in memory; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンパイラがメモリ内で出力を生成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.IncludeDebugInformation">
      <summary vsli:raw="Gets or sets a value indicating whether to include debug information in the compiled executable.">コンパイルされた実行可能ファイルにデバッグ情報を含めるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if debug information should be generated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">デバッグ情報を生成する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.LinkedResources">
      <summary vsli:raw="Gets the .NET resource files that are referenced in the current source.">現在のソースで参照されている .NET Framework リソース ファイルを取得します。</summary>
      <returns vsli:raw="A collection that contains the file paths of .NET resources that are referenced by the source.">ソースによって参照される .NET Framework リソースのファイル パスを格納するコレクション。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.MainClass">
      <summary vsli:raw="Gets or sets the name of the main class.">main クラスの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the main class.">main クラスの名前。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.OutputAssembly">
      <summary vsli:raw="Gets or sets the name of the output assembly.">出力アセンブリの名前を取得または設定します。</summary>
      <returns vsli:raw="The name of the output assembly.">出力アセンブリの名前。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.ReferencedAssemblies">
      <summary vsli:raw="Gets the assemblies referenced by the current project.">現在のプロジェクトで参照されるアセンブリを取得します。</summary>
      <returns vsli:raw="A collection that contains the assembly names that are referenced by the source to compile.">コンパイルするソースで参照されるアセンブリ名を格納するコレクション。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TempFiles">
      <summary vsli:raw="Gets or sets the collection that contains the temporary files.">一時ファイルを格納するコレクションを取得または設定します。</summary>
      <returns vsli:raw="A collection that contains the temporary files.">一時ファイルを含むコレクション。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.TreatWarningsAsErrors">
      <summary vsli:raw="Gets or sets a value indicating whether to treat warnings as errors.">警告をエラーとして扱うかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if warnings should be treated as errors; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">警告をエラーとして扱う場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.UserToken">
      <summary vsli:raw="Gets or sets the user token to use when creating the compiler process.">コンパイラ プロセスを作成するときに使用するユーザー トークンを取得または設定します。</summary>
      <returns vsli:raw="The user token to use.">使用するユーザー トークン。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.WarningLevel">
      <summary vsli:raw="Gets or sets the warning level at which the compiler aborts compilation.">コンパイラがコンパイルを中止する警告レベルを取得または設定します。</summary>
      <returns vsli:raw="The warning level at which the compiler aborts compilation.">コンパイラがコンパイルを中止する警告レベル。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerParameters.Win32Resource">
      <summary vsli:raw="Gets or sets the file name of a Win32 resource file to link into the compiled assembly.">コンパイルされるアセンブリにリンクする Win32 リソース ファイルの名前を取得または設定します。</summary>
      <returns vsli:raw="A Win32 resource file that will be linked into the compiled assembly.">コンパイルされるアセンブリにリンクする Win32 リソース ファイル。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.CompilerResults">
      <summary vsli:raw="Represents the results of compilation that are returned from a compiler.">コンパイラから返されるコンパイル結果を表します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.CompilerResults.#ctor(System.CodeDom.Compiler.TempFileCollection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; class that uses the specified temporary files.">指定した一時ファイルを使用する <see cref="T:System.CodeDom.Compiler.CompilerResults" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">コンパイル時に生成された中間ファイルへの参照を管理し格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</param>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.CompiledAssembly">
      <summary vsli:raw="Gets or sets the compiled assembly.">コンパイル済みのアセンブリを取得または設定します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Reflection.Assembly&quot; /&gt; that indicates the compiled assembly.">コンパイル済みのアセンブリを示す <see cref="T:System.Reflection.Assembly" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Errors">
      <summary vsli:raw="Gets the collection of compiler errors and warnings.">コンパイラのエラーおよび警告のコレクションを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerErrorCollection&quot; /&gt; that indicates the errors and warnings resulting from compilation, if any.">コンパイルの結果エラーおよび警告が発生した場合は、そのエラーおよび警告を示す <see cref="T:System.CodeDom.Compiler.CompilerErrorCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.NativeCompilerReturnValue">
      <summary vsli:raw="Gets or sets the compiler's return value.">コンパイラからの戻り値を取得または設定します。</summary>
      <returns vsli:raw="The compiler's return value.">コンパイラからの戻り値。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.Output">
      <summary vsli:raw="Gets the compiler output messages.">コンパイラ出力メッセージを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Collections.Specialized.StringCollection&quot; /&gt; that contains the output messages.">出力メッセージを格納する <see cref="T:System.Collections.Specialized.StringCollection" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.PathToAssembly">
      <summary vsli:raw="Gets or sets the path of the compiled assembly.">コンパイル済みのアセンブリのパスを取得または設定します。</summary>
      <returns vsli:raw="The path of the assembly, or &lt;see langword=&quot;null&quot; /&gt; if the assembly was generated in memory.">アセンブリのパス。アセンブリがメモリ内に生成された場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.CompilerResults.TempFiles">
      <summary vsli:raw="Gets or sets the temporary file collection to use.">使用する一時ファイルのコレクションを取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">コンパイル時に生成された中間ファイルへの参照を管理し格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.Executor">
      <summary vsli:raw="Provides command execution functions for invoking compilers. This class cannot be inherited.">コンパイラを呼び出すためのコマンド実行関数を提供します。 このクラスは継承できません。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWait(System.String,System.CodeDom.Compiler.TempFileCollection)">
      <summary vsli:raw="Executes the command using the specified temporary files and waits for the call to return.">指定した一時ファイルを使用してコマンドを実行し、呼び出しが戻るのを待ちます。</summary>
      <param name="cmd" vsli:raw="The command to execute.">実行するコマンドです。</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">コンパイル時に生成された中間ファイルへの参照を管理し格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified user token and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.">指定したユーザー トークンと一時ファイルを使用して、指定したコマンドを実行し、それに対して返される呼び出しを待機します。また、指定した文字列にコンパイラからの出力およびエラー情報を格納します。</summary>
      <param name="userToken" vsli:raw="The token to start the compiler process with.">コンパイラ プロセスを開始するために使用するトークン。</param>
      <param name="cmd" vsli:raw="The command to execute.">実行するコマンドです。</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">コンパイル時に生成された中間ファイルへの参照を管理し格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">コンパイラによるメッセージ出力を格納する文字列への参照。</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">発生したエラーの名前を格納する文字列への参照。</param>
      <returns vsli:raw="The return value from the compiler.">コンパイラからの戻り値。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.IntPtr,System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified user token, current directory, and temporary files; then waits for the call to return, storing output and error information from the compiler in the specified strings.">指定したユーザー トークン、現在のディレクトリ、および一時ファイルを使用して、指定したコマンドを実行し、それに対して返される呼び出しを待機します。また、指定した文字列にコンパイラからの出力およびエラー情報を格納します。</summary>
      <param name="userToken" vsli:raw="The token to start the compiler process with.">コンパイラ プロセスを開始するために使用するトークン。</param>
      <param name="cmd" vsli:raw="The command to execute.">実行するコマンドです。</param>
      <param name="currentDir" vsli:raw="The directory to start the process in.">プロセスを開始するディレクトリ。</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">コンパイル時に生成された中間ファイルへの参照を管理し格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">コンパイラによるメッセージ出力を格納する文字列への参照。</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">発生したエラーの名前を格納する文字列への参照。</param>
      <returns vsli:raw="The return value from the compiler.">コンパイラからの戻り値。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified temporary files and waits for the call to return, storing output and error information from the compiler in the specified strings.">指定した一時ファイルを使用して、指定したコマンドを実行し、それに対して返される呼び出しを待機します。また、指定した文字列にコンパイラからの出力およびエラー情報を格納します。</summary>
      <param name="cmd" vsli:raw="The command to execute.">実行するコマンドです。</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">コンパイル時に生成された中間ファイルへの参照を管理し格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">コンパイラによるメッセージ出力を格納する文字列への参照。</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">発生したエラーの名前を格納する文字列への参照。</param>
      <returns vsli:raw="The return value from the compiler.">コンパイラからの戻り値。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.Executor.ExecWaitWithCapture(System.String,System.String,System.CodeDom.Compiler.TempFileCollection,System.String@,System.String@)">
      <summary vsli:raw="Executes the specified command using the specified current directory and temporary files, and waits for the call to return, storing output and error information from the compiler in the specified strings.">指定した現在のディレクトリと一時ファイルを使用して、指定したコマンドを実行し、それに対して返される呼び出しを待機します。また、指定した文字列にコンパイラからの出力およびエラー情報を格納します。</summary>
      <param name="cmd" vsli:raw="The command to execute.">実行するコマンドです。</param>
      <param name="currentDir" vsli:raw="The current directory.">現在のフォルダー。</param>
      <param name="tempFiles" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; with which to manage and store references to intermediate files generated during compilation.">コンパイル時に生成された中間ファイルへの参照を管理し格納する <see cref="T:System.CodeDom.Compiler.TempFileCollection" />。</param>
      <param name="outputName" vsli:raw="A reference to a string that will store the compiler's message output.">コンパイラによるメッセージ出力を格納する文字列への参照。</param>
      <param name="errorName" vsli:raw="A reference to a string that will store the name of the error or errors encountered.">発生したエラーの名前を格納する文字列への参照。</param>
      <returns vsli:raw="The return value from the compiler.">コンパイラからの戻り値。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.GeneratorSupport">
      <summary vsli:raw="Defines identifiers used to determine whether a code generator supports certain types of code elements.">コード ジェネレーターが特定の型のコード要素をサポートしているかどうかを判断するために使用する識別子を定義します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ArraysOfArrays">
      <summary vsli:raw="Indicates the generator supports arrays of arrays.">コード ジェネレーターが配列の配列をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.AssemblyAttributes">
      <summary vsli:raw="Indicates the generator supports assembly attributes.">コード ジェネレーターがアセンブリ属性をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ChainedConstructorArguments">
      <summary vsli:raw="Indicates the generator supports chained constructor arguments.">コード ジェネレーターがチェイン コンストラクター引数をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ComplexExpressions">
      <summary vsli:raw="Indicates the generator supports complex expressions.">コード ジェネレーターが複雑な式をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareDelegates">
      <summary vsli:raw="Indicates the generator supports delegate declarations.">コード ジェネレーターがデリゲートの宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEnums">
      <summary vsli:raw="Indicates the generator supports enumeration declarations.">コード ジェネレーターが列挙体の宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareEvents">
      <summary vsli:raw="Indicates the generator supports event declarations.">コード ジェネレーターがイベントの宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareIndexerProperties">
      <summary vsli:raw="Indicates the generator supports the declaration of indexer properties.">コード ジェネレーターがインデクサー プロパティの宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareInterfaces">
      <summary vsli:raw="Indicates the generator supports interface declarations.">コード ジェネレーターがインターフェイスの宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.DeclareValueTypes">
      <summary vsli:raw="Indicates the generator supports value type declarations.">コード ジェネレーターが値型の宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.EntryPointMethod">
      <summary vsli:raw="Indicates the generator supports a program entry point method designation. This is used when building executables.">コード ジェネレーターがプログラム エントリ ポイント メソッドの指定をサポートしていることを示します。 この識別子は、実行可能ファイルを作成するときに使用されます。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeDeclaration">
      <summary vsli:raw="Indicates the generator supports generic type declarations.">コード ジェネレーターがジェネリック型の宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GenericTypeReference">
      <summary vsli:raw="Indicates the generator supports generic type references.">コード ジェネレーターがジェネリック型参照をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.GotoStatements">
      <summary vsli:raw="Indicates the generator supports goto statements.">コード ジェネレーターが goto ステートメントをサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultidimensionalArrays">
      <summary vsli:raw="Indicates the generator supports referencing multidimensional arrays. Currently, the CodeDom cannot be used to instantiate multidimensional arrays.">コード ジェネレーターが多次元配列の参照をサポートしていることを示します。 現在、CodeDom を使用して多次元配列をインスタンス化することはできません。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.MultipleInterfaceMembers">
      <summary vsli:raw="Indicates the generator supports the declaration of members that implement multiple interfaces.">コード ジェネレーターが複数のインターフェイスを実装するメンバーの宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.NestedTypes">
      <summary vsli:raw="Indicates the generator supports the declaration of nested types.">コード ジェネレーターが入れ子にされた型の宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ParameterAttributes">
      <summary vsli:raw="Indicates the generator supports parameter attributes.">コード ジェネレーターがパラメーター属性をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PartialTypes">
      <summary vsli:raw="Indicates the generator supports partial type declarations.">コード ジェネレーターが部分型の宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.PublicStaticMembers">
      <summary vsli:raw="Indicates the generator supports public static members.">コード ジェネレーターがパブリック静的メンバーをサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReferenceParameters">
      <summary vsli:raw="Indicates the generator supports reference and out parameters.">ジェネレーターが参照パラメーターおよび out パラメーターをサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Resources">
      <summary vsli:raw="Indicates the generator supports compilation with .NET resources. These can be default resources compiled directly into an assembly, or resources referenced in a satellite assembly.">コード ジェネレーターが .NET Framework リソースのコンパイルをサポートしていることを示します。 これらは、アセンブリに直接コンパイルされる既定のリソース、またはサテライト アセンブリで参照されるリソースです。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.ReturnTypeAttributes">
      <summary vsli:raw="Indicates the generator supports return type attribute declarations.">コード ジェネレーターが戻り値の型の属性宣言をサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.StaticConstructors">
      <summary vsli:raw="Indicates the generator supports static constructors.">コード ジェネレーターが静的コンストラクターをサポートしていることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.TryCatchStatements">
      <summary vsli:raw="Indicates the generator supports &lt;c&gt;try-catch&lt;/c&gt; statements.">ジェネレーターが try-catch ステートメントをサポートし <c>て</c> いることを示します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.GeneratorSupport.Win32Resources">
      <summary vsli:raw="Indicates the generator supports compilation with Win32 resources.">コード ジェネレーターが Win32 リソースのコンパイルをサポートしていることを示します。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeCompiler">
      <summary vsli:raw="Defines an interface for invoking compilation of source code or a CodeDOM tree using a specific compiler.">特定のコンパイラを使用してソース コードや CodeDOM ツリーのコンパイルを起動するためのインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit)">
      <summary vsli:raw="Compiles an assembly from the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; tree contained in the specified &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;, using the specified compiler settings.">指定したコンパイラ設定を使用して、指定した <see cref="N:System.CodeDom" /> に含まれている <see cref="T:System.CodeDom.CodeCompileUnit" /> ツリーからアセンブリをコンパイルします。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="compilationUnit" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">コンパイルするコードを示す <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromDomBatch(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
      <summary vsli:raw="Compiles an assembly based on the &lt;see cref=&quot;N:System.CodeDom&quot; /&gt; trees contained in the specified array of &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; objects, using the specified compiler settings.">指定したコンパイラ設定を使用して、指定した <see cref="N:System.CodeDom" /> オブジェクトの配列に含まれている <see cref="T:System.CodeDom.CodeCompileUnit" /> ツリーに基づいてアセンブリをコンパイルします。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="compilationUnits" vsli:raw="An array of type &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that indicates the code to compile.">コンパイルするコードを示す <see cref="T:System.CodeDom.CodeCompileUnit" /> 型の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles an assembly from the source code contained within the specified file, using the specified compiler settings.">指定したコンパイラ設定を使用して、指定したファイルに格納されているソース コードからアセンブリをコンパイルします。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="fileName" vsli:raw="The file name of the file that contains the source code to compile.">コンパイルするソース コードが格納されているファイルの名前。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromFileBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the source code contained within the specified files, using the specified compiler settings.">指定したコンパイラ設定を使用して、指定したファイルに格納されているソース コードからアセンブリをコンパイルします。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="fileNames" vsli:raw="The file names of the files to compile.">コンパイルするファイルの名前。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String)">
      <summary vsli:raw="Compiles an assembly from the specified string containing source code, using the specified compiler settings.">指定したコンパイラ設定を使用して、ソース コードが格納されている指定した文字列からアセンブリをコンパイルします。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="source" vsli:raw="The source code to compile.">コンパイルするソース コード。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeCompiler.CompileAssemblyFromSourceBatch(System.CodeDom.Compiler.CompilerParameters,System.String[])">
      <summary vsli:raw="Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.">指定したコンパイラ設定を使用して、ソース コードが格納されている指定した文字列の配列からアセンブリをコンパイルします。</summary>
      <param name="options" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerParameters&quot; /&gt; object that indicates the settings for compilation.">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
      <param name="sources" vsli:raw="The source code strings to compile.">コンパイルするソース コード文字列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CompilerResults&quot; /&gt; object that indicates the results of compilation.">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeGenerator">
      <summary vsli:raw="Defines an interface for generating code.">コードを生成するためのインターフェイスを提供します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateEscapedIdentifier(System.String)">
      <summary vsli:raw="Creates an escaped identifier for the specified value.">指定した値のエスケープ識別子を作成します。</summary>
      <param name="value" vsli:raw="The string to create an escaped identifier for.">エスケープ識別子を作成する対象の文字列。</param>
      <returns vsli:raw="The escaped identifier for the value.">その値のエスケープ識別子。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.CreateValidIdentifier(System.String)">
      <summary vsli:raw="Creates a valid identifier for the specified value.">指定した値の有効な識別子を作成します。</summary>
      <param name="value" vsli:raw="The string to generate a valid identifier for.">有効な識別子を作成する対象の文字列。</param>
      <returns vsli:raw="A valid identifier for the specified value.">指定した値の有効な識別子。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and outputs it to the specified text writer using the specified options.">指定した Code Document Object Model (CodeDOM) の コンパイル ユニットのコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; to generate code for.">コード生成の対象となる <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">コードの出力先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) expression and outputs it to the specified text writer.">指定した Code Document Object Model (CodeDOM) の式のコードを生成し、指定したテキスト ライターに出力します。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeExpression&quot; /&gt; that indicates the expression to generate code for.">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeExpression" />。</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">コードの出力先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) namespace and outputs it to the specified text writer using the specified options.">指定した Code Document Object Model (CodeDOM) の名前空間のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeNamespace&quot; /&gt; that indicates the namespace to generate code for.">コード生成の対象となる名前空間を示す <see cref="T:System.CodeDom.CodeNamespace" />。</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">コードの出力先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) statement and outputs it to the specified text writer using the specified options.">指定した Code Document Object Model (CodeDOM) のステートメントのコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeStatement&quot; /&gt; containing the CodeDOM elements to translate.">変換する CodeDOM 要素を格納する <see cref="T:System.CodeDom.CodeStatement" />。</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">コードの出力先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <summary vsli:raw="Generates code for the specified Code Document Object Model (CodeDOM) type declaration and outputs it to the specified text writer using the specified options.">指定した Code Document Object Model (CodeDOM) の型宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに出力します。</summary>
      <param name="e" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeDeclaration&quot; /&gt; that indicates the type to generate code for.">コード生成の対象となる型を示す <see cref="T:System.CodeDom.CodeTypeDeclaration" />。</param>
      <param name="w" vsli:raw="The &lt;see cref=&quot;T:System.IO.TextWriter&quot; /&gt; to output code to.">コードの出力先となる <see cref="T:System.IO.TextWriter" />。</param>
      <param name="o" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.Compiler.CodeGeneratorOptions&quot; /&gt; that indicates the options to use for generating code.">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <summary vsli:raw="Gets the type indicated by the specified &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt;.">指定した <see cref="T:System.CodeDom.CodeTypeReference" /> で示される型を取得します。</summary>
      <param name="type" vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeTypeReference&quot; /&gt; that indicates the type to return.">返される型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
      <returns vsli:raw="A text representation of the specified type for the language this code generator is designed to generate code in. For example, in Visual Basic, passing in type System.Int32 will return &quot;Integer&quot;.">コード ジェネレーターがコードの生成用として対応している言語での、指定した型のテキスト表現。 たとえば、Visual Basic では、System.Int32 型を渡すと "Integer" が返されます。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.IsValidIdentifier(System.String)">
      <summary vsli:raw="Gets a value that indicates whether the specified value is a valid identifier for the current language.">指定した値が現在の言語で有効な識別子かどうかを示す値を取得します。</summary>
      <param name="value" vsli:raw="The value to test for being a valid identifier.">有効な識別子かどうかをテストする対象の値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;value&quot; /&gt; parameter is a valid identifier; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> パラメーターが有効な識別子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <summary vsli:raw="Gets a value indicating whether the generator provides support for the language features represented by the specified &lt;see cref=&quot;T:System.CodeDom.Compiler.GeneratorSupport&quot; /&gt; object.">ジェネレーターが、指定した <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> オブジェクトで表される言語機能のサポートを提供するかどうかを示す値を取得します。</summary>
      <param name="supports" vsli:raw="The capabilities to test the generator for.">コード ジェネレーターがサポートしているかどうかをテストする対象の機能。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified capabilities are supported; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した機能がサポートされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeGenerator.ValidateIdentifier(System.String)">
      <summary vsli:raw="Throws an exception if the specified value is not a valid identifier.">指定した値が有効な識別子ではない場合に、例外をスローします。</summary>
      <param name="value" vsli:raw="The identifier to validate.">検証する識別子。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The identifier is not valid.">識別子が有効ではありません。</exception>
    </member>
    <member name="T:System.CodeDom.Compiler.ICodeParser">
      <summary vsli:raw="Defines an interface for parsing code into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">コードを <see cref="T:System.CodeDom.CodeCompileUnit" /> に解析するためのインターフェイスを定義します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.ICodeParser.Parse(System.IO.TextReader)">
      <summary vsli:raw="When implemented in a derived class, compiles the specified text stream into a &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt;.">派生クラスで実装されると、指定したテキスト ストリームを <see cref="T:System.CodeDom.CodeCompileUnit" /> にコンパイルします。</summary>
      <param name="codeStream" vsli:raw="A &lt;see cref=&quot;T:System.IO.TextReader&quot; /&gt; that can be used to read the code to be compiled.">コンパイルするコードの読み取りに使用できる <see cref="T:System.IO.TextReader" />。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.CodeDom.CodeCompileUnit&quot; /&gt; that contains a representation of the parsed code.">コードの解析後の表現を格納する <see cref="T:System.CodeDom.CodeCompileUnit" />。</returns>
    </member>
    <member name="T:System.CodeDom.Compiler.LanguageOptions">
      <summary vsli:raw="Defines identifiers that indicate special features of a language.">ある言語の特殊な機能を示す識別子を定義します。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.CaseInsensitive">
      <summary vsli:raw="The language is case-insensitive.">言語では、大文字と小文字は区別されません。</summary>
    </member>
    <member name="F:System.CodeDom.Compiler.LanguageOptions.None">
      <summary vsli:raw="The language has default characteristics.">言語には、既定の特性があります。</summary>
    </member>
    <member name="T:System.CodeDom.Compiler.TempFileCollection">
      <summary vsli:raw="Represents a collection of temporary files.">一時ファイルのコレクションを表します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class with default values.">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> クラスの新しいインスタンスを既定値で初期化します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class using the specified temporary directory that is set to delete the temporary files after their generation and use, by default.">既定では、一時ファイルを生成して使用した後、それらの一時ファイルを削除するように設定されている一時ディレクトリを使用して、<see cref="T:System.CodeDom.Compiler.TempFileCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tempDir" vsli:raw="A path to the temporary directory to use for storing the temporary files.">一時ファイルを格納するために使用する一時ディレクトリへのパス。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.#ctor(System.String,System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; class using the specified temporary directory and specified value indicating whether to keep or delete the temporary files after their generation and use, by default.">既定では、指定した一時ディレクトリと、一時ファイルを生成して使用した後でそのファイルを保持するか削除するかを示す値を使用して、<see cref="T:System.CodeDom.Compiler.TempFileCollection" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="tempDir" vsli:raw="A path to the temporary directory to use for storing the temporary files.">一時ファイルを格納するために使用する一時ディレクトリへのパス。</param>
      <param name="keepFiles" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the temporary files should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the temporary files should be deleted.">使用後も一時ファイルを保持する場合は <see langword="true" />。一時ファイルを削除する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String)">
      <summary vsli:raw="Adds a file name with the specified file name extension to the collection.">指定したファイル名拡張子を持つファイル名をコレクションに追加します。</summary>
      <param name="fileExtension" vsli:raw="The file name extension for the auto-generated temporary file name to add to the collection.">コレクションに追加するための、自動生成される一時ファイル名のファイル名拡張子。</param>
      <returns vsli:raw="A file name with the specified extension that was just added to the collection.">コレクションに追加された、指定した拡張子を持つファイル名。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddExtension(System.String,System.Boolean)">
      <summary vsli:raw="Adds a file name with the specified file name extension to the collection, using the specified value indicating whether the file should be deleted or retained.">ファイルを削除するかまたは保持するかを示す指定した値を使用して、指定したファイル名拡張子を持つファイル名をコレクションに追加します。</summary>
      <param name="fileExtension" vsli:raw="The file name extension for the auto-generated temporary file name to add to the collection.">コレクションに追加するための、自動生成される一時ファイル名のファイル名拡張子。</param>
      <param name="keepFile" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the file should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the file should be deleted.">使用後もファイルを保持する場合は <see langword="true" />。ファイルを削除する場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileExtension&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.">
        <paramref name="fileExtension" /> が <see langword="null" /> または空の文字列です。</exception>
      <returns vsli:raw="A file name with the specified extension that was just added to the collection.">コレクションに追加された、指定した拡張子を持つファイル名。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.AddFile(System.String,System.Boolean)">
      <summary vsli:raw="Adds the specified file to the collection, using the specified value indicating whether to keep the file after the collection is disposed or when the &lt;see cref=&quot;M:System.CodeDom.Compiler.TempFileCollection.Delete&quot; /&gt; method is called.">コレクションが破棄された後、または <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> メソッドが呼び出された場合にファイルを保持するかどうかを示す指定値を使用して、指定したファイルをコレクションに追加します。</summary>
      <param name="fileName" vsli:raw="The name of the file to add to the collection.">コレクションに追加するファイルの名前。</param>
      <param name="keepFile" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the file should be kept after use; &lt;see langword=&quot;false&quot; /&gt; if the file should be deleted.">使用後もファイルを保持する場合は <see langword="true" />。ファイルを削除する場合は <see langword="false" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or an empty string.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;fileName&quot; /&gt; is a duplicate.">
        <paramref name="fileName" /> が <see langword="null" /> または空の文字列です。  
  
- または - 
 <paramref name="fileName" /> は重複しています。</exception>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.CopyTo(System.String[],System.Int32)">
      <summary vsli:raw="Copies the members of the collection to the specified string, beginning at the specified index.">指定した文字列に、指定したインデックス位置からコレクションのメンバーをコピーします。</summary>
      <param name="fileNames" vsli:raw="The array of strings to copy to.">コピー先の文字列の配列。</param>
      <param name="start" vsli:raw="The index of the array to begin copying to.">配列内のコピー開始位置を示すインデックス。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Delete">
      <summary vsli:raw="Deletes the temporary files within this collection that were not marked to be kept.">このコレクション内の、保持する必要があるとマークされていなかった一時ファイルを削除します。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.CodeDom.Compiler.TempFileCollection&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.CodeDom.Compiler.TempFileCollection" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.Finalize">
      <summary vsli:raw="Attempts to delete the temporary files before this object is reclaimed by garbage collection.">ガベージ コレクションがこのオブジェクトをクリアする前に一時ファイルの削除を試みます。</summary>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.GetEnumerator">
      <summary vsli:raw="Gets an enumerator that can enumerate the members of the collection.">コレクションのメンバーを列挙できる列挙子を取得します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that contains the collection's members.">コレクションのメンバーを格納する <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at the specified index of the target array.">コレクションの要素を配列にコピーします。コピー操作は、コピー先配列の指定したインデックスから始まります。</summary>
      <param name="array" vsli:raw="The one-dimensional &lt;see cref=&quot;T:System.Array&quot; /&gt; that is the destination of the elements copied from &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;. The &lt;see cref=&quot;T:System.Array&quot; /&gt; must have zero-based indexing.">
        <see cref="T:System.Array" /> から要素がコピーされる 1 次元の <see cref="T:System.Collections.ICollection" />。 <see cref="T:System.Array" /> には、0 から始まるインデックス番号が必要です。</param>
      <param name="start" vsli:raw="The zero-based index in array at which copying begins.">コピーの開始位置となる、配列の 0 から始まるインデックス。</param>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerator&quot; /&gt; that can be used to iterate through the collection.">コレクションを反復処理するために使用できる <see cref="T:System.Collections.IEnumerator" />。</returns>
    </member>
    <member name="M:System.CodeDom.Compiler.TempFileCollection.System#IDisposable#Dispose">
      <summary vsli:raw="Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.">アンマネージ リソースの解放またはリセットに関連付けられているアプリケーション定義のタスクを実行します。</summary>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.BasePath">
      <summary vsli:raw="Gets the full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.">コレクションの一時ファイル名を生成するために使用される、一時ディレクトリ パス上の (ファイル名拡張子を除いた) ベース ファイル名へのフル パスを取得します。</summary>
      <exception cref="T:System.Security.SecurityException" vsli:raw="If the &lt;see cref=&quot;P:System.CodeDom.Compiler.TempFileCollection.BasePath&quot; /&gt; property has not been set or is set to &lt;see langword=&quot;null&quot; /&gt;, and &lt;see cref=&quot;F:System.Security.Permissions.FileIOPermissionAccess.AllAccess&quot; /&gt; is not granted for the temporary directory indicated by the &lt;see cref=&quot;P:System.CodeDom.Compiler.TempFileCollection.TempDir&quot; /&gt; property.">
        <see cref="P:System.CodeDom.Compiler.TempFileCollection.BasePath" /> プロパティが設定されていないか <see langword="null" /> に設定されている場合、および <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" /> プロパティで示される一時ディレクトリに対して <see cref="P:System.CodeDom.Compiler.TempFileCollection.TempDir" /> が与えられていない場合。</exception>
      <returns vsli:raw="The full path to the base file name, without a file name extension, on the temporary directory path, that is used to generate temporary file names for the collection.">コレクションの一時ファイル名を生成するために使用される、一時ディレクトリ パス上の (ファイル名拡張子を除いた) ベース ファイル名へのフル パス。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.Count">
      <summary vsli:raw="Gets the number of files in the collection.">コレクション内のファイルの数を取得します。</summary>
      <returns vsli:raw="The number of files in the collection.">コレクション内のファイルの数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.KeepFiles">
      <summary vsli:raw="Gets or sets a value indicating whether to keep the files, by default, when the &lt;see cref=&quot;M:System.CodeDom.Compiler.TempFileCollection.Delete&quot; /&gt; method is called or the collection is disposed.">
        <see cref="M:System.CodeDom.Compiler.TempFileCollection.Delete" /> メソッドが呼び出されたとき、またはコレクションが破棄されたときに、既定で、ファイルを保持するのかどうかを指定する値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the files should be kept; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ファイルを保持する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#Count">
      <summary vsli:raw="Gets the number of elements contained in the collection.">コレクションに格納されている要素の数を取得します。</summary>
      <returns vsli:raw="The number of elements contained in the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> に格納されている要素の数。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#IsSynchronized">
      <summary vsli:raw="Gets a value indicating whether access to the collection is synchronized (thread safe).">コレクションへのアクセスが同期されている (スレッド セーフである) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt; is synchronized (thread safe); otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> へのアクセスが同期されている (スレッド セーフである) 場合は <see cref="T:System.Collections.ICollection" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.System#Collections#ICollection#SyncRoot">
      <summary vsli:raw="Gets an object that can be used to synchronize access to the collection.">コレクションへのアクセスを同期するために使用できるオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that can be used to synchronize access to the &lt;see cref=&quot;T:System.Collections.ICollection&quot; /&gt;.">
        <see cref="T:System.Collections.ICollection" /> へのアクセスの同期に使用できるオブジェクトです。</returns>
    </member>
    <member name="P:System.CodeDom.Compiler.TempFileCollection.TempDir">
      <summary vsli:raw="Gets the temporary directory to store the temporary files in.">一時ファイルの格納場所である一時ディレクトリを取得します。</summary>
      <returns vsli:raw="The temporary directory to store the temporary files in.">一時ファイルの格納場所である一時ディレクトリ。</returns>
    </member>
    <member name="T:System.CodeDom.FieldDirection">
      <summary vsli:raw="Defines identifiers used to indicate the direction of parameter and argument declarations.">パラメーターの方向および引数宣言を示すために使用する識別子を定義します。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.In">
      <summary vsli:raw="An incoming field.">in フィールド。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Out">
      <summary vsli:raw="An outgoing field.">out フィールド。</summary>
    </member>
    <member name="F:System.CodeDom.FieldDirection.Ref">
      <summary vsli:raw="A field by reference.">参照渡しフィールド。</summary>
    </member>
    <member name="T:System.CodeDom.MemberAttributes">
      <summary vsli:raw="Defines member attribute identifiers for class members.">クラス メンバーのメンバー属性識別子を定義します。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Abstract">
      <summary vsli:raw="An abstract member.">抽象メンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.AccessMask">
      <summary vsli:raw="An access mask.">アクセス マスク。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Assembly">
      <summary vsli:raw="A member that is accessible to any class within the same assembly.">同じアセンブリ内の任意のクラスにアクセスできるメンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Const">
      <summary vsli:raw="A constant member.">定数メンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Family">
      <summary vsli:raw="A member that is accessible within the family of its class and derived classes.">クラスと派生クラスのファミリ内にアクセスできるメンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyAndAssembly">
      <summary vsli:raw="A member that is accessible within its class, and derived classes in the same assembly.">クラス内および同じアセンブリの派生クラスにアクセスできるメンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.FamilyOrAssembly">
      <summary vsli:raw="A member that is accessible within its class, its derived classes in any assembly, and any class in the same assembly.">クラス内、任意のアセンブリの派生クラス、および同じアセンブリの任意のクラスにアクセスできるメンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Final">
      <summary vsli:raw="A member that cannot be overridden in a derived class.">派生クラスでオーバーライドできないメンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.New">
      <summary vsli:raw="A new member.">新規メンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Overloaded">
      <summary vsli:raw="An overloaded member. Some languages, such as Visual Basic, require overloaded members to be explicitly indicated.">オーバーロードされたメンバー。 Visual Basic などの一部の言語では、オーバーロードされたメンバーを明示的に示す必要があります。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Override">
      <summary vsli:raw="A member that overrides a base class member.">基本クラス メンバーをオーバーライドするメンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Private">
      <summary vsli:raw="A private member.">プライベート メンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Public">
      <summary vsli:raw="A public member.">パブリック メンバー。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.ScopeMask">
      <summary vsli:raw="A scope mask.">スコープ マスク。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.Static">
      <summary vsli:raw="A static member. In Visual Basic, this is equivalent to the &lt;see langword=&quot;Shared&quot; /&gt; keyword.">静的メンバー。 このメンバーは、Visual Basic の <see langword="Shared" /> キーワードと等価です。</summary>
    </member>
    <member name="F:System.CodeDom.MemberAttributes.VTableMask">
      <summary vsli:raw="A VTable mask.">VTable マスク。</summary>
    </member>
  </members>
</doc>
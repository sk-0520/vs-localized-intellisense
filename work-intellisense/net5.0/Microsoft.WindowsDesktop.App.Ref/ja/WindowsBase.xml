<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>WindowsBase</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Specialized.CollectionChangedEventManager">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; implementation so that you can use the &quot;weak event listener&quot; pattern to attach listeners for the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">
        <see cref="T:System.Windows.WeakEventManager" /> を実装することにより、"弱いイベント リスナー" パターンを使用して <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントのリスナーを関連付けられるようにします。</summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary vsli:raw="Adds the specified event handler, which is called when specified source raises the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">指定されたソースで <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントが発生したときに呼び出されるイベント ハンドラーを追加します。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントを処理するデリゲート。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Adds the specified listener to the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event of the specified source.">指定したリスナーを、指定したソースの <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントに追加します。</summary>
      <param name="source" vsli:raw="The object with the event.">イベントを持つオブジェクト。</param>
      <param name="listener" vsli:raw="The object to add as a listener.">リスナーとして追加するオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.NewListenerList">
      <summary vsli:raw="Returns a new object to contain listeners to the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
      <returns vsli:raw="A new object to contain listeners to the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントのリスナーを格納する新しいオブジェクト。</returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary vsli:raw="Removes the specified event handler from the specified source.">指定したソースから、指定したイベント ハンドラーを削除します。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントを処理するデリゲート。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Removes the specified listener from the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event of the specified source.">指定したリスナーを、指定したソースの <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントから削除します。</summary>
      <param name="source" vsli:raw="The object with the event.">イベントを持つオブジェクト。</param>
      <param name="listener" vsli:raw="The listener to remove.">削除するリスナー。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StartListening(System.Object)">
      <summary vsli:raw="Begins listening for the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event on the specified source.">指定したソースで <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントのリッスンを開始します。</summary>
      <param name="source" vsli:raw="The object with the event.">イベントを持つオブジェクト。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StopListening(System.Object)">
      <summary vsli:raw="Stops listening for the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event on the specified source.">指定したソースで <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> イベントのリッスンを停止します。</summary>
      <param name="source" vsli:raw="The object with the event.">イベントを持つオブジェクト。</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangedEventManager">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; implementation so that you can use the &quot;weak event listener&quot; pattern to attach listeners for the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">
        <see cref="T:System.Windows.WeakEventManager" /> を実装することにより、"弱いイベント リスナー" パターンを使用して <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントのリスナーを関連付けられるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary vsli:raw="Adds the specified event handler, which is called when specified source raises the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">指定されたソースで <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントが発生したときに呼び出されるイベント ハンドラーを追加します。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントを発生させるソース オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Adds the specified listener to the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event of the specified source.">指定したリスナーを、指定したソースの <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントに追加します。</summary>
      <param name="source" vsli:raw="The object with the event.">イベントを持つオブジェクト。</param>
      <param name="listener" vsli:raw="The object to add as a listener.">リスナーとして追加するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.NewListenerList">
      <summary vsli:raw="Returns a new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
      <returns vsli:raw="A new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントのリスナーを格納する新しいオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary vsli:raw="Removes the specified event handler from the specified source.">指定したソースから、指定したイベント ハンドラーを削除します。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントを処理するデリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Removes the specified listener from the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event of the specified source.">指定したリスナーを、指定したソースの <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントから削除します。</summary>
      <param name="source" vsli:raw="The object with the event.">イベントを持つオブジェクト。</param>
      <param name="listener" vsli:raw="The listener to remove.">削除するリスナー。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StartListening(System.Object)">
      <summary vsli:raw="Begins listening for the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event on the specified source.">指定したソースで <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントのリッスンを開始します。</summary>
      <param name="source" vsli:raw="The object with the event.">イベントを持つオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StopListening(System.Object)">
      <summary vsli:raw="Stops listening for the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event on the specified source.">指定したソースで <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> イベントのリッスンを停止します。</summary>
      <param name="source" vsli:raw="The object with the event.">イベントを持つオブジェクト。</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventArgs">
      <summary vsli:raw="Provides information for the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントに関する情報を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CurrentChangingEventArgs&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CurrentChangingEventArgs&quot; /&gt; class with the specified &lt;paramref name=&quot;isCancelable&quot; /&gt; value.">指定した <paramref name="isCancelable" /> 値を使用して、<see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="isCancelable" vsli:raw="A value that indicates whether the event is cancelable.">イベントがキャンセル可能かどうかを示す値。</param>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
      <summary vsli:raw="Gets or sets a value that indicates whether to cancel the event.">イベントを取り消すかどうかを示す値を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the value of &lt;see cref=&quot;P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> の値が <see langword="false" /> の場合。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event is to be canceled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;false&quot; /&gt;.">イベントを取り消す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
      <summary vsli:raw="Gets a value that indicates whether the event is cancelable.">イベントがキャンセル可能かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event is cancelable, otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">イベントがキャンセル可能な場合は <see langword="true" />、それ以外は <see langword="false" />。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Windows.Data.CollectionView.CurrentChanging&quot; /&gt; event.">
        <see cref="E:System.Windows.Data.CollectionView.CurrentChanging" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The object that raised the event.">イベントを発生させたオブジェクト。</param>
      <param name="e" vsli:raw="Information about the event.">イベントに関する情報。</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventManager">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; implementation so that you can use the &quot;weak event listener&quot; pattern to attach listeners for the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">
        <see cref="T:System.Windows.WeakEventManager" /> を実装することにより、"弱いイベント リスナー" パターンを使用して <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントのリスナーを関連付けられるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary vsli:raw="Adds the specified event handler, which is called when specified source raises the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">指定されたソースで <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントが発生したときに呼び出されるイベント ハンドラーを追加します。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントを処理するデリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Adds the specified listener to the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event of the specified source.">指定したリスナーを、指定したソースの <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントに追加します。</summary>
      <param name="source" vsli:raw="The object with the event.">イベントを持つオブジェクト。</param>
      <param name="listener" vsli:raw="The object to add as a listener.">リスナーとして追加するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.NewListenerList">
      <summary vsli:raw="Returns a new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
      <returns vsli:raw="A new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントのリスナーを格納する新しいオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary vsli:raw="Removes the specified event handler from the specified source.">指定したソースから、指定したイベント ハンドラーを削除します。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントを処理するデリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Removes the specified listener from the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event of the specified source.">指定したリスナーを、指定したソースの <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントから削除します。</summary>
      <param name="source" vsli:raw="The object with the event.">イベントを持つオブジェクト。</param>
      <param name="listener" vsli:raw="The listener to remove.">削除するリスナー。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StartListening(System.Object)">
      <summary vsli:raw="Begins listening for the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event on the specified source.">指定したソースで <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントのリッスンを開始します。</summary>
      <param name="source" vsli:raw="The object with the event.">イベントを持つオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StopListening(System.Object)">
      <summary vsli:raw="Stops listening for the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event on the specified source.">指定したソースで <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> イベントのリッスンを停止します。</summary>
      <param name="source" vsli:raw="The object with the event.">イベントを持つオブジェクト。</param>
    </member>
    <member name="T:System.ComponentModel.DependencyPropertyDescriptor">
      <summary vsli:raw="Provides an extension of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that accounts for the additional property characteristics of a dependency property.">依存関係プロパティの追加のプロパティ特性を記述する <see cref="T:System.ComponentModel.PropertyDescriptor" /> の拡張機能を提供します。</summary>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">プロパティが変更されたときに、ほかのオブジェクトに通知できるようにします。</summary>
      <param name="component" vsli:raw="The component to add the handler for.">ハンドラーを追加する対象のコンポーネント。</param>
      <param name="handler" vsli:raw="The delegate to add as a listener.">リスナーとして追加されるデリゲート。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="Returns whether resetting an object changes its value.">オブジェクトをリセットすると値が変更されるかどうかを返します。</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">リセット機能について調べる対象のコンポーネント。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes its value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コンポーネントをリセットするとコンポーネントの値が変化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt; instances for equality.">2 つの <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> インスタンスを比較し、相互に等価かどうかを判断します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt; to compare with the current instance.">現在のインスタンスと比較する <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">両方の値が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt; for a provided property name.">指定されたプロパティ名の <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> を返します。</summary>
      <param name="name" vsli:raw="The registered name of a dependency property or an attached property.">依存関係プロパティまたは添付プロパティの登録済みの名前。</param>
      <param name="ownerType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the object that owns the property definition.">プロパティ定義を所有するオブジェクトの <see cref="T:System.Type" />。</param>
      <param name="targetType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the object you want to set the property for.">プロパティを設定するオブジェクトの <see cref="T:System.Type" />。</param>
      <returns vsli:raw="The requested &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt;.">要求された <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type,System.Boolean)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt; for a provided property name.">指定されたプロパティ名の <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> を返します。</summary>
      <param name="name" vsli:raw="The registered name of a dependency property or an attached property.">依存関係プロパティまたは添付プロパティの登録済みの名前。</param>
      <param name="ownerType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the object that owns the property definition.">プロパティ定義を所有するオブジェクトの <see cref="T:System.Type" />。</param>
      <param name="targetType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the object you want to set the property for.">プロパティを設定するオブジェクトの <see cref="T:System.Type" />。</param>
      <param name="ignorePropertyType" vsli:raw="Specifies to ignore the property type.">プロパティの型を無視するように指定します。</param>
      <returns vsli:raw="The requested &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt;.">要求された <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt; for a provided &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">指定された <see cref="T:System.ComponentModel.PropertyDescriptor" /> の <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> を返します。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to check.">確認対象の <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns vsli:raw="If the property described by &lt;paramref name=&quot;property&quot; /&gt; is a dependency property, returns a valid &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt;. Otherwise, returns a &lt;see langword=&quot;null&quot; /&gt;&lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt;.">
        <paramref name="property" /> によって記述されているプロパティが依存関係プロパティの場合は、有効な <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> を返します。 それ以外の場合は、<see langword="null" /><see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> を返します。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.Windows.DependencyProperty,System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt; for a provided dependency property and target type.">指定された依存関係プロパティの <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> とターゲットの種類を返します。</summary>
      <param name="dependencyProperty" vsli:raw="The identifier for a dependency property.">依存関係プロパティの識別子。</param>
      <param name="targetType" vsli:raw="The type of the object where the property is set.">プロパティが設定されているオブジェクトの種類。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt; for the provided dependency property.">指定された依存関係プロパティの <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt;.">
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> を返します。</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">プロパティを取得する対象のコンポーネント。</param>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">フィルターとして使用する型 <see cref="T:System.Attribute" /> の配列。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">指定のコンポーネントの指定した属性と一致するプロパティを持つ <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Gets an editor of the specified type.">指定した型のエディターを取得します。</summary>
      <param name="editorBaseType" vsli:raw="The base type of editor, which is used to differentiate between multiple editors that a property supports.">プロパティがサポートしている複数のエディターを区別するために使用される、エディターの基本型。</param>
      <returns vsli:raw="An instance of the requested editor type, or &lt;see langword=&quot;null&quot; /&gt; if an editor cannot be found.">要求したエディター型のインスタンス。エディターが見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt;.">この <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> のハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)">
      <summary vsli:raw="Returns the current value of the property on a component.">コンポーネントのプロパティの現在の値を返します。</summary>
      <param name="component" vsli:raw="The component instance.">コンポーネントのインスタンス。</param>
      <returns vsli:raw="The requested value.">要求された値。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">プロパティが変更されたときに、ほかのオブジェクトに通知できるようにします。</summary>
      <param name="component" vsli:raw="The component to add the handler for.">ハンドラーを追加する対象のコンポーネント。</param>
      <param name="handler" vsli:raw="The delegate to add as a listener.">リスナーとして追加されるデリゲート。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="Resets the value for this property of the component to the default value.">コンポーネントの特定のプロパティの値を既定値にリセットします。</summary>
      <param name="component" vsli:raw="The component with the property value that is to be reset to the default value.">既定値にリセットする対象のプロパティ値を持つコンポーネント。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary vsli:raw="Sets the value of the component to a different value.">コンポーネントの値を別の値に設定します。</summary>
      <param name="component" vsli:raw="The component with the property value that is to be set.">設定する対象のプロパティ値を持つコンポーネント。</param>
      <param name="value" vsli:raw="The new value.">新しい値。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="Indicates whether the value of this property needs to be persisted by serialization processes.">プロパティの値をシリアル化処理によって永続化する必要があるかどうかを示します。</summary>
      <param name="component" vsli:raw="The component with the property to be examined for persistence.">永続性について調べる対象のプロパティを持つコンポーネント。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be persisted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティを永続化する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ToString">
      <summary vsli:raw="Converts the value of this instance to its equivalent string representation.">このインスタンスの値を、それと等価の文字列形式に変換します。</summary>
      <returns vsli:raw="Returns the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.Name&quot; /&gt; value.">
        <see cref="P:System.ComponentModel.MemberDescriptor.Name" /> 値を返します。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Attributes">
      <summary vsli:raw="Gets the collection of attributes for this member.">メンバーの属性のコレクションを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; collection of attributes.">属性の <see cref="T:System.ComponentModel.AttributeCollection" /> コレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Category">
      <summary vsli:raw="Gets the name of the category that the member belongs to, as specified in the &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.CategoryAttribute" /> で指定されている、メンバーが属するカテゴリの名前を取得します。</summary>
      <returns vsli:raw="The name of the category to which the member belongs. If there is no &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;, the category name is set to the default category, &lt;see langword=&quot;Misc&quot; /&gt;.">メンバーが属しているカテゴリの名前。 <see cref="T:System.ComponentModel.CategoryAttribute" /> がない場合、カテゴリ名は既定のカテゴリである <see langword="Misc" /> に設定されます。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.ComponentType">
      <summary vsli:raw="Gets the type of the component this property is bound to.">プロパティが関連付けられているコンポーネントの型を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component this property is bound to. When &lt;see cref=&quot;M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt; are invoked, the object specified might be an instance of this type.">プロパティが関連付けられているコンポーネントの型を表す <see cref="T:System.Type" />。 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)" /> または <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> が呼び出される場合、指定されたオブジェクトはこの型のインスタンスである可能性があります。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Converter">
      <summary vsli:raw="Gets the type converter for this property.">プロパティの型コンバーターを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is used to convert the &lt;see cref=&quot;T:System.Type&quot; /&gt; of this property.">プロパティの <see cref="T:System.ComponentModel.TypeConverter" /> を変換するために使用する <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DependencyProperty">
      <summary vsli:raw="Returns the dependency property identifier.">依存関係プロパティの識別子を返します。</summary>
      <returns vsli:raw="The dependency property identifier.">依存関係プロパティの識別子。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Description">
      <summary vsli:raw="Gets the description of the member, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DescriptionAttribute" /> で指定されている、メンバーの説明を取得します。</summary>
      <returns vsli:raw="The description of the member. If there is no &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;, the property value is set to the default, which is an empty string (&quot;&quot;).">メンバーの説明。 <see cref="T:System.ComponentModel.DescriptionAttribute" /> がない場合、このプロパティの値は既定値である空の文字列 ("") に設定されます。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignerCoerceValueCallback">
      <summary vsli:raw="Gets or sets a callback that designers use to modify the effective value of a dependency property before the dependency property value is stored in the dependency property engine.">依存関係プロパティの値が依存関係プロパティのエンジンに格納される前にそのプロパティの有効値を変更するためにデザイナーが使用するコールバックを取得または設定します。</summary>
      <returns vsli:raw="A callback that designers use to modify the effective value of a dependency property before the dependency property value is stored in the dependency property engine.">依存関係プロパティの値が依存関係プロパティのエンジンに格納される前にそのプロパティの有効値を変更するためにデザイナーが使用するコールバック。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignTimeOnly">
      <summary vsli:raw="Gets whether this member should be set only at design time, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignOnlyAttribute&quot; /&gt;.">
        <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> で指定されている、メンバーを設定できるのがデザイン時だけかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this member should be set only at design time; &lt;see langword=&quot;false&quot; /&gt; if the member can be set during run time. If there is no &lt;see cref=&quot;T:System.ComponentModel.DesignOnlyAttribute&quot; /&gt;, the return value is the default, which is &lt;see langword=&quot;false&quot; /&gt;.">メンバーを設定できるのがデザイン時だけの場合は <see langword="true" />。実行時に設定できる場合は <see langword="false" />。 <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> がない場合、戻り値は既定値である <see langword="false" /> になります。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DisplayName">
      <summary vsli:raw="Gets the name that can be displayed in a window, such as a Properties window.">[プロパティ] ウィンドウなどのウィンドウに表示できる名前を取得します。</summary>
      <returns vsli:raw="The name to display for the property.">表示するプロパティ名。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsAttached">
      <summary vsli:raw="Gets a value that indicates whether the property is registered as an attached property and is being used through an attached usage.">プロパティが添付プロパティとして登録され、添付して使う方法で使用されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is an attached property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティが添付プロパティの場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsBrowsable">
      <summary vsli:raw="Gets a value that indicates the value of the &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt; on the property.">プロパティの <see cref="T:System.ComponentModel.BrowsableAttribute" /> の値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt; was specified on the property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティに <see cref="T:System.ComponentModel.BrowsableAttribute" /> が指定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsLocalizable">
      <summary vsli:raw="Gets a value indicating whether this property should be localized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt;.">プロパティをローカライズする必要があるかどうかを示す、<see cref="T:System.ComponentModel.LocalizableAttribute" /> で指定されている値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is marked with the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt; constructor of the value true; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メンバーの <see cref="T:System.ComponentModel.LocalizableAttribute" /> コンストラクターの値が true に設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this property is read-only.">プロパティが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Metadata">
      <summary vsli:raw="Gets the metadata associated with the dependency property.">依存関係プロパティに関連付けられているメタデータを取得します。</summary>
      <returns vsli:raw="The dependency property metadata.">依存関係プロパティのメタデータ。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.PropertyType">
      <summary vsli:raw="Gets the represented &lt;see cref=&quot;T:System.Type&quot; /&gt; of the dependency property.">依存関係プロパティを表す <see cref="T:System.Type" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the dependency property.">依存関係プロパティの <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.SupportsChangeEvents">
      <summary vsli:raw="Indicates whether value change notifications for this property may originate from outside the property descriptor, such as from the component itself, or whether notifications will only originate from direct calls made to &lt;see cref=&quot;M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt;.">このプロパティの値変更通知をプロパティ記述子以外 (コンポーネント自体など) から発生させてよいか、または <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> への直接呼び出しからだけ通知を発生させるかを示します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if notifications for this property may originate from outside the property descriptor, such as from the component itself. &lt;see langword=&quot;false&quot; /&gt; if notifications will only originate from direct calls made to &lt;see cref=&quot;M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt;.">このプロパティの値変更通知をプロパティ記述子以外 (コンポーネント自体など) から発生させてよい場合は <see langword="true" />。 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> への直接呼び出しからだけ通知を発生させる場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ErrorsChangedEventManager">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; implementation so that you can use the weak event listener pattern to attach listeners for the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">
        <see cref="T:System.Windows.WeakEventManager" /> を実装することにより、"弱いイベント リスナー パターン" を使用して <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントのリスナーを関連付けられるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.AddHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary vsli:raw="Adds the specified event handler, which is called when specified source raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">指定されたソースで <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントが発生したときに呼び出されるイベント ハンドラーを追加します。</summary>
      <param name="source" vsli:raw="The source object that raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントを処理するデリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.NewListenerList">
      <summary vsli:raw="Returns a new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
      <returns vsli:raw="A new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントのリスナーを格納する新しいオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.RemoveHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary vsli:raw="Removes the specified event handler from the specified source.">指定したソースから、指定したイベント ハンドラーを削除します。</summary>
      <param name="source" vsli:raw="The source object that raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントを処理するデリゲート。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StartListening(System.Object)">
      <summary vsli:raw="Begins listening for the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event on the specified source.">指定したソースで <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントのリッスンを開始します。</summary>
      <param name="source" vsli:raw="The source object that raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントを発生させるソース オブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StopListening(System.Object)">
      <summary vsli:raw="Stops listening for the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event on the specified source.">指定したソースで <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントのリッスンを停止します。</summary>
      <param name="source" vsli:raw="The source object that raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> イベントを発生させるソース オブジェクト。</param>
    </member>
    <member name="T:System.ComponentModel.GroupDescription">
      <summary vsli:raw="Provides an abstract base class for types that describe how to divide the items in a collection into groups.">コレクション内の項目をグループに分割する方法を説明する型の抽象基底クラスを提供します。</summary>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">プロパティ値が変更するときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">プロパティ値が変更するときに発生します。</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.GroupDescription&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.GroupDescription" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary vsli:raw="Returns the group name(s) for the given item.">指定したアイテムのグループ名を返します。</summary>
      <param name="item" vsli:raw="The item to return group names for.">グループの名前を返す項目。</param>
      <param name="level" vsli:raw="The level of grouping.">グループ化のレベル。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to supply to the converter.">コンバーターを提供する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns vsli:raw="The group name(s) for the given item.">指定したアイテムのグループ名。</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the group name and the item name match such that the item belongs to the group.">項目がグループに属するようにグループ名と項目名が一致するかどうかを示す値を返します。</summary>
      <param name="groupName" vsli:raw="The name of the group to check.">確認するグループの名前。</param>
      <param name="itemName" vsli:raw="The name of the item to check.">確認する項目の名前。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the names match and the item belongs to the group; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">名前が一致し、項目がグループに属している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.GroupDescription.PropertyChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged" /> イベントを発生させます。</summary>
      <param name="e" vsli:raw="Arguments of the event being raised.">発生しているイベントの引数。</param>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
      <summary vsli:raw="Returns whether serialization processes should serialize the effective value of the &lt;see cref=&quot;P:System.ComponentModel.GroupDescription.GroupNames&quot; /&gt; property on instances of this class.">シリアル化プロセスがこのクラスのインスタンスの <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> プロパティの有効値をシリアル化する必要があるかどうかを示す値を返します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.ComponentModel.GroupDescription.GroupNames&quot; /&gt; property value should be serialized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.ComponentModel.GroupDescription.GroupNames" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeSortDescriptions">
      <summary vsli:raw="Returns whether serialization processes should serialize the effective value of the &lt;see cref=&quot;P:System.ComponentModel.GroupDescription.SortDescriptions&quot; /&gt; property on instances of this class.">シリアル化プロセスがこのクラスのインスタンスの <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" /> プロパティの有効値をシリアル化する必要があるかどうかを示す値を返します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.ComponentModel.GroupDescription.SortDescriptions&quot; /&gt; property value should be serialized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> プロパティ値をシリアル化する必要がある場合は <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.CustomSort">
      <summary vsli:raw="Gets or sets a custom comparer that sorts groups using an object that implements &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">
        <see cref="T:System.Collections.IComparer" /> を実装するオブジェクトを使用してグループを並べ替えるカスタム比較子を取得または設定します。</summary>
      <returns vsli:raw="A custom comparer that sorts groups using an object that implements &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">
        <see cref="T:System.Collections.IComparer" /> を実装するオブジェクトを使用してグループを並べ替えるカスタム比較子。</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.GroupNames">
      <summary vsli:raw="Gets the collection of names that are used to initialize a group with a set of subgroups with the given names.">指定された名前を持つサブグループのセットを使用してグループを初期化するために使用される名前のコレクションを取得します。</summary>
      <returns vsli:raw="The collection of names that are used to initialize a group with a set of subgroups with the given names.">指定された名前を持つサブグループのセットを使用してグループを初期化するために使用される名前のコレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.SortDescriptions">
      <summary vsli:raw="Gets the collection of sort criteria in which to sort the groups.">グループを並べ替える対象の並べ替え条件のコレクションを取得します。</summary>
      <returns vsli:raw="The collection of sort criteria in which to sort the groups.">グループを並べ替える対象の並べ替え条件のコレクション。</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionView">
      <summary vsli:raw="Enables collections to have the functionalities of current record management, custom sorting, filtering, and grouping.">現在のレコード管理、カスタムの並べ替え、フィルター処理、およびグループ化の機能を持つようにコレクションを有効にします。</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
      <summary vsli:raw="When implementing this interface, raise this event after the current item has been changed.">このインターフェイスを実装している場合、現在の項目が変更された後に、このイベントを発生させます。</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
      <summary vsli:raw="When implementing this interface, raise this event before changing the current item. Event handler can cancel this event.">このインターフェイスを実装している場合、現在の項目が変更される前に、このイベントが発生します。 イベント ハンドラーは、このイベントをキャンセルできます。</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether a given item belongs to this collection view.">指定された項目がこのコレクション ビューに属しているかどうかを示す値を返します。</summary>
      <param name="item" vsli:raw="The object to check.">確認する対象のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item belongs to this collection view; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">項目がこのコレクション ビューに属している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
      <summary vsli:raw="Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh.">ビューの変更をマージして自動更新を遅延させるために使用できる遅延サイクルを入力します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; object that you can use to dispose of the calling object.">呼び出し元のオブジェクトを破棄するために使用できる <see cref="T:System.IDisposable" /> オブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
      <summary vsli:raw="Sets the specified item to be the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; in the view.">指定された項目をビュー内の <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> に設定します。</summary>
      <param name="item" vsli:raw="The item to set as the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt;.">
        <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> として設定する項目。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; is within the view; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">結果として得られる <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がビュー内に存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
      <summary vsli:raw="Sets the first item in the view as the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt;.">ビュー内の最初の項目を <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> として設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; is an item within the view; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">結果の <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がビュー内の項目の場合は <see langword="true" />、ビュー内の項目でない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
      <summary vsli:raw="Sets the last item in the view as the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt;.">ビュー内の最後の項目を <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> として設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; is an item within the view; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">結果の <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がビュー内の項目の場合は <see langword="true" />、ビュー内の項目でない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
      <summary vsli:raw="Sets the item after the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; in the view as the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt;.">ビュー内の <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> の後の項目を <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />として設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; is an item within the view; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">結果の <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がビュー内の項目の場合は <see langword="true" />、ビュー内の項目でない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
      <summary vsli:raw="Sets the item at the specified index to be the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; in the view.">指定したインデックスにある項目を、ビュー内の <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> になるように設定します。</summary>
      <param name="position" vsli:raw="The index to set the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; to.">
        <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> を設定するインデックス。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; is an item within the view; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">結果の <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がビュー内の項目の場合は <see langword="true" />、ビュー内の項目でない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
      <summary vsli:raw="Sets the item before the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; in the view as the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt;.">ビュー内の <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> の前にある項目を <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> として設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; is an item within the view; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">結果の <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がビュー内の項目の場合は <see langword="true" />、ビュー内の項目でない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Refresh">
      <summary vsli:raw="Recreates the view.">ビューを再作成します。</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanFilter">
      <summary vsli:raw="Gets a value that indicates whether this view supports filtering via the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.Filter&quot; /&gt; property.">このビューが <see cref="P:System.ComponentModel.ICollectionView.Filter" /> プロパティを使用したフィルター処理をサポートするかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this view support filtering; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このビューがフィルター処理をサポートする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanGroup">
      <summary vsli:raw="Gets a value that indicates whether this view supports grouping via the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.GroupDescriptions&quot; /&gt; property.">このビューが <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" /> プロパティを介したグループ化をサポートするかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this view supports grouping; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このビューがグループ化をサポートする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanSort">
      <summary vsli:raw="Gets a value that indicates whether this view supports sorting via the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.SortDescriptions&quot; /&gt; property.">このビューが <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" /> プロパティを介した並べ替えをサポートするかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this view supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このビューが並べ替えをサポートする場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Culture">
      <summary vsli:raw="Gets or sets the cultural info for any operations of the view that may differ by culture, such as sorting.">並べ替えなど、カルチャによって異なる場合があるビューの操作に関するカルチャ情報を取得または設定します。</summary>
      <returns vsli:raw="The culture to use during sorting.">並べ替え中に使用するカルチャ。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentItem">
      <summary vsli:raw="Gets the current item in the view.">ビュー内の現在の項目を取得します。</summary>
      <returns vsli:raw="The current item of the view or &lt;see langword=&quot;null&quot; /&gt; if there is no current item.">ビューの現在の項目。現在の項目が存在しない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
      <summary vsli:raw="Gets the ordinal position of the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; within the view.">ビュー内での <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> の順序位置を取得します。</summary>
      <returns vsli:raw="The ordinal position of the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; within the view.">ビュー内での <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> の順序位置。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Filter">
      <summary vsli:raw="Gets or sets a callback used to determine if an item is suitable for inclusion in the view.">項目をビューに含めることが適切であるかどうかを決定するために使用されるコールバックを取得または設定します。</summary>
      <returns vsli:raw="A method used to determine if an item is suitable for inclusion in the view.">項目をビューに含めることが適切であるかどうかを決定するために使用されるメソッド。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
      <summary vsli:raw="Gets a collection of &lt;see cref=&quot;T:System.ComponentModel.GroupDescription&quot; /&gt; objects that describe how the items in the collection are grouped in the view.">コレクション内の項目をビュー内でどのようにグループ化するかを説明する <see cref="T:System.ComponentModel.GroupDescription" /> オブジェクトのコレクションを取得します。</summary>
      <returns vsli:raw="A collection of &lt;see cref=&quot;T:System.ComponentModel.GroupDescription&quot; /&gt; objects that describe how the items in the collection are grouped in the view.">コレクション内の項目をビュー内でどのようにグループ化するかを示す <see cref="T:System.ComponentModel.GroupDescription" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Groups">
      <summary vsli:raw="Gets the top-level groups.">トップレベル グループを取得します。</summary>
      <returns vsli:raw="A read-only collection of the top-level groups or &lt;see langword=&quot;null&quot; /&gt; if there are no groups.">トップレベル グループの読み取り専用コレクション。グループがない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; of the view is beyond the end of the collection.">ビューの <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がコレクションの末尾を越えるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; of the view is beyond the end of the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ビューの <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がコレクションの末尾を越える場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; of the view is beyond the beginning of the collection.">ビューの <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> がコレクションの先頭を越えるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; of the view is beyond the beginning of the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />
        <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />ビューのがコレクションの先頭を越える場合は。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsEmpty">
      <summary vsli:raw="Returns a value that indicates whether the resulting view is empty.">結果のビューが空かどうかを示す値を返します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting view is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">結果のビューが空である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
      <summary vsli:raw="Gets a collection of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; objects that describe how the items in the collection are sorted in the view.">コレクション内の項目をビュー内でどのように並べ替えるかを説明する <see cref="T:System.ComponentModel.SortDescription" /> オブジェクトのコレクションを取得します。</summary>
      <returns vsli:raw="A collection of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; objects that describe how the items in the collection are sorted in the view.">コレクション内の項目をビュー内でどのように並べ替えるかを記述する <see cref="T:System.ComponentModel.SortDescription" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SourceCollection">
      <summary vsli:raw="Returns the underlying collection.">基になるコレクションを返します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; object that is the underlying collection.">基になるコレクションである <see cref="T:System.Collections.IEnumerable" /> オブジェクト。</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewFactory">
      <summary vsli:raw="An interface that enables implementing collections to create a view to their data. Normally, user code does not call methods on this interface.">実装しているコレクションで、そのデータに関するビューの作成を有効にするインターフェイス。 通常、ユーザー コードはこのインターフェイスでメソッドを呼び出しません。</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionViewFactory.CreateView">
      <summary vsli:raw="Creates a new view on the collection that implements this interface. Typically, user code does not call this method.">このインターフェイスを実装するコレクションの新しいビューを作成します。 通常、ユーザー コードはこのメソッドを呼び出しません。</summary>
      <returns vsli:raw="The newly created view.">新しく作成されたビュー。</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewLiveShaping">
      <summary vsli:raw="Defines properties that enables sorting, grouping, and filtering on a &lt;see cref=&quot;T:System.Windows.Data.CollectionView&quot; /&gt; in real time.">
        <see cref="T:System.Windows.Data.CollectionView" /> に対するリアルタイムの並べ替え、グループ化、およびフィルタリングを可能にするプロパティを定義します。</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveFiltering">
      <summary vsli:raw="Gets a value that indicates whether the collection view supports turning filtering data in real time on or off.">コレクション ビューがデータのリアルタイム フィルター処理のオン/オフ切り替えをサポートしているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection view supports turning live filtering on or off; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクション ビューがライブ フィルター処理のオン/オフ切り替えをサポートしている場合は、<see langword="true" />。それ以外の場合は、<see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveGrouping">
      <summary vsli:raw="Gets a value that indicates whether the collection view supports turning grouping data in real time on or off.">コレクション ビューがリアルタイムのデータのグループ化のオンまたはオフをサポートするかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection view supports turning live grouping on or off; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクション ビューがライブ グループ化のオンまたはオフをサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveSorting">
      <summary vsli:raw="Gets a value that indicates whether the collection view supports turning sorting data in real time on or off.">コレクション ビューがリアルタイムのデータの並べ替えのオンまたはオフをサポートするかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection view supports turning live sorting on or off; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクション ビューがライブ並べ替えのオンまたはオフをサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveFiltering">
      <summary vsli:raw="Gets or sets a value that indicates whether filtering data in real time is enabled.">リアルタイムでのデータのフィルター処理が有効かどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if filtering data in real time is enabled; &lt;see langword=&quot;false&quot; /&gt; if live filtering is not enabled; &lt;see langword=&quot;null&quot; /&gt; if it cannot be determined whether the collection view implements live filtering.">リアルタイムのデータのフィルター選択が有効になっている場合は <see langword="true" />。ライブ フィルター選択が有効になっていない場合は <see langword="false" />。コレクション ビューがライブ フィルター処理を実装しているかどうかを特定できない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveGrouping">
      <summary vsli:raw="Gets or sets a value that indicates whether grouping data in real time is enabled.">リアルタイムでのデータのグループ化が有効かどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if grouping data in real time is enable; &lt;see langword=&quot;false&quot; /&gt; if live grouping is not enabled; &lt;see langword=&quot;null&quot; /&gt; if it cannot be determined whether the collection view implements live grouping.">リアルタイムのデータのグループ化が有効になっている場合は <see langword="true" />。ライブ グループ化が有効になっていない場合は <see langword="false" />。コレクション ビューがライブ グループ化を実装しているかどうかを特定できない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveSorting">
      <summary vsli:raw="Gets or sets a value that indicates whether sorting in real time is enabled.">リアルタイムでの並べ替えが有効かどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if sorting data in real time is enable; &lt;see langword=&quot;false&quot; /&gt; if live sorting is not enabled; &lt;see langword=&quot;null&quot; /&gt; if it cannot be determined whether the collection view implements live sorting.">リアルタイムのデータの並べ替えが有効になっている場合は <see langword="true" />。ライブ並べ替えが有効になっていない場合は <see langword="false" />。コレクション ビューがライブ並べ替えを実装しているかどうかを特定できない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveFilteringProperties">
      <summary vsli:raw="Gets a collection of strings that specify the properties that participate in filtering data in real time.">リアルタイムのデータのフィルター選択に関係するプロパティを指定する文字列のコレクションを取得します。</summary>
      <returns vsli:raw="A collection of strings that specify the properties that participate in filtering data in real time.">リアルタイムのデータのフィルター選択に関係するプロパティを指定する文字列のコレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveGroupingProperties">
      <summary vsli:raw="Gets a collection of strings that specify the properties that participate in grouping data in real time.">リアルタイムのデータのグループ化に関係するプロパティを指定する文字列のコレクションを取得します。</summary>
      <returns vsli:raw="A collection of strings that specify the properties that participate in grouping data in real time.">リアルタイムのデータのグループ化に関係するプロパティを指定する文字列のコレクション。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveSortingProperties">
      <summary vsli:raw="Gets a collection of strings that specify the properties that participate in sorting data in real time.">リアルタイムのデータの並べ替えに関係するプロパティを指定する文字列のコレクションを取得します。</summary>
      <returns vsli:raw="A collection of strings that specify the properties that participate in sorting data in real time.">リアルタイムのデータの並べ替えに関係するプロパティを指定する文字列のコレクション。</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionView">
      <summary vsli:raw="Defines methods and properties that a &lt;see cref=&quot;T:System.Windows.Data.CollectionView&quot; /&gt; implements to provide editing capabilities to a collection.">コレクションに編集機能を提供するために <see cref="T:System.Windows.Data.CollectionView" /> に実装されるメソッドとプロパティを定義します。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.AddNew">
      <summary vsli:raw="Adds a new item to the collection.">新しい項目をコレクションに追加します。</summary>
      <returns vsli:raw="The new item that is added to the collection.">コレクションに追加された新しい項目。</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelEdit">
      <summary vsli:raw="Ends the edit transaction and, if possible, restores the original value to the item.">編集トランザクションを終了し、可能な場合は、項目の元の値を復元します。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelNew">
      <summary vsli:raw="Ends the add transaction and discards the pending new item.">追加トランザクションを終了し、保留中の新しい項目を破棄します。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitEdit">
      <summary vsli:raw="Ends the edit transaction and saves the pending changes.">編集トランザクションを終了し、保留中の変更を保存します。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitNew">
      <summary vsli:raw="Ends the add transaction and saves the pending new item.">追加トランザクションを終了し、保留中の新しい項目を保存します。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)">
      <summary vsli:raw="Begins an edit transaction of the specified item.">指定した項目の編集トランザクションを開始します。</summary>
      <param name="item" vsli:raw="The item to edit.">編集する項目。</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)">
      <summary vsli:raw="Removes the specified item from the collection.">指定した項目をコレクションから削除します。</summary>
      <param name="item" vsli:raw="The item to remove.">削除する項目。</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified position from the collection.">コレクション内の指定した位置にある項目を削除します。</summary>
      <param name="index" vsli:raw="The position of the item to remove.">削除する項目の位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0 or greater than the number of items in the collection view.">
        <paramref name="index" /> が 0 未満か、コレクション ビュー内の項目数を超えています。</exception>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanAddNew">
      <summary vsli:raw="Gets a value that indicates whether a new item can be added to the collection.">新しい項目をコレクションに追加できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a new item can be added to the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">新しい項目をコレクションに追加できる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit">
      <summary vsli:raw="Gets a value that indicates whether the collection view can discard pending changes and restore the original values of an edited object.">コレクション ビューが保留中の変更を破棄して、編集されたオブジェクトの元の値を復元できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection view can discard pending changes and restore the original values of an edited object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクション ビューが保留中の変更を破棄して、編集されたオブジェクトの元の値を復元できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanRemove">
      <summary vsli:raw="Gets a value that indicates whether an item can be removed from the collection.">コレクションから項目を削除できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item can be removed from the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">コレクションから項目を削除できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem">
      <summary vsli:raw="Gets the item that is being added during the current add transaction.">現在の追加トランザクション処理中に追加される項目を取得します。</summary>
      <returns vsli:raw="The item that is being added if &lt;see cref=&quot;P:System.ComponentModel.IEditableCollectionView.IsAddingNew&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> が <see langword="true" /> の場合は追加される項目、それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem">
      <summary vsli:raw="Gets the item in the collection that is being edited.">編集されているコレクション内の項目を取得します。</summary>
      <returns vsli:raw="The item in the collection that is being edited if &lt;see cref=&quot;P:System.ComponentModel.IEditableCollectionView.IsEditingItem&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">
        <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> が <see langword="true" /> である場合は、編集されているコレクション内の項目。それ以外の場合は、<see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsAddingNew">
      <summary vsli:raw="Gets a value that indicates whether an add transaction is in progress.">追加トランザクションが実行中かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an add transaction is in progress; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">追加トランザクションが実行中の場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsEditingItem">
      <summary vsli:raw="Gets a value that indicates whether an edit transaction is in progress.">編集トランザクションが実行中かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an edit transaction is in progress; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">編集トランザクションが実行中の場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition">
      <summary vsli:raw="Gets or sets the position of the new item placeholder in the collection view.">コレクション ビューにある新しい項目のプレースホルダーの位置を取得または設定します。</summary>
      <returns vsli:raw="One of the enumeration values that specifies the position of the new item placeholder in the collection view.">コレクション ビューにある新しい項目のプレースホルダーの位置を指定する列挙値の 1 つ。</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionViewAddNewItem">
      <summary vsli:raw="Defines methods and properties that a &lt;see cref=&quot;T:System.Windows.Data.CollectionView&quot; /&gt; implements to enable specifying adding items of a specific type.">特定の型の項目を追加できることを示すために <see cref="T:System.Windows.Data.CollectionView" /> で実装するメソッドとプロパティを定義します。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem(System.Object)">
      <summary vsli:raw="Adds the specified object to the collection.">指定したオブジェクトをコレクションに追加します。</summary>
      <param name="newItem" vsli:raw="The object to add to the collection.">コレクションに追加するオブジェクト。</param>
      <returns vsli:raw="The object that is added to the collection.">コレクションに追加されるオブジェクト。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem">
      <summary vsli:raw="Gets a value that indicates whether a specified object can be added to the collection.">指定したオブジェクトをコレクションに追加できるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a specified object can be added to the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したオブジェクトをコレクションに追加できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IItemProperties">
      <summary vsli:raw="Defines a property that provides information about an object's properties.">オブジェクトのプロパティに関する情報を提供するプロパティを定義します。</summary>
    </member>
    <member name="P:System.ComponentModel.IItemProperties.ItemProperties">
      <summary vsli:raw="Gets a collection that contains information about the properties that are available on the items in a collection.">コレクション内の項目で使用できるプロパティに関する情報を格納するコレクションを取得します。</summary>
      <returns vsli:raw="A collection that contains information about the properties that are available on the items in a collection.">コレクション内の項目で使用できるプロパティに関する情報を格納するコレクション。</returns>
    </member>
    <member name="T:System.ComponentModel.ItemPropertyInfo">
      <summary vsli:raw="Contains information about a property.">プロパティに関する情報を格納します。</summary>
    </member>
    <member name="M:System.ComponentModel.ItemPropertyInfo.#ctor(System.String,System.Type,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ItemPropertyInfo&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.ItemPropertyInfo" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The name of the property.">プロパティの名前。</param>
      <param name="type" vsli:raw="The type of the property.">プロパティの型。</param>
      <param name="descriptor" vsli:raw="An object that contains additional information about the property.">プロパティに関する追加情報を格納しているオブジェクト。</param>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Descriptor">
      <summary vsli:raw="Gets an object that contains additional information about the property.">プロパティに関する追加情報を格納しているオブジェクトを取得します。</summary>
      <returns vsli:raw="An object that contains additional information about the property.">プロパティに関する追加情報を格納しているオブジェクト。</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Name">
      <summary vsli:raw="Gets the name of the property.">プロパティの名前を取得します。</summary>
      <returns vsli:raw="The name of the property.">プロパティの名前。</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.PropertyType">
      <summary vsli:raw="Gets the type of the property.">プロパティの型を取得します。</summary>
      <returns vsli:raw="The type of the property.">プロパティの型。</returns>
    </member>
    <member name="T:System.ComponentModel.NewItemPlaceholderPosition">
      <summary vsli:raw="Specifies where the placeholder for a new item appears in the collection.">新しい項目のプレースホルダーが表示される、コレクション内の場所を示します。</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtBeginning">
      <summary vsli:raw="The placeholder for a new item appears at the beginning of the collection.  New items are at the beginning of the collection, after the new item placeholder.">新しい項目のプレースホルダーがコレクションの先頭に表示されます。  新しい項目は、コレクションの先頭で新しい項目のプレースホルダーの後にあります。</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtEnd">
      <summary vsli:raw="The placeholder for a new item appears at the end of the collection. New items are added at the end of the collection, before the new item placeholder.">新しい項目のプレースホルダーがコレクションの末尾に表示されます。 新しい項目は、コレクションの末尾で新しい項目のプレースホルダーの前に追加されます。</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.None">
      <summary vsli:raw="The collection does not use a new item placeholder. The position of items that are added depends on the underlying collection.  Usually, they are added at the end of the collection.">コレクションは新しい項目のプレースホルダーを使用しません。 追加される項目の位置は、基になるコレクションに応じて決まります。  それらは通常、コレクションの末尾に追加されます。</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventManager">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; implementation so that you can use the &quot;weak event listener&quot; pattern to attach listeners for the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">
        <see cref="T:System.Windows.WeakEventManager" /> を実装することにより、"弱いイベント リスナー" パターンを使用して <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントのリスナーを関連付けられるようにします。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary vsli:raw="Adds the specified event handler, which is called when specified source raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event for the specified property.">指定されたソースで指定されたプロパティの <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントが発生したときに呼び出されるイベント ハンドラーを追加します。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントを処理するデリゲート。</param>
      <param name="propertyName" vsli:raw="The name of the property that exists on &lt;paramref name=&quot;source&quot; /&gt; upon which to listen for changes. Set to &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; to indicate &quot;any property&quot;.">変更をリッスンする <paramref name="source" /> に存在するプロパティの名前。 <see cref="F:System.String.Empty" /> を設定し、"任意のプロパティ" を示します。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="More than one method is associated with &lt;paramref name=&quot;handler&quot; /&gt;.">複数のメソッドが <paramref name="handler" /> に関連付けられています。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary vsli:raw="Adds the specified listener to the list of listeners on the specified source.">指定したリスナーを、指定したソースのリスナーのリストに追加します。</summary>
      <param name="source" vsli:raw="The object with the event.">イベントを持つオブジェクト。</param>
      <param name="listener" vsli:raw="The object to add as a listener.">リスナーとして追加するオブジェクト。</param>
      <param name="propertyName" vsli:raw="The name of the property that exists on &lt;paramref name=&quot;source&quot; /&gt; upon which to listen for changes. Set to &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; to indicate &quot;any property&quot;.">変更をリッスンする <paramref name="source" /> に存在するプロパティの名前。 <see cref="F:System.String.Empty" /> を設定し、"任意のプロパティ" を示します。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.NewListenerList">
      <summary vsli:raw="Returns a new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
      <returns vsli:raw="A new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントのリスナーを格納する新しいオブジェクト。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary vsli:raw="Removes listeners that are no longer active from the data for the provided source.">指定したソースのデータから、アクティブでなくなったリスナーを削除します。</summary>
      <param name="source" vsli:raw="Source object to remove all listeners from.">すべてのリスナーを削除するソース オブジェクト。</param>
      <param name="data" vsli:raw="The data to purge. This is expected to be a &lt;see cref=&quot;T:System.Collections.Specialized.HybridDictionary&quot; /&gt;.">削除するデータ。 これは <see cref="T:System.Collections.Specialized.HybridDictionary" /> であることが求められます。</param>
      <param name="purgeAll" vsli:raw="Set to &lt;see langword=&quot;true&quot; /&gt; to stop listening and to completely remove all data.">リッスンを停止し、すべてのデータを完全に削除する場合は <see langword="true" /> に設定します。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if some entries were removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">一部のエントリが削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary vsli:raw="Removes the specified event handler from the specified source.">指定したソースから、指定したイベント ハンドラーを削除します。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントを発生させるソース オブジェクト。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントを処理するデリゲート。</param>
      <param name="propertyName" vsli:raw="The name of the property that exists on &lt;paramref name=&quot;source&quot; /&gt; upon which to stop listening for changes. Set to &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; to indicate &quot;any property&quot;.">変更のリッスンを停止する <paramref name="source" /> に存在するプロパティの名前。 <see cref="F:System.String.Empty" /> を設定し、"任意のプロパティ" を示します。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="More than one method is associated with &lt;paramref name=&quot;handler&quot; /&gt;.">複数のメソッドが <paramref name="handler" /> に関連付けられています。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary vsli:raw="Removes the specified listener from the list of listeners on the provided source.">指定したリスナーを、指定したソースのリスナーのリストから削除します。</summary>
      <param name="source" vsli:raw="The object to remove the listener from.">リスナーを削除するオブジェクト。</param>
      <param name="listener" vsli:raw="The listener to remove.">削除するリスナー。</param>
      <param name="propertyName" vsli:raw="The name of the property that exists on &lt;paramref name=&quot;source&quot; /&gt; upon which to stop listening for changes. Set to &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; to indicate &quot;any property&quot;.">変更のリッスンを停止する <paramref name="source" /> に存在するプロパティの名前。 <see cref="F:System.String.Empty" /> を設定し、"任意のプロパティ" を示します。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)">
      <summary vsli:raw="Begins listening for the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event on the provided source.">指定したソースで <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントのリッスンを開始します。</summary>
      <param name="source" vsli:raw="The object on which to start listening for &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt;.">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> のリッスンを開始するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)">
      <summary vsli:raw="Stops listening for the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event on the provided source.">指定したソースで <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> イベントのリッスンを停止します。</summary>
      <param name="source" vsli:raw="The source object on which to stop listening for &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt;.">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> のリッスンを停止するソース オブジェクト。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterAttribute">
      <summary vsli:raw="Specifies which properties should be reported by type descriptors, specifically the &lt;see cref=&quot;M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)&quot; /&gt; method.">型記述子で報告するプロパティを指定します。具体的には、<see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> メソッドです。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterAttribute.Default">
      <summary vsli:raw="This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.">このメンバーは .NET Framework インフラストラクチャをサポートします。独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.#ctor(System.ComponentModel.PropertyFilterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="filter" vsli:raw="The options that describe this property filter.">このプロパティ フィルターを記述するオプション。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the current &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt; .NET Framework attribute is equal to a specified object.">現在の <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> が、指定したオブジェクトと等しいかどうかを示す値を返し .NET Framework 属性 ます。</summary>
      <param name="value" vsli:raw="The object to compare to this &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt;.">この <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> と比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した <see langword="true" /> が現在の <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> と等しい場合は <see cref="T:System.ComponentModel.PropertyFilterAttribute" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt; .NET Framework attribute.">現在の <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 属性 のハッシュ コードを返します。</summary>
      <returns vsli:raw="A signed 32-bit integer value.">符号付き 32 ビット整数値。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Match(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the property filter options of the current &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt; .NET Framework attribute match the property filter options of the provided object.">現在ののプロパティフィルターオプションが、 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 属性 指定されたオブジェクトのプロパティフィルターオプションと一致するかどうかを示す値を返します。</summary>
      <param name="value" vsli:raw="The object to compare. This object is expected to be a &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt;.">比較対象のオブジェクト。 このオブジェクトは、<see cref="T:System.ComponentModel.PropertyFilterAttribute" /> であることが求められます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match exists; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">一致が存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyFilterAttribute.Filter">
      <summary vsli:raw="Gets the filter options for this &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt; .NET Framework attribute.">こののフィルターオプションを取得し <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 属性 ます。</summary>
      <returns vsli:raw="The property filter options.">プロパティ フィルター オプション。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterOptions">
      <summary vsli:raw="Specifies which properties should be reported by type descriptors, specifically the &lt;see cref=&quot;M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)&quot; /&gt; method. This enumeration is used to specify the value of the &lt;see cref=&quot;P:System.ComponentModel.PropertyFilterAttribute.Filter&quot; /&gt; property.">型記述子で報告するプロパティを指定します。具体的には、<see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> メソッドです。 この列挙体は、<see cref="P:System.ComponentModel.PropertyFilterAttribute.Filter" /> プロパティの値を指定するために使用します。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.All">
      <summary vsli:raw="Return all properties.">すべてのプロパティを返します。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Invalid">
      <summary vsli:raw="Return only those properties that are not valid given the current context of the object.">オブジェクトの現在のコンテキストが指定された場合に、無効なプロパティのみを返します。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.None">
      <summary vsli:raw="Return no properties.">プロパティを返しません。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.SetValues">
      <summary vsli:raw="Return only those properties that have local values currently set.">ローカル値が現在設定されているプロパティのみを返します。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.UnsetValues">
      <summary vsli:raw="Return only those properties whose local values are not set, or do not have properties set in an external expression store (such as binding or deferred resource).">ローカル値が設定されていないプロパティか、またはプロパティが外部の式ストア (バインディングや遅延リソースなど) に設定されていないプロパティだけを返します。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Valid">
      <summary vsli:raw="Return any property that is valid on the object in the current scope.">現在のスコープにあるオブジェクトで有効なすべてのプロパティを返します。</summary>
    </member>
    <member name="T:System.ComponentModel.SortDescription">
      <summary vsli:raw="Defines the direction and the property name to be used as the criteria for sorting a collection.">コレクションの並べ替えの基準として使用する方向とプロパティ名を定義します。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; structure.">
        <see cref="T:System.ComponentModel.SortDescription" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="propertyName" vsli:raw="The name of the property to sort the list by. If the collection contains strings or value types, set this parameter to the empty string (&quot;&quot;).">リストの並べ替えに使用するプロパティの名前です。</param>
      <param name="direction" vsli:raw="The sort order.">並べ替え順序。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="The &lt;paramref name=&quot;direction&quot; /&gt; parameter does not specify a valid value.">
        <paramref name="direction" /> パラメーターは有効な値を指定していません。</exception>
    </member>
    <member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
      <summary vsli:raw="Compares the specified instance and the current instance of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; for value equality.">指定したインスタンスと <see cref="T:System.ComponentModel.SortDescription" /> の現在のインスタンスを比較し、値が等しいかどうかを確認します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; instance to compare.">比較対象の <see cref="T:System.ComponentModel.SortDescription" /> インスタンス。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; and this instance of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; have the same values.">
        <paramref name="obj" /> と、この <see cref="T:System.ComponentModel.SortDescription" /> のインスタンスが同じ値を持つ場合は <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt;.">
        <see cref="T:System.ComponentModel.SortDescription" /> のこのインスタンスのハッシュ コードを返します。</summary>
      <returns vsli:raw="The hash code for this instance of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt;.">
        <see cref="T:System.ComponentModel.SortDescription" /> のこのインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; objects for value equality.">2 つの <see cref="T:System.ComponentModel.SortDescription" /> オブジェクトの値が等しいかどうかを比較します。</summary>
      <param name="sd1" vsli:raw="The first instance to compare.">比較する 1 番目のインスタンス。</param>
      <param name="sd2" vsli:raw="The second instance to compare.">比較する 2 番目のインスタンス。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two objects are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのオブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; objects for value inequality.">2 つの <see cref="T:System.ComponentModel.SortDescription" /> オブジェクトが等しくないかどうかを比較します。</summary>
      <param name="sd1" vsli:raw="The first instance to compare.">比較する 1 番目のインスタンス。</param>
      <param name="sd2" vsli:raw="The second instance to compare.">比較する 2 番目のインスタンス。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">値が等しくない場合は <see langword="true" />、等しい場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.Direction">
      <summary vsli:raw="Gets or sets a value that indicates whether to sort in ascending or descending order.">昇順または降順のどちらで並べ替えるかを示す値を取得または設定します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; value to indicate whether to sort in ascending or descending order.">昇順または降順のどちらで並べ替えるかを示す <see cref="T:System.ComponentModel.ListSortDirection" /> 値。</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.IsSealed">
      <summary vsli:raw="Gets a value that indicates whether this object is in an immutable state.">このオブジェクトが変更できない状態にあるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object is in use; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このオブジェクトが使用中の場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.PropertyName">
      <summary vsli:raw="Gets or sets the property name being used as the sorting criteria.">並べ替えの基準として使用されるプロパティ名を取得または設定します。</summary>
      <returns vsli:raw="The default value is null.">既定値は、null です。</returns>
    </member>
    <member name="T:System.ComponentModel.SortDescriptionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; objects.">
        <see cref="T:System.ComponentModel.SortDescription" /> オブジェクトのコレクションを表します。</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
      <summary vsli:raw="Occurs when an item is added or removed.">項目が追加または削除されたときに発生します。</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary vsli:raw="Occurs when an item is added or removed.">項目が追加または削除されたときに発生します。</summary>
    </member>
    <member name="F:System.ComponentModel.SortDescriptionCollection.Empty">
      <summary vsli:raw="Gets an empty and non-modifiable instance of &lt;see cref=&quot;T:System.ComponentModel.SortDescriptionCollection&quot; /&gt;.">
        <see cref="T:System.ComponentModel.SortDescriptionCollection" /> の空および変更不可能なインスタンスを取得します。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SortDescriptionCollection&quot; /&gt; class.">
        <see cref="T:System.ComponentModel.SortDescriptionCollection" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.ClearItems">
      <summary vsli:raw="Removes all items from the collection.">コレクションからすべての項目を削除します。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary vsli:raw="Inserts an item into the collection at the specified index.">コレクション内の指定したインデックスの位置に項目を挿入します。</summary>
      <param name="index" vsli:raw="The zero-based index where the &lt;paramref name=&quot;item&quot; /&gt; is inserted.">
        <paramref name="item" /> が挿入される位置の 0 から始まるインデックス。</param>
      <param name="item" vsli:raw="The object to insert.">挿入するオブジェクト。</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index in the collection.">コレクション内の指定したインデックス位置にある項目を削除します。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">削除する要素の、0 から始まるインデックス番号。</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary vsli:raw="Replaces the element at the specified index.">指定したインデックス位置にある要素を置き換えます。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to replace.">置き換える要素の 0 から始まるインデックス番号。</param>
      <param name="item" vsli:raw="The new value for the element at the specified index.">指定したインデックス位置に存在する要素の新しい値。</param>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceLevel">
      <summary vsli:raw="Describes the level of detail to trace about a particular object.">特定のオブジェクトに関するトレースの詳細レベルについて説明します。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.High">
      <summary vsli:raw="Traces all additional information.">すべての詳細情報をトレースします。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Low">
      <summary vsli:raw="Traces some additional information.">少量の詳細情報をトレースします。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Medium">
      <summary vsli:raw="Traces a medium amount of additional information.">中程度の量の詳細情報をトレースします。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.None">
      <summary vsli:raw="Traces no available additional information.">入手可能な詳細情報をトレースしません。</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceSources">
      <summary vsli:raw="Provides debug tracing support that is specifically targeted for Windows Presentation Foundation (WPF) applications.">デバッグ トレースのサポートを、特に Windows Presentation Foundation (WPF) アプリケーション向けに提供します。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty">
      <summary vsli:raw="Identifies the &lt;see cref=&quot;P:System.Diagnostics.PresentationTraceSources.TraceLevel&quot; /&gt; attached property.">
        <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 添付プロパティを識別します。</summary>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.GetTraceLevel(System.Object)">
      <summary vsli:raw="Gets the value of the &lt;see cref=&quot;P:System.Diagnostics.PresentationTraceSources.TraceLevel&quot; /&gt; attached property for a specified element.">指定した要素の <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 添付プロパティの値を取得します。</summary>
      <param name="element" vsli:raw="The element from which the property value is read.">プロパティ値の読み取り元になる要素。</param>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Diagnostics.PresentationTraceSources.TraceLevel&quot; /&gt; property value for the element.">要素の <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> プロパティ値。</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.Refresh">
      <summary vsli:raw="Refreshes trace sources, by forcing the app.config file to be re-read.">app.config ファイルを強制的に再読み込みすることで、トレース ソースを更新します。</summary>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.SetTraceLevel(System.Object,System.Diagnostics.PresentationTraceLevel)">
      <summary vsli:raw="Sets the value of the &lt;see cref=&quot;P:System.Diagnostics.PresentationTraceSources.TraceLevel&quot; /&gt; attached property to a specified element.">指定した要素に <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 添付プロパティの値を設定します。</summary>
      <param name="element" vsli:raw="The element to which the attached property is written.">添付プロパティの書き込み先となる要素。</param>
      <param name="traceLevel" vsli:raw="The needed &lt;see cref=&quot;T:System.Diagnostics.PresentationTraceLevel&quot; /&gt; value.">必要な <see cref="T:System.Diagnostics.PresentationTraceLevel" /> 値。</param>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.AnimationSource">
      <summary vsli:raw="Gets an animation trace source.">アニメーション トレース ソースを取得します。</summary>
      <returns vsli:raw="An animation trace source.">アニメーション トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DataBindingSource">
      <summary vsli:raw="Gets a data-binding trace source.">データ バインディング トレース ソースを取得します。</summary>
      <returns vsli:raw="A data-binding trace source.">データ バインディング トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DependencyPropertySource">
      <summary vsli:raw="Gets a dependency property trace source.">依存関係プロパティのトレース ソースを取得します。</summary>
      <returns vsli:raw="A dependency property trace source.">依存関係プロパティのトレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DocumentsSource">
      <summary vsli:raw="Gets a document trace source.">ドキュメント トレース ソースを取得します。</summary>
      <returns vsli:raw="A document trace source.">ドキュメント トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.FreezableSource">
      <summary vsli:raw="Gets a Freezable trace source.">Freezable トレース ソースを取得します。</summary>
      <returns vsli:raw="A Freezable trace source.">Freezable トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.HwndHostSource">
      <summary vsli:raw="Gets an hwnd host trace source.">hwnd ホスト トレース ソースを取得します。</summary>
      <returns vsli:raw="An hwnd host trace source.">hwnd ホスト トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.MarkupSource">
      <summary vsli:raw="Gets a markup trace source.">マークアップ トレース ソースを取得します。</summary>
      <returns vsli:raw="A markup trace source.">マークアップ トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.NameScopeSource">
      <summary vsli:raw="Gets a name scope trace source.">名前のスコープ トレース ソースを取得します。</summary>
      <returns vsli:raw="A name scope trace source.">名前のスコープ トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ResourceDictionarySource">
      <summary vsli:raw="Gets a resource dictionary trace source.">リソース ディクショナリ トレース ソースを取得します。</summary>
      <returns vsli:raw="A resource dictionary trace source.">リソース ディクショナリ トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.RoutedEventSource">
      <summary vsli:raw="Gets a routed event trace source.">ルーティング イベントのトレース ソースを取得します。</summary>
      <returns vsli:raw="A routed event trace source.">ルーティング イベントのトレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ShellSource">
      <summary vsli:raw="Gets a shell trace source.">シェル トレース ソースを取得します。</summary>
      <returns vsli:raw="A shell trace source.">シェル トレース ソース。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.TraceLevel" />
    <member name="T:System.IO.Packaging.CertificateEmbeddingOption">
      <summary vsli:raw="Specifies the location where the X.509 certificate that is used in signing is stored.">署名に使用される X.509 証明書を格納する場所を指定します。</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InCertificatePart">
      <summary vsli:raw="The certificate is embedded in its own &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt;.">証明書は、独自の <see cref="T:System.IO.Packaging.PackagePart" /> に埋め込まれます。</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InSignaturePart">
      <summary vsli:raw="The certificate is embedded in the &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.SignaturePart&quot; /&gt; that is created for the signature being added.">証明書は、追加された署名に対して作成された <see cref="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart" /> に埋め込まれます。</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.NotEmbedded">
      <summary vsli:raw="The certificate in not embedded in the package.">パッケージに埋め込まれていない証明書。</summary>
    </member>
    <member name="T:System.IO.Packaging.EncryptedPackageEnvelope">
      <summary vsli:raw="Represents an OLE compound file that contains an encrypted package.">暗号化されたパッケージを含む OLE 複合ファイルを表します。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Close">
      <summary vsli:raw="Closes the encrypted package and the OLE compound file that holds it.">暗号化されたパッケージとそれを保持する OLE 複合ファイルを閉じます。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary vsli:raw="Creates and returns an &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; on the specified stream.">指定したストリームに <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> を作成して返します。</summary>
      <param name="envelopeStream" vsli:raw="The stream on which to create the file.">ファイルを作成するストリーム。</param>
      <param name="publishLicense" vsli:raw="The publish license that is embedded in the compound file.">複合ファイルに埋め込まれている公開ライセンス。</param>
      <param name="cryptoProvider" vsli:raw="An object that determines what operations the current user is allowed to perform on the encrypted content.">現在のユーザーが暗号化されたコンテンツで実行できる操作を決定するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;envelopeStream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="envelopeStream" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;envelopeStream&quot; /&gt; does not provide read/write access.">
        <paramref name="envelopeStream" /> が読み取り/書き込みアクセスを提供しません。</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;.">新しく作成された <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary vsli:raw="Creates and returns an &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; and gives it the specified file name.">
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> を作成して返し、指定したファイル名を割り当てます。</summary>
      <param name="envelopeFileName" vsli:raw="The name of the OLE compound file.">OLE 複合ファイルの名前。</param>
      <param name="publishLicense" vsli:raw="The publish license that is embedded in the compound file.">複合ファイルに埋め込まれている公開ライセンス。</param>
      <param name="cryptoProvider" vsli:raw="An object that determines what operations the current user is allowed to perform on the encrypted content.">現在のユーザーが暗号化されたコンテンツで実行できる操作を決定するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;envelopeFileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="envelopeFileName" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;.">新しく作成された <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary vsli:raw="Creates and returns an &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; (on the specified stream) that uses the specified unencrypted package as its content.">指定した暗号化されていないパッケージをコンテンツとして使用する <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> を (指定したストリームに) 作成して返します。</summary>
      <param name="envelopeStream" vsli:raw="The stream on which to create the file.">ファイルを作成するストリーム。</param>
      <param name="packageStream" vsli:raw="The stream representing the existing unencrypted package.">暗号化されていない、既存のパッケージを表すストリーム。</param>
      <param name="publishLicense" vsli:raw="The publish license that is embedded in the compound file.">複合ファイルに埋め込まれている公開ライセンス。</param>
      <param name="cryptoProvider" vsli:raw="An object that determines what operations the current user is allowed to perform on the encrypted content.">現在のユーザーが暗号化されたコンテンツで実行できる操作を決定するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;envelopeStream&quot; /&gt; or &lt;paramref name=&quot;packageStream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="envelopeStream" /> または <paramref name="packageStream" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;envelopeStream&quot; /&gt; does not provide read/write access.">
        <paramref name="envelopeStream" /> が読み取り/書き込みアクセスを提供しません。</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;.">新しく作成された <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary vsli:raw="Creates and returns an &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; that uses the specified unencrypted package as its content, and gives it the specified file name.">指定した暗号化されていないパッケージをコンテンツとして使用する <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> を作成して返し、指定したファイル名を割り当てます。</summary>
      <param name="envelopeFileName" vsli:raw="The name of the OLE compound file.">OLE 複合ファイルの名前。</param>
      <param name="packageStream" vsli:raw="The stream representing the existing unencrypted package.">暗号化されていない、既存のパッケージを表すストリーム。</param>
      <param name="publishLicense" vsli:raw="The publish license that is embedded in the compound file.">複合ファイルに埋め込まれている公開ライセンス。</param>
      <param name="cryptoProvider" vsli:raw="An object that determines what operations the current user is allowed to perform on the encrypted content.">現在のユーザーが暗号化されたコンテンツで実行できる操作を決定するオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;envelopeFileName&quot; /&gt; or &lt;paramref name=&quot;packageStream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="envelopeFileName" /> または <paramref name="packageStream" /> が <see langword="null" /> です。</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;.">新しく作成された <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;.">
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Flush">
      <summary vsli:raw="Flush the stream for both the &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; and its package content.">
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> およびそのパッケージ コンテンツ両方のストリームをフラッシュします。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.GetPackage">
      <summary vsli:raw="Gets the encrypted package inside the &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;.">
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 内部の暗号化されたパッケージを取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.Package&quot; /&gt; in the envelope.">エンベロープ内の <see cref="T:System.IO.Packaging.Package" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)">
      <summary vsli:raw="Gets a value specifying whether the specified stream is an OLE compound file with an encrypted package stream.">指定したストリームが、暗号化されたパッケージ ストリームを含む OLE 複合ファイルかどうかを指定する値を取得します。</summary>
      <param name="stream" vsli:raw="The stream that is tested.">テストされるストリーム。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified stream is an OLE compound file with an encrypted package stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したストリームが、暗号化されたパッケージ ストリームを含む OLE 複合ファイルである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)">
      <summary vsli:raw="Gets a value specifying whether the specified file is an OLE compound file with an encrypted package stream.">指定したファイルが、暗号化されたパッケージ ストリームを含んだ OLE 複合ファイルかどうかを指定する値を取得します。</summary>
      <param name="fileName" vsli:raw="The file that is tested.">テストされるファイル。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified file is an OLE compound file with an encrypted package stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したファイルが、暗号化されたパッケージ ストリームを含んだ OLE 複合ファイルである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)">
      <summary vsli:raw="Open the encrypted package in the specified stream.">指定したストリーム内の暗号化されたパッケージを開きます。</summary>
      <param name="envelopeStream" vsli:raw="The stream containing the encrypted package.">暗号化されたパッケージを含むストリーム。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; that is opened.">開いている <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)">
      <summary vsli:raw="Open the encrypted package in the specified file as read only and unshared.">読み取り専用かつ非共有として指定されたファイル内の暗号化されたパッケージを開きます。</summary>
      <param name="envelopeFileName" vsli:raw="The file containing the encrypted package.">暗号化されたパッケージを含むファイル。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; that is opened.">開いている <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)">
      <summary vsli:raw="Open the encrypted package in the specified file as unshared and with the specified access.">非共有として指定され、特定のアクセス権が必要なファイル内の暗号化されたパッケージを開きます。</summary>
      <param name="envelopeFileName" vsli:raw="The file containing the encrypted package.">暗号化されたパッケージを含むファイル。</param>
      <param name="access" vsli:raw="The type of access.">アクセスの種類です。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; that is opened.">開いている <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)">
      <summary vsli:raw="Open the encrypted package in the specified file and gives it the specified access and sharing.">指定したファイル内の暗号化されたパッケージを開き、特定のアクセス権と共有を割り当てます。</summary>
      <param name="envelopeFileName" vsli:raw="The file containing the encrypted package.">暗号化されたパッケージを含むファイル。</param>
      <param name="access" vsli:raw="The type of access.">アクセスの種類です。</param>
      <param name="sharing" vsli:raw="The type of sharing.">共有の種類。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; that is opened.">開いている <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess">
      <summary vsli:raw="Gets a value that specifies whether the file was opened with access to read, write, or both.">読み取り、書き込み、または読み書き両方のうち、どのアクセス権を使用してファイルが開かれたかを指定する値を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.FileAccess&quot; /&gt; value that was used to open the file.">ファイルを開くために使用された <see cref="T:System.IO.FileAccess" /> 値。</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties">
      <summary vsli:raw="Gets the core package properties (such as Title and Subject) of the rights managed document.">権限管理ドキュメントのコア パッケージ プロパティ (タイトルやサブジェクト名など) を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.PackageProperties&quot; /&gt; for the package.">パッケージの <see cref="T:System.IO.Packaging.PackageProperties" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation">
      <summary vsli:raw="Gets the rights management information stored in the &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;; specifically, the &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; and the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt;s stored in the OLE compound file that embodies the rights-management protected package.">
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> に格納されている権限管理情報を取得します。主に対象となるのは、権限管理のために保護されているパッケージが組み込まれた OLE 複合ファイルに格納されている、<see cref="T:System.Security.RightsManagement.PublishLicense" /> および <see cref="T:System.Security.RightsManagement.UseLicense" /> です。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.RightsManagementInformation&quot; /&gt; for the package.">パッケージの <see cref="T:System.IO.Packaging.RightsManagementInformation" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo">
      <summary vsli:raw="Gets an object that provides access to the compound file streams outside the encrypted package.">暗号化されたパッケージの外部にある複合ファイル ストリームへアクセスするためのオブジェクトを取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Packaging.StorageInfo&quot; /&gt; representing streams in the OLE compound file that are outside the encrypted package.">暗号化されたパッケージの外部にある OLE 複合ファイル内のストリームを表す <see cref="T:System.IO.Packaging.StorageInfo" />。</returns>
    </member>
    <member name="T:System.IO.Packaging.InvalidSignatureEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent&quot; /&gt; that is raised when &lt;see cref=&quot;M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)&quot; /&gt; detects an invalid signature.">
        <see cref="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" /> が無効な署名を検出したときに発生する <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> を処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The invalid &lt;see cref=&quot;T:System.IO.Packaging.PackageDigitalSignature&quot; /&gt; source of the event.">イベントのソースである無効な <see cref="T:System.IO.Packaging.PackageDigitalSignature" />。</param>
      <param name="e" vsli:raw="The event data.">イベントのデータ。</param>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignature">
      <summary vsli:raw="Represents a digital signature that is applied to a set of package parts and relationships.">パッケージ パーツとリレーションシップのセットに適用されるデジタル署名を表します。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.GetPartTransformList(System.Uri)">
      <summary vsli:raw="Returns an ordered list of the &lt;see cref=&quot;T:System.Security.Cryptography.Xml.Transform&quot; /&gt; operations applied to a given part.">指定したパーツに適用される <see cref="T:System.Security.Cryptography.Xml.Transform" /> 操作の順序付きリストを返します。</summary>
      <param name="partName" vsli:raw="The &lt;see cref=&quot;T:System.Uri&quot; /&gt; of the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; to return the transform list for.">変換リストを返す <see cref="T:System.Uri" /> の <see cref="T:System.IO.Packaging.PackagePart" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
      <returns vsli:raw="An ordered list of URI strings, such as &lt;see cref=&quot;F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl&quot; /&gt; or &lt;see cref=&quot;F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl&quot; /&gt;, that represents the canonical XML transformations applied to the part with the given &lt;paramref name=&quot;partName&quot; /&gt; URI.">指定した <paramref name="partName" /> URI を持つパーツに適用される正規 XML 変換を表す、<see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" /> や <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" /> などの URI 文字列の順序付きリスト。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify">
      <summary vsli:raw="Verifies the digital signature against an X.509 certificate.">X.509 証明書に対してデジタル署名を検証します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
      <returns vsli:raw="&lt;see cref=&quot;F:System.IO.Packaging.VerifyResult.Success&quot; /&gt; if the verification succeeded; otherwise, one of the &lt;see cref=&quot;T:System.IO.Packaging.VerifyResult&quot; /&gt; values that identifies a problem.">検証に成功した場合は <see cref="F:System.IO.Packaging.VerifyResult.Success" />。それ以外の場合は、問題を識別する <see cref="T:System.IO.Packaging.VerifyResult" /> 値のいずれか。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary vsli:raw="Verifies the digital signature against a given X.509 certificate.">指定した X.509 証明書に対してデジタル署名を検証します。</summary>
      <param name="signingCertificate" vsli:raw="The signer's X.509 certificate to verify the digital signature against.">デジタル署名の検証対象となる署名者の X.509 証明書。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
      <returns vsli:raw="&lt;see cref=&quot;F:System.IO.Packaging.VerifyResult.Success&quot; /&gt; if the verification succeeded; otherwise, one of the &lt;see cref=&quot;T:System.IO.Packaging.VerifyResult&quot; /&gt; values that identifies a problem.">検証に成功した場合は <see cref="F:System.IO.Packaging.VerifyResult.Success" />。それ以外の場合は、問題を識別する <see cref="T:System.IO.Packaging.VerifyResult" /> 値のいずれか。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.CertificateEmbeddingOption">
      <summary vsli:raw="Gets the X.509 certificate embedding option.">X.509 証明書の埋め込みオプションを取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.IO.Packaging.CertificateEmbeddingOption&quot; /&gt; values that specifies the option for the digital signature.">デジタル署名のオプションを指定する <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> 値の 1 つ。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signature">
      <summary vsli:raw="Gets or sets the XML digital signature.">XML デジタル署名を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
      <returns vsli:raw="The XML digital signature.">XML デジタル署名。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; that contains the signature.">署名を含む <see cref="T:System.IO.Packaging.PackagePart" /> を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
      <returns vsli:raw="The package part that contains the signature.">署名を含むパッケージ パーツ。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureType">
      <summary vsli:raw="Gets the URI string that identifies the signature type.">署名の種類を識別する URI 文字列を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
      <returns vsli:raw="A URI string that identifies the signature type. The default is &lt;see cref=&quot;F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl&quot; /&gt;.">署名の種類を識別する URI 文字列。 既定値は、<see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" /> です。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureValue">
      <summary vsli:raw="Gets the encrypted hash value of the &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt;.">
        <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> の暗号化されたハッシュ値を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
      <returns vsli:raw="A byte array that contains the encrypted hash value of the &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt;.">
        <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> の暗号化されたハッシュ値を含むバイト配列。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedParts">
      <summary vsli:raw="Gets a collection of all the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; objects signed with the signature.">この署名で署名されるすべての <see cref="T:System.IO.Packaging.PackagePart" /> オブジェクトのコレクションを取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
      <returns vsli:raw="A collection that contains all the package parts signed with the signature.">この署名で署名されるすべてのパッケージ パーツを含むコレクション。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedRelationshipSelectors">
      <summary vsli:raw="Gets the list of the &lt;see cref=&quot;T:System.IO.Packaging.PackageRelationship&quot; /&gt; parts that have been signed with the signature.">この署名で署名された <see cref="T:System.IO.Packaging.PackageRelationship" /> パーツのリストを取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
      <returns vsli:raw="The list of the &lt;see cref=&quot;T:System.IO.Packaging.PackageRelationship&quot; /&gt; parts that have been signed with the signature.">この署名で署名された <see cref="T:System.IO.Packaging.PackageRelationship" /> パーツのリスト。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signer">
      <summary vsli:raw="Gets the X.509 certificate of the signer.">署名者の X.509 証明書を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
      <returns vsli:raw="The digital certificate of the signer, or &lt;see langword=&quot;null&quot; /&gt; if the certificate is not stored in the &lt;see cref=&quot;T:System.IO.Packaging.Package&quot; /&gt;.">署名者のデジタル証明書。証明書が <see cref="T:System.IO.Packaging.Package" /> に格納されていない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SigningTime">
      <summary vsli:raw="Gets the date and time that the signature was created.">署名が作成された日時を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
      <returns vsli:raw="The date and time that the signature was created.">署名が作成された日時。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.TimeFormat">
      <summary vsli:raw="Gets the format of the date and time returned by the &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.SigningTime&quot; /&gt; property.">
        <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> プロパティによって返される日時の形式を取得します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">デジタル <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> が削除されました。</exception>
      <returns vsli:raw="The format of the date and time returned by the &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.SigningTime&quot; /&gt; property.">
        <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> プロパティによって返される日時の形式。</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignatureManager">
      <summary vsli:raw="Provides a utility class for the creation and verification of digital signatures in a &lt;see cref=&quot;T:System.IO.Packaging.Package&quot; /&gt;.">
        <see cref="T:System.IO.Packaging.Package" /> でデジタル署名を作成し検証するためのユーティリティ クラスを提供します。</summary>
    </member>
    <member name="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)&quot; /&gt; encounters an invalid signature.">
        <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> で無効な署名が見つかった場合に発生します。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.Packaging.PackageDigitalSignatureManager&quot; /&gt; class for use with a specified &lt;see cref=&quot;T:System.IO.Packaging.Package&quot; /&gt;.">指定した <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager" /> で使用する <see cref="T:System.IO.Packaging.Package" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="package" vsli:raw="The package associated with this signature manager.">この署名マネージャーに関連付けられたパッケージ。</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign">
      <summary vsli:raw="Countersigns all the signatures in the package with a user-selected X.509 certificate.">ユーザーが選択した X.509 証明書を使用して、パッケージのすべての署名に副署名します。</summary>
      <returns vsli:raw="The signature that was added as a countersign; or &lt;see langword=&quot;null&quot; /&gt; if no certificate could be located or the user canceled the certificate selection dialog.">副署名として追加された署名。証明書が見つからない場合またはユーザーが証明書選択ダイアログをキャンセルした場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary vsli:raw="Countersigns all the signatures in the package with a specified X.509 certificate.">パッケージ内のすべての署名に、指定した X.509 証明書で副署名します。</summary>
      <param name="certificate" vsli:raw="The X.509 certificate to add as a countersign signature.">副署名として追加する X.509 証明書。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;certificate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="certificate" /> は <see langword="null" /> です</exception>
      <returns vsli:raw="The signature that was added as a countersign.">副署名として追加された署名。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary vsli:raw="Countersigns a list of signatures with a given X.509 certificate.">指定した X.509 証明書を使用して、署名の一覧に副署名します。</summary>
      <param name="certificate" vsli:raw="The X.509 certificate to countersign each of the specified &lt;paramref name=&quot;signatures&quot; /&gt;.">指定した各 <paramref name="signatures" /> に副署名するための X.509 証明書。</param>
      <param name="signatures" vsli:raw="The list of signatures to countersign.">副署名の対象となる署名の一覧。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Either the &lt;paramref name=&quot;certificate&quot; /&gt; or &lt;paramref name=&quot;signatures&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="certificate" /> パラメーターまたは <paramref name="signatures" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The package contains no signed &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; objects.">パッケージに署名された <see cref="T:System.IO.Packaging.PackagePart" /> オブジェクトが含まれていません。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The package contains no &lt;see cref=&quot;T:System.IO.Packaging.PackageDigitalSignature&quot; /&gt; parts.">パッケージに <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> パーツが含まれていません。</exception>
      <returns vsli:raw="The digital signature used to countersign each of the &lt;paramref name=&quot;signatures&quot; /&gt;.">各 <paramref name="signatures" /> に副署名するために使用するデジタル署名。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)">
      <summary vsli:raw="Returns the digital signature for a given signature uniform resource identifier (URI).">指定した署名の Uniform Resource Identifier (URI) に対するデジタル署名を返します。</summary>
      <param name="signatureUri" vsli:raw="The URI of the digital signature to return.">返されるデジタル署名の URI。</param>
      <returns vsli:raw="The digital signature for the specified &lt;paramref name=&quot;signatureUri&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if a signature for the given &lt;paramref name=&quot;signatureUri&quot; /&gt; cannot be found.">指定した <paramref name="signatureUri" /> のデジタル署名。指定した <paramref name="signatureUri" /> の署名が見つからない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures">
      <summary vsli:raw="Removes all digital signatures from the package.">パッケージからすべてのデジタル署名を削除します。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)">
      <summary vsli:raw="Removes the digital signature with a given signature uniform resource identifier (URI).">指定した署名の Uniform Resource Identifier (URI) と共にデジタル署名を削除します。</summary>
      <param name="signatureUri" vsli:raw="The URI of the &lt;see cref=&quot;T:System.IO.Packaging.PackageDigitalSignature&quot; /&gt; to remove.">削除する <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> の URI。</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary vsli:raw="Prompts the user for an X.509 certificate, which is then used to digitally sign a specified list of package parts.">X.509 証明書をユーザーに要求するプロンプトを表示します。この証明書を使用して、指定されたパッケージ パーツの一覧にデジタル署名します。</summary>
      <param name="parts" vsli:raw="The list of uniform resource identifiers (URIs) for the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; elements to sign.">署名する <see cref="T:System.IO.Packaging.PackagePart" /> 要素の Uniform Resource Identifier (URI) の一覧。</param>
      <returns vsli:raw="The digital signature used to sign the list of &lt;paramref name=&quot;parts&quot; /&gt;.">
        <paramref name="parts" /> の一覧の署名に使用するデジタル署名。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary vsli:raw="Signs a list of package parts with a given X.509 certificate.">指定された X.509 証明書を使用してパッケージ パーツの一覧を署名します。</summary>
      <param name="parts" vsli:raw="The list of uniform resource identifiers (URIs) for the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; elements to sign.">署名する <see cref="T:System.IO.Packaging.PackagePart" /> 要素の Uniform Resource Identifier (URI) の一覧。</param>
      <param name="certificate" vsli:raw="The X.509 certificate to use to digitally sign each of the specified &lt;paramref name=&quot;parts&quot; /&gt;.">指定された <paramref name="parts" /> のそれぞれにデジタル署名するために使用する X.509 証明書。</param>
      <returns vsli:raw="The digital signature used to sign the given list of &lt;paramref name=&quot;parts&quot; /&gt;; or &lt;see langword=&quot;null&quot; /&gt; if no certificate could be found or the user clicked &quot;Cancel&quot; in the certificate selection dialog box.">
        <paramref name="parts" /> の指定された一覧に署名するために使用されるデジタル署名、または、証明書が見つからなかった場合や証明書の選択ダイアログ ボックスでユーザーが [キャンセル] をクリックした場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})">
      <summary vsli:raw="Signs a list of package parts and package relationships with a given X.509 certificate.">指定した X.509 証明書を使用して、パッケージ パーツとパッケージ リレーションシップの一覧に署名します。</summary>
      <param name="parts" vsli:raw="The list of uniform resource identifiers (URIs) for the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; objects to sign.">署名する <see cref="T:System.IO.Packaging.PackagePart" /> オブジェクトの Uniform Resource Identifier (URI) の一覧。</param>
      <param name="certificate" vsli:raw="The X.509 certificate to use to digitally sign each of the specified parts and relationships.">指定したパーツおよびリレーションシップのそれぞれにデジタル署名するために使用する X.509 証明書。</param>
      <param name="relationshipSelectors" vsli:raw="The list of &lt;see cref=&quot;T:System.IO.Packaging.PackageRelationship&quot; /&gt; objects to sign.">署名する <see cref="T:System.IO.Packaging.PackageRelationship" /> オブジェクトの一覧。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Neither &lt;paramref name=&quot;parts&quot; /&gt; nor &lt;paramref name=&quot;relationshipSelectors&quot; /&gt; specify any objects to sign.">
        <paramref name="parts" /> でも <paramref name="relationshipSelectors" /> でも、署名するオブジェクトが指定されていません。</exception>
      <returns vsli:raw="The digital signature used to sign the elements specified in the &lt;paramref name=&quot;parts&quot; /&gt; and &lt;paramref name=&quot;relationshipSelectors&quot; /&gt; lists.">
        <paramref name="parts" /> および <paramref name="relationshipSelectors" /> の一覧で指定されている要素の署名に使用するデジタル署名。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)">
      <summary vsli:raw="Signs a list of package parts and package relationships with a given X.509 certificate and identifier (ID).">指定した X.509 証明書と 識別子 (ID) を使用して、パッケージ パーツとパッケージ リレーションシップの一覧に署名します。</summary>
      <param name="parts" vsli:raw="The list of uniform resource identifiers (URIs) for the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; objects to sign.">署名する <see cref="T:System.IO.Packaging.PackagePart" /> オブジェクトの Uniform Resource Identifier (URI) の一覧。</param>
      <param name="certificate" vsli:raw="The X.509 certificate to use to digitally sign each of the specified parts and relationships.">指定したパーツおよびリレーションシップのそれぞれにデジタル署名するために使用する X.509 証明書。</param>
      <param name="relationshipSelectors" vsli:raw="The list of &lt;see cref=&quot;T:System.IO.Packaging.PackageRelationship&quot; /&gt; objects to sign.">署名する <see cref="T:System.IO.Packaging.PackageRelationship" /> オブジェクトの一覧。</param>
      <param name="signatureId" vsli:raw="An identification string to associate with the signature.">署名に関連付ける識別文字列。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Neither &lt;paramref name=&quot;parts&quot; /&gt; nor &lt;paramref name=&quot;relationshipSelectors&quot; /&gt; specify any elements to sign.">
        <paramref name="parts" /> と <paramref name="relationshipSelectors" /> のいずれによっても、署名する要素は指定されません。</exception>
      <returns vsli:raw="The digital signature used to sign the elements specified in the &lt;paramref name=&quot;parts&quot; /&gt; and &lt;paramref name=&quot;relationshipSelectors&quot; /&gt; lists.">
        <paramref name="parts" /> および <paramref name="relationshipSelectors" /> の一覧で指定されている要素の署名に使用するデジタル署名。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})">
      <summary vsli:raw="Signs a list of package parts, package relationships, or custom objects with a specified X.509 certificate and signature identifier (ID).">指定した X.509 証明書および署名の 識別子 (ID) を使用して、パッケージ パーツ、パッケージ リレーションシップ、またはカスタム オブジェクトの一覧に署名します。</summary>
      <param name="parts" vsli:raw="The list of uniform resource identifiers (URIs) for the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; objects to sign.">署名する <see cref="T:System.IO.Packaging.PackagePart" /> オブジェクトの Uniform Resource Identifier (URI) の一覧。</param>
      <param name="certificate" vsli:raw="The X.509 certificate to use to digitally sign each of the specified parts and relationships.">指定したパーツおよびリレーションシップのそれぞれにデジタル署名するために使用する X.509 証明書。</param>
      <param name="relationshipSelectors" vsli:raw="The list of &lt;see cref=&quot;T:System.IO.Packaging.PackageRelationship&quot; /&gt; objects to sign.">署名する <see cref="T:System.IO.Packaging.PackageRelationship" /> オブジェクトの一覧。</param>
      <param name="signatureId" vsli:raw="An identification string to associate with the signature.">署名に関連付ける識別文字列。</param>
      <param name="signatureObjects" vsli:raw="A list of custom data objects to sign.">署名するカスタム データ オブジェクトの一覧。</param>
      <param name="objectReferences" vsli:raw="A list of references to custom objects to sign.">署名するカスタム オブジェクトへの参照の一覧。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Neither &lt;paramref name=&quot;parts&quot; /&gt;, &lt;paramref name=&quot;relationshipSelectors&quot; /&gt;, &lt;paramref name=&quot;signatureObjects&quot; /&gt;, nor &lt;paramref name=&quot;objectReferences&quot; /&gt; specify any elements to sign.">
        <paramref name="parts" />、<paramref name="relationshipSelectors" />、<paramref name="signatureObjects" />、および <paramref name="objectReferences" /> のいずれによっても、署名する要素は指定されません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="A &lt;see cref=&quot;P:System.IO.Packaging.PackagePart.ContentType&quot; /&gt; of a part being signed references an empty, &lt;see langword=&quot;null&quot; /&gt;, or undefined &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping&quot; /&gt;.">署名されているパーツの <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> が空、<see langword="null" />、または定義されていない <see cref="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping" /> を参照しています。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;signatureId&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and is not a valid XML schema ID (for example, begins with a leading numeric digit).">
        <paramref name="signatureId" /> は <see langword="null" /> ではありません。また、有効な XML スキーマ ID (先頭が数値で始まるなど) でもありません。</exception>
      <returns vsli:raw="The digital signature used to sign the elements specified in the &lt;paramref name=&quot;parts&quot; /&gt; and &lt;paramref name=&quot;relationshipSelectors&quot; /&gt; lists.">
        <paramref name="parts" /> および <paramref name="relationshipSelectors" /> の一覧で指定されている要素の署名に使用するデジタル署名。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary vsli:raw="Verifies a given X.509 certificate.">指定された X.509 証明書を検証します。</summary>
      <param name="certificate" vsli:raw="The X.509 certificate to verify.">検証する X.509 証明書。</param>
      <returns vsli:raw="&lt;see cref=&quot;F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError&quot; /&gt; (value 0) if the certificate verified successfully; otherwise, a bitwise enumeration of error flags.">証明書が正しく検証された場合は <see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError" /> (値 0)。それ以外の場合は、エラー フラグのビットごとの列挙体。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)">
      <summary vsli:raw="Verifies the signatures on all signed parts within the package.">パッケージ内にあるすべての署名済みパーツの署名を検証します。</summary>
      <param name="exitOnFailure" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to exit on first failure; otherwise, &lt;see langword=&quot;false&quot; /&gt; to continue and check all signatures.">最初の失敗で終了する場合は <see langword="true" />。続行してすべての署名をチェックする場合は <see langword="false" />。</param>
      <returns vsli:raw="&lt;see cref=&quot;F:System.IO.Packaging.VerifyResult.Success&quot; /&gt; (value 0) if all signatures are verified successfully; otherwise, an enumeration that identifies the error.">すべての署名が正しく検証された場合は <see cref="F:System.IO.Packaging.VerifyResult.Success" /> (値 0)。それ以外の場合は、エラーを識別する列挙体。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption">
      <summary vsli:raw="Gets or sets the X.509 certificate embedding option used by the &lt;see cref=&quot;M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})&quot; /&gt; method to digitally sign package parts.">パッケージの各パートにデジタル署名するために <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" /> メソッドで使われる X.509 証明書の埋め込みオプションを取得または設定します。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.IO.Packaging.CertificateEmbeddingOption&quot; /&gt; values.">
        <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> 値のいずれか 1 つ。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm">
      <summary vsli:raw="Gets a URI string that identifies the default hash algorithm used to create and verify signatures.">署名の作成および検証に使用される既定のハッシュ アルゴリズムを識別する URI 文字列を取得します。</summary>
      <returns vsli:raw="A URI string that identifies the default hash algorithm used to create and verify signatures.">署名の作成および検証に使用される既定のハッシュアルゴリズムを識別する URI 文字列。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm">
      <summary vsli:raw="Gets or sets the URI identifier for the &lt;see cref=&quot;T:System.Security.Cryptography.HashAlgorithm&quot; /&gt; instance used to create and verify signatures.">署名を作成および検証するために使用される <see cref="T:System.Security.Cryptography.HashAlgorithm" /> インスタンスの URI 識別子を取得または設定します。</summary>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The string for the URI to set is &lt;see langword=&quot;null&quot; /&gt;.">設定する URI の文字列が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The string for the URI to set is empty.">設定する URI の文字列が空です。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Security.Cryptography.Xml.SignedXml&quot; /&gt; URI identifier for the &lt;see cref=&quot;T:System.Security.Cryptography.HashAlgorithm&quot; /&gt; instance used to create and verify signatures.">
        <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
        <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 署名の作成および検証に使用されるインスタンスの URI 識別子。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned">
      <summary vsli:raw="Gets a value that indicates whether the package contains any signatures.">パッケージに署名が含まれているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the package contains signatures; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">パッケージに署名が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow">
      <summary vsli:raw="Gets or sets a handle to the parent window for displaying a certificate selection dialog box.">証明書選択ダイアログ ボックスを表示する親ウィンドウへのハンドルを取得または設定します。</summary>
      <returns vsli:raw="The handle of the parent window to use to display the certificate selection dialog box.">証明書選択ダイアログ ボックスを表示するために使用する親ウィンドウのハンドル。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin">
      <summary vsli:raw="Gets the uniform resource identifier (URI) of the signature origin part.">署名元パーツの Uniform Resource Identifier (URI) を取得します。</summary>
      <returns vsli:raw="The URI of the signature origin part.">署名元パーツの URI。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType">
      <summary vsli:raw="Gets the type of default signature origin relationship.">既定の署名元のリレーションシップの種類を取得します。</summary>
      <returns vsli:raw="The type of default signature origin relationship.">既定の署名元のリレーションシップの種類。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.Signatures">
      <summary vsli:raw="Gets a collection of all the signatures contained in the package.">パッケージに含まれるすべての署名のコレクションを取得します。</summary>
      <returns vsli:raw="A collection of all the &lt;see cref=&quot;T:System.IO.Packaging.PackageDigitalSignature&quot; /&gt; objects.">すべての <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> オブジェクトのコレクション。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat">
      <summary vsli:raw="Gets or sets the date/time format used to create a signature &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.SigningTime&quot; /&gt;.">署名の <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> の作成に使用される日時形式を取得または設定します。</summary>
      <returns vsli:raw="The date/time format used to create a signature &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.SigningTime&quot; /&gt;.">署名の <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> の作成に使用される日時形式。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping">
      <summary vsli:raw="Gets a dictionary that contains each defined &lt;see cref=&quot;P:System.IO.Packaging.PackagePart.ContentType&quot; /&gt; and its associated XML &lt;see cref=&quot;T:System.Security.Cryptography.Xml.Transform&quot; /&gt;.&lt;see cref=&quot;P:System.Security.Cryptography.Xml.Transform.Algorithm&quot; /&gt; identifier.">定義された各 <see cref="P:System.IO.Packaging.PackagePart.ContentType" />、および関連する XML <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" />  識別子を含むディクショナリを取得します。</summary>
      <returns vsli:raw="A dictionary that contains each defined &lt;see cref=&quot;P:System.IO.Packaging.PackagePart.ContentType&quot; /&gt; and its associated XML &lt;see cref=&quot;T:System.Security.Cryptography.Xml.Transform&quot; /&gt;.&lt;see cref=&quot;P:System.Security.Cryptography.Xml.Transform.Algorithm&quot; /&gt; identifier.">定義されている各 <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> とそれに関連付けられたを格納しているディクショナリ XML <see cref="T:System.Security.Cryptography.Xml.Transform" /> 。<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> 識別子を含むディクショナリを取得します。</returns>
    </member>
    <member name="T:System.IO.Packaging.RightsManagementInformation">
      <summary vsli:raw="Represents Digital Rights Management (DRM) information that is stored in an &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;.">
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> に保存されたデジタル著作権管理 (DRM) 情報を表します。</summary>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.DeleteUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary vsli:raw="Deletes the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for a specified user from the encrypted rights management data stream.">暗号化された権限管理データ ストリームから、指定したユーザーの <see cref="T:System.Security.RightsManagement.UseLicense" /> を削除します。</summary>
      <param name="userKey" vsli:raw="The user of the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; to be deleted.">削除される <see cref="T:System.Security.RightsManagement.UseLicense" /> のユーザー。</param>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses">
      <summary vsli:raw="Returns a dictionary collection of user and &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; key/value pairs from the encrypted rights management data stream.">暗号化された権限管理データ ストリームから、ユーザーおよび <see cref="T:System.Security.RightsManagement.UseLicense" /> キーと値のペアのディクショナリ コレクションを返します。</summary>
      <returns vsli:raw="A collection of user and &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; key/value pairs that are contained in the rights managed protected package.">権限管理のために保護されたパッケージに含まれているユーザーおよび <see cref="T:System.Security.RightsManagement.UseLicense" /> キーと値のペアのコレクション。</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadPublishLicense">
      <summary vsli:raw="Returns the embedded &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; from the encrypted rights management data stream.">暗号化された権限管理データ ストリームから、埋め込まれた <see cref="T:System.Security.RightsManagement.PublishLicense" /> を返します。</summary>
      <exception cref="T:System.IO.FileFormatException" vsli:raw="The rights management information in this package cannot be read by the current version of this class.">このパッケージの権限管理情報は、このクラスの現在のバージョンでは読み取ることができません。</exception>
      <returns vsli:raw="The embedded &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt;; or &lt;see langword=&quot;null&quot; /&gt;, if the package does not contain a &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt;.">埋め込まれた <see cref="T:System.Security.RightsManagement.PublishLicense" />。パッケージに <see cref="T:System.Security.RightsManagement.PublishLicense" /> が含まれない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary vsli:raw="Returns a specified user's embedded &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; from the encrypted rights management data stream.">暗号化された権限管理データ ストリームから、指定したユーザーが持つ埋め込みの <see cref="T:System.Security.RightsManagement.UseLicense" /> を返します。</summary>
      <param name="userKey" vsli:raw="The user or user group to return the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for.">
        <see cref="T:System.Security.RightsManagement.UseLicense" /> を返すユーザーまたはユーザー グループ。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;userKey&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="userKey" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileFormatException" vsli:raw="The rights management information in this package cannot be read by the current version of this class.">このパッケージの権限管理情報は、このクラスの現在のバージョンでは読み取ることができません。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for the specified user; or &lt;see langword=&quot;null&quot; /&gt;, if the package does not contain a &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; that matches the given &lt;paramref name=&quot;userKey&quot; /&gt;.">指定したユーザーの <see cref="T:System.Security.RightsManagement.UseLicense" />。パッケージに、指定した <paramref name="userKey" /> と一致する <see cref="T:System.Security.RightsManagement.UseLicense" /> が含まれない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SavePublishLicense(System.Security.RightsManagement.PublishLicense)">
      <summary vsli:raw="Saves a given &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; to the encrypted rights management data stream.">指定された <see cref="T:System.Security.RightsManagement.PublishLicense" /> を暗号化された権限管理データ ストリームに保存します。</summary>
      <param name="publishLicense" vsli:raw="The publish license to store and embed in the package.">パッケージに格納および埋め込む公開ライセンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;publishLicense&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="publishLicense" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileFormatException" vsli:raw="The rights management information in this package cannot be read by the current version of this class.">このパッケージの権限管理情報は、このクラスの現在のバージョンでは読み取ることができません。</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SaveUseLicense(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.UseLicense)">
      <summary vsli:raw="Saves a given &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for a specified user to the encrypted rights management data stream.">暗号化された権限管理データ ストリームに、指定したユーザーの <see cref="T:System.Security.RightsManagement.UseLicense" /> を保存します。</summary>
      <param name="userKey" vsli:raw="The user of the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt;.">
        <see cref="T:System.Security.RightsManagement.UseLicense" /> のユーザー。</param>
      <param name="useLicense" vsli:raw="The use license to store and embed in the package.">パッケージに格納および埋め込むユーザー ライセンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Either the &lt;paramref name=&quot;userKey&quot; /&gt; or &lt;paramref name=&quot;useLicense&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="userKey" /> パラメーターまたは <paramref name="useLicense" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.IO.FileFormatException" vsli:raw="The rights management information in this package cannot be read by the current version of this class.">このパッケージの権限管理情報は、このクラスの現在のバージョンでは読み取ることができません。</exception>
    </member>
    <member name="P:System.IO.Packaging.RightsManagementInformation.CryptoProvider">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Security.RightsManagement.CryptoProvider&quot; /&gt; for accessing the package's encrypted rights management data stream.">パッケージが持つ暗号化された権限管理データ ストリームにアクセスするための <see cref="T:System.Security.RightsManagement.CryptoProvider" /> を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Security.RightsManagement.CryptoProvider&quot; /&gt; for accessing the rights management information.">権限管理情報にアクセスするための <see cref="T:System.Security.RightsManagement.CryptoProvider" />。</returns>
    </member>
    <member name="T:System.IO.Packaging.SignatureVerificationEventArgs">
      <summary vsli:raw="Specifies the event args provided to the &lt;see cref=&quot;T:System.IO.Packaging.InvalidSignatureEventHandler&quot; /&gt;.">
        <see cref="T:System.IO.Packaging.InvalidSignatureEventHandler" /> に提供するイベント引数を指定します。</summary>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.Signature">
      <summary vsli:raw="Gets the digital signature being verified.">検証されるデジタル署名を取得します。</summary>
      <returns vsli:raw="The digital signature being verified.">検証されるデジタル署名。</returns>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.VerifyResult">
      <summary vsli:raw="Gets the signature verification error.">署名検証エラーを取得します。</summary>
      <returns vsli:raw="The signature verification error.">署名検証エラー。</returns>
    </member>
    <member name="T:System.IO.Packaging.StorageInfo">
      <summary vsli:raw="Provides access and information for manipulating data stores in a &lt;see cref=&quot;T:System.IO.Packaging.Package&quot; /&gt;.">
        <see cref="T:System.IO.Packaging.Package" /> 内のデータ ストアを操作するためのアクセスおよび情報を提供します。</summary>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String)">
      <summary vsli:raw="Creates a new stream with a given name.">指定した名前の新しいストリームを作成します。</summary>
      <param name="name" vsli:raw="The name for the new stream.">新しいストリームの名前。</param>
      <returns vsli:raw="The new stream with the specified &lt;paramref name=&quot;name&quot; /&gt;.">指定した <paramref name="name" /> の新しいストリーム。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String,System.IO.Packaging.CompressionOption,System.IO.Packaging.EncryptionOption)">
      <summary vsli:raw="Creates a new stream with a given name, &lt;see cref=&quot;T:System.IO.Packaging.CompressionOption&quot; /&gt;, and &lt;see cref=&quot;T:System.IO.Packaging.EncryptionOption&quot; /&gt;.">指定した名前を持ち、<see cref="T:System.IO.Packaging.CompressionOption" />、および <see cref="T:System.IO.Packaging.EncryptionOption" /> を含んだ新しいストリームを作成します。</summary>
      <param name="name" vsli:raw="The name for the new stream.">新しいストリームの名前。</param>
      <param name="compressionOption" vsli:raw="The compression option for the data stream.">データ ストリームの圧縮オプション。</param>
      <param name="encryptionOption" vsli:raw="The encryption option for the data stream.">データ ストリームの暗号化オプション。</param>
      <returns vsli:raw="The new stream with the specified &lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;compressionOption&quot; /&gt;, and &lt;paramref name=&quot;encryptionOption&quot; /&gt;.">指定した <paramref name="name" />、<paramref name="compressionOption" />、および <paramref name="encryptionOption" /> を備えた新しいストリーム。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateSubStorage(System.String)">
      <summary vsli:raw="Creates a new child &lt;see cref=&quot;T:System.IO.Packaging.StorageInfo&quot; /&gt; with this &lt;see cref=&quot;T:System.IO.Packaging.StorageInfo&quot; /&gt; as the parent.">この <see cref="T:System.IO.Packaging.StorageInfo" /> を親として新しい子 <see cref="T:System.IO.Packaging.StorageInfo" /> を作成します。</summary>
      <param name="name" vsli:raw="The name for the new child data store.">新しい子のデータ ストアの名前。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The new child data store.">新しい子のデータ ストア。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteStream(System.String)">
      <summary vsli:raw="Deletes the stream with a specified name.">指定した名前のストリームを削除します。</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.StreamInfo&quot; /&gt; name of the stream to delete.">削除するストリームの <see cref="T:System.IO.Packaging.StreamInfo" /> の名前。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteSubStorage(System.String)">
      <summary vsli:raw="Deletes a specified sub-store.">指定したサブ ストアを削除します。</summary>
      <param name="name" vsli:raw="The name of the sub-store to delete.">削除するサブ ストアの名前。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreamInfo(System.String)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.IO.Packaging.StreamInfo&quot; /&gt; instance with the given name.">指定した名前の <see cref="T:System.IO.Packaging.StreamInfo" /> インスタンスを返します。</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.IO.Packaging.StreamInfo&quot; /&gt; instance to return.">返される <see cref="T:System.IO.Packaging.StreamInfo" /> インスタンスの名前。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The stream with the specified &lt;paramref name=&quot;name&quot; /&gt;.">指定した <paramref name="name" /> のストリーム。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreams">
      <summary vsli:raw="Returns an array of the &lt;see cref=&quot;T:System.IO.Packaging.StreamInfo&quot; /&gt; instances that are currently contained in this store.">このストアに現在格納されている <see cref="T:System.IO.Packaging.StreamInfo" /> インスタンスの配列を返します。</summary>
      <returns vsli:raw="An array of the &lt;see cref=&quot;T:System.IO.Packaging.StreamInfo&quot; /&gt; objects, each pointing to an I/O steam defined within this store.">
        <see cref="T:System.IO.Packaging.StreamInfo" /> オブジェクトの配列。各オブジェクトはこのストア内で定義されている I/O ストリームをポイントします。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorageInfo(System.String)">
      <summary vsli:raw="Returns the child sub-store with a given name.">所定の名前を持つ子サブストアを返します。</summary>
      <param name="name" vsli:raw="The name of the sub-store to return.">返すサブストアの名前。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> パラメーターが <see langword="null" /> です。</exception>
      <returns vsli:raw="The child sub-store with the specified &lt;paramref name=&quot;name&quot; /&gt;.">指定した <paramref name="name" /> を持つ子サブストア。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorages">
      <summary vsli:raw="Returns an array of the child sub-stores that are currently contained in this store.">このストアに現在格納されている子サブストアの配列を返します。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.IO.Packaging.StorageInfo&quot; /&gt; objects, each pointing to a sub-store defined within this store.">
        <see cref="T:System.IO.Packaging.StorageInfo" /> オブジェクトの配列。各オブジェクトはこのストア内で定義されているサブストアをポイントします。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.StreamExists(System.String)">
      <summary vsli:raw="Returns a value that indicates whether a given stream exists.">指定したストリームが存在しているかどうかを示す値を返します。</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.StreamInfo&quot; /&gt; name to check for.">確認対象の <see cref="T:System.IO.Packaging.StreamInfo" /> の名前。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a stream with the specified &lt;paramref name=&quot;name&quot; /&gt; exists; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した <paramref name="name" /> のストリームが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.SubStorageExists(System.String)">
      <summary vsli:raw="Returns a value that indicates whether a given child sub-store exists.">特定の子サブストアが存在するかどうかを示す値を返します。</summary>
      <param name="name" vsli:raw="The child &lt;see cref=&quot;T:System.IO.Packaging.StorageInfo&quot; /&gt; name to check for.">確認対象の子 <see cref="T:System.IO.Packaging.StorageInfo" /> の名前。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a child sub-store with the specified &lt;paramref name=&quot;name&quot; /&gt; exists; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定された <paramref name="name" /> を持つ子サブストアが存在する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.StorageInfo.Name">
      <summary vsli:raw="Gets the name of the store.">ストアの名前を取得します。</summary>
      <returns vsli:raw="The name of this store.">このストアの名前。</returns>
    </member>
    <member name="T:System.IO.Packaging.StreamInfo">
      <summary vsli:raw="Provides access and information for manipulating I/O streams within a &lt;see cref=&quot;T:System.IO.Packaging.Package&quot; /&gt;.">
        <see cref="T:System.IO.Packaging.Package" /> 内の I/O ストリームを操作するためのアクセスおよび情報を提供します。</summary>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream">
      <summary vsli:raw="Returns a stream opened in a default &lt;see cref=&quot;T:System.IO.FileMode&quot; /&gt; and &lt;see cref=&quot;T:System.IO.FileAccess&quot; /&gt;.">既定の <see cref="T:System.IO.FileMode" /> および <see cref="T:System.IO.FileAccess" /> で開かれているストリームを返します。</summary>
      <returns vsli:raw="The I/O stream opened in a default &lt;see cref=&quot;T:System.IO.Packaging.Package&quot; /&gt; root &lt;see cref=&quot;T:System.IO.FileMode&quot; /&gt; and &lt;see cref=&quot;T:System.IO.FileAccess&quot; /&gt;.">既定の <see cref="T:System.IO.Packaging.Package" /> ルートの <see cref="T:System.IO.FileMode" /> および <see cref="T:System.IO.FileAccess" /> で開かれる I/O ストリーム。</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode)">
      <summary vsli:raw="Returns an I/O stream opened in a specified &lt;see cref=&quot;T:System.IO.FileMode&quot; /&gt;.">指定した <see cref="T:System.IO.FileMode" /> で開かれている I/O ストリームを返します。</summary>
      <param name="mode" vsli:raw="The file mode in which to open the stream.">ストリームを開くファイル モード。</param>
      <returns vsli:raw="The stream opened in the specified file &lt;paramref name=&quot;mode&quot; /&gt;.">指定したファイル <paramref name="mode" /> で開かれているストリーム。</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary vsli:raw="Returns an I/O stream opened in a specified &lt;see cref=&quot;T:System.IO.FileMode&quot; /&gt; and with a given &lt;see cref=&quot;T:System.IO.FileAccess&quot; /&gt;.">指定した <see cref="T:System.IO.FileMode" /> と指定した <see cref="T:System.IO.FileAccess" /> で開かれている I/O ストリームを返します。</summary>
      <param name="mode" vsli:raw="The file mode in which to open the stream.">ストリームを開くファイル モード。</param>
      <param name="access" vsli:raw="The file access mode in which to read or write to the stream.">ストリームを読み取るとき、またはストリームに書き込むときのファイル アクセス モード。</param>
      <returns vsli:raw="The I/O stream opened in the specified &lt;see cref=&quot;T:System.IO.FileMode&quot; /&gt; and with a given &lt;see cref=&quot;T:System.IO.FileAccess&quot; /&gt;.">指定した <see cref="T:System.IO.FileMode" /> と指定した <see cref="T:System.IO.FileAccess" /> で開かれている I/O ストリーム。</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.CompressionOption">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.IO.Packaging.CompressionOption&quot; /&gt; setting for the stream.">ストリームの <see cref="T:System.IO.Packaging.CompressionOption" /> 設定を取得します。</summary>
      <returns vsli:raw="The compression option setting for the package stream.">パッケージ ストリームの圧縮オプション設定。</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.EncryptionOption">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.IO.Packaging.EncryptionOption&quot; /&gt; setting for the stream.">ストリームの <see cref="T:System.IO.Packaging.EncryptionOption" /> 設定を取得します。</summary>
      <returns vsli:raw="The encryption option setting for the package stream.">パッケージ ストリームの暗号化オプション設定。</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.Name">
      <summary vsli:raw="Gets the name of the stream.">ストリームの名前を取得します。</summary>
      <returns vsli:raw="The name of this stream.">このストリームの名前。</returns>
    </member>
    <member name="T:System.IO.Packaging.VerifyResult">
      <summary vsli:raw="Specifies the result of a certificate or signature verification.">証明書または署名の検証結果を指定します。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.CertificateRequired">
      <summary vsli:raw="The X.509 certificate is not available to verify the signature.">X.509 証明書が署名の検証に使用できません。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidCertificate">
      <summary vsli:raw="The X.509 certificate is not valid.">X.509 証明書が有効ではありません。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidSignature">
      <summary vsli:raw="The signature is not valid.">署名が無効です。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.NotSigned">
      <summary vsli:raw="The specified package or part has no signature.">指定したパッケージまたはパーツに署名がありません。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.ReferenceNotFound">
      <summary vsli:raw="A reference relationship to the signature was not found.">署名への参照リレーションシップが見つかりません。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.Success">
      <summary vsli:raw="The verification was successful.">検証が成功しました。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.AuthenticationType">
      <summary vsli:raw="Specifies the method of rights management authentication.">権限管理認証の方法を指定します。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Internal">
      <summary vsli:raw="Implicit authentication to any requesting user.">要求するすべてのユーザーに対する暗黙の認証。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Passport">
      <summary vsli:raw="Windows Live ID authentication.">Windows Live ID 認証。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Windows">
      <summary vsli:raw="Windows authentication in a corporate domain environment.">企業ドメイン環境での Windows 認証。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.WindowsPassport">
      <summary vsli:raw="Either Windows authentication or Windows Live ID authentication.">Windows 認証または Windows Live ID 認証。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentGrant">
      <summary vsli:raw="Represents a right granted to a user to access information in a rights managed document.">権限管理ドキュメントの情報にアクセスするために、ユーザーに付与された権限を表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.ContentGrant&quot; /&gt; class that grants a specified &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; a specified &lt;see cref=&quot;T:System.Security.RightsManagement.ContentRight&quot; /&gt;.">指定した <see cref="T:System.Security.RightsManagement.ContentGrant" /> に指定した <see cref="T:System.Security.RightsManagement.ContentUser" /> を付与する <see cref="T:System.Security.RightsManagement.ContentRight" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="user" vsli:raw="The user the access right is granted to.">アクセス権が付与されているユーザー。</param>
      <param name="right" vsli:raw="The access right that is granted.">付与されているアクセス権。</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight,System.DateTime,System.DateTime)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.ContentGrant&quot; /&gt; class that grants a specified &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; a specified &lt;see cref=&quot;T:System.Security.RightsManagement.ContentRight&quot; /&gt; for a specified &lt;see cref=&quot;T:System.DateTime&quot; /&gt; duration.">特定の <see cref="T:System.Security.RightsManagement.ContentGrant" /> の期間について、指定した <see cref="T:System.Security.RightsManagement.ContentUser" /> に指定した <see cref="T:System.Security.RightsManagement.ContentRight" /> を付与する <see cref="T:System.DateTime" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="user" vsli:raw="The user the access right is granted to.">アクセス権が付与されているユーザー。</param>
      <param name="right" vsli:raw="The access right that is granted.">付与されているアクセス権。</param>
      <param name="validFrom" vsli:raw="The starting date and time that the right begins.">権限を開始する開始日時。</param>
      <param name="validUntil" vsli:raw="The ending date and time that the right expires.">権限の期限が切れる終了日時。</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.Right">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Security.RightsManagement.ContentRight&quot; /&gt; that is granted.">付与されている <see cref="T:System.Security.RightsManagement.ContentRight" /> を取得します。</summary>
      <returns vsli:raw="The access right that is granted to the &lt;see cref=&quot;P:System.Security.RightsManagement.ContentGrant.User&quot; /&gt;, as specified to the &lt;see cref=&quot;M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)&quot; /&gt; constructor.">
        <see cref="P:System.Security.RightsManagement.ContentGrant.User" /> コンストラクターに対して指定された、<see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> に付与されているアクセス権。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.User">
      <summary vsli:raw="Gets the user who is granted the access &lt;see cref=&quot;P:System.Security.RightsManagement.ContentGrant.Right&quot; /&gt;.">アクセス <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> が付与されているユーザーを取得します。</summary>
      <returns vsli:raw="The user that the access &lt;see cref=&quot;P:System.Security.RightsManagement.ContentGrant.Right&quot; /&gt; is granted to, as specified to the &lt;see cref=&quot;M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)&quot; /&gt; constructor.">
        <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> コンストラクターに対して指定された、アクセス <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> が付与されているユーザー。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidFrom">
      <summary vsli:raw="Gets the starting date and time that the granted &lt;see cref=&quot;P:System.Security.RightsManagement.ContentGrant.Right&quot; /&gt; begins.">付与された <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> を開始する開始日時を取得します。</summary>
      <returns vsli:raw="The start date and time that the granted &lt;see cref=&quot;P:System.Security.RightsManagement.ContentGrant.Right&quot; /&gt; begins, or &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.&lt;see cref=&quot;F:System.DateTime.MinValue&quot;&gt;DateTime.MinValue&lt;/see&gt; if there is there is no starting limitation.">付与されたが開始する開始日付と時刻 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 、または <see cref="T:System.DateTime" /> 。<see cref="F:System.DateTime.MinValue" /> 開始の制限がない場合は、</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidUntil">
      <summary vsli:raw="Gets the ending date and time that the granted &lt;see cref=&quot;P:System.Security.RightsManagement.ContentGrant.Right&quot; /&gt; expires.">付与された <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> の期限が切れる終了日時を取得します。</summary>
      <returns vsli:raw="The end date and time that the granted &lt;see cref=&quot;P:System.Security.RightsManagement.ContentGrant.Right&quot; /&gt; expires, or &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.&lt;see cref=&quot;F:System.DateTime.MaxValue&quot;&gt;DateTime.MaxValue&lt;/see&gt; if there is no ending limitation.">付与されたの有効期限が切れる終了日時、 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> または <see cref="T:System.DateTime" /> 。<see cref="F:System.DateTime.MaxValue" /> 終了の制限がない場合は。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.ContentRight">
      <summary vsli:raw="Specifies rights that can be granted to users for accessing content in a rights managed document.">権限管理ドキュメント内のコンテンツにアクセスするユーザーに付与可能な権限を指定します。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.DocumentEdit">
      <summary vsli:raw="The user can edit the document that contains the protected content.">ユーザーは、保護されたコンテンツを含むドキュメントを編集できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Edit">
      <summary vsli:raw="The user can edit and encrypt the protected content.">ユーザーは、保護されたコンテンツを編集して暗号化できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Export">
      <summary vsli:raw="The user can export the protected content.">ユーザーは、保護されたコンテンツをエクスポートできます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Extract">
      <summary vsli:raw="The user can extract (copy and paste) the protected content.">ユーザーは、保護されたコンテンツを抽出 (コピーして貼り付け) できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Forward">
      <summary vsli:raw="The user can forward the protected content to another user.">ユーザーは、保護されたコンテンツを別のユーザーに転送できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ObjectModel">
      <summary vsli:raw="The user can control programmed access to the protected content.">ユーザーは、保護されたコンテンツへのプログラムによるアクセスを制御できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Owner">
      <summary vsli:raw="The user is the content owner.  The owner can edit and encrypt the protected content, and decrypt the signed &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt;.">ユーザーは、コンテンツの所有者です。  所有者は、保護されたコンテンツを編集および暗号化し、署名された <see cref="T:System.Security.RightsManagement.PublishLicense" /> を復号化することができます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Print">
      <summary vsli:raw="The user can print the protected content.">ユーザーは、保護されたコンテンツを印刷できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Reply">
      <summary vsli:raw="The user can reply to the sender of the protected content.">ユーザーは、保護されたコンテンツの送信者に返信できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ReplyAll">
      <summary vsli:raw="The user can &quot;reply all&quot; to recipients of the protected content.">ユーザーは、保護されたコンテンツの受信者に "全員に返信" できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Sign">
      <summary vsli:raw="The user can digitally sign the protected content.">ユーザーは、保護されたコンテンツをデジタル署名できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.View">
      <summary vsli:raw="The user can view the protected content.">ユーザーは、保護されたコンテンツを表示できます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ViewRightsData">
      <summary vsli:raw="The user can decrypt and view the rights specified in the signed &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt;.">ユーザーは、署名された <see cref="T:System.Security.RightsManagement.PublishLicense" /> に指定された権限を復号化および表示できます。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentUser">
      <summary vsli:raw="Represents a user or user-group for granting access to rights managed content.">権限が管理されたコンテンツへのアクセス権を付与するユーザーまたはユーザー グループを表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; class.">
        <see cref="T:System.Security.RightsManagement.ContentUser" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The user or group name.">ユーザーまたはグループの名前。</param>
      <param name="authenticationType" vsli:raw="The method for authentication.">認証メソッド。</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; is equivalent to another given instance.">この <see cref="T:System.Security.RightsManagement.ContentUser" /> が、指定した別のインスタンスと等しいかどうかを示す値を返します。</summary>
      <param name="obj" vsli:raw="The user instance to compare for equality.">等しいかどうかを比較するユーザー インスタンス。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.Security.RightsManagement.ContentUser.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.ContentUser.AuthenticationType&quot; /&gt; are the same for both this user and the given user; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> および <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> がこのユーザーと指定したユーザーの両方で同じ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.GetHashCode">
      <summary vsli:raw="Returns a computed hash code based on the user &lt;see cref=&quot;P:System.Security.RightsManagement.ContentUser.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.ContentUser.AuthenticationType&quot; /&gt;.">ユーザーの <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> と <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> に基づいて計算されたハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code computed from the user &lt;see cref=&quot;P:System.Security.RightsManagement.ContentUser.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.ContentUser.AuthenticationType&quot; /&gt;.">ユーザーの <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> と <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> から計算されたハッシュ コード。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.IsAuthenticated">
      <summary vsli:raw="Returns a value that indicates whether the user is currently authenticated.">ユーザーが現在認証されているかどうかを示す値を返します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the user is currently authenticated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  The default is &lt;see langword=&quot;false&quot; /&gt; until authenticated.">ユーザーが現在認証されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  既定値は、認証されるまで <see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AnyoneUser">
      <summary vsli:raw="Gets an instance of the &quot;Anyone&quot; &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; persona.">"任意のユーザー" <see cref="T:System.Security.RightsManagement.ContentUser" /> ペルソナのインスタンスを取得します。</summary>
      <returns vsli:raw="An instance of the &quot;Anyone&quot; &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; persona.">"任意のユーザー" <see cref="T:System.Security.RightsManagement.ContentUser" /> ペルソナのインスタンス。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AuthenticationType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Security.RightsManagement.AuthenticationType&quot; /&gt; specified to the &lt;see cref=&quot;M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)&quot; /&gt; constructor.">
        <see cref="T:System.Security.RightsManagement.AuthenticationType" /> コンストラクターに対して指定された <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Security.RightsManagement.AuthenticationType&quot; /&gt; specified to the &lt;see cref=&quot;M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)&quot; /&gt; constructor.">
        <see cref="T:System.Security.RightsManagement.AuthenticationType" /> コンストラクターに対して指定された <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.Name">
      <summary vsli:raw="Gets the user or group name specified to the &lt;see cref=&quot;M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)&quot; /&gt; constructor.">
        <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> コンストラクターに対して指定されたユーザーまたはグループの名前を取得します。</summary>
      <returns vsli:raw="The user or group name specified to the &lt;see cref=&quot;M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)&quot; /&gt; constructor.">
        <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> コンストラクターに対して指定されたユーザーまたはグループの名前。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.OwnerUser">
      <summary vsli:raw="Gets an instance of the &quot;Owner&quot; &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; persona.">"所有者" <see cref="T:System.Security.RightsManagement.ContentUser" /> ペルソナのインスタンスを取得します。</summary>
      <returns vsli:raw="An instance of the &quot;Owner&quot; &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; persona.">"所有者" <see cref="T:System.Security.RightsManagement.ContentUser" /> ペルソナのインスタンス。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.CryptoProvider">
      <summary vsli:raw="Provides digital rights management services for encrypting and decrypting protected content.">保護されたコンテンツを暗号化および復号化するデジタル著作権管理サービスを提供します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])">
      <summary vsli:raw="Decrypts cipher text to clear text.">暗号テキストをクリア テキストに復号化します。</summary>
      <param name="cryptoText" vsli:raw="The cipher text to decrypt.">復号化する暗号テキスト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;cipherText&quot; /&gt; is null.">
        <paramref name="cipherText" /> が null です。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException" vsli:raw="Decryption right not granted.">復号化の権限が付与されていません。</exception>
      <returns vsli:raw="The decrypted clear text of &lt;paramref name=&quot;cryptoText&quot; /&gt;.">
        <paramref name="cryptoText" /> の復号化されたクリア テキスト。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Security.RightsManagement.CryptoProvider&quot; /&gt;.">
        <see cref="T:System.Security.RightsManagement.CryptoProvider" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Security.RightsManagement.CryptoProvider&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.Security.RightsManagement.CryptoProvider" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])">
      <summary vsli:raw="Encrypts clear text to cipher text.">クリア テキストを暗号化テキストに暗号化します。</summary>
      <param name="clearText" vsli:raw="The clear text content to encrypt.">暗号化するクリア テキスト コンテンツ。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;clearText&quot; /&gt; is null.">
        <paramref name="clearText" /> が null です。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException" vsli:raw="Encryption is not permitted.">暗号化は許可されていません。</exception>
      <returns vsli:raw="Encrypted cipher text of the given &lt;paramref name=&quot;clearText&quot; /&gt;.">指定された <paramref name="clearText" /> の暗号化済みの暗号化テキスト。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Finalize">
      <summary vsli:raw="Frees resources and performs internal cleanup before the instance is reclaimed by garbage collection.">インスタンスがガベージ コレクションによって回収される前にリソースを解放し、内部クリーンアップを実行します。</summary>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BlockSize">
      <summary vsli:raw="Gets the cipher block size, in bytes.">暗号ブロック サイズ (バイト単位) を取得します。</summary>
      <returns vsli:raw="The cipher block size, in bytes.  The default block size for Advanced Encryption Standard (AES) is 8.">暗号ブロック サイズ (バイト単位)。  Advanced Encryption Standard (AES) の既定のブロックサイズは8です。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BoundGrants">
      <summary vsli:raw="Gets a collection listing the rights that passed verification and that are granted to the user.">検証に合格し、ユーザーに付与される権限の一覧を示すコレクションを取得します。</summary>
      <returns vsli:raw="A collection enumerating the rights that passed verification and that are granted to the user.">検証に合格し、ユーザーに付与される権限を列挙するコレクション。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt">
      <summary vsli:raw="Gets a value that indicates whether the user has rights to decrypt.">ユーザーが復号化の権限を持っているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; grants the user rights to decrypt; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> によってユーザーに復号化の権限が付与されている場合は <see cref="T:System.Security.RightsManagement.UseLicense" /> 。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt">
      <summary vsli:raw="Gets a value that indicates whether the user has rights to encrypt.">ユーザーが暗号化の権限を持っているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; grants the user rights to encrypt; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> が <see cref="T:System.Security.RightsManagement.UseLicense" /> ユーザーに暗号化の権限を付与する場合は。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks">
      <summary vsli:raw="Gets a value that indicates whether &lt;see cref=&quot;M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])&quot; /&gt; and &lt;see cref=&quot;M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])&quot; /&gt; can accept buffers that are different block sizes in length.">
        <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> および <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> が異なる長さのブロック サイズのバッファーを受け入れることができるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the buffer passed to &lt;see cref=&quot;M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])&quot; /&gt; can be a different length from the buffer passed to &lt;see cref=&quot;M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt; if the buffers passed to &lt;see cref=&quot;M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])&quot; /&gt; and &lt;see cref=&quot;M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])&quot; /&gt; must be the exact same length.  For AES the default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> に渡されたバッファーが、 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> に渡されたバッファーと異なる長さになる可能性がある場合は。それ以外の場合は、に渡されたバッファーが <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /><see langword="false" /> 完全に <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /><see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> 同じ長さである必要があります。  AES の場合、既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.LocalizedNameDescriptionPair">
      <summary vsli:raw="Represents an immutable (read-only) pair of &quot;Name&quot; and &quot;Description&quot; strings.">"名前" および "説明" 文字列の変更できない (読み取り専用の) ペアを表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.LocalizedNameDescriptionPair&quot; /&gt; class.">
        <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="name" vsli:raw="The value for the locale &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name&quot; /&gt; property.">ロケールの <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> プロパティの値。</param>
      <param name="description" vsli:raw="The value for the locale &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description&quot; /&gt; property.">ロケールの <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> プロパティの値。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Either the &lt;paramref name=&quot;name&quot; /&gt; parameter or &lt;paramref name=&quot;description&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> パラメーターまたは <paramref name="description" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description&quot; /&gt; properties of a given object match those of this &lt;see cref=&quot;T:System.Security.RightsManagement.LocalizedNameDescriptionPair&quot; /&gt;.">特定のオブジェクトの <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> および <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> プロパティが、この <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> の該当するプロパティと一致するかどうかを示します。</summary>
      <param name="obj" vsli:raw="The object to compare the &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description&quot; /&gt; properties of.">
        <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> プロパティと <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> プロパティを比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description&quot; /&gt; properties of the given object match those of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">特定のオブジェクトの <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> および <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> プロパティが、このインスタンスの該当するプロパティと一致する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.GetHashCode">
      <summary vsli:raw="Gets a computed hash code based on the &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description&quot; /&gt; properties.">
        <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> および <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> プロパティに基づいて計算されたハッシュ コードを取得します。</summary>
      <returns vsli:raw="A computed hash code based on the &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description&quot; /&gt; properties of this &lt;see cref=&quot;T:System.Security.RightsManagement.LocalizedNameDescriptionPair&quot; /&gt;.">この <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> の <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> および <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> プロパティに基づいて計算されたハッシュ コード。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description">
      <summary vsli:raw="Gets the locale description.">ロケールの説明を取得します。</summary>
      <returns vsli:raw="The locale description.">ロケールの説明。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name">
      <summary vsli:raw="Gets the locale name.">ロケール名を取得します。</summary>
      <returns vsli:raw="The locale name.">ロケール名。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.PublishLicense">
      <summary vsli:raw="Represents a signed rights managed publish license.">署名付き権限で管理される発行ライセンスを表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; class from a specified serialized and signed &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt;.">署名付きのシリアル化された <see cref="T:System.Security.RightsManagement.PublishLicense" /> が指定されている場合、これを基にして、<see cref="T:System.Security.RightsManagement.PublishLicense" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="signedPublishLicense" vsli:raw="A signed and serialized publish license.">署名付きのシリアル化された公開ライセンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;signedPublishLicense&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="signedPublishLicense" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException" vsli:raw="The license is invalid.">ライセンスが無効です。</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)">
      <summary vsli:raw="Attempts to acquire a &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for a user or user group in a specified &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt;.">指定した <see cref="T:System.Security.RightsManagement.UseLicense" /> 内のユーザーまたはユーザー グループの <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> の取得を試みます。</summary>
      <param name="secureEnvironment" vsli:raw="The secure environment for license activation and binding.">ライセンスのアクティブ化とバインディングにとって安全な環境。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;secureEnvironment&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="secureEnvironment" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException" vsli:raw="The authentication failed.">認証に失敗しました。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for a user or user group in the specified &lt;paramref name=&quot;secureEnvironment&quot; /&gt;.">指定した <paramref name="secureEnvironment" /> 内のユーザーまたはユーザー グループの <see cref="T:System.Security.RightsManagement.UseLicense" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)">
      <summary vsli:raw="Attempts to acquire a &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for a user or user group in a specified &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt;.">指定した <see cref="T:System.Security.RightsManagement.UseLicense" /> 内のユーザーまたはユーザー グループの <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> の取得を試みます。</summary>
      <param name="secureEnvironment" vsli:raw="The secure environment for license activation and binding.">ライセンスのアクティブ化とバインディングにとって安全な環境。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;secureEnvironment&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="secureEnvironment" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException" vsli:raw="The authentication failed.">認証に失敗しました。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for a user or user group in the specified &lt;paramref name=&quot;secureEnvironment&quot; /&gt;.">指定した <paramref name="secureEnvironment" /> 内のユーザーまたはユーザー グループの <see cref="T:System.Security.RightsManagement.UseLicense" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)">
      <summary vsli:raw="Returns a decrypted &lt;see cref=&quot;T:System.Security.RightsManagement.UnsignedPublishLicense&quot; /&gt; version of this signed &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt;.">この署名付きの <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> の復号化された <see cref="T:System.Security.RightsManagement.PublishLicense" /> バージョンを返します。</summary>
      <param name="cryptoProvider" vsli:raw="The rights management service to use for decrypting the license.">ライセンスの復号化に使用する権限管理サービス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;cryptoProvider&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="cryptoProvider" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A decrypted, unsigned version of this license.">このライセンスの復号化された署名なしバージョン。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.ToString">
      <summary vsli:raw="Returns the serialized XrML string that was used to create this license.">本ライセンスの作成に使用されたシリアル化 XrML 文字列を返します。</summary>
      <returns vsli:raw="The serialized Extensible Rights Markup Language (XrML) string that was used to create this license.">本ライセンスの作成に使用されたシリアル化 Extensible Rights Markup Language (XrML) 文字列。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ContentId">
      <summary vsli:raw="Gets the publisher-created content identifier.">発行者が作成したコンテンツ識別子を取得します。</summary>
      <returns vsli:raw="The publisher-created content identifier.">発行者が作成したコンテンツ識別子。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoName">
      <summary vsli:raw="Gets the contact name for the author or publisher of the content.">コンテンツの作成者または発行者の連絡先名を取得します。</summary>
      <returns vsli:raw="The contact name for the author or publisher of the content.">コンテンツの作成者または発行者の連絡先名。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoUri">
      <summary vsli:raw="Gets the contact URI for the author or publisher of the content.">コンテンツの作成者または発行者の連絡先 URI を取得します。</summary>
      <returns vsli:raw="The contact uniform resource identifier (URI) for the author or publisher of the content.">コンテンツの作成者または発行者の連絡先 URI (uniform resource identifier)。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl">
      <summary vsli:raw="Gets the URI to use for acquiring a &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt;.">
        <see cref="T:System.Security.RightsManagement.UseLicense" /> を得るために使用する URI を取得します。</summary>
      <returns vsli:raw="The URI to use for acquiring a &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt;.">を取得するために使用する URI <see cref="T:System.Security.RightsManagement.UseLicense" /> 。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementException">
      <summary vsli:raw="Represents an error condition when a rights management operation cannot complete successfully.">権限管理操作を正常に完了できない場合に、エラー状態を表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class.">
        <see cref="T:System.Security.RightsManagement.RightsManagementException" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class and sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; store with information about the exception.">
        <see cref="T:System.Security.RightsManagement.RightsManagementException" /> クラスの新しいインスタンスを初期化し、例外に関する情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo" /> ストアを設定します。</summary>
      <param name="info" vsli:raw="The object that holds the serialized data.">シリアル化されたデータを保持するオブジェクト。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">転送元または転送先に関するコンテキスト情報。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class with a given &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementFailureCode&quot; /&gt;.">指定した <see cref="T:System.Security.RightsManagement.RightsManagementException" /> を使用して、<see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="failureCode" vsli:raw="The failure code for the error.">エラーのエラー コード。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class with a given &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementFailureCode&quot; /&gt; and &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt;.">指定した <see cref="T:System.Security.RightsManagement.RightsManagementException" /> および <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> を使用して、<see cref="P:System.Exception.InnerException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="failureCode" vsli:raw="The failure code for the error.">エラーのエラー コード。</param>
      <param name="innerException" vsli:raw="The exception instance that caused the error.">エラーの原因となった例外インスタンス。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class with a given &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementFailureCode&quot; /&gt; and &lt;see cref=&quot;P:System.Exception.Message&quot; /&gt;.">指定した <see cref="T:System.Security.RightsManagement.RightsManagementException" /> および <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> を使用して、<see cref="P:System.Exception.Message" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="failureCode" vsli:raw="The failure code for the error.">エラーのエラー コード。</param>
      <param name="message" vsli:raw="A message that describes the error.">エラーについて説明するメッセージ。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class with a given &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementFailureCode&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.Message&quot; /&gt; and &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt;.">指定した <see cref="T:System.Security.RightsManagement.RightsManagementException" />、<see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />、および <see cref="P:System.Exception.Message" /> を使用して、<see cref="P:System.Exception.InnerException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="failureCode" vsli:raw="The failure code for the error.">エラーのエラー コード。</param>
      <param name="message" vsli:raw="A message that describes the error.">エラーについて説明するメッセージ。</param>
      <param name="innerException" vsli:raw="The exception instance that caused the error.">エラーの原因となった例外インスタンス。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class with a given message.">指定したメッセージを使用して、<see cref="T:System.Security.RightsManagement.RightsManagementException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="A message that describes the error.">エラーについて説明するメッセージ。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class with a given &lt;see cref=&quot;P:System.Exception.Message&quot; /&gt; and &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt;.">指定した <see cref="T:System.Security.RightsManagement.RightsManagementException" /> および <see cref="P:System.Exception.Message" /> を使用して、<see cref="P:System.Exception.InnerException" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="message" vsli:raw="A message that describes the error.">エラーについて説明するメッセージ。</param>
      <param name="innerException" vsli:raw="The exception instance that caused this exception.">この例外の原因となった例外インスタンス。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; store with the parameter name and information about the exception.">パラメーター名と例外に関する情報を使用して <see cref="T:System.Runtime.Serialization.SerializationInfo" /> ストアを設定します。</summary>
      <param name="info" vsli:raw="The object that holds the serialized data.">シリアル化されたデータを保持するオブジェクト。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">転送元または転送先に関するコンテキスト情報。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;info&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> パラメーターが <see langword="null" /> です。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.RightsManagementException.FailureCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementFailureCode&quot; /&gt; for the error.">エラーの <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> を取得します。</summary>
      <returns vsli:raw="The failure code for the error.">エラーのエラー コード。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementFailureCode">
      <summary vsli:raw="Specifies error conditions that can occur when performing a rights management operation.">権限管理操作の実行時に発生する可能性があるエラー状態を指定します。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Aborted">
      <summary vsli:raw="Asynchronous operation canceled, or a non-recoverable error has occurred.">非同期操作がキャンセルされたか、または回復不可能なエラーが発生しました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ActivationFailed">
      <summary vsli:raw="License activation failed; rights management services are not properly configured.">ライセンスのアクティブ化に失敗しました。権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AdEntryNotFound">
      <summary vsli:raw="The current user was not found in the Active Directory (AD) for certification under Windows authentication.">Windows 認証の証明書について、Active Directory (AD) 内で現在のユーザーが見つかりませんでした。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AlreadyInProgress">
      <summary vsli:raw="The requested operation is already in progress.">要求された操作は既に進行中です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AuthenticationFailed">
      <summary vsli:raw="Possible authentication error (HTTP error 401) returned by an Internet request. Or, the current user does not have valid domain credentials in a silent user activation attempt. Or, the certification server in silent user activation is not in the local intranet or trusted sites zone.">認証エラー (HTTP エラー 401) がインターネット要求によって返されました。 または、サイレント ユーザーのアクティブ化を試行しましたが、現在のユーザーに有効なドメイン資格情報がありません。 または、サイレント ユーザーのアクティブ化で使用した証明書サーバーが、ローカル イントラネットまたは信頼されたサイト ゾーンに存在しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BadGetInfoQuery">
      <summary vsli:raw="An invalid constant was passed.">無効な定数が渡されました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessPrincipalNotEnabling">
      <summary vsli:raw="The access condition is not matched to the enabling principal that is handed into the bind.">アクセス状態が、バインドに渡される有効化プリンシパルに一致しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessUnsatisfied">
      <summary vsli:raw="The current user does not satisfy the conditions defined in the End Use License (EUL).">現在のユーザーは、使用許諾 (EUL) で定義された条件を満たしていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindContentNotInEndUseLicense">
      <summary vsli:raw="The specified resource is not contained in any WORK node of the license.">指定されたリソースは、ライセンスの WORK ノードに含まれていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIndicatedPrincipalMissing">
      <summary vsli:raw="The enabling principal does not match the issued principal of the End Use License (EUL).">有効化プリンシパルが、使用許諾 (EUL) の発行されたプリンシパルと一致しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIntervalTimeViolated">
      <summary vsli:raw="The defined time period for the protected content has expired; access is no longer permitted.">保護されたコンテンツに対して定義された有効期限が切れています。アクセスは許可されません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindMachineNotFoundInGroupIdentity">
      <summary vsli:raw="The current machine is not defined within the rights managed group identity.">現在のコンピューターは、権限管理されたグループ ID 内に定義されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoApplicableRevocationList">
      <summary vsli:raw="The current user does not have rights to access the protected content.">現在のユーザーには、保護されたコンテンツにアクセスするための権限がありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoSatisfiedRightsGroup">
      <summary vsli:raw="The specified rights group is not contained in the End Use License (EUL).">指定した権限グループは、使用許諾 (EUL) に含まれていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindPolicyViolation">
      <summary vsli:raw="The current user does not have rights to access the protected content.">現在のユーザーには、保護されたコンテンツにアクセスするための権限がありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevocationListStale">
      <summary vsli:raw="The license requires that a new revocation list must be acquired.">ライセンスでは、新しい失効リストを取得する必要があります。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedIssuer">
      <summary vsli:raw="The current user does not have rights to access the protected content.">現在のユーザーには、保護されたコンテンツにアクセスするための権限がありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedLicense">
      <summary vsli:raw="The current user does not have rights to access the protected content.">現在のユーザーには、保護されたコンテンツにアクセスするための権限がありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedModule">
      <summary vsli:raw="Rights management services are not properly configured.">権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedPrincipal">
      <summary vsli:raw="The current user does not have rights to access the protected content.">現在のユーザーには、保護されたコンテンツにアクセスするための権限がありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedResource">
      <summary vsli:raw="The current user does not have rights to access the protected content.">現在のユーザーには、保護されたコンテンツにアクセスするための権限がありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindSpecifiedWorkMissing">
      <summary vsli:raw="The End Use License (EUL) contains no WORK node.">使用許諾 (EUL) には WORK ノードが含まれていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindValidityTimeViolated">
      <summary vsli:raw="The defined time period for the protected content has expired; access is no longer permitted.">保護されたコンテンツに対して定義された有効期限が切れています。アクセスは許可されません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BrokenCertChain">
      <summary vsli:raw="The rights management certificate chain is broken.">権限管理証明書チェーンが切断されています。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ClockRollbackDetected">
      <summary vsli:raw="Clock rollback has been detected. Protected content cannot be accessed.">クロック ロールバックが検出されました。 保護されたコンテンツにアクセスできません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.CryptoOperationUnsupported">
      <summary vsli:raw="A cryptographic operation that was requested is not supported. For example, passing an RMS encrypting object for decrypting purposes.">要求された暗号化操作はサポートされていません。 たとえば、復号化のために RMS 暗号化オブジェクトを渡すことはサポートされていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.DebuggerDetected">
      <summary vsli:raw="Cannot open or publish content with restricted permissions because a debugger has been detected.">デバッガ―が検出されたため、制限されたアクセス許可でコンテンツを開いたり公開したりすることはできません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EmailNotVerified">
      <summary vsli:raw="The user's email address cannot be verified.">ユーザーの電子メール アドレスを確認できません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnablingPrincipalFailure">
      <summary vsli:raw="The specified principal cannot be enabled.">指定されたプリンシパルを有効にできません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EncryptionNotPermitted">
      <summary vsli:raw="Encryption is not permitted.">暗号化は許可されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentCannotLoad">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; cannot load.">
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> を読み込めません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentNotLoaded">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; cannot load.">
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> を読み込めません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ExpiredOfficialIssuanceLicenseTemplate">
      <summary vsli:raw="The authorized time period defined in the issuance license template has expired; access is no longer permitted.">発行ライセンス テンプレートで定義された有効期間が切れています。アクセスは許可されません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GlobalOptionAlreadySet">
      <summary vsli:raw="The option specified has already been set.">指定したオプションは既に設定されています。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GroupIdentityNotSet">
      <summary vsli:raw="A user name was not specified for the client session.">ユーザー名がクライアント セッションで指定されませんでした。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidCorrupted">
      <summary vsli:raw="The Hardware ID (HID) used in a machine activation attempt is incorrectly formatted. Rights management services are not properly configured.">コンピュータのアクティブ化の試行時に使用されたハードウェア ID (HID) の形式が正しくありません。 権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidInvalid">
      <summary vsli:raw="The Hardware ID (HID) used in a machine activation attempt is invalid. Rights management services are not properly configured.">コンピュータのアクティブ化の試行時に使用されたハードウェア ID (HID) が無効です。 権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IdMismatch">
      <summary vsli:raw="The content ID from the license does not match the content ID the license storage session.">ライセンスからのコンテンツ ID が、ライセンスの格納セッションのコンテンツ ID に一致しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IncompatibleObjects">
      <summary vsli:raw="An object type passed is incompatible with this operation.">渡されたオブジェクト型は、この操作に適合しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotInLicense">
      <summary vsli:raw="When creating a bound license, an issuance license, not an end-use license, was specified.">バインドされたライセンスの作成時に、使用承諾ではなく発行ライセンスが指定されました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotPresent">
      <summary vsli:raw="Some information is missing.">一部の情報が見つかりません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InstallationFailed">
      <summary vsli:raw="An installation operation failed.">インストール操作が失敗しました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidAlgorithmType">
      <summary vsli:raw="The algorithm type specified is invalid.">指定されたアルゴリズムの種類は無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidClientLicensorCertificate">
      <summary vsli:raw="Rights management services are not properly configured.">権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEmail">
      <summary vsli:raw="RMS Server email address verification failed.">RMS サーバーの電子メール アドレスの確認に失敗しました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEncodingType">
      <summary vsli:raw="The specified encoding type is invalid.">指定されたエンコードの種類は無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidHandle">
      <summary vsli:raw="Either the environment or the enabling principal handle is invalid.">環境または有効化プリンシパル ハンドルが無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidIssuanceLicenseTemplate">
      <summary vsli:raw="The Rights Management Services template contains one or more errors.">権限管理サービス テンプレートに 1 つ以上のエラーが含まれています。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidKeyLength">
      <summary vsli:raw="The key length specified in a key/value pair is invalid.">キーと値のペアで指定されたキー長が無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicense">
      <summary vsli:raw="The license structure in one of the certificates is invalid.">いずれかの証明書のライセンス構造が無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicenseSignature">
      <summary vsli:raw="Rights management signed digital certificate cannot be validated. (The signed certificate may have been tampered.)">署名された権限管理デジタル証明書を検証できません。 (署名された証明書が改ざんされている可能性があります。)</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxPath">
      <summary vsli:raw="Rights management services are not properly configured.">権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxType">
      <summary vsli:raw="Rights management services are not properly configured.">権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidNumericalValue">
      <summary vsli:raw="The numeric value specified is invalid.">指定された数値は無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidRegistryPath">
      <summary vsli:raw="The specified registry path is invalid.">指定したレジストリ パスが無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidServerResponse">
      <summary vsli:raw="Rights management services are not properly configured.">権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidTimeInfo">
      <summary vsli:raw="The time information specified is invalid.">指定した時刻情報が無効です。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidVersion">
      <summary vsli:raw="The rights management version is incorrect.">権限管理のバージョンが正しくありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.KeyTypeUnsupported">
      <summary vsli:raw="The key type specified in a key/value pair is not supported.">キーと値のペアで指定されたキーの種類はサポートされていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryFail">
      <summary vsli:raw="A library operation failed.">ライブラリ操作が失敗しました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryUnsupportedPlugIn">
      <summary vsli:raw="The specified library plug-in is not supported.">指定されたライブラリ プラグインはサポートされていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseAcquisitionFailed">
      <summary vsli:raw="An End Use License (EUL) could not be acquired from the rights management server.">使用許諾 (EUL) を権限管理サーバーから取得できませんでした。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseBindingToWindowsIdentityFailed">
      <summary vsli:raw="The current user credentials are not valid for acquiring a license.">現在のユーザーの資格情報は、ライセンスの取得に対して有効でありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ManifestPolicyViolation">
      <summary vsli:raw="An operation is in violation of the rights management manifest policy.">操作が権限管理マニフェスト ポリシーに違反しています。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.MetadataNotSet">
      <summary vsli:raw="The specified metadata could net be set.">指定したメタデータを設定できませんでした。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsGroupIdentityActivation">
      <summary vsli:raw="The user is not activated, or no Rights Account Certificate (RAC) was submitted and none was found in the license store to match the license associated with this session.">ユーザーがアクティブになっていないか、または権利アカウント証明書 (RAC) が送信されておらず、このセッションに関連付けられているライセンスに一致するライセンス ストアで証明書が見つかりませんでした。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsMachineActivation">
      <summary vsli:raw="The computer must be activated before the user can be activated.">ユーザーをアクティブにする前にコンピューターをアクティブにする必要があります。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoAesCryptoProvider">
      <summary vsli:raw="Rights management services are not properly configured.">権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoConnect">
      <summary vsli:raw="Rights management cannot connect to the URI specified for the license server.">ライセンス サーバーに指定された URI に権限管理を接続できません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoDistributionPointUrlFound">
      <summary vsli:raw="The protected content is corrupted.">保護されたコンテンツが破損しています。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoLicense">
      <summary vsli:raw="A required license is not available.">必要なライセンスを使用できません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoMoreData">
      <summary vsli:raw="No license or certificate exists at the specified index.">指定したインデックスにはライセンスも証明書も存在しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotAChain">
      <summary vsli:raw="Rights managed content is corrupted.">権限が管理されたコンテンツが破損しています。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotSet">
      <summary vsli:raw="The item requested to delete does not exist.">削除するように要求された項目は存在しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutdatedModule">
      <summary vsli:raw="Rights management services are not properly configured.">権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutOfQuota">
      <summary vsli:raw="The license server's maximum quota of End Use Licenses (EULs) has been reached.">ライセンス サーバーの使用許諾 (EUL) の最大クォータに達しました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OwnerLicenseNotFound">
      <summary vsli:raw="The document does not contain an Owner License.">ドキュメントに所有者ライセンスが含まれていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.QueryReportsNoResults">
      <summary vsli:raw="No instances of the requested attribute exist.">要求された属性のインスタンスは存在しません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RecordNotFound">
      <summary vsli:raw="The specified license was not found.">指定されたライセンスが見つかりませんでした。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RequestDenied">
      <summary vsli:raw="The Rights Management server does not allow temporary certification of the current user.">権限管理サーバーでは、現在のユーザーの一時的な証明書は許可されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RevocationInfoNotSet">
      <summary vsli:raw="Certificate or license revocation information has not been set.">証明書またはライセンスの失効情報が設定されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotGranted">
      <summary vsli:raw="The current user does not have rights to access the protected content.">現在のユーザーには、保護されたコンテンツにアクセスするための権限がありません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotSet">
      <summary vsli:raw="The requested right was not specified when the content was published with rights management.">権限管理を使用してコンテンツを発行したときに要求された権限が指定されませんでした。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerError">
      <summary vsli:raw="Rights management services are not properly configured.">権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerNotFound">
      <summary vsli:raw="Rights management services are not properly configured.">権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceGone">
      <summary vsli:raw="Rights management services are not properly configured.">権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceMoved">
      <summary vsli:raw="Rights management services are not properly configured.">権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceNotFound">
      <summary vsli:raw="Rights management services are not properly configured.">権限管理サービスが正しく構成されていません。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Success">
      <summary vsli:raw="Operation has competed successfully.">操作が正常に完了しました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyCertificates">
      <summary vsli:raw="The number of certificates has exceeded the maximum number allowed.">証明書の数が許可される最大数を超えました。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyLoadedEnvironments">
      <summary vsli:raw="Too many &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; instance have been created.">作成された <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> インスタンスが多すぎます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UnexpectedException">
      <summary vsli:raw="An unspecified error occurred.  Also thrown when an application runs in debug mode.">未指定のエラーが発生しました。  アプリケーションをデバッグ モードで実行するときにもスローされます。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault">
      <summary vsli:raw="If a request is made for computer activation or a rights account certificate, receiving &lt;see cref=&quot;F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault&quot; /&gt; indicates that the application should pass &lt;see langword=&quot;null&quot; /&gt; into the ActServInfo parameter.">コンピューターのアクティブ化または権利アカウント証明書について要求を実行する場合、<see cref="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault" /> の受信は、アプリケーションによって <see langword="null" /> が ActServInfo パラメーターに渡されることを示します。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ValidityTimeViolation">
      <summary vsli:raw="The defined time period for the protected content has expired; access is no longer permitted.">保護されたコンテンツに対して定義された有効期限が切れています。アクセスは許可されません。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.SecureEnvironment">
      <summary vsli:raw="Represents a secure client session for user activation, license binding, and other rights management operations.">ユーザーのアクティブ化、ライセンスのバインディング、およびその他の権限管理操作にとって安全なクライアント セッションを表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)">
      <summary vsli:raw="Creates a secure client session given an application rights manifest, &lt;see cref=&quot;T:System.Security.RightsManagement.AuthenticationType&quot; /&gt;, and &lt;see cref=&quot;T:System.Security.RightsManagement.UserActivationMode&quot; /&gt;.">アプリケーションの権利マニフェスト、<see cref="T:System.Security.RightsManagement.AuthenticationType" />、および <see cref="T:System.Security.RightsManagement.UserActivationMode" /> が指定された、セキュリティで保護されたクライアント セッションを作成します。</summary>
      <param name="applicationManifest" vsli:raw="The application rights manifest.">アプリケーションの権限マニフェスト。</param>
      <param name="authentication" vsli:raw="The method of authentication.">認証の方法。</param>
      <param name="userActivationMode" vsli:raw="The type of the user rights account certificate.">ユーザー権利のアカウント証明書の種類。</param>
      <returns vsli:raw="A secure client session for activation, license binding, and other rights management operations.">アクティブ化、ライセンスのバインド、およびその他の権限管理操作のための、セキュリティで保護されたクライアント セッション。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)">
      <summary vsli:raw="Creates a secure client session for a specified user with a given rights manifest.">指定された権限マニフェストを使用して、指定されたユーザーのセキュリティで保護されたクライアント セッションを作成します。</summary>
      <param name="applicationManifest" vsli:raw="The application rights manifest.">アプリケーションの権限マニフェスト。</param>
      <param name="user" vsli:raw="The user or user-group for granting access to rights managed content.">権限が管理されたコンテンツへのアクセス権を付与するユーザーまたはユーザー グループ。</param>
      <returns vsli:raw="A secure client session for activation, license binding, and other rights management operations.">アクティブ化、ライセンスのバインド、およびその他の権限管理操作のための、セキュリティで保護されたクライアント セッション。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt;.">
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> によって使用されているすべてのリソースを解放します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; and optionally releases the managed resources.">
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers">
      <summary vsli:raw="Returns a list of the activated users.">アクティブになっているユーザーのリストを返します。</summary>
      <returns vsli:raw="A list of the currently activated users.">現在アクティブになっているユーザーのリスト。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)">
      <summary vsli:raw="Indicates whether a given user has been activated for accessing rights managed content.">権限管理コンテンツにアクセスできるように、特定のユーザーがアクティブになっているかどうかを示します。</summary>
      <param name="user" vsli:raw="The user or user-group for granting access to rights managed content.">権限が管理されたコンテンツへのアクセス権を付与するユーザーまたはユーザー グループ。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given &lt;paramref name=&quot;user&quot; /&gt; has been activated for accessing rights managed content; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">権限管理コンテンツにアクセスできるように、指定した <paramref name="user" /> がアクティブになっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)">
      <summary vsli:raw="Removes the license activation for a specified user.">指定したユーザーのライセンス アクティベーションを削除します。</summary>
      <param name="user" vsli:raw="The user to remove the license activation for.">ライセンス アクティベーションを削除する対象となるユーザー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;user&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="user" /> パラメーターが <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The given &lt;paramref name=&quot;user&quot; /&gt; is not authenticated with either Windows authentication or Passport authentication.">指定した <paramref name="user" /> は、Windows 認証または Passport 認証で認証されていません。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest">
      <summary vsli:raw="Gets the &lt;see cref=&quot;P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest&quot; /&gt; specified when the &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; was created.">
        <see cref="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest" /> の作成時に指定した <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> を取得します。</summary>
      <returns vsli:raw="The application manifest specified to the &lt;see cref=&quot;Overload:System.Security.RightsManagement.SecureEnvironment.Create&quot; /&gt; method when the &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; is created.">
        <see cref="Overload:System.Security.RightsManagement.SecureEnvironment.Create" /> の作成時に <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> メソッドに対して指定したアプリケーション マニフェスト。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.User">
      <summary vsli:raw="Gets the user or user-group specified when the &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; was created.">
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> の作成時に指定したユーザーまたはユーザー グループを取得します。</summary>
      <returns vsli:raw="The user or user-group specified to the &lt;see cref=&quot;M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)&quot; /&gt; method when the &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; was created.">
        <see cref="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)" /> の作成時に <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> メソッドに対して指定したユーザーまたはユーザー グループ。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UnsignedPublishLicense">
      <summary vsli:raw="Represents an unsigned rights managed &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; or an unsigned &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; template.">署名されていない権限管理 <see cref="T:System.Security.RightsManagement.PublishLicense" /> か、署名されていない <see cref="T:System.Security.RightsManagement.PublishLicense" /> テンプレートを表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.UnsignedPublishLicense&quot; /&gt; class.">
        <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.UnsignedPublishLicense&quot; /&gt; class from a specified XrML publish-license template.">指定した XrML 公開ライセンスのテンプレートから <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="publishLicenseTemplate" vsli:raw="The Extensible Rights Markup Language (XrML) publish-license template to use to create this license.">このライセンスの作成に使用する Extensible Rights Markup Language (XrML) 公開ライセンスのテンプレート。</param>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.Sign(System.Security.RightsManagement.SecureEnvironment,System.Security.RightsManagement.UseLicense@)">
      <summary vsli:raw="Creates a signed &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; and returns a &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for the document author.">署名付きの <see cref="T:System.Security.RightsManagement.PublishLicense" /> を作成し、ドキュメント作成者の <see cref="T:System.Security.RightsManagement.UseLicense" /> を返します。</summary>
      <param name="secureEnvironment" vsli:raw="The secure environment for license activation and binding.">ライセンスのアクティブ化とバインディングにとって安全な環境。</param>
      <param name="authorUseLicense" vsli:raw="A returned &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for the document author.">返されるドキュメント作成者の <see cref="T:System.Security.RightsManagement.UseLicense" />。</param>
      <returns vsli:raw="The signed &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; that is created by signing this &lt;see cref=&quot;T:System.Security.RightsManagement.UnsignedPublishLicense&quot; /&gt;.">この <see cref="T:System.Security.RightsManagement.PublishLicense" /> の署名によって作成される署名付きの <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.ToString">
      <summary vsli:raw="Returns a serialized template created from the XrML of the &lt;see cref=&quot;T:System.Security.RightsManagement.UnsignedPublishLicense&quot; /&gt;.">
        <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> の XrML から作成されたシリアル化されたテンプレートを返します。</summary>
      <returns vsli:raw="A serialized template created from the XrML of the &lt;see cref=&quot;T:System.Security.RightsManagement.UnsignedPublishLicense&quot; /&gt;.">
        <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> の XrML から作成されたシリアル化されたテンプレート。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ContentId">
      <summary vsli:raw="Gets or sets the publisher-created content identifier.">発行者が作成したコンテンツ識別子を取得または設定します。</summary>
      <returns vsli:raw="The publisher-created rights-managed content identifier.">発行者が作成した、権限が管理されたコンテンツの識別子。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Grants">
      <summary vsli:raw="Gets a collection of assigned user rights.">割り当てられたユーザー権限のコレクションを取得します。</summary>
      <returns vsli:raw="A collection of the assigned user rights that are provided in this license.">このライセンスに示されている割り当てられたユーザー権限のコレクション。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.LocalizedNameDescriptionDictionary">
      <summary vsli:raw="Gets a collection of name and description pairs.">名前と説明のペアのコレクションを取得します。</summary>
      <returns vsli:raw="A collection of name and description pairs.">名前と説明のペアのコレクション。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Owner">
      <summary vsli:raw="Gets or sets the content owner.">コンテンツの所有者を取得または設定します。</summary>
      <returns vsli:raw="The user who owns the published content.">公開されたコンテンツを所有しているユーザー。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoName">
      <summary vsli:raw="Gets or sets the contact name for the author or publisher of the content.">コンテンツの作成者または発行者の連絡先名を取得または設定します。</summary>
      <returns vsli:raw="The contact name for the author or publisher of the content.">コンテンツの作成者または発行者の連絡先名。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoUri">
      <summary vsli:raw="Gets or sets the contact URI for the author or publisher of the content.">コンテンツの作成者または発行者の連絡先 URI を取得または設定します。</summary>
      <returns vsli:raw="The contact uniform resource identifier (URI) for the author or publisher of the content.">コンテンツの作成者または発行者の連絡先 URI (uniform resource identifier)。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UseLicense">
      <summary vsli:raw="Represents a license that enables access to protected rights managed content.">保護された権限管理対象コンテンツへのアクセスを有効にするライセンスを表します。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; class.">
        <see cref="T:System.Security.RightsManagement.UseLicense" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="useLicense" vsli:raw="A use license in serialized Extensible Rights Markup Language (XrML) form.">シリアル化された Extensible Rights Markup Language (XrML) 形式の使用ライセンス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;useLicense&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="useLicense" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException" vsli:raw="&lt;paramref name=&quot;useLicense&quot; /&gt; is invalid.">
        <paramref name="useLicense" /> が無効です。</exception>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)">
      <summary vsli:raw="Binds the license to a given &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt;.">指定の <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> にライセンスをバインドします。</summary>
      <param name="secureEnvironment" vsli:raw="The environment to bind the license to.">ライセンスをバインドする環境。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;secureEnvironment&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="secureEnvironment" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Security.RightsManagement.CryptoProvider&quot; /&gt; instance if the license binding succeeded; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">ライセンスのバインディングが成功した場合は <see cref="T:System.Security.RightsManagement.CryptoProvider" /> インスタンス。それ以外の場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Equals(System.Object)">
      <summary vsli:raw="Indicates if this license is equivalent to another given license.">このライセンスが、指定した別のライセンスと等しいかどうかを示します。</summary>
      <param name="x" vsli:raw="The license to compare.">比較するライセンス。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if both licenses are the equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">両方のライセンスが等価である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.GetHashCode">
      <summary vsli:raw="Returns the hash code associated with this license.">このライセンスに関連付けられたハッシュ コードを返します。</summary>
      <returns vsli:raw="A hash code for this license.">このライセンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.ToString">
      <summary vsli:raw="Returns the serialized XrML string used to create this license.">このライセンスの作成に使用するシリアル化された XrML 文字列を返します。</summary>
      <returns vsli:raw="The serialized Extensible Rights Markup Language (XrML) string originally passed to the &lt;see cref=&quot;M:System.Security.RightsManagement.UseLicense.#ctor(System.String)&quot; /&gt; constructor.">最初に <see cref="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)" /> コンストラクターに渡されるシリアル化された Extensible Rights Markup Language (XrML) 文字列。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ApplicationData">
      <summary vsli:raw="Gets the application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.">公開アプリケーションから消費アプリケーションに渡されたキーと値のペアを含む、アプリケーション データ ディクショナリを取得します。</summary>
      <returns vsli:raw="The application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.">公開アプリケーションから消費アプリケーションに渡されたキーと値のペアを含む、アプリケーション データ ディクショナリ。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ContentId">
      <summary vsli:raw="Gets the content identifier created by the publisher.">発行者が作成したコンテンツ識別子を取得します。</summary>
      <returns vsli:raw="The content identifier created by the publisher.">発行者が作成したコンテンツ識別子。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.Owner">
      <summary vsli:raw="Gets the owner of the license.">ライセンスの所有者を取得します。</summary>
      <returns vsli:raw="The owner of the license.">ライセンスの所有者。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UserActivationMode">
      <summary vsli:raw="Specifies the type of user Rights Account Certificate to request for rights management activation.">権限管理のアクティブ化を要求する場合に必要となる、ユーザーの権利アカウント証明書の種類を指定します。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Permanent">
      <summary vsli:raw="A permanent Rights Account Certificate.">永続的な権利アカウント証明書。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Temporary">
      <summary vsli:raw="A temporary Rights Account Certificate.">一時的な権利アカウント証明書。</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableAttribute">
      <summary vsli:raw="Provides a base class for .NET attributes that report the use scope of attached properties.">添付プロパティの使用範囲を報告する .NET Framework 属性の基底クラスを提供します。</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.AttachedPropertyBrowsableAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute">
      <summary vsli:raw="Specifies that an attached property is browsable only for elements that derive from a specified type.">添付プロパティが、指定した型から派生した要素に対してのみ参照可能なことを指定します。</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt; class, using the provided &lt;paramref name=&quot;targetType&quot; /&gt;.">指定した <paramref name="targetType" /> を使用して、<see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="targetType" vsli:raw="The intended type that scopes the use of the attached property where this .NET Framework attribute applies.">この .NET Framework 属性 を適用する添付プロパティの使用のスコープとなる対象の型。</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt; .NET Framework attribute is equal to a specified object.">現在のが、 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> 指定したオブジェクトと等しいかどうかを判断し .NET Framework 属性 ます。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt; to compare to the current &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt;.">現在の <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> と比較する <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した <see langword="true" /> が現在の <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> と等しい場合は <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt; .NET Framework attribute.">この <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework 属性 のハッシュ コードを返します。</summary>
      <returns vsli:raw="An unsigned 32-bit integer value.">32 ビットの符号なし整数値。</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TargetType">
      <summary vsli:raw="Gets the base type that scopes the use of the attached property where this .NET Framework attribute applies.">この .NET Framework 属性 が適用する添付プロパティを使用するスコープを指定する基本型を取得します。</summary>
      <returns vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt;.">要求された <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TypeId">
      <summary vsli:raw="Gets a unique type identifier for this &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt; .NET Framework attribute.">このの一意の型識別子を取得し <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework 属性 ます。</summary>
      <returns vsli:raw="An object that is a unique identifier for the &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt;.">
        <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> の一意の識別子であるオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute">
      <summary vsli:raw="Specifies that an attached property is only browsable on an element that also has another specific .NET attribute applied to its class definition.">そのクラス定義に適用される別の特定の .NET Framework 属性も持つ要素上でのみ添付プロパティを参照できるように指定します。</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the  .NET Framework attribute that must also be applied on a class in order for the attached property to be browsable on the class where &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt; is applied.">
        <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> が適用されているクラスで添付プロパティを参照できるように、クラスでも適用する必要がある .NET Framework 属性 の <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt; .NET Framework attribute is equal to a specified object.">現在のが、 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> 指定したオブジェクトと等しいかどうかを判断し .NET Framework 属性 ます。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt; to compare to the current &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt;.">現在の <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> と比較する <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した <see langword="true" /> が現在の <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> と等しい場合は <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt; .NET Framework attribute.">この <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework 属性 のハッシュ コードを返します。</summary>
      <returns vsli:raw="An unsigned 32-bit integer value.">32 ビットの符号なし整数値。</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.AttributeType">
      <summary vsli:raw="Gets the type of the  .NET Framework attribute that must also be applied on a class.">クラスでも適用する必要がある .NET Framework 属性の型を取得します。</summary>
      <returns vsli:raw="The  .NET Framework attribute type.">.NET Framework 属性型。</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences">
      <summary vsli:raw="Contains properties that specify how an application should behave relative to new WPF features that are in the WindowsBase assembly.">アプリケーションが、WindowsBase アセンブリにある WPF の新しい機能に対してどのように動作するかを指定するプロパティを格納します。</summary>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.FlowDispatcherSynchronizationContextPriority">
      <summary vsli:raw="Gets or sets a value that indicates whether information about the &lt;see cref=&quot;P:System.Windows.Threading.DispatcherOperation.Priority&quot; /&gt; is saved to the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt;.">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> に関する情報が <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> に保存されているかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if information about the &lt;see cref=&quot;P:System.Windows.Threading.DispatcherOperation.Priority&quot; /&gt; is saved to the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> に関する情報が <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> に保存される場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailure">
      <summary vsli:raw="Defines how the dispatcher reacts to failures encountered when it requests processing.">ディスパッチャーが処理を要求するときに発生したエラーの処理方法を定義します。</summary>
      <returns vsli:raw="A value that defines how the dispatcher reacts to failures.">ディスパッチャーのエラー処理方法を定義する値。</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.InlineDispatcherSynchronizationContextSend">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)&quot; /&gt; method puts the delegates on the dispatcher queue or if the delegate is directly invoked.">
        <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> メソッドがディスパッチャー キューにデリゲートを登録するかデリゲートが直接呼び出されるかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)&quot; /&gt; method puts the delegates on the dispatcher queue or if the delegate is directly invoked; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> メソッドがディスパッチャー キューにデリゲートを登録したり、デリゲートが直接呼び出されたりする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.ReuseDispatcherSynchronizationContextInstance">
      <summary vsli:raw="Gets or sets a value that indicates whether a single &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt; is used for multiple dispatcher operations.">複数のディスパッチャー操作で単一の <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> が使用されるかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="true if a single &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt; is used for multiple dispatcher operations; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">複数のディスパッチャー操作に 1 つの <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> が使用される場合は true、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions">
      <summary vsli:raw="Provides a set of values that describes how the dispatcher responds to failures that are encountered while requesting processing.">要求の処理中に発生したエラーにディスパッチャーがどのように応答するかを説明する、一連の値を提供します。</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Continue">
      <summary vsli:raw="Continue after the failure.  &#xA;  &#xA; This is the default value. It defines the behavior of the Windows Presentation Foundation dispatcher prior to the .NET Framework 4.7.1. The dispatcher may become unresponsive when this option is selected.">失敗後も続行します。  
  
 これが既定値です。 .NET Framework 4.7.1 より前の Windows Presentation Foundation ディスパッチャーの動作を定義します。 このオプションを選択すると、ディスパッチャーが応答しなくなる場合があります。</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Reset">
      <summary vsli:raw="Reset the dispatcher's state to try another request the next time one is needed.  &#xA;  &#xA; While this option can sometimes &quot;repair&quot; unresponsiveness, it cannot honor the usual timing of processing, which can be crucial. Selecting this option can lead to unexpected behavior.">次に必要な場合に別の要求を試せるように、ディスパッチャーの状態をリセットします。  
  
 このオプションにより、無反応な状態が "修復" される場合もありますが、通常の処理のタイミングを優先できなくなり、重大な問題となることがあります。 このオプションを選択すると、予期しない動作が起こる可能性があります。</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Throw">
      <summary vsli:raw="Throw an exception.  &#xA;  &#xA; This option immediately brings the problem to the application developer's attention.">例外をスローします。  
  
 このオプションにより、問題がすぐにアプリケーション開発者に通知されます。</summary>
    </member>
    <member name="T:System.Windows.CoerceValueCallback">
      <summary vsli:raw="Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.">依存関係プロパティの値が再評価されたり強制が明示的に要求されたりした場合に必ず呼び出されるメソッドのテンプレートを提供します。</summary>
      <param name="d" vsli:raw="The object that the property exists on. When the callback is invoked, the property system will pass this value.">プロパティが存在するオブジェクト。 コールバックが呼び出されると、プロパティ システムがこの値を渡します。</param>
      <param name="baseValue" vsli:raw="The new value of the property, prior to any coercion attempt.">強制が試行される前のプロパティの新しい値。</param>
      <returns vsli:raw="The coerced value (with appropriate type).">強制された (適切な型の) 値。</returns>
    </member>
    <member name="T:System.Windows.Converters.Int32RectValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Int32Rect" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Converters.Int32RectValueSerializer&quot; /&gt; class.">
        <see cref="T:System.Windows.Converters.Int32RectValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Int32Rect" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">変換のために評価する文字列。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">指定した <see cref="T:System.Windows.Int32Rect" /> を <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">変換の評価対象となるオブジェクト。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Int32Rect" /> に変換します。</summary>
      <param name="value" vsli:raw="The string to convert.">変換する文字列。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">指定された <see cref="T:System.Windows.Int32Rect" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Windows.Int32Rect" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The object to convert into a string.">文字列に変換するオブジェクト。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="A string representation of the specified &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">指定された <see cref="T:System.Windows.Int32Rect" /> の文字列表記。</returns>
    </member>
    <member name="T:System.Windows.Converters.PointValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Point" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Converters.PointValueSerializer&quot; /&gt; class.">
        <see cref="T:System.Windows.Converters.PointValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Point" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">変換のために評価する文字列。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">指定した <see cref="T:System.Windows.Point" /> を <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">変換の評価対象となるオブジェクト。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Point" /> に変換します。</summary>
      <param name="value" vsli:raw="The string to convert.">変換する文字列。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">指定された <see cref="T:System.Windows.Point" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Windows.Point" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The object to convert into a string.">文字列に変換するオブジェクト。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="A string representation of the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">指定された <see cref="T:System.Windows.Point" /> の文字列表記。</returns>
    </member>
    <member name="T:System.Windows.Converters.RectValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Rect" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Converters.RectValueSerializer&quot; /&gt; class.">
        <see cref="T:System.Windows.Converters.RectValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Rect" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">変換のために評価する文字列。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">指定した <see cref="T:System.Windows.Rect" /> を <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">変換の評価対象となるオブジェクト。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Rect" /> に変換します。</summary>
      <param name="value" vsli:raw="The string to convert.">変換する文字列。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">指定された <see cref="T:System.Windows.Rect" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Windows.Rect" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The object to convert into a string.">文字列に変換するオブジェクト。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="A string representation of the specified &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">指定された <see cref="T:System.Windows.Rect" /> の文字列表記。</returns>
    </member>
    <member name="T:System.Windows.Converters.SizeValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Size" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Converters.SizeValueSerializer&quot; /&gt; class.">
        <see cref="T:System.Windows.Converters.SizeValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Size" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">変換のために評価する文字列。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">指定した <see cref="T:System.Windows.Size" /> を <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">変換の評価対象となるオブジェクト。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Size" /> に変換します。</summary>
      <param name="value" vsli:raw="The string to convert.">変換する文字列。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">指定された <see cref="T:System.Windows.Size" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The object to convert into a string.">文字列に変換するオブジェクト。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="A string representation of the specified &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">指定された <see cref="T:System.Windows.Size" /> の文字列表記。</returns>
    </member>
    <member name="T:System.Windows.Converters.VectorValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Vector" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Converters.VectorValueSerializer&quot; /&gt; class.">
        <see cref="T:System.Windows.Converters.VectorValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Vector" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">変換のために評価する文字列。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">指定した <see cref="T:System.Windows.Vector" /> を <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">変換の評価対象となるオブジェクト。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Vector" /> に変換します。</summary>
      <param name="value" vsli:raw="The string to convert.">変換する文字列。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">指定された <see cref="T:System.Windows.Vector" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Windows.Vector" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The object to convert into a string.">文字列に変換するオブジェクト。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="A string representation of the specified &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">指定された <see cref="T:System.Windows.Vector" /> の文字列表記。</returns>
    </member>
    <member name="T:System.Windows.Data.DataSourceProvider">
      <summary vsli:raw="Common base class and contract for &lt;see cref=&quot;T:System.Windows.Data.DataSourceProvider&quot; /&gt; objects, which are factories that execute some queries to produce a single object or a list of objects that you can use as binding source objects.">
        <see cref="T:System.Windows.Data.DataSourceProvider" /> オブジェクトの共通の基底クラスおよびコントラクトです。このオブジェクトは、バインド ソース オブジェクトとして使用可能な 1 つのオブジェクトまたはオブジェクトの一覧を生成するためにいくつかのクエリを実行するファクトリです。</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.DataChanged">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.Windows.Data.DataSourceProvider.Data&quot; /&gt; property has a new value.">
        <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> プロパティに新しい値が設定された場合に発生します。</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">プロパティ値が変更するときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">プロパティ値が変更するときに発生します。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Data.DataSourceProvider&quot; /&gt; class. This is a protected constructor.">
        <see cref="T:System.Windows.Data.DataSourceProvider" /> クラスの新しいインスタンスを初期化します。 これは保護されたコンストラクターです。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginInit">
      <summary vsli:raw="Indicates that initialization of this object is about to begin; no implicit &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.Refresh&quot; /&gt; occurs until the matched &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.EndInit&quot; /&gt; method is called.">このオブジェクトの初期化が開始されようとしていることを示します。一致する <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> メソッドが呼び出されるまで暗黙の <see cref="M:System.Windows.Data.DataSourceProvider.EndInit" /> は発生しません。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginQuery">
      <summary vsli:raw="When overridden in a derived class, this base class calls this method when &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.InitialLoad&quot; /&gt; or &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.Refresh&quot; /&gt; has been called. The base class delays the call if refresh is deferred or initial load is disabled.">派生クラスでオーバーライドされると、この基本クラスは、<see cref="M:System.Windows.Data.DataSourceProvider.InitialLoad" /> または <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> が呼び出されたときにこのメソッドを呼び出します。 更新が遅延される場合、または最初の読み込みが無効になっている場合は、基本クラスによって呼び出しが遅延されます。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.DeferRefresh">
      <summary vsli:raw="Enters a defer cycle that you can use to change properties of the provider and delay automatic refresh.">プロバイダーのプロパティを変更し、自動更新を遅延させるために使用できる遅延サイクルを入力します。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; object that you can use to dispose of the calling object.">呼び出し元のオブジェクトを破棄するために使用できる <see cref="T:System.IDisposable" /> オブジェクト。</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.EndInit">
      <summary vsli:raw="Indicates that the initialization of this object has completed; this causes a &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.Refresh&quot; /&gt; if no other &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.DeferRefresh&quot; /&gt; is outstanding.">このオブジェクトの初期化が完了したことを示します。これにより、保留状態の <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> が他にない場合は <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> が発生します。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.InitialLoad">
      <summary vsli:raw="Starts the initial query to the underlying data model. The result is returned on the &lt;see cref=&quot;P:System.Windows.Data.DataSourceProvider.Data&quot; /&gt; property.">基になるデータ モデルに対する最初のクエリを開始します。 結果は <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> プロパティに返されます。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Windows.Data.DataSourceProvider.PropertyChanged&quot; /&gt; event with the provided arguments.">指定された引数を使用して、<see cref="E:System.Windows.Data.DataSourceProvider.PropertyChanged" /> イベントを発生させます。</summary>
      <param name="e" vsli:raw="Arguments of the event being raised.">発生しているイベントの引数。</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object)">
      <summary vsli:raw="Derived classes call this method to indicate that a query has finished.">派生クラスは、このメソッドを呼び出してクエリが終了したことを示します。</summary>
      <param name="newData" vsli:raw="The data that is the result of the query.">クエリの結果を表すデータ。</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object,System.Exception,System.Windows.Threading.DispatcherOperationCallback,System.Object)">
      <summary vsli:raw="Derived classes call this method to indicate that a query has finished.">派生クラスは、このメソッドを呼び出してクエリが終了したことを示します。</summary>
      <param name="newData" vsli:raw="The data that is the result of the query.">クエリの結果を表すデータ。</param>
      <param name="error" vsli:raw="The error that occurred while running the query. This value is &lt;see langword=&quot;null&quot; /&gt; if there is no error.">クエリの実行中に発生したエラー。 エラーがない場合、この値は <see langword="null" /> です。</param>
      <param name="completionWork" vsli:raw="Optional delegate that is used to execute completion work on the UI thread, for example, to set additional properties.">UI スレッドで追加のプロパティの設定などの完了作業を実行するために使用される省略可能なデリゲート。</param>
      <param name="callbackArguments" vsli:raw="Optional arguments to send as a parameter with the &lt;paramref name=&quot;completionWork&quot; /&gt; delegate.">
        <paramref name="completionWork" /> デリゲートのパラメーターとして送信する省略可能な引数。</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.Refresh">
      <summary vsli:raw="Initiates a refresh operation to the underlying data model. The result is returned on the &lt;see cref=&quot;P:System.Windows.Data.DataSourceProvider.Data&quot; /&gt; property.">基になるデータ モデルに対する更新操作を開始します。 結果は <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> プロパティに返されます。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary vsli:raw="This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.">このメンバーは、Windows Presentation Foundation (WPF) インフラストラクチャをサポートしますが、独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#EndInit">
      <summary vsli:raw="This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.">このメンバーは、Windows Presentation Foundation (WPF) インフラストラクチャをサポートしますが、独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Data">
      <summary vsli:raw="Gets the underlying data object.">基になるデータ オブジェクトを取得します。</summary>
      <returns vsli:raw="A value of type &lt;see cref=&quot;T:System.Object&quot; /&gt; that is the underlying data object.">データ オブジェクトの基になる型 <see cref="T:System.Object" /> の値。</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Dispatcher">
      <summary vsli:raw="Gets or sets the current &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; object to the UI thread to use.">使用する UI スレッドに対する現在の <see cref="T:System.Windows.Threading.Dispatcher" /> オブジェクトを取得または設定します。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; object to the UI thread to use. By default, this is the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; object that is associated with the thread on which this instance was created.">
        <see cref="T:System.Windows.Threading.Dispatcher" />使用するスレッドに対する現在のオブジェクト UI 。 既定では、これは、このインスタンスの作成時にスレッドに関連付けられた <see cref="T:System.Windows.Threading.Dispatcher" /> オブジェクトです。</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Error">
      <summary vsli:raw="Gets the error of the last query operation.">最後のクエリ操作のエラーを取得します。</summary>
      <returns vsli:raw="A value of type &lt;see cref=&quot;T:System.Exception&quot; /&gt; that is the error of the last query operation, or &lt;see langword=&quot;null&quot; /&gt; if there was no error.">最後のクエリ操作のエラーである <see cref="T:System.Exception" /> 型の値。エラーがなかった場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsInitialLoadEnabled">
      <summary vsli:raw="Gets or sets a value that indicates whether to prevent or delay the automatic loading of data.">データの自動読み込みを回避または遅延するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; to prevent or delay the automatic loading of data; otherwise, &lt;see langword=&quot;true&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">データの自動読み込みを回避または遅延する場合は <see langword="false" />。それ以外の場合は <see langword="true" />。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsRefreshDeferred">
      <summary vsli:raw="Gets a value that indicates whether there is an outstanding &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.DeferRefresh&quot; /&gt; in use.">保留状態の <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> が使用されているかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is an outstanding &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.DeferRefresh&quot; /&gt; in use; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">保留状態の <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> が使用されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.DependencyObject">
      <summary vsli:raw="Represents an object that participates in the dependency property system.">依存関係プロパティ システムに参加しているオブジェクトを表します。</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; class.">
        <see cref="T:System.Windows.DependencyObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
      <summary vsli:raw="Clears the local value of a property. The property to be cleared is specified by a &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; identifier.">プロパティのローカル値をクリアします。 クリアするプロパティは <see cref="T:System.Windows.DependencyProperty" /> 識別子で指定されます。</summary>
      <param name="dp" vsli:raw="The dependency property to be cleared, identified by a &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; object reference.">
        <see cref="T:System.Windows.DependencyProperty" /> オブジェクト参照によって識別される、消去対象の依存関係プロパティ。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempted to call &lt;see cref=&quot;M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)&quot; /&gt; on a sealed &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">シールされている <see cref="T:System.Windows.DependencyObject" /> で <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> を呼び出そうとしました。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
      <summary vsli:raw="Clears the local value of a read-only property. The property to be cleared is specified by a &lt;see cref=&quot;T:System.Windows.DependencyPropertyKey&quot; /&gt;.">読み取り専用プロパティのローカル値を消去します。 消去するプロパティは、<see cref="T:System.Windows.DependencyPropertyKey" /> で指定します。</summary>
      <param name="key" vsli:raw="The key for the dependency property to be cleared.">消去する依存関係プロパティのキー。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempted to call &lt;see cref=&quot;M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)&quot; /&gt; on a sealed &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">シールされている <see cref="T:System.Windows.DependencyObject" /> で <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" /> を呼び出そうとしました。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
      <summary vsli:raw="Coerces the value of the specified dependency property. This is accomplished by invoking any &lt;see cref=&quot;T:System.Windows.CoerceValueCallback&quot; /&gt; function specified in property metadata for the dependency property as it exists on the calling &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">指定した依存関係プロパティの値を強制します。 これは、呼び出し元の <see cref="T:System.Windows.DependencyObject" /> の依存関係プロパティのプロパティ メタデータで指定されている <see cref="T:System.Windows.CoerceValueCallback" /> 関数を呼び出すことによって実現されます。</summary>
      <param name="dp" vsli:raw="The identifier for the dependency property to coerce.">強制する依存関係プロパティの識別子。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The specified &lt;paramref name=&quot;dp&quot; /&gt; or its value were invalid or do not exist.">指定した <paramref name="dp" /> またはその値が無効であるか、存在しません。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.Equals(System.Object)">
      <summary vsli:raw="Determines whether a provided &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">指定した <see cref="T:System.Windows.DependencyObject" /> が現在の <see cref="T:System.Windows.DependencyObject" /> と等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; to compare to the current instance.">現在のインスタンスと比較する対象の <see cref="T:System.Windows.DependencyObject" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are the same; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つのインスタンスが同じである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetHashCode">
      <summary vsli:raw="Gets a hash code for this &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">この <see cref="T:System.Windows.DependencyObject" /> のハッシュ コードを取得します。</summary>
      <returns vsli:raw="A signed 32-bit integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
      <summary vsli:raw="Creates a specialized enumerator for determining which dependency properties have locally set values on this &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">どの依存関係プロパティがこの <see cref="T:System.Windows.DependencyObject" /> 上にローカルに設定された値を持つかを確認するための、専用の列挙子を作成します。</summary>
      <returns vsli:raw="A specialized local value enumerator.">専用のローカル値列挙子。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
      <summary vsli:raw="Returns the current effective value of a dependency property on this instance of a &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">
        <see cref="T:System.Windows.DependencyObject" /> のこのインスタンスにある依存関係プロパティの現在の有効値を返します。</summary>
      <param name="dp" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; identifier of the property to retrieve the value for.">値を取得するプロパティの <see cref="T:System.Windows.DependencyProperty" /> 識別子。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The specified &lt;paramref name=&quot;dp&quot; /&gt; or its value was invalid, or the specified &lt;paramref name=&quot;dp&quot; /&gt; does not exist.">指定された <paramref name="dp" /> またはその値が無効か、指定された <paramref name="dp" /> が存在しません。</exception>
      <returns vsli:raw="Returns the current effective value.">現在の有効値を返します。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
      <summary vsli:raw="Re-evaluates the effective value for the specified dependency property.">指定した依存関係プロパティの有効値を再評価します。</summary>
      <param name="dp" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; identifier of the property to invalidate.">無効にするプロパティの <see cref="T:System.Windows.DependencyProperty" /> 識別子。</param>
    </member>
    <member name="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary vsli:raw="Invoked whenever the effective value of any dependency property on this &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; has been updated. The specific dependency property that changed is reported in the event data.">この <see cref="T:System.Windows.DependencyObject" /> の依存関係プロパティの有効値が更新された場合に必ず呼び出されます。 変更された特定の依存関係プロパティは、イベント データで報告されます。</summary>
      <param name="e" vsli:raw="Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.">関心のある依存関係プロパティの識別子、そのタイプのプロパティ メタデータ、新旧の値を含むイベント データ。</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
      <summary vsli:raw="Returns the local value of a dependency property, if it exists.">ローカルの依存関係プロパティの値を返します (存在する場合)。</summary>
      <param name="dp" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; identifier of the property to retrieve the value for.">値を取得するプロパティの <see cref="T:System.Windows.DependencyProperty" /> 識別子。</param>
      <returns vsli:raw="Returns the local value, or returns the sentinel value &lt;see cref=&quot;F:System.Windows.DependencyProperty.UnsetValue&quot; /&gt; if no local value is set.">ローカル値を返します。またはローカル値が設定されていない場合は、sentinel 値 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
      <summary vsli:raw="Sets the value of a dependency property without changing its value source.">依存関係プロパティ値のソースを変更せずにその値を設定します。</summary>
      <param name="dp" vsli:raw="The identifier of the dependency property to set.">設定する依存関係プロパティの識別子。</param>
      <param name="value" vsli:raw="The new local value.">新しいローカル値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempted to modify a read-only dependency property, or a property on a sealed &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">読み取り専用の依存関係プロパティ、またはシールされている <see cref="T:System.Windows.DependencyObject" /> 上のプロパティを変更しようとしました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; was not the correct type as registered for the &lt;paramref name=&quot;dp&quot; /&gt; property.">
        <paramref name="value" /> が、<paramref name="dp" /> プロパティに登録されている正しい型ではありません。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
      <summary vsli:raw="Sets the local value of a dependency property, specified by its dependency property identifier.">依存関係プロパティ識別子を指定して、該当する依存関係プロパティのローカル値を設定します。</summary>
      <param name="dp" vsli:raw="The identifier of the dependency property to set.">設定する依存関係プロパティの識別子。</param>
      <param name="value" vsli:raw="The new local value.">新しいローカル値。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempted to modify a read-only dependency property, or a property on a sealed &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">読み取り専用の依存関係プロパティ、またはシールされている <see cref="T:System.Windows.DependencyObject" /> 上のプロパティを変更しようとしました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; was not the correct type as registered for the &lt;paramref name=&quot;dp&quot; /&gt; property.">
        <paramref name="value" /> が、<paramref name="dp" /> プロパティに登録されている正しい型ではありません。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
      <summary vsli:raw="Sets the local value of a read-only dependency property, specified by the &lt;see cref=&quot;T:System.Windows.DependencyPropertyKey&quot; /&gt; identifier of the dependency property.">依存関係プロパティの <see cref="T:System.Windows.DependencyPropertyKey" /> 識別子で指定した読み取り専用の依存関係プロパティのローカル値を設定します。</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyPropertyKey&quot; /&gt; identifier of the property to set.">設定するプロパティの <see cref="T:System.Windows.DependencyPropertyKey" /> 識別子。</param>
      <param name="value" vsli:raw="The new local value.">新しいローカル値。</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
      <summary vsli:raw="Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.">シリアル化プロセスが、指定された依存関係プロパティの値をシリアル化する必要があるかどうかを示す値を返します。</summary>
      <param name="dp" vsli:raw="The identifier for the dependency property that should be serialized.">シリアル化する必要がある依存関係プロパティの識別子。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dependency property that is supplied should be value-serialized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定された依存関係プロパティの値をシリアル化する必要がある場合は <see langword="true" />、それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyObject.DependencyObjectType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; that wraps the CLR type of this instance.">このインスタンスの CLR 型をラップする <see cref="T:System.Windows.DependencyObjectType" /> を取得します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; that wraps the CLR type of this instance.">このインスタンスの CLR 型をラップする <see cref="T:System.Windows.DependencyObjectType" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyObject.IsSealed">
      <summary vsli:raw="Gets a value that indicates whether this instance is currently sealed (read-only).">このインスタンスが現在シールされている (読み取り専用である) かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is sealed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このインスタンスがシールされている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.DependencyObjectType">
      <summary vsli:raw="Implements an underlying type cache for all &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; derived types.">すべての <see cref="T:System.Windows.DependencyObject" /> 派生型の基になる型のキャッシュを実装します。</summary>
    </member>
    <member name="M:System.Windows.DependencyObjectType.FromSystemType(System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; that represents a given system (CLR) type.">指定されたシステム (CLR) 型を表す <see cref="T:System.Windows.DependencyObjectType" /> を返します。</summary>
      <param name="systemType" vsli:raw="The system (CLR) type to convert.">変換するシステム (CLR) 型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; that represents the system (CLR) type.">システム (CLR) 型を表す <see cref="T:System.Windows.DependencyObjectType" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt;.">この <see cref="T:System.Windows.DependencyObjectType" /> のハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)">
      <summary vsli:raw="Determines whether the specified object is an instance of the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt;.">指定したオブジェクトが現在の <see cref="T:System.Windows.DependencyObjectType" /> のインスタンスかどうかを判断します。</summary>
      <param name="dependencyObject" vsli:raw="The object to compare with the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt;.">現在の <see cref="T:System.Windows.DependencyObjectType" /> と比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class represented by the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; is in the inheritance hierarchy of the &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; passed as &lt;paramref name=&quot;d&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在の <see cref="T:System.Windows.DependencyObjectType" /> によって表されるクラスが <paramref name="d" /> として渡される <see cref="T:System.Windows.DependencyObject" /> の継承階層内にある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; derives from the specified &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt;.">現在の <see cref="T:System.Windows.DependencyObjectType" /> が、指定した <see cref="T:System.Windows.DependencyObjectType" /> から派生しているかどうかを判断します。</summary>
      <param name="dependencyObjectType" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; to compare.">比較対象の <see cref="T:System.Windows.DependencyObjectType" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;dependencyObjectType&quot; /&gt; parameter and the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; represent types of classes, and the class represented by the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; derives from the class represented by &lt;paramref name=&quot;dependencyObjectType&quot; /&gt;. Otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;dependencyObjectType&quot; /&gt; and the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; represent the same class.">
        <paramref name="dependencyObjectType" /> パラメーターおよび現在の <see cref="T:System.Windows.DependencyObjectType" /> がクラスの型を表し、現在の <see cref="T:System.Windows.DependencyObjectType" /> によって表されるクラスが <paramref name="dependencyObjectType" /> によって表されるクラスから派生している場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。 <paramref name="dependencyObjectType" /> と現在の <see cref="T:System.Windows.DependencyObjectType" /> が同じクラスを表す場合、このメソッドは <see langword="false" /> も返します。</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.BaseType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; of the immediate base class of the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt;.">現在の <see cref="T:System.Windows.DependencyObjectType" /> の直接基本クラスの <see cref="T:System.Windows.DependencyObjectType" /> を取得します。</summary>
      <returns vsli:raw="The type of the base class.">基本クラスの型。</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Id">
      <summary vsli:raw="Gets a zero-based unique identifier for constant-time array lookup operations.">一定時間の配列検索操作の 0 から始まる一意識別子を取得します。</summary>
      <returns vsli:raw="An internal identifier.">内部識別子。</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Name">
      <summary vsli:raw="Gets the name of the represented common language runtime (CLR) system type.">表される共通言語ランタイム (CLR) システム型の名前を取得します。</summary>
      <returns vsli:raw="The name of the represented CLR system type.">表されるCLR システム型の名前。</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.SystemType">
      <summary vsli:raw="Gets the common language runtime (CLR) system type represented by this &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt;.">この <see cref="T:System.Windows.DependencyObjectType" /> によって表される共通言語ランタイム (CLR) システム型を取得します。</summary>
      <returns vsli:raw="The CLR system type represented by this &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt;.">この <see cref="T:System.Windows.DependencyObjectType" /> によって表されるCLR システム型。</returns>
    </member>
    <member name="T:System.Windows.DependencyProperty">
      <summary vsli:raw="Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.">スタイル設定、データ バインディング、アニメーション、および継承などの方法によって設定できるプロパティを表します。</summary>
    </member>
    <member name="F:System.Windows.DependencyProperty.UnsetValue">
      <summary vsli:raw="Specifies a static value that is used by the WPF property system rather than &lt;see langword=&quot;null&quot; /&gt; to indicate that the property exists, but does not have its value set by the property system.">プロパティは存在するが、その値がプロパティ システムによって設定されていないことを示すために、WPF プロパティ システムが <see langword="null" /> の代わりに使用する静的な値を指定します。</summary>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type)">
      <summary vsli:raw="Adds another type as an owner of a dependency property that has already been registered.">登録済みの依存関係プロパティの所有者として、別の型を追加します。</summary>
      <param name="ownerType" vsli:raw="The type to add as an owner of this dependency property.">この依存関係プロパティの所有者として追加する型。</param>
      <returns vsli:raw="A reference to the original &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; identifier that identifies the dependency property. This identifier should be exposed by the adding class as a &lt;see langword=&quot;public static readonly&quot; /&gt; field.">依存関係プロパティを識別する元の <see cref="T:System.Windows.DependencyProperty" /> 識別子への参照。 この識別子は、追加するクラスが <see langword="public static readonly" /> フィールドとして公開する必要があります。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)">
      <summary vsli:raw="Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.">既に登録済みの依存関係プロパティの所有者として別の型を追加します。その際、提供される所有者の型に存在する依存関係プロパティに依存関係プロパティのメタデータを提供します。</summary>
      <param name="ownerType" vsli:raw="The type to add as owner of this dependency property.">この依存関係プロパティの所有者として追加する型。</param>
      <param name="typeMetadata" vsli:raw="The metadata that qualifies the dependency property as it exists on the provided type.">提供される型に存在する依存関係プロパティを修飾するメタデータ。</param>
      <returns vsli:raw="A reference to the original &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; identifier that identifies the dependency property. This identifier should be exposed by the adding class as a &lt;see langword=&quot;public static readonly&quot; /&gt; field.">依存関係プロパティを識別する元の <see cref="T:System.Windows.DependencyProperty" /> 識別子への参照。 この識別子は、追加するクラスが <see langword="public static readonly" /> フィールドとして公開する必要があります。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetHashCode">
      <summary vsli:raw="Returns a hash code for this &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt;.">この <see cref="T:System.Windows.DependencyProperty" /> のハッシュ コードを返します。</summary>
      <returns vsli:raw="The hash code for this &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt;.">この <see cref="T:System.Windows.DependencyProperty" /> のハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Type)">
      <summary vsli:raw="Returns the metadata for this dependency property as it exists on a specified existing type.">指定した既存の型に存在する場合の、この依存関係プロパティのメタデータを返します。</summary>
      <param name="forType" vsli:raw="The specific type from which to retrieve the dependency property metadata.">依存関係プロパティのメタデータを取得する対象の特定の型。</param>
      <returns vsli:raw="A property metadata object.">プロパティ メタデータ オブジェクト。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)">
      <summary vsli:raw="Returns the metadata for this dependency property as it exists on the specified object instance.">この依存関係プロパティのメタデータが指定したオブジェクト インスタンスに存在する場合に、このメタデータを返します。</summary>
      <param name="dependencyObject" vsli:raw="A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.">メタデータの取得元となる依存関係プロパティの型固有のバージョンを確認するために型をチェックするときの、対象となる依存関係オブジェクト。</param>
      <returns vsli:raw="A property metadata object.">プロパティ メタデータ オブジェクト。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)">
      <summary vsli:raw="Returns the metadata for this dependency property as it exists on a specified type.">指定した型に存在する場合の、この依存関係プロパティのメタデータを返します。</summary>
      <param name="dependencyObjectType" vsli:raw="A specific object that records the dependency object type from which the dependency property metadata is desired.">依存関係プロパティ メタデータの取得元となる依存関係オブジェクト型を記録する特定のオブジェクト。</param>
      <returns vsli:raw="A property metadata object.">プロパティ メタデータ オブジェクト。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidType(System.Object)">
      <summary vsli:raw="Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.">指定した値がこの依存関係プロパティの型で受け入れ可能かどうかを、依存関係プロパティの最初の登録で指定されたプロパティの型と照合することによって判断します。</summary>
      <param name="value" vsli:raw="The value to check.">確認する値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is the registered property type or an acceptable derived type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した値が登録済みのプロパティ型であるか、または受け入れ可能な派生型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidValue(System.Object)">
      <summary vsli:raw="Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.">指定した値がプロパティの型で受け入れ可能かどうかを基本型チェックによって判断します。さらに、その型の有効値の範囲内にこの値があるかどうかを判断することもあります。</summary>
      <param name="value" vsli:raw="The value to check.">確認する値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is acceptable and is of the correct type or a derived type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">値が受け入れ可能で、適切な型または派生型である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary vsli:raw="Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.">指定した型のインスタンスに存在する場合の代替メタデータをこの依存関係プロパティに提供し、基本型から継承されたときにこの依存関係プロパティに存在していたメタデータをオーバーライドします。</summary>
      <param name="forType" vsli:raw="The type where this dependency property is inherited and where the provided alternate metadata will be applied.">この依存関係プロパティが継承され、指定した代替メタデータが適用される型。</param>
      <param name="typeMetadata" vsli:raw="The metadata to apply to the dependency property on the overriding type.">オーバーライドする型の依存関係プロパティに適用するメタデータ。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).">読み取り専用の依存関係プロパティでメタデータをオーバーライドしようとしました (このシグネチャを使用してこの操作を行うことはできません)。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Metadata was already established for the dependency property as it exists on the provided type.">指定した型に存在する場合のメタデータが、この依存関係プロパティに対して既に確立されています。</exception>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)">
      <summary vsli:raw="Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration. You must pass the &lt;see cref=&quot;T:System.Windows.DependencyPropertyKey&quot; /&gt; for the read-only dependency property to avoid raising an exception.">指定した型のインスタンスに存在する場合に代替メタデータを読み取り専用の依存関係プロパティに提供し、依存関係プロパティの最初の登録時に指定したメタデータをオーバーライドします。 例外の発生を防ぐために、読み取り専用の依存関係プロパティに <see cref="T:System.Windows.DependencyPropertyKey" /> を渡す必要があります。</summary>
      <param name="forType" vsli:raw="The type where this dependency property is inherited and where the provided alternate metadata will be applied.">この依存関係プロパティが継承され、指定した代替メタデータが適用される型。</param>
      <param name="typeMetadata" vsli:raw="The metadata to apply to the dependency property on the overriding type.">オーバーライドする型の依存関係プロパティに適用するメタデータ。</param>
      <param name="key" vsli:raw="The access key for a read-only dependency property.">読み取り専用の依存関係プロパティのアクセス キー。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)">
      <summary vsli:raw="Registers a dependency property with the specified property name, property type, and owner type.">プロパティ名、プロパティ型、所有者型を指定して、依存関係プロパティを登録します。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register. The name must be unique within the registration namespace of the owner type.">登録する依存関係プロパティの名前。 名前は、所有者型の登録名前空間内で一意である必要があります。</param>
      <param name="propertyType" vsli:raw="The type of the property.">プロパティの型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">依存関係プロパティを登録する所有者型。</param>
      <returns vsli:raw="A dependency property identifier that should be used to set the value of a &lt;see langword=&quot;public static readonly&quot; /&gt; field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.">クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary vsli:raw="Registers a dependency property with the specified property name, property type, owner type, and property metadata.">プロパティ名、プロパティの型、所有者の型、プロパティ メタデータを指定して、依存関係プロパティを登録します。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">登録する依存関係プロパティの名前。</param>
      <param name="propertyType" vsli:raw="The type of the property.">プロパティの型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">依存関係プロパティを登録する所有者型。</param>
      <param name="typeMetadata" vsli:raw="Property metadata for the dependency property.">依存関係プロパティのプロパティ メタデータ。</param>
      <returns vsli:raw="A dependency property identifier that should be used to set the value of a &lt;see langword=&quot;public static readonly&quot; /&gt; field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.">クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary vsli:raw="Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.">プロパティ名、プロパティ型、所有者型、プロパティ メタデータ、およびプロパティの値検証コールバックを指定して、依存関係プロパティを登録します。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">登録する依存関係プロパティの名前。</param>
      <param name="propertyType" vsli:raw="The type of the property.">プロパティの型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">依存関係プロパティを登録する所有者型。</param>
      <param name="typeMetadata" vsli:raw="Property metadata for the dependency property.">依存関係プロパティのプロパティ メタデータ。</param>
      <param name="validateValueCallback" vsli:raw="A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるコールバックへの参照。</param>
      <returns vsli:raw="A dependency property identifier that should be used to set the value of a &lt;see langword=&quot;public static readonly&quot; /&gt; field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.">クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
      <summary vsli:raw="Registers an attached property with the specified property name, property type, and owner type.">プロパティ名、プロパティ型、および所有者型を指定して、添付プロパティを登録します。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">登録する依存関係プロパティの名前。</param>
      <param name="propertyType" vsli:raw="The type of the property.">プロパティの型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">依存関係プロパティを登録する所有者型。</param>
      <returns vsli:raw="A dependency property identifier that should be used to set the value of a &lt;see langword=&quot;public static readonly&quot; /&gt; field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.">クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary vsli:raw="Registers an attached property with the specified property name, property type, owner type, and property metadata.">プロパティ名、プロパティの型、所有者の型、およびプロパティ メタデータを指定して、アタッチされるプロパティを登録します。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">登録する依存関係プロパティの名前。</param>
      <param name="propertyType" vsli:raw="The type of the property.">プロパティの型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">依存関係プロパティを登録する所有者型。</param>
      <param name="defaultMetadata" vsli:raw="Property metadata for the dependency property. This can include the default value as well as other characteristics.">依存関係プロパティのプロパティ メタデータ。 ここには、既定値などの特性を含めることができます。</param>
      <returns vsli:raw="A dependency property identifier that should be used to set the value of a &lt;see langword=&quot;public static readonly&quot; /&gt; field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.">クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary vsli:raw="Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.">プロパティ型、所有者型、プロパティ メタデータ、および値の検証コールバックを指定して、添付プロパティを登録します。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">登録する依存関係プロパティの名前。</param>
      <param name="propertyType" vsli:raw="The type of the property.">プロパティの型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">依存関係プロパティを登録する所有者型。</param>
      <param name="defaultMetadata" vsli:raw="Property metadata for the dependency property. This can include the default value as well as other characteristics.">依存関係プロパティのプロパティ メタデータ。 ここには、既定値などの特性を含めることができます。</param>
      <param name="validateValueCallback" vsli:raw="A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるコールバックへの参照。</param>
      <returns vsli:raw="A dependency property identifier that should be used to set the value of a &lt;see langword=&quot;public static readonly&quot; /&gt; field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.">クラス内の <see langword="public static readonly" /> フィールドの値を設定するために使用する依存関係プロパティ識別子。 この識別子は、後で依存関係プロパティを参照する際に使用されます。たとえば、依存関係プロパティの値をプログラムで設定したり、メタデータを取得したりする操作で使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary vsli:raw="Registers a read-only attached property, with the specified property type, owner type, and property metadata.">プロパティ型、所有者型、およびプロパティ メタデータを指定して、読み取り専用の添付プロパティを登録します。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">登録する依存関係プロパティの名前。</param>
      <param name="propertyType" vsli:raw="The type of the property.">プロパティの型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">依存関係プロパティを登録する所有者型。</param>
      <param name="defaultMetadata" vsli:raw="Property metadata for the dependency property.">依存関係プロパティのプロパティ メタデータ。</param>
      <returns vsli:raw="A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.">クラスの静的な読み取り専用フィールドの値を設定するために使用する必要がある依存関係プロパティのキー。これは後で依存関係プロパティの参照に使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary vsli:raw="Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.">プロパティ型、所有者型、プロパティ メタデータ、および検証コールバックを指定して、読み取り専用の添付プロパティを登録します。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">登録する依存関係プロパティの名前。</param>
      <param name="propertyType" vsli:raw="The type of the property.">プロパティの型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">依存関係プロパティを登録する所有者型。</param>
      <param name="defaultMetadata" vsli:raw="Property metadata for the dependency property.">依存関係プロパティのプロパティ メタデータ。</param>
      <param name="validateValueCallback" vsli:raw="A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるユーザー作成のコールバックへの参照。</param>
      <returns vsli:raw="A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.">クラスの静的な読み取り専用フィールドの値を設定するために使用する必要があり、依存関係プロパティの参照に使用される、依存関係プロパティのキー。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary vsli:raw="Registers a read-only dependency property, with the specified property type, owner type, and property metadata.">プロパティ型、所有者型、プロパティ メタデータを指定して、読み取り専用の依存関係プロパティを登録します。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">登録する依存関係プロパティの名前。</param>
      <param name="propertyType" vsli:raw="The type of the property.">プロパティの型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">依存関係プロパティを登録する所有者型。</param>
      <param name="typeMetadata" vsli:raw="Property metadata for the dependency property.">依存関係プロパティのプロパティ メタデータ。</param>
      <returns vsli:raw="A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.">クラスの静的な読み取り専用フィールドの値を設定するために使用する必要があり、依存関係プロパティの参照に使用される、依存関係プロパティのキー。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary vsli:raw="Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.">プロパティ型、所有者型、プロパティ メタデータ、および検証コールバックを指定して、読み取り専用の依存関係プロパティを登録します。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">登録する依存関係プロパティの名前。</param>
      <param name="propertyType" vsli:raw="The type of the property.">プロパティの型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">依存関係プロパティを登録する所有者型。</param>
      <param name="typeMetadata" vsli:raw="Property metadata for the dependency property.">依存関係プロパティのプロパティ メタデータ。</param>
      <param name="validateValueCallback" vsli:raw="A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.">通常の型検証に加えて、依存関係プロパティ値のカスタム検証を実行する必要があるユーザー作成のコールバックへの参照。</param>
      <returns vsli:raw="A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.">クラスの静的な読み取り専用フィールドの値を設定するために使用する必要がある依存関係プロパティのキー。これは後で依存関係プロパティの参照に使用されます。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.ToString">
      <summary vsli:raw="Returns the string representation of the dependency property.">依存関係プロパティの文字列表現を返します。</summary>
      <returns vsli:raw="The string representation of the dependency property.">依存関係プロパティの文字列表現。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.DefaultMetadata">
      <summary vsli:raw="Gets the default metadata of the dependency property.">依存関係プロパティの既定のメタデータを取得します。</summary>
      <returns vsli:raw="The default metadata of the dependency property.">依存関係プロパティの既定のメタデータ。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.GlobalIndex">
      <summary vsli:raw="Gets an internally generated value that uniquely identifies the dependency property.">依存関係プロパティを一意に識別する内部的に生成された値を取得します。</summary>
      <returns vsli:raw="A unique numeric identifier.">一意の数値識別子。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.Name">
      <summary vsli:raw="Gets the name of the dependency property.">依存関係プロパティの名前を取得します。</summary>
      <returns vsli:raw="The name of the property.">プロパティの名前。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.OwnerType">
      <summary vsli:raw="Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.">依存関係プロパティをプロパティ システムに登録したオブジェクト、または自身をプロパティの所有者として追加したオブジェクトの型を取得します。</summary>
      <returns vsli:raw="The type of the object that registered the property or added itself as owner of the property.">プロパティを登録したオブジェクト、または自身をプロパティの所有者として追加したオブジェクトの型。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.PropertyType">
      <summary vsli:raw="Gets the type that the dependency property uses for its value.">依存関係プロパティの値の型を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the property value.">プロパティ値の <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the dependency property identified by this &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; instance is a read-only dependency property.">この <see cref="T:System.Windows.DependencyProperty" /> インスタンスによって識別される依存関係プロパティが読み取り専用の依存関係プロパティかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dependency property is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">依存関係プロパティが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ValidateValueCallback">
      <summary vsli:raw="Gets the value validation callback for the dependency property.">依存関係プロパティの値検証コールバックを取得します。</summary>
      <returns vsli:raw="The value validation callback for this dependency property, as provided for the &lt;paramref name=&quot;validateValueCallback&quot; /&gt; parameter in the original dependency property registration.">依存関係プロパティを最初に登録するときに <paramref name="validateValueCallback" /> パラメーターで指定した、この依存関係プロパティの値検証コールバック。</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventArgs">
      <summary vsli:raw="Provides data for various property changed events. Typically these events report effective value changes in the value of a read-only dependency property. Another usage is as part of a &lt;see cref=&quot;T:System.Windows.PropertyChangedCallback&quot; /&gt; implementation.">さまざまなプロパティ変更イベントにデータを提供します。 通常、これらのイベントは、読み取り専用の依存関係プロパティの有効値の変更を報告します。 もう 1 つの用途は、<see cref="T:System.Windows.PropertyChangedCallback" /> 実装の一部として使用することです。</summary>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; class.">
        <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="property" vsli:raw="The identifier for the dependency property that changed.">変更された依存関係プロパティの識別子。</param>
      <param name="oldValue" vsli:raw="The value of the property before the change reported by the relevant event or state change.">関連イベントまたは状態変更によって変更が報告される前のプロパティの値。</param>
      <param name="newValue" vsli:raw="The value of the property after the change reported by the relevant event or state change.">関連イベントまたは状態変更によって変更が報告された後のプロパティの値。</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
      <summary vsli:raw="Determines whether the provided object is equivalent to the current &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt;.">提供されたオブジェクトが現在の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> と等価であるかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The object to compare to the current &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt;.">現在の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> と比較するオブジェクトです。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the provided object is equivalent to the current &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">提供されたオブジェクトが現在の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> と等価である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary vsli:raw="Determines whether the provided &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt;.">提供された <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> が現在の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> と等価であるかどうかを判断します。</summary>
      <param name="args" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; to compare to the current &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt;.">現在の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> と比較する <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the provided &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">提供された <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> が現在の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> と等価である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
      <summary vsli:raw="Gets a hash code  for this &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt;.">この <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> のハッシュ コードを取得します。</summary>
      <returns vsli:raw="A signed 32-bit integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; objects have the same value.">指定した 2 つの <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> オブジェクトの値が同一かどうかを判断します。</summary>
      <param name="left" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; to compare.">比較対象となる、最初の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <param name="right" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; to compare.">比較対象となる 2 番目の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; instances are equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つの <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> インスタンスが等価である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; objects are different.">指定した 2 つの <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> オブジェクトが異なっているどうかを判断します。</summary>
      <param name="left" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; to compare.">比較対象となる、最初の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <param name="right" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; to compare.">比較対象となる 2 番目の <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; instances are different; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">2 つの <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> インスタンスが異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
      <summary vsli:raw="Gets the value of the property after the change.">変更後のプロパティの値を取得します。</summary>
      <returns vsli:raw="The property value after the change.">変更後のプロパティの値。</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
      <summary vsli:raw="Gets the value of the property before the change.">変更前のプロパティの値を取得します。</summary>
      <returns vsli:raw="The property value before the change.">変更前のプロパティの値。</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
      <summary vsli:raw="Gets the identifier for the dependency property where the value change occurred.">値が変更された依存関係プロパティの識別子を取得します。</summary>
      <returns vsli:raw="The identifier field of the dependency property where the value change occurred.">値が変更された依存関係プロパティの識別子フィールド。</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle events raised when a &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; is changed on a particular &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; implementation.">
        <see cref="T:System.Windows.DependencyProperty" /> が特定の <see cref="T:System.Windows.DependencyObject" /> 実装で変更された場合に発生するイベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="The event data.">イベントのデータ。</param>
    </member>
    <member name="T:System.Windows.DependencyPropertyKey">
      <summary vsli:raw="Provides a dependency property identifier for limited write access to a read-only dependency property.">読み取り専用の依存関係プロパティへの制限された書き込みアクセスに必要な依存関係プロパティ識別子を提供します。</summary>
    </member>
    <member name="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary vsli:raw="Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.">この依存関係プロパティ識別子によって表される読み取り専用の依存関係プロパティのメタデータをオーバーライドします。</summary>
      <param name="forType" vsli:raw="The type on which this dependency property exists and metadata should be overridden.">この依存関係プロパティが存在し、メタデータをオーバーライドする必要がある型。</param>
      <param name="typeMetadata" vsli:raw="Metadata supplied for this type.">この型に対して提供されるメタデータ。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempted metadata override on a read-write dependency property (cannot be done using this signature).">読み取り/書き込み用の依存関係プロパティでメタデータをオーバーライドしようとしました (このシグネチャを使用してオーバーライドすることはできません)。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Metadata was already established for the property as it exists on the provided type.">提供された型に存在するので、プロパティのメタデータは既に確立されています。</exception>
    </member>
    <member name="P:System.Windows.DependencyPropertyKey.DependencyProperty">
      <summary vsli:raw="Gets the dependency property identifier associated with this specialized read-only dependency property identifier.">この特殊な読み取り専用依存関係プロパティ識別子に関連付けられている依存関係プロパティ識別子を取得します。</summary>
      <returns vsli:raw="The relevant dependency property identifier.">関連する依存関係プロパティ識別子。</returns>
    </member>
    <member name="T:System.Windows.Expression">
      <summary vsli:raw="This type supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.">この型は、Windows Presentation Foundation (WPF) インフラストラクチャをサポートしますが、独自に作成したコードから直接使用するためのものではありません。</summary>
    </member>
    <member name="T:System.Windows.ExpressionConverter">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.Windows.Expression&quot; /&gt; to and from other types.">
        <see cref="T:System.Windows.Expression" /> のインスタンスと他の型との間の変換を行います。</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.ExpressionConverter&quot; /&gt; class.">
        <see cref="T:System.Windows.ExpressionConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert from a source object to an &lt;see cref=&quot;T:System.Windows.Expression&quot; /&gt; object.">このコンバーターが、変換元のオブジェクトを <see cref="T:System.Windows.Expression" /> オブジェクトに変換できるかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">変換前の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">常に <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an &lt;see cref=&quot;T:System.Windows.Expression&quot; /&gt; object to a specific destination type.">このコンバーターが、<see cref="T:System.Windows.Expression" /> オブジェクトを特定の型に変換できるかどうかを示す値を返します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">常に <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the provided value to the &lt;see cref=&quot;T:System.Windows.Expression&quot; /&gt; type.">指定した値を <see cref="T:System.Windows.Expression" /> 型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <returns vsli:raw="Always throws an exception and returns &lt;see langword=&quot;null&quot; /&gt;.">常に例外をスローし、<see langword="null" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the provided &lt;see cref=&quot;T:System.Windows.Expression&quot; /&gt; object to the specified type.">指定した <see cref="T:System.Windows.Expression" /> オブジェクトを指定した型に変換します。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">書式指定コンテキストを提供する <see cref="T:System.ComponentModel.ITypeDescriptorContext" />。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">現在のカルチャとして使用する <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">変換後の型を表す <see cref="T:System.Type" />。</param>
      <returns vsli:raw="Always throws an exception and returns &lt;see langword=&quot;null&quot; /&gt;.">常に例外をスローし、<see langword="null" /> を返します。</returns>
    </member>
    <member name="T:System.Windows.Freezable">
      <summary vsli:raw="Defines an object that has a modifiable state and a read-only (frozen) state. Classes that derive from &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; provide detailed change notification, can be made immutable, and can clone themselves.">変更可能な状態と読み取り専用 (固定) の状態を持つオブジェクトを定義します。 <see cref="T:System.Windows.Freezable" /> から派生するクラスは、詳細な変更通知を提供し、変更不可にすることが可能で、自身のクローンを作成できます。</summary>
    </member>
    <member name="E:System.Windows.Freezable.Changed">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; or an object it contains is modified.">
        <see cref="T:System.Windows.Freezable" />、またはこれに含まれているオブジェクトが変更されると発生します。</summary>
    </member>
    <member name="M:System.Windows.Freezable.#ctor">
      <summary vsli:raw="Initializes a new instance of a &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; derived class.">
        <see cref="T:System.Windows.Freezable" /> 派生クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Freezable.Clone">
      <summary vsli:raw="Creates a modifiable clone of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt;, making deep copies of the object's values. When copying the object's dependency properties, this method copies expressions (which might no longer resolve) but not animations or their current values.">
        <see cref="T:System.Windows.Freezable" /> の変更可能な複製を作成し、オブジェクトの値の詳細コピーを作成します。 このメソッドは、オブジェクトの依存関係プロパティをコピーするときに式をコピーしますが (コピーされた式は解決されなくなる場合があります)、アニメーションやその現在の値はコピーしません。</summary>
      <returns vsli:raw="A modifiable clone of the current object. The cloned object's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt; even if the source's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;.">現在のオブジェクトの変更可能な複製。 複製されたオブジェクトの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティは、ソースの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティが <see langword="false" /> の場合でも、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)">
      <summary vsli:raw="Makes the instance a clone (deep copy) of the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; using base (non-animated) property values.">基本 (アニメーション化されていない) プロパティ値を使用して、インスタンスを、指定した <see cref="T:System.Windows.Freezable" /> の複製 (詳細コピー) にします。</summary>
      <param name="sourceFreezable" vsli:raw="The object to clone.">複製する対象のオブジェクト。</param>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValue">
      <summary vsli:raw="Creates a modifiable clone (deep copy) of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; using its current values.">
        <see cref="T:System.Windows.Freezable" /> の現在の値を使用して、変更可能な複製 (詳細コピー) を作成します。</summary>
      <returns vsli:raw="A modifiable clone of the current object. The cloned object's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt; even if the source's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;.">現在のオブジェクトの変更可能な複製。 複製されたオブジェクトの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティは、ソースの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティが <see langword="false" /> の場合でも、<see langword="true" /> です。</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary vsli:raw="Makes the instance a modifiable clone (deep copy) of the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; using current property values.">現在のプロパティ値を使用して、インスタンスを、指定した <see cref="T:System.Windows.Freezable" /> の変更可能な複製 (詳細コピー) にします。</summary>
      <param name="sourceFreezable" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; to be cloned.">複製する <see cref="T:System.Windows.Freezable" />。</param>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstance">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; class.">
        <see cref="T:System.Windows.Freezable" /> クラスの新しいインスタンスを初期化します。</summary>
      <returns vsli:raw="The new instance.">新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstanceCore">
      <summary vsli:raw="When implemented in a derived class, creates a new instance of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; derived class.">派生クラスで実装された場合、<see cref="T:System.Windows.Freezable" /> 派生クラスの新しいインスタンスを作成します。</summary>
      <returns vsli:raw="The new instance.">新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Freezable.Freeze">
      <summary vsli:raw="Makes the current object unmodifiable and sets its &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">現在のオブジェクトを変更不可能にし、その <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティを <see langword="true" /> に設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; cannot be made unmodifiable.">
        <see cref="T:System.Windows.Freezable" /> を変更不可能にすることはできません。</exception>
    </member>
    <member name="M:System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)">
      <summary vsli:raw="If the &lt;paramref name=&quot;isChecking&quot; /&gt; parameter is &lt;see langword=&quot;true&quot; /&gt;, this method indicates whether the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; can be made unmodifiable. If the &lt;paramref name=&quot;isChecking&quot; /&gt; parameter is &lt;see langword=&quot;false&quot; /&gt;, this method attempts to make the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; unmodifiable and indicates whether the operation succeeded.">
        <paramref name="isChecking" /> パラメーターが <see langword="true" /> の場合、このメソッドは、指定した <see cref="T:System.Windows.Freezable" /> を変更不可能な状態にできるかどうかを示します。 <paramref name="isChecking" /> パラメーターが <see langword="false" /> の場合、このメソッドは、指定した <see cref="T:System.Windows.Freezable" /> を変更不可能な状態にすることを試み、操作が成功したかどうかを示します。</summary>
      <param name="freezable" vsli:raw="The object to check or make unmodifiable. If &lt;paramref name=&quot;isChecking&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, the object is checked to determine whether it can be made unmodifiable. If &lt;paramref name=&quot;isChecking&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, the object is made unmodifiable, if possible.">確認する対象のオブジェクト、または変更不可能な状態にするオブジェクト。 <paramref name="isChecking" /> が <see langword="true" /> の場合、このオブジェクトを確認して、変更不可能な状態にできるかどうかを判断します。 <paramref name="isChecking" /> が <see langword="false" /> の場合、可能であればオブジェクトを変更不可能な状態にします。</param>
      <param name="isChecking" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return an indication of whether the object can be frozen (without actually freezing it); &lt;see langword=&quot;false&quot; /&gt; to actually freeze the object.">オブジェクトを固定できるかどうかを示す (実際には固定しない) 場合は <see langword="true" />。実際にオブジェクトを固定する場合は <see langword="false" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="When &lt;paramref name=&quot;isChecking&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, the attempt to make &lt;paramref name=&quot;freezable&quot; /&gt; unmodifiable was unsuccessful; the object is now in an unknown state (it might be partially frozen).">
        <paramref name="isChecking" /> が <see langword="false" /> のときに <paramref name="freezable" /> を変更不可能な状態にしようとして失敗した場合、このオブジェクトは不明な状態 (部分的に固定の場合もあります) になっています。</exception>
      <returns vsli:raw="If &lt;paramref name=&quot;isChecking&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, this method returns &lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; can be made unmodifiable, or &lt;see langword=&quot;false&quot; /&gt; if it cannot be made unmodifiable. If &lt;paramref name=&quot;isChecking&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, this method returns &lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; is now unmodifiable, or &lt;see langword=&quot;false&quot; /&gt; if it cannot be made unmodifiable.">
        <paramref name="isChecking" /> が <see langword="true" /> のときに、指定した <see cref="T:System.Windows.Freezable" /> を変更不可能な状態にできる場合、このメソッドは <see langword="true" /> を返します。変更不可能な状態にできない場合は <see langword="false" /> を返します。 <paramref name="isChecking" /> が <see langword="false" /> のときに、指定した <see cref="T:System.Windows.Freezable" /> が変更不可能な状態になっている場合、このメソッドは <see langword="true" /> を返します。変更不可能な状態にできない場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Freezable.FreezeCore(System.Boolean)">
      <summary vsli:raw="Makes the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; object unmodifiable or tests whether it can be made unmodifiable.">
        <see cref="T:System.Windows.Freezable" /> オブジェクトを変更不可能な状態にするか、変更不可能な状態にできるかどうかをテストします。</summary>
      <param name="isChecking" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return an indication of whether the object can be frozen (without actually freezing it); &lt;see langword=&quot;false&quot; /&gt; to actually freeze the object.">オブジェクトを固定できるかどうかを示す (実際には固定しない) 場合は <see langword="true" />。実際にオブジェクトを固定する場合は <see langword="false" />。</param>
      <returns vsli:raw="If &lt;paramref name=&quot;isChecking&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, this method returns &lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; can be made unmodifiable, or &lt;see langword=&quot;false&quot; /&gt; if it cannot be made unmodifiable. If &lt;paramref name=&quot;isChecking&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, this method returns &lt;see langword=&quot;true&quot; /&gt; if the if the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; is now unmodifiable, or &lt;see langword=&quot;false&quot; /&gt; if it cannot be made unmodifiable.">
        <paramref name="isChecking" /> が <see langword="true" /> のときに、<see cref="T:System.Windows.Freezable" /> を変更不可能な状態にできる場合、このメソッドは <see langword="true" /> を返します。変更不可能な状態にできない場合は <see langword="false" /> を返します。 <paramref name="isChecking" /> が <see langword="false" /> のときに、指定した <see cref="T:System.Windows.Freezable" /> が変更不可能な状態になっている場合、このメソッドは <see langword="true" /> を返します。変更不可能な状態にできない場合は <see langword="false" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozen">
      <summary vsli:raw="Creates a frozen copy of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt;, using base (non-animated) property values. Because the copy is frozen, any frozen sub-objects are copied by reference.">基本プロパティ値 (アニメーション化されていない値) を使用して、<see cref="T:System.Windows.Freezable" /> の 固定されたコピーを作成します。 コピーが固定されているため、参照によって任意の固定されたサブオブジェクトがコピーされます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; cannot be frozen because it contains expressions or animated properties.">
        <see cref="T:System.Windows.Freezable" /> は、式またはアニメーション化されたプロパティを格納していないため、固定できません。</exception>
      <returns vsli:raw="A frozen copy of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt;. The copy's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property is set to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Windows.Freezable" /> の固定されたコピー。 コピーの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティは、<see langword="true" /> に設定されます。</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)">
      <summary vsli:raw="Makes the instance a frozen clone of the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; using base (non-animated) property values.">基本プロパティ値 (アニメーション化されていない値) を使用して、インスタンスを、指定した <see cref="T:System.Windows.Freezable" /> の固定された複製にします。</summary>
      <param name="sourceFreezable" vsli:raw="The instance to copy.">コピーするインスタンス。</param>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozen">
      <summary vsli:raw="Creates a frozen copy of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; using current property values. Because the copy is frozen, any frozen sub-objects are copied by reference.">現在のプロパティ値を使用して、<see cref="T:System.Windows.Freezable" /> の固定されたコピーを作成します。 コピーが固定されているため、参照によって任意の固定されたサブオブジェクトがコピーされます。</summary>
      <returns vsli:raw="A frozen copy of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt;. The copy's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property is set to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Windows.Freezable" /> の固定されたコピー。 コピーの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティは、<see langword="true" /> に設定されます。</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary vsli:raw="Makes the current instance a frozen clone of the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt;. If the object has animated dependency properties, their current animated values are copied.">現在のインスタンスを、指定した <see cref="T:System.Windows.Freezable" /> の固定された複製にします。 オブジェクトに、アニメーション化された依存関係プロパティが存在する場合、現在アニメーション化されている値がコピーされます。</summary>
      <param name="sourceFreezable" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; to copy and freeze.">コピーし、固定する <see cref="T:System.Windows.Freezable" />。</param>
    </member>
    <member name="M:System.Windows.Freezable.OnChanged">
      <summary vsli:raw="Called when the current &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; object is modified.">現在の <see cref="T:System.Windows.Freezable" /> オブジェクトの変更時に呼び出されます。</summary>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary vsli:raw="Ensures that appropriate context pointers are established for a &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; data member that has just been set.">設定されたばかりの <see cref="T:System.Windows.DependencyObjectType" /> データ メンバーに対して、適切なコンテキスト ポインターが確立されていることを確認します。</summary>
      <param name="oldValue" vsli:raw="The previous value of the data member.">データ メンバーの以前の値。</param>
      <param name="newValue" vsli:raw="The current value of the data member.">データ メンバーの現在の値。</param>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
      <summary vsli:raw="This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.">このメンバーは、Windows Presentation Foundation (WPF) インフラストラクチャをサポートしますが、独自に作成したコードから直接使用するためのものではありません。</summary>
      <param name="oldValue" vsli:raw="The previous value of the data member.">データ メンバーの以前の値。</param>
      <param name="newValue" vsli:raw="The current value of the data member.">データ メンバーの現在の値。</param>
      <param name="property" vsli:raw="The property that changed.">変更されたプロパティ。</param>
    </member>
    <member name="M:System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary vsli:raw="Overrides the &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; implementation of &lt;see cref=&quot;M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)&quot; /&gt; to also invoke any &lt;see cref=&quot;E:System.Windows.Freezable.Changed&quot; /&gt; handlers in response to a changing dependency property of type &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt;.">
        <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /> の <see cref="T:System.Windows.DependencyObject" /> 実装をオーバーライドして、さらに型 <see cref="T:System.Windows.Freezable" /> の変化する依存関係プロパティへの応答として任意の <see cref="E:System.Windows.Freezable.Changed" /> ハンドラーも呼び出します。</summary>
      <param name="e" vsli:raw="Event data that contains information about which property changed, and its old and new values.">変更されたプロパティ、およびその変更前と変更後の値に関する情報を格納するイベント データ。</param>
    </member>
    <member name="M:System.Windows.Freezable.ReadPreamble">
      <summary vsli:raw="Ensures that the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; is being accessed from a valid thread. Inheritors of &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; must call this method at the beginning of any API that reads data members that are not dependency properties.">
        <see cref="T:System.Windows.Freezable" /> が有効なスレッドからアクセスされていることを確認します。 <see cref="T:System.Windows.Freezable" /> の継承側は、依存関係プロパティでないデータ メンバーを読み取る任意の API の開始時に、このメソッドを呼び出す必要があります。</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePostscript">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Windows.Freezable.Changed&quot; /&gt; event for the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; and invokes its &lt;see cref=&quot;M:System.Windows.Freezable.OnChanged&quot; /&gt; method. Classes that derive from &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; should call this method at the end of any API that modifies class members that are not stored as dependency properties.">
        <see cref="T:System.Windows.Freezable" /> の <see cref="E:System.Windows.Freezable.Changed" /> イベントを発生させ、その <see cref="M:System.Windows.Freezable.OnChanged" /> メソッドを呼び出します。 <see cref="T:System.Windows.Freezable" /> から派生するクラスは、依存関係プロパティとして格納されていないクラス メンバーを変更するすべての API の終了時に、このメソッドを呼び出す必要があります。</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePreamble">
      <summary vsli:raw="Verifies that the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; is not frozen and that it is being accessed from a valid threading context. &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; inheritors should call this method at the beginning of any API that writes to data members that are not dependency properties.">
        <see cref="T:System.Windows.Freezable" /> が固定されておらず、有効なスレッド コンテキストからアクセスされていることを確認します。 <see cref="T:System.Windows.Freezable" /> の継承側は、依存関係プロパティでないデータ メンバーに書き込む任意の API の開始時に、このメソッドを呼び出す必要があります。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; instance is frozen and cannot have its members written to.">
        <see cref="T:System.Windows.Freezable" /> インスタンスは固定されており、そのメンバーに書き込むことはできません。</exception>
    </member>
    <member name="P:System.Windows.Freezable.CanFreeze">
      <summary vsli:raw="Gets a value that indicates whether the object can be made unmodifiable.">オブジェクトを変更不可能にできるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object can be made unmodifiable or is already unmodifiable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">現在のオブジェクトを変更不可能にできる場合、または既に変更不可能になっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Freezable.IsFrozen">
      <summary vsli:raw="Gets a value that indicates whether the object is currently modifiable.">オブジェクトが変更可能かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is frozen and cannot be modified; &lt;see langword=&quot;false&quot; /&gt; if the object can be modified.">オブジェクトが固定されており、変更できない場合は、<see langword="true" />。オブジェクトを変更できる場合は、<see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Input.FocusNavigationDirection">
      <summary vsli:raw="Specifies the direction within a user interface (UI) in which a desired focus change request is attempted. The direction is either based on tab order or by relative direction in layout.">目的のフォーカス変更要求を試みる、ユーザー インターフェイス (UI) 内での方向を指定します。 指定できる方向は、タブ オーダーに基づく方向か、またはレイアウトでの相対的な方向です。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Down">
      <summary vsli:raw="Move focus to another focusable element downwards from the currently focused element.">現在フォーカスが設定されている要素の下側にあってフォーカスを設定できる別の要素に、フォーカスを移動します。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.First">
      <summary vsli:raw="Move focus to the first focusable element in tab order. Not supported for &lt;see cref=&quot;M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)&quot; /&gt;.">タブ オーダー内でフォーカスを設定できる最初の要素にフォーカスを移動します。 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> ではサポートされていません。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Last">
      <summary vsli:raw="Move focus to the last focusable element in tab order. Not supported for &lt;see cref=&quot;M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)&quot; /&gt;.">タブ オーダー内でフォーカスを設定できる最後の要素にフォーカスを移動します。 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> ではサポートされていません。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Left">
      <summary vsli:raw="Move focus to another focusable element to the left of the currently focused element.">現在フォーカスが設定されている要素の左側にあってフォーカスを設定できる別の要素に、フォーカスを移動します。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Next">
      <summary vsli:raw="Move focus to the next focusable element in tab order. Not supported for &lt;see cref=&quot;M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)&quot; /&gt;.">タブ オーダー内でフォーカスを設定できる次の要素にフォーカスを移動します。 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> ではサポートされていません。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Previous">
      <summary vsli:raw="Move focus to the previous focusable element in tab order. Not supported for &lt;see cref=&quot;M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)&quot; /&gt;.">タブ オーダー内でフォーカスを設定できる前の要素にフォーカスを移動します。 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" /> ではサポートされていません。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Right">
      <summary vsli:raw="Move focus to another focusable element to the right of the currently focused element.">現在フォーカスが設定されている要素の右側にあってフォーカスを設定できる別の要素に、フォーカスを移動します。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Up">
      <summary vsli:raw="Move focus to another focusable element upwards from the currently focused element.">現在フォーカスが設定されている要素の上側にあってフォーカスを設定できる別の要素に、フォーカスを移動します。</summary>
    </member>
    <member name="T:System.Windows.Input.Key">
      <summary vsli:raw="Specifies the possible key values on a keyboard.">キーボードで使えるキー値を指定します。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.A">
      <summary vsli:raw="The A key.">A キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC1">
      <summary vsli:raw="The ABNT_C1 (Brazilian) key.">ABNT_C1 (ブラジル) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC2">
      <summary vsli:raw="The ABNT_C2 (Brazilian) key.">ABNT_C2 (ブラジル) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Add">
      <summary vsli:raw="The Add key.">加算記号 (+) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Apps">
      <summary vsli:raw="The Application key (Microsoft Natural Keyboard). Also known as the Menu key, as it displays an application-specific context menu.">アプリケーション キー (Microsoft Natural Keyboard)。 メニュー キーとも呼ばれ、アプリケーション固有のコンテキスト メニューを表示します。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Attn">
      <summary vsli:raw="The ATTN key.">Attn キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.B">
      <summary vsli:raw="The B key.">B キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Back">
      <summary vsli:raw="The Backspace key.">BackSpace キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserBack">
      <summary vsli:raw="The Browser Back key.">ブラウザーの戻るキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserFavorites">
      <summary vsli:raw="The Browser Favorites key.">ブラウザーのお気に入りキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserForward">
      <summary vsli:raw="The Browser Forward key.">ブラウザーの進むキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserHome">
      <summary vsli:raw="The Browser Home key.">ブラウザーのホーム キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserRefresh">
      <summary vsli:raw="The Browser Refresh key.">ブラウザーの更新キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserSearch">
      <summary vsli:raw="The Browser Search key.">ブラウザーの検索キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserStop">
      <summary vsli:raw="The Browser Stop key.">ブラウザーの中止キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.C">
      <summary vsli:raw="The C key.">C キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Cancel">
      <summary vsli:raw="The Cancel key.">Cancel キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Capital">
      <summary vsli:raw="The Caps Lock key.">Caps Lock キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CapsLock">
      <summary vsli:raw="The Caps Lock key.">Caps Lock キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Clear">
      <summary vsli:raw="The Clear key.">Clear キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CrSel">
      <summary vsli:raw="The CRSEL key.">Crsel キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D">
      <summary vsli:raw="The D key.">D キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D0">
      <summary vsli:raw="The 0 (zero) key.">0 (ゼロ) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D1">
      <summary vsli:raw="The 1 (one) key.">1 (いち) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D2">
      <summary vsli:raw="The 2 key.">2 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D3">
      <summary vsli:raw="The 3 key.">3 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D4">
      <summary vsli:raw="The 4 key.">4 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D5">
      <summary vsli:raw="The 5 key.">5 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D6">
      <summary vsli:raw="The 6 key.">6 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D7">
      <summary vsli:raw="The 7 key.">7 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D8">
      <summary vsli:raw="The 8 key.">8 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D9">
      <summary vsli:raw="The 9 key.">9 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeAlphanumeric">
      <summary vsli:raw="The DBE_ALPHANUMERIC key.">DBE_ALPHANUMERIC キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeCodeInput">
      <summary vsli:raw="The DBE_CODEINPUT key.">DBE_CODEINPUT キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDbcsChar">
      <summary vsli:raw="The DBE_DBCSCHAR key.">DBE_DBCSCHAR キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDetermineString">
      <summary vsli:raw="The DBE_DETERMINESTRING key.">DBE_DETERMINESTRING キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterDialogConversionMode">
      <summary vsli:raw="The DBE_ENTERDLGCONVERSIONMODE key.">DBE_ENTERDLGCONVERSIONMODE キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterImeConfigureMode">
      <summary vsli:raw="The DBE_ENTERIMECONFIGMODE key.">DBE_ENTERIMECONFIGMODE キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterWordRegisterMode">
      <summary vsli:raw="The DBE_ENTERWORDREGISTERMODE key.">DBE_ENTERWORDREGISTERMODE キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeFlushString">
      <summary vsli:raw="The DBE_FLUSHSTRING key.">DBE_FLUSHSTRING キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeHiragana">
      <summary vsli:raw="The DBE_HIRAGANA key.">DBE_HIRAGANA キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeKatakana">
      <summary vsli:raw="The DBE_KATAKANA key.">DBE_KATAKANA キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoCodeInput">
      <summary vsli:raw="The DBE_NOCODEINPUT key.">DBE_NOCODEINPUT キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoRoman">
      <summary vsli:raw="The DBE_NOROMAN key.">DBE_NOROMAN キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeRoman">
      <summary vsli:raw="The DBE_ROMAN key.">DBE_ROMAN キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeSbcsChar">
      <summary vsli:raw="The DBE_SBCSCHAR key.">DBE_SBCSCHAR キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DeadCharProcessed">
      <summary vsli:raw="The key is used with another key to create a single combined character.">このキーは、1 つの結合された文字を作成するために別のキーと一緒に使用されます。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Decimal">
      <summary vsli:raw="The Decimal key.">小数点キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Delete">
      <summary vsli:raw="The Delete key.">Delete キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Divide">
      <summary vsli:raw="The Divide key.">除算記号 (/) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Down">
      <summary vsli:raw="The Down Arrow key.">↓キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.E">
      <summary vsli:raw="The E key.">E キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.End">
      <summary vsli:raw="The End key.">End キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Enter">
      <summary vsli:raw="The Enter key.">Enter キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.EraseEof">
      <summary vsli:raw="The ERASE EOF key.">Erase Eof キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Escape">
      <summary vsli:raw="The ESC key.">Esc キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Execute">
      <summary vsli:raw="The Execute key.">Execute キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ExSel">
      <summary vsli:raw="The EXSEL key.">Exsel キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F">
      <summary vsli:raw="The F key.">F キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F1">
      <summary vsli:raw="The F1 key.">F1 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F10">
      <summary vsli:raw="The F10 key.">F10 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F11">
      <summary vsli:raw="The F11 key.">F11 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F12">
      <summary vsli:raw="The F12 key.">F12 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F13">
      <summary vsli:raw="The F13 key.">F13 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F14">
      <summary vsli:raw="The F14 key.">F14 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F15">
      <summary vsli:raw="The F15 key.">F15 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F16">
      <summary vsli:raw="The F16 key.">F16 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F17">
      <summary vsli:raw="The F17 key.">F17 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F18">
      <summary vsli:raw="The F18 key.">F18 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F19">
      <summary vsli:raw="The F19 key.">F19 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F2">
      <summary vsli:raw="The F2 key.">F2 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F20">
      <summary vsli:raw="The F20 key.">F20 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F21">
      <summary vsli:raw="The F21 key.">F21 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F22">
      <summary vsli:raw="The F22 key.">F22 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F23">
      <summary vsli:raw="The F23 key.">F23 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F24">
      <summary vsli:raw="The F24 key.">F24 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F3">
      <summary vsli:raw="The F3 key.">F3 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F4">
      <summary vsli:raw="The F4 key.">F4 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F5">
      <summary vsli:raw="The F5 key.">F5 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F6">
      <summary vsli:raw="The F6 key.">F6 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F7">
      <summary vsli:raw="The F7 key.">F7 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F8">
      <summary vsli:raw="The F8 key.">F8 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F9">
      <summary vsli:raw="The F9 key.">F9 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.FinalMode">
      <summary vsli:raw="The IME Final mode key.">IME Final モード キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.G">
      <summary vsli:raw="The G key.">G キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.H">
      <summary vsli:raw="The H key.">H キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HangulMode">
      <summary vsli:raw="The IME Hangul mode key.">IME ハングル モード キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HanjaMode">
      <summary vsli:raw="The IME Hanja mode key.">IME Hanja モード キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Help">
      <summary vsli:raw="The Help key.">Help キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Home">
      <summary vsli:raw="The Home key.">Home キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.I">
      <summary vsli:raw="The I key.">I キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeAccept">
      <summary vsli:raw="The IME Accept key.">IME Accept キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeConvert">
      <summary vsli:raw="The IME Convert key.">IME 変換キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeModeChange">
      <summary vsli:raw="The IME Mode change request.">IME モード変更要求。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeNonConvert">
      <summary vsli:raw="The IME NonConvert key.">IME 無変換キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeProcessed">
      <summary vsli:raw="A special key masking the real key being processed by an IME.">IME で処理されている実際のキーをマスクする特殊なキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Insert">
      <summary vsli:raw="The Insert key.">Insert キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.J">
      <summary vsli:raw="The J key.">J キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.JunjaMode">
      <summary vsli:raw="The IME Junja mode key.">IME Junja モード キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.K">
      <summary vsli:raw="The K key.">K キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanaMode">
      <summary vsli:raw="The IME Kana mode key.">IME かなモード キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanjiMode">
      <summary vsli:raw="The IME Kanji mode key.">IME 漢字モード キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.L">
      <summary vsli:raw="The L key.">L キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication1">
      <summary vsli:raw="The Launch Application1 key.">アプリケーション 1 の起動キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication2">
      <summary vsli:raw="The Launch Application2 key.">アプリケーション 2 の起動キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchMail">
      <summary vsli:raw="The Launch Mail key.">メールの起動キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Left">
      <summary vsli:raw="The Left Arrow key.">←キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftAlt">
      <summary vsli:raw="The left ALT key.">左 Alt キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftCtrl">
      <summary vsli:raw="The left CTRL key.">左 Ctrl キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftShift">
      <summary vsli:raw="The left Shift key.">左 Shift キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LineFeed">
      <summary vsli:raw="The Linefeed key.">Linefeed キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LWin">
      <summary vsli:raw="The left Windows logo key (Microsoft Natural Keyboard).">左 Windows ロゴ キー (Microsoft Natural Keyboard)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.M">
      <summary vsli:raw="The M key.">M キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaNextTrack">
      <summary vsli:raw="The Media Next Track key.">メディアの次のトラック キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPlayPause">
      <summary vsli:raw="The Media Play Pause key.">メディアの再生/一時停止キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPreviousTrack">
      <summary vsli:raw="The Media Previous Track key.">メディアの前のトラック キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaStop">
      <summary vsli:raw="The Media Stop key.">メディアの停止キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Multiply">
      <summary vsli:raw="The Multiply key.">乗算記号 (*) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.N">
      <summary vsli:raw="The N key.">N キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Next">
      <summary vsli:raw="The Page Down key.">Page Down キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NoName">
      <summary vsli:raw="A constant reserved for future use.">将来使用するために予約されている定数。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.None">
      <summary vsli:raw="No key pressed.">押されたキーがありません。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumLock">
      <summary vsli:raw="The Num Lock key.">Num Lock キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad0">
      <summary vsli:raw="The 0 key on the numeric keypad.">0 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad1">
      <summary vsli:raw="The 1 key on the numeric keypad.">1 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad2">
      <summary vsli:raw="The 2 key on the numeric keypad.">2 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad3">
      <summary vsli:raw="The 3 key on the numeric keypad.">3 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad4">
      <summary vsli:raw="The 4 key on the numeric keypad.">4 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad5">
      <summary vsli:raw="The 5 key on the numeric keypad.">5 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad6">
      <summary vsli:raw="The 6 key on the numeric keypad.">6 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad7">
      <summary vsli:raw="The 7 key on the numeric keypad.">7 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad8">
      <summary vsli:raw="The 8 key on the numeric keypad.">8 キー (テンキー)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad9">
      <summary vsli:raw="The 9 key on the numeric keypad.">9 キー (テンキー)</summary>
    </member>
    <member name="F:System.Windows.Input.Key.O">
      <summary vsli:raw="The O key.">O キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem1">
      <summary vsli:raw="The OEM 1 key.">OEM 1 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem102">
      <summary vsli:raw="The OEM 102 key.">OEM 102 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem2">
      <summary vsli:raw="The OEM 2 key.">OEM 2 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem3">
      <summary vsli:raw="The OEM 3 key.">OEM 3 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem4">
      <summary vsli:raw="The OEM 4 key.">OEM 4 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem5">
      <summary vsli:raw="The OEM 5 key.">OEM 5 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem6">
      <summary vsli:raw="The OEM 6 key.">OEM 6 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem7">
      <summary vsli:raw="The OEM 7 key.">OEM 7 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem8">
      <summary vsli:raw="The OEM 8 key.">OEM 8 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAttn">
      <summary vsli:raw="The OEM ATTN key.">OEM ATTN キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAuto">
      <summary vsli:raw="The OEM AUTO key.">OEM Auto キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackslash">
      <summary vsli:raw="The OEM Backslash key.">OEM 円記号キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackTab">
      <summary vsli:raw="The OEM BACKTAB key.">OEM Backtab キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemClear">
      <summary vsli:raw="The OEM Clear key.">OEM Clear キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCloseBrackets">
      <summary vsli:raw="The OEM Close Brackets key.">OEM 右角かっこキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemComma">
      <summary vsli:raw="The OEM Comma key.">OEM コンマ キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCopy">
      <summary vsli:raw="The OEM COPY key.">OEM Copy キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemEnlw">
      <summary vsli:raw="The OEM ENLW key.">OEM Enlw キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemFinish">
      <summary vsli:raw="The OEM FINISH key.">OEM Finish キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemMinus">
      <summary vsli:raw="The OEM Minus key.">OEM マイナス キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemOpenBrackets">
      <summary vsli:raw="The OEM Open Brackets key.">OEM 左角かっこキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPeriod">
      <summary vsli:raw="The OEM Period key.">OEM ピリオド キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPipe">
      <summary vsli:raw="The OEM Pipe key.">OEM パイプ キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPlus">
      <summary vsli:raw="The OEM Addition key.">OEM 加算キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuestion">
      <summary vsli:raw="The OEM Question key.">OEM 疑問符キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuotes">
      <summary vsli:raw="The OEM Quotes key.">OEM 引用符キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemSemicolon">
      <summary vsli:raw="The OEM Semicolon key.">OEM セミコロン キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemTilde">
      <summary vsli:raw="The OEM Tilde key.">OEM チルダ キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.P">
      <summary vsli:raw="The P key.">P キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pa1">
      <summary vsli:raw="The PA1 key.">PA1 キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageDown">
      <summary vsli:raw="The Page Down key.">Page Down キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageUp">
      <summary vsli:raw="The Page Up key.">Page Up キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pause">
      <summary vsli:raw="The Pause key.">Pause キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Play">
      <summary vsli:raw="The PLAY key.">Play キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Print">
      <summary vsli:raw="The Print key.">Print キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PrintScreen">
      <summary vsli:raw="The Print Screen key.">Print Screen キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Prior">
      <summary vsli:raw="The Page Up key.">Page Up キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Q">
      <summary vsli:raw="The Q key.">Q キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.R">
      <summary vsli:raw="The R key.">R キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Return">
      <summary vsli:raw="The Return key.">Return キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Right">
      <summary vsli:raw="The Right Arrow key.">→キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightAlt">
      <summary vsli:raw="The right ALT key.">右 Alt キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightCtrl">
      <summary vsli:raw="The right CTRL key.">右 Ctrl キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightShift">
      <summary vsli:raw="The right Shift key.">右 Shift キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RWin">
      <summary vsli:raw="The right Windows logo key (Microsoft Natural Keyboard).">右 Windows ロゴ キー (Microsoft Natural Keyboard)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.S">
      <summary vsli:raw="The S key.">S キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Scroll">
      <summary vsli:raw="The Scroll Lock key.">Scroll Lock キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Select">
      <summary vsli:raw="The Select key.">Select キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.SelectMedia">
      <summary vsli:raw="The Select Media key.">メディアの選択キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Separator">
      <summary vsli:raw="The Separator key.">区切り記号キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Sleep">
      <summary vsli:raw="The Computer Sleep key.">コンピューターのスリープ キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Snapshot">
      <summary vsli:raw="The Print Screen key.">Print Screen キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Space">
      <summary vsli:raw="The Spacebar key.">Space キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Subtract">
      <summary vsli:raw="The Subtract key.">減算記号 (-) キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.System">
      <summary vsli:raw="A special key masking the real key being processed as a system key.">システム キーとして処理されている実際のキーをマスクする特殊なキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.T">
      <summary vsli:raw="The T key.">T キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Tab">
      <summary vsli:raw="The Tab key.">Tab キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.U">
      <summary vsli:raw="The U key.">U キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Up">
      <summary vsli:raw="The Up Arrow key.">↑キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.V">
      <summary vsli:raw="The V key.">V キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeDown">
      <summary vsli:raw="The Volume Down key.">音量下げるキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeMute">
      <summary vsli:raw="The Volume Mute key.">音量ミュート キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeUp">
      <summary vsli:raw="The Volume Up key.">音量上げるキー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.W">
      <summary vsli:raw="The W key.">W キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.X">
      <summary vsli:raw="The X key.">X キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Y">
      <summary vsli:raw="The Y key.">Y キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Z">
      <summary vsli:raw="The Z key.">Z キー。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Zoom">
      <summary vsli:raw="The ZOOM key.">Zoom キー。</summary>
    </member>
    <member name="T:System.Windows.Input.KeyConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; object to and from other types.">
        <see cref="T:System.Windows.Input.Key" /> オブジェクトと他の型との相互変換を行います。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; class.">
        <see cref="T:System.Windows.Input.Key" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object of the specified type can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;, using the specified context.">指定したコンテキストを使用して、指定した型のオブジェクトを <see cref="T:System.Windows.Input.Key" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="sourceType" vsli:raw="The type being evaluated for conversion.">変換の評価対象となる型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;sourceType&quot; /&gt; is of type &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> の型が <paramref name="sourceType" /> の場合は <see cref="T:System.String" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; can be converted to the specified type, using the specified context.">指定したコンテキストを使用して、<see cref="T:System.Windows.Input.Key" /> のインスタンスを指定した型に変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="destinationType" vsli:raw="The type being evaluated for conversion.">変換の評価対象となる型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;destinationType&quot; /&gt; is of type &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> の型が <paramref name="destinationType" /> の場合は <see cref="T:System.String" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified object to a &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;, using the specified context.">指定したコンテキストを使用して、指定したオブジェクトから <see cref="T:System.Windows.Input.Key" /> への変換を試みます。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="culture" vsli:raw="Culture specific information.">カルチャ固有の情報。</param>
      <param name="source" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; cannot be converted.">
        <paramref name="source" /> を変換できません。</exception>
      <returns vsli:raw="The converted object.">変換後のオブジェクト。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert a &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; to the specified type, using the specified context.">指定したコンテキストを使用して、<see cref="T:System.Windows.Input.Key" /> から指定した型への変換を試みます。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="culture" vsli:raw="Culture specific information.">カルチャ固有の情報。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">オブジェクトの変換後の型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted to &lt;paramref name=&quot;destinationType&quot; /&gt;.">
        <paramref name="value" /> を <paramref name="destinationType" /> に変換することはできません。</exception>
      <returns vsli:raw="The converted object.">変換後のオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.Input.KeyInterop">
      <summary vsli:raw="Provides static methods to convert between Win32 Virtual-Keys and the WPF &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; enumeration.">Win32 仮想キーと WPF <see cref="T:System.Windows.Input.Key" /> 列挙体とを相互変換する静的メソッドを提供します。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.KeyFromVirtualKey(System.Int32)">
      <summary vsli:raw="Converts a Win32 Virtual-Key into WPF &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;.">Win32 仮想キーを WPF <see cref="T:System.Windows.Input.Key" /> に変換します。</summary>
      <param name="virtualKey" vsli:raw="The virtual key to convert.">変換する仮想キー。</param>
      <returns vsli:raw="The WPF key.">WPF キー。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.VirtualKeyFromKey(System.Windows.Input.Key)">
      <summary vsli:raw="Converts a WPF &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; into a Win32 Virtual-Key.">WPF <see cref="T:System.Windows.Input.Key" /> を Win32 仮想キーに変換します。</summary>
      <param name="key" vsli:raw="The WPF to convert.">変換対象の WPF。</param>
      <returns vsli:raw="The Win32 Virtual-Key.">Win32 仮想キー。</returns>
    </member>
    <member name="T:System.Windows.Input.KeyValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;.">
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Input.Key" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Input.KeyValueSerializer&quot; /&gt; class.">
        <see cref="T:System.Windows.Input.KeyValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be convert to an instance of &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;.">指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Input.Key" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">変換のために評価する文字列。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if the specified &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">指定した <see cref="T:System.Windows.Input.Key" /> を <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="The key to evaluate for conversion.">変換の評価対象となるキー。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;.">
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Input.Key" /> に変換します。</summary>
      <param name="value" vsli:raw="The string to convert into a &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;.">
        <see cref="T:System.Windows.Input.Key" /> に変換する文字列。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">指定された <see cref="T:System.Windows.Input.Key" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Windows.Input.Key" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The key to convert into a string.">文字列に変換するキー。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="An invariant string representation of the specified &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;.">指定した <see cref="T:System.Windows.Input.Key" /> 値の不変文字列形式。</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeys">
      <summary vsli:raw="Specifies the set of modifier keys.">変換キーのセットを指定します。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Alt">
      <summary vsli:raw="The ALT key.">Alt キー。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Control">
      <summary vsli:raw="The CTRL key.">CTRL キー</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.None">
      <summary vsli:raw="No modifiers are pressed.">どの変換キーも押されていません。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Shift">
      <summary vsli:raw="The SHIFT key.">Shift キー</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Windows">
      <summary vsli:raw="The Windows logo key.">Windows ロゴ キー</summary>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; object to and from other types.">
        <see cref="T:System.Windows.Input.ModifierKeys" /> オブジェクトと他の型との相互変換を行います。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Input.ModifierKeysConverter&quot; /&gt; class.">
        <see cref="T:System.Windows.Input.ModifierKeysConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object of the specified type can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt;, using the specified context.">指定したコンテキストを使用して、指定した型のオブジェクトを <see cref="T:System.Windows.Input.ModifierKeys" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="sourceType" vsli:raw="The type being evaluated for conversion.">変換の評価対象となる型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;sourceType&quot; /&gt; is type &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="sourceType" /> の型が <see cref="T:System.String" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; can be converted to the specified type, using the specified context.">指定したコンテキストを使用して、<see cref="T:System.Windows.Input.ModifierKeys" /> のインスタンスを指定した型に変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="destinationType" vsli:raw="The type being evaluated for conversion.">変換の評価対象となる型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;destinationType&quot; /&gt; is type &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="destinationType" /> の型が <see cref="T:System.String" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified object to a &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt;, using the specified context.">指定したコンテキストを使用して、指定したオブジェクトから <see cref="T:System.Windows.Input.ModifierKeys" /> への変換を試みます。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="culture" vsli:raw="Culture specific information.">カルチャ固有の情報。</param>
      <param name="source" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; cannot be converted.">
        <paramref name="source" /> を変換できません。</exception>
      <returns vsli:raw="The converted object.">変換後のオブジェクト。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert a &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; to the specified type, using the specified context.">指定したコンテキストを使用して、<see cref="T:System.Windows.Input.ModifierKeys" /> から指定した型への変換を試みます。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">このコンバーターの呼び出し元の環境に関する情報を提供する書式指定コンテキスト。</param>
      <param name="culture" vsli:raw="Culture specific information.">カルチャ固有の情報。</param>
      <param name="value" vsli:raw="The object to convert.">変換対象のオブジェクト。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">オブジェクトの変換後の型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not map to a valid &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt;.">
        <paramref name="value" /> が有効な <see cref="T:System.Windows.Input.ModifierKeys" /> にマップされていません。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted.">
        <paramref name="value" /> を変換できません。</exception>
      <returns vsli:raw="The converted object.">変換後のオブジェクト。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.IsDefinedModifierKeys(System.Windows.Input.ModifierKeys)">
      <summary vsli:raw="Determines whether the specified value is a valid &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; value.">指定した値が有効な <see cref="T:System.Windows.Input.ModifierKeys" /> 値かどうかを判断します。</summary>
      <param name="modifierKeys" vsli:raw="The value to check for validity.">有効性を確認する値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if input is a valid &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">入力が有効な <see cref="T:System.Windows.Input.ModifierKeys" /> 値である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt;.">
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Input.ModifierKeys" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Input.ModifierKeysValueSerializer&quot; /&gt; class.">
        <see cref="T:System.Windows.Input.ModifierKeysValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be convert to an instance of &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt;.">指定した <see cref="T:System.String" /> を <see cref="T:System.Windows.Input.ModifierKeys" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">変換のために評価する文字列。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">常に <see langword="true" /> を返します。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if the specified &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">指定した <see cref="T:System.Windows.Input.ModifierKeys" /> を <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="The modifier keys to evaluate for conversion.">変換の評価対象となる変換キー。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; value.">
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Input.ModifierKeys" /> に変換します。</summary>
      <param name="value" vsli:raw="The string to convert into a &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt;.">
        <see cref="T:System.Windows.Input.ModifierKeys" /> に変換する文字列。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">指定された <see cref="T:System.Windows.Input.ModifierKeys" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Windows.Input.ModifierKeys" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="The key to convert into a string.">文字列に変換するキー。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="An invariant string representation of the specified &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; value.">指定した <see cref="T:System.Windows.Input.ModifierKeys" /> 値の不変文字列形式。</returns>
    </member>
    <member name="T:System.Windows.Input.TraversalRequest">
      <summary vsli:raw="Represents a request to move focus to another control.">別のコントロールにフォーカスを移動する要求を表します。</summary>
    </member>
    <member name="M:System.Windows.Input.TraversalRequest.#ctor(System.Windows.Input.FocusNavigationDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Input.TraversalRequest&quot; /&gt; class.">
        <see cref="T:System.Windows.Input.TraversalRequest" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="focusNavigationDirection" vsli:raw="The intended direction of the focus traversal, as a value of the enumeration.">フォーカスを移動する方向 (列挙体の値)。</param>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection">
      <summary vsli:raw="Gets the traversal direction.">移動の方向を取得します。</summary>
      <returns vsli:raw="One of the traversal direction enumeration values.">移動方向の列挙値のいずれか。</returns>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.Wrapped">
      <summary vsli:raw="Gets or sets a value that indicates whether focus traversal has reached the end of child elements that can have focus.">フォーカスの移動が、フォーカスを設定できる最後の子要素に到達したかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this traversal has reached the end of child elements that can have focus; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">現在の移動が、フォーカスを設定できる最後の子要素に到達した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="T:System.Windows.Int32Rect">
      <summary vsli:raw="Describes the width, height, and location of an integer rectangle.">整数四角形の幅、高さ、場所を記述します。</summary>
    </member>
    <member name="M:System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; with the specified &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt; coordinates and the specified &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt;.">
        <see cref="T:System.Windows.Int32Rect" /> 座標と <see cref="P:System.Windows.Int32Rect.X" /> 座標、および <see cref="P:System.Windows.Int32Rect.Y" /> と <see cref="P:System.Windows.Int32Rect.Width" /> を指定して、<see cref="P:System.Windows.Int32Rect.Height" /> の新しいインスタンスを初期化します。</summary>
      <param name="x" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt; of the new &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; instance which specifies the x-coordinate of the top-left corner of the rectangle.">四角形の左上隅の x 座標を指定する、新しい <see cref="P:System.Windows.Int32Rect.X" /> インスタンスの <see cref="T:System.Windows.Int32Rect" />。</param>
      <param name="y" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt; of the new &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; instance which specifies the y-coordinate of the top-left corner of the rectangle.">四角形の左上隅の y 座標を指定する、新しい <see cref="P:System.Windows.Int32Rect.Y" /> インスタンスの <see cref="T:System.Windows.Int32Rect" />。</param>
      <param name="width" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt; of the new &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; instance which specifies the width of the rectangle.">四角形の幅を指定する、新しい <see cref="P:System.Windows.Int32Rect.Width" /> インスタンスの <see cref="T:System.Windows.Int32Rect" />。</param>
      <param name="height" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt; of the new &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; instance which specifies the height of the rectangle.">四角形の高さを指定する、新しい <see cref="P:System.Windows.Int32Rect.Height" /> インスタンスの <see cref="T:System.Windows.Int32Rect" />。</param>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified rectangle is equal to this rectangle.">指定した四角形が、この四角形と等しいかどうかを判断します。</summary>
      <param name="o" vsli:raw="The object to compare to the current rectangle.">現在の四角形と比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; and has the same &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt; as this rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="o" /> が <see cref="T:System.Windows.Int32Rect" /> であり、この四角形と同じ <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、および <see cref="P:System.Windows.Int32Rect.Height" /> を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)">
      <summary vsli:raw="Determines whether the specified rectangle is equal to this rectangle.">指定した四角形が、この四角形と等しいかどうかを判断します。</summary>
      <param name="value" vsli:raw="The rectangle to compare to the current rectangle.">現在の四角形と比較する対象の四角形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; has the same &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt; as this rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> がこの四角形と同じ <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、および <see cref="P:System.Windows.Int32Rect.Height" /> を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary vsli:raw="Determines whether the specified rectangles are equal.">指定した四角形が等しいかどうかを判断します。</summary>
      <param name="int32Rect1" vsli:raw="The first rectangle to compare.">最初に比較する四角形。</param>
      <param name="int32Rect2" vsli:raw="The second rectangle to compare.">2 番目に比較する四角形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;int32Rect1&quot; /&gt; and &lt;paramref name=&quot;int32Rect2&quot; /&gt; have the same &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="int32Rect1" /> と <paramref name="int32Rect2" /> が同じ <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、および <see cref="P:System.Windows.Int32Rect.Height" /> を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.GetHashCode">
      <summary vsli:raw="Creates a hash code from this rectangle's &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt; values.">この四角形の <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、および <see cref="P:System.Windows.Int32Rect.Height" /> の値からハッシュ コードを作成します。</summary>
      <returns vsli:raw="This rectangle's hash code.">この四角形のハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary vsli:raw="Compares two rectangles for exact equality.">2 つの四角形を比較し、完全に等しいかどうかを判断します。</summary>
      <param name="int32Rect1" vsli:raw="The first rectangle to compare.">最初に比較する四角形。</param>
      <param name="int32Rect2" vsli:raw="The second rectangle to compare.">2 番目に比較する四角形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;int32Rect1&quot; /&gt; and &lt;paramref name=&quot;int32Rect2&quot; /&gt; have the same &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="int32Rect1" /> と <paramref name="int32Rect2" /> が同じ <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、および <see cref="P:System.Windows.Int32Rect.Height" /> を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary vsli:raw="Compares two rectangles for inequality.">2 つの四角形を比較し、等しくないかどうかを判断します。</summary>
      <param name="int32Rect1" vsli:raw="The first rectangle to compare.">最初に比較する四角形。</param>
      <param name="int32Rect2" vsli:raw="The second rectangle to compare.">2 番目に比較する四角形。</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;int32Rect1&quot; /&gt; and &lt;paramref name=&quot;int32Rect2&quot; /&gt; have the same &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt;; otherwise, if all of these values are the same, then &lt;see langword=&quot;true&quot; /&gt;.">
        <paramref name="int32Rect1" /> と <paramref name="int32Rect2" /> が同じ <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、および <see cref="P:System.Windows.Int32Rect.Height" /> を持つ場合は <see langword="false" />。これらすべての値が一致する場合は <see langword="true" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Parse(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; structure from the specified &lt;see cref=&quot;T:System.String&quot; /&gt; representation.">指定した <see cref="T:System.Windows.Int32Rect" /> 表現から <see cref="T:System.String" /> 構造体を作成します。</summary>
      <param name="source" vsli:raw="A string representation of an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">
        <see cref="T:System.Windows.Int32Rect" /> の文字列表現。</param>
      <returns vsli:raw="The equivalent &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; structure.">等価の <see cref="T:System.Windows.Int32Rect" /> 構造体。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Formats the value of the current instance using the specified format.">指定された書式を使用して現在のインスタンスの値を書式設定します。</summary>
      <param name="format" vsli:raw="The format to use.">使用する書式。</param>
      <param name="provider" vsli:raw="The provider to use to format the value.">値の書式付けに使用するプロバイダー。</param>
      <returns vsli:raw="The value of the current instance in the specified format.">指定された書式の現在のインスタンスの値。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString">
      <summary vsli:raw="Creates a string representation of this &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">この <see cref="T:System.Windows.Int32Rect" /> の文字列形式を作成します。</summary>
      <returns vsli:raw="A string containing the same &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt; values of this &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; structure.">この <see cref="P:System.Windows.Int32Rect.X" /> 構造体の、同じ <see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、<see cref="P:System.Windows.Int32Rect.Height" />、および <see cref="T:System.Windows.Int32Rect" /> の値を格納する文字列。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString(System.IFormatProvider)">
      <summary vsli:raw="Creates a string representation of this &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; based on the supplied &lt;see cref=&quot;T:System.IFormatProvider&quot; /&gt;.">指定した <see cref="T:System.Windows.Int32Rect" /> に基づいて、この <see cref="T:System.IFormatProvider" /> の文字列表現を作成します。</summary>
      <param name="provider" vsli:raw="The format provider to use. If provider is &lt;see langword=&quot;null&quot; /&gt;, the current culture is used.">使用する書式プロバイダー。 プロバイダーが <see langword="null" /> の場合は、現在のカルチャが使用されます。</param>
      <returns vsli:raw="A string representation of this instance of &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">
        <see cref="T:System.Windows.Int32Rect" /> のこのインスタンスの文字列表現。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Empty">
      <summary vsli:raw="Gets the empty rectangle, a special value that represents a rectangle with no position or area.">空の四角形を取得します。これは位置や領域を持たない四角形を表す特殊な値です。</summary>
      <returns vsli:raw="An empty rectangle with no position or area.">位置や領域を持たない空の四角形。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.HasArea">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt; properties of the &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; are greater than 0.">
        <see cref="P:System.Windows.Int32Rect.Width" /> の <see cref="P:System.Windows.Int32Rect.Height" /> および <see cref="T:System.Windows.Int32Rect" /> プロパティが 0 より大きいかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt; properties of the &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; are greater than 0; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />
        <see cref="P:System.Windows.Int32Rect.Width" />
        <see cref="P:System.Windows.Int32Rect.Height" /> のプロパティとプロパティ <see cref="T:System.Windows.Int32Rect" /> が0より大きい場合は。それ以外の場合は <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Height">
      <summary vsli:raw="Gets or sets the height of the rectangle.">四角形の高さを取得または設定します。</summary>
      <returns vsli:raw="The height of the rectangle. The default value is &lt;c&gt;0&lt;/c&gt;.">四角形の高さ。 既定値は <c>0</c>です。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether the rectangle is empty.">四角形が空かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the rectangle is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 四角形が空の場合は。それ以外の場合は <see langword="false" /> 。 既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Width">
      <summary vsli:raw="Gets or sets the width of the rectangle.">四角形の幅を取得または設定します。</summary>
      <returns vsli:raw="The width of the rectangle. The default value is &lt;c&gt;0&lt;/c&gt;.">四角形の幅。 既定値は <c>0</c>です。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.X">
      <summary vsli:raw="Gets or sets the x-coordinate of the top-left corner of the rectangle.">四角形の左上隅の X 座標を取得または設定します。</summary>
      <returns vsli:raw="The x-coordinate of the top-left corner of the rectangle. The default value is &lt;c&gt;0&lt;/c&gt;.">四角形の左上隅の X 座標。 既定値は <c>0</c>です。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Y">
      <summary vsli:raw="Gets or sets the y-coordinate of the top-left corner of the rectangle.">四角形の左上隅の y 座標を取得または設定します。</summary>
      <returns vsli:raw="The y-coordinate of the top-left corner of the rectangle. The default value is &lt;c&gt;0&lt;/c&gt;.">四角形の左上隅の y 座標。 既定値は <c>0</c>です。</returns>
    </member>
    <member name="T:System.Windows.Int32RectConverter">
      <summary vsli:raw="Converts instances of other types to and from an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">他の型のインスタンスと <see cref="T:System.Windows.Int32Rect" /> の間の変換を行います。</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Int32RectConverter&quot; /&gt; class.">
        <see cref="T:System.Windows.Int32RectConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object can be converted from a given type to an instance of an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">指定した型のオブジェクトを <see cref="T:System.Windows.Int32Rect" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">型のコンテキスト情報を記述します。</param>
      <param name="sourceType" vsli:raw="The type of the source that is being evaluated for conversion.">評価対象となる変換元の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted to an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型を <see cref="T:System.Windows.Int32Rect" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; can be converted to a different type.">
        <see cref="T:System.Windows.Int32Rect" /> のインスタンスを別の型に変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">型のコンテキスト情報を記述します。</param>
      <param name="destinationType" vsli:raw="The desired type this &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; is being evaluated for conversion.">この <see cref="T:System.Windows.Int32Rect" /> が変換元として評価されるときの変換先の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; can be converted to &lt;paramref name=&quot;destinationType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この <see cref="T:System.Windows.Int32Rect" /> を <paramref name="destinationType" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified type to an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">指定した型から <see cref="T:System.Windows.Int32Rect" /> への変換を試みます。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">変換に必要なコンテキスト情報を提供します。</param>
      <param name="culture" vsli:raw="Cultural information to respect during conversion.">変換時に尊重するカルチャ情報。</param>
      <param name="value" vsli:raw="The object being converted.">変換されるオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The specified object is NULL or is a type that cannot be converted to an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">指定したオブジェクトが NULL であるか、<see cref="T:System.Windows.Int32Rect" /> に変換できない型である場合にスローされます。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; created from converting &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> の変換によって作成された <see cref="T:System.Windows.Int32Rect" />。</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; to a specified type.">
        <see cref="T:System.Windows.Int32Rect" /> から指定した型への変換を試みます。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">変換に必要なコンテキスト情報を提供します。</param>
      <param name="culture" vsli:raw="Cultural information to respect during conversion.">変換時に尊重するカルチャ情報。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; to convert.">変換対象の <see cref="T:System.Windows.Int32Rect" />。</param>
      <param name="destinationType" vsli:raw="The type to convert this &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; to.">この <see cref="T:System.Windows.Int32Rect" /> の変換先の型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or is not an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;, or &lt;paramref name=&quot;destinationType&quot; /&gt; is not one of the valid types for conversion.">
        <paramref name="value" /> が <see langword="null" /> であるか、<see cref="T:System.Windows.Int32Rect" /> でない場合、または <paramref name="destinationType" /> が変換先の有効な型ではない場合にスローされます。</exception>
      <returns vsli:raw="The object created from converting this &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">この <see cref="T:System.Windows.Int32Rect" /> の変換によって作成されたオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.Interop.ComponentDispatcher">
      <summary vsli:raw="Enables shared control of the message pump between Win32 and WPF in interoperation scenarios.">相互運用シナリオで、Win32 と WPF の間でメッセージ ポンプの制御を共有できるようにします。</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.EnterThreadModal">
      <summary vsli:raw="Occurs when a thread becomes modal.">スレッドがモーダルになったときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.LeaveThreadModal">
      <summary vsli:raw="Occurs when a modal thread becomes nonmodal.">モーダル スレッドが非モーダルになったときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage">
      <summary vsli:raw="Occurs when the message pump receives a keyboard message.">メッセージ ポンプがキーボード メッセージを受信すると発生します。</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadIdle">
      <summary vsli:raw="Occurs when the thread is idle.">スレッドがアイドル状態のときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage">
      <summary vsli:raw="Occurs when the message pump receives a keyboard message.">メッセージ ポンプがキーボード メッセージを受信すると発生します。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PopModal">
      <summary vsli:raw="Called to indicate that a modal thread is no longer modal.">モーダル スレッドがモーダルでなくなったことを示すために呼び出されます。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PushModal">
      <summary vsli:raw="Called to indicate that the thread is modal.">スレッドがモーダルであることを示すために呼び出されます。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseIdle">
      <summary vsli:raw="Called to indicate that a thread is idle.">スレッドがアイドル状態であることを示すために呼び出されます。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)">
      <summary vsli:raw="Indicates that a new message is available for possible handling.">処理できる新しいメッセージがあることを示します。</summary>
      <param name="msg" vsli:raw="The message and its associated data.">メッセージおよびそれに関連付けられたデータ。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if one of the modules listening to the message loop processed the message. The owner of the message loop should ignore the message. &lt;see langword=&quot;false&quot; /&gt;, if the message was not processed. In this case, the owner of the message pump should call the Win32 function TranslateMessage followed by DispatchMessage.">メッセージ ループをリッスンしているモジュールのいずれかがメッセージを処理した場合は <see langword="true" />。 この場合、メッセージ ループの所有者はこのメッセージを無視します。 メッセージが処理されなかった場合は <see langword="false" />。 この場合は、メッセージ ポンプの所有者は、Win32 関数 TranslateMessage と、これに続いて DispatchMessage を呼び出す必要があります。</returns>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage">
      <summary vsli:raw="Gets the last message that was raised.">最後に発生したメッセージを取得します。</summary>
      <returns vsli:raw="The last message.">最後のメッセージ。</returns>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.IsThreadModal">
      <summary vsli:raw="Gets a value that indicates whether the thread is modal.">スレッドがモーダルかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the thread is modal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">スレッドがモーダルの場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSink">
      <summary vsli:raw="Provides a keyboard sink for components that manages tabbing, accelerators, and mnemonics across interop boundaries and between HWNDs. This interface implements keyboard message management in WPF-Win32 interoperation scenarios.">相互運用の境界を越えて複数の HWND にわたって、Tab キーによる移動、アクセラレータ、およびニーモニックを管理するコンポーネントに対し、キーボード シンクを提供します。 このインターフェイスは、WPF-Win32 の相互運用シナリオにおいてキーボード メッセージ管理を実装します。</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
      <summary vsli:raw="Gets a value that indicates whether the sink or one of its contained components has focus.">シンクまたはその中に格納されているコンポーネントのいずれかにフォーカスがあるかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sink or one of its contained components has focus; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">シンクまたはその中に格納されているコンポーネントのいずれかにフォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary vsli:raw="Called when one of the mnemonics (access keys) for this sink is invoked.">このシンクのニーモニック (アクセス キー) のいずれかが起動されたときに呼び出されます。</summary>
      <param name="msg" vsli:raw="The message for the mnemonic and associated data. Do not modify this message structure. It is passed by reference for performance reasons only.">ニーモニック用のメッセージおよび関連付けられたデータ。 このメッセージ構造を変更しないでください。 パフォーマンス上の理由から、これは参照渡しのみです。</param>
      <param name="modifiers" vsli:raw="Modifier keys.">変換キー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メッセージが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
      <summary vsli:raw="Registers the &lt;see cref=&quot;T:System.Windows.Interop.IKeyboardInputSink&quot; /&gt; interface of a contained component.">格納されているコンポーネントの <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> インターフェイスを登録します。</summary>
      <param name="sink" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Interop.IKeyboardInputSink&quot; /&gt; sink of the contained component.">格納されているコンポーネントの <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> シンク。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Interop.IKeyboardInputSite&quot; /&gt; site of the contained component.">格納されているコンポーネントの <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> サイト。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
      <summary vsli:raw="Sets focus on either the first tab stop or the last tab stop of the sink.">フォーカスをシンクの最初のタブ位置または最後のタブ位置のいずれかに設定します。</summary>
      <param name="request" vsli:raw="Specifies whether focus should be set to the first or the last tab stop.">フォーカスを最初と最後のどちらのタブ位置に設定するかを指定します。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the focus has been set as requested; &lt;see langword=&quot;false&quot; /&gt;, if there are no tab stops.">フォーカスが要求どおりに設定された場合は <see langword="true" />。タブ位置が存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary vsli:raw="Processes keyboard input at the keydown message level.">キー押下メッセージのレベルでキーボード入力を処理します。</summary>
      <param name="msg" vsli:raw="The message and associated data. Do not modify this structure. It is passed by reference for performance reasons only.">メッセージおよび関連付けられたデータ。 この構造体を変更しないでください。 パフォーマンス上の理由から、これは参照渡しのみです。</param>
      <param name="modifiers" vsli:raw="Modifier keys.">変換キー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was handled by the method implementation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メッセージがメソッドの実装によって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary vsli:raw="Processes WM_CHAR, WM_SYSCHAR, WM_DEADCHAR, and WM_SYSDEADCHAR input messages before &lt;see cref=&quot;M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)&quot; /&gt; is called.">
        <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> の呼び出し前に、WM_CHAR、WM_SYSCHAR、WM_DEADCHAR、および WM_SYSDEADCHAR 入力メッセージを処理します。</summary>
      <param name="msg" vsli:raw="The message and associated data. Do not modify this structure. It is passed by reference for performance reasons only.">メッセージおよび関連付けられたデータ。 この構造体を変更しないでください。 パフォーマンス上の理由から、これは参照渡しのみです。</param>
      <param name="modifiers" vsli:raw="Modifier keys.">変換キー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was processed and &lt;see cref=&quot;M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)&quot; /&gt; should not be called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メッセージが処理されたため <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> を呼び出さない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
      <summary vsli:raw="Gets or sets a reference to the component's container's &lt;see cref=&quot;T:System.Windows.Interop.IKeyboardInputSite&quot; /&gt; interface.">コンポーネントのコンテナーの <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> インターフェイスへの参照を取得または設定します。</summary>
      <returns vsli:raw="A reference to the container's &lt;see cref=&quot;T:System.Windows.Interop.IKeyboardInputSite&quot; /&gt; interface.">コンテナーの <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> インターフェイスへの参照。</returns>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSite">
      <summary vsli:raw="Manages keyboard focus within the container.  This interface implements keyboard message management in WPF-Win32 interoperation scenarios.">コンテナー内のキーボード フォーカスを管理します。  このインターフェイスは、WPF-Win32 の相互運用シナリオにおいてキーボード メッセージ管理を実装します。</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops(System.Windows.Input.TraversalRequest)">
      <summary vsli:raw="Called by a contained component when it has reached its last tab stop and has no further items to tab to.">格納されているコンポーネントで、最後のタブ位置に到達して移動先の項目がなくなった場合に呼び出されます。</summary>
      <param name="request" vsli:raw="Specifies whether focus should be set to the first or the last tab stop.">フォーカスを最初と最後のどちらのタブ位置に設定するかを指定します。</param>
      <returns vsli:raw="If this method returns &lt;see langword=&quot;true&quot; /&gt;, the site has shifted focus to another component. If this method returns &lt;see langword=&quot;false&quot; /&gt;, focus is still within the calling component. The component should &quot;wrap around&quot; and set focus to its first contained tab stop.">このメソッドが <see langword="true" /> を返す場合は、サイトによってフォーカスが別のコンポーネントに移動されています。 このメソッドが <see langword="false" /> を返す場合は、フォーカスはまだ呼び出し元のコンポーネントにあります。 コンポーネントで "折り返し" が行われて、含まれている最初のタブ位置にフォーカスが設定されます。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.Unregister">
      <summary vsli:raw="Unregisters a child keyboard input sink from this site.">このサイトから子キーボード入力シンクの登録を解除します。</summary>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSite.Sink">
      <summary vsli:raw="Gets the keyboard sink associated with this site.">このサイトに関連付けられているキーボード シンクを取得します。</summary>
      <returns vsli:raw="The current site's &lt;see cref=&quot;T:System.Windows.Interop.IKeyboardInputSink&quot; /&gt; interface.">現在のサイトの <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> インターフェイス。</returns>
    </member>
    <member name="T:System.Windows.Interop.MSG">
      <summary vsli:raw="Contains message information from a thread's message queue.">スレッドのメッセージ キューからのメッセージ情報を保持します。</summary>
    </member>
    <member name="P:System.Windows.Interop.MSG.hwnd">
      <summary vsli:raw="Gets or sets the window handle (HWND) to the window whose window procedure receives the message.">ウィンドウ プロシージャがメッセージを受け取るウィンドウのウィンドウ ハンドル (HWND) を取得または設定します。</summary>
      <returns vsli:raw="The window handle (HWND).">ウィンドウ ハンドル (HWND)。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.lParam">
      <summary vsli:raw="Gets or sets the &lt;paramref name=&quot;lParam&quot; /&gt; value that specifies additional information about the message. The exact meaning depends on the value of the &lt;see cref=&quot;P:System.Windows.Interop.MSG.message&quot; /&gt; member.">メッセージに関する追加情報を指定する <paramref name="lParam" /> 値を取得または設定します。 意味は <see cref="P:System.Windows.Interop.MSG.message" /> メンバーの値によって異なります。</summary>
      <returns vsli:raw="The &lt;paramref name=&quot;lParam&quot; /&gt; value for the message.">メッセージの <paramref name="lParam" /> 値。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.message">
      <summary vsli:raw="Gets or sets the message identifier.">メッセージ ID を取得または設定します。</summary>
      <returns vsli:raw="The message identifier.">メッセージ ID。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_x">
      <summary vsli:raw="Gets or sets the x coordinate of the cursor position on the screen, when the message was posted.">メッセージがポストされたときの、画面上のカーソル位置の x 座標を取得または設定します。</summary>
      <returns vsli:raw="The x coordinate of the cursor position.">カーソル位置の x 座標。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_y">
      <summary vsli:raw="Gets or sets the y coordinate of the cursor position on the screen, when the message was posted.">メッセージがポストされたときの、画面上のカーソル位置の y 座標を取得または設定します。</summary>
      <returns vsli:raw="The y coordinate of the cursor position.">カーソル位置の y 座標。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.time">
      <summary vsli:raw="Gets or sets the time at which the message was posted.">メッセージがポストされた時刻を取得または設定します。</summary>
      <returns vsli:raw="The time that the message was posted.">メッセージがポストされた時刻。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.wParam">
      <summary vsli:raw="Gets or sets the &lt;paramref name=&quot;wParam&quot; /&gt; value for the message, which specifies additional information about the message. The exact meaning depends on the value of the message.">メッセージに関する追加情報を指定する、メッセージの <paramref name="wParam" /> 値を取得または設定します。 意味はメッセージの値によって異なります。</summary>
      <returns vsli:raw="The &lt;paramref name=&quot;wParam&quot; /&gt; value for the message.">メッセージの <paramref name="wParam" /> 値。</returns>
    </member>
    <member name="T:System.Windows.Interop.ThreadMessageEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage&quot; /&gt; and &lt;see cref=&quot;E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage&quot; /&gt; events.">
        <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage" /> イベントおよび <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage" /> イベントを処理するメソッドを表します。</summary>
      <param name="msg" vsli:raw="A structure with the message data.">メッセージ データを格納する構造体。</param>
      <param name="handled" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メッセージが処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="T:System.Windows.IWeakEventListener">
      <summary vsli:raw="Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt;.">WeakEvent パターンと <see cref="T:System.Windows.WeakEventManager" /> を通じてイベントを受信するクラスにイベント リスニング サポートを提供します。</summary>
    </member>
    <member name="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary vsli:raw="Receives events from the centralized event manager.">中央のイベント マネージャーからイベントを受信します。</summary>
      <param name="managerType" vsli:raw="The type of the &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; calling this method.">このメソッドを呼び出す <see cref="T:System.Windows.WeakEventManager" /> の型。</param>
      <param name="sender" vsli:raw="Object that originated the event.">イベントを発生させたオブジェクト。</param>
      <param name="e" vsli:raw="Event data.">イベント データ。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the listener handled the event. It is considered an error by the &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return &lt;see langword=&quot;false&quot; /&gt; if it receives an event that it does not recognize or handle.">リスナーがイベントを処理した場合は <see langword="true" />。 リスナーが処理しないイベントに対してそのリスナーを登録した場合、WPF の <see cref="T:System.Windows.WeakEventManager" /> 処理ではエラーと見なされます。 ただし、リスナーが認識または処理しないイベントを受信した場合は、このメソッドは <see langword="false" /> を返します。</returns>
    </member>
    <member name="T:System.Windows.LocalValueEntry">
      <summary vsli:raw="Represents a property identifier and the property value for a locally set dependency property.">ローカルで設定された依存関係プロパティのプロパティ識別子とプロパティ値を表します。</summary>
    </member>
    <member name="M:System.Windows.LocalValueEntry.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; instances are equal.">2 つの <see cref="T:System.Windows.LocalValueEntry" /> インスタンスが等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt;.">現在の <see cref="T:System.Windows.LocalValueEntry" /> と比較する <see cref="T:System.Windows.LocalValueEntry" />。</param>
      <returns vsli:raw="This &lt;see cref=&quot;M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)&quot; /&gt; implementation compares the values of the &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Property&quot; /&gt;, and potentially compares the values of &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Value&quot; /&gt;. The &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Property&quot; /&gt; component of a &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; is a value type, so will always be a bitwise comparison. For the &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Value&quot; /&gt; component, this implementation employs a bitwise comparison if it is a value type. For locally set properties that have reference types, the behavior is deferred to that type's equality determination mechanisms, because it just uses the == operator on the two values internally. By default, this would be a reference equality of the values and thus the equality of the entire &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; would become a reference equality.">
        <see cref="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)" /> 実装は <see cref="P:System.Windows.LocalValueEntry.Property" /> の値を比較し、場合によっては、<see cref="P:System.Windows.LocalValueEntry.Value" /> の値を比較します。 <see cref="P:System.Windows.LocalValueEntry.Property" /> の <see cref="T:System.Windows.LocalValueEntry" /> コンポーネントは値型であるため、常にビット単位で比較されます。 <see cref="P:System.Windows.LocalValueEntry.Value" /> コンポーネントの場合は、値型であればビット単位の比較を使用します。 ローカルに設定されたプロパティが参照型を持つ場合は、この動作はその型の等価性判定機構まで保留されます。これは、2 つの値を比較する際に、== 演算子を内部的に使用するためです。 これは、既定では、値の参照が等しいことを表すため、<see cref="T:System.Windows.LocalValueEntry" /> 全体の等価性が参照等価性になります。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt;.">この <see cref="T:System.Windows.LocalValueEntry" /> のハッシュ コードを返します。</summary>
      <returns vsli:raw="A signed 32-bit integer value.">符号付き 32 ビット整数値。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary vsli:raw="Compares the specified &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; instances to determine whether they are the same.">指定した <see cref="T:System.Windows.LocalValueEntry" /> インスタンスを比較し、それらが同一であるかどうかを判断します。</summary>
      <param name="obj1" vsli:raw="The first instance to compare.">比較する 1 番目のインスタンス。</param>
      <param name="obj2" vsli:raw="The second instance to compare.">比較する 2 番目のインスタンス。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;obj1&quot; /&gt;&lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; is equal to the &lt;paramref name=&quot;obj2&quot; /&gt;&lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj1" />
        <see cref="T:System.Windows.LocalValueEntry" /> が <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEntry" /> と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary vsli:raw="Compares the specified &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt; instances to determine whether they are different.">指定した <see cref="T:System.Windows.LocalValueEnumerator" /> インスタンスを比較し、それらが異なるかどうかを判断します。</summary>
      <param name="obj1" vsli:raw="The first instance to compare.">比較する 1 番目のインスタンス。</param>
      <param name="obj2" vsli:raw="The second instance to compare.">比較する 2 番目のインスタンス。</param>
      <returns vsli:raw="This implementation compares the values of the &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Property&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Value&quot; /&gt; components of a &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt;. The &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Property&quot; /&gt; component of a &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; is always a value type, so this comparison will always be a bitwise comparison. For the &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Value&quot; /&gt; component, this implementation employs a bitwise comparison if it is a value type.  &#xA;  &#xA; For locally set properties that have reference types, the behavior is deferred to that type's equality determination mechanisms, because it uses the &lt;see langword=&quot;==&quot; /&gt; operator on the two values internally. By default, this is a reference equality of the values.">この実装は、<see cref="P:System.Windows.LocalValueEntry.Property" /> の値と <see cref="P:System.Windows.LocalValueEntry.Value" /> の <see cref="T:System.Windows.LocalValueEntry" /> コンポーネントを比較します。 <see cref="P:System.Windows.LocalValueEntry.Property" /> の <see cref="T:System.Windows.LocalValueEntry" /> コンポーネントは常に値型であるため、この比較は常にビット単位の比較になります。 <see cref="P:System.Windows.LocalValueEntry.Value" /> コンポーネントの場合は、値型であればビット単位の比較を使用します。  
  
ローカルに設定されたプロパティが参照型を持つ場合は、この動作はその型の等価性判定機構まで保留されます。これは、2 つの値を比較する際に、<see langword="==" /> 演算子を内部的に使用するためです。 これは、既定では、値の参照が等しいことを表します。</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Property">
      <summary vsli:raw="Gets the identifier for the locally set dependency property that is represented by this entry.">このエントリで表されるローカルに設定される依存関係プロパティの識別子を取得します。</summary>
      <returns vsli:raw="The identifier for the locally set dependency property.">ローカルに設定される依存関係プロパティの識別子。</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Value">
      <summary vsli:raw="Gets the value of the locally set dependency property.">ローカルに設定される依存関係プロパティの値を取得します。</summary>
      <returns vsli:raw="The value of the locally set dependency property as an object.">オブジェクトとしてローカルに設定される依存関係プロパティの値。</returns>
    </member>
    <member name="T:System.Windows.LocalValueEnumerator">
      <summary vsli:raw="Provides enumeration support for the local values of any dependency properties that exist on a &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">
        <see cref="T:System.Windows.DependencyObject" /> に存在するすべての依存関係プロパティのローカル値に対して列挙処理のサポートを提供します。</summary>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Equals(System.Object)">
      <summary vsli:raw="Determines whether the provided &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt; is equivalent to this &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt;.">指定した <see cref="T:System.Windows.LocalValueEnumerator" /> がこの <see cref="T:System.Windows.LocalValueEnumerator" /> と等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt;.">現在の <see cref="T:System.Windows.LocalValueEnumerator" /> と比較する <see cref="T:System.Windows.LocalValueEnumerator" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した <see langword="true" /> が現在の <see cref="T:System.Windows.LocalValueEnumerator" /> と等しい場合は <see cref="T:System.Windows.LocalValueEnumerator" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.GetHashCode">
      <summary vsli:raw="Returns a hash code for the current &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt;.">現在の <see cref="T:System.Windows.LocalValueEnumerator" /> のハッシュ コードを返します。</summary>
      <returns vsli:raw="A 32-bit integer hash code.">32 ビット整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">列挙子をコレクションの次の要素に進めます。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">列挙子が次の要素に正常に進んだ場合は <see langword="true" />。列挙子がコレクションの末尾を越えた場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary vsli:raw="Compares whether two specified &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt; objects are the same.">指定した 2 つの <see cref="T:System.Windows.LocalValueEnumerator" /> オブジェクトを比較し、同一かどうかを判断します。</summary>
      <param name="obj1" vsli:raw="The first object to compare.">比較する最初のオブジェクト。</param>
      <param name="obj2" vsli:raw="The second object to compare.">比較する 2 番目のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;obj1&quot; /&gt;&lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt; is equal to the &lt;paramref name=&quot;obj2&quot; /&gt;&lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="obj1" />
        <see cref="T:System.Windows.LocalValueEnumerator" /> が <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" /> と等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary vsli:raw="Compares two specified &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt; objects to determine whether they are not the same.">指定した 2 つの <see cref="T:System.Windows.LocalValueEnumerator" /> オブジェクトを比較し、それらが異なるかどうかを判断します。</summary>
      <param name="obj1" vsli:raw="The first object to compare.">比較する最初のオブジェクト。</param>
      <param name="obj2" vsli:raw="The second object to compare.">比較する 2 番目のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">インスタンスが等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">列挙子を初期位置、つまりコレクションの最初の要素の前に設定します。</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Count">
      <summary vsli:raw="Gets the number of items that are represented in the collection.">コレクション内で表されている項目の数を取得します。</summary>
      <returns vsli:raw="The number of items in the collection.">コレクション内の項目数。</returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Current">
      <summary vsli:raw="Gets the current element in the collection.">コレクション内の現在の要素を取得します。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; in the collection.">コレクション内の現在の <see cref="T:System.Windows.LocalValueEntry" />。</returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="For a description of this members, see &lt;see cref=&quot;P:System.Collections.IEnumerator.Current&quot; /&gt;.">このメンバーの説明については、<see cref="P:System.Collections.IEnumerator.Current" /> のトピックを参照してください。</summary>
      <returns vsli:raw="The current element in the collection.">コレクション内にある現在の要素です。</returns>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptions">
      <summary vsli:raw="Specifies how a property is to be serialized.">プロパティをシリアル化する方法を指定します。</summary>
    </member>
    <member name="F:System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute">
      <summary vsli:raw="The property should be serialized as an attribute.">プロパティは属性としてシリアル化される必要があります。</summary>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptionsAttribute">
      <summary vsli:raw="Specifies the serialization flags for a property.">プロパティのシリアル化フラグを指定します。</summary>
    </member>
    <member name="M:System.Windows.Markup.DesignerSerializationOptionsAttribute.#ctor(System.Windows.Markup.DesignerSerializationOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.DesignerSerializationOptionsAttribute&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.DesignerSerializationOptionsAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="designerSerializationOptions" vsli:raw="Specifies how the property is to be serialized.">プロパティをシリアル化する方法を指定します。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;designerSerializationOptions&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Windows.Markup.DesignerSerializationOptions&quot; /&gt; value.">
        <paramref name="designerSerializationOptions" /> は正しい <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> 値ではありません。</exception>
    </member>
    <member name="P:System.Windows.Markup.DesignerSerializationOptionsAttribute.DesignerSerializationOptions">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.DesignerSerializationOptions&quot; /&gt; set on the attribute.">属性に設定された <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> を取得します。</summary>
      <returns vsli:raw="The serialization option, as a value of the enumeration.">シリアル化オプションを表す列挙体の値。</returns>
    </member>
    <member name="T:System.Windows.Markup.InternalTypeHelper">
      <summary vsli:raw="Abstract class used internally by the WPF XAML compiler to support the use of internal types.">内部型の使用をサポートするために WPF XAML コンパイラによって内部で使用される抽象クラス。</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.InternalTypeHelper&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.InternalTypeHelper" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived (generated) class, attaches an event handler delegate to an internal event.">派生 (生成された) クラスでオーバーライドされると、イベント ハンドラーのデリゲートを内部イベントに結合します。</summary>
      <param name="eventInfo" vsli:raw="The event information for the event (CLR reflection information).">イベントのイベント情報 (CLR リフレクション情報)。</param>
      <param name="target" vsli:raw="The target where the handler is attached.">ハンドラーがアタッチされているターゲット。</param>
      <param name="handler" vsli:raw="The event handler.">イベント ハンドラー。</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
      <summary vsli:raw="When overridden in a derived (generated) class, creates an event delegate referencing a non-public handler method.">派生 (生成された) クラスでオーバーライドされると、非パブリックのハンドラー メソッドを参照するイベント デリゲートを作成します。</summary>
      <param name="delegateType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the delegate.">デリゲートの <see cref="T:System.Type" />。</param>
      <param name="target" vsli:raw="The target where the handler is attached.">ハンドラーがアタッチされているターゲット。</param>
      <param name="handler" vsli:raw="The name of the handler implementation.">ハンドラー実装の名前。</param>
      <returns vsli:raw="The delegate reference.">デリゲートの参照。</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
      <summary vsli:raw="When overridden in a derived (generated) class, creates an instance of an internal type.">派生 (生成された) クラスでオーバーライドされると、内部型のインスタンスを作成します。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to create.">作成する <see cref="T:System.Type" />。</param>
      <param name="culture" vsli:raw="Culture specific information.">カルチャ固有の情報。</param>
      <returns vsli:raw="The created instance.">作成されたインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
      <summary vsli:raw="When overridden in a derived (generated) class, gets the value of an internal property on the target object.">派生 (生成された) クラスでオーバーライドされると、ターゲット オブジェクトの内部プロパティの値を取得します。</summary>
      <param name="propertyInfo" vsli:raw="Property information for the property to get.">取得するプロパティのプロパティ情報。</param>
      <param name="target" vsli:raw="The object that holds the desired property value.">目的のプロパティ値を保持するオブジェクト。</param>
      <param name="culture" vsli:raw="Culture specific information.">カルチャ固有の情報。</param>
      <returns vsli:raw="The value of the property.">プロパティの値。</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
      <summary vsli:raw="When overridden in a derived (generated) class, sets the value on an internal property on the target object.">派生 (生成された) クラスでオーバーライドされると、ターゲット オブジェクトの内部プロパティの値を設定します。</summary>
      <param name="propertyInfo" vsli:raw="Property information for the property to set.">設定するプロパティのプロパティ情報。</param>
      <param name="target" vsli:raw="The object that holds the desired property value.">目的のプロパティ値を保持するオブジェクト。</param>
      <param name="value" vsli:raw="The value to set.">設定する値。</param>
      <param name="culture" vsli:raw="Culture specific information.">カルチャ固有の情報。</param>
    </member>
    <member name="T:System.Windows.Markup.IReceiveMarkupExtension">
      <summary vsli:raw="Provides a mechanism whereby types can declare that they can receive an expression (or another class) from a markup extension, where the output is a different property type than the target property. Do not use for .NET Framework 4 implementations.">型によりマークアップ拡張機能から式 (または他のクラス) を受け取ることを宣言できる機構が用意されています。ここでは、出力はターゲット プロパティとは異なるプロパティの型になります。 .NET Framework 4 の実装には使用しないでください。</summary>
    </member>
    <member name="M:System.Windows.Markup.IReceiveMarkupExtension.ReceiveMarkupExtension(System.String,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary vsli:raw="Provides the handling for markup extensions that provide property values. Do not use for .NET Framework 4 implementations; see &lt;see cref=&quot;T:System.Windows.Markup.IReceiveMarkupExtension&quot; /&gt;.">プロパティの値を提供するマークアップ拡張機能の処理を行います。 .NET Framework 4 の実装には使用しないでください。「<see cref="T:System.Windows.Markup.IReceiveMarkupExtension" />」を参照してください。</summary>
      <param name="property" vsli:raw="The name of the target property.">ターゲット プロパティの名前。</param>
      <param name="markupExtension" vsli:raw="The markup extension instance of the incoming data.">受信データのマークアップ拡張インスタンス。</param>
      <param name="serviceProvider" vsli:raw="Can provide additional services that should be performed when processing the markup extension data for a property value.">プロパティ値のマークアップ拡張データの処理時に実行する必要のある追加サービスが用意されています。</param>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupObject">
      <summary vsli:raw="Abstract class that represents an object that can be used to navigate a tree of objects.">オブジェクトのツリー内を移動するのに使用できるオブジェクトを表す抽象クラス。</summary>
    </member>
    <member name="M:System.Windows.Markup.Primitives.MarkupObject.AssignRootContext(System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="When overridden in a derived class, assigns a root context for &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; classes.">派生クラスでオーバーライドされると、<see cref="T:System.Windows.Markup.ValueSerializer" /> クラスのルート コンテキストを割り当てます。</summary>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Markup.IValueSerializerContext&quot; /&gt; to assign a root context for.">ルート コンテキストの割り当て先の <see cref="T:System.Windows.Markup.IValueSerializerContext" />。</param>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Attributes">
      <summary vsli:raw="When overridden in a derived class, gets the attributes associated with this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupObject&quot; /&gt;.">派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> に関連付けられている属性を取得します。</summary>
      <returns vsli:raw="The collection of attributes.">属性のコレクション。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Instance">
      <summary vsli:raw="When overridden in a derived class, gets the instance of the object represented by this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupObject&quot; /&gt;.">派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> で表されるオブジェクトのインスタンスを取得します。</summary>
      <returns vsli:raw="The instance of the object.">オブジェクトのインスタンス。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.ObjectType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupObject&quot; /&gt; instance.">派生クラスでオーバーライドされると、<see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> インスタンスの型を取得します。</summary>
      <returns vsli:raw="The type of the object.">オブジェクトの型。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Properties">
      <summary vsli:raw="When overridden in a derived class, gets the properties of this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupObject&quot; /&gt; instance that should be written to XAML.">派生クラスでオーバーライドされると、XAML に書き込む必要があるこの <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> インスタンスのプロパティを取得します。</summary>
      <returns vsli:raw="The properties.">プロパティ。</returns>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupProperty">
      <summary vsli:raw="Abstract class that provides a property description to be used while writing to markup which encapsulates access to properties and their values.">プロパティおよびその値へのアクセスをカプセル化するマークアップへの書き込み中に使用されるプロパティを記述する抽象クラス。</summary>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes">
      <summary vsli:raw="When overridden in a derived class, gets the attributes associated with this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt;.">派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> に関連付けられている属性を取得します。</summary>
      <returns vsli:raw="The collection of attributes.">属性のコレクション。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; identifier for the markup property if the property is implemented as a dependency property.">派生クラスでオーバーライドされると、プロパティが依存関係プロパティとして実装されている場合は、マークアップ プロパティの <see cref="T:System.Windows.DependencyProperty" /> 識別子を取得します。</summary>
      <returns vsli:raw="The dependency property identifier.">依存関係プロパティの識別子。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached">
      <summary vsli:raw="When overridden in a derived class, determines whether this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; is an attached &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt;.">派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> が添付 <see cref="T:System.Windows.DependencyProperty" /> であるかどうかを判断します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is an attached &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティが添付 <see cref="T:System.Windows.DependencyProperty" /> である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite">
      <summary vsli:raw="When overridden in a derived class, determines whether this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; is a composite property.">派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> が複合プロパティであるかどうかを判断します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; is this property is a composite property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このプロパティが複合プロパティである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument">
      <summary vsli:raw="When overridden in a derived class, determines whether this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; represents a constructor argument.">派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> がコンストラクター引数を表すかどうかを判断します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property represents a constructor argument; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このプロパティがコンストラクター引数を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent">
      <summary vsli:raw="When overridden in a derived class, determines whether this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; represents direct content of a collection.">派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> がコレクションの直接の内容を表すかどうかを判断します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents direct content; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">プロパティが直接の内容を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey">
      <summary vsli:raw="When overridden in a derived class, determines whether this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; represents the key used by the &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupObject&quot; /&gt; to store the item in a dictionary.">派生クラスでオーバーライドされると、項目をディクショナリに格納するために <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> で使用されるキーをこの <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> が表すかどうかを判断します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property represents a key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">このプロパティがキーを表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString">
      <summary vsli:raw="When overridden in a derived class, determines whether this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; represents text which is passed to a type converter to create an instance of the property or if a constructor should be used.">派生クラスでオーバーライドされると、プロパティのインスタンスを作成するために、またはコンストラクターを使用する必要がある場合に、型コンバーターに渡されるテキストをこの <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> が表すかどうかを判断します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; represents a string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> が文字列を表す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Items">
      <summary vsli:raw="When overridden in a derived class, gets the items that make up the value of this property.">派生クラスでオーバーライドされると、このプロパティの値を構成する項目を取得します。</summary>
      <returns vsli:raw="The items that make up the value of this property.">このプロパティの値を構成する項目。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Name">
      <summary vsli:raw="When overridden in a derived class, gets a name that is used for diagnostics and error reporting.">派生クラスでオーバーライドされると、診断およびエラー報告に使用される名前を取得します。</summary>
      <returns vsli:raw="The identifier property name.">識別子のプロパティ名。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; for the markup property.">派生クラスでオーバーライドされると、マークアップ プロパティの <see cref="T:System.ComponentModel.PropertyDescriptor" /> を取得します。</summary>
      <returns vsli:raw="The property descriptor.">プロパティ記述子。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType">
      <summary vsli:raw="When overridden in a derived class, gets the CLR type of the property.">派生クラスでオーバーライドされると、プロパティの CLR 型を取得します。</summary>
      <returns vsli:raw="The CLR type.">CLR 型。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue">
      <summary vsli:raw="When overridden in a derived class, gets the string value of this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt;.">派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> の文字列値を取得します。</summary>
      <returns vsli:raw="The string value.">文字列値。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences">
      <summary vsli:raw="When overridden in a derived class, gets the set of types that this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; will reference when it serializes its value as a string.">派生クラスでオーバーライドされると、この <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> が値を文字列としてシリアル化するときに参照する型のセットを取得します。</summary>
      <returns vsli:raw="The set of types.">型のセット。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Value">
      <summary vsli:raw="When overridden in a derived class, gets the current value of this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt;.">派生クラスでオーバーライドされた場合、<see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> の現在の値を取得します。</summary>
      <returns vsli:raw="The current value.">現在の値。</returns>
    </member>
    <member name="T:System.Windows.Markup.ServiceProviders">
      <summary vsli:raw="Provides an implementation for the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt; interface with methods that enable adding services.">サービスの追加を有効にするメソッドを含む <see cref="T:System.IServiceProvider" /> インターフェイスの実装を提供します。</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ServiceProviders&quot; /&gt; class.">
        <see cref="T:System.Windows.Markup.ServiceProviders" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds a service to the list.">リストにサービスを追加します。</summary>
      <param name="serviceType" vsli:raw="Service type of the new service.">新しいサービスの型。</param>
      <param name="service" vsli:raw="The service implementation class.">サービス実装クラス。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;service&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> または <paramref name="service" /> が <see langword="null" /> です。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Attempted to add a service that already exists in the dictionary.">このディクショナリに既に存在するサービスを追加しようとしました。</exception>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type.">指定した型のサービス オブジェクトを取得します。</summary>
      <param name="serviceType" vsli:raw="The type of service object to get.">取得するサービス オブジェクトの型。</param>
      <returns vsli:raw="A service implementation for the type &lt;paramref name=&quot;serviceType&quot; /&gt;. May be &lt;see langword=&quot;null&quot; /&gt; if there is no service stored for type &lt;paramref name=&quot;serviceType&quot; /&gt;.">
        <paramref name="serviceType" /> 型のサービス実装。 <paramref name="serviceType" /> 型のサービスが格納されていない場合は、<see langword="null" /> である可能性があります。</returns>
    </member>
    <member name="T:System.Windows.Media.Converters.MatrixValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">
        <see cref="T:System.String" /> のインスタンスと <see cref="T:System.Windows.Media.Matrix" /> のインスタンスを相互に変換します。</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Media.Converters.MatrixValueSerializer&quot; /&gt; class.">
        <see cref="T:System.Windows.Media.Converters.MatrixValueSerializer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if conversion from a given &lt;see cref=&quot;T:System.String&quot; /&gt; to an instance of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; is possible.">指定した <see cref="T:System.String" /> から <see cref="T:System.Windows.Media.Matrix" /> のインスタンスへの変換が可能かどうかを判断します。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">変換のために評価する文字列。</param>
      <param name="context" vsli:raw="Context information used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">値を変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if an instance of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Windows.Media.Matrix" /> のインスタンスを <see cref="T:System.String" /> に変換できるかどうかを判断します。</summary>
      <param name="value" vsli:raw="Instance of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; to evaluate for conversion.">変換のために評価する <see cref="T:System.Windows.Media.Matrix" /> のインスタンス。</param>
      <param name="context" vsli:raw="Context information used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Occurs when &lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.Windows.Media.Int32Collection&quot; /&gt;.">
        <paramref name="value" /> が <see cref="T:System.Windows.Media.Int32Collection" /> ではないときに発生します。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> を <see cref="T:System.String" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">
        <see cref="T:System.String" /> を <see cref="T:System.Windows.Media.Matrix" /> に変換します。</summary>
      <param name="value" vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; value to convert into a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">
        <see cref="T:System.String" /> に変換する <see cref="T:System.Windows.Media.Matrix" /> 値。</param>
      <param name="context" vsli:raw="Context information used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">指定された <see cref="T:System.Windows.Media.Matrix" /> に基づいた、<paramref name="value" /> の新しいインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">
        <see cref="T:System.Windows.Media.Matrix" /> のインスタンスを <see cref="T:System.String" /> に変換します。</summary>
      <param name="value" vsli:raw="Instance of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; to evaluate for conversion.">変換のために評価する <see cref="T:System.Windows.Media.Matrix" /> のインスタンス。</param>
      <param name="context" vsli:raw="Context information used for conversion.">変換のために使用されるコンテキスト情報。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representation of the supplied &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; object.">指定した <see cref="T:System.String" /> オブジェクトの <see cref="T:System.Windows.Media.Matrix" /> 表現。</returns>
    </member>
    <member name="T:System.Windows.Media.DisableDpiAwarenessAttribute">
      <summary vsli:raw="Allows WPF applications to disable dots per inch (dpi) awareness for all user interface elements.">WPF アプリケーションですべてのユーザー インターフェイス要素のドット/インチ (dpi) 対応を無効にできるようにします。</summary>
    </member>
    <member name="M:System.Windows.Media.DisableDpiAwarenessAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Windows.Media.DisableDpiAwarenessAttribute&quot; /&gt;.">
        <see cref="T:System.Windows.Media.DisableDpiAwarenessAttribute" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="T:System.Windows.Media.Matrix">
      <summary vsli:raw="Represents a 3x3 affine transformation matrix used for transformations in 2-D space.">2-D 空間での変換に使用される 3 x 3 アフィン変換行列を表します。</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">
        <see cref="T:System.Windows.Media.Matrix" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="m11" vsli:raw="The new &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Media.Matrix.M11&quot; /&gt; coefficient.">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.M11" /> 係数。</param>
      <param name="m12" vsli:raw="The new &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Media.Matrix.M12&quot; /&gt; coefficient.">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.M12" /> 係数。</param>
      <param name="m21" vsli:raw="The new &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Media.Matrix.M21&quot; /&gt; coefficient.">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.M21" /> 係数。</param>
      <param name="m22" vsli:raw="The new &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Media.Matrix.M22&quot; /&gt; coefficient.">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.M22" /> 係数。</param>
      <param name="offsetX" vsli:raw="The new &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Media.Matrix.OffsetX&quot; /&gt; coefficient.">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.OffsetX" /> 係数。</param>
      <param name="offsetY" vsli:raw="The new &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Media.Matrix.OffsetY&quot; /&gt; coefficient.">新しい <see cref="T:System.Windows.Media.Matrix" /> 構造体の <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 係数。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)">
      <summary vsli:raw="Appends the specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">指定した <see cref="T:System.Windows.Media.Matrix" /> 構造体をこの <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加します。</summary>
      <param name="matrix" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to append to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure that is identical to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">指定した <see cref="T:System.Object" /> が、この <see cref="T:System.Windows.Media.Matrix" /> と同じ <see cref="T:System.Windows.Media.Matrix" /> 構造体であるかどうかを判断します。</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare.">比較対象の <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure that is identical to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="o" /> が、この <see cref="T:System.Windows.Media.Matrix" /> 構造体と同じ <see cref="T:System.Windows.Media.Matrix" /> 構造体の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure is identical to this instance.">指定した <see cref="T:System.Windows.Media.Matrix" /> 構造体がこのインスタンスと同一であるかどうかを判断します。</summary>
      <param name="value" vsli:raw="The instance of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; to compare to this instance.">このインスタンスと比較する <see cref="T:System.Windows.Media.Matrix" /> のインスタンス。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">インスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary vsli:raw="Determines whether the two specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structures are identical.">指定した 2 つの <see cref="T:System.Windows.Media.Matrix" /> 構造体が同一かどうかを判断します。</summary>
      <param name="matrix1" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to compare.">比較する最初の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <param name="matrix2" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to compare.">比較する 2 番目の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;matrix1&quot; /&gt; and &lt;paramref name=&quot;matrix2&quot; /&gt; are identical; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="matrix1" /> と <paramref name="matrix2" /> が同一である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体のハッシュ コードを返します。</summary>
      <returns vsli:raw="The hash code for this instance.">対象のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Invert">
      <summary vsli:raw="Inverts this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体を反転します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure is not invertible.">
        <see cref="T:System.Windows.Media.Matrix" /> 構造体は反転できません。</exception>
    </member>
    <member name="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary vsli:raw="Multiplies a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure by another &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">
        <see cref="T:System.Windows.Media.Matrix" /> 構造体に別の <see cref="T:System.Windows.Media.Matrix" /> 構造体を乗算します。</summary>
      <param name="trans1" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to multiply.">最初に乗算する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <param name="trans2" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to multiply.">2 番目に乗算する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <returns vsli:raw="The result of multiplying &lt;paramref name=&quot;trans1&quot; /&gt; by &lt;paramref name=&quot;trans2&quot; /&gt;.">
        <paramref name="trans1" /> と <paramref name="trans2" /> を乗算した結果。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary vsli:raw="Determines whether the two specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structures are identical.">指定した 2 つの <see cref="T:System.Windows.Media.Matrix" /> 構造体が同一かどうかを判断します。</summary>
      <param name="matrix1" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to compare.">比較する最初の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <param name="matrix2" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to compare.">比較する 2 番目の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;matrix1&quot; /&gt; and &lt;paramref name=&quot;matrix2&quot; /&gt; are identical; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="matrix1" /> と <paramref name="matrix2" /> が同一である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary vsli:raw="Determines whether the two specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structures are not identical.">指定した 2 つの <see cref="T:System.Windows.Media.Matrix" /> 構造体が異なるかどうかを判断します。</summary>
      <param name="matrix1" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to compare.">比較する最初の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <param name="matrix2" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to compare.">比較する 2 番目の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;matrix1&quot; /&gt; and &lt;paramref name=&quot;matrix2&quot; /&gt; are not identical; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="matrix1" /> と <paramref name="matrix2" /> が異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary vsli:raw="Multiplies a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure by another &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">
        <see cref="T:System.Windows.Media.Matrix" /> 構造体に別の <see cref="T:System.Windows.Media.Matrix" /> 構造体を乗算します。</summary>
      <param name="trans1" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to multiply.">最初に乗算する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <param name="trans2" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to multiply.">2 番目に乗算する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
      <returns vsli:raw="The result of multiplying &lt;paramref name=&quot;trans1&quot; /&gt; by &lt;paramref name=&quot;trans2&quot; /&gt;.">
        <paramref name="trans1" /> と <paramref name="trans2" /> を乗算した結果。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Parse(System.String)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; representation of a matrix into the equivalent &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">行列の <see cref="T:System.String" /> 表現を、等価の <see cref="T:System.Windows.Media.Matrix" /> 構造体に変換します。</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; representation of the matrix.">行列の <see cref="T:System.String" /> 表現。</param>
      <returns vsli:raw="The equivalent &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">等価の <see cref="T:System.Windows.Media.Matrix" /> 構造体。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)">
      <summary vsli:raw="Prepends the specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure onto this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">指定した <see cref="T:System.Windows.Media.Matrix" /> 構造体をこの <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
      <param name="matrix" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to prepend to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加する <see cref="T:System.Windows.Media.Matrix" /> 構造体。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Rotate(System.Double)">
      <summary vsli:raw="Applies a rotation of the specified angle about the origin of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体の原点を中心とする指定した角度の回転を適用します。</summary>
      <param name="angle" vsli:raw="The angle of rotation.">回転角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)">
      <summary vsli:raw="Rotates this matrix about the specified point.">指定した点を中心にこの行列を回転します。</summary>
      <param name="angle" vsli:raw="The angle, in degrees, by which to rotate this matrix.">この行列を回転する角度。</param>
      <param name="centerX" vsli:raw="The x-coordinate of the point about which to rotate this matrix.">この行列の回転の中心とする点の x 座標。</param>
      <param name="centerY" vsli:raw="The y-coordinate of the point about which to rotate this matrix.">この行列の回転の中心とする点の y 座標。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
      <summary vsli:raw="Prepends a rotation of the specified angle at the specified point to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">指定した点における指定した角度の回転を、この <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
      <param name="angle" vsli:raw="The rotation angle, in degrees.">回転角度。</param>
      <param name="centerX" vsli:raw="The x-coordinate of the rotation center.">回転の中心の x 座標。</param>
      <param name="centerY" vsli:raw="The y-coordinate of the rotation center.">回転の中心の y 座標。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)">
      <summary vsli:raw="Prepends a rotation of the specified angle to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">指定した角度の回転を、この <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
      <param name="angle" vsli:raw="The angle of rotation to prepend.">前に付加する回転角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)">
      <summary vsli:raw="Appends the specified scale vector to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">指定したスケールのベクターを <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加します。</summary>
      <param name="scaleX" vsli:raw="The value by which to scale this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the x-axis.">この <see cref="T:System.Windows.Media.Matrix" /> を x 軸に沿ってスケーリングする際に使用する値。</param>
      <param name="scaleY" vsli:raw="The value by which to scale this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the y-axis.">この <see cref="T:System.Windows.Media.Matrix" /> を y 軸に沿ってスケーリングする際に使用する値。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
      <summary vsli:raw="Scales this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; by the specified amount about the specified point.">この <see cref="T:System.Windows.Media.Matrix" /> を、指定した点を中心として指定した量だけスケーリングします。</summary>
      <param name="scaleX" vsli:raw="The amount by which to scale this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the x-axis.">この <see cref="T:System.Windows.Media.Matrix" /> を x 軸に沿ってスケーリングする量。</param>
      <param name="scaleY" vsli:raw="The amount by which to scale this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the y-axis.">この <see cref="T:System.Windows.Media.Matrix" /> を y 軸に沿ってスケーリングする量。</param>
      <param name="centerX" vsli:raw="The x-coordinate of the scale operation's center point.">スケーリング操作の中心点の x 座標。</param>
      <param name="centerY" vsli:raw="The y-coordinate of the scale operation's center point.">スケーリング操作の中心点の y 座標。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
      <summary vsli:raw="Prepends the specified scale about the specified point of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">この <see cref="T:System.Windows.Media.Matrix" /> の指定した点を中心とする指定したスケールを前に付加します。</summary>
      <param name="scaleX" vsli:raw="The x-axis scale factor.">x 軸のスケール ファクター。</param>
      <param name="scaleY" vsli:raw="The y-axis scale factor.">y 軸のスケール ファクター。</param>
      <param name="centerX" vsli:raw="The x-coordinate of the point about which the scale operation is performed.">スケーリング操作が実行される点の x 座標。</param>
      <param name="centerY" vsli:raw="The y-coordinate of the point about which the scale operation is performed.">スケーリング操作が実行される点の y 座標。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)">
      <summary vsli:raw="Prepends the specified scale vector to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">指定したスケールのベクターをこの <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
      <param name="scaleX" vsli:raw="The value by which to scale this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure along the x-axis.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体を x 軸に沿ってスケーリングする際に使用する値。</param>
      <param name="scaleY" vsli:raw="The value by which to scale this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure along the y-axis.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体を y 軸に沿ってスケーリングする際に使用する値。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SetIdentity">
      <summary vsli:raw="Changes this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure into an identity matrix.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体を恒等行列に変更します。</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)">
      <summary vsli:raw="Appends a skew of the specified degrees in the x and y dimensions to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">x 次元と y 次元の指定した角度の傾斜を、この <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加します。</summary>
      <param name="skewX" vsli:raw="The angle in the x dimension by which to skew this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">この <see cref="T:System.Windows.Media.Matrix" /> を傾斜させる際の x 次元の角度。</param>
      <param name="skewY" vsli:raw="The angle in the y dimension by which to skew this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">この <see cref="T:System.Windows.Media.Matrix" /> を傾斜させる際の y 次元の角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)">
      <summary vsli:raw="Prepends a skew of the specified degrees in the x and y dimensions to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">x 次元と y 次元の指定した角度の傾斜を、この <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
      <param name="skewX" vsli:raw="The angle in the x dimension by which to skew this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">この <see cref="T:System.Windows.Media.Matrix" /> を傾斜させる際の x 次元の角度。</param>
      <param name="skewY" vsli:raw="The angle in the y dimension by which to skew this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">この <see cref="T:System.Windows.Media.Matrix" /> を傾斜させる際の y 次元の角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Formats the value of the current instance using the specified format.">指定された書式を使用して現在のインスタンスの値を書式設定します。</summary>
      <param name="format" vsli:raw="The format to use.  &#xA;  &#xA; -or-  &#xA;  &#xA; A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) to use the default format defined for the type of the &lt;see cref=&quot;T:System.IFormattable&quot; /&gt; implementation.">使用する書式。  
  
- または - 
<see cref="T:System.IFormattable" /> 実装の型に対して定義されている既定の形式を使用するには null 参照 (Visual Basic では<see langword="Nothing" />)。</param>
      <param name="provider" vsli:raw="The provider to use to format the value.  &#xA;  &#xA; -or-  &#xA;  &#xA; A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.">値の書式設定に使用するプロバイダーです。  
  
- または - 
オペレーティング システムの現在のロケール設定から数値形式の情報を取得するための null 参照 (Visual Basic では <see langword="Nothing" />)。</param>
      <returns vsli:raw="The value of the current instance in the specified format.">指定された書式の現在のインスタンスの値。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.String&quot; /&gt; representation of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">この <see cref="T:System.String" /> 構造体の <see cref="T:System.Windows.Media.Matrix" /> 表現を作成します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the &lt;see cref=&quot;P:System.Windows.Media.Matrix.M11&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.M12&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.M21&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.M22&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.OffsetX&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Media.Matrix.OffsetY&quot; /&gt; values of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">この <see cref="T:System.String" /> の <see cref="P:System.Windows.Media.Matrix.M11" />、<see cref="P:System.Windows.Media.Matrix.M12" />、<see cref="P:System.Windows.Media.Matrix.M21" />、<see cref="P:System.Windows.Media.Matrix.M22" />、<see cref="P:System.Windows.Media.Matrix.OffsetX" />、および <see cref="P:System.Windows.Media.Matrix.OffsetY" /> の各値を格納する <see cref="T:System.Windows.Media.Matrix" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.String&quot; /&gt; representation of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure with culture-specific formatting information.">カルチャ固有の書式設定情報を使用して、この <see cref="T:System.String" /> 構造体の <see cref="T:System.Windows.Media.Matrix" /> 表現を作成します。</summary>
      <param name="provider" vsli:raw="The culture-specific formatting information.">カルチャ固有の書式設定情報。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the &lt;see cref=&quot;P:System.Windows.Media.Matrix.M11&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.M12&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.M21&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.M22&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.OffsetX&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Media.Matrix.OffsetY&quot; /&gt; values of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">この <see cref="T:System.String" /> の <see cref="P:System.Windows.Media.Matrix.M11" />、<see cref="P:System.Windows.Media.Matrix.M12" />、<see cref="P:System.Windows.Media.Matrix.M21" />、<see cref="P:System.Windows.Media.Matrix.M22" />、<see cref="P:System.Windows.Media.Matrix.OffsetX" />、および <see cref="P:System.Windows.Media.Matrix.OffsetY" /> の各値を格納する <see cref="T:System.Windows.Media.Matrix" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)">
      <summary vsli:raw="Transforms the specified point by the &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; and returns the result.">指定した点を <see cref="T:System.Windows.Media.Matrix" /> で変換し、その結果を返します。</summary>
      <param name="point" vsli:raw="The point to transform.">変換する点。</param>
      <returns vsli:raw="The result of transforming &lt;paramref name=&quot;point&quot; /&gt; by this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">この <see cref="T:System.Windows.Media.Matrix" /> によって <paramref name="point" /> を変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point[])">
      <summary vsli:raw="Transforms the specified points by this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">指定した点をこの <see cref="T:System.Windows.Media.Matrix" /> で変換します。</summary>
      <param name="points" vsli:raw="The points to transform. The original points in the array are replaced by their transformed values.">変換対象の点。 配列内の元の点は、変換後の値に置き換えられます。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector)">
      <summary vsli:raw="Transforms the specified vector by this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">指定したベクターをこの <see cref="T:System.Windows.Media.Matrix" /> で変換します。</summary>
      <param name="vector" vsli:raw="The vector to transform.">変換するベクトル。</param>
      <returns vsli:raw="The result of transforming &lt;paramref name=&quot;vector&quot; /&gt; by this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">この <see cref="T:System.Windows.Media.Matrix" /> によって <paramref name="vector" /> を変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector[])">
      <summary vsli:raw="Transforms the specified vectors by this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">指定したベクターをこの <see cref="T:System.Windows.Media.Matrix" /> で変換します。</summary>
      <param name="vectors" vsli:raw="The vectors to transform. The original vectors in the array are replaced by their transformed values.">変換するベクター。 配列内の元のベクターは、変換後の値に置き換えられます。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)">
      <summary vsli:raw="Appends a translation of the specified offsets to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">指定したオフセットの変換をこの <see cref="T:System.Windows.Media.Matrix" /> 構造体に追加します。</summary>
      <param name="offsetX" vsli:raw="The amount to offset this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the x-axis.">この <see cref="T:System.Windows.Media.Matrix" /> を x 軸に沿ってオフセットする量。</param>
      <param name="offsetY" vsli:raw="The amount to offset this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the y-axis.">この <see cref="T:System.Windows.Media.Matrix" /> を y 軸に沿ってオフセットする量。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)">
      <summary vsli:raw="Prepends a translation of the specified offsets to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">指定したオフセットの変換をこの <see cref="T:System.Windows.Media.Matrix" /> 構造体の前に付加します。</summary>
      <param name="offsetX" vsli:raw="The amount to offset this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the x-axis.">この <see cref="T:System.Windows.Media.Matrix" /> を x 軸に沿ってオフセットする量。</param>
      <param name="offsetY" vsli:raw="The amount to offset this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the y-axis.">この <see cref="T:System.Windows.Media.Matrix" /> を y 軸に沿ってオフセットする量。</param>
    </member>
    <member name="P:System.Windows.Media.Matrix.Determinant">
      <summary vsli:raw="Gets the determinant of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体の行列式を取得します。</summary>
      <returns vsli:raw="The determinant of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">この <see cref="T:System.Windows.Media.Matrix" /> の行列式。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.HasInverse">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure is invertible.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体が反転可能かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; has an inverse; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Windows.Media.Matrix" /> の逆が存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.Identity">
      <summary vsli:raw="Gets an identity &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">恒等 <see cref="T:System.Windows.Media.Matrix" /> を取得します。</summary>
      <returns vsli:raw="An identity matrix.">恒等行列。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.IsIdentity">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure is an identity matrix.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体が恒等行列かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure is an identity matrix; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Windows.Media.Matrix" /> 構造体が恒等行列の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M11">
      <summary vsli:raw="Gets or sets the value of the first row and first column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 1 行、第 1 列の値を取得または設定します。</summary>
      <returns vsli:raw="The value of the first row and first column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;. The default value is 1.">この <see cref="T:System.Windows.Media.Matrix" /> の第 1 行、第 1 列の値。 既定値は 1 です。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M12">
      <summary vsli:raw="Gets or sets the value of the first row and second column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 1 行、第 2 列の値を取得または設定します。</summary>
      <returns vsli:raw="The value of the first row and second column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;. The default value is 0.">この <see cref="T:System.Windows.Media.Matrix" /> の第 1 行、第 2 列の値。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M21">
      <summary vsli:raw="Gets or sets the value of the second row and first column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 2 行、第 1 列の値を取得または設定します。</summary>
      <returns vsli:raw="The value of the second row and first column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;. The default value is 0.">この <see cref="T:System.Windows.Media.Matrix" /> の第 2 行、第 1 列の値。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M22">
      <summary vsli:raw="Gets or sets the value of the second row and second column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 2 行、第 2 列の値を取得または設定します。</summary>
      <returns vsli:raw="The value of the second row and second column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure. The default value is 1.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 2 行、第 2 列の値。 既定値は 1 です。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetX">
      <summary vsli:raw="Gets or sets the value of the third row and first column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 3 行、第 1 列の値を取得または設定します。</summary>
      <returns vsli:raw="The value of the third row and first column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure. The default value is 0.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 3 行、第 1 列の値。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetY">
      <summary vsli:raw="Gets or sets the value of the third row and second column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 3 行、第 2 列の値を取得または設定します。</summary>
      <returns vsli:raw="The value of the third row and second column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure. The default value is 0.">この <see cref="T:System.Windows.Media.Matrix" /> 構造体の第 3 行、第 2 列の値。 既定値は 0 です。</returns>
    </member>
    <member name="T:System.Windows.Media.MatrixConverter">
      <summary vsli:raw="Converts instances of other types to and from a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">他の型のインスタンスと <see cref="T:System.Windows.Media.Matrix" /> の間の変換を行います。</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Windows.Media.MatrixConverter&quot; /&gt;.">
        <see cref="T:System.Windows.Media.MatrixConverter" /> の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object can be converted from a specific type to an instance of a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">特定の型のオブジェクトを <see cref="T:System.Windows.Media.Matrix" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="The context information of a type.">型のコンテキスト情報。</param>
      <param name="sourceType" vsli:raw="The type of the source that is being evaluated for conversion.">評価対象となる変換元の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted to a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型を <see cref="T:System.Windows.Media.Matrix" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; can be converted to a different type.">
        <see cref="T:System.Windows.Media.Matrix" /> のインスタンスを別の型に変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="The context information of a type.">型のコンテキスト情報。</param>
      <param name="destinationType" vsli:raw="The desired type this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; is being evaluated for conversion.">この <see cref="T:System.Windows.Media.Matrix" /> が変換元として評価されるときの変換先の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; can be converted to &lt;paramref name=&quot;destinationType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この <see cref="T:System.Windows.Media.Matrix" /> を <paramref name="destinationType" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified object to a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">指定したオブジェクトから <see cref="T:System.Windows.Media.Matrix" /> への変換を試みます。</summary>
      <param name="context" vsli:raw="The context information of a type.">型のコンテキスト情報。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the type being converted.">変換対象の型の <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The object being converted.">変換されるオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The specified object is null or is a type that cannot be converted to a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">指定したオブジェクトが null であるか、または <see cref="T:System.Windows.Media.Matrix" /> に変換できない型です。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; created from converting &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> の変換によって作成された <see cref="T:System.Windows.Media.Matrix" />。</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; to a specified type.">
        <see cref="T:System.Windows.Media.Matrix" /> から指定した型への変換を試みます。</summary>
      <param name="context" vsli:raw="The context information of a type.">型のコンテキスト情報。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the type being converted.">変換対象の型の <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; to convert.">変換対象の <see cref="T:System.Windows.Media.Matrix" />。</param>
      <param name="destinationType" vsli:raw="The type to convert this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; to.">この <see cref="T:System.Windows.Media.Matrix" /> の変換先の型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; is null or is not a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;, or the &lt;paramref name=&quot;destinationType&quot; /&gt; is not a valid conversion type.">
        <paramref name="value" /> が null であるか、または <see cref="T:System.Windows.Media.Matrix" /> ではありません。または <paramref name="destinationType" /> が有効な変換型ではありません。</exception>
      <returns vsli:raw="The object created from converting this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">この <see cref="T:System.Windows.Media.Matrix" /> の変換によって作成されたオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormattingMode">
      <summary vsli:raw="Defines the formatting methods supported by the &lt;see cref=&quot;T:System.Windows.Media.TextFormatting.TextFormatter&quot; /&gt; class.">
        <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> クラスでサポートされている書式設定メソッドを定義します。</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormattingMode.Display">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Windows.Media.TextFormatting.TextFormatter&quot; /&gt; lays out text by using GDI-compatible font metrics.">GDI と互換性のあるフォント メトリックを使用して、<see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> がテキストをレイアウトすることを示します。</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormattingMode.Ideal">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Windows.Media.TextFormatting.TextFormatter&quot; /&gt; lays out text by using ideal font metrics.">適切なフォント メトリックを使用して、<see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> がテキストをレイアウトすることを示します。</summary>
    </member>
    <member name="T:System.Windows.NameScope">
      <summary vsli:raw="Implements base WPF support for the &lt;see cref=&quot;T:System.Windows.Markup.INameScope&quot; /&gt; methods that store or retrieve name-object mappings into a particular XAML namescope. Adds attached property support to make it simpler to get or set XAML namescope names dynamically at the element level.">名前とオブジェクトのマッピングを特定の XAML 名前スコープに格納するか、特定の XAML 名前スコープから取得する <see cref="T:System.Windows.Markup.INameScope" /> メソッドの基本 WPF サポートを実装します。 XAML 名前スコープの名前を要素レベルで動的に取得または設定しやすくするために、添付プロパティのサポートを追加します。</summary>
    </member>
    <member name="F:System.Windows.NameScope.NameScopeProperty">
      <summary vsli:raw="Identifies the &lt;see cref=&quot;P:System.Windows.NameScope.NameScope&quot; /&gt; attached property.">
        <see cref="P:System.Windows.NameScope.NameScope" /> 添付プロパティを識別します。</summary>
    </member>
    <member name="M:System.Windows.NameScope.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; class.">
        <see cref="T:System.Windows.NameScope" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary vsli:raw="Adds an item to the collection.">項目をコレクションに追加します。</summary>
      <param name="item" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; (key is &lt;see cref=&quot;T:System.String&quot; /&gt;, value is &lt;see cref=&quot;T:System.Object&quot; /&gt;) that represents the name mapping to add to the XAML namescope.">XAML 名前スコープに追加する名前のマッピングを表す <see cref="T:System.Collections.Generic.KeyValuePair`2" /> (キーは <see cref="T:System.String" />、値は <see cref="T:System.Object" />)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Either or both components of &lt;paramref name=&quot;item&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="item" /> のいずれかまたは両方のコンポーネントが <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.String,System.Object)">
      <summary vsli:raw="Adds an item to the collection.">項目をコレクションに追加します。</summary>
      <param name="key" vsli:raw="The string key, which is the name of the XAML namescope mapping to add.">追加する XAML 名前スコープ マッピングの名前である文字列キー。</param>
      <param name="value" vsli:raw="The object value, which is the object reference of the XAML namescope mapping to add.">追加する XAML 名前スコープ マッピングのオブジェクト参照であるオブジェクト値。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> または <paramref name="value" /> が <see langword="null" /> です。</exception>
    </member>
    <member name="M:System.Windows.NameScope.Clear">
      <summary vsli:raw="Removes all items from the collection.">コレクションからすべての項目を削除します。</summary>
    </member>
    <member name="M:System.Windows.NameScope.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary vsli:raw="Determines whether the collection contains a specified item.">指定された項目がコレクションに含まれているかどうかを確認します。</summary>
      <param name="item" vsli:raw="The item to find in the collection, specified as a &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; (key is &lt;see cref=&quot;T:System.String&quot; /&gt;, value is &lt;see cref=&quot;T:System.Object&quot; /&gt;).">コレクション内で検索する項目。<see cref="T:System.Collections.Generic.KeyValuePair`2" /> として指定します (キーは <see cref="T:System.String" />、値は <see cref="T:System.Object" />)。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; identifies an existing mapping in this &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; . &lt;see langword=&quot;false&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; does not exist in the current &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt;.">指定した <see cref="T:System.Collections.Generic.KeyValuePair`2" /> がこの <see cref="T:System.Windows.NameScope" /> 内の既存のマッピングを識別する場合は <see langword="true" />。 指定した <see cref="T:System.Collections.Generic.KeyValuePair`2" /> が現在の <see cref="T:System.Windows.NameScope" /> に存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.NameScope.ContainsKey(System.String)">
      <summary vsli:raw="Returns whether a provided name already exists in this &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt;.">指定した名前がこの <see cref="T:System.Windows.NameScope" /> に存在するかどうかを示す値を返します。</summary>
      <param name="key" vsli:raw="The string key to find.">検索する文字列キー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;paramref name=&quot;key&quot; /&gt; identifies a name for an existing mapping in this &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt;. &lt;see langword=&quot;false&quot; /&gt; if the specified &lt;paramref name=&quot;key&quot; /&gt; does not exist in the current &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt;.">指定した <paramref name="key" /> がこの <see cref="T:System.Windows.NameScope" /> 内の既存のマッピングの名前を識別する場合は <see langword="true" />。 指定した <paramref name="key" /> が現在の <see cref="T:System.Windows.NameScope" /> に存在しない場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.NameScope.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">特定の配列インデックスを開始位置として、配列にコレクションの要素をコピーします。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the collection The array must have zero-based indexing.">コレクションから要素がコピーされる先の 1 次元配列。配列のインデックス番号は 0 から始まっている必要があります。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">コピーの開始位置とする <paramref name="array" /> のインデックス (0 から始まる)。</param>
    </member>
    <member name="M:System.Windows.NameScope.FindName(System.String)">
      <summary vsli:raw="Returns the corresponding object in the XAML namescope maintained by this &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt;, based on a provided name string.">この <see cref="T:System.Windows.NameScope" /> によって保守され、提供された名前文字列に基づいている XAML 名前スコープの対応するオブジェクトを返します。</summary>
      <param name="name" vsli:raw="Name portion of an existing mapping to retrieve the object portion for.">オブジェクト部分を取得する既存のマッピングの名前部分です。</param>
      <returns vsli:raw="The requested object that is mapped with &lt;paramref name=&quot;name&quot; /&gt;. Can return &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;name&quot; /&gt; was provided as &lt;see langword=&quot;null&quot; /&gt; or empty string, or if no matching object was found.">
        <paramref name="name" /> でマップされる要求したオブジェクト。 <paramref name="name" /> が <see langword="null" /> または空の文字列として提供された場合、または一致するオブジェクトが見つからなかった場合に、<see langword="null" /> が返されることがあります。</returns>
    </member>
    <member name="M:System.Windows.NameScope.GetNameScope(System.Windows.DependencyObject)">
      <summary vsli:raw="Provides the attached property get accessor for the &lt;see cref=&quot;P:System.Windows.NameScope.NameScope&quot; /&gt; attached property.">
        <see cref="P:System.Windows.NameScope.NameScope" /> 添付プロパティの添付プロパティ get アクセサーを提供します。</summary>
      <param name="dependencyObject" vsli:raw="The object to get the XAML namescope from.">XAML 名前スコープの取得元オブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dependencyObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dependencyObject" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="A XAML namescope, as an &lt;see cref=&quot;T:System.Windows.Markup.INameScope&quot; /&gt; instance.">
        <see cref="T:System.Windows.Markup.INameScope" /> インスタンスとしての XAML 名前スコープ。</returns>
    </member>
    <member name="M:System.Windows.NameScope.RegisterName(System.String,System.Object)">
      <summary vsli:raw="Registers a new name-object pair into the current XAML namescope.">現在の XAML 名前スコープに新しい名前とオブジェクトのペアを登録します。</summary>
      <param name="name" vsli:raw="The name to use for mapping the given object.">指定したオブジェクトのマッピングに使用する名前。</param>
      <param name="scopedElement" vsli:raw="The object to be mapped to the provided name.">指定された名前にマップするオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;scopedElement&quot; /&gt; was provided as &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> または <paramref name="scopedElement" /> は <see langword="null" /> として指定されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; was provided as empty string  &#xA;  &#xA;-or-&#xA;  &#xA; &lt;paramref name=&quot;name&quot; /&gt; provided was rejected by the parser, because it contained characters that are invalid for a XAML name  &#xA;  &#xA;-or-&#xA;  &#xA; &lt;paramref name=&quot;name&quot; /&gt; provided would result in a duplicate name registration.">
        <paramref name="name" /> は空の文字列として指定されました。 
- または - 
 指定された <paramref name="name" /> は、XAML 名として無効な文字が含まれているため、パーサーによって拒否されました 
- または - 
 指定された <paramref name="name" /> によって、重複する名前が登録されます。</exception>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary vsli:raw="Removes the specific object from the collection.">特定のオブジェクトをコレクションから削除します。</summary>
      <param name="item" vsli:raw="The object to remove from the collection, specified as a &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; (key is &lt;see cref=&quot;T:System.String&quot; /&gt;, value is &lt;see cref=&quot;T:System.Object&quot; /&gt;).">コレクションから削除するオブジェクト。<see cref="T:System.Collections.Generic.KeyValuePair`2" /> として指定します (キーは <see cref="T:System.String" />、値は <see cref="T:System.Object" />)。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the collection, otherwise &lt;see langword=&quot;false&quot; /&gt;. Also returns &lt;see langword=&quot;false&quot; /&gt; if the item was not found in the collection.">コレクションから項目が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 項目がコレクション内に見つからなかった場合も <see langword="false" /> が返されます。</returns>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.String)">
      <summary vsli:raw="Removes a mapping for a specified name from the collection.">指定した名前のマッピングをコレクションから削除します。</summary>
      <param name="key" vsli:raw="The string key, which is the name of the XAML namescope mapping to remove.">削除する XAML 名前スコープ マッピングの名前である文字列キー。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the collection, otherwise &lt;see langword=&quot;false&quot; /&gt;. Also returns &lt;see langword=&quot;false&quot; /&gt; if the item was not found in the collection.">コレクションから項目が正常に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 項目がコレクション内に見つからなかった場合も <see langword="false" /> が返されます。</returns>
    </member>
    <member name="M:System.Windows.NameScope.SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)">
      <summary vsli:raw="Provides the attached property set accessor for the &lt;see cref=&quot;P:System.Windows.NameScope.NameScope&quot; /&gt; attached property.">
        <see cref="P:System.Windows.NameScope.NameScope" /> 添付プロパティの添付プロパティ set アクセサーを提供します。</summary>
      <param name="dependencyObject" vsli:raw="Object to change XAML namescope for.">XAML 名前スコープを変更する対象のオブジェクト。</param>
      <param name="value" vsli:raw="The new XAML namescope, using an interface cast.">インターフェイスのキャストを使用した新しい XAML 名前スコープ。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dependencyObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dependencyObject" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that iterates through a collection.">コレクションを反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">コレクションを反復処理する列挙子を返します。</summary>
      <returns vsli:raw="An enumerator that iterates through a collection.">コレクションを反復処理する列挙子。</returns>
    </member>
    <member name="M:System.Windows.NameScope.TryGetValue(System.String,System.Object@)">
      <summary vsli:raw="Gets the value associated with the specified key.">指定したキーに関連付けられている値を取得します。</summary>
      <param name="key" vsli:raw="The key of the value to get.">取得する値のキー。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, a null object. This parameter is passed uninitialized.">このメソッドから制御が戻るとき、指定されたキーが見つかった場合は、そのキーに関連付けられている値が格納されます。それ以外の場合は null オブジェクトになります。 このパラメーターは初期化せずに渡されます。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; contains a mapping for the name provided as &lt;paramref name=&quot;key&quot; /&gt;. Otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="key" /> として指定された名前のマッピングが <see cref="T:System.Windows.NameScope" /> に存在する場合は <see langword="true" />。 それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.NameScope.UnregisterName(System.String)">
      <summary vsli:raw="Removes a name-object mapping from the XAML namescope.">XAML 名前スコープから名前とオブジェクトのマッピングを削除します。</summary>
      <param name="name" vsli:raw="The name of the mapping to remove.">削除するマッピングの名前。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; was provided as empty string.  &#xA;  &#xA;-or-&#xA;  &#xA; &lt;paramref name=&quot;name&quot; /&gt; provided had not been registered.">
        <paramref name="name" /> は空の文字列として指定されました。  
  
- または - 
 指定した <paramref name="name" /> は登録されていません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> が <see langword="null" />です。</exception>
    </member>
    <member name="P:System.Windows.NameScope.Count">
      <summary vsli:raw="Returns the number of items in the collection of mapped names in this &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt;.">この <see cref="T:System.Windows.NameScope" /> 内の、マップされた名前のコレクションに含まれる項目の数を返します。</summary>
      <returns vsli:raw="The number of items in the collection.">コレクション内の項目数。</returns>
    </member>
    <member name="P:System.Windows.NameScope.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">コレクションが読み取り専用かどうかを示す値を取得します。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">常に <see langword="false" /> を返します。</returns>
    </member>
    <member name="P:System.Windows.NameScope.Item(System.String)">
      <summary vsli:raw="Gets or sets the item with the specified key.">指定したキーを持つ項目を取得または設定します。</summary>
      <param name="key" vsli:raw="The string name for the XAML name mapping to get or set.">取得または設定する XAML 名前マッピングの名前文字列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is provided as &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is provided as &lt;see langword=&quot;null&quot; /&gt; for a set operation.">
        <paramref name="key" /> は <see langword="null" /> として提供されます。  
  
- または - 
 <paramref name="value" /> は、設定操作に対して <see langword="null" /> として提供されます。</exception>
      <returns vsli:raw="The value of the object mapped by the XAML name provided as &lt;paramref name=&quot;key&quot; /&gt;.">
        <paramref name="key" /> として指定された XAML 名に対応付けられるオブジェクトの値。</returns>
    </member>
    <member name="P:System.Windows.NameScope.Keys">
      <summary vsli:raw="Gets a collection of the keys in the &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; dictionary.">
        <see cref="T:System.Windows.NameScope" /> ディクショナリのキーのコレクションを取得します。</summary>
      <returns vsli:raw="A collection of the keys in the &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; dictionary.">
        <see cref="T:System.Windows.NameScope" /> ディクショナリのキーのコレクション。</returns>
    </member>
    <member name="P:System.Windows.NameScope.NameScope">
      <summary vsli:raw="Gets or sets dynamically attached &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; instances.">動的にアタッチされた <see cref="T:System.Windows.NameScope" /> インスタンスを取得または設定します。</summary>
    </member>
    <member name="P:System.Windows.NameScope.Values">
      <summary vsli:raw="Gets a collection of the values in the &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; dictionary.">
        <see cref="T:System.Windows.NameScope" /> ディクショナリの値のコレクションを取得します。</summary>
      <returns vsli:raw="A collection of the values in the &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; dictionary.">
        <see cref="T:System.Windows.NameScope" /> ディクショナリの値のコレクション。</returns>
    </member>
    <member name="T:System.Windows.Point">
      <summary vsli:raw="Represents an x- and y-coordinate pair in two-dimensional space.">2 次元空間における、x 座標と y 座標の組を表します。</summary>
    </member>
    <member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure that contains the specified coordinates.">指定した座標を含む新しい <see cref="T:System.Windows.Point" /> 構造体を作成します。</summary>
      <param name="x" vsli:raw="The x-coordinate of the new &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">新しい <see cref="T:System.Windows.Point" /> 構造体の x 座標。</param>
      <param name="y" vsli:raw="The y-coordinate of the new &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">新しい <see cref="T:System.Windows.Point" /> 構造体の y 座標。</param>
    </member>
    <member name="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; to a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; and returns the result as a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">
        <see cref="T:System.Windows.Vector" /> を <see cref="T:System.Windows.Point" /> に加算し、その結果を <see cref="T:System.Windows.Point" /> 構造体として返します。</summary>
      <param name="point" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure to add.">加算する <see cref="T:System.Windows.Point" /> 構造体。</param>
      <param name="vector" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure to add.">加算する <see cref="T:System.Windows.Vector" /> 構造体。</param>
      <returns vsli:raw="Returns the sum of &lt;paramref name=&quot;point&quot; /&gt; and &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="point" /> と <paramref name="vector" /> の合計が返されます。</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; and whether it contains the same coordinates as this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">指定した <see cref="T:System.Object" /> が <see cref="T:System.Windows.Point" /> であり、この <see cref="T:System.Windows.Point" /> と同じ座標を含んでいるかどうかを判断します。</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare.">比較対象の <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; and contains the same &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; values as this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="o" /> が <see cref="T:System.Windows.Point" /> であり、この <see cref="P:System.Windows.Point.X" /> と同じ <see cref="P:System.Windows.Point.Y" /> 値と <see cref="T:System.Windows.Point" /> 値を含んでいる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structures for equality.">2 つの <see cref="T:System.Windows.Point" /> 構造体を比較して、等しいかどうかを確認します。</summary>
      <param name="value" vsli:raw="The point to compare to this instance.">このインスタンスと比較するポイント。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if both &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structures contain the same &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; values; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">両方の <see cref="T:System.Windows.Point" /> 構造体が同じ <see cref="P:System.Windows.Point.X" /> 値と <see cref="P:System.Windows.Point.Y" /> 値を含む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structures for equality.">2 つの <see cref="T:System.Windows.Point" /> 構造体を比較して、等しいかどうかを確認します。</summary>
      <param name="point1" vsli:raw="The first point to compare.">最初に比較するポイント。</param>
      <param name="point2" vsli:raw="The second point to compare.">2 番目に比較するポイント。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;point1&quot; /&gt; and &lt;paramref name=&quot;point2&quot; /&gt; contain the same &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; values; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="point1" /> と <paramref name="point2" /> が同じ <see cref="P:System.Windows.Point.X" /> 値と <see cref="P:System.Windows.Point.Y" /> 値を含む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">この <see cref="T:System.Windows.Point" /> のハッシュ コードを返します。</summary>
      <returns vsli:raw="The hash code for this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">この <see cref="T:System.Windows.Point" /> 構造体のハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary vsli:raw="Transforms the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure by the specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">指定した <see cref="T:System.Windows.Point" /> 構造体を、指定した <see cref="T:System.Windows.Media.Matrix" /> 構造体で変換します。</summary>
      <param name="point" vsli:raw="The point to transform.">変換する点。</param>
      <param name="matrix" vsli:raw="The transformation matrix.">変換行列。</param>
      <returns vsli:raw="The transformed point.">変換されたポイント。</returns>
    </member>
    <member name="M:System.Windows.Point.Offset(System.Double,System.Double)">
      <summary vsli:raw="Offsets a point's &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; coordinates by the specified amounts.">ポイントの <see cref="P:System.Windows.Point.X" /> 座標と <see cref="P:System.Windows.Point.Y" /> 座標を、指定した量だけオフセットします。</summary>
      <param name="offsetX" vsli:raw="The amount to offset the point's &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; coordinate.">ポイントの <see cref="P:System.Windows.Point.X" /> 座標をオフセットする量。</param>
      <param name="offsetY" vsli:raw="The amount to offset the point's &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; coordinate.">ポイントの <see cref="P:System.Windows.Point.Y" /> 座標をオフセットする量。</param>
    </member>
    <member name="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)">
      <summary vsli:raw="Translates the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; by the specified &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; and returns the result.">指定した <see cref="T:System.Windows.Point" /> を指定した <see cref="T:System.Windows.Vector" /> で変換し、その結果を返します。</summary>
      <param name="point" vsli:raw="The point to translate.">変換対象のポイント。</param>
      <param name="vector" vsli:raw="The amount by which to translate &lt;paramref name=&quot;point&quot; /&gt;.">
        <paramref name="point" /> を変換する量。</param>
      <returns vsli:raw="The result of translating the specified point by the specified vector.">指定したポイントを指定したベクターで変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structures for equality.">2 つの <see cref="T:System.Windows.Point" /> 構造体を比較して、等しいかどうかを確認します。</summary>
      <param name="point1" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure to compare.">比較する最初の <see cref="T:System.Windows.Point" /> 構造体。</param>
      <param name="point2" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure to compare.">比較する 2 番目の <see cref="T:System.Windows.Point" /> 構造体。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if both the &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; coordinates of &lt;paramref name=&quot;point1&quot; /&gt; and &lt;paramref name=&quot;point2&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="point1" /> および <paramref name="point2" /> の <see cref="P:System.Windows.Point.X" /> 座標と <see cref="P:System.Windows.Point.Y" /> 座標が等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Size">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure with a &lt;see cref=&quot;P:System.Windows.Size.Width&quot; /&gt; equal to this point's &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; value and a &lt;see cref=&quot;P:System.Windows.Size.Height&quot; /&gt; equal to this point's &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; value.">このポイントの <see cref="T:System.Windows.Size" /> 値と等しい <see cref="P:System.Windows.Size.Width" /> と、このポイントの <see cref="P:System.Windows.Point.X" /> 値と等しい <see cref="P:System.Windows.Size.Height" /> を持つ <see cref="P:System.Windows.Point.Y" /> 構造体を作成します。</summary>
      <param name="point" vsli:raw="The point to convert.">変換対象の点。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure with a &lt;see cref=&quot;P:System.Windows.Size.Width&quot; /&gt; equal to this point's &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; value and a &lt;see cref=&quot;P:System.Windows.Size.Height&quot; /&gt; equal to this point's &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; value.">このポイントの <see cref="T:System.Windows.Size" /> 値と等しい <see cref="P:System.Windows.Size.Width" /> と、このポイントの <see cref="P:System.Windows.Point.X" /> 値と等しい <see cref="P:System.Windows.Size.Height" /> を持つ <see cref="P:System.Windows.Point.Y" /> 構造体。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Vector">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure with an &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; value equal to the point's &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; value and a &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; value equal to the point's &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; value.">ポイントの <see cref="T:System.Windows.Vector" /> 値と等しい <see cref="P:System.Windows.Vector.X" /> 値と、ポイントの <see cref="P:System.Windows.Point.X" /> 値と等しい <see cref="P:System.Windows.Vector.Y" /> 値を持つ <see cref="P:System.Windows.Point.Y" /> 構造体を作成します。</summary>
      <param name="point" vsli:raw="The point to convert.">変換対象の点。</param>
      <returns vsli:raw="A vector with an &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; value equal to the point's &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; value and a &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; value equal to the point's &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; value.">ポイントの <see cref="P:System.Windows.Vector.X" /> 値と等しい <see cref="P:System.Windows.Point.X" /> 値と、ポイントの <see cref="P:System.Windows.Vector.Y" /> 値と等しい <see cref="P:System.Windows.Point.Y" /> 値を持つベクター。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structures for inequality.">2 つの <see cref="T:System.Windows.Point" /> 構造体を比較し、等しくないかどうかを確認します。</summary>
      <param name="point1" vsli:raw="The first point to compare.">最初に比較するポイント。</param>
      <param name="point2" vsli:raw="The second point to compare.">2 番目に比較するポイント。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;point1&quot; /&gt; and &lt;paramref name=&quot;point2&quot; /&gt; have different &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; or &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; coordinates; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;point1&quot; /&gt; and &lt;paramref name=&quot;point2&quot; /&gt; have the same &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; coordinates.">
        <paramref name="point1" /> と <paramref name="point2" /> の <see cref="P:System.Windows.Point.X" /> 座標または <see cref="P:System.Windows.Point.Y" /> 座標が異なる場合は <see langword="true" />。<paramref name="point1" /> と <paramref name="point2" /> の <see cref="P:System.Windows.Point.X" /> 座標と <see cref="P:System.Windows.Point.Y" /> 座標が同じ場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary vsli:raw="Transforms the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; by the specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">指定した <see cref="T:System.Windows.Point" /> を指定した <see cref="T:System.Windows.Media.Matrix" /> で変換します。</summary>
      <param name="point" vsli:raw="The point to transform.">変換する点。</param>
      <param name="matrix" vsli:raw="The transformation matrix.">変換行列。</param>
      <returns vsli:raw="The result of transforming the specified point using the specified matrix.">指定したポイントを指定した行列を使用して変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)">
      <summary vsli:raw="Subtracts the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; from another specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; and returns the difference as a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">指定した <see cref="T:System.Windows.Point" /> を、指定した別の <see cref="T:System.Windows.Point" /> から減算し、その差を <see cref="T:System.Windows.Vector" /> として返します。</summary>
      <param name="point1" vsli:raw="The point from which &lt;paramref name=&quot;point2&quot; /&gt; is subtracted.">
        <paramref name="point2" /> を減算するポイント。</param>
      <param name="point2" vsli:raw="The point to subtract from &lt;paramref name=&quot;point1&quot; /&gt;.">
        <paramref name="point1" /> から減算するポイント。</param>
      <returns vsli:raw="The difference between &lt;paramref name=&quot;point1&quot; /&gt; and &lt;paramref name=&quot;point2&quot; /&gt;.">
        <paramref name="point1" /> と <paramref name="point2" /> の差。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)">
      <summary vsli:raw="Subtracts the specified &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; from the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; and returns the resulting &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">指定した <see cref="T:System.Windows.Vector" /> を指定した <see cref="T:System.Windows.Point" /> から減算し、結果の <see cref="T:System.Windows.Point" /> を返します。</summary>
      <param name="point" vsli:raw="The point from which &lt;paramref name=&quot;vector&quot; /&gt; is subtracted.">
        <paramref name="vector" /> を減算するポイント。</param>
      <param name="vector" vsli:raw="The vector to subtract from &lt;paramref name=&quot;point1&quot; /&gt;.">
        <paramref name="point1" /> から減算するベクター。</param>
      <returns vsli:raw="The difference between &lt;paramref name=&quot;point&quot; /&gt; and &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="point" /> と <paramref name="vector" /> の差。</returns>
    </member>
    <member name="M:System.Windows.Point.Parse(System.String)">
      <summary vsli:raw="Constructs a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; from the specified &lt;see cref=&quot;T:System.String&quot; /&gt;.">指定した <see cref="T:System.Windows.Point" /> から <see cref="T:System.String" /> を構築します。</summary>
      <param name="source" vsli:raw="A string representation of a point.">ポイントの文字列表現。</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is not composed of two comma- or space-delimited double values.">
        <paramref name="source" /> がコンマまたはスペースで区切られた 2 つの Double 値で構成されていません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; does not contain two numbers.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;source&quot; /&gt; contains too many delimiters.">
        <paramref name="source" /> に 2 つの数値が含まれていません。  
  
- または - 
 <paramref name="source" /> に含まれている区切り記号が多すぎます。</exception>
      <returns vsli:raw="The equivalent &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">等価の <see cref="T:System.Windows.Point" /> 構造体。</returns>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)">
      <summary vsli:raw="Subtracts the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; from another specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; and returns the difference as a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">指定した <see cref="T:System.Windows.Point" /> を、指定した別の <see cref="T:System.Windows.Point" /> から減算し、その差を <see cref="T:System.Windows.Vector" /> として返します。</summary>
      <param name="point1" vsli:raw="The point from which &lt;paramref name=&quot;point2&quot; /&gt; is subtracted.">
        <paramref name="point2" /> を減算するポイント。</param>
      <param name="point2" vsli:raw="The point to subtract from &lt;paramref name=&quot;point1&quot; /&gt;.">
        <paramref name="point1" /> から減算するポイント。</param>
      <returns vsli:raw="The difference between &lt;paramref name=&quot;point1&quot; /&gt; and &lt;paramref name=&quot;point2&quot; /&gt;.">
        <paramref name="point1" /> と <paramref name="point2" /> の差。</returns>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)">
      <summary vsli:raw="Subtracts the specified &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; from the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; and returns the resulting &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">指定した <see cref="T:System.Windows.Vector" /> を指定した <see cref="T:System.Windows.Point" /> から減算し、結果の <see cref="T:System.Windows.Point" /> を返します。</summary>
      <param name="point" vsli:raw="The point from which &lt;paramref name=&quot;vector&quot; /&gt; is subtracted.">
        <paramref name="vector" /> を減算するポイント。</param>
      <param name="vector" vsli:raw="The &lt;paramref name=&quot;vector&quot; /&gt; to subtract from &lt;paramref name=&quot;point&quot; /&gt;.">
        <paramref name="vector" /> から減算する <paramref name="point" />。</param>
      <returns vsli:raw="The difference between &lt;paramref name=&quot;point&quot; /&gt; and &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="point" /> と <paramref name="vector" /> の差。</returns>
    </member>
    <member name="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see &lt;see cref=&quot;M:System.IFormattable.ToString(System.String,System.IFormatProvider)&quot; /&gt;.">このメンバーは、Windows Presentation Foundation (WPF) インフラストラクチャをサポートしますが、独自に作成したコードから直接使用するためのものではありません。 このメンバーの詳細については、「<see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />」をご覧ください。</summary>
      <param name="format" vsli:raw="The string specifying the format to use.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default format defined for the type of the &lt;see cref=&quot;T:System.IFormattable&quot; /&gt; implementation.">使用する書式を指定する文字列。  
  
- または - 
 <see cref="T:System.IFormattable" /> 実装の型に対して定義されている既定の書式を使用する場合は、<see langword="null" />。</param>
      <param name="provider" vsli:raw="The &lt;see langword=&quot;IFormatProvider&quot; /&gt; to use to format the value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to obtain the numeric format information from the current locale setting of the operating system.">値の書式付けに使用する <see langword="IFormatProvider" />。  
  
- または - 
 オペレーティング システムの現在のロケール設定から数値の書式情報を取得する場合は <see langword="null" />。</param>
      <returns vsli:raw="A string containing the value of the current instance in the specified format.">指定した書式で現在のインスタンスの値が格納されている文字列。</returns>
    </member>
    <member name="M:System.Windows.Point.ToString">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.String&quot; /&gt; representation of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">この <see cref="T:System.String" /> の <see cref="T:System.Windows.Point" /> 表現を作成します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; values of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">この <see cref="T:System.String" /> 構造体の <see cref="P:System.Windows.Point.X" /> 値および <see cref="P:System.Windows.Point.Y" /> 値を格納する <see cref="T:System.Windows.Point" />。</returns>
    </member>
    <member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.String&quot; /&gt; representation of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">この <see cref="T:System.String" /> の <see cref="T:System.Windows.Point" /> 表現を作成します。</summary>
      <param name="provider" vsli:raw="Culture-specific formatting information.">カルチャ固有の書式設定情報。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; values of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">この <see cref="T:System.String" /> 構造体の <see cref="P:System.Windows.Point.X" /> 値および <see cref="P:System.Windows.Point.Y" /> 値を格納する <see cref="T:System.Windows.Point" />。</returns>
    </member>
    <member name="P:System.Windows.Point.X">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt;-coordinate value of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">この <see cref="P:System.Windows.Point.X" /> 構造体の <see cref="T:System.Windows.Point" /> 座標値を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt;-coordinate value of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.  The default value is &lt;c&gt;0&lt;/c&gt;.">この <see cref="P:System.Windows.Point.X" /> 構造体の <see cref="T:System.Windows.Point" /> 座標値。  既定値は <c>0</c>です。</returns>
    </member>
    <member name="P:System.Windows.Point.Y">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt;-coordinate value of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">この <see cref="P:System.Windows.Point.Y" /> の <see cref="T:System.Windows.Point" /> 座標値を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt;-coordinate value of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.  The default value is &lt;c&gt;0&lt;/c&gt;.">この <see cref="P:System.Windows.Point.Y" /> 構造体の <see cref="T:System.Windows.Point" /> 座標値。  既定値は <c>0</c>です。</returns>
    </member>
    <member name="T:System.Windows.PointConverter">
      <summary vsli:raw="Converts instances of other types to and from a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">他の型のインスタンスと <see cref="T:System.Windows.Point" /> の間の変換を行います。</summary>
    </member>
    <member name="M:System.Windows.PointConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.PointConverter&quot; /&gt; class.">
        <see cref="T:System.Windows.PointConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object can be converted from a given type to an instance of a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">指定した型のオブジェクトを <see cref="T:System.Windows.Point" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">型のコンテキスト情報を記述します。</param>
      <param name="sourceType" vsli:raw="The type of the source that is being evaluated for conversion.">評価対象となる変換元の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted to a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型を <see cref="T:System.Windows.Point" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; can be converted to a different type.">
        <see cref="T:System.Windows.Point" /> のインスタンスを別の型に変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">型のコンテキスト情報を記述します。</param>
      <param name="destinationType" vsli:raw="The desired type this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; is being evaluated for conversion.">この <see cref="T:System.Windows.Point" /> が変換元として評価されるときの変換先の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; can be converted to &lt;paramref name=&quot;destinationType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">この <see cref="T:System.Windows.Point" /> を <paramref name="destinationType" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified object to a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">指定したオブジェクトから <see cref="T:System.Windows.Point" /> への変換を試みます。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">変換に必要なコンテキスト情報を提供します。</param>
      <param name="culture" vsli:raw="Cultural information to respect during conversion.">変換時に尊重するカルチャ情報。</param>
      <param name="value" vsli:raw="The object being converted.">変換されるオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The specified object is NULL or is a type that cannot be converted to a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">指定したオブジェクトが NULL であるか、<see cref="T:System.Windows.Point" /> に変換できない型である場合にスローされます。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; created from converting &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> の変換によって作成された <see cref="T:System.Windows.Point" />。</returns>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; to a specified type.">
        <see cref="T:System.Windows.Point" /> から指定した型への変換を試みます。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">変換に必要なコンテキスト情報を提供します。</param>
      <param name="culture" vsli:raw="Cultural information to respect during conversion.">変換時に尊重するカルチャ情報。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; to convert.">変換対象の <see cref="T:System.Windows.Point" />。</param>
      <param name="destinationType" vsli:raw="The type to convert this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; to.">この <see cref="T:System.Windows.Point" /> の変換先の型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or is not a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;, or &lt;paramref name=&quot;destinationType&quot; /&gt; is not one of the valid types for conversion.">
        <paramref name="value" /> が <see langword="null" /> であるか、<see cref="T:System.Windows.Point" /> でない場合、または <paramref name="destinationType" /> が変換先の有効な型ではない場合にスローされます。</exception>
      <returns vsli:raw="The object created from converting this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">この <see cref="T:System.Windows.Point" /> の変換によって作成されたオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.PropertyChangedCallback">
      <summary vsli:raw="Represents the callback that is invoked when the effective property value of a dependency property changes.">依存関係プロパティの有効なプロパティ値が変更されたときに呼び出されるコールバックを表します。</summary>
      <param name="d" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; on which the property has changed value.">プロパティの値が変更された <see cref="T:System.Windows.DependencyObject" />。</param>
      <param name="e" vsli:raw="Event data that is issued by any event that tracks changes to the effective value of this property.">このプロパティの有効値に対する変更を追跡するイベントによって発行されるイベント データ。</param>
    </member>
    <member name="T:System.Windows.PropertyMetadata">
      <summary vsli:raw="Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with.">登録時の条件など、特定の種類に適用されるときの依存関係プロパティの動作を定義します。</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.PropertyMetadata&quot; /&gt; class.">
        <see cref="T:System.Windows.PropertyMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.PropertyMetadata&quot; /&gt; class with a specified default value for the dependency property that this metadata will be applied to.">メタデータが適用される依存関係プロパティの指定した既定値を使用して、<see cref="T:System.Windows.PropertyMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="defaultValue" vsli:raw="The default value to specify for a dependency property, usually provided as a value of some specific type.">依存関係プロパティに指定する既定値。通常、特定の型の値として指定されます。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;defaultValue&quot; /&gt; cannot be set to the value &lt;see cref=&quot;F:System.Windows.DependencyProperty.UnsetValue&quot; /&gt;.">
        <paramref name="defaultValue" /> は値 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定できません。</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.PropertyMetadata&quot; /&gt; class with the specified default value and &lt;see cref=&quot;T:System.Windows.PropertyChangedCallback&quot; /&gt; implementation reference.">指定した既定値と <see cref="T:System.Windows.PropertyMetadata" /> 実装参照を使用して、<see cref="T:System.Windows.PropertyChangedCallback" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="defaultValue" vsli:raw="The default value of the dependency property, usually provided as a value of some specific type.">依存関係プロパティの既定値。通常、特定の型の値として指定されます。</param>
      <param name="propertyChangedCallback" vsli:raw="Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.">プロパティの有効値が変更されるときにプロパティ システムによって必ず呼び出されるハンドラー実装への参照です。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;defaultValue&quot; /&gt; cannot be set to the value &lt;see cref=&quot;F:System.Windows.DependencyProperty.UnsetValue&quot; /&gt;.">
        <paramref name="defaultValue" /> は値 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定できません。</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.PropertyMetadata&quot; /&gt; class with the specified default value and callbacks.">指定した既定値とコールバックを使用して、<see cref="T:System.Windows.PropertyMetadata" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="defaultValue" vsli:raw="The default value of the dependency property, usually provided as a value of some specific type.">依存関係プロパティの既定値。通常、特定の型の値として指定されます。</param>
      <param name="propertyChangedCallback" vsli:raw="Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.">プロパティの有効値が変更されるときにプロパティ システムによって必ず呼び出されるハンドラー実装への参照です。</param>
      <param name="coerceValueCallback" vsli:raw="Reference to a handler implementation that is to be called whenever the property system calls &lt;see cref=&quot;M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)&quot; /&gt; against this property.">プロパティ システムがこのプロパティに対して <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> を呼び出すときに必ず呼び出されるハンドラー実装への参照です。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;defaultValue&quot; /&gt; cannot be set to the value &lt;see cref=&quot;F:System.Windows.DependencyProperty.UnsetValue&quot; /&gt;.">
        <paramref name="defaultValue" /> は値 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定できません。</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.PropertyMetadata&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Windows.PropertyChangedCallback&quot; /&gt; implementation reference.">指定した <see cref="T:System.Windows.PropertyMetadata" /> 実装参照を使用して、<see cref="T:System.Windows.PropertyChangedCallback" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="propertyChangedCallback" vsli:raw="Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.">プロパティの有効値が変更されるときにプロパティ システムによって必ず呼び出されるハンドラー実装への参照です。</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
      <summary vsli:raw="Merges this metadata with the base metadata.">このメタデータと基本メタデータをマージします。</summary>
      <param name="baseMetadata" vsli:raw="The base metadata to merge with this instance's values.">このインスタンスの値とマージする基本メタデータ。</param>
      <param name="dp" vsli:raw="The dependency property to which this metadata is being applied.">このメタデータが適用される依存関係プロパティ。</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
      <summary vsli:raw="Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.">このメタデータがプロパティに適用されたときに呼び出され、メタデータがシールされることを示します。</summary>
      <param name="dp" vsli:raw="The dependency property to which the metadata has been applied.">メタデータが適用された依存関係プロパティ。</param>
      <param name="targetType" vsli:raw="The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value is a null reference.">該当するメタデータが型固有のメタデータの場合、このメタデータに関連付けられている型。 これが既定のメタデータの場合、この値は null 参照です。</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.CoerceValueCallback">
      <summary vsli:raw="Gets or sets a reference to a &lt;see cref=&quot;T:System.Windows.CoerceValueCallback&quot; /&gt; implementation specified in this metadata.">このメタデータに指定されている <see cref="T:System.Windows.CoerceValueCallback" /> 実装への参照を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Cannot set a metadata property once it is applied to a dependency property operation.">依存関係プロパティの操作にいったん適用した後は、メタデータのプロパティを設定できません。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.CoerceValueCallback&quot; /&gt; implementation reference.">
        <see cref="T:System.Windows.CoerceValueCallback" /> 実装参照。</returns>
    </member>
    <member name="P:System.Windows.PropertyMetadata.DefaultValue">
      <summary vsli:raw="Gets or sets the default value of the dependency property.">依存関係プロパティの既定値を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="Cannot be set to the value &lt;see cref=&quot;F:System.Windows.DependencyProperty.UnsetValue&quot; /&gt; once created.">いったん作成した後は、値 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> に設定できません。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Cannot set a metadata property once it is applied to a dependency property operation.">依存関係プロパティの操作にいったん適用した後は、メタデータのプロパティを設定できません。</exception>
      <returns vsli:raw="The default value of the property. The default value on a &lt;see cref=&quot;T:System.Windows.PropertyMetadata&quot; /&gt; instance created with the parameterless constructor will be &lt;see cref=&quot;F:System.Windows.DependencyProperty.UnsetValue&quot; /&gt;.">プロパティの既定値です。 <see cref="T:System.Windows.PropertyMetadata" />パラメーターなしのコンストラクターを使用して作成されたインスタンスの既定値は、になり <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> ます。</returns>
    </member>
    <member name="P:System.Windows.PropertyMetadata.IsSealed">
      <summary vsli:raw="Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance.">メタデータが何らかの方法でプロパティに適用されていて、該当のメタデータ インスタンスが不変の状態にあるかどうかを判断する値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the metadata instance is immutable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">メタデータ インスタンスが不変の状態の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
      <summary vsli:raw="Gets or sets a reference to a &lt;see cref=&quot;T:System.Windows.PropertyChangedCallback&quot; /&gt; implementation specified in this metadata.">このメタデータに指定されている <see cref="T:System.Windows.PropertyChangedCallback" /> 実装への参照を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Cannot set a metadata property once it is applied to a dependency property operation.">依存関係プロパティの操作にいったん適用した後は、メタデータのプロパティを設定できません。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.PropertyChangedCallback&quot; /&gt; implementation reference.">
        <see cref="T:System.Windows.PropertyChangedCallback" /> 実装参照。</returns>
    </member>
    <member name="T:System.Windows.Rect">
      <summary vsli:raw="Describes the width, height, and location of a rectangle.">四角形の幅、高さ、場所を記述します。</summary>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure that has the specified x-coordinate, y-coordinate, width, and height.">指定した x 座標、y 座標、幅、および高さを持つ、<see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="x" vsli:raw="The x-coordinate of the top-left corner of the rectangle.">四角形の左上隅の X 座標。</param>
      <param name="y" vsli:raw="The y-coordinate of the top-left corner of the rectangle.">四角形の左上隅の y 座標。</param>
      <param name="width" vsli:raw="The width of the rectangle.">四角形の幅。</param>
      <param name="height" vsli:raw="The height of the rectangle.">四角形の高さ。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;width&quot; /&gt; is a negative value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;height&quot; /&gt; is a negative value.">
        <paramref name="width" /> は負の値です。  
  
- または - 
 <paramref name="height" /> は負の値です。</exception>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure that is exactly large enough to contain the two specified points.">指定した 2 つの点をちょうど格納できる大きさを持つ、<see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="point1" vsli:raw="The first point that the new rectangle must contain.">新しい四角形に格納する必要がある最初の点。</param>
      <param name="point2" vsli:raw="The second point that the new rectangle must contain.">新しい四角形に格納する必要がある 2 番目の点。</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure that has the specified top-left corner location and the specified width and height.">指定した左上隅の位置および指定した幅と高さを持つ、<see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="location" vsli:raw="A point that specifies the location of the top-left corner of the rectangle.">四角形の左上隅の場所を指定する点。</param>
      <param name="size" vsli:raw="A &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure that specifies the width and height of the rectangle.">四角形の幅および高さを指定する <see cref="T:System.Windows.Size" /> 構造体。</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector.">指定した点および指定した点とベクターの和をちょうど格納できる大きさを持つ、<see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="point" vsli:raw="The first point the rectangle must contain.">四角形に格納する必要がある最初の点。</param>
      <param name="vector" vsli:raw="The amount to offset the specified point. The resulting rectangle will be exactly large enough to contain both points.">指定した点をオフセットする量。 結果として得られる四角形は、2 つの点をちょうど格納できる大きさになります。</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Size)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure that is of the specified size and is located at (0,0).">指定したサイズを持ち、座標 (0,0) に位置する <see cref="T:System.Windows.Rect" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="size" vsli:raw="A &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure that specifies the width and height of the rectangle.">四角形の幅および高さを指定する <see cref="T:System.Windows.Size" /> 構造体。</param>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Double,System.Double)">
      <summary vsli:raw="Indicates whether the rectangle contains the specified x-coordinate and y-coordinate.">指定した x 座標と y 座標が、四角形に含まれているかどうかを示します。</summary>
      <param name="x" vsli:raw="The x-coordinate of the point to check.">確認対象の点の x 座標。</param>
      <param name="y" vsli:raw="The y-coordinate of the point to check.">確認対象の点の y 座標。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if (&lt;paramref name=&quot;x&quot; /&gt;, &lt;paramref name=&quot;y&quot; /&gt;) is contained by the rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">(<paramref name="x" />,<paramref name="y" />) の座標が、四角形に含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
      <summary vsli:raw="Indicates whether the rectangle contains the specified point.">四角形に指定した点が含まれているかどうかを示します。</summary>
      <param name="point" vsli:raw="The point to check.">確認対象の点。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the rectangle contains the specified point; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した点が、四角形に含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Rect)">
      <summary vsli:raw="Indicates whether the rectangle contains the specified rectangle.">指定した四角形が、四角形に含まれているかどうかを示します。</summary>
      <param name="rect" vsli:raw="The rectangle to check.">確認対象の四角形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;rect&quot; /&gt; is entirely contained by the rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="rect" /> 全体が、四角形に含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the specified object is equal to the current rectangle.">指定したオブジェクトが現在の四角形と等しいかどうかを示します。</summary>
      <param name="o" vsli:raw="The object to compare to the current rectangle.">現在の四角形と比較するオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; and has the same &lt;see cref=&quot;P:System.Windows.Rect.Location&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Size&quot; /&gt; values as the current rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="o" /> が <see cref="T:System.Windows.Rect" /> で、現在の四角形と同じ <see cref="P:System.Windows.Rect.Location" /> および <see cref="P:System.Windows.Rect.Size" /> の値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
      <summary vsli:raw="Indicates whether the specified rectangle is equal to the current rectangle.">指定した四角形が現在の四角形と等しいかどうかを示します。</summary>
      <param name="value" vsli:raw="The rectangle to compare to the current rectangle.">現在の四角形と比較する対象の四角形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified rectangle has the same &lt;see cref=&quot;P:System.Windows.Rect.Location&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Size&quot; /&gt; values as the current rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した四角形が現在の四角形と同じ <see cref="P:System.Windows.Rect.Location" /> および <see cref="P:System.Windows.Rect.Size" /> の値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)">
      <summary vsli:raw="Indicates whether the specified rectangles are equal.">指定した四角形が等しいかどうかを示します。</summary>
      <param name="rect1" vsli:raw="The first rectangle to compare.">最初に比較する四角形。</param>
      <param name="rect2" vsli:raw="The second rectangle to compare.">2 番目に比較する四角形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the rectangles have the same &lt;see cref=&quot;P:System.Windows.Rect.Location&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Size&quot; /&gt; values; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">四角形が同じ <see cref="P:System.Windows.Rect.Location" /> 値と <see cref="P:System.Windows.Rect.Size" /> 値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.GetHashCode">
      <summary vsli:raw="Creates a hash code for the rectangle.">四角形のハッシュ コードを作成します。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure.">現在の <see cref="T:System.Windows.Rect" /> 構造体のハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Double,System.Double)">
      <summary vsli:raw="Expands or shrinks the rectangle by using the specified width and height amounts, in all directions.">すべての方向に、指定した幅および高さの量を使用して四角形を拡大または縮小します。</summary>
      <param name="width" vsli:raw="The amount by which to expand or shrink the left and right sides of the rectangle.">四角形の左辺と右辺を拡大または縮小する量。</param>
      <param name="height" vsli:raw="The amount by which to expand or shrink the top and bottom sides of the rectangle.">四角形の上辺と底辺を拡大または縮小する量。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method is called on the &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">このメソッドは、<see cref="P:System.Windows.Rect.Empty" /> 四角形で呼び出されます。</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)">
      <summary vsli:raw="Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions.">指定した四角形を、すべての方向に指定した幅および高さの量だけ拡大または縮小した四角形を作成します。</summary>
      <param name="rect" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure to modify.">変更する対象の <see cref="T:System.Windows.Rect" /> 構造体。</param>
      <param name="width" vsli:raw="The amount by which to expand or shrink the left and right sides of the rectangle.">四角形の左辺と右辺を拡大または縮小する量。</param>
      <param name="height" vsli:raw="The amount by which to expand or shrink the top and bottom sides of the rectangle.">四角形の上辺と底辺を拡大または縮小する量。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;rect&quot; /&gt; is an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">
        <paramref name="rect" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形です。</exception>
      <returns vsli:raw="The resulting rectangle.">結果として得られる四角形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)">
      <summary vsli:raw="Returns the rectangle that results from expanding the specified rectangle by the specified &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;, in all directions.">指定した四角形を、すべての方向に指定した <see cref="T:System.Windows.Size" /> だけ拡大した四角形を返します。</summary>
      <param name="rect" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure to modify.">変更する対象の <see cref="T:System.Windows.Rect" /> 構造体。</param>
      <param name="size" vsli:raw="Specifies the amount to expand the rectangle. The &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Size.Width&quot; /&gt; property specifies the amount to increase the rectangle's &lt;see cref=&quot;P:System.Windows.Rect.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Right&quot; /&gt; properties. The &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Size.Height&quot; /&gt; property specifies the amount to increase the rectangle's &lt;see cref=&quot;P:System.Windows.Rect.Top&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Bottom&quot; /&gt; properties.">四角形を拡大する量を指定します。 <see cref="T:System.Windows.Size" /> 構造体の <see cref="P:System.Windows.Size.Width" /> プロパティは、四角形の <see cref="P:System.Windows.Rect.Left" /> プロパティと <see cref="P:System.Windows.Rect.Right" /> プロパティの増分量を指定します。 <see cref="T:System.Windows.Size" /> 構造体の <see cref="P:System.Windows.Size.Height" /> プロパティは、四角形の <see cref="P:System.Windows.Rect.Top" /> プロパティと <see cref="P:System.Windows.Rect.Bottom" /> プロパティの増分量を指定します。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;rect&quot; /&gt; is an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">
        <paramref name="rect" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形です。</exception>
      <returns vsli:raw="The resulting rectangle.">結果として得られる四角形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Size)">
      <summary vsli:raw="Expands the rectangle by using the specified &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;, in all directions.">すべての方向に、指定した <see cref="T:System.Windows.Size" /> を使用して四角形を拡大します。</summary>
      <param name="size" vsli:raw="Specifies the amount to expand the rectangle. The &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Size.Width&quot; /&gt; property specifies the amount to increase the rectangle's &lt;see cref=&quot;P:System.Windows.Rect.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Right&quot; /&gt; properties. The &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Size.Height&quot; /&gt; property specifies the amount to increase the rectangle's &lt;see cref=&quot;P:System.Windows.Rect.Top&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Bottom&quot; /&gt; properties.">四角形を拡大する量を指定します。 <see cref="T:System.Windows.Size" /> 構造体の <see cref="P:System.Windows.Size.Width" /> プロパティは、四角形の <see cref="P:System.Windows.Rect.Left" /> プロパティと <see cref="P:System.Windows.Rect.Right" /> プロパティの増分量を指定します。 <see cref="T:System.Windows.Size" /> 構造体の <see cref="P:System.Windows.Size.Height" /> プロパティは、四角形の <see cref="P:System.Windows.Rect.Top" /> プロパティと <see cref="P:System.Windows.Rect.Bottom" /> プロパティの増分量を指定します。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method is called on the &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">このメソッドは、<see cref="P:System.Windows.Rect.Empty" /> 四角形で呼び出されます。</exception>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
      <summary vsli:raw="Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle.">現在の四角形と指定した四角形の交差部分を求め、結果を現在の四角形として保存します。</summary>
      <param name="rect" vsli:raw="The rectangle to intersect with the current rectangle.">現在の四角形と交差する四角形。</param>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)">
      <summary vsli:raw="Returns the intersection of the specified rectangles.">指定した四角形の交差部分を返します。</summary>
      <param name="rect1" vsli:raw="The first rectangle to compare.">最初に比較する四角形。</param>
      <param name="rect2" vsli:raw="The second rectangle to compare.">2 番目に比較する四角形。</param>
      <returns vsli:raw="The intersection of the two rectangles, or &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; if no intersection exists.">2 つの四角形が交差する場合はその交差部分。交差しない場合は <see cref="P:System.Windows.Rect.Empty" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)">
      <summary vsli:raw="Indicates whether the specified rectangle intersects with the current rectangle.">指定した四角形が、現在の四角形と交差するかどうかを示します。</summary>
      <param name="rect" vsli:raw="The rectangle to check.">確認対象の四角形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified rectangle intersects with the current rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した四角形が現在の四角形と交差する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Double,System.Double)">
      <summary vsli:raw="Moves the rectangle by the specified horizontal and vertical amounts.">四角形を水平方向および垂直方向に指定した量だけ移動します。</summary>
      <param name="offsetX" vsli:raw="The amount to move the rectangle horizontally.">四角形の水平方向の移動量。</param>
      <param name="offsetY" vsli:raw="The amount to move the rectangle vertically.">四角形の垂直方向の移動量。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method is called on the &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">このメソッドは、<see cref="P:System.Windows.Rect.Empty" /> 四角形で呼び出されます。</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)">
      <summary vsli:raw="Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts.">指定した水平方向および垂直後方の量を使用して、指定した四角形からのオフセットである四角形を返します。</summary>
      <param name="rect" vsli:raw="The rectangle to move.">移動対象の四角形。</param>
      <param name="offsetX" vsli:raw="The horizontal offset for the new rectangle.">新しい四角形の水平方向のオフセット。</param>
      <param name="offsetY" vsli:raw="The vertical offset for the new rectangle.">新しい四角形の垂直方向のオフセット。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;rect&quot; /&gt; is &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt;.">
        <paramref name="rect" /> が <see cref="P:System.Windows.Rect.Empty" />です。</exception>
      <returns vsli:raw="The resulting rectangle.">結果として得られる四角形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)">
      <summary vsli:raw="Returns a rectangle that is offset from the specified rectangle by using the specified vector.">指定したベクターを使用して、指定した四角形からのオフセットである四角形を返します。</summary>
      <param name="rect" vsli:raw="The original rectangle.">元の四角形。</param>
      <param name="offsetVector" vsli:raw="A vector that specifies the horizontal and vertical offsets for the new rectangle.">新しい四角形の水平方向および垂直方向のオフセットを指定するベクター。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;rect&quot; /&gt; is &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt;.">
        <paramref name="rect" /> が <see cref="P:System.Windows.Rect.Empty" />です。</exception>
      <returns vsli:raw="The resulting rectangle.">結果として得られる四角形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Vector)">
      <summary vsli:raw="Moves the rectangle by the specified vector.">指定したベクターだけ四角形を移動します。</summary>
      <param name="offsetVector" vsli:raw="A vector that specifies the horizontal and vertical amounts to move the rectangle.">四角形を水平方向および垂直方向に移動する量を指定するベクター。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method is called on the &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">このメソッドは、<see cref="P:System.Windows.Rect.Empty" /> 四角形で呼び出されます。</exception>
    </member>
    <member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
      <summary vsli:raw="Compares two rectangles for exact equality.">2 つの四角形を比較し、完全に等しいかどうかを判断します。</summary>
      <param name="rect1" vsli:raw="The first rectangle to compare.">最初に比較する四角形。</param>
      <param name="rect2" vsli:raw="The second rectangle to compare.">2 番目に比較する四角形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the rectangles have the same &lt;see cref=&quot;P:System.Windows.Rect.Location&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Size&quot; /&gt; values; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">四角形が同じ <see cref="P:System.Windows.Rect.Location" /> 値と <see cref="P:System.Windows.Rect.Size" /> 値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
      <summary vsli:raw="Compares two rectangles for inequality.">2 つの四角形を比較し、等しくないかどうかを判断します。</summary>
      <param name="rect1" vsli:raw="The first rectangle to compare.">最初に比較する四角形。</param>
      <param name="rect2" vsli:raw="The second rectangle to compare.">2 番目に比較する四角形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the rectangles do not have the same &lt;see cref=&quot;P:System.Windows.Rect.Location&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Size&quot; /&gt; values; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">四角形が同じ <see cref="P:System.Windows.Rect.Location" /> 値と <see cref="P:System.Windows.Rect.Size" /> 値を持たない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Parse(System.String)">
      <summary vsli:raw="Creates a new rectangle from the specified string representation.">指定した文字列形式から新しい四角形を作成します。</summary>
      <param name="source" vsli:raw="The string representation of the rectangle, in the form &quot;x, y, width, height&quot;.">"x, y, width, height" の形式の四角形の文字列形式。</param>
      <returns vsli:raw="The resulting rectangle.">結果として得られる四角形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Scale(System.Double,System.Double)">
      <summary vsli:raw="Multiplies the size of the current rectangle by the specified x and y values.">現在の四角形のサイズと指定した x および y の値を乗算します。</summary>
      <param name="scaleX" vsli:raw="The scale factor in the x-direction.">x 方向のスケール ファクター。</param>
      <param name="scaleY" vsli:raw="The scale factor in the y-direction.">y 方向のスケール ファクター。</param>
    </member>
    <member name="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Formats the value of the current instance using the specified format.">指定された書式を使用して現在のインスタンスの値を書式設定します。</summary>
      <param name="format" vsli:raw="The format to use.  &#xA;  &#xA; -or-  &#xA;  &#xA; A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) to use the default format defined for the type of the &lt;see cref=&quot;T:System.IFormattable&quot; /&gt; implementation.">使用する書式。  
  
- または - 
<see cref="T:System.IFormattable" /> 実装の型に対して定義されている既定の形式を使用するには null 参照 (Visual Basic では<see langword="Nothing" />)。</param>
      <param name="provider" vsli:raw="The provider to use to format the value.  &#xA;  &#xA; -or-  &#xA;  &#xA; A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.">値の書式設定に使用するプロバイダーです。  
  
- または - 
オペレーティング システムの現在のロケール設定から数値形式の情報を取得するための null 参照 (Visual Basic では <see langword="Nothing" />)。</param>
      <returns vsli:raw="A string representation of the rectangle.">四角形の文字列形式。</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString">
      <summary vsli:raw="Returns a string representation of the rectangle.">四角形の文字列形式を返します。</summary>
      <returns vsli:raw="A string representation of the current rectangle. The string has the following form: &quot;&lt;see cref=&quot;P:System.Windows.Rect.X&quot; /&gt;,&lt;see cref=&quot;P:System.Windows.Rect.Y&quot; /&gt;,&lt;see cref=&quot;P:System.Windows.Rect.Width&quot; /&gt;,&lt;see cref=&quot;P:System.Windows.Rect.Height&quot; /&gt;&quot;.">現在の四角形の文字列形式。 文字列は、"<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />" の形式になります。</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
      <summary vsli:raw="Returns a string representation of the rectangle by using the specified format provider.">指定した書式プロバイダーを使用して、四角形の文字列形式を返します。</summary>
      <param name="provider" vsli:raw="Culture-specific formatting information.">カルチャ固有の書式設定情報。</param>
      <returns vsli:raw="A string representation of the current rectangle that is determined by the specified format provider.">指定した書式プロバイダーにより決定される現在の四角形の文字列形式を返します。</returns>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)">
      <summary vsli:raw="Transforms the rectangle by applying the specified matrix.">指定した行列を適用して四角形を変換します。</summary>
      <param name="matrix" vsli:raw="A matrix that specifies the transformation to apply.">適用する変換を指定する行列。</param>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)">
      <summary vsli:raw="Returns the rectangle that results from applying the specified matrix to the specified rectangle.">指定した四角形に指定した行列を適用した四角形を返します。</summary>
      <param name="rect" vsli:raw="A rectangle that is the basis for the transformation.">変換の基盤となる四角形。</param>
      <param name="matrix" vsli:raw="A matrix that specifies the transformation to apply.">適用する変換を指定する行列。</param>
      <returns vsli:raw="The rectangle that results from the operation.">操作の結果生成される四角形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Point)">
      <summary vsli:raw="Expands the current rectangle exactly enough to contain the specified point.">指定した点をちょうど格納できる大きさになるように、現在の四角形を拡大します。</summary>
      <param name="point" vsli:raw="The point to include.">格納対象の点。</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
      <summary vsli:raw="Expands the current rectangle exactly enough to contain the specified rectangle.">指定した四角形をちょうど格納できる大きさになるように、現在の四角形を拡大します。</summary>
      <param name="rect" vsli:raw="The rectangle to include.">格納する四角形。</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)">
      <summary vsli:raw="Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point.">指定した四角形と指定した点をちょうど格納できる大きさの四角形を作成します。</summary>
      <param name="rect" vsli:raw="The rectangle to include.">格納する四角形。</param>
      <param name="point" vsli:raw="The point to include.">格納対象の点。</param>
      <returns vsli:raw="A rectangle that is exactly large enough to contain the specified rectangle and the specified point.">指定した四角形と指定した点をちょうど格納できる大きさの四角形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)">
      <summary vsli:raw="Creates a rectangle that is exactly large enough to contain the two specified rectangles.">指定した 2 つの四角形をちょうど格納できる大きさの四角形を作成します。</summary>
      <param name="rect1" vsli:raw="The first rectangle to include.">最初に格納する四角形。</param>
      <param name="rect2" vsli:raw="The second rectangle to include.">2 番目に格納する四角形。</param>
      <returns vsli:raw="The resulting rectangle.">結果として得られる四角形。</returns>
    </member>
    <member name="P:System.Windows.Rect.Bottom">
      <summary vsli:raw="Gets the y-axis value of the bottom of the rectangle.">四角形の底辺の y 軸の値を取得します。</summary>
      <returns vsli:raw="The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is &lt;see cref=&quot;F:System.Double.NegativeInfinity&quot; /&gt; .">四角形の底辺の y 軸の値。 四角形が空の場合、値は <see cref="F:System.Double.NegativeInfinity" /> になります。</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomLeft">
      <summary vsli:raw="Gets the position of the bottom-left corner of the rectangle.">四角形の左下隅の位置を取得します。</summary>
      <returns vsli:raw="The position of the bottom-left corner of the rectangle.">四角形の左下隅の位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomRight">
      <summary vsli:raw="Gets the position of the bottom-right corner of the rectangle.">四角形の右下隅の位置を取得します。</summary>
      <returns vsli:raw="The position of the bottom-right corner of the rectangle.">四角形の右下隅の位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.Empty">
      <summary vsli:raw="Gets a special value that represents a rectangle with no position or area.">位置や領域を持たない四角形を表す特殊な値を取得します。</summary>
      <returns vsli:raw="The empty rectangle, which has &lt;see cref=&quot;P:System.Windows.Rect.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Y&quot; /&gt; property values of &lt;see cref=&quot;F:System.Double.PositiveInfinity&quot; /&gt;, and has &lt;see cref=&quot;P:System.Windows.Rect.Width&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Height&quot; /&gt; property values of &lt;see cref=&quot;F:System.Double.NegativeInfinity&quot; /&gt;.">
        <see cref="P:System.Windows.Rect.X" /> の <see cref="P:System.Windows.Rect.Y" /> および <see cref="F:System.Double.PositiveInfinity" /> 値を持ち、<see cref="P:System.Windows.Rect.Width" /> の <see cref="P:System.Windows.Rect.Height" /> および <see cref="F:System.Double.NegativeInfinity" /> 値を持つ空の四角形。</returns>
    </member>
    <member name="P:System.Windows.Rect.Height">
      <summary vsli:raw="Gets or sets the height of the rectangle.">四角形の高さを取得または設定します。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.Height&quot; /&gt; is set to a negative value.">
        <see cref="P:System.Windows.Rect.Height" /> に負の数が設定されています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.Height&quot; /&gt; is set on an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">
        <see cref="P:System.Windows.Rect.Height" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</exception>
      <returns vsli:raw="A positive number that represents the height of the rectangle. The default is 0.">四角形の高さを表す正の値。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Windows.Rect.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the rectangle is the &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">四角形が <see cref="P:System.Windows.Rect.Empty" /> の四角形かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the rectangle is the &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">四角形が <see cref="P:System.Windows.Rect.Empty" /> の四角形の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Rect.Left">
      <summary vsli:raw="Gets the x-axis value of the left side of the rectangle.">四角形の左辺の x 軸の値を取得します。</summary>
      <returns vsli:raw="The x-axis value of the left side of the rectangle.">四角形の左辺の x 軸の値。</returns>
    </member>
    <member name="P:System.Windows.Rect.Location">
      <summary vsli:raw="Gets or sets the position of the top-left corner of the rectangle.">四角形の左上隅の位置を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.Location&quot; /&gt; is set on an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">
        <see cref="P:System.Windows.Rect.Location" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</exception>
      <returns vsli:raw="The position of the top-left corner of the rectangle. The default is (0, 0).">四角形の左上隅の位置。 既定値は (0, 0) です。</returns>
    </member>
    <member name="P:System.Windows.Rect.Right">
      <summary vsli:raw="Gets the x-axis value of the right side of the rectangle.">四角形の右辺の x 軸の値を取得します。</summary>
      <returns vsli:raw="The x-axis value of the right side of the rectangle.">四角形の右辺の x 軸の値。</returns>
    </member>
    <member name="P:System.Windows.Rect.Size">
      <summary vsli:raw="Gets or sets the width and height of the rectangle.">四角形の幅および高さを取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.Size&quot; /&gt; is set on an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">
        <see cref="P:System.Windows.Rect.Size" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure that specifies the width and height of the rectangle.">四角形の幅および高さを指定する <see cref="T:System.Windows.Size" /> 構造体。</returns>
    </member>
    <member name="P:System.Windows.Rect.Top">
      <summary vsli:raw="Gets the y-axis position of the top of the rectangle.">四角形の上辺の y 軸の位置を取得します。</summary>
      <returns vsli:raw="The y-axis position of the top of the rectangle.">四角形の上辺の y 軸の位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.TopLeft">
      <summary vsli:raw="Gets the position of the top-left corner of the rectangle.">四角形の左上隅の位置を取得します。</summary>
      <returns vsli:raw="The position of the top-left corner of the rectangle.">四角形の左上隅の位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.TopRight">
      <summary vsli:raw="Gets the position of the top-right corner of the rectangle.">四角形の右上隅の位置を取得します。</summary>
      <returns vsli:raw="The position of the top-right corner of the rectangle.">四角形の右上隅の位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.Width">
      <summary vsli:raw="Gets or sets the width of the rectangle.">四角形の幅を取得または設定します。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.Width&quot; /&gt; is set to a negative value.">
        <see cref="P:System.Windows.Rect.Width" /> に負の数が設定されています。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.Width&quot; /&gt; is set on an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">
        <see cref="P:System.Windows.Rect.Width" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</exception>
      <returns vsli:raw="A positive number that represents the width of the rectangle. The default is 0.">四角形の幅を表す正の値。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Windows.Rect.X">
      <summary vsli:raw="Gets or sets the x-axis value of the left side of the rectangle.">四角形の左辺の x 軸の値を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.X&quot; /&gt; is set on an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">
        <see cref="P:System.Windows.Rect.X" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</exception>
      <returns vsli:raw="The x-axis value of the left side of the rectangle.">四角形の左辺の x 軸の値。</returns>
    </member>
    <member name="P:System.Windows.Rect.Y">
      <summary vsli:raw="Gets or sets the y-axis value of the top side of the rectangle.">四角形の上辺の y 軸の値を取得または設定します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.Y&quot; /&gt; is set on an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">
        <see cref="P:System.Windows.Rect.Y" /> は、<see cref="P:System.Windows.Rect.Empty" /> 四角形で設定されます。</exception>
      <returns vsli:raw="The y-axis value of the top side of the rectangle.">四角形の上辺の y 軸の値。</returns>
    </member>
    <member name="T:System.Windows.RectConverter">
      <summary vsli:raw="Converts instances of other types to and from instances of &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">
        <see cref="T:System.Windows.Rect" /> のインスタンスとその他の型の間で変換します。</summary>
    </member>
    <member name="M:System.Windows.RectConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.RectConverter&quot; /&gt; class.">
        <see cref="T:System.Windows.RectConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object can be converted from a given type to an instance of &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">指定した型のオブジェクトを <see cref="T:System.Windows.Rect" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">変換に必要なコンテキスト情報を提供します。</param>
      <param name="sourceType" vsli:raw="The type of the source that is being evaluated for conversion.">評価対象となる変換元の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted to a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">型を <see cref="T:System.Windows.Rect" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; can be converted to the specified type.">
        <see cref="T:System.Windows.Rect" /> を、指定した型に変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">変換に必要なコンテキスト情報を提供します。</param>
      <param name="destinationType" vsli:raw="The desired type this &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; is being evaluated for conversion.">この <see cref="T:System.Windows.Rect" /> が変換元として評価されるときの変換先の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; can be converted to &lt;paramref name=&quot;destinationType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Windows.Rect" /> を <paramref name="destinationType" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified object to a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">指定したオブジェクトから <see cref="T:System.Windows.Rect" /> への変換を試みます。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">変換に必要なコンテキスト情報を提供します。</param>
      <param name="culture" vsli:raw="Cultural information which is respected when converting.">変換時に尊重するカルチャ情報。</param>
      <param name="value" vsli:raw="The object being converted.">変換されるオブジェクト。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The specified object is NULL or is a type that cannot be converted to a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">指定したオブジェクトが NULL であるか、<see cref="T:System.Windows.Rect" /> に変換できない型である場合にスローされます。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; created from converting &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> の変換によって作成された <see cref="T:System.Windows.Rect" />。</returns>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; to the specified type.">
        <see cref="T:System.Windows.Rect" /> の指定した型への変換を試みます。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">変換に必要なコンテキスト情報を提供します。</param>
      <param name="culture" vsli:raw="Cultural information which is respected during conversion.">変換時に尊重するカルチャ情報。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; to convert.">変換対象の <see cref="T:System.Windows.Rect" />。</param>
      <param name="destinationType" vsli:raw="The type to convert this &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; to.">この <see cref="T:System.Windows.Rect" /> の変換先の型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA;-or-&#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.  &#xA;  &#xA;-or-&#xA;  &#xA; The &lt;paramref name=&quot;destinationType&quot; /&gt; is not one of the valid types for conversion.">
        <paramref name="value" /> が <see langword="null" />です。  
  
- または - 
 <paramref name="value" /> が <see cref="T:System.Windows.Rect" /> ではありません。  
  
- または - 
<paramref name="destinationType" /> が、変換先の有効な型ではありません。</exception>
      <returns vsli:raw="The object created from converting this &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">この <see cref="T:System.Windows.Rect" /> の変換によって作成されたオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.Size">
      <summary vsli:raw="Implements a structure that is used to describe the &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; of an object.">
        <see cref="T:System.Windows.Size" /> オブジェクトの記述に使用される構造体を実装します。</summary>
    </member>
    <member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure and assigns it an initial &lt;paramref name=&quot;width&quot; /&gt; and &lt;paramref name=&quot;height&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> 構造体の新しいインスタンスを初期化し、<paramref name="width" /> および <paramref name="height" /> の初期値を割り当てます。</summary>
      <param name="width" vsli:raw="The initial width of the instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> のインスタンスの初期幅。</param>
      <param name="height" vsli:raw="The initial height of the instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> のインスタンスの初期高さ。</param>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Object)">
      <summary vsli:raw="Compares an object to an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; for equality.">オブジェクトが <see cref="T:System.Windows.Size" /> のインスタンスと等価であるかどうかを比較します。</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare.">比較対象の <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sizes are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">サイズが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size)">
      <summary vsli:raw="Compares a value to an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; for equality.">値が <see cref="T:System.Windows.Size" /> のインスタンスと等しいかどうかを比較します。</summary>
      <param name="value" vsli:raw="The size to compare to this current instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> の現在のインスタンスと比較するサイズ。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> のインスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size,System.Windows.Size)">
      <summary vsli:raw="Compares two instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; for equality.">
        <see cref="T:System.Windows.Size" /> の 2 つのインスタンスを比較し、等しいかどうかを確認します。</summary>
      <param name="size1" vsli:raw="The first instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to compare.">比較する <see cref="T:System.Windows.Size" /> の最初のインスタンスです。</param>
      <param name="size2" vsli:raw="The second instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to compare.">比較する <see cref="T:System.Windows.Size" /> の 2 番目のインスタンスです。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> のインスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.GetHashCode">
      <summary vsli:raw="Gets the hash code for this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> のこのインスタンスのハッシュ コードを取得します。</summary>
      <returns vsli:raw="The hash code for this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> のこのインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
      <summary vsli:raw="Compares two instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; for equality.">
        <see cref="T:System.Windows.Size" /> の 2 つのインスタンスを比較し、等しいかどうかを確認します。</summary>
      <param name="size1" vsli:raw="The first instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to compare.">比較する <see cref="T:System.Windows.Size" /> の最初のインスタンスです。</param>
      <param name="size2" vsli:raw="The second instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to compare.">比較する <see cref="T:System.Windows.Size" /> の 2 番目のインスタンスです。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; are equal; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> の 2 つのインスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Point">
      <summary vsli:raw="Explicitly converts an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to an instance of &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> のインスタンスを <see cref="T:System.Windows.Point" /> のインスタンスに明示的に変換します。</summary>
      <param name="size" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; value to be converted.">変換される <see cref="T:System.Windows.Size" /> 値。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; equal in value to this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Point" /> の該当するインスタンスに値が等しい <see cref="T:System.Windows.Size" />。</returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Vector">
      <summary vsli:raw="Explicitly converts an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to an instance of &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> のインスタンスを <see cref="T:System.Windows.Vector" /> のインスタンスに明示的に変換します。</summary>
      <param name="size" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; value to be converted.">変換される <see cref="T:System.Windows.Size" /> 値。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; equal in value to this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Vector" /> の該当するインスタンスに値が等しい <see cref="T:System.Windows.Size" />。</returns>
    </member>
    <member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
      <summary vsli:raw="Compares two instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; for inequality.">
        <see cref="T:System.Windows.Size" /> の 2 つのインスタンスを比較し、等しくないかどうかを判断します。</summary>
      <param name="size1" vsli:raw="The first instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to compare.">比較する <see cref="T:System.Windows.Size" /> の最初のインスタンスです。</param>
      <param name="size2" vsli:raw="The second instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to compare.">比較する <see cref="T:System.Windows.Size" /> の 2 番目のインスタンスです。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; are not equal; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> のインスタンスが等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.Parse(System.String)">
      <summary vsli:raw="Returns an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; from a converted &lt;see cref=&quot;T:System.String&quot; /&gt;.">変換された <see cref="T:System.Windows.Size" /> から <see cref="T:System.String" /> のインスタンスを返します。</summary>
      <param name="source" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; value to parse to a &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; value.">解析されて <see cref="T:System.String" /> 値に変換される <see cref="T:System.Windows.Size" /> 値。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Windows.Size.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="This type or member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.">この型またはメンバーは、Windows Presentation Foundation (WPF) インフラストラクチャをサポートします。コードから直接使用するためのものではありません。</summary>
      <param name="format" vsli:raw="The format to use.">使用する書式。</param>
      <param name="provider" vsli:raw="The provider to use to format the value.">値の書式設定に使用するプロバイダーです。</param>
      <returns vsli:raw="The value of the current instance in the specified format.">指定された書式の現在のインスタンスの値。</returns>
    </member>
    <member name="M:System.Windows.Size.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents this &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; object.">この <see cref="T:System.String" /> オブジェクトを表す <see cref="T:System.Windows.Size" /> を返します。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that specifies the width followed by the height.">幅の後に高さを示す <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Windows.Size.ToString(System.IFormatProvider)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.String" /> のこのインスタンスを表す <see cref="T:System.Windows.Size" /> を返します。</summary>
      <param name="provider" vsli:raw="An object that provides a way to control formatting.">書式設定の制御方法を提供するオブジェクト。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents this &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; object.">この <see cref="T:System.String" /> オブジェクトを表す <see cref="T:System.Windows.Size" />。</returns>
    </member>
    <member name="P:System.Windows.Size.Empty">
      <summary vsli:raw="Gets a value that represents a static empty &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">静的で空の <see cref="T:System.Windows.Size" /> を表す値を取得します。</summary>
      <returns vsli:raw="An empty instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> の空のインスタンス。</returns>
    </member>
    <member name="P:System.Windows.Size.Height">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;P:System.Windows.Size.Height&quot; /&gt; of this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="P:System.Windows.Size.Height" /> のこのインスタンスの <see cref="T:System.Windows.Size" /> を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Windows.Size.Height&quot; /&gt; of this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;. The default is 0. The value cannot be negative.">
        <see cref="P:System.Windows.Size.Height" /> の該当するインスタンスの <see cref="T:System.Windows.Size" />。 既定値は 0 です。 この値を負にすることはできません。</returns>
    </member>
    <member name="P:System.Windows.Size.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; is &lt;see cref=&quot;P:System.Windows.Size.Empty&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> のこのインスタンスが <see cref="P:System.Windows.Size.Empty" /> かどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance of size is &lt;see cref=&quot;P:System.Windows.Size.Empty&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">Size のこのインスタンスが <see cref="P:System.Windows.Size.Empty" /> の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Size.Width">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;P:System.Windows.Size.Width&quot; /&gt; of this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="P:System.Windows.Size.Width" /> のこのインスタンスの <see cref="T:System.Windows.Size" /> を取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Windows.Size.Width&quot; /&gt; of this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;. The default value is &lt;c&gt;0&lt;/c&gt;. The value cannot be negative.">
        <see cref="P:System.Windows.Size.Width" /> の該当するインスタンスの <see cref="T:System.Windows.Size" />。 既定値は <c>0</c>です。 この値を負にすることはできません。</returns>
    </member>
    <member name="T:System.Windows.SizeConverter">
      <summary vsli:raw="Converts instances of other types to and from instances of the &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; class.">他の型のインスタンスと <see cref="T:System.Windows.Size" /> クラスのインスタンスの間で変換を行います。</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.SizeConverter&quot; /&gt; class.">
        <see cref="T:System.Windows.SizeConverter" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether a class can be converted from a given type to an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">指定した型からクラスを <see cref="T:System.Windows.Size" /> のインスタンスに変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="Provides contextual information about a component.">コンポーネントに関するコンテキスト情報を提供します。</param>
      <param name="sourceType" vsli:raw="Identifies the data type to evaluate for conversion.">変換するために評価するデータ型を識別します。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;sourceType&quot; /&gt; can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="sourceType" /> を <see cref="T:System.Windows.Size" /> のインスタンスに変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; can be converted to a different type.">
        <see cref="T:System.Windows.Size" /> のインスタンスを別の型に変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="Provides contextual information about a component.">コンポーネントに関するコンテキスト情報を提供します。</param>
      <param name="destinationType" vsli:raw="Identifies the data type to evaluate for conversion.">変換するために評価するデータ型を識別します。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; can be converted to the &lt;paramref name=&quot;destinationType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> のこのインスタンスを <paramref name="destinationType" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert a specified object to an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">指定したオブジェクトから <see cref="T:System.Windows.Size" /> のインスタンスへの変換を試みます。</summary>
      <param name="context" vsli:raw="Provides contextual information about a component.">コンポーネントに関するコンテキスト情報を提供します。</param>
      <param name="culture" vsli:raw="Culture-specific information that should be respected during conversion.">変換時に尊重する必要があるカルチャ固有の情報。</param>
      <param name="value" vsli:raw="The source object that is being converted.">変換されるソース オブジェクト。</param>
      <returns vsli:raw="The instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; that is created from the converted &lt;paramref name=&quot;source&quot; /&gt;.">変換された <paramref name="source" /> から作成される <see cref="T:System.Windows.Size" /> のインスタンス。</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to a specified type.">
        <see cref="T:System.Windows.Size" /> のインスタンスの指定した型への変換を試みます。</summary>
      <param name="context" vsli:raw="Provides contextual information about a component.">コンポーネントに関するコンテキスト情報を提供します。</param>
      <param name="culture" vsli:raw="Culture-specific information that should be respected during conversion.">変換時に尊重する必要があるカルチャ固有の情報。</param>
      <param name="value" vsli:raw="The instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to convert.">変換対象の <see cref="T:System.Windows.Size" /> のインスタンス。</param>
      <param name="destinationType" vsli:raw="The type that this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; is converted to.">
        <see cref="T:System.Windows.Size" /> のこのインスタンスの変換先の型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or is not an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;, or if the &lt;paramref name=&quot;destinationType&quot; /&gt; is not one of the valid destination types.">
        <paramref name="value" /> が <see langword="null" /> であるか、<see cref="T:System.Windows.Size" /> のインスタンスではない場合。または、<paramref name="destinationType" /> が有効な変換先の型の 1 つではない場合。</exception>
      <returns vsli:raw="The object that is created from the converted instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> の変換されたインスタンスから作成されるオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.SplashScreen">
      <summary vsli:raw="Provides a startup screen for a Windows Presentation Foundation (WPF) application.">Windows Presentation Foundation (WPF) アプリケーションの起動画面を設定します。</summary>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.Reflection.Assembly,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.SplashScreen&quot; /&gt; class with the specified resource assembly.">
        <see cref="T:System.Windows.SplashScreen" /> クラスの新しいインスタンスを、指定したリソース アセンブリで初期化します。</summary>
      <param name="resourceAssembly" vsli:raw="The assembly that contains the embedded resource.">埋め込みリソースを格納するアセンブリ。</param>
      <param name="resourceName" vsli:raw="The name of the embedded resource.">埋め込みリソースの名前。</param>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.SplashScreen&quot; /&gt; class with the specified resource.">
        <see cref="T:System.Windows.SplashScreen" /> クラスの新しいインスタンスを、指定したリソースで初期化します。</summary>
      <param name="resourceName" vsli:raw="The name of the embedded resource.">埋め込みリソースの名前。</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Close(System.TimeSpan)">
      <summary vsli:raw="Closes the splash screen.">スプラッシュ スクリーンを閉じます。</summary>
      <param name="fadeoutDuration" vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that specifies how long it will take for the splash screen to fade after the close operation has been initiated.">閉じる操作が開始されてからスプラッシュ スクリーンが消えるまでの時間を指定する <see cref="T:System.TimeSpan" />。</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean)">
      <summary vsli:raw="Displays the splash screen.">スプラッシュ スクリーンを表示します。</summary>
      <param name="autoClose" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to automatically close the splash screen; &lt;see langword=&quot;false&quot; /&gt; to close the splash screen manually.">スプラッシュ スクリーンを自動的に閉じる場合は <see langword="true" />。スプラッシュ スクリーンを手動で閉じる場合は <see langword="false" />。</param>
      <exception cref="T:System.IO.IOException" vsli:raw="The resource specified in the constructor could not be found.">コンストラクターで指定されているリソースが見つかりません。</exception>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean,System.Boolean)">
      <summary vsli:raw="Displays the splash screen.">スプラッシュ スクリーンを表示します。</summary>
      <param name="autoClose" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to automatically close the splash screen; &lt;see langword=&quot;false&quot; /&gt; to close the splash screen manually.">スプラッシュ スクリーンを自動的に閉じる場合は <see langword="true" />。スプラッシュ スクリーンを手動で閉じる場合は <see langword="false" />。</param>
      <param name="topMost" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the splash screen window should use the WS_EX_TOPMOST style; otherwise &lt;see langword=&quot;false&quot; /&gt;.">スプラッシュ スクリーン ウィンドウで WS_EX_TOPMOST スタイルを使用する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
    </member>
    <member name="T:System.Windows.Threading.Dispatcher">
      <summary vsli:raw="Provides services for managing the queue of work items for a thread.">スレッドの作業項目のキューを管理するためのサービスを提供します。</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownFinished">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; finishes shutting down.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを完了すると発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownStarted">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; begins to shut down.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを開始すると発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledException">
      <summary vsli:raw="Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.Invoke&quot; /&gt; or &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.BeginInvoke&quot; /&gt;.">
        <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> または <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> を使用したデリゲートの実行中にスローされたスレッドの例外をキャッチできないときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter">
      <summary vsli:raw="Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.Invoke&quot; /&gt; or &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.BeginInvoke&quot; /&gt; when in the filter stage.">フィルター段階で <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> または <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> を使用したデリゲートの実行中にスローされたスレッドの例外をキャッチできないときに発生します。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
      <summary vsli:raw="Executes the specified delegate asynchronously with the specified arguments on the thread that the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; was created on.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> が作成されたスレッドで、指定した引数で指定したデリゲートを非同期的に実行します。</summary>
      <param name="method" vsli:raw="The delegate to a method that takes parameters specified in &lt;paramref name=&quot;args&quot; /&gt;, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">
        <paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the given method. Can be &lt;see langword=&quot;null&quot; /&gt;.">特定のメソッドに引数として渡すオブジェクトの配列。 <see langword="null" /> の可能性があります。</param>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.BeginInvoke&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary vsli:raw="Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; was created on.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> が作成されたスレッドで、指定した引数を使用して指定したデリゲートを、指定した優先順位で非同期に実行します。</summary>
      <param name="method" vsli:raw="The delegate to a method that takes parameters specified in &lt;paramref name=&quot;args&quot; /&gt;, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">
        <paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">
        <see cref="T:System.Windows.Threading.Dispatcher" />指定されたメソッドが呼び出される、イベントキュー内の他の保留中の操作を基準とする優先順位。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the given method. Can be &lt;see langword=&quot;null&quot; /&gt;.">特定のメソッドに引数として渡すオブジェクトの配列。 <see langword="null" /> の可能性があります。</param>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.BeginInvoke&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary vsli:raw="Executes the specified delegate asynchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定したデリゲートを指定した優先順位で非同期的に実行します。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">
        <see cref="T:System.Windows.Threading.Dispatcher" />指定されたメソッドが呼び出される、イベントキュー内の他の保留中の操作を基準とする優先順位。</param>
      <param name="method" vsli:raw="The delegate to a method that takes no arguments, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">引数を受け取らないメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Windows.Threading.DispatcherPriority&quot; /&gt;.">
        <paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</exception>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.BeginInvoke&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary vsli:raw="Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で非同期的に実行します。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">
        <see cref="T:System.Windows.Threading.Dispatcher" />指定されたメソッドが呼び出される、イベントキュー内の他の保留中の操作を基準とする優先順位。</param>
      <param name="method" vsli:raw="A delegate to a method that takes one argument, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">引数を 1 つ受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="arg" vsli:raw="The object to pass as an argument to the specified method.">指定したメソッドに引数として渡すオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Windows.Threading.DispatcherPriority&quot; /&gt;.">
        <paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</exception>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.BeginInvoke&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary vsli:raw="Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した一連の引数を使用して、指定したデリゲートを指定した優先順位で非同期的に実行します。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">
        <see cref="T:System.Windows.Threading.Dispatcher" />指定されたメソッドが呼び出される、イベントキュー内の他の保留中の操作を基準とする優先順位。</param>
      <param name="method" vsli:raw="A delegate to a method that takes multiple arguments, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="arg" vsli:raw="The object to pass as an argument to the specified method.">指定したメソッドに引数として渡すオブジェクト。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the specified method.">指定したメソッドに引数として渡すオブジェクトの配列。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;see cref=&quot;T:System.Windows.Threading.DispatcherPriority&quot; /&gt; is not a valid priority.">
        <see cref="T:System.Windows.Threading.DispatcherPriority" /> が有効な優先順位ではありません。</exception>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.BeginInvoke&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; queue.">
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、<see cref="T:System.Windows.Threading.Dispatcher" /> キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Initiates shutdown of the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; asynchronously.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> のシャットダウンを非同期的に開始します。</summary>
      <param name="priority" vsli:raw="The priority at which to begin shutting down the dispatcher.">ディスパッチャーのシャットダウンを開始する優先順位。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.CheckAccess">
      <summary vsli:raw="Determines whether the calling thread is the thread associated with this &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられたスレッドであるかどうかを判断します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the calling thread is the thread associated with this &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられたスレッドである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.DisableProcessing">
      <summary vsli:raw="Disables processing of the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; queue.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> キューの処理を無効にします。</summary>
      <returns vsli:raw="A structure used to re-enable dispatcher processing.">ディスパッチャー処理を再度有効にするために使用される構造体。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ExitAllFrames">
      <summary vsli:raw="Requests that all frames exit, including nested frames.">入れ子になったフレームを含むすべてのフレームを閉じるように要求します。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; for the specified thread.">指定したスレッドの <see cref="T:System.Windows.Threading.Dispatcher" /> を取得します。</summary>
      <param name="thread" vsli:raw="The thread to obtain the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; from.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> の取得元のスレッド。</param>
      <returns vsli:raw="The dispatcher for &lt;paramref name=&quot;thread&quot; /&gt;.">
        <paramref name="thread" /> のディスパッチャー。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Action&quot; /&gt; synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を同期的に実行します。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">ディスパッチャーを通じて呼び出すデリゲート。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Action&quot; /&gt; synchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">指定されたコールバックが、内の他の保留中の操作に対して相対的に呼び出される順序を決定する優先順位 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Action&quot; /&gt; synchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">指定されたコールバックが、内の他の保留中の操作に対して相対的に呼び出される順序を決定する優先順位 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <param name="cancellationToken" vsli:raw="An object that indicates whether to cancel the action.">アクションをキャンセルするかどうかを示すオブジェクト。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Action&quot; /&gt; synchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</summary>
      <param name="callback" vsli:raw="An Action delegate to invoke through the dispatcher.">ディスパッチャーを通じて呼び出すアクションデリゲート。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">指定されたコールバックが、内の他の保留中の操作に対して相対的に呼び出される順序を決定する優先順位 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <param name="cancellationToken" vsli:raw="An object that indicates whether to cancel the action.">アクションをキャンセルするかどうかを示すオブジェクト。</param>
      <param name="timeout" vsli:raw="The maximum amount of time to wait for the operation to start. Once the operation has started, it will complete before this method returns. To specify an infinite wait, use a value of -1. In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait. In a cross-thread call, any other negative value throws an &lt;see cref=&quot;T:System.ArgumentOutOfRangeException&quot; /&gt;.">操作の開始を待機する最大時間。 操作が開始されると、このメソッドが戻る前に完了します。 無期限の待機を指定するには、値-1 を使用します。 同じスレッド呼び出しでは、その他の負の値は-1 に変換され、その結果、待機時間が無制限になります。 スレッド間の呼び出しでは、他の負の値がをスロー <see cref="T:System.ArgumentOutOfRangeException" /> します。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callback" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1, and this method was invoked across threads.">
        <paramref name="timeout" /> が-1 以外の負の数値です。このメソッドはスレッド間で呼び出されました。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> が有効な優先順位ではありません。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])">
      <summary vsli:raw="Executes the specified delegate with the specified arguments synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを同期的に実行します。</summary>
      <param name="method" vsli:raw="A delegate to a method that takes parameters specified in &lt;paramref name=&quot;args&quot; /&gt;, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">
        <paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the given method. Can be &lt;see langword=&quot;null&quot; /&gt;.">特定のメソッドに引数として渡すオブジェクトの配列。 <see langword="null" /> の可能性があります。</param>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])">
      <summary vsli:raw="Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で、指定した期間内に同期的に実行します。</summary>
      <param name="method" vsli:raw="A delegate to a method that takes parameters specified in &lt;paramref name=&quot;args&quot; /&gt;, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">
        <paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="timeout" vsli:raw="The maximum amount of time to wait for the operation to start. However, once the operation starts, it will complete before this method returns. To specify an infinite wait, use a value of -1. In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait. In a cross-thread call, any other negative value throws an &lt;see cref=&quot;T:System.ArgumentOutOfRangeException&quot; /&gt;.">操作の開始を待機する最大時間。 ただし、操作が開始されると、このメソッドが戻る前に完了します。 無期限の待機を指定するには、値-1 を使用します。 同じスレッド呼び出しでは、その他の負の値は-1 に変換され、その結果、待機時間が無制限になります。 スレッド間の呼び出しでは、他の負の値がをスロー <see cref="T:System.ArgumentOutOfRangeException" /> します。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the given method. Can be &lt;see langword=&quot;null&quot; /&gt; if no arguments are needed.">特定のメソッドに引数として渡すオブジェクトの配列。 <see langword="null" />引数が不要な場合は、を指定できます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1, and you're invoking across threads.">
        <paramref name="timeout" /> は-1 以外の負の数値であり、スレッド間で呼び出されています。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary vsli:raw="Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で、指定した期間内に同期的に実行します。</summary>
      <param name="method" vsli:raw="A delegate to a method that takes parameters specified in &lt;paramref name=&quot;args&quot; /&gt;, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">
        <paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="timeout" vsli:raw="The maximum amount of time to wait for the operation to start. Once the operation has started, it will complete before this method returns. To specify an infinite wait, use a value of -1. In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait. In a cross-thread call, any other negative value throws an &lt;see cref=&quot;T:System.ArgumentOutOfRangeException&quot; /&gt;.">操作の開始を待機する最大時間。 操作が開始されると、このメソッドが戻る前に完了します。 無期限の待機を指定するには、値-1 を使用します。 同じスレッド呼び出しでは、その他の負の値は-1 に変換され、その結果、待機時間が無制限になります。 スレッド間の呼び出しでは、他の負の値がをスロー <see cref="T:System.ArgumentOutOfRangeException" /> します。</param>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">
        <see cref="T:System.Windows.Threading.Dispatcher" />指定されたメソッドが呼び出される、イベントキュー内の他の保留中の操作を基準とする優先順位。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the given method. Can be &lt;see langword=&quot;null&quot; /&gt;.">特定のメソッドに引数として渡すオブジェクトの配列。 <see langword="null" /> の可能性があります。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1, and this method was invoked across threads.">
        <paramref name="timeout" /> が-1 以外の負の数値です。このメソッドはスレッド間で呼び出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherPriority.Inactive&quot; /&gt;.">
        <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> が有効な優先順位ではありません。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary vsli:raw="Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</summary>
      <param name="method" vsli:raw="A delegate to a method that takes parameters specified in &lt;paramref name=&quot;args&quot; /&gt;, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">
        <paramref name="args" /> で指定したパラメーターを受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="priority" vsli:raw="The priority with which the specified method is invoked, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">指定したメソッドの呼び出しに使用する優先順位。イベントキュー内の他の保留中の操作を基準とし <see cref="T:System.Windows.Threading.Dispatcher" /> ます。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the given method. Can be &lt;see langword=&quot;null&quot; /&gt;.">特定のメソッドに引数として渡すオブジェクトの配列。 <see langword="null" /> の可能性があります。</param>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary vsli:raw="Executes the specified delegate synchronously at the specified priority on the thread that the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">が関連付けられているスレッドで、指定したデリゲートを指定した優先順位で同期的に実行し <see cref="T:System.Windows.Threading.Dispatcher" /> ます。</summary>
      <param name="priority" vsli:raw="The priority with which the specified method is invoked, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">指定したメソッドの呼び出しに使用する優先順位。イベントキュー内の他の保留中の操作を基準とし <see cref="T:System.Windows.Threading.Dispatcher" /> ます。</param>
      <param name="method" vsli:raw="A delegate to a method that takes no arguments, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">引数を受け取らないメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherPriority.Inactive&quot; /&gt;.">
        <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> が有効な優先順位ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary vsli:raw="Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">
        <see cref="T:System.Windows.Threading.Dispatcher" />指定されたメソッドが呼び出される、イベントキュー内の他の保留中の操作を基準とする優先順位。</param>
      <param name="method" vsli:raw="A delegate to a method that takes one argument, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">引数を 1 つ受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="arg" vsli:raw="An object to pass as an argument to the given method.">指定したメソッドに引数として渡すオブジェクト。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherPriority.Inactive&quot; /&gt;.">
        <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> が有効な優先順位ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary vsli:raw="Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">
        <see cref="T:System.Windows.Threading.Dispatcher" />指定されたメソッドが呼び出される、イベントキュー内の他の保留中の操作を基準とする優先順位。</param>
      <param name="method" vsli:raw="A delegate to a method that takes multiple arguments, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="arg" vsli:raw="An object to pass as an argument to the given method.">指定したメソッドに引数として渡すオブジェクト。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the given method.">特定のメソッドに引数として渡すオブジェクトの配列。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherPriority.Inactive&quot; /&gt;.">
        <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> が有効な優先順位ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)">
      <summary vsli:raw="Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; was created.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> が作成されたスレッドで、指定したタイムアウトの値を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">
        <see cref="T:System.Windows.Threading.Dispatcher" />指定されたメソッドが呼び出される、イベントキュー内の他の保留中の操作を基準とする優先順位。</param>
      <param name="timeout" vsli:raw="The maximum amount of time to wait for the operation to start. Once the operation has started, it will complete before this method returns. To specify an infinite wait, use a value of -1. In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait. In a cross-thread call, any other negative value throws an &lt;see cref=&quot;T:System.ArgumentOutOfRangeException&quot; /&gt;.">操作の開始を待機する最大時間。 操作が開始されると、このメソッドが戻る前に完了します。 無期限の待機を指定するには、値-1 を使用します。 同じスレッド呼び出しでは、その他の負の値は-1 に変換され、その結果、待機時間が無制限になります。 スレッド間の呼び出しでは、他の負の値がをスロー <see cref="T:System.ArgumentOutOfRangeException" /> します。</param>
      <param name="method" vsli:raw="The delegate to a method that takes no arguments, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">引数を受け取らないメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1, and this method was invoked across threads.">
        <paramref name="timeout" /> が-1 以外の負の数値です。このメソッドはスレッド間で呼び出されました。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherPriority.Inactive&quot; /&gt;.">
        <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> が有効な優先順位ではありません。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)">
      <summary vsli:raw="Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">
        <see cref="T:System.Windows.Threading.Dispatcher" />指定されたメソッドが呼び出される、イベントキュー内の他の保留中の操作を基準とする優先順位。</param>
      <param name="timeout" vsli:raw="The maximum amount of time to wait for the operation to start. Once the operation has started, it will complete before this method returns. To specify an infinite wait, use a value of -1. In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait. In a cross-thread call, any other negative value throws an &lt;see cref=&quot;T:System.ArgumentOutOfRangeException&quot; /&gt;.">操作の開始を待機する最大時間。 操作が開始されると、このメソッドが戻る前に完了します。 無期限の待機を指定するには、値-1 を使用します。 同じスレッド呼び出しでは、その他の負の値は-1 に変換され、その結果、待機時間が無制限になります。 スレッド間の呼び出しでは、他の負の値がをスロー <see cref="T:System.ArgumentOutOfRangeException" /> します。</param>
      <param name="method" vsli:raw="A delegate to a method that takes multiple arguments, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="arg" vsli:raw="An object to pass as an argument to the given method. This can be &lt;see langword=&quot;null&quot; /&gt; if no arguments are needed.">指定したメソッドに引数として渡すオブジェクト。 引数が必要ない場合は、<see langword="null" /> を指定できます。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherPriority.Inactive&quot; /&gt;.">
        <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> が有効な優先順位ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> が <see langword="null" />です。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])">
      <summary vsli:raw="Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドで、指定した引数を使用して、指定したデリゲートを指定した優先順位で同期的に実行します。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">
        <see cref="T:System.Windows.Threading.Dispatcher" />指定されたメソッドが呼び出される、イベントキュー内の他の保留中の操作を基準とする優先順位。</param>
      <param name="timeout" vsli:raw="The maximum amount of time to wait for the operation to start. Once the operation has started, it will complete before this method returns. To specify an infinite wait, use a value of -1. In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait. In a cross-thread call, any other negative value throws an &lt;see cref=&quot;T:System.ArgumentOutOfRangeException&quot; /&gt;.">操作の開始を待機する最大時間。 操作が開始されると、このメソッドが戻る前に完了します。 無期限の待機を指定するには、値-1 を使用します。 同じスレッド呼び出しでは、その他の負の値は-1 に変換され、その結果、待機時間が無制限になります。 スレッド間の呼び出しでは、他の負の値がをスロー <see cref="T:System.ArgumentOutOfRangeException" /> します。</param>
      <param name="method" vsli:raw="A delegate to a method that takes multiple arguments, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">複数の引数を受け取るメソッドへのデリゲート。このデリゲートは、<see cref="T:System.Windows.Threading.Dispatcher" /> イベント キューにプッシュされます。</param>
      <param name="arg" vsli:raw="An object to pass as an argument to the specified method.">指定したメソッドに引数として渡すオブジェクト。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the specified method.">指定したメソッドに引数として渡すオブジェクトの配列。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherPriority.Inactive&quot; /&gt;.">
        <paramref name="priority" /> と <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" /> が等価です。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Windows.Threading.DispatcherPriority&quot; /&gt;.">
        <paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1, and this method was invoked across threads.">
        <paramref name="timeout" /> が-1 以外の負の数値です。このメソッドはスレッド間で呼び出されました。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">呼び出されているデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Func`1&quot; /&gt; synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を同期的に実行します。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <typeparam name="TResult" vsli:raw="The return value type of the specified delegate.">指定されたデリゲートの戻り値の型。</typeparam>
      <returns vsli:raw="The value returned by &lt;paramref name=&quot;callback&quot; /&gt;.">によって返される値 <paramref name="callback" /> 。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Func`1&quot; /&gt; synchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">指定されたコールバックが、内の他の保留中の操作に対して相対的に呼び出される順序を決定する優先順位 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <typeparam name="TResult" vsli:raw="The return value type of the specified delegate.">指定されたデリゲートの戻り値の型。</typeparam>
      <returns vsli:raw="The value returned by &lt;paramref name=&quot;callback&quot; /&gt;.">によって返される値 <paramref name="callback" /> 。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Func`1&quot; /&gt; synchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">指定されたコールバックが、内の他の保留中の操作に対して相対的に呼び出される順序を決定する優先順位 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <param name="cancellationToken" vsli:raw="An object that indicates whether to cancel the operation.">操作をキャンセルするかどうかを示すオブジェクト。</param>
      <typeparam name="TResult" vsli:raw="The return value type of the specified delegate.">指定されたデリゲートの戻り値の型。</typeparam>
      <returns vsli:raw="The value returned by &lt;paramref name=&quot;callback&quot; /&gt;.">によって返される値 <paramref name="callback" /> 。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Func`1&quot; /&gt; synchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で同期的に実行します。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">指定されたコールバックが、内の他の保留中の操作に対して相対的に呼び出される順序を決定する優先順位 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <param name="cancellationToken" vsli:raw="An object that indicates whether to cancel the operation.">操作をキャンセルするかどうかを示すオブジェクト。</param>
      <param name="timeout" vsli:raw="The maximum amount of time to wait for the operation to start. Once the operation has started, it will complete before this method returns. To specify an infinite wait, use a value of -1. In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait. In a cross-thread call, any other negative value throws an &lt;see cref=&quot;T:System.ArgumentOutOfRangeException&quot; /&gt;.">操作の開始を待機する最大時間。 操作が開始されると、このメソッドが戻る前に完了します。 無期限の待機を指定するには、値-1 を使用します。 同じスレッド呼び出しでは、その他の負の値は-1 に変換され、その結果、待機時間が無制限になります。 スレッド間の呼び出しでは、他の負の値がをスロー <see cref="T:System.ArgumentOutOfRangeException" /> します。</param>
      <typeparam name="TResult" vsli:raw="The return value type of the specified delegate.">指定されたデリゲートの戻り値の型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callback" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1, and the method was invoked across threads.">
        <paramref name="timeout" /> が-1 以外の負の数値です。メソッドがスレッド間で呼び出されました。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> が有効な優先順位ではありません。</exception>
      <returns vsli:raw="The value returned by &lt;paramref name=&quot;callback&quot; /&gt;.">によって返される値 <paramref name="callback" /> 。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Action&quot; /&gt; asynchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を非同期に実行します。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Action&quot; /&gt; asynchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">指定されたコールバックが、内の他の保留中の操作に対して相対的に呼び出される順序を決定する優先順位 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Action&quot; /&gt; asynchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Action" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">指定されたコールバックが、内の他の保留中の操作に対して相対的に呼び出される順序を決定する優先順位 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <param name="cancellationToken" vsli:raw="An object that indicates whether to cancel the action.">アクションをキャンセルするかどうかを示すオブジェクト。</param>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Func`1&quot; /&gt; asynchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を非同期に実行します。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <typeparam name="TResult" vsli:raw="The return value type of the specified delegate.">指定されたデリゲートの戻り値の型。</typeparam>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Func`1&quot; /&gt; asynchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">指定されたコールバックが、内の他の保留中の操作に対して相対的に呼び出される順序を決定する優先順位 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <typeparam name="TResult" vsli:raw="The return value type of the specified delegate.">指定されたデリゲートの戻り値の型。</typeparam>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Func`1&quot; /&gt; asynchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">
        <see cref="T:System.Func`1" /> が関連付けられているスレッドで、指定した <see cref="T:System.Windows.Threading.Dispatcher" /> を指定した優先順位で非同期的に実行します。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">ディスパッチャーを通じて呼び出すデリゲート。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">指定されたコールバックが、内の他の保留中の操作に対して相対的に呼び出される順序を決定する優先順位 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <param name="cancellationToken" vsli:raw="An object that indicates whether to cancel the operation.">操作をキャンセルするかどうかを示すオブジェクト。</param>
      <typeparam name="TResult" vsli:raw="The return value type of the specified delegate.">指定されたデリゲートの戻り値の型。</typeparam>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> の呼び出し直後に返されるオブジェクト。このオブジェクトを使用して、イベント キューで実行が保留になっているデリゲートと対話できます。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeShutdown">
      <summary vsli:raw="Initiates the shutdown process of the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; synchronously.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> のシャットダウン プロセスを同期的に開始します。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)">
      <summary vsli:raw="Enters an execute loop.">実行ループに入ります。</summary>
      <param name="frame" vsli:raw="The frame for the dispatcher to process.">ディスパッチャーが処理するフレーム。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;frame&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="frame" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Threading.Dispatcher.HasShutdownFinished&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;frame&quot; /&gt; is running on a different &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Dispatcher processing has been disabled.">
        <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> は <see langword="true" /> です  
  
- または - 
 <paramref name="frame" /> が別の <see cref="T:System.Windows.Threading.Dispatcher" /> で実行されています。  
  
- または - 
ディスパッチャー処理が無効になっています。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Run">
      <summary vsli:raw="Pushes the main execution frame on the event queue of the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">メイン実行フレームを <see cref="T:System.Windows.Threading.Dispatcher" /> のイベント キューにプッシュします。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Threading.DispatcherPriority&quot; /&gt; is a valid priority.">指定した <see cref="T:System.Windows.Threading.DispatcherPriority" /> が有効な優先順位かどうかを判断します。</summary>
      <param name="priority" vsli:raw="The priority to check.">確認する対象の優先順位。</param>
      <param name="parameterName" vsli:raw="A string that will be returned by the exception that occurs if the priority is invalid.">優先順位が無効な場合に発生する例外によって返される文字列。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Windows.Threading.DispatcherPriority&quot; /&gt;.">
        <paramref name="priority" /> は有効な <see cref="T:System.Windows.Threading.DispatcherPriority" /> ではありません。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.VerifyAccess">
      <summary vsli:raw="Determines whether the calling thread has access to this &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.Dispatcher" /> にアクセスできるかどうかを確認します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The calling thread does not have access to this &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">呼び出し元のスレッドは、この <see cref="T:System.Windows.Threading.Dispatcher" /> にアクセスできません。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield">
      <summary vsli:raw="Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクトを作成します。</summary>
      <returns vsli:raw="An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクト。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.  The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクトを作成します。  このメソッドの結果を待機するコードにコントロールが戻り、指定された優先度がスケジュールされたときに実行される処理。</summary>
      <param name="priority" vsli:raw="The priority at which to schedule the continuation.">継続をスケジュールする優先順位。</param>
      <returns vsli:raw="An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクト。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.CurrentDispatcher">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; for the thread currently executing and creates a new &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; if one is not already associated with the thread.">現在実行中のスレッドの <see cref="T:System.Windows.Threading.Dispatcher" /> を取得します。そのスレッドにディスパッチャーが関連付けられていない場合は、新しい <see cref="T:System.Windows.Threading.Dispatcher" /> を作成します。</summary>
      <returns vsli:raw="The dispatcher associated with the current thread.">現在のスレッドに関連付けられているディスパッチャー。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownFinished">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; has finished shutting down.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを完了したかどうかを確認します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dispatcher has finished shutting down; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">ディスパッチャーがシャットダウンを完了した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownStarted">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is shutting down.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンしているかどうかを確認します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; has started shutting down; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> がシャットダウンを開始した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Hooks">
      <summary vsli:raw="Gets the collection of hooks that provide additional event information about the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> に関する追加イベント情報を提供するフックのコレクションを取得します。</summary>
      <returns vsli:raw="The hooks associated with this &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">この <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられたフック。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Thread">
      <summary vsli:raw="Gets the thread this &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">この <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられているスレッドを取得します。</summary>
      <returns vsli:raw="The thread.">スレッド。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherEventArgs">
      <summary vsli:raw="Provides event data for &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; related events.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> 関連イベントのイベント データを提供します。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherEventArgs.Dispatcher">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; associated with this event.">このイベントに関連付けられている <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <returns vsli:raw="The dispatcher.">ディスパッチャー。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherFrame">
      <summary vsli:raw="Represents an execution loop in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> 内の実行ループを表します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherFrame&quot; /&gt; class.">
        <see cref="T:System.Windows.Threading.DispatcherFrame" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherFrame&quot; /&gt; class, by using the specified exit request flag.">指定した終了要求フラグを使用して、<see cref="T:System.Windows.Threading.DispatcherFrame" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="exitWhenRequested" vsli:raw="Indicates whether this frame will exit when all frames are requested to exit.">すべてのフレームが閉じるように要求された場合に、このフレームが閉じるかどうかを示します。</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherFrame.Continue">
      <summary vsli:raw="Gets or sets a value that indicates whether this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherFrame&quot; /&gt; should continue.">この <see cref="T:System.Windows.Threading.DispatcherFrame" /> を続行するかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the frame should continue; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  The default value is &lt;see langword=&quot;true&quot; /&gt;.">フレームを続行する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventArgs">
      <summary vsli:raw="Provides event data for &lt;see cref=&quot;T:System.Windows.Threading.DispatcherHooks&quot; /&gt; events.">
        <see cref="T:System.Windows.Threading.DispatcherHooks" /> イベントのイベント データを提供します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherHookEventArgs.#ctor(System.Windows.Threading.DispatcherOperation)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherHookEventArgs&quot; /&gt; class.">
        <see cref="T:System.Windows.Threading.DispatcherHookEventArgs" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="operation" vsli:raw="The operation associated with the event.">イベントに関連付けられている操作。</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Dispatcher">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; associated with this event.">このイベントに関連付けられている <see cref="T:System.Windows.Threading.Dispatcher" /> を取得します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; associated with this event.">このイベントに関連付けられている <see cref="T:System.Windows.Threading.Dispatcher" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Operation">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherOperation&quot; /&gt; associated with this event.">このイベントに関連付けられている <see cref="T:System.Windows.Threading.DispatcherOperation" /> を取得します。</summary>
      <returns vsli:raw="The operation.">操作。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventHandler">
      <summary vsli:raw="Represents the method that will handle &lt;see cref=&quot;T:System.Windows.Threading.DispatcherHooks&quot; /&gt; related events.">
        <see cref="T:System.Windows.Threading.DispatcherHooks" /> 関連イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="The event data.">イベントのデータ。</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHooks">
      <summary vsli:raw="Provides additional event information about &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; processing.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> の処理に関する追加のイベント情報を提供します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.DispatcherInactive">
      <summary vsli:raw="Occurs when the dispatcher has no more operations to process.">ディスパッチャーに処理する操作がなくなると発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationAborted">
      <summary vsli:raw="Occurs when an operation is aborted.">操作が中止されたときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationCompleted">
      <summary vsli:raw="Occurs when an operation completes.">操作が完了するときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPosted">
      <summary vsli:raw="Occurs when an operation is posted to the dispatcher.">操作がディスパッチャーにポストされるときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPriorityChanged">
      <summary vsli:raw="Occurs when the priority of an operation is changed.">操作の優先順位が変更されると発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationStarted">
      <summary vsli:raw="Occurs when an operation is invoked.">操作が呼び出されるときに発生します。</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherObject">
      <summary vsli:raw="Represents an object that is associated with a &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられているオブジェクトを表します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherObject&quot; /&gt; class.">
        <see cref="T:System.Windows.Threading.DispatcherObject" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.CheckAccess">
      <summary vsli:raw="Determines whether the calling thread has access to this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherObject&quot; /&gt;.">呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.DispatcherObject" /> にアクセスできるかどうかを確認します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the calling thread has access to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">呼び出し元のスレッドがこのオブジェクトにアクセスできる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.VerifyAccess">
      <summary vsli:raw="Enforces that the calling thread has access to this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherObject&quot; /&gt;.">呼び出し元のスレッドがこの <see cref="T:System.Windows.Threading.DispatcherObject" /> にアクセスできるように強制します。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="the calling thread does not have access to this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherObject&quot; /&gt;.">呼び出し元のスレッドは、この <see cref="T:System.Windows.Threading.DispatcherObject" /> にアクセスできません。</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherObject.Dispatcher">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherObject&quot; /&gt; is associated with.">この <see cref="T:System.Windows.Threading.Dispatcher" /> が関連付けられている <see cref="T:System.Windows.Threading.DispatcherObject" /> を取得します。</summary>
      <returns vsli:raw="The dispatcher.">ディスパッチャー。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation">
      <summary vsli:raw="Represents an object that is used to interact with an operation that has been posted to the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; queue.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> キューにポストされた操作にアクセスするために使用するオブジェクトを表します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Aborted">
      <summary vsli:raw="Occurs when the operation is aborted.">操作が中止されたときに発生します。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Completed">
      <summary vsli:raw="Occurs when the operation has completed.">操作の完了時に発生します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Abort">
      <summary vsli:raw="Aborts the operation.">操作を中止します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation was aborted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">操作が中止された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.GetAwaiter">
      <summary vsli:raw="Returns an object that is notified when the asynchronous operation is finished.">非同期操作の終了時に通知を受け取るオブジェクトを返します。</summary>
      <returns vsli:raw="An object that is notified when the asynchronous operation is finished.">非同期操作の完了時に通知を受けるオブジェクト。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.InvokeDelegateCore">
      <summary vsli:raw="Begins the operation that is associated with this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherOperation&quot; /&gt;.">この <see cref="T:System.Windows.Threading.DispatcherOperation" /> に関連付けられている操作を開始します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;null&quot; /&gt; in all cases.">常に <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait">
      <summary vsli:raw="Waits for the operation to complete.">操作の完了を待ちます。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Threading.DispatcherOperation.Status&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherOperationStatus.Executing&quot; /&gt;.  This can occur when waiting for an operation that is already executing on the same thread.">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> と <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" /> が等価です。  これは、同じスレッドで既に実行中の操作を待機しているときに発生する可能性があります。</exception>
      <returns vsli:raw="The status of the operation.">操作のステータス。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)">
      <summary vsli:raw="Waits for the operation to complete in the specified period of time.">指定された期間、操作の完了を待ちます。</summary>
      <param name="timeout" vsli:raw="The maximum period of time to wait.">最大待機時間。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Threading.DispatcherOperation.Status&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherOperationStatus.Executing&quot; /&gt;.  This can occur when waiting for an operation that is already executing on the same thread.">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> と <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" /> が等価です。  これは、同じスレッドで既に実行中の操作を待機しているときに発生する可能性があります。</exception>
      <returns vsli:raw="The status of the operation.">操作のステータス。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Dispatcher">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; that the operation was posted to.">操作がポストされた <see cref="T:System.Windows.Threading.Dispatcher" /> を取得します。</summary>
      <returns vsli:raw="The dispatcher.">ディスパッチャー。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Priority">
      <summary vsli:raw="Gets or sets the priority of the operation in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; queue.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> キュー内の操作の優先順位を取得または設定します。</summary>
      <returns vsli:raw="The priority of the delegate on the queue.">キューのデリゲートの優先順位。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Result">
      <summary vsli:raw="Gets the result of the operation after it has completed.">操作の完了後に操作の結果を取得します。</summary>
      <returns vsli:raw="The result of the operation -or- &lt;see langword=&quot;null&quot; /&gt; if the operation has not completed.">操作の結果。操作が完了していない場合は <see langword="null" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Status">
      <summary vsli:raw="Gets the current status of the operation.">操作の現在のステータスを取得します。</summary>
      <returns vsli:raw="The status of the operation.">操作のステータス。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Task">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the current operation.">現在の操作を表す <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="An object that represents the current operation.">現在の操作を表すオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation`1">
      <summary vsli:raw="Represents an object that is used to interact with an operation that has been posted to the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; queue and contains a &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt;.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> キューにポストされた、<see cref="T:System.Threading.Tasks.Task`1" /> を含む操作にアクセスするために使用するオブジェクトを表します。</summary>
      <typeparam name="TResult" vsli:raw="The type that is returned by the &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt;.">
        <see cref="T:System.Threading.Tasks.Task`1" /> によって返される型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.GetAwaiter">
      <summary vsli:raw="Returns an object that awaits an asynchronous operation that returns a result.">結果を返す非同期操作を待つオブジェクトを返します。</summary>
      <returns vsli:raw="An object that awaits an asynchronous operation that returns a result.">結果を返す非同期操作のために待機しているオブジェクト。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.InvokeDelegateCore">
      <summary vsli:raw="Begins the operation that is associated with this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherOperation&quot; /&gt;.">この <see cref="T:System.Windows.Threading.DispatcherOperation" /> に関連付けられている操作を開始します。</summary>
      <returns vsli:raw="The result of the operation.">操作の結果。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Result">
      <summary vsli:raw="Gets the result of the operation after it has completed.">操作の完了後に操作の結果を取得します。</summary>
      <returns vsli:raw="The result of the operation.">操作の結果。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Task">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the current operation.">現在の操作を表す <see cref="T:System.Threading.Tasks.Task`1" /> オブジェクトを取得します。</summary>
      <returns vsli:raw="An object that represents the current operation.">現在の操作を表すオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationCallback">
      <summary vsli:raw="Represents a delegate to use for dispatcher operations.">ディスパッチャー操作に使用するデリゲートを表します。</summary>
      <param name="arg" vsli:raw="An argument passed to the callback.">コールバックに渡される引数。</param>
      <returns vsli:raw="The object returned by the callback.">コールバックによって返されるオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationStatus">
      <summary vsli:raw="Describes the possible values for the status of a &lt;see cref=&quot;T:System.Windows.Threading.DispatcherOperation&quot; /&gt;.">
        <see cref="T:System.Windows.Threading.DispatcherOperation" /> のステータスの有効値を示します。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Aborted">
      <summary vsli:raw="The operation has aborted.">操作は中断されました。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Completed">
      <summary vsli:raw="The operation is completed.">操作は完了しました。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Executing">
      <summary vsli:raw="The operation started executing, but has not completed.">操作は実行を開始しましたが、完了していません。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Pending">
      <summary vsli:raw="The operation is pending and is still in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; queue.">操作は保留中であり、まだ <see cref="T:System.Windows.Threading.Dispatcher" /> キューにあります。</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriority">
      <summary vsli:raw="Describes the priorities at which operations can be invoked by way of the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">
        <see cref="T:System.Windows.Threading.Dispatcher" /> での処理呼び出しの優先順位を示します。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ApplicationIdle">
      <summary vsli:raw="The enumeration value is 2. Operations are processed when the application is idle.">列挙値は 2 です。 アプリケーションがアイドル状態のときに操作が処理されます。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Background">
      <summary vsli:raw="The enumeration value is 4. Operations are processed after all other non-idle operations are completed.">列挙値は 4 です。 他のすべての非アイドル状態の操作が完了した後に操作が処理されます。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ContextIdle">
      <summary vsli:raw="The enumeration value is 3. Operations are processed after background operations have completed.">列挙値は 3 です。 バックグラウンド操作が完了した後に操作が処理されます。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.DataBind">
      <summary vsli:raw="The enumeration value is 8. Operations are processed at the same priority as data binding.">列挙値は 8 です。 データ バインディングと同じ優先順位で操作が処理されます。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Inactive">
      <summary vsli:raw="The enumeration value is 0. Operations are not processed.">列挙値は 0 です。 操作は処理されません。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Input">
      <summary vsli:raw="The enumeration value is 5. Operations are processed at the same priority as input.">列挙値は 5 です。 入力と同じ優先順位で操作が処理されます。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Invalid">
      <summary vsli:raw="The enumeration value is -1. This is an invalid priority.">列挙値は -1 です。 これは無効な優先順位です。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Loaded">
      <summary vsli:raw="The enumeration value is 6. Operations are processed when layout and render has finished but just before items at input priority are serviced. Specifically this is used when raising the Loaded event.">列挙値は 6 です。 レイアウトとレンダリングが完了した後、入力の優先順位の付いた項目が処理される直前に、操作が処理されます。 具体的には、これは、Loaded イベントを発生させるときに使用されます。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Normal">
      <summary vsli:raw="The enumeration value is 9. Operations are processed at normal priority. This is the typical application priority.">列挙値は 9 です。 通常の優先順位で操作が処理されます。 これが一般的なアプリケーションの優先順位です。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Render">
      <summary vsli:raw="The enumeration value is 7. Operations processed at the same priority as rendering.">列挙値は 7 です。 レンダリングと同じ優先順位で操作が処理されます。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Send">
      <summary vsli:raw="The enumeration value is 10. Operations are processed before other asynchronous operations. This is the highest priority.">列挙値は 10 です。 他の非同期操作の前に操作が処理されます。 これが最も高い優先順位です。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.SystemIdle">
      <summary vsli:raw="The enumeration value is 1. Operations are processed when the system is idle.">列挙値は 1 です。 システムがアイドル状態のときに操作が処理されます。</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaitable">
      <summary vsli:raw="Represents an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.">現在のディスパッチャーに非同期的にコントロールを渡して他のイベントを処理する機会を提供する、待機可能オブジェクトを表します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaitable.GetAwaiter">
      <summary vsli:raw="Returns an object that waits for the completion of an asynchronous task.">非同期タスクの完了待ちのオブジェクトを返します。</summary>
      <returns vsli:raw="An object that waits for the completion of an asynchronous task.">非同期タスクの完了待ちのオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaiter">
      <summary vsli:raw="Represents an object that waits for the completion of an asynchronous task.">非同期タスクの完了待ちのオブジェクトを表します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.GetResult">
      <summary vsli:raw="Ends the wait for the completion of the asynchronous task.">非同期タスクの完了の待機を終了します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.OnCompleted(System.Action)">
      <summary vsli:raw="Sets the action to perform when the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherPriorityAwaiter&quot; /&gt; object stops waiting for the asynchronous task to complete.">
        <see cref="T:System.Windows.Threading.DispatcherPriorityAwaiter" /> オブジェクトが、非同期タスクの完了を待機するのをやめたときに実行するアクションを設定します。</summary>
      <param name="continuation" vsli:raw="The action to perform when the wait operation completes.">待機操作の完了時に実行するアクション。</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherPriorityAwaiter.IsCompleted">
      <summary vsli:raw="Gets a value that indicates whether the asynchronous task has completed.">非同期タスクが完了したかどうかを示す値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">常に <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherProcessingDisabled">
      <summary vsli:raw="Represents the Dispatcher when it is in a disable state and provides a means to re-enable dispatcher processing.">無効な状態のディスパッチャーを表し、ディスパッチャーの処理を再度有効にする手段を提供します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Dispose">
      <summary vsli:raw="Re-enables dispatcher processing.">ディスパッチャーの処理を再度有効にします。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Threading.DispatcherProcessingDisabled&quot; /&gt; object is equal to this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherProcessingDisabled&quot; /&gt; object.">指定した <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> オブジェクトがこの <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> オブジェクトと等しいかどうかを判断します。</summary>
      <param name="obj" vsli:raw="The object to evaluate for equality.">等しいかどうかについての評価対象となるオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is equal to this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherProcessingDisabled&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定したオブジェクトがこの <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> オブジェクトと等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.GetHashCode">
      <summary vsli:raw="Gets a hash code for this instance.">このインスタンスのハッシュ コードを取得します。</summary>
      <returns vsli:raw="A signed 32-bit integer hash code.">32 ビット符号付き整数ハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Equality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.Windows.Threading.DispatcherProcessingDisabled&quot; /&gt; objects are equal.">2 つの <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> オブジェクトが等しいかどうかを判断します。</summary>
      <param name="left" vsli:raw="The first object to compare.">比較する最初のオブジェクト。</param>
      <param name="right" vsli:raw="The second object to compare.">比較する 2 番目のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherProcessingDisabled&quot; /&gt; objects are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> オブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Inequality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.Windows.Threading.DispatcherProcessingDisabled&quot; /&gt; objects are not equal.">2 つの <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> オブジェクトが等しくないかどうかを判断します。</summary>
      <param name="left" vsli:raw="The first object to compare.">比較する最初のオブジェクト。</param>
      <param name="right" vsli:raw="The second object to compare.">比較する 2 番目のオブジェクト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherProcessingDisabled&quot; /&gt; objects are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> オブジェクトが等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherSynchronizationContext">
      <summary vsli:raw="Provides a synchronization context for Windows Presentation Foundation (WPF).">Windows Presentation Foundation (WPF) の同期コンテキストを提供します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt; class by using the current &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">現在の <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> を使用して、<see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt; class by using the specified &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">指定された <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> を使用して、<see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dispatcher" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; to associate this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt; with.">この <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付ける <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dispatcher&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dispatcher" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt; class by using the specified &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">指定された <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> を使用して、<see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="dispatcher" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; to associate this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt; with.">この <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付ける <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />。</param>
      <param name="priority" vsli:raw="The priority used to send and post callback methods.">コールバック メソッドを送信およびポストするために使用される優先順位。</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy">
      <summary vsli:raw="Creates a copy of this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt;.">この <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> のコピーを作成します。</summary>
      <returns vsli:raw="The copy of this synchronization context.">この同期コンテキストのコピー。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary vsli:raw="Invokes the callback in the synchronization context asynchronously.">同期コンテキストでのコールバックを非同期に呼び出します。</summary>
      <param name="d" vsli:raw="The delegate to call.">呼び出すデリゲート。</param>
      <param name="state" vsli:raw="The object passed to the delegate.">デリゲートに渡されたオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;d&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary vsli:raw="Invokes the callback in the synchronization context synchronously.">同期コンテキストでのコールバックを同期的に呼び出します。</summary>
      <param name="d" vsli:raw="The delegate to call.">呼び出すデリゲート。</param>
      <param name="state" vsli:raw="The object passed to the delegate.">デリゲートに渡されたオブジェクト。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;d&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)">
      <summary vsli:raw="Waits for any or all the elements in the specified array to receive a signal.">指定した配列内のいずれかの要素またはすべての要素がシグナルを受信するまで待機します。</summary>
      <param name="waitHandles" vsli:raw="An array that contains the native operating system handles.">ネイティブのオペレーティング システム ハンドルを格納する配列。</param>
      <param name="waitAll" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to wait for all handles; &lt;see langword=&quot;false&quot; /&gt; to wait for any handle.">すべてのハンドルを待機する場合は <see langword="true" />。いずれかのハンドルを待機する場合は <see langword="false" />。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">待機するミリ秒数。無制限に待機する場合は <see cref="F:System.Threading.Timeout.Infinite" /> (-1)。</param>
      <returns vsli:raw="The array index of the object that satisfied the wait.">待機を実行するオブジェクトの配列インデックス。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherTimer">
      <summary vsli:raw="A timer that is integrated into the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; queue which is processed at a specified interval of time and at a specified priority.">指定した時間の間隔で、指定した優先順位で処理される <see cref="T:System.Windows.Threading.Dispatcher" /> キューに統合されているタイマー。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherTimer.Tick">
      <summary vsli:raw="Occurs when the timer interval has elapsed.">タイマー間隔が経過すると発生します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherTimer&quot; /&gt; class.">
        <see cref="T:System.Windows.Threading.DispatcherTimer" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherTimer&quot; /&gt; class which uses the specified time interval, priority, event handler, and &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">指定した時間間隔、優先順位、イベント ハンドラー、および <see cref="T:System.Windows.Threading.DispatcherTimer" /> を使用する <see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="interval" vsli:raw="The period of time between ticks.">タイマー刻み間の時間。</param>
      <param name="priority" vsli:raw="The priority at which to invoke the timer.">タイマーを起動する優先順位。</param>
      <param name="callback" vsli:raw="The event handler to call when the &lt;see cref=&quot;E:System.Windows.Threading.DispatcherTimer.Tick&quot; /&gt; event occurs.">
        <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> イベントが発生したときに呼び出すイベント ハンドラー。</param>
      <param name="dispatcher" vsli:raw="The dispatcher the timer is associated with.">タイマーが関連付けられているディスパッチャー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;dispatcher&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callback" /> が <see langword="null" />です。

- または -

<paramref name="dispatcher" /> が <see langword="null" />です。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;interval&quot; /&gt; is less than 0 or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="interval" /> が 0 未満であるか、または <see cref="F:System.Int32.MaxValue" /> を超えています。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherTimer&quot; /&gt; class which processes timer events at the specified priority.">指定した優先順位でタイマー イベントを処理する <see cref="T:System.Windows.Threading.DispatcherTimer" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="priority" vsli:raw="The priority at which to invoke the timer.">タイマーを起動する優先順位。</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherTimer&quot; /&gt; class which runs on the specified &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; at the specified priority.">指定した <see cref="T:System.Windows.Threading.DispatcherTimer" /> で、指定した優先順位で実行される <see cref="T:System.Windows.Threading.Dispatcher" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="priority" vsli:raw="The priority at which to invoke the timer.">タイマーを起動する優先順位。</param>
      <param name="dispatcher" vsli:raw="The dispatcher the timer is associated with.">タイマーが関連付けられているディスパッチャー。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dispatcher&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dispatcher" /> が <see langword="null" />です。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Start">
      <summary vsli:raw="Starts the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherTimer&quot; /&gt;.">
        <see cref="T:System.Windows.Threading.DispatcherTimer" /> を開始します。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Stop">
      <summary vsli:raw="Stops the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherTimer&quot; /&gt;.">
        <see cref="T:System.Windows.Threading.DispatcherTimer" /> を停止します。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Dispatcher">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; associated with this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherTimer&quot; /&gt;.">この <see cref="T:System.Windows.Threading.Dispatcher" /> に関連付けられている <see cref="T:System.Windows.Threading.DispatcherTimer" /> を取得します。</summary>
      <returns vsli:raw="The dispatcher.">ディスパッチャー。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Interval">
      <summary vsli:raw="Gets or sets the period of time between timer ticks.">タイマー刻みの間隔の時間を取得または設定します。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;interval&quot; /&gt; is less than 0 or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; milliseconds.">
        <paramref name="interval" /> が 0 より小さいか、または <see cref="F:System.Int32.MaxValue" /> ミリ秒を超えています。</exception>
      <returns vsli:raw="The period of time between ticks. The default is 00:00:00.">タイマー刻み間の時間。 既定値は、00:00:00 です。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.IsEnabled">
      <summary vsli:raw="Gets or sets a value that indicates whether the timer is running.">タイマーが実行されているかどうかを示す値を取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the timer is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  The default is &lt;see langword=&quot;false&quot; /&gt;.">タイマーが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  既定値は、<see langword="false" /> です。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Tag">
      <summary vsli:raw="Gets or sets a user-defined data object.">ユーザー定義のデータ オブジェクトを取得または設定します。</summary>
      <returns vsli:raw="The user-defined data.  The default is &lt;see langword=&quot;null&quot; /&gt;.">ユーザー定義データ。  既定値は、<see langword="null" /> です。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;&lt;see cref=&quot;E:System.Windows.Threading.Dispatcher.UnhandledException&quot; /&gt; event.">
        <see cref="T:System.Windows.Threading.Dispatcher" />
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> イベントのデータを提供します。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception">
      <summary vsli:raw="Gets the exception that was raised when executing code by way of the dispatcher.">ディスパッチャーを使用してコードを実行したときに発生した例外を取得します。</summary>
      <returns vsli:raw="The exception.">例外。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled">
      <summary vsli:raw="Gets or sets whether the exception event has been handled.">例外イベントが処理されたかどうかを取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the exception was handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">例外が処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Windows.Threading.Dispatcher.UnhandledException&quot; /&gt; event.">
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="The event data.">イベントのデータ。</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;&lt;see cref=&quot;E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&quot; /&gt; event.">
        <see cref="T:System.Windows.Threading.Dispatcher" />
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> イベントのデータを提供します。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception">
      <summary vsli:raw="Gets the exception that was raised when executing code by way of the dispatcher.">ディスパッチャーを使用してコードを実行したときに発生した例外を取得します。</summary>
      <returns vsli:raw="The exception.">例外。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch">
      <summary vsli:raw="Gets or sets whether the exception should be caught and the event handlers called.">例外がキャッチされるかどうか、およびイベント ハンドラーが呼び出されるかどうかを取得または設定します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;E:System.Windows.Threading.Dispatcher.UnhandledException&quot; /&gt; should be raised; otherwise; &lt;see langword=&quot;false&quot; /&gt;.  The default value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> を発生させる必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。  既定値は <see langword="true" /> です。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&quot; /&gt; event.">
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> イベントを処理するメソッドを表します。</summary>
      <param name="sender" vsli:raw="The source of the event.">イベントのソース。</param>
      <param name="e" vsli:raw="The event data.">イベントのデータ。</param>
    </member>
    <member name="T:System.Windows.ValidateValueCallback">
      <summary vsli:raw="Represents a method used as a callback that validates the effective value of a dependency property.">依存関係プロパティの有効な値を検証するコールバックとして使用されるメソッドを表します。</summary>
      <param name="value" vsli:raw="The value to be validated.">検証する値。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value was validated; &lt;see langword=&quot;false&quot; /&gt; if the submitted value was invalid.">値が検証された場合は <see langword="true" />、送信された値が正しくない場合は<see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Vector">
      <summary vsli:raw="Represents a displacement in 2-D space.">2-D 空間における変位を表します。</summary>
    </member>
    <member name="M:System.Windows.Vector.#ctor(System.Double,System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure.">
        <see cref="T:System.Windows.Vector" /> 構造体の新しいインスタンスを初期化します。</summary>
      <param name="x" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt;-offset of the new &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">新しい <see cref="P:System.Windows.Vector.X" /> の <see cref="T:System.Windows.Vector" /> オフセット。</param>
      <param name="y" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt;-offset of the new &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">新しい <see cref="P:System.Windows.Vector.Y" /> の <see cref="T:System.Windows.Vector" /> オフセット。</param>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)">
      <summary vsli:raw="Translates the specified point by the specified vector and returns the resulting point.">指定したポイントを指定したベクターで変換し、その結果のポイントを返します。</summary>
      <param name="vector" vsli:raw="The amount to translate the specified point.">指定したポイントを変換する量。</param>
      <param name="point" vsli:raw="The point to translate.">変換対象のポイント。</param>
      <returns vsli:raw="The result of translating &lt;paramref name=&quot;point&quot; /&gt; by &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="point" /> を <paramref name="vector" /> によって変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Adds two vectors and returns the result as a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure.">2 つのベクターを加算し、その結果を <see cref="T:System.Windows.Vector" /> 構造体として返します。</summary>
      <param name="vector1" vsli:raw="The first vector to add.">加算する最初のベクトル。</param>
      <param name="vector2" vsli:raw="The second vector to add.">加算する 2 番目のベクトル。</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;.">
        <paramref name="vector1" /> と <paramref name="vector2" /> の合計。</returns>
    </member>
    <member name="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Retrieves the angle, expressed in degrees, between the two specified vectors.">2 つの指定したベクターの間の角度 (度単位) を取得します。</summary>
      <param name="vector1" vsli:raw="The first vector to evaluate.">評価する最初のベクター。</param>
      <param name="vector2" vsli:raw="The second vector to evaluate.">評価する 2 番目のベクター。</param>
      <returns vsli:raw="The angle, in degrees, between &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;.">
        <paramref name="vector1" /> と <paramref name="vector2" /> の間の角度 (度単位)。</returns>
    </member>
    <member name="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Calculates the cross product of two vectors.">2 つのベクターのクロス積を計算します。</summary>
      <param name="vector1" vsli:raw="The first vector to evaluate.">評価する最初のベクター。</param>
      <param name="vector2" vsli:raw="The second vector to evaluate.">評価する 2 番目のベクター。</param>
      <returns vsli:raw="The cross product of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;. The following formula is used to calculate the cross product:  &#xA;  &#xA; &lt;c&gt;(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)&lt;/c&gt;">
        <paramref name="vector1" /> と <paramref name="vector2" /> のクロス積。 クロス積の計算には、次の数式が使用されます。 
 <c>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</c></returns>
    </member>
    <member name="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Calculates the determinant of two vectors.">2 つのベクターの行列式を計算します。</summary>
      <param name="vector1" vsli:raw="The first vector to evaluate.">評価する最初のベクター。</param>
      <param name="vector2" vsli:raw="The second vector to evaluate.">評価する 2 番目のベクター。</param>
      <returns vsli:raw="The determinant of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;.">
        <paramref name="vector1" /> と <paramref name="vector2" /> の行列式。</returns>
    </member>
    <member name="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)">
      <summary vsli:raw="Divides the specified vector by the specified scalar and returns the result as a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">指定したベクターを指定したスカラーで除算し、その結果を <see cref="T:System.Windows.Vector" /> として返します。</summary>
      <param name="vector" vsli:raw="The vector structure to divide.">除算するベクター構造体。</param>
      <param name="scalar" vsli:raw="The amount by which &lt;paramref name=&quot;vector&quot; /&gt; is divided.">
        <paramref name="vector" /> を除算する量。</param>
      <returns vsli:raw="The result of dividing &lt;paramref name=&quot;vector&quot; /&gt; by &lt;paramref name=&quot;scalar&quot; /&gt;.">
        <paramref name="vector" /> を <paramref name="scalar" /> で除算した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure and, if it is, whether it has the same &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values as this vector.">指定した <see cref="T:System.Object" /> が <see cref="T:System.Windows.Vector" /> 構造体であるかどうか、および、そうである場合には、その構造体がこのベクターと同じ <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> の値を持つかどうかを判断します。</summary>
      <param name="o" vsli:raw="The vector to compare.">比較対象のベクター。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; and has the same &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values as this vector; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="o" /> が <see cref="T:System.Windows.Vector" /> で、このベクターと同じ <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> の値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector)">
      <summary vsli:raw="Compares two vectors for equality.">2 つのベクターを比較し、相互に等価かどうかを判断します。</summary>
      <param name="value" vsli:raw="The vector to compare with this vector.">このベクターと比較するベクター。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; has the same &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values as this vector; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="value" /> がこのベクターと同じ <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> の値を持つ場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Compares the two specified vectors for equality.">指定した 2 つのベクターを比較して、値が等しいかどうかを判断します。</summary>
      <param name="vector1" vsli:raw="The first vector to compare.">比較する最初のベクトル。</param>
      <param name="vector2" vsli:raw="The second vector to compare.">比較する 2 番目のベクトル。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; components of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="vector1" /> と <paramref name="vector2" /> の <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> コンポーネントが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.GetHashCode">
      <summary vsli:raw="Returns the hash code for this vector.">このベクターのハッシュ コードを返します。</summary>
      <returns vsli:raw="The hash code for this instance.">対象のインスタンスのハッシュ コード。</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)">
      <summary vsli:raw="Multiplies the specified scalar by the specified vector and returns the resulting &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">指定したスカラーと指定したベクターを乗算し、その結果の <see cref="T:System.Windows.Vector" /> を返します。</summary>
      <param name="scalar" vsli:raw="The scalar to multiply.">乗算するスカラー。</param>
      <param name="vector" vsli:raw="The vector to multiply.">乗算するベクトル。</param>
      <returns vsli:raw="The result of multiplying &lt;paramref name=&quot;scalar&quot; /&gt; and &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="scalar" /> と <paramref name="vector" /> を乗算した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)">
      <summary vsli:raw="Multiplies the specified vector by the specified scalar and returns the resulting &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">指定したベクターと指定したスカラーを乗算し、その結果の <see cref="T:System.Windows.Vector" /> を返します。</summary>
      <param name="vector" vsli:raw="The vector to multiply.">乗算するベクトル。</param>
      <param name="scalar" vsli:raw="The scalar to multiply.">乗算するスカラー。</param>
      <returns vsli:raw="The result of multiplying &lt;paramref name=&quot;vector&quot; /&gt; and &lt;paramref name=&quot;scalar&quot; /&gt;.">
        <paramref name="vector" /> と <paramref name="scalar" /> を乗算した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary vsli:raw="Transforms the coordinate space of the specified vector using the specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">指定したベクターの座標空間を、指定した <see cref="T:System.Windows.Media.Matrix" /> を使用して変換します。</summary>
      <param name="vector" vsli:raw="The vector structure to transform.">変換するベクター構造体。</param>
      <param name="matrix" vsli:raw="The transformation to apply to &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="vector" /> に適用する変換。</param>
      <returns vsli:raw="The result of transforming &lt;paramref name=&quot;vector&quot; /&gt; by &lt;paramref name=&quot;matrix&quot; /&gt;.">
        <paramref name="vector" /> を <paramref name="matrix" /> で変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Calculates the dot product of the two specified vectors and returns the result as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">2 つの指定したベクターのドット積を計算し、その結果を <see cref="T:System.Double" /> として返します。</summary>
      <param name="vector1" vsli:raw="The first vector to multiply.">乗算する最初のベクター。</param>
      <param name="vector2" vsli:raw="The second vector structure to multiply.">乗算する 2 番目のベクター構造体。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Double&quot; /&gt; containing the scalar dot product of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;, which is calculated using the following formula:  &#xA;  &#xA; &lt;c&gt;(vector1.X * vector2.X) + (vector1.Y * vector2.Y)&lt;/c&gt;">次の数式で計算された <paramref name="vector1" /> と <paramref name="vector2" /> のスカラー ドット積を含む <see cref="T:System.Double" />。 
 <c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</c></returns>
    </member>
    <member name="M:System.Windows.Vector.Negate">
      <summary vsli:raw="Negates this vector. The vector has the same magnitude as before, but its direction is now opposite.">このベクターを否定します。 ベクターの大きさはこれまでと変わりませんが、方向は逆になります。</summary>
    </member>
    <member name="M:System.Windows.Vector.Normalize">
      <summary vsli:raw="Normalizes this vector.">このベクターを正規化します。</summary>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)">
      <summary vsli:raw="Translates a point by the specified vector and returns the resulting point.">指定したベクターでポイントを変換し、その結果のポイントを返します。</summary>
      <param name="vector" vsli:raw="The vector used to translate &lt;paramref name=&quot;point&quot; /&gt;.">
        <paramref name="point" /> を変換するために使用されるベクター。</param>
      <param name="point" vsli:raw="The point to translate.">変換対象のポイント。</param>
      <returns vsli:raw="The result of translating &lt;paramref name=&quot;point&quot; /&gt; by &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="point" /> を <paramref name="vector" /> によって変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Adds two vectors and returns the result as a vector.">2 つのベクターを加算し、その結果をベクターとして返します。</summary>
      <param name="vector1" vsli:raw="The first vector to add.">加算する最初のベクトル。</param>
      <param name="vector2" vsli:raw="The second vector to add.">加算する 2 番目のベクトル。</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;.">
        <paramref name="vector1" /> と <paramref name="vector2" /> の合計。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)">
      <summary vsli:raw="Divides the specified vector by the specified scalar and returns the resulting vector.">指定したベクターを指定したスカラーで除算し、その結果のベクターを返します。</summary>
      <param name="vector" vsli:raw="The vector to divide.">除算するベクター。</param>
      <param name="scalar" vsli:raw="The scalar by which &lt;paramref name=&quot;vector&quot; /&gt; will be divided.">
        <paramref name="vector" /> を除算するスカラー。</param>
      <returns vsli:raw="The result of dividing &lt;paramref name=&quot;vector&quot; /&gt; by &lt;paramref name=&quot;scalar&quot; /&gt;.">
        <paramref name="vector" /> を <paramref name="scalar" /> で除算した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Compares two vectors for equality.">2 つのベクターを比較し、相互に等価かどうかを判断します。</summary>
      <param name="vector1" vsli:raw="The first vector to compare.">比較する最初のベクトル。</param>
      <param name="vector2" vsli:raw="The second vector to compare.">比較する 2 番目のベクトル。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; components of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="vector1" /> と <paramref name="vector2" /> の <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> コンポーネントが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; with the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values of this vector.">このベクターの <see cref="T:System.Windows.Point" /> および <see cref="P:System.Windows.Vector.X" /> の値を持つ <see cref="P:System.Windows.Vector.Y" /> を作成します。</summary>
      <param name="vector" vsli:raw="The vector to convert.">変換するベクター。</param>
      <returns vsli:raw="A point with &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt;- and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt;-coordinate values equal to the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; offset values of &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="vector" /> の <see cref="P:System.Windows.Point.X" /> および <see cref="P:System.Windows.Point.Y" /> のオフセット値と等しい <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> の座標値を持つポイント。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; from the offsets of this vector.">このベクターのオフセットから <see cref="T:System.Windows.Size" /> を作成します。</summary>
      <param name="vector" vsli:raw="The vector to convert.">変換するベクター。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; with a &lt;see cref=&quot;P:System.Windows.Size.Width&quot; /&gt; equal to the absolute value of this vector's &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; property and a &lt;see cref=&quot;P:System.Windows.Size.Height&quot; /&gt; equal to the absolute value of this vector's &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; property.">このベクターの <see cref="T:System.Windows.Size" /> プロパティの絶対値と等しい <see cref="P:System.Windows.Size.Width" /> と、このベクターの <see cref="P:System.Windows.Vector.X" /> プロパティの絶対値と等しい <see cref="P:System.Windows.Size.Height" /> を持つ <see cref="P:System.Windows.Vector.Y" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Compares two vectors for inequality.">2 つのベクターを比較して、等しくないかどうかを判断します。</summary>
      <param name="vector1" vsli:raw="The first vector to compare.">比較する最初のベクトル。</param>
      <param name="vector2" vsli:raw="The second vector to compare.">比較する 2 番目のベクトル。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; components of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt; are different; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <paramref name="vector1" /> と <paramref name="vector2" /> の <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> コンポーネントが異なる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)">
      <summary vsli:raw="Multiplies the specified scalar by the specified vector and returns the resulting vector.">指定したスカラーと指定したベクターを乗算し、その結果のベクターを返します。</summary>
      <param name="scalar" vsli:raw="The scalar to multiply.">乗算するスカラー。</param>
      <param name="vector" vsli:raw="The vector to multiply.">乗算するベクトル。</param>
      <returns vsli:raw="The result of multiplying &lt;paramref name=&quot;scalar&quot; /&gt; and &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="scalar" /> と <paramref name="vector" /> を乗算した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)">
      <summary vsli:raw="Multiplies the specified vector by the specified scalar and returns the resulting vector.">指定したベクターと指定したスカラーを乗算し、その結果のベクターを返します。</summary>
      <param name="vector" vsli:raw="The vector to multiply.">乗算するベクトル。</param>
      <param name="scalar" vsli:raw="The scalar to multiply.">乗算するスカラー。</param>
      <returns vsli:raw="The result of multiplying &lt;paramref name=&quot;vector&quot; /&gt; and &lt;paramref name=&quot;scalar&quot; /&gt;.">
        <paramref name="vector" /> と <paramref name="scalar" /> を乗算した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary vsli:raw="Transforms the coordinate space of the specified vector using the specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">指定したベクターの座標空間を、指定した <see cref="T:System.Windows.Media.Matrix" /> を使用して変換します。</summary>
      <param name="vector" vsli:raw="The vector to transform.">変換するベクトル。</param>
      <param name="matrix" vsli:raw="The transformation to apply to &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="vector" /> に適用する変換。</param>
      <returns vsli:raw="The result of transforming &lt;paramref name=&quot;vector&quot; /&gt; by &lt;paramref name=&quot;matrix&quot; /&gt;.">
        <paramref name="vector" /> を <paramref name="matrix" /> で変換した結果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Calculates the dot product of the two specified vector structures and returns the result as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">2 つの指定したベクター構造体のドット積を計算し、その結果を <see cref="T:System.Double" /> として返します。</summary>
      <param name="vector1" vsli:raw="The first vector to multiply.">乗算する最初のベクター。</param>
      <param name="vector2" vsli:raw="The second vector to multiply.">乗算する 2 番目のベクター。</param>
      <returns vsli:raw="Returns a &lt;see cref=&quot;T:System.Double&quot; /&gt; containing the scalar dot product of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;, which is calculated using the following formula:  &#xA;  &#xA; &lt;c&gt;vector1.X * vector2.X + vector1.Y * vector2.Y&lt;/c&gt;">次の数式で計算された <paramref name="vector1" /> と <paramref name="vector2" /> のスカラー ドット積を含む <see cref="T:System.Double" /> を返します。 
 <c>vector1.x.X * vector2.x。X + vector1.x。Y * vector2.x。前年</c></returns>
    </member>
    <member name="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Subtracts one specified vector from another.">指定したベクターから、指定したもう 1 つのベクターを減算します。</summary>
      <param name="vector1" vsli:raw="The vector from which &lt;paramref name=&quot;vector2&quot; /&gt; is subtracted.">
        <paramref name="vector2" /> が減算されるベクター。</param>
      <param name="vector2" vsli:raw="The vector to subtract from &lt;paramref name=&quot;vector1&quot; /&gt;.">
        <paramref name="vector1" /> から減算するベクター。</param>
      <returns vsli:raw="The difference between &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;.">
        <paramref name="vector1" /> と <paramref name="vector2" /> の差。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)">
      <summary vsli:raw="Negates the specified vector.">指定したベクトルを符号反転します。</summary>
      <param name="vector" vsli:raw="The vector to negate.">符号反転するベクトル。</param>
      <returns vsli:raw="A vector with &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values opposite of the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values of &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="vector" /> の <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> の値と反対の <see cref="P:System.Windows.Vector.X" /> および <see cref="P:System.Windows.Vector.Y" /> の値を持つベクター。</returns>
    </member>
    <member name="M:System.Windows.Vector.Parse(System.String)">
      <summary vsli:raw="Converts a string representation of a vector into the equivalent &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure.">ベクターの文字列表現を、等価の <see cref="T:System.Windows.Vector" /> 構造体に変換します。</summary>
      <param name="source" vsli:raw="The string representation of the vector.">ベクターの文字列表現。</param>
      <returns vsli:raw="The equivalent &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure.">等価の <see cref="T:System.Windows.Vector" /> 構造体。</returns>
    </member>
    <member name="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Subtracts the specified vector from another specified vector.">指定したベクターから、指定したもう 1 つのベクターを減算します。</summary>
      <param name="vector1" vsli:raw="The vector from which &lt;paramref name=&quot;vector2&quot; /&gt; is subtracted.">
        <paramref name="vector2" /> が減算されるベクター。</param>
      <param name="vector2" vsli:raw="The vector to subtract from &lt;paramref name=&quot;vector1&quot; /&gt;.">
        <paramref name="vector1" /> から減算するベクター。</param>
      <returns vsli:raw="The difference between &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;.">
        <paramref name="vector1" /> と <paramref name="vector2" /> の差。</returns>
    </member>
    <member name="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see &lt;see cref=&quot;M:System.IFormattable.ToString(System.String,System.IFormatProvider)&quot; /&gt;.">このメンバーは、Windows Presentation Foundation (WPF) インフラストラクチャをサポートしますが、独自に作成したコードから直接使用するためのものではありません。 このメンバーの詳細については、「<see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />」をご覧ください。</summary>
      <param name="format" vsli:raw="The string specifying the format to use.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default format defined for the type of the &lt;see cref=&quot;T:System.IFormattable&quot; /&gt; implementation.">使用する書式を指定する文字列。  
  
- または - 
 <see cref="T:System.IFormattable" /> 実装の型に対して定義されている既定の書式を使用する場合は、<see langword="null" />。</param>
      <param name="provider" vsli:raw="The &lt;see langword=&quot;IFormatProvider&quot; /&gt; to use to format the value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to obtain the numeric format information from the current locale setting of the operating system.">値の書式付けに使用する <see langword="IFormatProvider" />。  
  
- または - 
 オペレーティング システムの現在のロケール設定から数値の書式情報を取得する場合は <see langword="null" />。</param>
      <returns vsli:raw="A string containing the value of the current instance in the specified format.">指定した書式で現在のインスタンスの値が格納されている文字列。</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString">
      <summary vsli:raw="Returns the string representation of this &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure.">この <see cref="T:System.Windows.Vector" /> 構造体の文字列形式を返します。</summary>
      <returns vsli:raw="A string that represents the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values of this &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">この <see cref="P:System.Windows.Vector.X" /> の <see cref="P:System.Windows.Vector.Y" /> および <see cref="T:System.Windows.Vector" /> の値を表す文字列。</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString(System.IFormatProvider)">
      <summary vsli:raw="Returns the string representation of this &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure with the specified formatting information.">指定した書式設定情報を使用して、この <see cref="T:System.Windows.Vector" /> 構造体の文字列表現を返します。</summary>
      <param name="provider" vsli:raw="The culture-specific formatting information.">カルチャ固有の書式設定情報。</param>
      <returns vsli:raw="A string that represents the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values of this &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">この <see cref="P:System.Windows.Vector.X" /> の <see cref="P:System.Windows.Vector.Y" /> および <see cref="T:System.Windows.Vector" /> の値を表す文字列。</returns>
    </member>
    <member name="P:System.Windows.Vector.Length">
      <summary vsli:raw="Gets the length of this vector.">このベクターの長さを取得します。</summary>
      <returns vsli:raw="The length of this vector.">このベクターの長さ。</returns>
    </member>
    <member name="P:System.Windows.Vector.LengthSquared">
      <summary vsli:raw="Gets the square of the length of this vector.">このベクターの長さの四角形を取得します。</summary>
      <returns vsli:raw="The square of the &lt;see cref=&quot;P:System.Windows.Vector.Length&quot; /&gt; of this vector.">このベクターの <see cref="P:System.Windows.Vector.Length" /> の四角形。</returns>
    </member>
    <member name="P:System.Windows.Vector.X">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; component of this vector.">このベクターの <see cref="P:System.Windows.Vector.X" /> コンポーネントを取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; component of this vector. The default value is 0.">このベクターの <see cref="P:System.Windows.Vector.X" /> コンポーネント。 既定値は 0 です。</returns>
    </member>
    <member name="P:System.Windows.Vector.Y">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; component of this vector.">このベクターの <see cref="P:System.Windows.Vector.Y" /> コンポーネントを取得または設定します。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; component of this vector. The default value is 0.">このベクターの <see cref="P:System.Windows.Vector.Y" /> コンポーネント。 既定値は 0 です。</returns>
    </member>
    <member name="T:System.Windows.VectorConverter">
      <summary vsli:raw="Converts instances of other types to and from a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">他の型のインスタンスと <see cref="T:System.Windows.Vector" /> の間の変換を行います。</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure.">
        <see cref="T:System.Windows.Vector" /> 構造体の新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Indicates whether an object can be converted from a given type to an instance of a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">指定した型から <see cref="T:System.Windows.Vector" /> のインスタンスにオブジェクトを変換できるかどうかを示します。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">型のコンテキスト情報を記述します。</param>
      <param name="sourceType" vsli:raw="The source &lt;see cref=&quot;T:System.Type&quot; /&gt; that is being queried for conversion support.">変換のサポートについて照会するソースの <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if objects of the specified type can be converted to a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">指定した型のオブジェクトを <see cref="T:System.Windows.Vector" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether instances of &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; can be converted to the specified type.">
        <see cref="T:System.Windows.Vector" /> のインスタンスを指定した型に変換できるかどうかを判断します。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">型のコンテキスト情報を記述します。</param>
      <param name="destinationType" vsli:raw="The desired type this &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; is being evaluated for conversion.">この <see cref="T:System.Windows.Vector" /> が変換元として評価されるときの変換先の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if instances of &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; can be converted to &lt;paramref name=&quot;destinationType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Windows.Vector" /> のインスタンスを <paramref name="destinationType" /> に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">指定したオブジェクトを <see cref="T:System.Windows.Vector" /> に変換します。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">型のコンテキスト情報を記述します。</param>
      <param name="culture" vsli:raw="Describes the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the type being converted.">変換元の型の <see cref="T:System.Globalization.CultureInfo" /> を説明します。</param>
      <param name="value" vsli:raw="The object being converted.">変換されるオブジェクト。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; created from converting &lt;paramref name=&quot;value&quot; /&gt;.">
        <paramref name="value" /> の変換によって作成された <see cref="T:System.Windows.Vector" />。</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; to the specified type.">指定した <see cref="T:System.Windows.Vector" /> を指定した型に変換します。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">型のコンテキスト情報を記述します。</param>
      <param name="culture" vsli:raw="Describes the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the type being converted.">変換元の型の <see cref="T:System.Globalization.CultureInfo" /> を説明します。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; to convert.">変換対象の <see cref="T:System.Windows.Vector" />。</param>
      <param name="destinationType" vsli:raw="The type to convert this &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; to.">この <see cref="T:System.Windows.Vector" /> の変換先の型。</param>
      <returns vsli:raw="The object created from converting this &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">この <see cref="T:System.Windows.Vector" /> の変換によって作成されたオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager">
      <summary vsli:raw="Provides a base class for the event manager that is used in the weak event pattern. The manager adds and removes listeners for events (or callbacks) that also use the pattern.">弱いイベント パターンで使用されるイベント マネージャーの基本クラスです。 このマネージャーは、WeakEvent パターンを使用するイベント (またはコールバック) 用のリスナーを追加または削除します。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.#ctor">
      <summary vsli:raw="Initializes base class values when it is used as the initializer by the constructor of a derived class.">派生クラスのコンストラクターによって初期化子として使用されると、基本クラスの値を初期化します。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
      <summary vsli:raw="Delivers the event being managed to each listener.">管理対象のイベントを各リスナーに配信します。</summary>
      <param name="sender" vsli:raw="The object on which the event is being handled.">イベントが処理されるオブジェクト。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data for the event to deliver.">イベントが配信するイベント データを格納している <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
      <summary vsli:raw="Delivers the event being managed to each listener in the provided list.">管理対象のイベントを、指定されたリスト内の各リスナーに配信します。</summary>
      <param name="sender" vsli:raw="The object on which the event is being handled.">イベントが処理されるオブジェクト。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
      <param name="list" vsli:raw="The provided &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">指定された <see cref="T:System.Windows.WeakEventManager.ListenerList" />。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; implementation that is used for the provided type.">指定された型に使用される <see cref="T:System.Windows.WeakEventManager" /> 実装を返します。</summary>
      <param name="managerType" vsli:raw="The type to obtain the &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; for.">
        <see cref="T:System.Windows.WeakEventManager" /> を取得する対象となる型。</param>
      <returns vsli:raw="The matching &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; implementation.">一致する <see cref="T:System.Windows.WeakEventManager" /> 実装。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.NewListenerList">
      <summary vsli:raw="Returns a new object to contain listeners to an event.">イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
      <returns vsli:raw="A new object to contain listeners to an event.">リスナーをイベントに格納する新しいオブジェクト。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Adds the specified delegate as an event handler of the specified source.">指定されたソースのイベント ハンドラーとして指定したデリゲートを追加します。</summary>
      <param name="source" vsli:raw="The source object that the handler delegate subscribes to.">ハンドラー デリゲートがサブスクライブするソース オブジェクト。</param>
      <param name="handler" vsli:raw="The delegate that handles the event that is raised by &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="source" /> で発生したイベントを処理するデリゲート。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Adds the provided listener to the provided source for the event being managed.">指定されたリスナーを、管理対象のイベントの指定されたソースに追加します。</summary>
      <param name="source" vsli:raw="The source to attach listeners to.">リスナーを関連付けるソース。</param>
      <param name="listener" vsli:raw="The listening class (which must implement &lt;see cref=&quot;T:System.Windows.IWeakEventListener&quot; /&gt;).">待機するクラス (<see cref="T:System.Windows.IWeakEventListener" /> を実装する必要があります)。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Removes the previously added handler from the specified source.">指定したソースから、以前追加されたハンドラーを削除します。</summary>
      <param name="source" vsli:raw="The source to remove the handler from.">ハンドラーを削除するソース。</param>
      <param name="handler" vsli:raw="The delegate to remove from &lt;paramref name=&quot;source&quot; /&gt;.">
        <paramref name="source" /> から削除するデリゲート。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Removes a previously added listener from the provided source.">以前に追加されたリスナーを指定されたソースから削除します。</summary>
      <param name="source" vsli:raw="The source to remove listeners from.">リスナーを削除するソース。</param>
      <param name="listener" vsli:raw="The listening class (which must implement &lt;see cref=&quot;T:System.Windows.IWeakEventListener&quot; /&gt;).">待機するクラス (<see cref="T:System.Windows.IWeakEventListener" /> を実装する必要があります)。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary vsli:raw="Removes inactive listener entries from the data list for the provided source. Returns &lt;see langword=&quot;true&quot; /&gt; if some entries were actually removed from the list.">指定されたソースのデータ リストから、アクティブでないリスナー エントリを削除します。 いくつかのエントリが実際にリストから削除された場合は、<see langword="true" /> を返します。</summary>
      <param name="source" vsli:raw="The source for events being listened to.">リッスンされているイベントのソース。</param>
      <param name="data" vsli:raw="The data to check. This object is expected to be a &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt; implementation.">チェックするデータ。 このオブジェクトは、<see cref="T:System.Windows.WeakEventManager.ListenerList" /> 実装であることが求められます。</param>
      <param name="purgeAll" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to stop listening to &lt;paramref name=&quot;source&quot; /&gt;, and completely remove all entries from &lt;paramref name=&quot;data&quot; /&gt;.">
        <paramref name="source" /> のリッスンを中止し、すべてのエントリを <paramref name="data" /> から完全に削除する場合は <see langword="true" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if some entries were actually removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">一部のエントリが実際に削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.Remove(System.Object)">
      <summary vsli:raw="Removes all listeners for the specified source.">指定したソースのリスナーをすべて削除します。</summary>
      <param name="source" vsli:raw="The source to remove listener information for.">リスナー情報を削除するソース。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ScheduleCleanup">
      <summary vsli:raw="Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.">基になるリスナー リストに含まれる未使用エントリの削除を、優先順位の低いスレッドで実行するように要求します。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
      <summary vsli:raw="Sets the current manager for the specified manager type.">指定したマネージャーの種類に対する現在のマネージャーを設定します。</summary>
      <param name="managerType" vsli:raw="The type to set the new event manager.">新しいイベント マネージャーを設定する型。</param>
      <param name="manager" vsli:raw="The new event manager.">新しいイベント マネージャー。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StartListening(System.Object)">
      <summary vsli:raw="When overridden in a derived class, starts listening for the event being managed. After the &lt;see cref=&quot;M:System.Windows.WeakEventManager.StartListening(System.Object)&quot; /&gt; method is first called, the manager should be in the state of calling &lt;see cref=&quot;M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)&quot; /&gt; or &lt;see cref=&quot;M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)&quot; /&gt; whenever the relevant event from the provided source is handled.">派生クラスでオーバーライドされると、管理対象のイベントのリッスンを開始します。 <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> メソッドが初めて呼び出された後、マネージャーは、提供されたソースからの関連イベントを処理するたびに、<see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> または <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> を呼び出している状態になる必要があります。</summary>
      <param name="source" vsli:raw="The source to begin listening on.">リッスンを開始するソース。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StopListening(System.Object)">
      <summary vsli:raw="When overridden in a derived class, stops listening on the provided source for the event being managed.">派生クラスでオーバーライドされると、指定されたソースで管理対象のイベントのリッスンを停止します。</summary>
      <param name="source" vsli:raw="The source to stop listening on.">リッスンを停止するソース。</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.Item(System.Object)">
      <summary vsli:raw="Gets or sets the data being stored for the specified source.">指定したソース用に格納されているデータを取得または設定します。</summary>
      <param name="source" vsli:raw="The zero-based index of the requested source.">要求されたソースの 0 から始まるインデックス。</param>
      <returns vsli:raw="Data being stored by the manager for this source.">マネージャーによってこのソース用に格納されているデータ。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ReadLock">
      <summary vsli:raw="Establishes a read-lock on the underlying data table, and returns an &lt;see cref=&quot;T:System.IDisposable&quot; /&gt;.">基になるデータ テーブルで読み取りロックを確立し、<see cref="T:System.IDisposable" /> を返します。</summary>
      <returns vsli:raw="An object that can be used to establish a lock on the data table members and then be appropriately disposed with a &lt;see langword=&quot;using&quot; /&gt; construct.">
        <see langword="using" /> コンストラクトを通じてデータ テーブル メンバーのロックを確立するために使用でき、使用後は適切に破棄されるオブジェクト。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.WriteLock">
      <summary vsli:raw="Establishes a write-lock on the underlying data table, and returns an &lt;see cref=&quot;T:System.IDisposable&quot; /&gt;.">基になるデータ テーブルで書き込みロックを確立し、<see cref="T:System.IDisposable" /> を返します。</summary>
      <returns vsli:raw="An object that can be used to establish a lock on the data table members and then be appropriately disposed with a &lt;see langword=&quot;using&quot; /&gt; construct.">
        <see langword="using" /> コンストラクトを通じてデータ テーブル メンバーのロックを確立するために使用でき、使用後は適切に破棄されるオブジェクト。</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList">
      <summary vsli:raw="Provides a built-in collection list for storing listeners for a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt;.">
        <see cref="T:System.Windows.WeakEventManager" /> のリスナーを格納するための組み込みのコレクション リストを提供します。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt; class.">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt; class with the specified initial capacity.">指定した初期量を使用して、<see cref="T:System.Windows.WeakEventManager.ListenerList" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity" vsli:raw="The number of items that should be allocated in the initial list.">初期リストに割り当てられる項目の数。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.Windows.IWeakEventListener&quot; /&gt; object to the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">
        <see cref="T:System.Windows.IWeakEventListener" /> に <see cref="T:System.Windows.WeakEventManager.ListenerList" /> オブジェクトを追加します。</summary>
      <param name="listener" vsli:raw="The listener element to add to the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> に追加するリスナー要素。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
      <summary vsli:raw="Adds an event handler to the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">イベント ハンドラーを <see cref="T:System.Windows.WeakEventManager.ListenerList" /> に追加します。</summary>
      <param name="handler" vsli:raw="The event handler to add to the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> に追加するイベント ハンドラー。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
      <summary vsli:raw="Declares the list to be in use. This prevents direct changes to the list during iterations of the list items.">リストが使用中であることを宣言します。 これにより、リスト項目の反復処理中に、このリストを直接変更することができなくなります。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list was already declared to be in use; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストが使用中であることが既に宣言されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Clone">
      <summary vsli:raw="Creates a modifiable clone of this &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">この <see cref="T:System.Windows.WeakEventManager.ListenerList" /> の変更可能な複製を作成します。</summary>
      <returns vsli:raw="A modifiable clone of the current object.">現在のオブジェクトの変更可能な複製。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
      <summary vsli:raw="Copies the current &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt; to the specified &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">指定した <see cref="T:System.Windows.WeakEventManager.ListenerList" /> に現在の <see cref="T:System.Windows.WeakEventManager.ListenerList" /> をコピーします。</summary>
      <param name="newList" vsli:raw="The object to copy to.">コピー先のオブジェクト。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary vsli:raw="Delivers the event being managed to each listener in the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">管理対象のイベントを <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 内の各リスナーに配信します。</summary>
      <param name="sender" vsli:raw="The object that raised the event.">イベントを発生させたオブジェクト。</param>
      <param name="args" vsli:raw="An object that contains the event data.">イベント データを格納しているオブジェクト。</param>
      <param name="managerType" vsli:raw="The type of the &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; that calls this method.">このメソッドを呼び出す <see cref="T:System.Windows.WeakEventManager" /> の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the listeners in the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt; refer to an object that has been garbage collected; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> のリスナーのいずれかがガベージ コレクションされたオブジェクトを参照する場合 <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.EndUse">
      <summary vsli:raw="Unlocks the locked state initiated by &lt;see cref=&quot;M:System.Windows.WeakEventManager.ListenerList.BeginUse&quot; /&gt;.">
        <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" /> で開始されたロック状態を解除します。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
      <summary vsli:raw="Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.">指定したリストが使用中かどうかを確認します。リストが使用中である場合は、リストの参照パラメーターを、オリジナルのリストではなくリストのコピーに設定します。</summary>
      <param name="list" vsli:raw="The list to check for use state and potentially copy.">使用状態を確認し、場合に応じてコピーする対象のリスト。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the provided list was in use at the time of call and therefore the &lt;paramref name=&quot;list&quot; /&gt; parameter reference was reset to be a copy. &lt;see langword=&quot;false&quot; /&gt; if the provided list was not in use, in which case the &lt;paramref name=&quot;list&quot; /&gt; parameter reference remains unaltered.">指定したリストが呼び出し時に使用されていたために <paramref name="list" /> パラメーターの参照がコピーに変更された場合は <see langword="true" />。 指定されたリストが使用されておらず <paramref name="list" /> パラメーターの参照が変更されなかった場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Purge">
      <summary vsli:raw="Removes all entries from the list where the underlying reference target is a null reference.">基になる参照ターゲットが null 参照であるリストからエントリをすべて削除します。</summary>
      <returns vsli:raw="Returns &lt;see langword=&quot;true&quot; /&gt; if any entries were purged; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">エントリが削除された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
      <summary vsli:raw="Removes the first occurrence of a listener item from the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 内で最初に見つかったリスナー項目を削除します。</summary>
      <param name="listener" vsli:raw="The item to remove.">削除する項目。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
      <summary vsli:raw="Removes an event handler from the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> からイベント ハンドラーを削除します。</summary>
      <param name="handler" vsli:raw="The event handler to remove from the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> から削除するイベント ハンドラー。</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Count">
      <summary vsli:raw="Gets the number of items contained in the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> に格納されている項目の数を取得します。</summary>
      <returns vsli:raw="The number of items contained in the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> に格納されている項目の数。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Empty">
      <summary vsli:raw="Gets a value that represents an empty list for purposes of comparisons.">比較のために空のリストを表す値を取得します。</summary>
      <returns vsli:raw="The empty list representation.">空のリスト表現。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
      <summary vsli:raw="Gets a value that declares whether this &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt; is empty.">この <see cref="T:System.Windows.WeakEventManager.ListenerList" /> が空であるかどうかを宣言する値を取得します。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">リストが空である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
      <summary vsli:raw="Gets or sets a specific listener item in the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt; .">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 内の特定のリスナー項目を取得または設定します。</summary>
      <param name="index" vsli:raw="The zero-based index of the listener in the list.">リスト内のリスナーの 0 から始まるインデックス。</param>
      <returns vsli:raw="The item at that index, or a null reference if no item was at that index.">指定したインデックス位置にある項目。指定したインデックス位置に項目がない場合は null 参照。</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList`1">
      <summary vsli:raw="Provides a type-safe collection list for storing listeners for a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt;. This class defines a type parameter for the event data that is used.">
        <see cref="T:System.Windows.WeakEventManager" /> のリスナーを格納するためのタイプ セーフなコレクション リストを提供します。 このクラスは、使用されているイベント データの型パラメーターを定義します。</summary>
      <typeparam name="TEventArgs" vsli:raw="The type that holds the event data.">イベント データを保持しているキー。</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList`1&quot; /&gt; class.">
        <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> クラスの新しいインスタンスを初期化します。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList`1&quot; /&gt; class with the specified initial capacity.">指定した初期量を使用して、<see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> クラスの新しいインスタンスを初期化します。</summary>
      <param name="capacity" vsli:raw="The number of items that should be allocated in the initial list.">初期リストに割り当てられる項目の数。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.Clone">
      <summary vsli:raw="Creates a modifiable clone of this &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;, making deep copies of the values.">この <see cref="T:System.Windows.WeakEventManager.ListenerList" /> の値の詳細コピーを作成して、その変更可能な複製を作成します。</summary>
      <returns vsli:raw="A modifiable clone of the current object. The cloned object's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property will be &lt;see langword=&quot;false&quot; /&gt; even if the source's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property was &lt;see langword=&quot;true&quot; /&gt;.">現在のオブジェクトの変更可能な複製。 複製されたオブジェクトの <see cref="P:System.Windows.Freezable.IsFrozen" /> プロパティは、ソースの <see langword="false" /> プロパティが <see cref="P:System.Windows.Freezable.IsFrozen" /> であった場合でも、<see langword="true" /> になります。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary vsli:raw="Delivers the event being managed to each listener in the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList`1&quot; /&gt;.">管理対象のイベントを <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 内の各リスナーに配信します。</summary>
      <param name="sender" vsli:raw="The object that raised the event.">イベントを発生させたオブジェクト。</param>
      <param name="e" vsli:raw="An object that contains the event data.">イベント データを格納しているオブジェクト。</param>
      <param name="managerType" vsli:raw="The type of the &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; that calls this method.">このメソッドを呼び出す <see cref="T:System.Windows.WeakEventManager" /> の型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the listeners in the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList`1&quot; /&gt; refer to an object that has been garbage collected; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> のリスナーのいずれかがガベージ コレクションされたオブジェクトを参照する場合 <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager`2">
      <summary vsli:raw="Provides a type-safe &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; that enables you to specify the event handler to use for the &quot;weak event listener&quot; pattern. This class defines a type parameter for the source of the event and a type parameter for the event data that is used.">"弱いイベント リスナー" パターンに使用するイベント ハンドラーを指定できるようにするタイプ セーフの <see cref="T:System.Windows.WeakEventManager" /> を提供します。 このクラスは、イベントのソースの型パラメーターと、使用されるイベント データの型パラメーターを定義します。</summary>
      <typeparam name="TEventSource" vsli:raw="The type that raises the event.">イベントを発生させる型。</typeparam>
      <typeparam name="TEventArgs" vsli:raw="The type that holds the event data.">イベント データを保持しているキー。</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})">
      <summary vsli:raw="Adds the specified event handler to the specified event.">指定したイベントに指定したイベント ハンドラーを追加します。</summary>
      <param name="source" vsli:raw="The source object that raises the specified event.">指定されたイベントを発生させるソース オブジェクト。</param>
      <param name="eventName" vsli:raw="The name of the event to subscribe to.">サブスクライブするイベントの名前。</param>
      <param name="handler" vsli:raw="The delegate that handles the event.">イベントを処理するデリゲート。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.NewListenerList">
      <summary vsli:raw="Returns a new object to contain listeners to an event.">イベントのリスナーを格納する新しいオブジェクトを返します。</summary>
      <returns vsli:raw="A new object to contain listeners to an event.">リスナーをイベントに格納する新しいオブジェクト。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})">
      <summary vsli:raw="Removes the specified event handler from the specified event.">指定したイベントから、指定したイベント ハンドラーを削除します。</summary>
      <param name="source" vsli:raw="The source object that raises the specified event.">指定されたイベントを発生させるソース オブジェクト。</param>
      <param name="eventName" vsli:raw="The name of the event to remove the handler from.">ハンドラーを削除するイベントの名前。</param>
      <param name="handler" vsli:raw="The delegate to remove.">削除するデリゲート。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StartListening(System.Object)">
      <summary vsli:raw="Starts listening for the event on the specified object.">指定したオブジェクトでイベントのリッスンを開始します。</summary>
      <param name="source" vsli:raw="The object to that raises the event.">イベントを発生させる対象のオブジェクト。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StopListening(System.Object)">
      <summary vsli:raw="Stops listening for the event on the specified object.">指定したオブジェクトでイベントのリッスンを停止します。</summary>
      <param name="source" vsli:raw="The object to that raises the event.">イベントを発生させる対象のオブジェクト。</param>
    </member>
  </members>
</doc>
<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>WindowsBase</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Specialized.CollectionChangedEventManager">
      <summary>"약한 이벤트 수신기" 패턴을 사용하여 <see cref="T:System.Windows.WeakEventManager" /> 이벤트에 대한 수신기를 연결할 수 있도록 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>지정된 소스가 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 이벤트를 발생시킬 때 호출되는 지정된 이벤트 처리기를 추가합니다.</summary>
      <param name="source">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 이벤트를 발생하는 소스 개체입니다.</param>
      <param name="handler">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 이벤트를 처리하는 대리자입니다.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>지정된 수신기를 지정된 소스의 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 이벤트에 추가합니다.</summary>
      <param name="source">이벤트가 있는 개체입니다.</param>
      <param name="listener">수신기로 추가할 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.NewListenerList">
      <summary>
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 이벤트에 대한 수신기를 포함하는 새 개체를 반환합니다.</summary>
      <returns>
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 이벤트에 대한 수신기를 포함하는 새 개체입니다.</returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary>지정한 소스에서 지정한 이벤트 처리기를 제거합니다.</summary>
      <param name="source">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 이벤트를 발생하는 소스 개체입니다.</param>
      <param name="handler">
        <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 이벤트를 처리하는 대리자입니다.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary>지정된 소스의 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 이벤트에서 지정된 수신기를 제거합니다.</summary>
      <param name="source">이벤트가 있는 개체입니다.</param>
      <param name="listener">제거할 수신기입니다.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StartListening(System.Object)">
      <summary>지정된 소스의 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 이벤트 수신 대기를 시작합니다.</summary>
      <param name="source">이벤트가 있는 개체입니다.</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StopListening(System.Object)">
      <summary>지정된 소스의 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 이벤트 수신 대기를 중지합니다.</summary>
      <param name="source">이벤트가 있는 개체입니다.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangedEventManager">
      <summary>"약한 이벤트 수신기" 패턴을 사용하여 <see cref="T:System.Windows.WeakEventManager" /> 이벤트에 대한 수신기를 연결할 수 있도록 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary>지정된 소스가 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 이벤트를 발생시킬 때 호출되는 지정된 이벤트 처리기를 추가합니다.</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 이벤트를 발생하는 소스 개체입니다.</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 이벤트를 발생하는 소스 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>지정된 수신기를 지정된 소스의 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 이벤트에 추가합니다.</summary>
      <param name="source">이벤트가 있는 개체입니다.</param>
      <param name="listener">수신기로 추가할 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.NewListenerList">
      <summary>
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 이벤트에 대한 수신기를 포함하는 새 개체를 반환합니다.</summary>
      <returns>
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 이벤트에 대한 수신기를 포함하는 새 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary>지정한 소스에서 지정한 이벤트 처리기를 제거합니다.</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 이벤트를 발생하는 소스 개체입니다.</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 이벤트를 처리하는 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>지정된 소스의 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 이벤트에서 지정된 수신기를 제거합니다.</summary>
      <param name="source">이벤트가 있는 개체입니다.</param>
      <param name="listener">제거할 수신기입니다.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StartListening(System.Object)">
      <summary>지정된 소스의 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 이벤트 수신 대기를 시작합니다.</summary>
      <param name="source">이벤트가 있는 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StopListening(System.Object)">
      <summary>지정된 소스의 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 이벤트 수신 대기를 중지합니다.</summary>
      <param name="source">이벤트가 있는 개체입니다.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventArgs">
      <summary>
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 이벤트에 대한 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
      <summary>지정된 <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> 값을 사용하여 <paramref name="isCancelable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="isCancelable">이벤트를 취소할 수 있는지 여부를 나타내는 값입니다.</param>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
      <summary>이벤트를 취소할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> 값이 <see langword="false" />인 경우입니다.</exception>
      <returns>이벤트가 취소되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
      <summary>이벤트를 취소할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이벤트를 취소할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventHandler">
      <summary>
        <see cref="E:System.Windows.Data.CollectionView.CurrentChanging" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트를 발생시킨 개체입니다.</param>
      <param name="e">이벤트 정보입니다.</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventManager">
      <summary>"약한 이벤트 수신기" 패턴을 사용하여 <see cref="T:System.Windows.WeakEventManager" /> 이벤트에 대한 수신기를 연결할 수 있도록 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary>지정된 소스가 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 이벤트를 발생시킬 때 호출되는 지정된 이벤트 처리기를 추가합니다.</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 이벤트를 발생하는 소스 개체입니다.</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 이벤트를 처리하는 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>지정된 수신기를 지정된 소스의 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 이벤트에 추가합니다.</summary>
      <param name="source">이벤트가 있는 개체입니다.</param>
      <param name="listener">수신기로 추가할 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.NewListenerList">
      <summary>
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 이벤트에 대한 수신기를 포함하는 새 개체를 반환합니다.</summary>
      <returns>
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 이벤트에 대한 수신기를 포함하는 새 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary>지정한 소스에서 지정한 이벤트 처리기를 제거합니다.</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 이벤트를 발생하는 소스 개체입니다.</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 이벤트를 처리하는 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary>지정된 소스의 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 이벤트에서 지정된 수신기를 제거합니다.</summary>
      <param name="source">이벤트가 있는 개체입니다.</param>
      <param name="listener">제거할 수신기입니다.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StartListening(System.Object)">
      <summary>지정된 소스의 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 이벤트 수신 대기를 시작합니다.</summary>
      <param name="source">이벤트가 있는 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StopListening(System.Object)">
      <summary>지정된 소스의 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 이벤트 수신 대기를 중지합니다.</summary>
      <param name="source">이벤트가 있는 개체입니다.</param>
    </member>
    <member name="T:System.ComponentModel.DependencyPropertyDescriptor">
      <summary>종속성 속성의 추가 속성 특징을 설명하는 <see cref="T:System.ComponentModel.PropertyDescriptor" />의 확장을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary>이 속성이 변경되면 다른 개체에서 알림을 받을 수 있도록 합니다.</summary>
      <param name="component">처리기를 추가할 구성 요소입니다.</param>
      <param name="handler">수신기로 추가할 대리자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.CanResetValue(System.Object)">
      <summary>개체를 다시 설정하면 해당 값이 변경되는지 여부를 반환합니다.</summary>
      <param name="component">다시 설정 기능을 테스트할 구성 요소입니다.</param>
      <returns>구성 요소를 다시 설정하면 해당 값이 변경되는 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.Equals(System.Object)">
      <summary>두 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> 인스턴스가 같은지 비교합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />입니다.</param>
      <returns>값이 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type)">
      <summary>제공된 속성 이름에 대한 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> 를 반환합니다.</summary>
      <param name="name">종속성 속성 또는 연결된 속성의 등록된 이름입니다.</param>
      <param name="ownerType">속성 정의를 소유한 개체의 <see cref="T:System.Type" /> 입니다.</param>
      <param name="targetType">속성을 설정하려는 개체의 <see cref="T:System.Type" /> 입니다.</param>
      <returns>요청된 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type,System.Boolean)">
      <summary>제공된 속성 이름에 대한 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> 를 반환합니다.</summary>
      <param name="name">종속성 속성 또는 연결된 속성의 등록된 이름입니다.</param>
      <param name="ownerType">속성 정의를 소유한 개체의 <see cref="T:System.Type" /> 입니다.</param>
      <param name="targetType">속성을 설정하려는 개체의 <see cref="T:System.Type" /> 입니다.</param>
      <param name="ignorePropertyType">속성 형식을 무시하도록 지정합니다.</param>
      <returns>요청된 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.ComponentModel.PropertyDescriptor)">
      <summary>제공된 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> 에 대한 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 반환합니다.</summary>
      <param name="property">확인할 <see cref="T:System.ComponentModel.PropertyDescriptor" />입니다.</param>
      <returns>
        <paramref name="property" />에서 설명한 속성이 종속성 속성인 경우 유효한 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />를 반환합니다. 그렇지 않으면 <see langword="null" /><see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />를 반환합니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.Windows.DependencyProperty,System.Type)">
      <summary>제공된 종속성 속성 및 대상 형식에 대한 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />를 반환합니다.</summary>
      <param name="dependencyProperty">종속성 속성의 식별자입니다.</param>
      <param name="targetType">속성이 설정되어 있는 개체의 형식입니다.</param>
      <returns>제공된 종속성 속성에 대한 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary>
        <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />를 반환합니다.</summary>
      <param name="instance">속성을 가져올 구성 요소입니다.</param>
      <param name="filter">필터로 사용할 <see cref="T:System.Attribute" /> 형식의 배열입니다.</param>
      <returns>지정된 구성 요소에 대한 지정된 특성과 일치하는 속성을 갖는 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> 입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetEditor(System.Type)">
      <summary>지정된 형식의 편집기를 가져옵니다.</summary>
      <param name="editorBaseType">속성이 지원하는 여러 편집기를 구별하는 데 사용되는 기본 편집기 형식입니다.</param>
      <returns>요청된 편집기 형식의 인스턴스이거나, 편집기를 찾을 수 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetHashCode">
      <summary>이 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)">
      <summary>구성 요소에 대한 현재 속성 값을 반환합니다.</summary>
      <param name="component">구성 요소 인스턴스입니다.</param>
      <returns>요청된 값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary>이 속성이 변경되면 다른 개체에서 알림을 받을 수 있도록 합니다.</summary>
      <param name="component">처리기를 추가할 구성 요소입니다.</param>
      <param name="handler">수신기로 추가할 대리자입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ResetValue(System.Object)">
      <summary>구성 요소의 이 속성 값을 기본값으로 다시 설정합니다.</summary>
      <param name="component">기본값으로 다시 설정될 속성 값이 포함된 구성 요소입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary>구성 요소의 값을 다른 값으로 설정합니다.</summary>
      <param name="component">설정될 속성 값이 포함된 구성 요소입니다.</param>
      <param name="value">새 값입니다.</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary>serialization 프로세스에서 이 속성의 값을 지속시켜야 하는지 여부를 나타냅니다.</summary>
      <param name="component">지속성을 검사할 속성이 포함된 구성 요소입니다.</param>
      <returns>속성을 지속시켜야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ToString">
      <summary>이 인스턴스의 값을 해당하는 문자열 표현으로 변환합니다.</summary>
      <returns>
        <see cref="P:System.ComponentModel.MemberDescriptor.Name" /> 값을 반환합니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Attributes">
      <summary>이 멤버에 대한 특성 컬렉션을 가져옵니다.</summary>
      <returns>특성의 <see cref="T:System.ComponentModel.AttributeCollection" /> 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Category">
      <summary>
        <see cref="T:System.ComponentModel.CategoryAttribute" />에 지정된, 해당 멤버가 속해 있는 범주의 이름을 가져옵니다.</summary>
      <returns>해당 멤버가 속해 있는 범주의 이름입니다. <see cref="T:System.ComponentModel.CategoryAttribute" />가 없으면 범주 이름은 기본 범주인 <see langword="Misc" />로 설정됩니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.ComponentType">
      <summary>이 속성이 바인딩된 구성 요소의 형식을 가져옵니다.</summary>
      <returns>이 속성이 바인딩된 구성 요소의 형식을 나타내는 <see cref="T:System.Type" />입니다. <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)" /> 또는 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />가 호출될 때, 지정된 개체는 이 형식의 인스턴스가 될 수 있습니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Converter">
      <summary>이 속성의 형식 변환기를 가져옵니다.</summary>
      <returns>이 속성의 <see cref="T:System.ComponentModel.TypeConverter" />을 변환하는 데 사용되는 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DependencyProperty">
      <summary>종속성 속성 식별자를 반환합니다.</summary>
      <returns>종속성 속성 식별자입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Description">
      <summary>
        <see cref="T:System.ComponentModel.DescriptionAttribute" />에 지정된 멤버 설명을 가져옵니다.</summary>
      <returns>멤버 설명입니다. <see cref="T:System.ComponentModel.DescriptionAttribute" />가 없으면 속성 값은 기본값인 빈 문자열("")로 설정됩니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignerCoerceValueCallback">
      <summary>종속성 속성 값이 종속성 속성 엔진에 저장되기 전에 디자이너에서 종속성 속성의 유효 값을 수정하는 데 사용하는 콜백을 가져오거나 설정합니다.</summary>
      <returns>종속성 속성 값이 종속성 속성 엔진에 저장되기 전에 디자이너에서 종속성 속성의 유효 값을 수정하는 데 사용하는 콜백입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignTimeOnly">
      <summary>
        <see cref="T:System.ComponentModel.DesignOnlyAttribute" />에 지정된, 이 멤버가 디자인 타임에만 설정되어야 하는지 여부를 가져옵니다.</summary>
      <returns>이 멤버가 디자인 타임에만 설정되어야 하면 <see langword="true" />이고, 런타임에 설정될 수 있으면 <see langword="false" />입니다. <see cref="T:System.ComponentModel.DesignOnlyAttribute" />가 없으면 반환되는 값은 기본값인 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DisplayName">
      <summary>속성 창 등의 창에 표시될 수 있는 이름을 가져옵니다.</summary>
      <returns>속성에 대해 표시할 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsAttached">
      <summary>속성이 연결된 속성으로 등록되었으며 연결된 사용량을 통해 사용되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>속성이 연결된 속성이면<see langword="true" /> 이고, 연결된 속성이 아니면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsBrowsable">
      <summary>속성에 대한 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 값을 나타내는 값을 가져옵니다.</summary>
      <returns>속성에 <see cref="T:System.ComponentModel.BrowsableAttribute" />가 지정되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsLocalizable">
      <summary>
        <see cref="T:System.ComponentModel.LocalizableAttribute" />에 지정된, 이 속성이 지역화되어야 하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>값이 true인 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 생성자로 멤버가 표시되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsReadOnly">
      <summary>이 속성이 읽기 전용인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>속성이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Metadata">
      <summary>종속성 속성과 연결된 메타데이터를 가져옵니다.</summary>
      <returns>종속성 속성 메타데이터입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.PropertyType">
      <summary>종속성 속성의 표시된 <see cref="T:System.Type" />을 가져옵니다.</summary>
      <returns>종속성 속성의 <see cref="T:System.Type" /> 입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.SupportsChangeEvents">
      <summary>이 속성에 대한 속성 값 변경 알림이 구성 요소와 같은 속성 설명자 외부에서 발생하는지 또는 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />에 대한 직접 호출에서만 발생하는지를 나타냅니다.</summary>
      <returns>이 속성에 대한 알림이 구성 요소 자체와 같은 속성 설명자 외부에서 발생할 수 있으면 <see langword="true" />이고, 알림이 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" />에 대한 직접 호출에서만 발생하면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ErrorsChangedEventManager">
      <summary>약한 이벤트 수신기 패턴을 사용하여 <see cref="T:System.Windows.WeakEventManager" /> 이벤트에 대한 수신기를 연결할 수 있도록 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.AddHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary>지정된 소스가 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 이벤트를 발생시킬 때 호출되는 지정된 이벤트 처리기를 추가합니다.</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 이벤트를 발생하는 소스 개체입니다.</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 이벤트를 처리하는 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.NewListenerList">
      <summary>
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 이벤트에 대한 수신기를 포함하는 새 개체를 반환합니다.</summary>
      <returns>
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 이벤트에 대한 수신기를 포함하는 새 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.RemoveHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary>지정한 소스에서 지정한 이벤트 처리기를 제거합니다.</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 이벤트를 발생하는 소스 개체입니다.</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 이벤트를 처리하는 대리자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StartListening(System.Object)">
      <summary>지정된 소스의 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 이벤트 수신 대기를 시작합니다.</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 이벤트를 발생하는 소스 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StopListening(System.Object)">
      <summary>지정된 소스의 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 이벤트 수신 대기를 중지합니다.</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 이벤트를 발생하는 소스 개체입니다.</param>
    </member>
    <member name="T:System.ComponentModel.GroupDescription">
      <summary>컬렉션의 항목을 그룹으로 나누는 방법을 설명하는 형식에 대한 추상 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
      <summary>속성 값이 변경될 때 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>속성 값이 변경될 때 발생합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.GroupDescription" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary>지정된 항목의 그룹 이름을 반환합니다.</summary>
      <param name="item">그룹 이름을 반환할 항목입니다.</param>
      <param name="level">그룹화 수준입니다.</param>
      <param name="culture">변환기에 제공할 <see cref="T:System.Globalization.CultureInfo" /> 입니다.</param>
      <returns>지정된 항목의 그룹 이름입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
      <summary>항목이 그룹에 속하도록 그룹 이름과 항목 이름이 일치하는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="groupName">확인할 그룹의 이름입니다.</param>
      <param name="itemName">확인할 항목의 이름입니다.</param>
      <returns>이름이 일치하고 항목이 그룹에 속하면 <see langword="true" />이고, 일치하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>
        <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">발생하는 이벤트의 인수입니다.</param>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
      <summary>serialization 프로세스가 이 클래스의 인스턴스에 있는 <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> 속성의 효과적인 값을 직렬화하는지 여부를 반환합니다.</summary>
      <returns>
        <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeSortDescriptions">
      <summary>serialization 프로세스가 이 클래스의 인스턴스에 있는 <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" /> 속성의 효과적인 값을 직렬화하는지 여부를 반환합니다.</summary>
      <returns>
        <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" /> 속성 값을 serialize해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.CustomSort">
      <summary>
        <see cref="T:System.Collections.IComparer" />를 구현하는 개체를 사용하여 그룹을 정렬하는 사용자 지정 비교자를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Collections.IComparer" />를 구현하는 개체를 사용하여 그룹을 정렬하는 사용자 지정 비교자입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.GroupNames">
      <summary>지정된 이름을 가진 하위 그룹 집합으로 그룹을 초기화하는 데 사용할 이름의 컬렉션을 가져옵니다.</summary>
      <returns>지정된 이름을 가진 하위 그룹 집합으로 그룹을 초기화하는 데 사용할 이름의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.SortDescriptions">
      <summary>그룹을 정렬할 정렬 조건 컬렉션을 가져옵니다.</summary>
      <returns>그룹을 정렬할 정렬 조건의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionView">
      <summary>컬렉션이 현재 레코드 관리, 사용자 지정 정렬, 필터링 및 그룹화 기능을 갖도록 합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
      <summary>이 인터페이스를 구현할 경우 현재 항목이 변경된 이후 이 이벤트가 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
      <summary>이 인터페이스를 구현할 경우 현재 항목을 변경하기 전에 이 이벤트가 발생합니다. 이벤트 처리기가 이 이벤트를 취소할 수 있습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
      <summary>지정된 항목이 이 컬렉션 뷰에 속하는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="item">검사할 개체입니다.</param>
      <returns>항목이 이 컬렉션 뷰에 속하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
      <summary>변경 내용을 뷰에 병합하고 자동 새로 고침을 지연하는 데 사용할 수 있는 지연 주기를 입력합니다.</summary>
      <returns>호출하는 개체를 삭제하는 데 사용할 수 있는 <see cref="T:System.IDisposable" /> 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
      <summary>지정한 항목을 뷰의 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />으로 설정합니다.</summary>
      <param name="item">
        <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />으로 설정할 항목입니다.</param>
      <returns>결과 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />이 뷰 내에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
      <summary>뷰의 첫 번째 항목을 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />으로 설정합니다.</summary>
      <returns>결과 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />이 뷰 내에 있는 항목이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
      <summary>뷰의 마지막 항목을 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />으로 설정합니다.</summary>
      <returns>결과 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />이 뷰 내에 있는 항목이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
      <summary>뷰의 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 다음에 나오는 항목을 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />으로 설정합니다.</summary>
      <returns>결과 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />이 뷰 내에 있는 항목이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
      <summary>지정한 인덱스에 있는 항목을 뷰의 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />으로 설정합니다.</summary>
      <param name="position">
        <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />을 설정할 인덱스입니다.</param>
      <returns>결과 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />이 뷰 내에 있는 항목이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
      <summary>뷰의 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 앞에 나오는 항목을 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />으로 설정합니다.</summary>
      <returns>결과 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />이 뷰 내의 항목이면 <see langword="true" />이고, 뷰 내의 항목이 아니면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Refresh">
      <summary>뷰를 다시 만듭니다.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanFilter">
      <summary>이 뷰에서 <see cref="P:System.ComponentModel.ICollectionView.Filter" /> 속성을 통해 필터링이 지원되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 뷰에서 필터링이 지원되면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanGroup">
      <summary>이 뷰에서 <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" /> 속성을 통해 그룹화가 지원되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 뷰에서 그룹화가 지원되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanSort">
      <summary>이 뷰에서 <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" /> 속성을 통해 정렬이 지원되는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 뷰에서 정렬이 지원되면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Culture">
      <summary>정렬과 같이 문화권에 따라 다를 수 있는 뷰 작업에 대한 문화권 정보를 가져오거나 설정합니다.</summary>
      <returns>정렬하는 동안 사용할 문화권입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentItem">
      <summary>뷰의 현재 항목을 가져옵니다.</summary>
      <returns>뷰의 현재 항목이거나 현재 항목이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
      <summary>뷰 내에 있는 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />의 서수 위치를 가져옵니다.</summary>
      <returns>뷰 내에 있는 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />의 서수 위치입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Filter">
      <summary>항목이 뷰에 포함되기에 적합한지 여부를 결정하는 데 사용되는 콜백을 가져오거나 설정합니다.</summary>
      <returns>항목이 뷰에 포함되기에 적합한지 확인하는 데 사용할 메서드입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
      <summary>컬렉션의 항목이 뷰에서 그룹화되는 방법을 설명하는 <see cref="T:System.ComponentModel.GroupDescription" /> 개체의 컬렉션을 가져옵니다.</summary>
      <returns>컬렉션의 항목이 뷰에서 그룹화되는 방법을 설명하는 <see cref="T:System.ComponentModel.GroupDescription" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Groups">
      <summary>최상위 그룹을 가져옵니다.</summary>
      <returns>최상위 그룹의 읽기 전용 컬렉션 또는 그룹이 없는 경우 <see langword="null" /> 입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
      <summary>뷰의 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />이 컬렉션의 끝 부분을 벗어나는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>뷰의<see langword="true" /> 이 컬렉션의 끝 부분을 벗어나면 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 이고, 벗어나지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
      <summary>뷰의 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />이 컬렉션의 시작 부분을 벗어나는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" />
        <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />뷰의이 컬렉션의 시작 부분을 초과 하면이 고, 그렇지 않으면 <see langword="false" /> 입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsEmpty">
      <summary>결과 뷰가 비어 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>결과 뷰가 비어 있으면<see langword="true" /> 이고, 비어 있지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
      <summary>컬렉션의 항목이 뷰에서 정렬되는 방법을 설명하는 <see cref="T:System.ComponentModel.SortDescription" /> 개체의 컬렉션을 가져옵니다.</summary>
      <returns>컬렉션의 항목이 뷰에서 정렬되는 방법을 설명하는 <see cref="T:System.ComponentModel.SortDescription" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SourceCollection">
      <summary>기본 컬렉션을 반환합니다.</summary>
      <returns>기본 컬렉션인 <see cref="T:System.Collections.IEnumerable" /> 개체입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewFactory">
      <summary>해당 데이터에 대한 뷰를 만드는 컬렉션을 구현할 수 있게 하는 인터페이스입니다. 일반적으로 사용자 코드에서는 이 인터페이스의 메서드를 호출하지 않습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionViewFactory.CreateView">
      <summary>이 인터페이스를 구현하는 컬렉션에 새 뷰를 만듭니다. 일반적으로 사용자 코드에서는 이 메서드를 호출하지 않습니다.</summary>
      <returns>새로 만든 뷰입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewLiveShaping">
      <summary>
        <see cref="T:System.Windows.Data.CollectionView" />에서 정렬, 그룹화 및 필터링을 사용할 수 있는 속성을 실시간으로 정의합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveFiltering">
      <summary>컬렉션 뷰에서 실시간으로 필터링 데이터 켜기 또는 끄기를 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션 뷰에서 라이브 필터링 켜기 또는 끄기를 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveGrouping">
      <summary>컬렉션 뷰에서 실시간으로 데이터 그룹화의 설정 또는 해제를 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션 뷰에서 실시간 그룹화 켜기/끄기를 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveSorting">
      <summary>컬렉션 뷰에서 실시간으로 데이터 정렬의 설정 또는 해제를 지원하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션 뷰에서 실시간 정렬 켜기/끄기를 지원하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveFiltering">
      <summary>실시간 데이터 필터링을 사용하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>실시간 데이터 필터링을 사용할 수 있으면 <see langword="true" />이고, 실시간 필터링을 사용할 수 없으면 <see langword="false" />입니다. 컬렉션 뷰에서 실시간 필터링을 구현할지 여부를 알 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveGrouping">
      <summary>실시간 데이터 그룹화를 사용하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>실시간 데이터 그룹화를 사용할 수 있으면 <see langword="true" />이고, 실시간 그룹화를 사용할 수 없으면 <see langword="false" />입니다. 컬렉션 뷰에서 실시간 그룹화를 구현할지 여부를 알 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveSorting">
      <summary>실시간 정렬을 사용하는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>실시간 데이터 정렬을 사용할 수 있으면 <see langword="true" />이고, 실시간 정렬을 사용할 수 없으면 <see langword="false" />입니다. 컬렉션 뷰에서 실시간 정렬을 구현할지 여부를 알 수 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveFilteringProperties">
      <summary>실시간 데이터 필터링에 참여하는 속성을 지정하는 문자열의 컬렉션을 가져옵니다.</summary>
      <returns>실시간 데이터 필터링에 참여하는 속성을 지정하는 문자열의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveGroupingProperties">
      <summary>실시간 데이터 그룹화에 참여하는 속성을 지정하는 문자열의 컬렉션을 가져옵니다.</summary>
      <returns>실시간 데이터 그룹화에 참여하는 속성을 지정하는 문자열의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveSortingProperties">
      <summary>실시간 데이터 정렬에 참여하는 속성을 지정하는 문자열의 컬렉션을 가져옵니다.</summary>
      <returns>실시간 데이터 정렬에 참여하는 속성을 지정하는 문자열의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionView">
      <summary>
        <see cref="T:System.Windows.Data.CollectionView" />가 컬렉션에 편집 기능을 제공하기 위해 구현하는 메서드 및 속성을 정의합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.AddNew">
      <summary>컬렉션에 새 항목을 추가합니다.</summary>
      <returns>컬렉션에 추가되는 새 항목입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelEdit">
      <summary>편집 트랜잭션을 끝내고 가능한 경우 항목의 원래 값을 복원합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelNew">
      <summary>추가 트랜잭션을 끝내고 보류 중인 새 항목을 삭제합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitEdit">
      <summary>편집 트랜잭션을 끝내고 보류 중인 변경 내용을 저장합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitNew">
      <summary>추가 트랜잭션을 끝내고 보류 중인 새 항목을 저장합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)">
      <summary>지정된 항목에 대해 편집 트랜잭션을 시작합니다.</summary>
      <param name="item">편집할 항목입니다.</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)">
      <summary>컬렉션에서 지정한 항목을 제거합니다.</summary>
      <param name="item">제거할 항목입니다.</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)">
      <summary>컬렉션에서 지정된 위치의 항목을 제거합니다.</summary>
      <param name="index">제거할 항목의 위치입니다.</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="index" />가 0보다 작거나 컬렉션 뷰의 항목 수보다 큰 경우</exception>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanAddNew">
      <summary>컬렉션에 새 항목을 추가할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션에 새 항목을 추가할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit">
      <summary>컬렉션 뷰에서 보류 중인 변경 내용을 삭제하고 편집된 개체의 원래 값을 복원할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션 뷰에서 보류 중인 변경 내용을 삭제하고 편집된 개체의 원래 값을 복원할 수 있으면 <see langword="true" />이고, 복원할 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanRemove">
      <summary>컬렉션에서 항목을 제거할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션에서 항목을 제거할 수 있으면 <see langword="true" />이고, 제거할 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem">
      <summary>현재 추가 트랜잭션 중에 추가되는 항목을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" />가 <see langword="true" />이면 추가되는 항목이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem">
      <summary>편집되는 컬렉션의 항목을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" />이 <see langword="true" />인 경우 편집 중인 컬렉션의 항목이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsAddingNew">
      <summary>추가 트랜잭션이 진행 중인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>추가 트랜잭션이 진행 중이면<see langword="true" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsEditingItem">
      <summary>편집 트랜잭션이 진행 중인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>편집 트랜잭션이 진행 중이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition">
      <summary>컬렉션 뷰에서의 새 항목 자리 표시자 위치를 가져오거나 설정합니다.</summary>
      <returns>컬렉션 뷰에서의 새 항목 자리 표시자 위치를 지정하는 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionViewAddNewItem">
      <summary>특정 형식의 항목 추가를 지정할 수 있도록 <see cref="T:System.Windows.Data.CollectionView" />가 구현하는 메서드와 속성을 정의합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem(System.Object)">
      <summary>컬렉션에 지정된 개체를 추가합니다.</summary>
      <param name="newItem">컬렉션에 추가할 개체입니다.</param>
      <returns>컬렉션에 추가되는 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem">
      <summary>컬렉션에 지정된 개체를 추가할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>지정된 개체를 컬렉션에 추가할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.IItemProperties">
      <summary>개체 속성에 대한 정보를 제공하는 속성을 정의합니다.</summary>
    </member>
    <member name="P:System.ComponentModel.IItemProperties.ItemProperties">
      <summary>컬렉션의 항목에서 사용할 수 있는 속성에 대한 정보를 포함하는 컬렉션을 가져옵니다.</summary>
      <returns>컬렉션의 항목에서 사용할 수 있는 속성에 대한 정보를 포함하는 컬렉션입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.ItemPropertyInfo">
      <summary>속성에 대한 정보를 포함합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.ItemPropertyInfo.#ctor(System.String,System.Type,System.Object)">
      <summary>
        <see cref="T:System.ComponentModel.ItemPropertyInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">속성의 이름입니다.</param>
      <param name="type">속성의 형식입니다.</param>
      <param name="descriptor">속성에 대한 추가 정보가 들어 있는 개체입니다.</param>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Descriptor">
      <summary>속성에 대한 추가 정보가 들어 있는 개체를 가져옵니다.</summary>
      <returns>속성에 대한 추가 정보가 들어 있는 개체입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Name">
      <summary>속성 이름을 가져옵니다.</summary>
      <returns>속성의 이름입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.PropertyType">
      <summary>속성의 유형을 가져옵니다.</summary>
      <returns>속성의 형식입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.NewItemPlaceholderPosition">
      <summary>컬렉션에서 새 항목에 대한 자리 표시자가 표시되는 위치를 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtBeginning">
      <summary>컬렉션의 시작 부분에 새 항목에 대한 자리 표시자가 나타납니다.  컬렉션의 시작 부분에서 새 항목 자리 표시자 뒤에 새 항목이 나타납니다.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtEnd">
      <summary>컬렉션의 끝 부분에 새 항목에 대한 자리 표시자가 나타납니다. 컬렉션의 끝 부분에서 새 항목 자리 표시자 앞에 새 항목이 나타납니다.</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.None">
      <summary>컬렉션에서 새 항목 자리 표시자를 사용하지 않습니다. 기본 컬렉션에 따라 추가된 항목의 위치입니다.  일반적으로 컬렉션의 끝에 추가됩니다.</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventManager">
      <summary>"약한 이벤트 수신기" 패턴을 사용하여 <see cref="T:System.Windows.WeakEventManager" /> 이벤트에 대한 수신기를 연결할 수 있도록 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary>지정된 소스가 지정된 속성에 대한 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 이벤트를 발생시킬 때 호출되는 지정된 이벤트 처리기를 추가합니다.</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 이벤트를 발생하는 소스 개체입니다.</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 이벤트를 처리하는 대리자입니다.</param>
      <param name="propertyName">변경을 수신 대기할 <paramref name="source" />에 있는 속성 이름입니다. "모든 속성"을 나타내려면 <see cref="F:System.String.Empty" />로 설정합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="handler" />에 두 개 이상의 메서드가 연결되었습니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>지정된 수신기를 지정된 소스의 수신기 목록에 추가합니다.</summary>
      <param name="source">이벤트가 있는 개체입니다.</param>
      <param name="listener">수신기로 추가할 개체입니다.</param>
      <param name="propertyName">변경을 수신 대기할 <paramref name="source" />에 있는 속성 이름입니다. "모든 속성"을 나타내려면 <see cref="F:System.String.Empty" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.NewListenerList">
      <summary>
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 이벤트에 대한 수신기를 포함하는 새 개체를 반환합니다.</summary>
      <returns>
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 이벤트에 대한 수신기를 포함하는 새 개체입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>더 이상 활성 상태가 아닌 수신기를 제공된 소스의 데이터에서 제거합니다.</summary>
      <param name="source">모든 수신기를 제거할 소스 개체입니다.</param>
      <param name="data">지울 데이터입니다. 이는 <see cref="T:System.Collections.Specialized.HybridDictionary" />여야 합니다.</param>
      <param name="purgeAll">수신 대기를 중지하고 모든 데이터를 완전히 제거하려면 <see langword="true" />로 설정합니다.</param>
      <returns>일부 항목이 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary>지정한 소스에서 지정한 이벤트 처리기를 제거합니다.</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 이벤트를 발생하는 소스 개체입니다.</param>
      <param name="handler">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 이벤트를 처리하는 대리자입니다.</param>
      <param name="propertyName">변경 수신 대기를 중지할 <paramref name="source" />에 있는 속성 이름입니다. "모든 속성"을 나타내려면 <see cref="F:System.String.Empty" />로 설정합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="handler" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="handler" />에 두 개 이상의 메서드가 연결되었습니다.</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary>제공된 소스의 수신기 목록에서 지정된 수신기를 제거합니다.</summary>
      <param name="source">수신기를 제거할 개체입니다.</param>
      <param name="listener">제거할 수신기입니다.</param>
      <param name="propertyName">변경 수신 대기를 중지할 <paramref name="source" />에 있는 속성 이름입니다. "모든 속성"을 나타내려면 <see cref="F:System.String.Empty" />로 설정합니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)">
      <summary>제공된 소스의 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 이벤트 수신 대기를 시작합니다.</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 수신 대기를 시작할 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)">
      <summary>제공된 소스의 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 이벤트 수신 대기를 중지합니다.</summary>
      <param name="source">
        <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 수신 대기를 중지할 소스 개체입니다.</param>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterAttribute">
      <summary>형식 설명자, 특히 <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> 메서드에서 보고할 속성을 지정합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterAttribute.Default">
      <summary>이 멤버는 .NET Framework 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.#ctor(System.ComponentModel.PropertyFilterOptions)">
      <summary>
        <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="filter">이 속성 필터에 대해 설명하는 옵션입니다.</param>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Equals(System.Object)">
      <summary>현재 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 특성 이 지정 된 개체와 같은지 여부를 나타내는 값을 반환 합니다.</summary>
      <param name="value">이 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />과 비교할 개체입니다.</param>
      <returns>지정된 <see langword="true" />가 현재<see cref="T:System.ComponentModel.PropertyFilterAttribute" />와 같으면 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.GetHashCode">
      <summary>현재에 대 한 해시 코드를 반환 합니다 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 특성 .</summary>
      <returns>부호 있는 32비트 정수 값입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Match(System.Object)">
      <summary>현재의 속성 필터 옵션이 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 특성 제공 된 개체의 속성 필터 옵션과 일치 하는지 여부를 나타내는 값을 반환 합니다.</summary>
      <param name="value">비교할 개체입니다. 이 개체는 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />여야 합니다.</param>
      <returns>일치하는 항목이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyFilterAttribute.Filter">
      <summary>이에 대 한 필터 옵션을 가져옵니다 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 특성 .</summary>
      <returns>속성 필터 옵션입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterOptions">
      <summary>형식 설명자, 특히 <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> 메서드에서 보고할 속성을 지정합니다. 이 열거형은 <see cref="P:System.ComponentModel.PropertyFilterAttribute.Filter" /> 속성의 값을 지정하는 데 사용됩니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.All">
      <summary>모든 속성을 반환합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Invalid">
      <summary>개체의 현재 컨텍스트에서 유효하지 않은 속성만 반환합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.None">
      <summary>속성을 반환하지 않습니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.SetValues">
      <summary>로컬 값이 현재 설정된 해당 속성만 반환합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.UnsetValues">
      <summary>로컬 값이 설정되지 않았거나 외부 식 저장소(예: 바인딩 또는 지연된 리소스)에 속성이 설정되지 않은 속성만 반환합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Valid">
      <summary>현재 범위의 개체에 유효한 모든 속성을 반환합니다.</summary>
    </member>
    <member name="T:System.ComponentModel.SortDescription">
      <summary>컬렉션 정렬 기준으로 사용할 속성 이름 및 방향을 정의합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
      <summary>
        <see cref="T:System.ComponentModel.SortDescription" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="propertyName">목록의 정렬 기준으로 사용할 속성의 이름입니다.</param>
      <param name="direction">정렬 순서입니다.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="direction" /> 매개 변수에 유효한 값이 지정되지 않았습니다.</exception>
    </member>
    <member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
      <summary>지정된 인스턴스와 현재 <see cref="T:System.ComponentModel.SortDescription" /> 인스턴스의 값이 같은지 비교합니다.</summary>
      <param name="obj">비교할 <see cref="T:System.ComponentModel.SortDescription" /> 인스턴스입니다.</param>
      <returns>
        <paramref name="obj" />와 이 <see cref="T:System.ComponentModel.SortDescription" /> 인스턴스의 값이 같으면 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.GetHashCode">
      <summary>이 <see cref="T:System.ComponentModel.SortDescription" /> 인스턴스의 해시 코드를 반환합니다.</summary>
      <returns>이 <see cref="T:System.ComponentModel.SortDescription" /> 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>두 <see cref="T:System.ComponentModel.SortDescription" /> 개체의 값이 같은지 비교합니다.</summary>
      <param name="sd1">비교할 첫 번째 인스턴스입니다.</param>
      <param name="sd2">비교할 두 번째 인스턴스입니다.</param>
      <returns>두 개체가 같으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary>두 <see cref="T:System.ComponentModel.SortDescription" /> 개체의 값이 다른지 비교합니다.</summary>
      <param name="sd1">비교할 첫 번째 인스턴스입니다.</param>
      <param name="sd2">비교할 두 번째 인스턴스입니다.</param>
      <returns>값이 다르면 <see langword="false" />이고, 같으면 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.Direction">
      <summary>오름차순으로 정렬할지 아니면 내림차순으로 정렬할지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>오름차순으로 정렬할지 아니면 내림차순으로 정렬할지를 나타낼 <see cref="T:System.ComponentModel.ListSortDirection" /> 값입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.IsSealed">
      <summary>이 개체가 변경 불가능한 상태인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 개체가 사용 중이면<see langword="true" /> 이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.PropertyName">
      <summary>정렬 기준으로 사용되는 속성 이름을 가져오거나 설정합니다.</summary>
      <returns>기본값은 null입니다.</returns>
    </member>
    <member name="T:System.ComponentModel.SortDescriptionCollection">
      <summary>
        <see cref="T:System.ComponentModel.SortDescription" /> 개체의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
      <summary>항목을 추가하거나 제거하면 발생합니다.</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary>항목을 추가하거나 제거하면 발생합니다.</summary>
    </member>
    <member name="F:System.ComponentModel.SortDescriptionCollection.Empty">
      <summary>
        <see cref="T:System.ComponentModel.SortDescriptionCollection" />의 수정할 수 없는 빈 인스턴스를 가져옵니다.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
      <summary>
        <see cref="T:System.ComponentModel.SortDescriptionCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.ClearItems">
      <summary>컬렉션에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>항목을 컬렉션 내의 지정된 인덱스에 삽입합니다.</summary>
      <param name="index">
        <paramref name="item" />을 삽입하는 인덱스(0부터 시작)입니다.</param>
      <param name="item">삽입할 개체입니다.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
      <summary>컬렉션의 지정된 인덱스에서 항목을 제거합니다.</summary>
      <param name="index">제거할 요소의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary>지정된 인덱스에 있는 요소를 바꿉니다.</summary>
      <param name="index">바꿀 요소의 인덱스(0부터 시작)입니다.</param>
      <param name="item">지정한 인덱스에 있는 요소의 새 값입니다.</param>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceLevel">
      <summary>특정 개체에 대해 추적할 세부 수준을 설명합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.High">
      <summary>모든 추가 정보를 추적합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Low">
      <summary>일부 추가 정보를 추적합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Medium">
      <summary>중간 양의 추가 정보를 추적합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.None">
      <summary>사용할 수 있는 추가 정보를 추적하지 않습니다.</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceSources">
      <summary>특히 WPF(Windows Presentation Foundation) 애플리케이션을 대상으로 한 디버그 추적 지원을 제공합니다.</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty">
      <summary>
        <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 연결된 속성을 식별합니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.GetTraceLevel(System.Object)">
      <summary>지정된 요소에 대한 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 연결된 속성의 값을 설정합니다.</summary>
      <param name="element">속성 값을 읽어올 요소입니다.</param>
      <returns>요소의 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 속성 값입니다.</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.Refresh">
      <summary>app.config 파일을 다시 읽어들여 추적 소스를 새로 고칩니다.</summary>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.SetTraceLevel(System.Object,System.Diagnostics.PresentationTraceLevel)">
      <summary>지정된 요소에 대한 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 연결된 속성의 값을 설정합니다.</summary>
      <param name="element">연결된 속성이 작성될 요소입니다.</param>
      <param name="traceLevel">필요한 <see cref="T:System.Diagnostics.PresentationTraceLevel" /> 값입니다.</param>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.AnimationSource">
      <summary>애니메이션 추적 소스를 가져옵니다.</summary>
      <returns>애니메이션 추적 소스입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DataBindingSource">
      <summary>데이터 바인딩 추적 소스를 가져옵니다.</summary>
      <returns>데이터 바인딩 추적 소스입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DependencyPropertySource">
      <summary>종속성 속성 추적 소스를 가져옵니다.</summary>
      <returns>종속성 속성 추적 소스입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DocumentsSource">
      <summary>문서 추적 소스를 가져옵니다.</summary>
      <returns>문서 추적 소스입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.FreezableSource">
      <summary>Freezable 추적 소스를 가져옵니다.</summary>
      <returns>Freezable 추적 소스입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.HwndHostSource">
      <summary>hwnd 호스트 추적 소스를 가져옵니다.</summary>
      <returns>hwnd 호스트 추적 소스입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.MarkupSource">
      <summary>마크업 추적 소스를 가져옵니다.</summary>
      <returns>마크업 추적 소스입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.NameScopeSource">
      <summary>이름 범위 추적 소스를 가져옵니다.</summary>
      <returns>이름 범위 추적 소스입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ResourceDictionarySource">
      <summary>리소스 사전 추적 소스를 가져옵니다.</summary>
      <returns>리소스 사전 추적 소스입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.RoutedEventSource">
      <summary>라우트된 이벤트 추적 원본을 가져옵니다.</summary>
      <returns>라우트된 이벤트 추적 원본입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ShellSource">
      <summary>셸 추적 소스를 가져옵니다.</summary>
      <returns>셸 추적 소스입니다.</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.TraceLevel" />
    <member name="T:System.IO.Packaging.CertificateEmbeddingOption">
      <summary>서명에 사용되는 X.509 인증서가 저장되는 위치를 지정합니다.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InCertificatePart">
      <summary>인증서가 자체 <see cref="T:System.IO.Packaging.PackagePart" />에 포함되어 있습니다.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InSignaturePart">
      <summary>인증서가 추가되는 서명에 대해 만들어지는 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart" />에 포함되어 있습니다.</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.NotEmbedded">
      <summary>인증서가 패키지에 포함되지 않았습니다.</summary>
    </member>
    <member name="T:System.IO.Packaging.EncryptedPackageEnvelope">
      <summary>암호화된 패키지가 들어 있는 OLE 복합 파일을 나타냅니다.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Close">
      <summary>암호화된 패키지 및 이를 보유한 OLE 복합 파일을 닫습니다.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>지정된 스트림에서 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />를 만들어 반환합니다.</summary>
      <param name="envelopeStream">파일을 만들 스트림입니다.</param>
      <param name="publishLicense">복합 파일에 포함된 게시 라이선스입니다.</param>
      <param name="cryptoProvider">암호화된 콘텐츠에 대해 현재 사용자가 수행할 수 있는 작업을 결정하는 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" />에서 읽기/쓰기 액세스를 제공하지 않는 경우</exception>
      <returns>새로 만든 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />를 만들어 반환하고 지정된 파일 이름을 부여합니다.</summary>
      <param name="envelopeFileName">OLE 복합 파일의 이름입니다.</param>
      <param name="publishLicense">복합 파일에 포함된 게시 라이선스입니다.</param>
      <param name="cryptoProvider">암호화된 콘텐츠에 대해 현재 사용자가 수행할 수 있는 작업을 결정하는 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" />이(가) <see langword="null" />인 경우</exception>
      <returns>새로 만든 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>지정된 암호화되지 않은 패키지를 해당 콘텐츠로 사용하는 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />를 지정된 스트림에 만들어 반환합니다.</summary>
      <param name="envelopeStream">파일을 만들 스트림입니다.</param>
      <param name="packageStream">암호화되지 않은 기존 패키지를 나타내는 스트림입니다.</param>
      <param name="publishLicense">복합 파일에 포함된 게시 라이선스입니다.</param>
      <param name="cryptoProvider">암호화된 콘텐츠에 대해 현재 사용자가 수행할 수 있는 작업을 결정하는 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeStream" /> 또는 <paramref name="packageStream" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="envelopeStream" />에서 읽기/쓰기 액세스를 제공하지 않는 경우</exception>
      <returns>새로 만든 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary>지정된 암호화되지 않은 패키지를 해당 콘텐츠로 사용하는 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />를 만들고 지정된 파일 이름을 부여하여 반환합니다.</summary>
      <param name="envelopeFileName">OLE 복합 파일의 이름입니다.</param>
      <param name="packageStream">암호화되지 않은 기존 패키지를 나타내는 스트림입니다.</param>
      <param name="publishLicense">복합 파일에 포함된 게시 라이선스입니다.</param>
      <param name="cryptoProvider">암호화된 콘텐츠에 대해 현재 사용자가 수행할 수 있는 작업을 결정하는 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="envelopeFileName" /> 또는 <paramref name="packageStream" />가 <see langword="null" />인 경우</exception>
      <returns>새로 만든 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose">
      <summary>
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Flush">
      <summary>
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 및 해당 패키지 콘텐츠 모두에 대해 스트림을 플러시합니다.</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.GetPackage">
      <summary>
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 내의 암호화된 패키지를 가져옵니다.</summary>
      <returns>엔벌로프에 있는 <see cref="T:System.IO.Packaging.Package" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)">
      <summary>지정된 스트림이 암호화된 패키지 스트림을 사용하는 OLE 복합 파일인지 여부를 지정하는 값을 가져옵니다.</summary>
      <param name="stream">테스트할 스트림입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stream" />이(가) <see langword="null" />인 경우</exception>
      <returns>지정된 스트림이 암호화된 패키지 스트림을 사용하는 OLE 복합 파일이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)">
      <summary>지정된 파일이 암호화된 패키지 스트림을 사용하는 OLE 복합 파일인지 여부를 지정하는 값을 가져옵니다.</summary>
      <param name="fileName">테스트할 파일입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fileName" />이(가) <see langword="null" />인 경우</exception>
      <returns>지정된 파일이 암호화된 패키지 스트림을 사용하는 OLE 복합 파일이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)">
      <summary>지정된 스트림의 암호화된 패키지를 엽니다.</summary>
      <param name="envelopeStream">암호화된 패키지를 포함하는 스트림입니다.</param>
      <returns>열려 있는 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)">
      <summary>지정된 파일의 암호화된 패키지를 공유하지 않고 읽기 전용 모드로 엽니다.</summary>
      <param name="envelopeFileName">암호화된 패키지가 들어 있는 파일입니다.</param>
      <returns>열려 있는 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)">
      <summary>지정된 액세스 권한을 적용하여 지정된 파일의 암호화된 패키지를 공유하지 않고 엽니다.</summary>
      <param name="envelopeFileName">암호화된 패키지가 들어 있는 파일입니다.</param>
      <param name="access">액세스의 유형입니다.</param>
      <returns>열려 있는 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)">
      <summary>지정된 파일의 암호화된 패키지를 열고 지정된 액세스 권한 및 공유 설정을 적용합니다.</summary>
      <param name="envelopeFileName">암호화된 패키지가 들어 있는 파일입니다.</param>
      <param name="access">액세스의 유형입니다.</param>
      <param name="sharing">공유 유형입니다.</param>
      <returns>열려 있는 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess">
      <summary>파일을 열 때 읽기 권한을 부여했는지, 쓰기 권한을 부여했는지, 아니면 두 권한을 모두 부여했는지 지정하는 값을 가져옵니다.</summary>
      <returns>파일을 여는 데 사용된 <see cref="T:System.IO.FileAccess" /> 값입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties">
      <summary>권한으로 관리되는 문서의 핵심 패키지 속성(Title 및 Subject 등)을 가져옵니다.</summary>
      <returns>패키지의 <see cref="T:System.IO.Packaging.PackageProperties" />입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation">
      <summary>
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />에 저장되어 있는 권한 관리 정보를 가져옵니다. 권한 관리를 통해 보호되는 패키지를 구현하는 OLE 복합 파일에 저장되어 있는 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 및 <see cref="T:System.Security.RightsManagement.UseLicense" />가 특히 여기에 해당합니다.</summary>
      <returns>패키지의 <see cref="T:System.IO.Packaging.RightsManagementInformation" />입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo">
      <summary>암호화된 패키지 외부에 있는 복합 파일 스트림에 대한 액세스 권한을 제공하는 개체를 가져옵니다.</summary>
      <returns>암호화된 패키지 외부에 있는 OLE 복합 파일의 스트림을 나타내는 <see cref="T:System.IO.Packaging.StorageInfo" />입니다.</returns>
    </member>
    <member name="T:System.IO.Packaging.InvalidSignatureEventHandler">
      <summary>
        <see cref="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" />에서 유효하지 않은 서명을 발견했을 때 발생하는 <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" />를 처리하는 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트의 유효하지 않은 <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> 소스입니다.</param>
      <param name="e">이벤트 데이터입니다.</param>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignature">
      <summary>패키지 파트 및 관계 집합에 적용되는 디지털 서명을 나타냅니다.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.GetPartTransformList(System.Uri)">
      <summary>지정된 파트에 적용되는 <see cref="T:System.Security.Cryptography.Xml.Transform" /> 작업의 순서 지정된 목록을 반환합니다.</summary>
      <param name="partName">변환 목록을 반환할 <see cref="T:System.Uri" />의 <see cref="T:System.IO.Packaging.PackagePart" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">디지털 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />가 삭제되었습니다.</exception>
      <returns>지정된 <paramref name="partName" /> URI의 파트에 적용되는 정식 XML 변환을 나타내는 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" /> 또는 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />과 같은 URI 문자열의 순서 지정된 목록입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify">
      <summary>X.509 인증서에 대한 디지털 서명을 확인합니다.</summary>
      <exception cref="T:System.InvalidOperationException">디지털 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />가 삭제되었습니다.</exception>
      <returns>확인이 성공했으면<see cref="F:System.IO.Packaging.VerifyResult.Success" /> 이고, 실패했으면 문제를 식별하는 <see cref="T:System.IO.Packaging.VerifyResult" /> 값 중 하나입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>지정된 X.509 인증서에 대해 디지털 서명을 확인합니다.</summary>
      <param name="signingCertificate">디지털 서명을 확인하기 위한 서명자의 X.509 인증서입니다.</param>
      <exception cref="T:System.InvalidOperationException">디지털 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />가 삭제되었습니다.</exception>
      <returns>확인이 성공했으면<see cref="F:System.IO.Packaging.VerifyResult.Success" /> 이고, 실패했으면 문제를 식별하는 <see cref="T:System.IO.Packaging.VerifyResult" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.CertificateEmbeddingOption">
      <summary>X.509 인증서 포함 옵션을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">디지털 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />가 삭제되었습니다.</exception>
      <returns>디지털 서명에 대한 옵션을 지정하는 <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signature">
      <summary>XML 디지털 서명을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">디지털 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />가 삭제되었습니다.</exception>
      <returns>XML 디지털 서명입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart">
      <summary>서명이 포함된 <see cref="T:System.IO.Packaging.PackagePart" />를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">디지털 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />가 삭제되었습니다.</exception>
      <returns>서명이 포함된 패키지 파트입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureType">
      <summary>서명 형식을 식별하는 URI 문자열을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">디지털 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />가 삭제되었습니다.</exception>
      <returns>서명 형식을 식별 하는 URI 문자열입니다. 기본값은 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureValue">
      <summary>
        <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />의 암호화된 해시 값을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">디지털 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />가 삭제되었습니다.</exception>
      <returns>
        <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />의 암호화된 해시 값이 포함된 바이트 배열입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedParts">
      <summary>서명된 모든 <see cref="T:System.IO.Packaging.PackagePart" /> 개체의 컬렉션을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">디지털 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />가 삭제되었습니다.</exception>
      <returns>서명된 모든 패키지 파트가 포함된 컬렉션입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedRelationshipSelectors">
      <summary>서명된 <see cref="T:System.IO.Packaging.PackageRelationship" /> 파트의 목록을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">디지털 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />가 삭제되었습니다.</exception>
      <returns>서명된 <see cref="T:System.IO.Packaging.PackageRelationship" /> 파트의 목록입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signer">
      <summary>서명자의 X.509 인증서를 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">디지털 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />가 삭제되었습니다.</exception>
      <returns>서명자의 디지털 인증서이거나, 인증서가 <see langword="null" /> 에 저장되지 않은 경우 <see cref="T:System.IO.Packaging.Package" />입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SigningTime">
      <summary>서명이 생성된 날짜와 시간을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">디지털 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />가 삭제되었습니다.</exception>
      <returns>서명이 생성된 날짜와 시간입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.TimeFormat">
      <summary>
        <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> 속성에서 반환된 날짜와 시간의 형식을 가져옵니다.</summary>
      <exception cref="T:System.InvalidOperationException">디지털 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" />가 삭제되었습니다.</exception>
      <returns>
        <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> 속성에서 반환된 날짜와 시간의 형식입니다.</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignatureManager">
      <summary>
        <see cref="T:System.IO.Packaging.Package" />에 디지털 서명을 만들고 이러한 서명을 확인하기 위한 유틸리티 클래스를 제공합니다.</summary>
    </member>
    <member name="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent">
      <summary>
        <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" />가 유효하지 않은 서명을 발견하면 발생합니다.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)">
      <summary>지정된 <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager" />에 사용할 <see cref="T:System.IO.Packaging.Package" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="package">이 서명 관리자와 연결되는 패키지입니다.</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign">
      <summary>사용자가 선택한 X.509 인증서를 사용하여 패키지의 모든 서명을 연대 서명합니다.</summary>
      <returns>연대 서명으로 추가된 서명입니다. 인증서를 찾을 수 없거나 사용자가 인증서 선택 대화 상자를 취소한 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>지정된 X.509 인증서를 사용하여 패키지의 모든 서명에 연대 서명합니다.</summary>
      <param name="certificate">연대 서명으로 서명을 추가할 X.509 인증서입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" />가 <see langword="null" />인 경우</exception>
      <returns>연대 서명으로 추가된 서명입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>지정된 X.509 인증서를 사용하여 서명 목록에 연대 서명합니다.</summary>
      <param name="certificate">지정된 각 <paramref name="signatures" />에 연대 서명할 X.509 인증서입니다.</param>
      <param name="signatures">연대 서명할 서명 목록입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="certificate" /> 또는 <paramref name="signatures" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">패키지에 서명된 <see cref="T:System.IO.Packaging.PackagePart" /> 개체가 없는 경우</exception>
      <exception cref="T:System.ArgumentException">패키지에 <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> 파트가 없는 경우</exception>
      <returns>각 <paramref name="signatures" />에 연대 서명하는 데 사용할 디지털 서명입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)">
      <summary>지정된 서명 URI(Uniform Resource Identifier)의 디지털 서명을 반환합니다.</summary>
      <param name="signatureUri">반환할 디지털 서명의 URI입니다.</param>
      <returns>지정된 <paramref name="signatureUri" />의 디지털 서명, 또는 지정된 <paramref name="signatureUri" />의 서명을 찾을 수 없는 경우에는 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures">
      <summary>패키지에서 모든 디지털 서명을 제거합니다.</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)">
      <summary>지정된 서명 URI(Uniform Resource Identifier)의 디지털 서명을 제거합니다.</summary>
      <param name="signatureUri">제거할 <see cref="T:System.IO.Packaging.PackageDigitalSignature" />의 URI입니다.</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary>사용자에게 지정된 패키지 파트 목록을 디지털로 서명하는 데 사용되는 X.509 인증서에 대해 묻는 메시지를 표시합니다.</summary>
      <param name="parts">서명할 <see cref="T:System.IO.Packaging.PackagePart" /> 요소의 URI(Uniform Resource Identifier) 목록입니다.</param>
      <returns>
        <paramref name="parts" /> 목록에 서명하는 데 사용되는 디지털 서명입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>지정된 X.509 인증서를 사용하여 패키지 파트 목록에 서명합니다.</summary>
      <param name="parts">서명할 <see cref="T:System.IO.Packaging.PackagePart" /> 요소의 URI(Uniform Resource Identifier) 목록입니다.</param>
      <param name="certificate">지정된 각 <paramref name="parts" />에 디지털 서명하는 데 사용할 X.509 인증서입니다.</param>
      <returns>지정된 <paramref name="parts" /> 목록에 서명하는 데 사용할 디지털 서명 또는 인증서가 없거나 사용자가 인증서 선택 대화 상자에서 "취소"를 클릭한 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})">
      <summary>지정된 X.509 인증서를 사용하여 패키지 파트 및 패키지 관계 목록에 서명합니다.</summary>
      <param name="parts">서명할 <see cref="T:System.IO.Packaging.PackagePart" /> 개체의 URI(Uniform Resource Identifier) 목록입니다.</param>
      <param name="certificate">지정된 각 파트 및 관계에 디지털 서명하는 데 사용할 X.509 인증서입니다.</param>
      <param name="relationshipSelectors">서명할 <see cref="T:System.IO.Packaging.PackageRelationship" /> 개체 목록입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parts" /> 또는 <paramref name="relationshipSelectors" /> 모두 서명할 개체를 지정하지 않습니다.</exception>
      <returns>
        <paramref name="parts" /> 및 <paramref name="relationshipSelectors" /> 목록에 지정된 요소에 서명하는 데 사용되는 디지털 시그니처입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)">
      <summary>지정된 X.509 인증서 및 ID(식별자)를 사용하여 패키지 파트 및 패키지 관계 목록에 서명합니다.</summary>
      <param name="parts">서명할 <see cref="T:System.IO.Packaging.PackagePart" /> 개체의 URI(Uniform Resource Identifier) 목록입니다.</param>
      <param name="certificate">지정된 각 파트 및 관계에 디지털 서명하는 데 사용할 X.509 인증서입니다.</param>
      <param name="relationshipSelectors">서명할 <see cref="T:System.IO.Packaging.PackageRelationship" /> 개체 목록입니다.</param>
      <param name="signatureId">서명과 연결할 식별 문자열입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parts" /> 또는 <paramref name="relationshipSelectors" /> 모두 서명할 요소를 지정하지 않습니다.</exception>
      <returns>
        <paramref name="parts" /> 및 <paramref name="relationshipSelectors" /> 목록에 지정된 요소에 서명하는 데 사용되는 디지털 시그니처입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})">
      <summary>지정된 X.509 인증서와 서명 ID(식별자)를 사용하여 패키지 파트, 패키지 관계 또는 사용자 지정 개체 목록에 서명합니다.</summary>
      <param name="parts">서명할 <see cref="T:System.IO.Packaging.PackagePart" /> 개체의 URI(Uniform Resource Identifier) 목록입니다.</param>
      <param name="certificate">지정된 각 파트 및 관계에 디지털 서명하는 데 사용할 X.509 인증서입니다.</param>
      <param name="relationshipSelectors">서명할 <see cref="T:System.IO.Packaging.PackageRelationship" /> 개체 목록입니다.</param>
      <param name="signatureId">서명과 연결할 식별 문자열입니다.</param>
      <param name="signatureObjects">서명할 사용자 지정 데이터 개체의 목록입니다.</param>
      <param name="objectReferences">서명할 사용자 지정 개체에 대한 참조 목록입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parts" />, <paramref name="relationshipSelectors" />, <paramref name="signatureObjects" /> 또는 <paramref name="objectReferences" /> 모두 서명할 요소를 지정하지 않습니다.</exception>
      <exception cref="T:System.InvalidOperationException">서명 중인 파트의 <see cref="P:System.IO.Packaging.PackagePart.ContentType" />이 비어 있거나, <see langword="null" />이거나 또는 정의되지 않은 <see cref="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping" />을 참조합니다.</exception>
      <exception cref="T:System.Xml.XmlException">
        <paramref name="signatureId" />가 <see langword="null" />이 아니고 유효한 XML 스키마 ID(예: 선행 숫자로 시작)가 아닙니다.</exception>
      <returns>
        <paramref name="parts" /> 및 <paramref name="relationshipSelectors" /> 목록에 지정된 요소에 서명하는 데 사용되는 디지털 시그니처입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary>지정된 X.509 인증서를 확인합니다.</summary>
      <param name="certificate">확인할 X.509 인증서입니다.</param>
      <returns>인증서가 확인되면 <see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError" />(값 0)이고, 그렇지 않으면 오류 플래그의 비트 열거형입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)">
      <summary>패키지 내에서 서명된 모든 파트에서 서명을 확인합니다.</summary>
      <param name="exitOnFailure">첫 번째 실패 시 종료하려면 <see langword="true" />이고, 계속해서 모든 서명을 확인하려면 <see langword="false" />입니다.</param>
      <returns>모든 서명이 성공적으로 확인되면<see cref="F:System.IO.Packaging.VerifyResult.Success" /> (값 0)이고, 그렇지 않으면 오류를 나타내는 열거형입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption">
      <summary>
        <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" /> 메서드에서 패키지 파트에 디지털 서명하는 데 사용할 X.509 인증서 포함 옵션을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm">
      <summary>서명을 만들고 확인하는 데 사용되는 기본 해시 알고리즘을 식별하는 URI 문자열을 가져옵니다.</summary>
      <returns>서명을 만들고 확인 하는 데 사용 되는 기본 해시 알고리즘을 식별 하는 URI 문자열입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm">
      <summary>서명을 만들고 확인하는 데 사용되는 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 인스턴스의 URI 식별자를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentNullException">설정할 URI의 문자열이 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">설정할 URI의 문자열이 비어 있는 경우</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
        <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 서명을 만들고 확인 하는 데 사용 되는 인스턴스의 URI 식별자입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned">
      <summary>패키지에 서명이 포함되어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>패키지에 서명이 포함되어 있으면 <see langword="true" />, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow">
      <summary>인증서 선택 대화 상자를 표시하는 데 사용할 부모 창에 대한 핸들을 가져오거나 설정합니다.</summary>
      <returns>인증서 선택 대화 상자를 표시하는 데 사용할 부모 창에 대한 핸들입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin">
      <summary>서명 원점 파트의 URI(Uniform Resource Identifier)를 가져옵니다.</summary>
      <returns>서명 원점 파트의 URI입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType">
      <summary>기본 서명 원본 관계의 형식을 가져옵니다.</summary>
      <returns>기본 서명 원본 관계의 형식입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.Signatures">
      <summary>패키지에 포함된 모든 서명의 컬렉션을 가져옵니다.</summary>
      <returns>모든 <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat">
      <summary>서명 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />을 만드는 데 사용되는 날짜/시간 형식을 가져오거나 설정합니다.</summary>
      <returns>서명 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" />을 만드는 데 사용되는 날짜/시간 형식입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping">
      <summary>정의된 각 <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> 및 연결된 XML <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> 식별자가 포함된 사전을 가져옵니다.</summary>
      <returns>정의 된 각 및 연결 된를 포함 하는 사전입니다 <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> XML <see cref="T:System.Security.Cryptography.Xml.Transform" /> .<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> 가져옵니다.</returns>
    </member>
    <member name="T:System.IO.Packaging.RightsManagementInformation">
      <summary>
        <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />에 저장되어 있는 DRM(디지털 권한 관리) 정보를 나타냅니다.</summary>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.DeleteUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>암호화된 권한 관리 데이터 스트림에서 지정된 사용자의 <see cref="T:System.Security.RightsManagement.UseLicense" />를 삭제합니다.</summary>
      <param name="userKey">삭제할 <see cref="T:System.Security.RightsManagement.UseLicense" />의 사용자입니다.</param>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses">
      <summary>암호화된 권한 관리 데이터 스트림에서 사용자 및 <see cref="T:System.Security.RightsManagement.UseLicense" /> 키/값 쌍의 사전 컬렉션을 반환합니다.</summary>
      <returns>권한 관리를 통해 보호되는 패키지에 들어 있는 사용자 및 <see cref="T:System.Security.RightsManagement.UseLicense" /> 키/값 쌍의 컬렉션입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadPublishLicense">
      <summary>암호화된 권한 관리 데이터 스트림에서 포함된 <see cref="T:System.Security.RightsManagement.PublishLicense" />를 반환합니다.</summary>
      <exception cref="T:System.IO.FileFormatException">이 클래스의 현재 버전으로는 이 패키지에 있는 권한 관리 정보를 읽을 수 없는 경우</exception>
      <returns>포함된 <see cref="T:System.Security.RightsManagement.PublishLicense" />이거나, 패키지에 <see cref="T:System.Security.RightsManagement.PublishLicense" />가 없으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary>암호화된 권한 관리 데이터 스트림에서 지정된 사용자의 포함된 <see cref="T:System.Security.RightsManagement.UseLicense" />를 반환합니다.</summary>
      <param name="userKey">
        <see cref="T:System.Security.RightsManagement.UseLicense" />를 반환할 사용자 또는 사용자 그룹입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userKey" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileFormatException">이 클래스의 현재 버전으로는 이 패키지에 있는 권한 관리 정보를 읽을 수 없는 경우</exception>
      <returns>지정된 사용자의 <see cref="T:System.Security.RightsManagement.UseLicense" />입니다. 지정된 <paramref name="userKey" />에 일치하는 <see cref="T:System.Security.RightsManagement.UseLicense" />가 패키지에 포함되어 있지 않으면 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SavePublishLicense(System.Security.RightsManagement.PublishLicense)">
      <summary>지정된 <see cref="T:System.Security.RightsManagement.PublishLicense" />를 암호화된 권한 관리 데이터 스트림에 저장합니다.</summary>
      <param name="publishLicense">패키지에 저장하여 포함할 게시 라이선스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="publishLicense" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileFormatException">이 클래스의 현재 버전으로는 이 패키지에 있는 권한 관리 정보를 읽을 수 없는 경우</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SaveUseLicense(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.UseLicense)">
      <summary>지정된 사용자의 지정된 <see cref="T:System.Security.RightsManagement.UseLicense" />를 암호화된 권한 관리 데이터 스트림에 저장합니다.</summary>
      <param name="userKey">
        <see cref="T:System.Security.RightsManagement.UseLicense" />의 사용자입니다.</param>
      <param name="useLicense">패키지에 저장하여 포함할 사용 라이선스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="userKey" /> 또는 <paramref name="useLicense" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.IO.FileFormatException">이 클래스의 현재 버전으로는 이 패키지에 있는 권한 관리 정보를 읽을 수 없는 경우</exception>
    </member>
    <member name="P:System.IO.Packaging.RightsManagementInformation.CryptoProvider">
      <summary>패키지의 암호화된 권한 관리 데이터 스트림에 액세스하기 위한 <see cref="T:System.Security.RightsManagement.CryptoProvider" />를 가져오거나 설정합니다.</summary>
      <returns>권한 관리 정보에 액세스하기 위한 <see cref="T:System.Security.RightsManagement.CryptoProvider" />입니다.</returns>
    </member>
    <member name="T:System.IO.Packaging.SignatureVerificationEventArgs">
      <summary>
        <see cref="T:System.IO.Packaging.InvalidSignatureEventHandler" />에 제공되는 이벤트 인수를 지정합니다.</summary>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.Signature">
      <summary>확인할 디지털 서명을 가져옵니다.</summary>
      <returns>확인할 디지털 서명입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.VerifyResult">
      <summary>서명 확인 오류를 가져옵니다.</summary>
      <returns>서명 확인 오류입니다.</returns>
    </member>
    <member name="T:System.IO.Packaging.StorageInfo">
      <summary>
        <see cref="T:System.IO.Packaging.Package" />에서 데이터 저장소를 조작하는 데 필요한 액세스 권한과 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String)">
      <summary>지정된 이름으로 새 스트림을 만듭니다.</summary>
      <param name="name">새 스트림의 이름입니다.</param>
      <returns>지정된 <paramref name="name" />의 새 스트림입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String,System.IO.Packaging.CompressionOption,System.IO.Packaging.EncryptionOption)">
      <summary>지정된 이름, <see cref="T:System.IO.Packaging.CompressionOption" /> 및 <see cref="T:System.IO.Packaging.EncryptionOption" />을 사용하여 새 스트림을 만듭니다.</summary>
      <param name="name">새 스트림의 이름입니다.</param>
      <param name="compressionOption">데이터 스트림의 압축 옵션입니다.</param>
      <param name="encryptionOption">데이터 스트림의 암호화 옵션입니다.</param>
      <returns>지정된 <paramref name="name" />, <paramref name="compressionOption" /> 및 <paramref name="encryptionOption" />을 사용하여 만든 새 스트림입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateSubStorage(System.String)">
      <summary>이 <see cref="T:System.IO.Packaging.StorageInfo" />를 사용하여 새 자식 <see cref="T:System.IO.Packaging.StorageInfo" />를 부모로 만듭니다.</summary>
      <param name="name">새 자식 데이터 저장소의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <returns>새 자식 데이터 저장소입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteStream(System.String)">
      <summary>지정된 이름의 스트림을 삭제합니다.</summary>
      <param name="name">삭제할 스트림의 <see cref="T:System.IO.Packaging.StreamInfo" /> 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteSubStorage(System.String)">
      <summary>지정된 하위 저장소를 삭제합니다.</summary>
      <param name="name">삭제할 하위 저장소의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreamInfo(System.String)">
      <summary>지정된 이름의 <see cref="T:System.IO.Packaging.StreamInfo" /> 인스턴스를 반환합니다.</summary>
      <param name="name">반환할 <see cref="T:System.IO.Packaging.StreamInfo" /> 인스턴스의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <returns>지정된 <paramref name="name" />의 스트림입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreams">
      <summary>이 저장소에 현재 포함되어 있는 <see cref="T:System.IO.Packaging.StreamInfo" /> 인스턴스의 배열을 반환합니다.</summary>
      <returns>각각 이 저장소 내에 정의된 I/O 스트림을 가리키는 <see cref="T:System.IO.Packaging.StreamInfo" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorageInfo(System.String)">
      <summary>지정된 이름을 가진 자식 하위 저장소를 반환합니다.</summary>
      <param name="name">반환할 하위 저장소의 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <returns>지정된 <paramref name="name" />을 가진 자식 하위 저장소입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorages">
      <summary>현재 이 저장소에 포함된 자식 하위 저장소의 배열을 반환합니다.</summary>
      <returns>각각 이 저장소에서 정의된 하위 저장소를 가리키는 <see cref="T:System.IO.Packaging.StorageInfo" /> 개체의 배열입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.StreamExists(System.String)">
      <summary>지정된 스트림이 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="name">확인할 <see cref="T:System.IO.Packaging.StreamInfo" /> 이름입니다.</param>
      <returns>지정된 <paramref name="name" />의 스트림이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.SubStorageExists(System.String)">
      <summary>지정된 자식 하위 저장소가 있는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="name">확인할 자식 <see cref="T:System.IO.Packaging.StorageInfo" /> 이름입니다.</param>
      <returns>지정된 <paramref name="name" />을 가진 자식 하위 저장소가 있으면 <see langword="true" />이고, 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.StorageInfo.Name">
      <summary>저장소의 이름을 가져옵니다.</summary>
      <returns>이 저장소의 이름입니다.</returns>
    </member>
    <member name="T:System.IO.Packaging.StreamInfo">
      <summary>
        <see cref="T:System.IO.Packaging.Package" /> 내에서 I/O 스트림을 조작하는 데 필요한 액세스 권한과 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream">
      <summary>기본 <see cref="T:System.IO.FileMode" /> 및 <see cref="T:System.IO.FileAccess" />에 열려 있는 스트림을 반환합니다.</summary>
      <returns>기본 <see cref="T:System.IO.Packaging.Package" /> 루트 <see cref="T:System.IO.FileMode" /> 및 <see cref="T:System.IO.FileAccess" />에 열려 있는 I/O 스트림입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode)">
      <summary>지정된 <see cref="T:System.IO.FileMode" />에 열려 있는 I/O 스트림을 반환합니다.</summary>
      <param name="mode">스트림을 여는 데 사용되는 파일 모드입니다.</param>
      <returns>지정된 파일 <paramref name="mode" />로 열려 있는 스트림입니다.</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary>지정된 <see cref="T:System.IO.FileMode" />를 사용하여 지정된 <see cref="T:System.IO.FileAccess" />로 열려 있는 I/O 스트림을 반환합니다.</summary>
      <param name="mode">스트림을 여는 데 사용되는 파일 모드입니다.</param>
      <param name="access">스트림에 대한 읽기 또는 쓰기 작업에 사용되는 파일 액세스 모드입니다.</param>
      <returns>지정된 <see cref="T:System.IO.FileMode" />를 사용하여 지정된 <see cref="T:System.IO.FileAccess" />로 열려 있는 I/O 스트림입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.CompressionOption">
      <summary>스트림에 대한 <see cref="T:System.IO.Packaging.CompressionOption" /> 설정을 가져옵니다.</summary>
      <returns>패키지 스트림에 대한 압축 옵션 설정입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.EncryptionOption">
      <summary>스트림에 대한 <see cref="T:System.IO.Packaging.EncryptionOption" /> 설정을 가져옵니다.</summary>
      <returns>패키지 스트림에 대한 암호화 옵션 설정입니다.</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.Name">
      <summary>스트림의 이름을 가져옵니다.</summary>
      <returns>이 스트림의 이름입니다.</returns>
    </member>
    <member name="T:System.IO.Packaging.VerifyResult">
      <summary>인증서 또는 서명 확인의 결과를 지정합니다.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.CertificateRequired">
      <summary>X.509 인증서를 사용하여 서명을 확인할 수 없습니다.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidCertificate">
      <summary>X.509 인증서가 잘못되었습니다.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidSignature">
      <summary>서명이 잘못되었습니다.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.NotSigned">
      <summary>지정된 패키지 또는 파트에 서명이 없습니다.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.ReferenceNotFound">
      <summary>서명에 대한 참조 관계를 찾을 수 없습니다.</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.Success">
      <summary>확인이 완료되었습니다.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.AuthenticationType">
      <summary>권한 관리 인증 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Internal">
      <summary>요청하는 사용자에 대한 인증을 암시합니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Passport">
      <summary>Windows Live ID 인증입니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Windows">
      <summary>회사 도메인 환경의 Windows 인증입니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.WindowsPassport">
      <summary>Windows 인증 또는 Windows Live ID 인증입니다.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentGrant">
      <summary>권한 관리 문서의 정보에 액세스할 수 있도록 사용자에게 부여된 권한을 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)">
      <summary>지정된 <see cref="T:System.Security.RightsManagement.ContentGrant" />에 지정된 <see cref="T:System.Security.RightsManagement.ContentUser" />를 부여하는 <see cref="T:System.Security.RightsManagement.ContentRight" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="user">액세스 권한이 부여된 사용자입니다.</param>
      <param name="right">부여된 액세스 권한입니다.</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight,System.DateTime,System.DateTime)">
      <summary>지정된 <see cref="T:System.Security.RightsManagement.ContentGrant" /> 기간 동안 지정된 <see cref="T:System.Security.RightsManagement.ContentUser" />에 지정된 <see cref="T:System.Security.RightsManagement.ContentRight" />를 부여하는 <see cref="T:System.DateTime" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="user">액세스 권한이 부여된 사용자입니다.</param>
      <param name="right">부여된 액세스 권한입니다.</param>
      <param name="validFrom">권한이 시작되는 시작 날짜 및 시간입니다.</param>
      <param name="validUntil">권한이 만료되는 끝 날짜 및 시간입니다.</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.Right">
      <summary>부여된 <see cref="T:System.Security.RightsManagement.ContentRight" />를 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Security.RightsManagement.ContentGrant.User" /> 생성자에 지정된 대로 <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" />에 부여된 액세스 권한입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.User">
      <summary>액세스 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />가 부여된 사용자를 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 생성자에 지정된 대로, 액세스 <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" />가 부여된 사용자입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidFrom">
      <summary>부여된 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />가 시작되는 시작 날짜 및 시간을 가져옵니다.</summary>
      <returns>시작 날짜 및 시간을 부여 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 시작 또는 <see cref="T:System.DateTime" />합니다.<see cref="F:System.DateTime.MinValue" /> 없는 경우에 시작 제한이 없습니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidUntil">
      <summary>부여된 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" />가 만료되는 끝 날짜 및 시간을 가져옵니다.</summary>
      <returns>끝 날짜 및 시간을 부여 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 만료 되 면 또는 <see cref="T:System.DateTime" />합니다.<see cref="F:System.DateTime.MaxValue" /> 끝 제한이 없는 경우.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.ContentRight">
      <summary>권한 관리 문서의 내용에 액세스하기 위해 사용자에게 부여할 수 있는 권한을 지정합니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.DocumentEdit">
      <summary>사용자가 보호된 콘텐츠를 포함하는 문서를 편집할 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Edit">
      <summary>사용자가 보호된 콘텐츠를 편집 및 암호화할 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Export">
      <summary>사용자가 보호된 콘텐츠를 내보낼 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Extract">
      <summary>사용자가 보호된 콘텐츠를 추출(복사 및 붙여넣기)할 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Forward">
      <summary>사용자가 보호된 콘텐츠를 다른 사용자에게 전달할 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ObjectModel">
      <summary>사용자가 보호된 콘텐츠에 대한 액세스를 프로그래밍 방식으로 제어할 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Owner">
      <summary>사용자가 콘텐츠 소유자입니다.  소유자는 보호된 콘텐츠를 편집 및 암호화하고 서명된 <see cref="T:System.Security.RightsManagement.PublishLicense" />의 암호를 해독할 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Print">
      <summary>사용자가 보호된 콘텐츠를 인쇄할 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Reply">
      <summary>사용자가 보호된 콘텐츠의 보낸 사람에게 회신할 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ReplyAll">
      <summary>사용자가 보호된 콘텐츠의 받는 사람에게 “모두 회신”할 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Sign">
      <summary>사용자가 보호된 콘텐츠에 디지털 서명할 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.View">
      <summary>사용자가 보호된 콘텐츠를 볼 수 있습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ViewRightsData">
      <summary>사용자가 서명된 <see cref="T:System.Security.RightsManagement.PublishLicense" />의 암호를 해독하고 지정된 권한을 볼 수 있습니다.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentUser">
      <summary>권한 관리 콘텐츠에 대한 액세스를 부여하기 위한 사용자 또는 사용자 그룹을 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)">
      <summary>
        <see cref="T:System.Security.RightsManagement.ContentUser" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">사용자 또는 그룹 이름입니다.</param>
      <param name="authenticationType">인증 방법입니다.</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.Equals(System.Object)">
      <summary>이 <see cref="T:System.Security.RightsManagement.ContentUser" />가 지정된 다른 인스턴스와 동일한지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="obj">같은지 비교할 사용자 인스턴스입니다.</param>
      <returns>이 사용자와 지정된 사용자의 <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> 및 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />이 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.GetHashCode">
      <summary>사용자 <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> 및 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />에 따라 계산된 해시 코드를 반환합니다.</summary>
      <returns>사용자 <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> 및 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" />에 따라 계산된 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.IsAuthenticated">
      <summary>사용자가 현재 인증되었는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>사용자가 현재 인증되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  인증되기 전에는 기본값이 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AnyoneUser">
      <summary>"Anyone" <see cref="T:System.Security.RightsManagement.ContentUser" /> 가상 사용자의 인스턴스를 가져옵니다.</summary>
      <returns>"Anyone" <see cref="T:System.Security.RightsManagement.ContentUser" /> 가상 사용자의 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AuthenticationType">
      <summary>
        <see cref="T:System.Security.RightsManagement.AuthenticationType" /> 생성자에 지정된 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Security.RightsManagement.AuthenticationType" /> 생성자에 지정된 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.Name">
      <summary>
        <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> 생성자에 지정된 사용자 또는 그룹 이름을 가져옵니다.</summary>
      <returns>
        <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> 생성자에 지정된 사용자 또는 그룹 이름입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.OwnerUser">
      <summary>"Owner" <see cref="T:System.Security.RightsManagement.ContentUser" /> 가상 사용자의 인스턴스를 가져옵니다.</summary>
      <returns>"Owner" <see cref="T:System.Security.RightsManagement.ContentUser" /> 가상 사용자의 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.CryptoProvider">
      <summary>보호된 콘텐츠를 암호화 및 해독하기 위한 디지털 권한 관리 서비스를 제공합니다.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])">
      <summary>암호화 텍스트를 일반 텍스트로 해독합니다.</summary>
      <param name="cryptoText">해독할 암호화 텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cipherText" />가 null입니다.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">암호 해독 권한이 부여되지 않은 경우</exception>
      <returns>
        <paramref name="cryptoText" />를 해독한 일반 텍스트입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose">
      <summary>
        <see cref="T:System.Security.RightsManagement.CryptoProvider" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.RightsManagement.CryptoProvider" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])">
      <summary>일반 텍스트를 암호화 텍스트로 암호화합니다.</summary>
      <param name="clearText">암호화할 일반 텍스트 콘텐츠입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="clearText" />가 null입니다.</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">암호화가 허용되지 않는 경우</exception>
      <returns>지정된 <paramref name="clearText" />의 암호화된 암호화 텍스트입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Finalize">
      <summary>가비지 컬렉션에 의해 인스턴스가 회수되기 전에 리소스를 해제하고 내부 정리를 수행합니다.</summary>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BlockSize">
      <summary>암호화 블록 크기를 바이트 단위로 가져옵니다.</summary>
      <returns>암호화 블록 크기(바이트 단위)입니다.  기본 블록 크기에 대 한 표준 AES (고급 암호화)는 8입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BoundGrants">
      <summary>확인 과정을 거쳐 사용자에게 부여된 권한을 나열하는 컬렉션을 가져옵니다.</summary>
      <returns>확인 과정을 거쳐 사용자에게 부여된 권한을 열거하는 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt">
      <summary>사용자에게 암호 해독 권한이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 경우는 <see cref="T:System.Security.RightsManagement.UseLicense" /> 암호를 해독할; 사용자 권한 부여이 고, 그렇지 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt">
      <summary>사용자에게 암호화 권한이 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 경우는 <see cref="T:System.Security.RightsManagement.UseLicense" /> 암호화;에 사용자 권한을 부여이 고, 그렇지 <see langword="false" />합니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks">
      <summary>
        <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> 및 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />에 블록 크기의 길이가 서로 다른 버퍼를 사용할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 버퍼에 전달 하는 경우 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> 전달 된 버퍼의 길이가 다를 수 있습니다 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" />이 고, 그렇지 않으면 <see langword="false" /> 버퍼에 전달 하는 경우 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> 및 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> 정확히 동일한 길이 여야 합니다.  기본값은 aes <see langword="true" />합니다.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.LocalizedNameDescriptionPair">
      <summary>"이름" 및 "설명" 문자열의 변경이 불가능한(읽기 전용) 쌍을 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">로캘 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 속성의 값입니다.</param>
      <param name="description">로캘 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 속성의 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 매개 변수 또는 <paramref name="description" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.Equals(System.Object)">
      <summary>특정 개체의 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 및 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 속성이 이 <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />와 일치하는지 여부를 나타냅니다.</summary>
      <param name="obj">
        <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 및 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 속성을 비교할 개체입니다.</param>
      <returns>특정 개체의 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 및 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 속성이 이 인스턴스와 일치하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.GetHashCode">
      <summary>
        <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 및 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 속성을 기반으로 하여 계산된 해시 코드를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" />의 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 및 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 속성을 기반으로 하여 계산된 해시 코드입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description">
      <summary>로캘 설명을 가져옵니다.</summary>
      <returns>로캘 설명입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name">
      <summary>로캘 이름을 가져옵니다.</summary>
      <returns>로캘 이름입니다.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.PublishLicense">
      <summary>서명된 권한 관리 게시 라이선스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.#ctor(System.String)">
      <summary>serialize 및 서명된 해당 <see cref="T:System.Security.RightsManagement.PublishLicense" />에서 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="signedPublishLicense">서명되고 serialize된 게시 라이선스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="signedPublishLicense" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">라이선스가 잘못된 경우</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)">
      <summary>지정된 <see cref="T:System.Security.RightsManagement.UseLicense" />에 있는 사용자 또는 사용자 그룹에 대한 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />를 얻으려고 합니다.</summary>
      <param name="secureEnvironment">라이선스 활성화 및 바인딩을 위한 보안 환경입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">인증이 실패한 경우.</exception>
      <returns>지정된 <paramref name="secureEnvironment" />에 있는 사용자 또는 사용자 그룹에 대한 <see cref="T:System.Security.RightsManagement.UseLicense" />입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)">
      <summary>지정된 <see cref="T:System.Security.RightsManagement.UseLicense" />에 있는 사용자 또는 사용자 그룹에 대한 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />를 얻으려고 합니다.</summary>
      <param name="secureEnvironment">라이선스 활성화 및 바인딩을 위한 보안 환경입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">인증이 실패한 경우.</exception>
      <returns>지정된 <paramref name="secureEnvironment" />에 있는 사용자 또는 사용자 그룹에 대한 <see cref="T:System.Security.RightsManagement.UseLicense" />입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)">
      <summary>서명된 이 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />에 대한 해독된 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 버전을 반환합니다.</summary>
      <param name="cryptoProvider">라이선스를 해독하는 데 사용할 권한 관리 서비스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="cryptoProvider" />이(가) <see langword="null" />인 경우</exception>
      <returns>이 라이선스에 대한 서명되지 않은, 해독된 버전입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.ToString">
      <summary>이 라이선스를 만드는 데 사용된 직렬화된 XrML 문자열을 반환합니다.</summary>
      <returns>이 라이선스를 만드는 데 사용된 직렬화된 XrML(Extensible Rights Markup Language) 문자열입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ContentId">
      <summary>게시자가 만든 콘텐츠 식별자를 가져옵니다.</summary>
      <returns>게시자가 만든 콘텐츠 식별자입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoName">
      <summary>콘텐츠 작성자 또는 게시자의 연락처 이름을 가져옵니다.</summary>
      <returns>콘텐츠 작성자 또는 게시자의 연락처 이름입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoUri">
      <summary>콘텐츠 작성자 또는 게시자의 연락처 URI를 가져옵니다.</summary>
      <returns>콘텐츠 작성자 또는 게시자의 연락처 URI (uniform resource identifier)입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl">
      <summary>
        <see cref="T:System.Security.RightsManagement.UseLicense" />를 얻는 데 사용할 URI를 가져옵니다.</summary>
      <returns>을 획득 하는 데 사용할 URI <see cref="T:System.Security.RightsManagement.UseLicense" /> 입니다.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementException">
      <summary>권한 관리 작업을 성공적으로 완료할 수 없는 오류 조건을 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor">
      <summary>
        <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 클래스의 새 인스턴스를 초기화하고 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 저장소를 예외에 대한 정보로 설정합니다.</summary>
      <param name="info">직렬화된 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode)">
      <summary>지정된 <see cref="T:System.Security.RightsManagement.RightsManagementException" />를 사용하여 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="failureCode">오류의 실패 코드입니다.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.Exception)">
      <summary>지정된 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 및 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />을 사용하여 <see cref="P:System.Exception.InnerException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="failureCode">오류의 실패 코드입니다.</param>
      <param name="innerException">오류를 발생시킨 예외 인스턴스입니다.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String)">
      <summary>지정된 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 및 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />을 사용하여 <see cref="P:System.Exception.Message" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="failureCode">오류의 실패 코드입니다.</param>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String,System.Exception)">
      <summary>지정된 <see cref="T:System.Security.RightsManagement.RightsManagementException" />, <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> 및 <see cref="P:System.Exception.Message" />을 사용하여 <see cref="P:System.Exception.InnerException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="failureCode">오류의 실패 코드입니다.</param>
      <param name="message">오류를 설명하는 메시지입니다.</param>
      <param name="innerException">오류를 발생시킨 예외 인스턴스입니다.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String)">
      <summary>지정된 메시지를 사용하여 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String,System.Exception)">
      <summary>지정된 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 및 <see cref="P:System.Exception.Message" />을 사용하여 <see cref="P:System.Exception.InnerException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">오류를 설명하는 메시지입니다.</param>
      <param name="innerException">이 예외를 발생시킨 예외 인스턴스입니다.</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
        <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 저장소를 매개 변수 이름 및 예외에 대한 정보로 설정합니다.</summary>
      <param name="info">직렬화된 데이터를 보유하는 개체입니다.</param>
      <param name="context">원본 또는 대상에 대한 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="info" /> 매개 변수가 <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Security.RightsManagement.RightsManagementException.FailureCode">
      <summary>오류의 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />를 가져옵니다.</summary>
      <returns>오류의 실패 코드입니다.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementFailureCode">
      <summary>권한 관리 작업을 수행할 때 발생할 수 있는 오류 상태를 지정합니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Aborted">
      <summary>비동기 작업이 취소되었거나 복구할 수 없는 오류가 발생했습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ActivationFailed">
      <summary>라이선스 활성화가 실패했습니다. 권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AdEntryNotFound">
      <summary>현재 사용자가 Windows 인증에서 인증을 받기 위해 포함되어야 하는 AD(Active Directory)에 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AlreadyInProgress">
      <summary>요청된 작업이 이미 진행 중입니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AuthenticationFailed">
      <summary>인터넷 요청에 의해 가능한 인증 오류(HTTP 오류 401)가 반환되었습니다. 또는 자동 사용자 활성화 시도 시 현재 사용자에게 유효한 도메인 자격 증명이 없습니다. 또는 자동 사용자 활성화 시 인증 서버가 로컬 인트라넷이나 신뢰할 수 있는 사이트 영역에 있지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BadGetInfoQuery">
      <summary>잘못된 인수가 전달되었습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessPrincipalNotEnabling">
      <summary>액세스 조건이 바인딩에 전달되는 활성화하는 보안 주체와 일치하지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessUnsatisfied">
      <summary>현재 사용자가 EUL(최종 사용 라이선스)에 정의된 조건을 충족하지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindContentNotInEndUseLicense">
      <summary>지정된 리소스가 라이선스의 WORK 노드에 들어 있지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIndicatedPrincipalMissing">
      <summary>활성화하는 보안 주체가 EUL(최종 사용 라이선스)의 발급된 보안 주체와 일치하지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIntervalTimeViolated">
      <summary>보호된 콘텐츠에 대해 정의된 기간이 만료되었습니다. 더 이상 액세스할 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindMachineNotFoundInGroupIdentity">
      <summary>현재 컴퓨터가 권한 관리 그룹 ID 내에 정의되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoApplicableRevocationList">
      <summary>현재 사용자가 보호된 콘텐츠에 액세스할 수 있는 권한이 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoSatisfiedRightsGroup">
      <summary>지정된 권한 그룹이 EUL(최종 사용 라이선스)에 포함되어 있지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindPolicyViolation">
      <summary>현재 사용자가 보호된 콘텐츠에 액세스할 수 있는 권한이 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevocationListStale">
      <summary>이 라이선스를 사용하려면 새 해지 목록을 획득해야 합니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedIssuer">
      <summary>현재 사용자가 보호된 콘텐츠에 액세스할 수 있는 권한이 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedLicense">
      <summary>현재 사용자가 보호된 콘텐츠에 액세스할 수 있는 권한이 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedModule">
      <summary>권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedPrincipal">
      <summary>현재 사용자가 보호된 콘텐츠에 액세스할 수 있는 권한이 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedResource">
      <summary>현재 사용자가 보호된 콘텐츠에 액세스할 수 있는 권한이 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindSpecifiedWorkMissing">
      <summary>EUL(최종 사용 라이선스)에 WORK 노드가 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindValidityTimeViolated">
      <summary>보호된 콘텐츠에 대해 정의된 기간이 만료되었습니다. 더 이상 액세스할 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BrokenCertChain">
      <summary>권한 관리 인증서 체인이 끊어졌습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ClockRollbackDetected">
      <summary>클록 롤백이 검색되었습니다. 보호된 콘텐츠에 액세스할 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.CryptoOperationUnsupported">
      <summary>요청된 암호화 작업이 지원되지 않습니다. 예를 들어 암호 해독을 위해 RMS 암호화 개체를 전달하는 작업이 지원되지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.DebuggerDetected">
      <summary>디버거가 발견되어 권한이 제한된 콘텐츠를 열거나 게시할 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EmailNotVerified">
      <summary>사용자의 전자 메일 주소를 확인할 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnablingPrincipalFailure">
      <summary>지정된 보안 주체를 사용하도록 설정할 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EncryptionNotPermitted">
      <summary>암호화가 허용되지 않는 경우</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentCannotLoad">
      <summary>
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" />를 로드할 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentNotLoaded">
      <summary>
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" />를 로드할 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ExpiredOfficialIssuanceLicenseTemplate">
      <summary>발급 라이선스 템플릿에 정의된 인증된 기간이 만료되었습니다. 더 이상 액세스할 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GlobalOptionAlreadySet">
      <summary>지정된 옵션이 이미 설정되었습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GroupIdentityNotSet">
      <summary>클라이언트 세션에 대해 사용자 이름이 지정되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidCorrupted">
      <summary>컴퓨터 인증 시도에 사용된 HID(하드웨어 ID) 형식이 잘못되었습니다. 권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidInvalid">
      <summary>컴퓨터 인증 시도에 사용된 HID(하드웨어 ID)가 올바르지 않습니다. 권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IdMismatch">
      <summary>라이선스의 콘텐츠 ID가 라이선스 스토리지 세션의 콘텐츠 ID와 일치하지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IncompatibleObjects">
      <summary>전달된 개체 형식이 이 작업과 호환되지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotInLicense">
      <summary>바인딩된 라이선스를 만들 때 최종 사용 라이선스가 아닌 발급 라이선스가 지정되었습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotPresent">
      <summary>일부 정보가 누락되었습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InstallationFailed">
      <summary>설치 작업이 실패했습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidAlgorithmType">
      <summary>지정한 알고리즘 형식이 잘못되었습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidClientLicensorCertificate">
      <summary>권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEmail">
      <summary>RMS 서버 전자 메일 주소 확인이 실패했습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEncodingType">
      <summary>지정한 인코딩 형식이 잘못되었습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidHandle">
      <summary>환경 또는 활성화하는 보안 주체 핸들이 잘못되었습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidIssuanceLicenseTemplate">
      <summary>Rights Management Services 템플릿에 하나 이상의 오류가 포함되어 있습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidKeyLength">
      <summary>키/값 쌍에 지정된 키 길이가 올바르지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicense">
      <summary>인증서 중 하나의 라이선스 구조가 잘못되었습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicenseSignature">
      <summary>권한 관리로 서명된 디지털 인증서가 유효한지 확인할 수 없습니다. (서명된 인증서가 손상되었을 수 있습니다.)</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxPath">
      <summary>권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxType">
      <summary>권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidNumericalValue">
      <summary>지정한 숫자 값이 잘못되었습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidRegistryPath">
      <summary>지정된 레지스트리 경로가 잘못되었습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidServerResponse">
      <summary>권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidTimeInfo">
      <summary>지정된 시간 정보가 올바르지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidVersion">
      <summary>권한 관리 버전이 올바르지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.KeyTypeUnsupported">
      <summary>키/값 쌍에 지정된 키 형식이 지원되지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryFail">
      <summary>라이브러리 작업을 수행하지 못했습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryUnsupportedPlugIn">
      <summary>지정된 라이브러리 플러그 인이 지원되지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseAcquisitionFailed">
      <summary>권한 관리 서버에서 EUL(최종 사용 라이선스)을 획득할 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseBindingToWindowsIdentityFailed">
      <summary>현재 사용자 자격 증명이 라이선스를 획득하는 데 적합하지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ManifestPolicyViolation">
      <summary>작업이 권한 관리 매니페스트 정책을 위반합니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.MetadataNotSet">
      <summary>지정된 메타데이터를 설정할 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsGroupIdentityActivation">
      <summary>사용자가 활성화되지 않았거나, RAC(권한 계정 인증서)가 제출되지 않았으며 라이선스 저장소에서 이 세션과 연결된 라이선스와 일치하는 라이선스를 찾을 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsMachineActivation">
      <summary>사용자가 활성화되려면 먼저 컴퓨터를 활성화해야 합니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoAesCryptoProvider">
      <summary>권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoConnect">
      <summary>권한 관리는 라이선스 서버에 대해 지정된 URI에 연결할 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoDistributionPointUrlFound">
      <summary>보호된 콘텐츠가 손상되었습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoLicense">
      <summary>필요한 라이선스를 사용할 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoMoreData">
      <summary>지정된 인덱스에 라이선스 또는 인증서가 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotAChain">
      <summary>권한 관리 콘텐츠가 손상되었습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotSet">
      <summary>삭제 요청된 항목이 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutdatedModule">
      <summary>권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutOfQuota">
      <summary>라이선스 서버의 최대 EUL(최종 사용 라이선스) 할당량에 도달했습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OwnerLicenseNotFound">
      <summary>문서에 소유자 라이선스가 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.QueryReportsNoResults">
      <summary>요청된 특성의 인스턴스가 존재하지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RecordNotFound">
      <summary>지정된 라이선스를 찾을 수 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RequestDenied">
      <summary>권한 관리 서버에서 현재 사용자의 임시 인증을 허용하지 않습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RevocationInfoNotSet">
      <summary>인증서 또는 라이선스 해지 정보가 설정되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotGranted">
      <summary>현재 사용자가 보호된 콘텐츠에 액세스할 수 있는 권한이 없습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotSet">
      <summary>권한 관리를 사용하여 콘텐츠가 게시되었을 때 요청된 권한이 지정되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerError">
      <summary>권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerNotFound">
      <summary>권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceGone">
      <summary>권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceMoved">
      <summary>권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceNotFound">
      <summary>권한 관리 서비스가 제대로 구성되지 않았습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Success">
      <summary>작업이 성공적으로 완료되었습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyCertificates">
      <summary>인증서 수가 허용되는 최대 수를 초과했습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyLoadedEnvironments">
      <summary>너무 많은 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 인스턴스를 만들었습니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UnexpectedException">
      <summary>지정되지 않은 오류가 발생했습니다.  애플리케이션이 디버그 모드에서 실행되는 경우에도 throw됩니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault">
      <summary>컴퓨터 인증 또는 권한 계정 인증서가 요청되면 수신 <see cref="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault" />는 애플리케이션이 ActServInfo 매개 변수에 <see langword="null" />를 전달해야 함을 나타냅니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ValidityTimeViolation">
      <summary>보호된 콘텐츠에 대해 정의된 기간이 만료되었습니다. 더 이상 액세스할 수 없습니다.</summary>
    </member>
    <member name="T:System.Security.RightsManagement.SecureEnvironment">
      <summary>사용자 활성화, 라이선스 바인딩 및 기타 권한 관리 작업에 대한 보안 클라이언트 세션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)">
      <summary>애플리케이션 권한 매니페스트, <see cref="T:System.Security.RightsManagement.AuthenticationType" /> 및 <see cref="T:System.Security.RightsManagement.UserActivationMode" />를 제공한 보안 클라이언트 세션을 만듭니다.</summary>
      <param name="applicationManifest">애플리케이션 권한 매니페스트입니다.</param>
      <param name="authentication">인증 방법입니다.</param>
      <param name="userActivationMode">사용자 권한 계정 인증서의 형식입니다.</param>
      <returns>활성화, 라이선스 바인딩 및 기타 권한 관리 작업에 대한 보안 클라이언트 세션입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)">
      <summary>지정된 권한 매니페스트를 사용하여 지정된 사용자에 대한 보안 클라이언트 세션을 만듭니다.</summary>
      <param name="applicationManifest">애플리케이션 권한 매니페스트입니다.</param>
      <param name="user">권한 관리 콘텐츠에 대한 액세스를 부여하기 위한 사용자 또는 사용자 그룹입니다.</param>
      <returns>활성화, 라이선스 바인딩 및 기타 권한 관리 작업에 대한 보안 클라이언트 세션입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose">
      <summary>
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" />에서 사용하는 모든 리소스를 해제합니다.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)">
      <summary>
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" />에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제할 수 있습니다.</summary>
      <param name="disposing">관리되는 리소스와 관리되지 않는 리소스를 모두 해제하려면 <see langword="true" />로 설정하고, 관리되지 않는 리소스만 해제하려면 <see langword="false" />로 설정합니다.</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers">
      <summary>활성화된 사용자의 목록을 반환합니다.</summary>
      <returns>현재 활성화된 사용자의 목록입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)">
      <summary>지정된 사용자가 권한 관리 콘텐츠에 액세스하기 위해 활성화되었는지 여부를 나타냅니다.</summary>
      <param name="user">권한 관리 콘텐츠에 대한 액세스를 부여하기 위한 사용자 또는 사용자 그룹입니다.</param>
      <returns>지정된 <paramref name="user" />가 권한 관리 콘텐츠에 액세스하기 위해 활성화된 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)">
      <summary>지정된 사용자에 대한 라이선스 정품 인증을 제거합니다.</summary>
      <param name="user">라이선스 정품 인증을 제거할 사용자입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="user" /> 매개 변수가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">지정된 <paramref name="user" />가 Windows 인증 또는 Passport 인증으로 인증되지 않은 경우</exception>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest">
      <summary>
        <see cref="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest" />를 만들 때 지정된 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />를 가져옵니다.</summary>
      <returns>
        <see cref="Overload:System.Security.RightsManagement.SecureEnvironment.Create" />를 만들 때 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 메서드에 지정된 애플리케이션 매니페스트입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.User">
      <summary>
        <see cref="T:System.Security.RightsManagement.SecureEnvironment" />를 만들 때 지정된 사용자 또는 사용자 그룹을 가져옵니다.</summary>
      <returns>
        <see cref="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)" />를 만들 때 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 메서드에 지정된 사용자 또는 사용자 그룹입니다.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UnsignedPublishLicense">
      <summary>서명되지 않은 권한 관리 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 또는 서명되지 않은 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 템플릿을 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor">
      <summary>
        <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor(System.String)">
      <summary>지정된 XrML 게시 라이선스 템플릿에서 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="publishLicenseTemplate">이 라이선스를 만드는 데 사용할 XrML(Extensible Rights Markup Language) 게시 라이선스 템플릿입니다.</param>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.Sign(System.Security.RightsManagement.SecureEnvironment,System.Security.RightsManagement.UseLicense@)">
      <summary>서명된 <see cref="T:System.Security.RightsManagement.PublishLicense" />를 만들고 문서 작성자에 대한 <see cref="T:System.Security.RightsManagement.UseLicense" />를 반환합니다.</summary>
      <param name="secureEnvironment">라이선스 활성화 및 바인딩을 위한 보안 환경입니다.</param>
      <param name="authorUseLicense">문서 작성자에 대해 반환된 <see cref="T:System.Security.RightsManagement.UseLicense" />입니다.</param>
      <returns>이 <see cref="T:System.Security.RightsManagement.PublishLicense" />에 서명하여 만들어진 서명된 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.ToString">
      <summary>
        <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />의 XrML에서 만든 직렬화된 템플릿을 반환합니다.</summary>
      <returns>
        <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />의 XrML에서 만든 직렬화된 템플릿입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ContentId">
      <summary>게시자가 만든 콘텐츠 식별자를 가져오거나 설정합니다.</summary>
      <returns>게시자가 만든 권한 관리 콘텐츠 식별자입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Grants">
      <summary>지정된 사용자 권한 컬렉션을 가져옵니다.</summary>
      <returns>이 라이선스에 제공된, 지정된 사용자 권한 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.LocalizedNameDescriptionDictionary">
      <summary>이름/설명 쌍으로 된 컬렉션을 가져옵니다.</summary>
      <returns>이름/설명 쌍으로 된 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Owner">
      <summary>콘텐츠 소유자를 가져오거나 설정합니다.</summary>
      <returns>게시된 콘텐츠의 소유자입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoName">
      <summary>콘텐츠 작성자 또는 게시자의 연락처 이름을 가져오거나 설정합니다.</summary>
      <returns>콘텐츠 작성자 또는 게시자의 연락처 이름입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoUri">
      <summary>콘텐츠 작성자 또는 게시자의 연락처 URI를 가져오거나 설정합니다.</summary>
      <returns>콘텐츠 작성자 또는 게시자의 연락처 URI (uniform resource identifier)입니다.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UseLicense">
      <summary>보호된 권한 관리 콘텐츠에 액세스할 수 있게 하는 라이선스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)">
      <summary>
        <see cref="T:System.Security.RightsManagement.UseLicense" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="useLicense">serialize된 XrML(Extensible Rights Markup Language) 형식의 사용 라이선스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="useLicense" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException">
        <paramref name="useLicense" />이 잘못되었습니다.</exception>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)">
      <summary>지정된 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />에 라이선스를 바인딩합니다.</summary>
      <param name="secureEnvironment">라이선스를 바인딩할 환경입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="secureEnvironment" />이(가) <see langword="null" />인 경우</exception>
      <returns>라이선스 바인딩에 성공했으면 <see cref="T:System.Security.RightsManagement.CryptoProvider" />이고, 실패했으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Equals(System.Object)">
      <summary>이 라이선스가 지정된 다른 라이선스와 같은지 여부를 나타냅니다.</summary>
      <param name="x">비교할 라이선스입니다.</param>
      <returns>두 라이선스가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.GetHashCode">
      <summary>이 라이선스와 연결된 해시 코드를 반환합니다.</summary>
      <returns>이 라이선스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.ToString">
      <summary>이 라이선스를 만드는 데 사용된 serialize된 XrML 문자열을 가져옵니다.</summary>
      <returns>최초에 <see cref="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)" /> 생성자에 전달된 serialize된 XrML(Extensible Rights Markup Language) 문자열입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ApplicationData">
      <summary>게시하는 애플리케이션에서 사용하는 애플리케이션으로 전달한 키/값 쌍이 들어 있는 애플리케이션 데이터 사전을 가져옵니다.</summary>
      <returns>게시하는 애플리케이션에서 사용하는 애플리케이션으로 전달한 키/값 쌍이 들어 있는 애플리케이션 데이터 사전입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ContentId">
      <summary>게시자가 만든 콘텐츠 식별자를 가져옵니다.</summary>
      <returns>게시자가 만든 콘텐츠 식별자입니다.</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.Owner">
      <summary>라이선스 소유자를 가져옵니다.</summary>
      <returns>라이선스 소유자입니다.</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UserActivationMode">
      <summary>권한 관리 활성화를 요청할 사용자 권한 계정 인증서의 형식을 지정합니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Permanent">
      <summary>영구 권한 계정 인증서입니다.</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Temporary">
      <summary>임시 권한 계정 인증서입니다.</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableAttribute">
      <summary>연결된 속성의 사용 범위를 보고하는 .NET Framework 요소에 대한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableAttribute.#ctor">
      <summary>
        <see cref="T:System.Windows.AttachedPropertyBrowsableAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute">
      <summary>연결된 속성이 지정된 형식에서 파생된 요소만 검색할 수 있도록 지정합니다.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.#ctor(System.Type)">
      <summary>제공된 <paramref name="targetType" />을 사용하여 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="targetType">이 .NET Framework 특성이 적용되는 연결된 속성의 사용 범위를 지정하는 의도된 형식입니다.</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.Equals(System.Object)">
      <summary>현재 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework 특성 이 지정 된 개체와 같은지 여부를 확인 합니다.</summary>
      <param name="obj">현재 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />와 비교할 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />입니다.</param>
      <returns>지정된 <see langword="true" />가 현재<see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />와 같으면 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.GetHashCode">
      <summary>이 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework 특성의 해시 코드를 반환합니다.</summary>
      <returns>부호 없는 32비트 정수 값입니다.</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TargetType">
      <summary>연결된 속성의 사용 범위를 지정하는 기본 형식을 가져옵니다. 해당 사용 범위에 이 .NET Framework 특성이 적용됩니다.</summary>
      <returns>요청된 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TypeId">
      <summary>이의 고유 형식 식별자를 가져옵니다 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework 특성 .</summary>
      <returns>
        <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />의 고유 식별자인 개체입니다.</returns>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute">
      <summary>다른 특정 .NET Framework 특성도 해당 클래스 정의에 적용한 요소에서만 연결된 속성을 검색할 수 있도록 지정합니다.</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="attributeType">
        <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />가 적용된 클래스에서 연결된 속성을 탐색하기 위해 해당 클래스에 함께 적용되어야 하는 .NET Framework 특성의 <see cref="T:System.Type" />입니다.</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.Equals(System.Object)">
      <summary>현재 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework 특성 이 지정 된 개체와 같은지 여부를 확인 합니다.</summary>
      <param name="obj">현재 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />와 비교할 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />입니다.</param>
      <returns>지정된 <see langword="true" />가 현재<see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />와 같으면 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.GetHashCode">
      <summary>이 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework 특성의 해시 코드를 반환합니다.</summary>
      <returns>부호 없는 32비트 정수 값입니다.</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.AttributeType">
      <summary>클래스에 함께 적용해야 하는 .NET Framework 특성의 형식을 가져옵니다.</summary>
      <returns>.NET Framework 특성 형식입니다.</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences">
      <summary>애플리케이션이 WindowsBase 어셈블리에 있는 새 WPF 기능을 기준으로 동작하는 방식을 지정하는 속성을 포함합니다.</summary>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.FlowDispatcherSynchronizationContextPriority">
      <summary>
        <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" />에 대한 정보를 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />에 저장할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" />에 대한 정보가 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />에 저장되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailure">
      <summary>디스패처에서 처리를 요청하면 발생하는 오류에 반응하는 방식을 정의합니다.</summary>
      <returns>디스패처에서 오류에 반응하는 방식을 정의하는 값입니다.</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.InlineDispatcherSynchronizationContextSend">
      <summary>
        <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> 메서드가 대리자를 디스패처 큐에 가져오는지 또는 대리자가 직접 호출되는지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> 메서드가 대리자를 디스패처 큐에 가져오거나 대리자가 직접 호출되는 경우  <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.ReuseDispatcherSynchronizationContextInstance">
      <summary>단일 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />가 복수 디스패처 작업에 사용되는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>여러 디스패처 작업에서 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />가 한 번 사용되면 true이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions">
      <summary>디스패처가 요청을 처리하는 동안 발생하는 오류에 반응하는 방법을 설명하는 값 집합을 제공합니다.</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Continue">
      <summary>실패 후 계속합니다.  
  
 기본값입니다. .NET Framework 4.7.1 이전의 Windows Presentation Foundation 디스패처 동작을 정의합니다. 이 옵션을 선택하는 경우 디스패처에서 응답하지 않을 수 있습니다.</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Reset">
      <summary>다음번에 필요 시 디스패처의 상태를 다시 설정하여 다른 요청을 시도하세요.  
  
 이 옵션은 때로는 무응답을 “복구”하지만, 중요할 수 있는 일반적인 처리 시기를 적용할 수 없습니다. 이 옵션을 선택하면 예기치 않은 동작이 발생할 수 있습니다.</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Throw">
      <summary>예외를 throw합니다.  
  
 이 옵션은 애플리케이션 개발자에게 즉시 문제를 제기합니다.</summary>
    </member>
    <member name="T:System.Windows.CoerceValueCallback">
      <summary>종속성 속성 값이 다시 계산되거나 강제 형 변환이 특별히 요청될 때마다 호출되는 메서드에 대한 템플릿을 제공합니다.</summary>
      <param name="d">속성이 있는 개체입니다. 이 값은 콜백이 호출될 때 속성 시스템에서 전달합니다.</param>
      <param name="baseValue">속성의 새 값입니다(강제 형 변환을 시도하기 전).</param>
      <returns>적절한 형식을 사용하여 강제 변환된 값입니다.</returns>
    </member>
    <member name="T:System.Windows.Converters.Int32RectValueSerializer">
      <summary>
        <see cref="T:System.String" /> 인스턴스를 <see cref="T:System.Windows.Int32Rect" /> 인스턴스로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Converters.Int32RectValueSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 <see cref="T:System.String" />을 <see cref="T:System.Windows.Int32Rect" />의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 확인할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 <see cref="T:System.Windows.Int32Rect" />를 <see cref="T:System.String" />으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 평가할 개체입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>
        <paramref name="value" />를 <see cref="T:System.String" />으로 변환할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" />을 <see cref="T:System.Windows.Int32Rect" />으로 변환합니다.</summary>
      <param name="value">변환할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <paramref name="value" />을 기반으로 하는 <see cref="T:System.Windows.Int32Rect" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Int32Rect" />의 인스턴스를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">문자열로 변환할 개체입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <see cref="T:System.Windows.Int32Rect" />의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Windows.Converters.PointValueSerializer">
      <summary>
        <see cref="T:System.String" /> 인스턴스를 <see cref="T:System.Windows.Point" /> 인스턴스로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Converters.PointValueSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 <see cref="T:System.String" />을 <see cref="T:System.Windows.Point" />의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 확인할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 <see cref="T:System.Windows.Point" />를 <see cref="T:System.String" />으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 평가할 개체입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>
        <paramref name="value" />를 <see cref="T:System.String" />으로 변환할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" />을 <see cref="T:System.Windows.Point" />으로 변환합니다.</summary>
      <param name="value">변환할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <paramref name="value" />을 기반으로 하는 <see cref="T:System.Windows.Point" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Point" />의 인스턴스를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">문자열로 변환할 개체입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <see cref="T:System.Windows.Point" />의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Windows.Converters.RectValueSerializer">
      <summary>
        <see cref="T:System.String" /> 인스턴스를 <see cref="T:System.Windows.Rect" /> 인스턴스로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Converters.RectValueSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 <see cref="T:System.String" />을 <see cref="T:System.Windows.Rect" />의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 확인할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 <see cref="T:System.Windows.Rect" />를 <see cref="T:System.String" />으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 평가할 개체입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>
        <paramref name="value" />를 <see cref="T:System.String" />으로 변환할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" />을 <see cref="T:System.Windows.Rect" />으로 변환합니다.</summary>
      <param name="value">변환할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <paramref name="value" />을 기반으로 하는 <see cref="T:System.Windows.Rect" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Rect" />의 인스턴스를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">문자열로 변환할 개체입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <see cref="T:System.Windows.Rect" />의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Windows.Converters.SizeValueSerializer">
      <summary>
        <see cref="T:System.String" /> 인스턴스를 <see cref="T:System.Windows.Size" /> 인스턴스로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Converters.SizeValueSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 <see cref="T:System.String" />을 <see cref="T:System.Windows.Size" />의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 확인할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 <see cref="T:System.Windows.Size" />를 <see cref="T:System.String" />으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 평가할 개체입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>
        <paramref name="value" />를 <see cref="T:System.String" />으로 변환할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" />을 <see cref="T:System.Windows.Size" />으로 변환합니다.</summary>
      <param name="value">변환할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <paramref name="value" />을 기반으로 하는 <see cref="T:System.Windows.Size" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Size" />의 인스턴스를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">문자열로 변환할 개체입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <see cref="T:System.Windows.Size" />의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Windows.Converters.VectorValueSerializer">
      <summary>
        <see cref="T:System.String" /> 인스턴스를 <see cref="T:System.Windows.Vector" /> 인스턴스로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Converters.VectorValueSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 <see cref="T:System.String" />을 <see cref="T:System.Windows.Vector" />의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 확인할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 <see cref="T:System.Windows.Vector" />를 <see cref="T:System.String" />으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 평가할 개체입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>
        <paramref name="value" />를 <see cref="T:System.String" />으로 변환할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" />을 <see cref="T:System.Windows.Vector" />으로 변환합니다.</summary>
      <param name="value">변환할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <paramref name="value" />을 기반으로 하는 <see cref="T:System.Windows.Vector" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Vector" />의 인스턴스를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">문자열로 변환할 개체입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <see cref="T:System.Windows.Vector" />의 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Windows.Data.DataSourceProvider">
      <summary>일부 쿼리를 실행하여 바인딩 소스 개체로 사용할 수 있는 단일 개체 또는 개체 목록을 생성하는 팩터리인 <see cref="T:System.Windows.Data.DataSourceProvider" /> 개체에 대한 공통 기본 클래스 및 계약입니다.</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.DataChanged">
      <summary>
        <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> 속성에 새 값을 사용하면 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.PropertyChanged">
      <summary>속성 값이 변경될 때 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary>속성 값이 변경될 때 발생합니다.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.#ctor">
      <summary>
        <see cref="T:System.Windows.Data.DataSourceProvider" /> 클래스의 새 인스턴스를 초기화합니다. 이 생성자는 protected 생성자입니다.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginInit">
      <summary>이 개체의 초기화가 시작되려고 함을 나타냅니다. 짝을 이루는 <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> 메서드가 호출될 때까지 암시적인 <see cref="M:System.Windows.Data.DataSourceProvider.EndInit" />가 발생하지 않습니다.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginQuery">
      <summary>파생 클래스에서 재정의되는 경우 이 기본 클래스에서 <see cref="M:System.Windows.Data.DataSourceProvider.InitialLoad" /> 또는 <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" />가 호출되었을 때 이 메서드를 호출합니다. 새로 고침이 지연되거나 초기 로드가 비활성화된 경우 기본 클래스에서 호출을 지연합니다.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.DeferRefresh">
      <summary>공급자 속성을 변경하고 자동 새로 고침을 지연하는 데 사용할 수 있는 지연 주기를 입력합니다.</summary>
      <returns>호출하는 개체를 삭제하는 데 사용할 수 있는 <see cref="T:System.IDisposable" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.EndInit">
      <summary>이 개체의 초기화가 완료되었음을 나타냅니다. 처리 중인 다른 <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" />가 없으면 <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" />가 발생합니다.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.InitialLoad">
      <summary>기본 데이터 모델에 대한 초기 쿼리를 시작합니다. 결과는 <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> 속성에 반환됩니다.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary>지정된 인수를 사용하여 <see cref="E:System.Windows.Data.DataSourceProvider.PropertyChanged" /> 이벤트를 발생시킵니다.</summary>
      <param name="e">발생하는 이벤트의 인수입니다.</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object)">
      <summary>파생 클래스는 이 메서드를 호출하여 쿼리가 완료되었음을 나타냅니다.</summary>
      <param name="newData">쿼리 결과인 데이터입니다.</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object,System.Exception,System.Windows.Threading.DispatcherOperationCallback,System.Object)">
      <summary>파생 클래스는 이 메서드를 호출하여 쿼리가 완료되었음을 나타냅니다.</summary>
      <param name="newData">쿼리 결과인 데이터입니다.</param>
      <param name="error">쿼리를 실행하는 동안 발생한 오류입니다. 오류가 없는 경우 이 값은 <see langword="null" />입니다.</param>
      <param name="completionWork">추가 속성 설정 등 UI 스레드에서 완성 기능을 실행하는 데 사용되는 선택적 대리자입니다.</param>
      <param name="callbackArguments">
        <paramref name="completionWork" /> 대리자와 함께 매개 변수로 전송할 선택적 인수입니다.</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.Refresh">
      <summary>기본 데이터 모델의 새로 고침 작업을 초기화합니다. 결과는 <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> 속성에 반환됩니다.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary>이 멤버는 WPF(Windows Presentation Foundation) 인프라를 지원하며 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#EndInit">
      <summary>이 멤버는 WPF(Windows Presentation Foundation) 인프라를 지원하며 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Data">
      <summary>기본 데이터 개체를 가져옵니다.</summary>
      <returns>기본 데이터 개체인 <see cref="T:System.Object" /> 형식의 값입니다.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Dispatcher">
      <summary>사용할 UI 스레드에 대한 현재 <see cref="T:System.Windows.Threading.Dispatcher" /> 개체를 가져오거나 설정합니다.</summary>
      <returns>현재 <see cref="T:System.Windows.Threading.Dispatcher" /> 개체는 UI 스레드를 사용 합니다. 이 개체는 기본적으로 인스턴스를 만든 스레드에 연결되는 <see cref="T:System.Windows.Threading.Dispatcher" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Error">
      <summary>마지막 쿼리 작업의 오류를 가져옵니다.</summary>
      <returns>마지막 쿼리 작업의 오류인 <see cref="T:System.Exception" /> 형식의 값입니다. 오류가 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsInitialLoadEnabled">
      <summary>데이터 자동 로드를 방해하거나 지연할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>데이터 자동 로드를 방해하거나 지연하면 <see langword="false" />이고, 그렇지 않으면 <see langword="true" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsRefreshDeferred">
      <summary>사용하고 있는 처리 중인 <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" />가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>사용하고 있는 처리 중인 <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" />가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.DependencyObject">
      <summary>종속성 속성 시스템에 참가하는 개체를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.#ctor">
      <summary>
        <see cref="T:System.Windows.DependencyObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
      <summary>속성의 로컬 값을 지웁니다. 지울 속성이 <see cref="T:System.Windows.DependencyProperty" /> 식별자에서 지정됩니다.</summary>
      <param name="dp">
        <see cref="T:System.Windows.DependencyProperty" /> 개체 참조로 식별되는 지울 종속성 속성입니다.</param>
      <exception cref="T:System.InvalidOperationException">봉인된 <see cref="T:System.Windows.DependencyObject" />에서 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />를 호출하려고 시도했습니다.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
      <summary>읽기 전용 속성의 로컬 값을 지웁니다. 선언할 속성이 <see cref="T:System.Windows.DependencyPropertyKey" />에서 지정됩니다.</summary>
      <param name="key">지울 종속성 속성의 키입니다.</param>
      <exception cref="T:System.InvalidOperationException">봉인된 <see cref="T:System.Windows.DependencyObject" />에서 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />를 호출하려고 시도했습니다.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
      <summary>지정된 종속성 속성의 값을 강제 변환합니다. 호출하는 <see cref="T:System.Windows.DependencyObject" />에 있으므로 이 작업은 종속성 속성의 속성 메타데이터에 지정된 <see cref="T:System.Windows.CoerceValueCallback" /> 함수를 호출하여 수행합니다.</summary>
      <param name="dp">강제 변환할 종속성 속성의 식별자입니다.</param>
      <exception cref="T:System.InvalidOperationException">지정된 <paramref name="dp" /> 또는 해당 값이 잘못되었거나 존재하지 않습니다.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.Equals(System.Object)">
      <summary>제공된 <see cref="T:System.Windows.DependencyObject" />가 현재 <see cref="T:System.Windows.DependencyObject" />에 해당하는지 여부를 확인합니다.</summary>
      <param name="obj">현재 인스턴스와 비교할 <see cref="T:System.Windows.DependencyObject" />입니다.</param>
      <returns>두 인스턴스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetHashCode">
      <summary>이 <see cref="T:System.Windows.DependencyObject" />의 해시 코드를 가져옵니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
      <summary>이 <see cref="T:System.Windows.DependencyObject" />에 대해 로컬로 값을 설정한 종속성 속성을 확인하기 위한 특수 열거자를 만듭니다.</summary>
      <returns>특수 로컬 값 열거자입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
      <summary>이 <see cref="T:System.Windows.DependencyObject" />의 인스턴스에서 종속성 속성의 현재 유효 값을 반환합니다.</summary>
      <param name="dp">값을 검색할 속성의 <see cref="T:System.Windows.DependencyProperty" /> 식별자입니다.</param>
      <exception cref="T:System.InvalidOperationException">지정된 <paramref name="dp" /> 또는 해당 값이 잘못되었거나 지정된 <paramref name="dp" />가 없는 경우</exception>
      <returns>현재 유효 값을 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
      <summary>지정된 종속성 속성의 유효 값을 다시 계산합니다.</summary>
      <param name="dp">무효화할 속성의 <see cref="T:System.Windows.DependencyProperty" /> 식별자입니다.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>이 <see cref="T:System.Windows.DependencyObject" />에서 종속성 속성의 유효 값이 업데이트될 때마다 호출됩니다. 변경된 특정 종속성 속성이 이벤트 데이터에서 보고됩니다.</summary>
      <param name="e">관심 있는 종속성 속성 식별자, 형식에 대한 속성 메타데이터, 기존 값 및 새 값을 포함하는 이벤트 데이터입니다.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
      <summary>종속성 속성의 로컬 값을 반환합니다(있는 경우).</summary>
      <param name="dp">값을 검색할 속성의 <see cref="T:System.Windows.DependencyProperty" /> 식별자입니다.</param>
      <returns>로컬 값을 반환하거나, 로컬 값이 설정되지 않은 경우 sentinel 값 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 를 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
      <summary>해당 값 소스를 변경하지 않고 종속성 속성의 값을 설정합니다.</summary>
      <param name="dp">설정할 종속성 속성의 식별자입니다.</param>
      <param name="value">새 로컬 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">읽기 전용 종속성 속성 또는 봉인된 <see cref="T:System.Windows.DependencyObject" />의 속성을 수정하려고 했습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 가 <paramref name="dp" /> 속성에 대해 등록된 올바른 형식이 아닙니다.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
      <summary>지정된 종속성 속성 식별자를 가진 종속성 속성의 로컬 값을 설정합니다.</summary>
      <param name="dp">설정할 종속성 속성의 식별자입니다.</param>
      <param name="value">새 로컬 값입니다.</param>
      <exception cref="T:System.InvalidOperationException">읽기 전용 종속성 속성 또는 봉인된 <see cref="T:System.Windows.DependencyObject" />의 속성을 수정하려고 했습니다.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> 가 <paramref name="dp" /> 속성에 대해 등록된 올바른 형식이 아닙니다.</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
      <summary>종속성 속성의 <see cref="T:System.Windows.DependencyPropertyKey" /> 식별자에 의해 지정된 읽기 전용 종속성 속성의 로컬 값을 설정합니다.</summary>
      <param name="key">설정할 속성의 <see cref="T:System.Windows.DependencyPropertyKey" /> 식별자입니다.</param>
      <param name="value">새 로컬 값입니다.</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
      <summary>serialization 프로세스에서 지정된 종속성 속성의 값을 직렬화해야 하는지 여부를 나타내는 값을 반환합니다.</summary>
      <param name="dp">직렬화해야 하는 종속성 속성의 식별자입니다.</param>
      <returns>제공되는 종속성 속성 값을 직렬화해야 하면<see langword="true" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyObject.DependencyObjectType">
      <summary>이 인스턴스의 CLR 형식을 래핑하는 <see cref="T:System.Windows.DependencyObjectType" />을 가져옵니다.</summary>
      <returns>이 인스턴스의 CLR 형식을 래핑하는 <see cref="T:System.Windows.DependencyObjectType" />입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyObject.IsSealed">
      <summary>이 인스턴스가 현재 봉인되어 있는지(읽기 전용인지) 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 인스턴스가 봉인되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.DependencyObjectType">
      <summary>모든 <see cref="T:System.Windows.DependencyObject" /> 파생 형식에 대해 내부 형식 캐시를 구현합니다.</summary>
    </member>
    <member name="M:System.Windows.DependencyObjectType.FromSystemType(System.Type)">
      <summary>지정된 시스템 (CLR) 형식을 나타내는 <see cref="T:System.Windows.DependencyObjectType" />을 반환합니다.</summary>
      <param name="systemType">변환할 시스템 (CLR) 형식입니다.</param>
      <returns>시스템 (CLR) 형식을 나타내는 <see cref="T:System.Windows.DependencyObjectType" />입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.GetHashCode">
      <summary>이 <see cref="T:System.Windows.DependencyObjectType" />의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)">
      <summary>지정된 개체가 현재 <see cref="T:System.Windows.DependencyObjectType" />의 인스턴스인지를 확인합니다.</summary>
      <param name="dependencyObject">현재 <see cref="T:System.Windows.DependencyObjectType" />와 비교할 개체입니다.</param>
      <returns>현재 <see cref="T:System.Windows.DependencyObjectType" />이 나타내는 클래스가 <paramref name="d" />로 전달된 <see cref="T:System.Windows.DependencyObject" />의 상속 계층 구조에 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />.</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)">
      <summary>현재 <see cref="T:System.Windows.DependencyObjectType" />이 지정된 <see cref="T:System.Windows.DependencyObjectType" />에서 파생되는지 여부를 확인합니다.</summary>
      <param name="dependencyObjectType">비교할 <see cref="T:System.Windows.DependencyObjectType" />입니다.</param>
      <returns>
        <paramref name="dependencyObjectType" /> 매개 변수와 현재 <see cref="T:System.Windows.DependencyObjectType" />이 클래스 형식을 나타내며 현재 <see cref="T:System.Windows.DependencyObjectType" />이 나타내는 클래스가 <paramref name="dependencyObjectType" />이 나타내는 클래스에서 파생되면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다. 이 메서드는 <paramref name="dependencyObjectType" />와 현재 <see cref="T:System.Windows.DependencyObjectType" />이 같은 클래스를 나타내는 경우에도 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.BaseType">
      <summary>현재 <see cref="T:System.Windows.DependencyObjectType" />의 직접 기본 클래스 <see cref="T:System.Windows.DependencyObjectType" />을 가져옵니다.</summary>
      <returns>기본 클래스의 형식입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Id">
      <summary>일정한 시간의 배열 조회 작업에 대해 0부터 시작하는 고유 식별자를 가져옵니다.</summary>
      <returns>내부 식별자입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Name">
      <summary>표시되는 CLR(공용 언어 런타임) 시스템 형식의 이름을 가져옵니다.</summary>
      <returns>표시되는 CLR 시스템 형식의 이름입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.SystemType">
      <summary>이 <see cref="T:System.Windows.DependencyObjectType" />이 표시하는 CLR(공용 언어 런타임) 시스템 형식을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Windows.DependencyObjectType" />이 표시하는 CLR 시스템 형식입니다.</returns>
    </member>
    <member name="T:System.Windows.DependencyProperty">
      <summary>스타일 지정, 데이터 바인딩, 애니메이션 및 상속과 같은 메서드를 통해 설정할 수 있는 속성을 나타냅니다.</summary>
    </member>
    <member name="F:System.Windows.DependencyProperty.UnsetValue">
      <summary>속성이 있지만 속성 시스템에 의해 값이 설정되지 않았음을 나타내기 위해 WPF 속성 시스템에서 <see langword="null" /> 대신 사용하는 정적 값을 지정합니다.</summary>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type)">
      <summary>이미 등록된 종속성 속성의 소유자로 다른 형식을 추가합니다.</summary>
      <param name="ownerType">이 종속성 속성의 소유자로 추가할 형식입니다.</param>
      <returns>종속성 속성을 식별하는 원본 <see cref="T:System.Windows.DependencyProperty" /> 식별자에 대한 참조입니다. 이 식별자는 클래스를 <see langword="public static readonly" /> 필드로 추가하여 공개해야 합니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)">
      <summary>이미 등록된 종속성 속성의 소유자로 다른 형식을 추가하며, 제공된 소유자 형식에 존재하는 종속성 속성에 대한 종속성 속성 메타데이터를 제공합니다.</summary>
      <param name="ownerType">이 종속성 속성의 소유자로 추가할 형식입니다.</param>
      <param name="typeMetadata">제공된 형식에 존재하는 종속성 속성을 정규화하는 메타데이터입니다.</param>
      <returns>종속성 속성을 식별하는 원본 <see cref="T:System.Windows.DependencyProperty" /> 식별자에 대한 참조입니다. 이 식별자는 클래스를 <see langword="public static readonly" /> 필드로 추가하여 공개해야 합니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetHashCode">
      <summary>이 <see cref="T:System.Windows.DependencyProperty" />의 해시 코드를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Windows.DependencyProperty" />에 대한 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Type)">
      <summary>종속성 속성이 지정된 기존 형식일 경우 이 종속성 속성의 메타데이터를 반환합니다.</summary>
      <param name="forType">종속성 속성 메타데이터를 검색할 특정 형식입니다.</param>
      <returns>속성 메타데이터 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)">
      <summary>종속성 속성이 지정된 개체 인스턴스에 있을 때 이 종속성 속성의 메타데이터를 반환합니다.</summary>
      <param name="dependencyObject">메타데이터를 가져와야 하는 종속성 속성의 형식별 버전을 결정하기 위해 형식이 검사된 종속성 개체입니다.</param>
      <returns>속성 메타데이터 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)">
      <summary>종속성 속성이 지정된 형식일 때 이 종속성 속성의 메타데이터를 반환합니다.</summary>
      <param name="dependencyObjectType">종속성 속성 메타데이터가 필요한 종속성 개체 형식을 기록하는 특정 개체입니다.</param>
      <returns>속성 메타데이터 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidType(System.Object)">
      <summary>원래 종속성 속성 등록 시 제공된 속성 형식을 기준으로 지정된 값을 이 종속성 속성 형식에 사용할 수 있는지 확인합니다.</summary>
      <param name="value">확인할 값입니다.</param>
      <returns>지정된 값이 등록된 속성 형식이거나 사용 가능한 파생 형식이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidValue(System.Object)">
      <summary>제공된 값이 속성 형식에 허용되는지 기본 형식 확인을 통해 확인하고, 해당 형식에 허용되는 값 범위에 속하는지도 확인합니다.</summary>
      <param name="value">확인할 값입니다.</param>
      <returns>값을 사용할 수 있고 올바른 형식이거나 파생 형식이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>지정된 형식의 인스턴스에 있는 경우 이 종속성 속성에 대해 대체 메타데이터를 지정하고, 기본 형식에서 상속된 종속성 속성에 존재하는 메타데이터를 재정의합니다.</summary>
      <param name="forType">이 종속성 속성에 상속되는 형식이며, 지정된 대체 메타데이터에 적용될 형식입니다.</param>
      <param name="typeMetadata">재정의하는 형식에서 종속성 속성에 적용할 메타데이터입니다.</param>
      <exception cref="T:System.InvalidOperationException">읽기 전용 종속성 속성에서 메타데이터 재정의를 시도한 경우(이 서명을 사용하여 해당 작업을 완료할 수 없음)</exception>
      <exception cref="T:System.ArgumentException">지정된 형식에 있는 종속성 속성에 대해 메타데이터가 이미 설정되어 있는 경우</exception>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)">
      <summary>지정된 형식의 인스턴스에 있을 경우 읽기 전용 종속성 속성에 대해 대체 메타데이터를 제공하여 초기 종속성 속성 등록 시 제공된 메타데이터를 재정의합니다. 예외가 발생하지 않도록 읽기 전용 종속성 속성에 <see cref="T:System.Windows.DependencyPropertyKey" /> 를 전달해야 합니다.</summary>
      <param name="forType">이 종속성 속성에 상속되는 형식이며, 지정된 대체 메타데이터에 적용될 형식입니다.</param>
      <param name="typeMetadata">재정의하는 형식에서 종속성 속성에 적용할 메타데이터입니다.</param>
      <param name="key">읽기 전용 종속성 속성에 대한 액세스 키입니다.</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)">
      <summary>지정된 속성 이름, 속성 형식 및 소유자 유형을 사용하여 종속성 속성을 등록합니다.</summary>
      <param name="name">등록할 종속성 속성의 이름입니다. 이름은은 소유자 형식의 등록 네임스페이스 내에서 고유해야 합니다.</param>
      <param name="propertyType">속성의 형식입니다.</param>
      <param name="ownerType">종속성 속성을 등록하는 소유자 유형입니다.</param>
      <returns>클래스에서 <see langword="public static readonly" /> 필드의 값을 설정하는 데 사용해야 하는 종속성 속성 식별자입니다. 해당 식별자는 나중에 해당 값을 프로그래밍 방식으로 설정하거나 메타데이터를 가져오는 등의 작업에서 종속성 속성을 참조하는 데 사용됩니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>지정된 속성 이름, 속성 형식, 소유자 유형 및 속성 메타데이터를 사용하여 종속성 속성을 등록합니다.</summary>
      <param name="name">등록할 종속성 속성의 이름입니다.</param>
      <param name="propertyType">속성의 형식입니다.</param>
      <param name="ownerType">종속성 속성을 등록하는 소유자 유형입니다.</param>
      <param name="typeMetadata">종속성 속성의 속성 메타데이터입니다.</param>
      <returns>클래스에서 <see langword="public static readonly" /> 필드의 값을 설정하는 데 사용해야 하는 종속성 속성 식별자입니다. 해당 식별자는 나중에 해당 값을 프로그래밍 방식으로 설정하거나 메타데이터를 가져오는 등의 작업에서 종속성 속성을 참조하는 데 사용됩니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>속성에 대해 지정된 속성 이름, 속성 형식, 소유자 유형, 속성 메타데이터 및 값 유효성 검사 콜백을 사용하여 종속성 속성을 등록합니다.</summary>
      <param name="name">등록할 종속성 속성의 이름입니다.</param>
      <param name="propertyType">속성의 형식입니다.</param>
      <param name="ownerType">종속성 속성을 등록하는 소유자 유형입니다.</param>
      <param name="typeMetadata">종속성 속성의 속성 메타데이터입니다.</param>
      <param name="validateValueCallback">일반적인 형식 유효성 검사 이외에 종속성 속성 값의 사용자 지정 유효성 검사를 수행하는 콜백에 대한 참조입니다.</param>
      <returns>클래스에서 <see langword="public static readonly" /> 필드의 값을 설정하는 데 사용해야 하는 종속성 속성 식별자입니다. 해당 식별자는 나중에 해당 값을 프로그래밍 방식으로 설정하거나 메타데이터를 가져오는 등의 작업에서 종속성 속성을 참조하는 데 사용됩니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
      <summary>지정된 속성 이름, 속성 형식 및 소유자 유형을 사용하여 연결된 속성을 등록합니다.</summary>
      <param name="name">등록할 종속성 속성의 이름입니다.</param>
      <param name="propertyType">속성의 형식입니다.</param>
      <param name="ownerType">종속성 속성을 등록하는 소유자 유형입니다.</param>
      <returns>클래스에서 <see langword="public static readonly" /> 필드의 값을 설정하는 데 사용해야 하는 종속성 속성 식별자입니다. 해당 식별자는 나중에 해당 값을 프로그래밍 방식으로 설정하거나 메타데이터를 가져오는 등의 작업에서 종속성 속성을 참조하는 데 사용됩니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>지정된 속성 이름, 속성 형식, 소유자 유형 및 속성 메타데이터에 연결된 속성을 등록합니다.</summary>
      <param name="name">등록할 종속성 속성의 이름입니다.</param>
      <param name="propertyType">속성의 형식입니다.</param>
      <param name="ownerType">종속성 속성을 등록하는 소유자 유형입니다.</param>
      <param name="defaultMetadata">종속성 속성의 속성 메타데이터입니다. 여기에는 기본값뿐만 아니라 다른 특성도 포함될 수 있습니다.</param>
      <returns>클래스에서 <see langword="public static readonly" /> 필드의 값을 설정하는 데 사용해야 하는 종속성 속성 식별자입니다. 해당 식별자는 나중에 해당 값을 프로그래밍 방식으로 설정하거나 메타데이터를 가져오는 등의 작업에서 종속성 속성을 참조하는 데 사용됩니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>속성에 대해 지정된 속성 형식, 소유자 유형, 속성 메타데이터 및 값 유효성 검사 콜백에 연결된 속성을 등록합니다.</summary>
      <param name="name">등록할 종속성 속성의 이름입니다.</param>
      <param name="propertyType">속성의 형식입니다.</param>
      <param name="ownerType">종속성 속성을 등록하는 소유자 유형입니다.</param>
      <param name="defaultMetadata">종속성 속성의 속성 메타데이터입니다. 여기에는 기본값뿐만 아니라 다른 특성도 포함될 수 있습니다.</param>
      <param name="validateValueCallback">일반적인 형식 유효성 검사 이외에 종속성 속성 값의 사용자 지정 유효성 검사를 수행하는 콜백에 대한 참조입니다.</param>
      <returns>클래스에서 <see langword="public static readonly" /> 필드의 값을 설정하는 데 사용해야 하는 종속성 속성 식별자입니다. 해당 식별자는 나중에 해당 값을 프로그래밍 방식으로 설정하거나 메타데이터를 가져오는 등의 작업에서 종속성 속성을 참조하는 데 사용됩니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>지정된 속성 형식, 소유자 유형 및 속성 메타데이터를 사용하여 읽기 전용 연결된 속성을 등록합니다.</summary>
      <param name="name">등록할 종속성 속성의 이름입니다.</param>
      <param name="propertyType">속성의 형식입니다.</param>
      <param name="ownerType">종속성 속성을 등록하는 소유자 유형입니다.</param>
      <param name="defaultMetadata">종속성 속성의 속성 메타데이터입니다.</param>
      <returns>클래스의 정적 읽기 전용 필드 값을 설정하는 데 사용할 종속성 속성 키로, 나중에 종속성 속성을 참조하는 데 사용됩니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>지정된 속성 형식, 소유자 유형, 속성 메타데이터 및 유효성 검사 콜백을 사용하여 읽기 전용 연결된 속성을 등록합니다.</summary>
      <param name="name">등록할 종속성 속성의 이름입니다.</param>
      <param name="propertyType">속성의 형식입니다.</param>
      <param name="ownerType">종속성 속성을 등록하는 소유자 유형입니다.</param>
      <param name="defaultMetadata">종속성 속성의 속성 메타데이터입니다.</param>
      <param name="validateValueCallback">일반적인 형식 유효성 검사 이외에 종속성 속성 값의 사용자 지정 유효성 검사를 수행하는 사용자가 만든 콜백에 대한 참조입니다.</param>
      <returns>클래스의 정적 읽기 전용 필드 값을 설정하는 데 사용할 종속성 속성 키로, 나중에 종속성 속성을 참조하는 데 사용됩니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary>지정된 속성 형식, 소유자 유형 및 속성 메타데이터를 사용하여 읽기 전용 종속성 속성을 등록합니다.</summary>
      <param name="name">등록할 종속성 속성의 이름입니다.</param>
      <param name="propertyType">속성의 형식입니다.</param>
      <param name="ownerType">종속성 속성을 등록하는 소유자 유형입니다.</param>
      <param name="typeMetadata">종속성 속성의 속성 메타데이터입니다.</param>
      <returns>클래스의 정적 읽기 전용 필드 값을 설정하는 데 사용할 종속성 속성 키로, 나중에 종속성 속성을 참조하는 데 사용됩니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary>지정된 속성 형식, 소유자 유형, 속성 메타데이터 및 유효성 검사 콜백을 사용하여 읽기 전용 종속성 속성을 등록합니다.</summary>
      <param name="name">등록할 종속성 속성의 이름입니다.</param>
      <param name="propertyType">속성의 형식입니다.</param>
      <param name="ownerType">종속성 속성을 등록하는 소유자 유형입니다.</param>
      <param name="typeMetadata">종속성 속성의 속성 메타데이터입니다.</param>
      <param name="validateValueCallback">일반적인 형식 유효성 검사 이외에 종속성 속성 값의 사용자 지정 유효성 검사를 수행하는 사용자가 만든 콜백에 대한 참조입니다.</param>
      <returns>클래스의 정적 읽기 전용 필드 값을 설정하는 데 사용할 종속성 속성 키로, 나중에 종속성 속성을 참조하는 데 사용됩니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.ToString">
      <summary>종속성 속성의 문자열 표현을 반환합니다.</summary>
      <returns>종속성 속성의 문자열 표현입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.DefaultMetadata">
      <summary>종속성 속성의 기본 메타데이터를 가져옵니다.</summary>
      <returns>종속성 속성의 기본 메타데이터입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.GlobalIndex">
      <summary>종속성 속성을 고유하게 식별하는 내부 생성 값을 가져옵니다.</summary>
      <returns>고유 숫자 식별자입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.Name">
      <summary>종속성 속성의 이름을 가져옵니다.</summary>
      <returns>속성의 이름입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.OwnerType">
      <summary>속성 시스템에 종속성 속성을 등록하거나 자체적으로 속성 소유자로 추가한 개체의 형식을 가져옵니다.</summary>
      <returns>속성을 등록하거나 자체적으로 속성 소유자로 추가한 개체의 형식입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.PropertyType">
      <summary>종속성 속성에서 값으로 사용하는 형식을 가져옵니다.</summary>
      <returns>속성 값의 <see cref="T:System.Type" />입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ReadOnly">
      <summary>이 <see cref="T:System.Windows.DependencyProperty" /> 인스턴스로 식별되는 종속성 속성이 읽기 전용 종속성 속성인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>종속성 속성이 읽기 전용이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ValidateValueCallback">
      <summary>종속성 속성의 값 유효성 검사 콜백을 가져옵니다.</summary>
      <returns>이 종속성 속성을 원래 등록할 때 <paramref name="validateValueCallback" /> 매개 변수로 제공된 값 유효성 검사 콜백입니다.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventArgs">
      <summary>다양한 속성 변경 이벤트에 대한 데이터를 제공합니다. 일반적으로 이러한 이벤트는 읽기 전용 종속성 속성 값에서 유효한 값이 변경된 내용을 보고합니다. <see cref="T:System.Windows.PropertyChangedCallback" /> 구현의 일부로도 사용됩니다.</summary>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
      <summary>
        <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="property">변경된 종속성 속성의 식별자입니다.</param>
      <param name="oldValue">관련 이벤트에서 보고한 변경 또는 상태 변경 이전의 속성 값입니다.</param>
      <param name="newValue">관련 이벤트에서 보고한 변경 또는 상태 변경 이후의 속성 값입니다.</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
      <summary>제공된 개체가 현재 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />에 해당하는지 여부를 확인합니다.</summary>
      <param name="obj">현재 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />과 비교할 개체입니다.</param>
      <returns>제공된 개체가 현재 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>제공된 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />가 현재 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />에 해당하는지 여부를 확인합니다.</summary>
      <param name="args">현재 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />와 비교할 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</param>
      <returns>제공된 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />가 현재 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
      <summary>이 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />의 해시 코드를 가져옵니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>지정된 두 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 개체의 값이 같은지를 확인합니다.</summary>
      <param name="left">비교할 첫 번째 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</param>
      <param name="right">비교할 두 번째 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</param>
      <returns>두 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 인스턴스가 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>지정된 두 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 개체가 다른지 여부를 확인합니다.</summary>
      <param name="left">비교할 첫 번째 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</param>
      <param name="right">비교할 두 번째 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />입니다.</param>
      <returns>두 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 인스턴스가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
      <summary>변경 후의 속성 값을 가져옵니다.</summary>
      <returns>변경 후의 속성 값입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
      <summary>변경 전의 속성 값을 가져옵니다.</summary>
      <returns>변경 전의 속성 값입니다.</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
      <summary>값이 변경된 종속성 속성의 식별자를 가져옵니다.</summary>
      <returns>값이 변경된 종속성 속성의 식별자 필드입니다.</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventHandler">
      <summary>특정 <see cref="T:System.Windows.DependencyObject" /> 구현에서 <see cref="T:System.Windows.DependencyProperty" />가 변경될 때 발생하는 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터입니다.</param>
    </member>
    <member name="T:System.Windows.DependencyPropertyKey">
      <summary>읽기 전용 종속성 속성에 대해 제한적인 쓰기 권한을 제공하기 위한 종속성 속성 식별자를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary>이 종속성 속성 식별자가 나타내는 읽기 전용 종속성 속성의 메타데이터를 재정의합니다.</summary>
      <param name="forType">이 종속성 속성에 대해 지정되어 있으며 메타데이터를 재정의해야 하는 형식입니다.</param>
      <param name="typeMetadata">이 형식에 대해 제공되는 메타데이터입니다.</param>
      <exception cref="T:System.InvalidOperationException">읽기-쓰기 종속성 속성의 메타데이터를 재정의한 경우. 이 시그니처를 사용하여 이 작업을 수행할 수 없습니다.</exception>
      <exception cref="T:System.ArgumentException">제공된 형식에 있는 속성에 메타데이터가 이미 설정된 경우</exception>
    </member>
    <member name="P:System.Windows.DependencyPropertyKey.DependencyProperty">
      <summary>이 특수 읽기 전용 종속성 속성 식별자와 연결된 종속성 속성 식별자를 가져옵니다.</summary>
      <returns>관련 종속성 속성 식별자입니다.</returns>
    </member>
    <member name="T:System.Windows.Expression">
      <summary>이 형식은 WPF(Windows Presentation Foundation) 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
    </member>
    <member name="T:System.Windows.ExpressionConverter">
      <summary>
        <see cref="T:System.Windows.Expression" />의 인스턴스를 다른 형식으로 변환하거나 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.ExpressionConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 소스 개체를 <see cref="T:System.Windows.Expression" /> 개체로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="sourceType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>이 변환기가 <see cref="T:System.Windows.Expression" /> 개체를 특정 대상 형식으로 변환할 수 있는지 여부를 반환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>항상 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>제공된 값을 <see cref="T:System.Windows.Expression" /> 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">현재 culture로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <returns>항상 예외를 throw하고 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>제공된 <see cref="T:System.Windows.Expression" /> 개체를 지정된 형식으로 변환합니다.</summary>
      <param name="context">형식 컨텍스트를 제공하는 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />입니다.</param>
      <param name="culture">현재 culture로 사용할 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <param name="destinationType">변환할 형식을 나타내는 <see cref="T:System.Type" />입니다.</param>
      <returns>항상 예외를 throw하고 <see langword="null" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Windows.Freezable">
      <summary>수정 가능한 상태와 읽기 전용(고정) 상태를 가진 개체를 정의합니다. <see cref="T:System.Windows.Freezable" /> 에서 파생된 클래스는 자세한 변경 알림을 제공하며, 변경할 수 없도록 설정될 수 있고, 자신을 복제할 수 있습니다.</summary>
    </member>
    <member name="E:System.Windows.Freezable.Changed">
      <summary>
        <see cref="T:System.Windows.Freezable" /> 또는 여기에 들어 있는 개체가 수정될 때 발생합니다.</summary>
    </member>
    <member name="M:System.Windows.Freezable.#ctor">
      <summary>
        <see cref="T:System.Windows.Freezable" /> 파생 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Freezable.Clone">
      <summary>개체 값의 전체 복사본을 만들어 <see cref="T:System.Windows.Freezable" />의 수정 가능한 복제본을 만듭니다. 개체의 종속성 속성을 복사하는 경우 이 메서드는 더 이상 확인되지 않을 수도 있는 식을 복사하지만 애니메이션 또는 해당 현재 값은 복사하지 않습니다.</summary>
      <returns>현재 개체의 수정 가능한 복제본입니다. 소스의 <see cref="P:System.Windows.Freezable.IsFrozen" /> 속성이 <see langword="false" />인 경우에도 복제된 개체의 <see cref="P:System.Windows.Freezable.IsFrozen" /> 속성은 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)">
      <summary>기본(애니메이션이 적용되지 않은) 속성 값을 사용하여 인스턴스를 지정된 <see cref="T:System.Windows.Freezable" />의 복제본(전체 복사본)으로 만듭니다.</summary>
      <param name="sourceFreezable">복제할 개체입니다.</param>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValue">
      <summary>현재 값을 사용하여 <see cref="T:System.Windows.Freezable" />의 수정 가능한 복제본(전체 복사본)을 만듭니다.</summary>
      <returns>현재 개체의 수정 가능한 복제본입니다. 소스의 <see cref="P:System.Windows.Freezable.IsFrozen" /> 속성이 <see langword="false" />인 경우에도 복제된 개체의 <see cref="P:System.Windows.Freezable.IsFrozen" /> 속성은 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary>현재 속성 값을 사용하여 이 인스턴스를 지정된 <see cref="T:System.Windows.Freezable" />의 수정 가능한 클론(전체 복사본)으로 만듭니다.</summary>
      <param name="sourceFreezable">복제할 <see cref="T:System.Windows.Freezable" />입니다.</param>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstance">
      <summary>
        <see cref="T:System.Windows.Freezable" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <returns>새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstanceCore">
      <summary>파생 클래스에서 구현되는 경우 <see cref="T:System.Windows.Freezable" /> 파생 클래스의 새 인스턴스를 만듭니다.</summary>
      <returns>새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Windows.Freezable.Freeze">
      <summary>현재 개체를 수정할 수 없게 설정하고 해당 <see cref="P:System.Windows.Freezable.IsFrozen" /> 속성을 <see langword="true" />로 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Freezable" /> 은 수정할 수 없도록 설정할 수 없습니다.</exception>
    </member>
    <member name="M:System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)">
      <summary>
        <paramref name="isChecking" /> 매개 변수가 <see langword="true" />이면 이 메서드는 지정된 <see cref="T:System.Windows.Freezable" />을 수정할 수 없게 만들 수 있는지 여부를 알려 줍니다. <paramref name="isChecking" /> 매개 변수가 <see langword="false" />이면 이 메서드는 지정된 <see cref="T:System.Windows.Freezable" />을 수정할 수 없게 만들고 이 작업에 성공했는지 여부를 알려 줍니다.</summary>
      <param name="freezable">확인할 개체 또는 수정할 수 없게 만들 개체입니다. <paramref name="isChecking" />이 <see langword="true" />이면 이 개체를 수정할 수 없게 만들 수 있는지 확인합니다. <paramref name="isChecking" />이 <see langword="false" />이면 가능한 경우 개체를 수정할 수 없게 만듭니다.</param>
      <param name="isChecking">개체를 실제로 고정하지 않고 고정할 수 있는지 여부를 반환하려면 <see langword="true" />이고, 개체를 실제로 고정하려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="isChecking" />이 <see langword="false" />인 경우 <paramref name="freezable" />을 수정할 수 없게 만드는 작업이 실패하면 개체의 상태를 알 수 없게 되며, 부분적으로 고정될 수도 있습니다.</exception>
      <returns>
        <paramref name="isChecking" />이 <see langword="true" />인 경우 이 메서드는 지정된 <see cref="T:System.Windows.Freezable" />을 수정할 수 없게 만들 수 있으면 <see langword="true" />를, 그렇지 않으면 <see langword="false" />를 반환합니다. <paramref name="isChecking" />이 <see langword="false" />인 경우 이 메서드는 지정된 <see cref="T:System.Windows.Freezable" />을 이제 수정할 수 없으면 <see langword="true" />를, 수정할 수 없게 만들 수 없으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Freezable.FreezeCore(System.Boolean)">
      <summary>
        <see cref="T:System.Windows.Freezable" />을 수정할 수 없게 만들거나, 수정할 수 없게 만들 수 있는지 테스트합니다.</summary>
      <param name="isChecking">개체를 실제로 고정하지 않고 고정할 수 있는지 여부를 반환하려면 <see langword="true" />이고, 개체를 실제로 고정하려면 <see langword="false" />입니다.</param>
      <returns>
        <paramref name="isChecking" />이 <see langword="true" />인 경우 이 메서드는 <see cref="T:System.Windows.Freezable" />을 수정할 수 없게 만들 수 있으면 <see langword="true" />를, 그렇지 않으면 <see langword="false" />를 반환합니다. <paramref name="isChecking" />이 <see langword="false" />인 경우 이 메서드는 지정된 <see cref="T:System.Windows.Freezable" />을 이제 수정할 수 없으면 <see langword="true" />를, 수정할 수 없게 만들 수 없으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozen">
      <summary>애니메이션이 적용되지 않은 기준 속성 값을 사용하여 <see cref="T:System.Windows.Freezable" />의 고정된 복사본을 만듭니다. 복사본이 고정되므로 고정된 하위 개체는 모두 참조를 통해 복사됩니다.</summary>
      <exception cref="T:System.InvalidOperationException">식 또는 애니메이션이 적용된 속성이 들어 있어서 <see cref="T:System.Windows.Freezable" />을 고정할 수 없는 경우</exception>
      <returns>
        <see cref="T:System.Windows.Freezable" />의 고정된 복사본입니다. 복사본의 <see cref="P:System.Windows.Freezable.IsFrozen" /> 속성은 <see langword="true" />로 설정됩니다.</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)">
      <summary>기본(애니메이션이 적용되지 않은) 속성 값을 사용하여 인스턴스를 지정된 <see cref="T:System.Windows.Freezable" />의 고정된 복제본으로 만듭니다.</summary>
      <param name="sourceFreezable">복사할 인스턴스입니다.</param>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozen">
      <summary>현재 속성 값을 사용하여 <see cref="T:System.Windows.Freezable" />의 고정된 복사본을 만듭니다. 복사본이 고정되므로 고정된 하위 개체는 모두 참조를 통해 복사됩니다.</summary>
      <returns>
        <see cref="T:System.Windows.Freezable" />의 고정된 복사본입니다. 복사본의 <see cref="P:System.Windows.Freezable.IsFrozen" /> 속성은 <see langword="true" />로 설정됩니다.</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary>현재 인스턴스를 지정된 <see cref="T:System.Windows.Freezable" />의 고정 클론으로 만듭니다. 개체에 애니메이션 효과를 준 종속성 속성이 있는 경우 애니메이션 효과를 준 현재 값이 복사됩니다.</summary>
      <param name="sourceFreezable">복사 및 고정할 <see cref="T:System.Windows.Freezable" />입니다.</param>
    </member>
    <member name="M:System.Windows.Freezable.OnChanged">
      <summary>현재 <see cref="T:System.Windows.Freezable" /> 개체가 수정될 때 호출됩니다.</summary>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary>방금 설정된 <see cref="T:System.Windows.DependencyObjectType" /> 데이터 멤버에 대한 적절한 컨텍스트 포인터를 설정합니다.</summary>
      <param name="oldValue">데이터 멤버의 이전 값입니다.</param>
      <param name="newValue">데이터 멤버의 현재 값입니다.</param>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
      <summary>이 멤버는 WPF(Windows Presentation Foundation) 인프라를 지원하며 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="oldValue">데이터 멤버의 이전 값입니다.</param>
      <param name="newValue">데이터 멤버의 현재 값입니다.</param>
      <param name="property">변경된 속성입니다.</param>
    </member>
    <member name="M:System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary>
        <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" />의 <see cref="T:System.Windows.DependencyObject" /> 구현을 재정의하여 <see cref="T:System.Windows.Freezable" /> 형식의 변화하는 종속성 속성에 대한 응답으로 <see cref="E:System.Windows.Freezable.Changed" /> 처리기도 호출합니다.</summary>
      <param name="e">변경된 속성, 해당하는 이전 값 및 새 값에 관한 정보가 포함된 이벤트 데이터입니다.</param>
    </member>
    <member name="M:System.Windows.Freezable.ReadPreamble">
      <summary>유효한 스레드에서 <see cref="T:System.Windows.Freezable" />에 액세스하고 있는지 확인합니다. <see cref="T:System.Windows.Freezable" /> 상속자는 종속성 속성이 아닌 데이터 멤버를 읽는 API의 시작 부분에서 이 메서드를 호출해야 합니다.</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePostscript">
      <summary>
        <see cref="E:System.Windows.Freezable.Changed" /> 에 대한 <see cref="T:System.Windows.Freezable" /> 이벤트를 발생시키고 해당 <see cref="M:System.Windows.Freezable.OnChanged" /> 메서드를 호출합니다. <see cref="T:System.Windows.Freezable" />에서 파생된 클래스는 종속성 속성으로 저장되지 않은 클래스 멤버를 수정하는 모든 API의 끝에서 이 메서드를 호출해야 합니다.</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePreamble">
      <summary>
        <see cref="T:System.Windows.Freezable" />이 고정되어 있지 않고 유효한 스레드 컨텍스트에서 액세스되고 있는지 확인합니다. <see cref="T:System.Windows.Freezable" /> 상속자는 종속성 속성이 아닌 데이터 멤버에 쓰는 API의 시작 부분에서 이 메서드를 호출해야 합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Freezable" /> 인스턴스가 고정되어 있어 해당 멤버에 쓸 수 없는 경우</exception>
    </member>
    <member name="P:System.Windows.Freezable.CanFreeze">
      <summary>개체를 수정 불가능으로 설정할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>개체를 수정 불가능으로 설정할 수 있거나 이미 수정 불가능이면 <see langword="true" />이고, 설정할 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Freezable.IsFrozen">
      <summary>개체가 현재 수정 가능한지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>개체가 고정되어 있어 수정할 수 없으면<see langword="true" /> 이고, 개체를 수정할 수 있으면 <see langword="false" /> 입니다.</returns>
    </member>
    <member name="T:System.Windows.Input.FocusNavigationDirection">
      <summary>UI(사용자 인터페이스) 내에서 원하는 포커스 변경 요청이 시도되는 방향을 지정합니다. 방향은 탭 순서나 레이아웃에서의 상대적 방향을 기준으로 합니다.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Down">
      <summary>현재 포커스가 있는 요소의 아래쪽에 있으며 포커스를 받을 수 있는 다른 요소로 포커스를 이동합니다.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.First">
      <summary>탭 순서에 따라 포커스를 받을 수 있는 첫 번째 요소로 포커스를 이동합니다. <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />에는 지원되지 않습니다.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Last">
      <summary>탭 순서에 따라 포커스를 받을 수 있는 마지막 요소로 포커스를 이동합니다. <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />에는 지원되지 않습니다.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Left">
      <summary>현재 포커스가 있는 요소의 왼쪽에 있으며 포커스를 받을 수 있는 다른 요소로 포커스를 이동합니다.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Next">
      <summary>탭 순서에 따라 포커스를 받을 수 있는 다음 요소로 포커스를 이동합니다. <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />에는 지원되지 않습니다.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Previous">
      <summary>탭 순서에 따라 포커스를 받을 수 있는 이전 요소로 포커스를 이동합니다. <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />에는 지원되지 않습니다.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Right">
      <summary>현재 포커스가 있는 요소의 오른쪽에 있으며 포커스를 받을 수 있는 다른 요소로 포커스를 이동합니다.</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Up">
      <summary>현재 포커스가 있는 요소의 위쪽에 있으며 포커스를 받을 수 있는 다른 요소로 포커스를 이동합니다.</summary>
    </member>
    <member name="T:System.Windows.Input.Key">
      <summary>키보드에서 가능한 키 값을 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.A">
      <summary>A 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC1">
      <summary>ABNT_C1(브라질) 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC2">
      <summary>ABNT_C2(브라질) 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Add">
      <summary>추가 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Apps">
      <summary>애플리케이션 키(Microsoft Natural 키보드)입니다. 애플리케이션별 상황에 맞는 메뉴를 표시하므로 메뉴 키라고도 합니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Attn">
      <summary>ATTN 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.B">
      <summary>B 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Back">
      <summary>백스페이스 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserBack">
      <summary>브라우저 뒤로 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserFavorites">
      <summary>브라우저 즐겨찾기 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserForward">
      <summary>브라우저 앞으로 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserHome">
      <summary>브라우저 홈 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserRefresh">
      <summary>브라우저 새로 고침 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserSearch">
      <summary>브라우저 검색 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserStop">
      <summary>브라우저 중지 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.C">
      <summary>C 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Cancel">
      <summary>취소 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Capital">
      <summary>&amp;lt;Caps Lock&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CapsLock">
      <summary>&amp;lt;Caps Lock&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Clear">
      <summary>지우기 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CrSel">
      <summary>CRSEL 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D">
      <summary>D 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D0">
      <summary>0 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D1">
      <summary>1 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D2">
      <summary>2 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D3">
      <summary>3 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D4">
      <summary>4 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D5">
      <summary>5 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D6">
      <summary>6 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D7">
      <summary>7 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D8">
      <summary>8 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D9">
      <summary>9 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeAlphanumeric">
      <summary>DBE_ALPHANUMERIC 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeCodeInput">
      <summary>DBE_CODEINPUT 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDbcsChar">
      <summary>DBE_DBCSCHAR 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDetermineString">
      <summary>DBE_DETERMINESTRING 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterDialogConversionMode">
      <summary>DBE_ENTERDLGCONVERSIONMODE 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterImeConfigureMode">
      <summary>DBE_ENTERIMECONFIGMODE 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterWordRegisterMode">
      <summary>DBE_ENTERWORDREGISTERMODE 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeFlushString">
      <summary>DBE_FLUSHSTRING 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeHiragana">
      <summary>DBE_HIRAGANA 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeKatakana">
      <summary>DBE_KATAKANA 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoCodeInput">
      <summary>DBE_NOCODEINPUT 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoRoman">
      <summary>DBE_NOROMAN 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeRoman">
      <summary>DBE_ROMAN 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeSbcsChar">
      <summary>DBE_SBCSCHAR 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DeadCharProcessed">
      <summary>키는 조합된 단일 문자를 만들기 위해 다른 키와 함께 사용됩니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Decimal">
      <summary>소수점 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Delete">
      <summary>&amp;lt;Delete&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Divide">
      <summary>나누기 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Down">
      <summary>아래쪽 화살표 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.E">
      <summary>E 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.End">
      <summary>&amp;lt;End&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Enter">
      <summary>&amp;lt;Enter&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.EraseEof">
      <summary>ERASE EOF 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Escape">
      <summary>&amp;lt;ESC&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Execute">
      <summary>실행 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ExSel">
      <summary>EXSEL 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F">
      <summary>F 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F1">
      <summary>F1 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F10">
      <summary>F10 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F11">
      <summary>F11 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F12">
      <summary>F12 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F13">
      <summary>F13 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F14">
      <summary>F14 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F15">
      <summary>F15 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F16">
      <summary>F16 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F17">
      <summary>F17 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F18">
      <summary>F18 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F19">
      <summary>F19 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F2">
      <summary>F2 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F20">
      <summary>F20 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F21">
      <summary>F21 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F22">
      <summary>F22 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F23">
      <summary>F23 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F24">
      <summary>F24 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F3">
      <summary>F3 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F4">
      <summary>F4 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F5">
      <summary>F5 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F6">
      <summary>F6 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F7">
      <summary>F7 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F8">
      <summary>F8 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F9">
      <summary>F9 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.FinalMode">
      <summary>IME 최종 모드 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.G">
      <summary>G 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.H">
      <summary>H 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HangulMode">
      <summary>IME 한글 모드 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HanjaMode">
      <summary>IME 한자 모드 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Help">
      <summary>도움말 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Home">
      <summary>Home 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.I">
      <summary>I 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeAccept">
      <summary>IME 수락 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeConvert">
      <summary>IME 변환 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeModeChange">
      <summary>IME 모드 변경 요청입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeNonConvert">
      <summary>IME 변환 안 함 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeProcessed">
      <summary>IME에서 처리될 실제 키를 마스킹하는 특수 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Insert">
      <summary>&amp;lt;Insert&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.J">
      <summary>J 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.JunjaMode">
      <summary>IME 전자 모드 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.K">
      <summary>K 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanaMode">
      <summary>IME 가나 모드 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanjiMode">
      <summary>IME 간지 모드 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.L">
      <summary>L 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication1">
      <summary>애플리케이션1 시작 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication2">
      <summary>애플리케이션2 시작 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchMail">
      <summary>메일 시작 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Left">
      <summary>왼쪽 화살표 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftAlt">
      <summary>왼쪽 &amp;lt;Alt&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftCtrl">
      <summary>왼쪽 &amp;lt;Ctrl&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftShift">
      <summary>왼쪽 &amp;lt;Shift&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LineFeed">
      <summary>줄 바꿈 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LWin">
      <summary>왼쪽 Windows 로고 키(Microsoft Natural 키보드)입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.M">
      <summary>M 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaNextTrack">
      <summary>미디어 다음 트랙 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPlayPause">
      <summary>미디어 재생 일시 중지 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPreviousTrack">
      <summary>미디어 이전 트랙 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaStop">
      <summary>미디어 중지 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Multiply">
      <summary>곱하기 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.N">
      <summary>N 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Next">
      <summary>&amp;lt;Page Down&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NoName">
      <summary>나중에 사용하기 위해 예약된 상수입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.None">
      <summary>키를 누르지 않았습니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumLock">
      <summary>&amp;lt;Num Lock&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad0">
      <summary>숫자 키패드의 0 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad1">
      <summary>숫자 키패드의 1 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad2">
      <summary>숫자 키패드의 2 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad3">
      <summary>숫자 키패드의 3 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad4">
      <summary>숫자 키패드의 4 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad5">
      <summary>숫자 키패드의 5 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad6">
      <summary>숫자 키패드의 6 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad7">
      <summary>숫자 키패드의 7 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad8">
      <summary>숫자 키패드의 8 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad9">
      <summary>숫자 키패드의 9 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.O">
      <summary>O 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem1">
      <summary>OEM 1 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem102">
      <summary>OEM 102 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem2">
      <summary>OEM 2 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem3">
      <summary>OEM 3 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem4">
      <summary>OEM 4 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem5">
      <summary>OEM 5 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem6">
      <summary>OEM 6 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem7">
      <summary>OEM 7 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem8">
      <summary>OEM 8 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAttn">
      <summary>OEM ATTN 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAuto">
      <summary>OEM 자동 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackslash">
      <summary>OEM 백슬래시 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackTab">
      <summary>OEM BACKTAB 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemClear">
      <summary>OEM 지우기 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCloseBrackets">
      <summary>OEM 닫는 괄호 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemComma">
      <summary>OEM 쉼표 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCopy">
      <summary>OEM 복사 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemEnlw">
      <summary>OEM ENLW 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemFinish">
      <summary>OEM 마침 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemMinus">
      <summary>OEM 빼기 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemOpenBrackets">
      <summary>OEM 여는 괄호 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPeriod">
      <summary>OEM 마침표 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPipe">
      <summary>OEM 파이프 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPlus">
      <summary>OEM 추가 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuestion">
      <summary>OEM 물음표 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuotes">
      <summary>OEM 따옴표 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemSemicolon">
      <summary>OEM 세미콜론 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemTilde">
      <summary>OEM 물결표 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.P">
      <summary>P 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pa1">
      <summary>PA1 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageDown">
      <summary>&amp;lt;Page Down&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageUp">
      <summary>&amp;lt;Page Up&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pause">
      <summary>&amp;lt;Pause&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Play">
      <summary>재생 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Print">
      <summary>인쇄 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PrintScreen">
      <summary>&amp;lt;Print Screen&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Prior">
      <summary>&amp;lt;Page Up&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Q">
      <summary>Q 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.R">
      <summary>R 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Return">
      <summary>Enter 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Right">
      <summary>오른쪽 화살표 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightAlt">
      <summary>오른쪽 &amp;lt;Alt&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightCtrl">
      <summary>오른쪽 &amp;lt;Ctrl&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightShift">
      <summary>오른쪽 &amp;lt;Shift&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RWin">
      <summary>오른쪽 Windows 로고 키(Microsoft Natural 키보드)입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.S">
      <summary>S 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Scroll">
      <summary>&amp;lt;Scroll Lock&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Select">
      <summary>선택 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.SelectMedia">
      <summary>미디어 선택 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Separator">
      <summary>구분 기호 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Sleep">
      <summary>컴퓨터 절전 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Snapshot">
      <summary>&amp;lt;Print Screen&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Space">
      <summary>스페이스바 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Subtract">
      <summary>빼기 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.System">
      <summary>시스템 키로 처리될 실제 키를 마스킹하는 특수 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.T">
      <summary>T 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Tab">
      <summary>&amp;lt;Tab&amp;gt; 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.U">
      <summary>U 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Up">
      <summary>위쪽 화살표 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.V">
      <summary>V 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeDown">
      <summary>볼륨 작게 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeMute">
      <summary>볼륨 음소거 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeUp">
      <summary>볼륨 크게 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.W">
      <summary>W 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.X">
      <summary>X 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Y">
      <summary>Y 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Z">
      <summary>Z 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Zoom">
      <summary>확대/축소 키입니다.</summary>
    </member>
    <member name="T:System.Windows.Input.KeyConverter">
      <summary>
        <see cref="T:System.Windows.Input.Key" /> 개체를 다른 형식으로 변환하거나 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.Input.Key" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 지정된 형식의 개체를 <see cref="T:System.Windows.Input.Key" />의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="sourceType">변환을 위해 확인하는 형식입니다.</param>
      <returns>
        <see langword="true" />의 형식이 <paramref name="sourceType" />이면 <see cref="T:System.String" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정한 컨텍스트를 사용하여 <see cref="T:System.Windows.Input.Key" />의 인스턴스를 지정한 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="destinationType">변환을 위해 확인하는 형식입니다.</param>
      <returns>
        <see langword="true" />의 형식이 <paramref name="destinationType" />이면 <see cref="T:System.String" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정한 컨텍스트를 사용하여 지정한 개체를 <see cref="T:System.Windows.Input.Key" />로 변환하려고 합니다.</summary>
      <param name="context">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="culture">문화권별 정보입니다.</param>
      <param name="source">변환할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" />를 변환할 수 없는 경우</exception>
      <returns>변환된 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정한 컨텍스트를 사용하여 <see cref="T:System.Windows.Input.Key" />를 지정한 형식으로 변환하려고 합니다.</summary>
      <param name="context">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="culture">문화권별 정보입니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <param name="destinationType">개체를 변환할 대상 유형입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" />를 <paramref name="destinationType" />으로 변환할 수 없는 경우</exception>
      <returns>변환된 개체입니다.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyInterop">
      <summary>Win32 가상 키와 WPF <see cref="T:System.Windows.Input.Key" /> 열거형 사이에 변환하는 정적 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.KeyFromVirtualKey(System.Int32)">
      <summary>Win32 가상 키를 WPF <see cref="T:System.Windows.Input.Key" />로 변환합니다.</summary>
      <param name="virtualKey">변환할 가상 키입니다.</param>
      <returns>WPF 키입니다.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.VirtualKeyFromKey(System.Windows.Input.Key)">
      <summary>WPF <see cref="T:System.Windows.Input.Key" />를 Win32 가상 키로 변환합니다.</summary>
      <param name="key">변환할 WPF입니다.</param>
      <returns>Win32 가상 키입니다.</returns>
    </member>
    <member name="T:System.Windows.Input.KeyValueSerializer">
      <summary>
        <see cref="T:System.String" /> 인스턴스를 <see cref="T:System.Windows.Input.Key" /> 인스턴스로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Input.KeyValueSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 <see cref="T:System.String" />이 <see cref="T:System.Windows.Input.Key" />의 인스턴스로 변환될 수 있는지 여부를 결정합니다.</summary>
      <param name="value">변환을 위해 확인할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정한 <see cref="T:System.Windows.Input.Key" />를 <see cref="T:System.String" />으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 확인할 키입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>
        <paramref name="value" />를 <see cref="T:System.String" />으로 변환할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" />을 <see cref="T:System.Windows.Input.Key" />으로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.Windows.Input.Key" />으로 변환할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <paramref name="value" />을 기반으로 하는 <see cref="T:System.Windows.Input.Key" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Input.Key" />의 인스턴스를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">문자열로 변환할 키입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <see cref="T:System.Windows.Input.Key" />의 고정 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeys">
      <summary>보조키 집합을 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Alt">
      <summary>Alt 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Control">
      <summary>CTRL 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.None">
      <summary>보조키가 눌러져 있지 않습니다.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Shift">
      <summary>Shift 키입니다.</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Windows">
      <summary>Windows 로고 키입니다.</summary>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysConverter">
      <summary>
        <see cref="T:System.Windows.Input.ModifierKeys" /> 개체를 다른 형식으로 변환하거나 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.Input.ModifierKeysConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정된 컨텍스트를 사용하여 지정된 형식의 개체를 <see cref="T:System.Windows.Input.ModifierKeys" />의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="sourceType">변환을 위해 확인하는 형식입니다.</param>
      <returns>
        <paramref name="sourceType" />이 <see cref="T:System.String" /> 형식이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정한 컨텍스트를 사용하여 <see cref="T:System.Windows.Input.ModifierKeys" />의 인스턴스를 지정한 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="destinationType">변환을 위해 확인하는 형식입니다.</param>
      <returns>
        <paramref name="destinationType" />이 <see cref="T:System.String" /> 형식이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정한 컨텍스트를 사용하여 지정한 개체를 <see cref="T:System.Windows.Input.ModifierKeys" />로 변환하려고 합니다.</summary>
      <param name="context">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="culture">문화권별 정보입니다.</param>
      <param name="source">변환할 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="source" />를 변환할 수 없는 경우</exception>
      <returns>변환된 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정한 컨텍스트를 사용하여 <see cref="T:System.Windows.Input.ModifierKeys" />를 지정한 형식으로 변환하려고 합니다.</summary>
      <param name="context">이 변환기가 호출되는 환경에 대한 정보를 제공하는 형식 컨텍스트입니다.</param>
      <param name="culture">문화권별 정보입니다.</param>
      <param name="value">변환할 개체입니다.</param>
      <param name="destinationType">개체를 변환할 대상 유형입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="destinationType" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="value" />가 유효한 <see cref="T:System.Windows.Input.ModifierKeys" />에 매핑되지 않는 경우</exception>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" />를 변환할 수 없는 경우</exception>
      <returns>변환된 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.IsDefinedModifierKeys(System.Windows.Input.ModifierKeys)">
      <summary>지정된 값이 유효한 <see cref="T:System.Windows.Input.ModifierKeys" /> 값인지 여부를 확인합니다.</summary>
      <param name="modifierKeys">유효성을 확인할 값입니다.</param>
      <returns>입력이 유효한 <see cref="T:System.Windows.Input.ModifierKeys" /> 값이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysValueSerializer">
      <summary>
        <see cref="T:System.String" /> 인스턴스를 <see cref="T:System.Windows.Input.ModifierKeys" /> 인스턴스로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Input.ModifierKeysValueSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 <see cref="T:System.String" />이 <see cref="T:System.Windows.Input.ModifierKeys" />의 인스턴스로 변환될 수 있는지 여부를 결정합니다.</summary>
      <param name="value">변환을 위해 확인할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>항상 <see langword="true" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정한 <see cref="T:System.Windows.Input.ModifierKeys" />를 <see cref="T:System.String" />으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 확인할 보조키입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>
        <paramref name="value" />를 <see cref="T:System.String" />으로 변환할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" />을 <see cref="T:System.Windows.Input.ModifierKeys" /> 값으로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.Windows.Input.ModifierKeys" />으로 변환할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <paramref name="value" />을 기반으로 하는 <see cref="T:System.Windows.Input.ModifierKeys" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Input.ModifierKeys" />의 인스턴스를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">문자열로 변환할 키입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <see cref="T:System.Windows.Input.ModifierKeys" /> 값의 고정 문자열 표현입니다.</returns>
    </member>
    <member name="T:System.Windows.Input.TraversalRequest">
      <summary>다른 컨트롤로 포커스를 이동할 요청을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Input.TraversalRequest.#ctor(System.Windows.Input.FocusNavigationDirection)">
      <summary>
        <see cref="T:System.Windows.Input.TraversalRequest" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="focusNavigationDirection">원하는 포커스 이동 방향으로 열거형 값입니다.</param>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection">
      <summary>이동 방향을 가져옵니다.</summary>
      <returns>이동 방향 열거형 값 중 하나입니다.</returns>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.Wrapped">
      <summary>포커스 이동이 포커스를 가질 수 있는 마지막 자식 요소에 도달했는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>이 이동이 포커스를 가질 수 있는 마지막 자식 요소에 도달했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Int32Rect">
      <summary>정수 사각형의 너비, 높이 및 위치를 설명합니다.</summary>
    </member>
    <member name="M:System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary>지정된 <see cref="T:System.Windows.Int32Rect" /> 및 <see cref="P:System.Windows.Int32Rect.X" /> 좌표와 지정된 <see cref="P:System.Windows.Int32Rect.Y" /> 및 <see cref="P:System.Windows.Int32Rect.Width" />를 사용하여 <see cref="P:System.Windows.Int32Rect.Height" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="x">사각형 왼쪽 위 모퉁이의 X 좌표를 지정하는 새 <see cref="P:System.Windows.Int32Rect.X" /> 인스턴스의 <see cref="T:System.Windows.Int32Rect" />입니다.</param>
      <param name="y">사각형 왼쪽 위 모퉁이의 Y 좌표를 지정하는 새 <see cref="P:System.Windows.Int32Rect.Y" /> 인스턴스의 <see cref="T:System.Windows.Int32Rect" />입니다.</param>
      <param name="width">사각형의 너비를 지정하는 새 <see cref="P:System.Windows.Int32Rect.Width" /> 인스턴스의 <see cref="T:System.Windows.Int32Rect" />입니다.</param>
      <param name="height">사각형의 높이를 지정하는 새 <see cref="P:System.Windows.Int32Rect.Height" /> 인스턴스의 <see cref="T:System.Windows.Int32Rect" />입니다.</param>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Object)">
      <summary>지정된 사각형이 이 사각형과 같은지 여부를 확인합니다.</summary>
      <param name="o">현재 사각형과 비교할 개체입니다.</param>
      <returns>
        <paramref name="o" />이 <see cref="T:System.Windows.Int32Rect" />이고 이 사각형과 <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> 및 <see cref="P:System.Windows.Int32Rect.Height" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)">
      <summary>지정된 사각형이 이 사각형과 같은지 여부를 확인합니다.</summary>
      <param name="value">현재 사각형과 비교할 사각형입니다.</param>
      <returns>
        <paramref name="value" />가 이 사각형과 <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> 및 <see cref="P:System.Windows.Int32Rect.Height" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>지정된 사각형이 같은지를 확인합니다.</summary>
      <param name="int32Rect1">비교할 첫 번째 사각형입니다.</param>
      <param name="int32Rect2">비교할 두 번째 사각형입니다.</param>
      <returns>
        <paramref name="int32Rect1" />과 <paramref name="int32Rect2" />가 서로 <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> 및 <see cref="P:System.Windows.Int32Rect.Height" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.GetHashCode">
      <summary>이 사각형의 <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> 및 <see cref="P:System.Windows.Int32Rect.Height" /> 값에서 해시 코드를 만듭니다.</summary>
      <returns>사각형의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>두 사각형이 정확히 같은지 비교합니다.</summary>
      <param name="int32Rect1">비교할 첫 번째 사각형입니다.</param>
      <param name="int32Rect2">비교할 두 번째 사각형입니다.</param>
      <returns>
        <paramref name="int32Rect1" />과 <paramref name="int32Rect2" />가 서로 <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> 및 <see cref="P:System.Windows.Int32Rect.Height" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary>두 사각형이 다른지 비교합니다.</summary>
      <param name="int32Rect1">비교할 첫 번째 사각형입니다.</param>
      <param name="int32Rect2">비교할 두 번째 사각형입니다.</param>
      <returns>
        <paramref name="int32Rect1" />과 <paramref name="int32Rect2" />가 서로 <see cref="P:System.Windows.Int32Rect.X" />, <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" /> 및 <see cref="P:System.Windows.Int32Rect.Height" />가 같으면 <see langword="false" />이고, 그렇지 않으면 이러한 값이 모두 같은 경우 <see langword="true" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Parse(System.String)">
      <summary>지정된 <see cref="T:System.Windows.Int32Rect" /> 표현에서 <see cref="T:System.String" /> 구조체를 만듭니다.</summary>
      <param name="source">
        <see cref="T:System.Windows.Int32Rect" />의 문자열 표현입니다.</param>
      <returns>해당 <see cref="T:System.Windows.Int32Rect" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>지정된 형식을 사용하여 현재 인스턴스 값의 형식을 지정합니다.</summary>
      <param name="format">사용할 형식입니다.</param>
      <param name="provider">값에 형식을 지정하기 위해 사용할 공급자입니다.</param>
      <returns>지정된 형식의 현재 인스턴스 값입니다.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString">
      <summary>이 <see cref="T:System.Windows.Int32Rect" />의 문자열 표현을 만듭니다.</summary>
      <returns>이 <see cref="P:System.Windows.Int32Rect.X" /> 구조체와 동일한 <see cref="P:System.Windows.Int32Rect.Y" />, <see cref="P:System.Windows.Int32Rect.Width" />, <see cref="P:System.Windows.Int32Rect.Height" /> 및 <see cref="T:System.Windows.Int32Rect" /> 값이 포함된 문자열입니다.</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString(System.IFormatProvider)">
      <summary>제공된 <see cref="T:System.Windows.Int32Rect" />를 기준으로 이 <see cref="T:System.IFormatProvider" />의 문자열 표현을 만듭니다.</summary>
      <param name="provider">사용할 서식 공급자입니다. 공급자가 <see langword="null" />이면 현재 문화권이 사용됩니다.</param>
      <returns>이 <see cref="T:System.Windows.Int32Rect" /> 인스턴스의 문자열 표현입니다.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Empty">
      <summary>위치와 넓이가 없는 사각형을 나타내는 특수 값인 빈 사각형을 가져옵니다.</summary>
      <returns>위치와 넓이가 없는 빈 사각형입니다.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.HasArea">
      <summary>
        <see cref="P:System.Windows.Int32Rect.Width" />의 <see cref="P:System.Windows.Int32Rect.Height" /> 및 <see cref="T:System.Windows.Int32Rect" /> 속성이 0보다 큰지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 경우는 <see cref="P:System.Windows.Int32Rect.Width" /> 및 <see cref="P:System.Windows.Int32Rect.Height" /> 의 속성을 <see cref="T:System.Windows.Int32Rect" /> 이 고, 그렇지 않으면 0 보다 큰 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Height">
      <summary>사각형의 높이를 가져오거나 설정합니다.</summary>
      <returns>사각형의 높이입니다. 기본값은 <c>0</c>입니다.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.IsEmpty">
      <summary>사각형이 비어 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see langword="true" /> 사각형이 비어 있는 경우 그렇지 않으면 <see langword="false" />합니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Width">
      <summary>사각형의 너비를 가져오거나 설정합니다.</summary>
      <returns>사각형의 너비입니다. 기본값은 <c>0</c>입니다.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.X">
      <summary>사각형의 왼쪽 위 모퉁이의 X 좌표를 가져오거나 설정합니다.</summary>
      <returns>사각형의 왼쪽 위 모퉁이의 X 좌표입니다. 기본값은 <c>0</c>입니다.</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Y">
      <summary>사각형의 왼쪽 위 모퉁이의 y 좌표를 가져오거나 설정합니다.</summary>
      <returns>사각형의 왼쪽 위 모퉁이의 y 좌표입니다. 기본값은 <c>0</c>입니다.</returns>
    </member>
    <member name="T:System.Windows.Int32RectConverter">
      <summary>다른 형식의 인스턴스를 <see cref="T:System.Windows.Int32Rect" />로 변환하거나 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.Int32RectConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>개체를 지정된 형식에서 <see cref="T:System.Windows.Int32Rect" />의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">형식의 컨텍스트 정보를 설명합니다.</param>
      <param name="sourceType">변환을 위해 확인할 소스 형식입니다.</param>
      <returns>형식을 <see cref="T:System.Windows.Int32Rect" />로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.Windows.Int32Rect" />의 인스턴스를 다른 형식으로 변환할 수 있는지 여부를 결정합니다.</summary>
      <param name="context">형식의 컨텍스트 정보를 설명합니다.</param>
      <param name="destinationType">변환을 위해 이 <see cref="T:System.Windows.Int32Rect" />를 확인 중인 원하는 형식입니다.</param>
      <returns>이 <see cref="T:System.Windows.Int32Rect" />를 <paramref name="destinationType" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정한 형식을 <see cref="T:System.Windows.Int32Rect" />로 변환하려고 합니다.</summary>
      <param name="context">변환에 필요한 컨텍스트 정보를 제공합니다.</param>
      <param name="culture">변환 도중 적용할 문화권 정보입니다.</param>
      <param name="value">변환되는 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">지정된 개체가 NULL이거나 <see cref="T:System.Windows.Int32Rect" />로 변환할 수 없는 형식인 경우</exception>
      <returns>
        <paramref name="value" />를 변환하여 만드는 <see cref="T:System.Windows.Int32Rect" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <see cref="T:System.Windows.Int32Rect" />를 지정한 형식으로 변환하려고 합니다.</summary>
      <param name="context">변환에 필요한 컨텍스트 정보를 제공합니다.</param>
      <param name="culture">변환 도중 적용할 문화권 정보입니다.</param>
      <param name="value">변환할 <see cref="T:System.Windows.Int32Rect" />입니다.</param>
      <param name="destinationType">이 <see cref="T:System.Windows.Int32Rect" />을 변환할 대상 형식입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" />가 <see langword="null" />이거나 <see cref="T:System.Windows.Int32Rect" />가 아니거나 <paramref name="destinationType" />이 변환 가능한 형식 중 하나가 아닌 경우</exception>
      <returns>이 <see cref="T:System.Windows.Int32Rect" />을 변환하여 만드는 개체입니다.</returns>
    </member>
    <member name="T:System.Windows.Interop.ComponentDispatcher">
      <summary>상호 운용 시나리오에서 Win32와 WPF 간에 메시지 펌프의 공유 제어를 사용하도록 설정합니다.</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.EnterThreadModal">
      <summary>스레드가 모달이 될 때 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.LeaveThreadModal">
      <summary>모달 스레드가 모달이 아닌 스레드가 될 때 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage">
      <summary>메시지 펌프가 키보드 메시지를 받을 때 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadIdle">
      <summary>스레드가 유휴 상태일 때 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage">
      <summary>메시지 펌프가 키보드 메시지를 받을 때 발생합니다.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PopModal">
      <summary>모달 스레드가 더 이상 모달이 아님을 나타내기 위해 호출됩니다.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PushModal">
      <summary>스레드가 모달임을 나타내기 위해 호출됩니다.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseIdle">
      <summary>스레드가 유휴 상태임을 나타내기 위해 호출됩니다.</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)">
      <summary>새 메시지를 가능한 처리에 사용할 수 있음을 나타냅니다.</summary>
      <param name="msg">메시지 및 관련 데이터입니다.</param>
      <returns>메시지 루프를 수신 대기하는 모듈 중 하나에서 메시지가 처리된 경우 <see langword="true" />입니다. 메시지 루프의 소유자는 메시지를 무시해야 합니다. 메시지가 처리되지 않았으면 <see langword="false" />입니다. 이 경우 메시지 펌프의 소유자는 Win32 함수 TranslateMessage와 DispatchMessage를 차례로 호출해야 합니다.</returns>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage">
      <summary>마지막으로 발생한 메시지를 가져옵니다.</summary>
      <returns>마지막 메시지입니다.</returns>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.IsThreadModal">
      <summary>스레드가 모달인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>스레드가 모달이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSink">
      <summary>상호 운용 경계 및 HWND 간의 탭 이동, 액셀러레이터 키 및 니모닉을 관리하는 구성 요소에 대한 키보드 싱크를 제공합니다. WPF-Win32 상호 운용 시나리오의 키보드 메시지 관리는 이 인터페이스로 구현됩니다.</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
      <summary>싱크 또는 싱크에 포함된 구성 요소 중 하나에 포커스가 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>싱크 또는 싱크에 포함된 구성 요소 중 하나에 포커스가 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>이 싱크에 대한 니모닉(선택키) 중 하나가 호출될 때 호출됩니다.</summary>
      <param name="msg">니모닉 및 연결된 데이터에 대한 메시지입니다. 이 메시지 구조체를 수정하지 마십시오. 성능상의 이유로 이 구조체는 참조로만 전달됩니다.</param>
      <param name="modifiers">보조키입니다.</param>
      <returns>메시지가 처리되었으면 <see langword="true" />이고, 처리되지 않았으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
      <summary>포함된 구성 요소의 <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 인터페이스를 등록합니다.</summary>
      <param name="sink">포함된 구성 요소의 <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 싱크입니다.</param>
      <returns>포함된 구성 요소의 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 사이트입니다.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
      <summary>싱크의 첫 번째 또는 마지막 탭 정지에 포커스를 설정합니다.</summary>
      <param name="request">포커스를 첫 번째 또는 마지막 탭 정지로 설정해야 하는지 여부를 지정합니다.</param>
      <returns>포커스가 요청대로 설정되었으면 <see langword="true" />이고, 탭 정지가 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>keydown 메시지 수준에서 키보드 입력을 처리합니다.</summary>
      <param name="msg">메시지 및 연결된 데이터입니다. 이 구조체를 수정하지 마십시오. 성능상의 이유로 이 구조체는 참조로만 전달됩니다.</param>
      <param name="modifiers">보조키입니다.</param>
      <returns>메서드 구현에서 메시지가 처리되면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary>
        <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />이 호출되기 전에 WM_CHAR, WM_SYSCHAR, WM_DEADCHAR 및 WM_SYSDEADCHAR 입력 메시지를 처리합니다.</summary>
      <param name="msg">메시지 및 연결된 데이터입니다. 이 구조체를 수정하지 마십시오. 성능상의 이유로 이 구조체는 참조로만 전달됩니다.</param>
      <param name="modifiers">보조키입니다.</param>
      <returns>메시지가 처리되었고 <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />을 호출하지 않아야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
      <summary>구성 요소 컨테이너의 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 인터페이스에 대한 참조를 가져오거나 설정합니다.</summary>
      <returns>컨테이너의 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 인터페이스에 대한 참조입니다.</returns>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSite">
      <summary>컨테이너 내에서 키보드 포커스를 관리합니다.  WPF-Win32 상호 운용 시나리오의 키보드 메시지 관리는 이 인터페이스로 구현됩니다.</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops(System.Windows.Input.TraversalRequest)">
      <summary>마지막 탭 정지에 도달하여 Tab 키를 눌러서 이동할 수 있는 항목이 더 없을 때 포함된 구성 요소에서 호출됩니다.</summary>
      <param name="request">포커스를 첫 번째 또는 마지막 탭 정지로 설정해야 하는지 여부를 지정합니다.</param>
      <returns>이 메서드가 <see langword="true" />를 반환하면 사이트에서 포커스를 다른 구성 요소로 이동한 것입니다. 이 메서드가 <see langword="false" />를 반환하면 포커스가 호출하는 구성 요소 내에 있는 것입니다. 구성 요소는 포커스를 "래핑"한 다음 포함된 첫 번째 탭 정지로 설정해야 합니다.</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.Unregister">
      <summary>이 사이트에서 자식 키보드 입력 싱크의 등록을 취소합니다.</summary>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSite.Sink">
      <summary>이 사이트와 연결된 키보드 싱크를 가져옵니다.</summary>
      <returns>현재 사이트의 <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 인터페이스입니다.</returns>
    </member>
    <member name="T:System.Windows.Interop.MSG">
      <summary>스레드 메시지 큐의 메시지 정보를 포함합니다.</summary>
    </member>
    <member name="P:System.Windows.Interop.MSG.hwnd">
      <summary>창 프로시저에서 메시지를 받는 창에 대한 창 핸들(HWND)을 가져오거나 설정합니다.</summary>
      <returns>창 핸들(HWND)입니다.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.lParam">
      <summary>메시지에 대한 추가 정보를 지정하는 <paramref name="lParam" /> 값을 가져오거나 설정합니다. 정확한 의미는 <see cref="P:System.Windows.Interop.MSG.message" /> 멤버의 값에 따라 달라집니다.</summary>
      <returns>메시지의 <paramref name="lParam" /> 값입니다.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.message">
      <summary>메시지 식별자를 가져오거나 설정합니다.</summary>
      <returns>메시지 식별자입니다.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_x">
      <summary>메시지가 게시될 때 화면에 표시되는 커서 위치의 X 좌표를 가져오거나 설정합니다.</summary>
      <returns>커서 위치의 X 좌표입니다.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_y">
      <summary>메시지가 게시될 때 화면에 표시되는 커서 위치의 Y 좌표를 가져오거나 설정합니다.</summary>
      <returns>커서 위치의 Y 좌표입니다.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.time">
      <summary>메시지가 게시된 시간을 가져오거나 설정합니다.</summary>
      <returns>메시지가 게시된 시간입니다.</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.wParam">
      <summary>메시지에 대한 추가 정보를 지정하는 메시지의 <paramref name="wParam" /> 값을 가져오거나 설정합니다. 정확한 의미는 메시지의 값에 따라 달라집니다.</summary>
      <returns>메시지의 <paramref name="wParam" /> 값입니다.</returns>
    </member>
    <member name="T:System.Windows.Interop.ThreadMessageEventHandler">
      <summary>
        <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage" /> 및 <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage" /> 이벤트를 처리하는 메서드를 나타냅니다.</summary>
      <param name="msg">메시지 데이터를 포함하는 구조체입니다.</param>
      <param name="handled">메시지가 처리되었으면 <see langword="true" />이고, 처리되지 않았으면 <see langword="false" />입니다.</param>
    </member>
    <member name="T:System.Windows.IWeakEventListener">
      <summary>WeakEvent 패턴 및 <see cref="T:System.Windows.WeakEventManager" />를 통해 이벤트를 수신해야 하는 클래스에 대해 이벤트 수신 대기를 지원합니다.</summary>
    </member>
    <member name="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary>중앙 집중화된 이벤트 관리자에서 이벤트를 수신합니다.</summary>
      <param name="managerType">이 메서드를 호출하는 <see cref="T:System.Windows.WeakEventManager" />의 형식입니다.</param>
      <param name="sender">이벤트를 발생시킨 개체입니다.</param>
      <param name="e">이벤트 데이터입니다.</param>
      <returns>수신기가 이벤트를 처리했으면 <see langword="true" />입니다. 수신기가 처리하지 않는 이벤트에 대해 수신기를 등록하기 위해 WPF에서 처리하는 <see cref="T:System.Windows.WeakEventManager" />에서 오류로 간주합니다. 이와 관계없이 메서드는 인식하거나 처리하지 않는 이벤트를 수신하는 경우 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="T:System.Windows.LocalValueEntry">
      <summary>속성 식별자 및 로컬로 설정된 종속성 속성에 대한 속성 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.LocalValueEntry.Equals(System.Object)">
      <summary>두 개의 <see cref="T:System.Windows.LocalValueEntry" /> 인스턴스가 같은지 여부를 확인합니다.</summary>
      <param name="obj">현재 <see cref="T:System.Windows.LocalValueEntry" />과 비교할 <see cref="T:System.Windows.LocalValueEntry" />입니다.</param>
      <returns>이 <see cref="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)" /> 구현에서는 <see cref="P:System.Windows.LocalValueEntry.Property" />의 값을 비교하며 필요한 경우 <see cref="P:System.Windows.LocalValueEntry.Value" />의 값을 비교합니다. <see cref="P:System.Windows.LocalValueEntry.Property" />의 <see cref="T:System.Windows.LocalValueEntry" /> 구성 요소는 값 형식이므로 항상 비트 비교가 수행됩니다. <see cref="P:System.Windows.LocalValueEntry.Value" /> 구성 요소의 경우 이 구현에서는 해당 구성 요소가 값 형식이면 비트 비교를 수행합니다. 참조 형식이 있는 로컬에서 설정한 속성의 경우에는 두 값에 대해 내부적으로 == 연산자만 사용되므로 동작은 해당 형식이 같은지 여부를 결정하는 메커니즘으로 지연됩니다. 기본적으로 값의 참조가 같은지 여부를 비교하므로 결과적으로는 전체 <see cref="T:System.Windows.LocalValueEntry" />의 참조가 같은지를 비교하게 됩니다.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.GetHashCode">
      <summary>이 <see cref="T:System.Windows.LocalValueEntry" />의 해시 코드를 반환합니다.</summary>
      <returns>부호 있는 32비트 정수 값입니다.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>지정된 <see cref="T:System.Windows.LocalValueEntry" /> 인스턴스를 비교하여 같은지 여부를 확인합니다.</summary>
      <param name="obj1">비교할 첫 번째 인스턴스입니다.</param>
      <param name="obj2">비교할 두 번째 인스턴스입니다.</param>
      <returns>
        <paramref name="obj1" />
        <see cref="T:System.Windows.LocalValueEntry" />가 <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEntry" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary>지정된 <see cref="T:System.Windows.LocalValueEnumerator" /> 인스턴스를 비교하여 다른지 여부를 확인합니다.</summary>
      <param name="obj1">비교할 첫 번째 인스턴스입니다.</param>
      <param name="obj2">비교할 두 번째 인스턴스입니다.</param>
      <returns>이 구현에서는 <see cref="P:System.Windows.LocalValueEntry.Property" />의 <see cref="P:System.Windows.LocalValueEntry.Value" /> 값과 <see cref="T:System.Windows.LocalValueEntry" /> 구성 요소의 값을 비교합니다. <see cref="P:System.Windows.LocalValueEntry.Property" />의 <see cref="T:System.Windows.LocalValueEntry" /> 구성 요소는 항상 값 형식이므로 이 비교는 항상 비트 비교입니다. <see cref="P:System.Windows.LocalValueEntry.Value" /> 구성 요소의 경우 이 구현에서는 해당 구성 요소가 값 형식이면 비트 비교를 수행합니다.  
  
참조 형식이 있는 로컬에서 설정한 속성의 경우에는 두 값에 대해 내부적으로 <see langword="==" /> 연산자만 사용되므로 동작은 해당 형식이 같은지 여부를 결정하는 메커니즘으로 지연됩니다. 이는 기본적으로 값의 참조가 같은지 여부를 비교하는 작업입니다</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Property">
      <summary>이 항목에서 나타난 로컬로 설정된 종속성 속성의 식별자를 가져옵니다.</summary>
      <returns>로컬로 설정된 종속성 속성의 식별자입니다.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Value">
      <summary>로컬에서 설정된 종속성 속성의 값을 가져옵니다.</summary>
      <returns>로컬에서 설정된 종속성 속성 값입니다.</returns>
    </member>
    <member name="T:System.Windows.LocalValueEnumerator">
      <summary>
        <see cref="T:System.Windows.DependencyObject" />에 있는 종속성 속성의 로컬 값에 대해 열거형을 지원합니다.</summary>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Equals(System.Object)">
      <summary>제공된 <see cref="T:System.Windows.LocalValueEnumerator" />가 이 <see cref="T:System.Windows.LocalValueEnumerator" />와 같은지 여부를 확인합니다.</summary>
      <param name="obj">현재 <see cref="T:System.Windows.LocalValueEnumerator" />과 비교할 <see cref="T:System.Windows.LocalValueEnumerator" />입니다.</param>
      <returns>지정된 <see langword="true" />가 현재<see cref="T:System.Windows.LocalValueEnumerator" />와 같으면 <see cref="T:System.Windows.LocalValueEnumerator" /> 이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.GetHashCode">
      <summary>현재 <see cref="T:System.Windows.LocalValueEnumerator" />의 해시 코드를 반환합니다.</summary>
      <returns>32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.MoveNext">
      <summary>열거자를 컬렉션의 다음 요소로 이동합니다.</summary>
      <returns>열거자가 다음 요소로 이동한 경우 <see langword="true" />이(가) 반환되고, 컬렉션의 끝을 지난 경우 <see langword="false" />이(가) 반환됩니다.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>지정된 두 <see cref="T:System.Windows.LocalValueEnumerator" /> 개체가 같은지 비교합니다.</summary>
      <param name="obj1">비교할 첫 번째 개체입니다.</param>
      <param name="obj2">비교할 두 번째 개체입니다.</param>
      <returns>
        <paramref name="obj1" />
        <see cref="T:System.Windows.LocalValueEnumerator" />가 <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" />와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary>지정된 두 <see cref="T:System.Windows.LocalValueEnumerator" /> 개체를 비교하여 다른지 여부를 확인합니다.</summary>
      <param name="obj1">비교할 첫 번째 개체입니다.</param>
      <param name="obj2">비교할 두 번째 개체입니다.</param>
      <returns>인스턴스가 서로 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Reset">
      <summary>컬렉션의 첫 번째 요소 앞의 초기 위치에 열거자를 설정합니다.</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Count">
      <summary>컬렉션에 표현된 항목 수를 가져옵니다.</summary>
      <returns>컬렉션의 항목 수입니다.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Current">
      <summary>컬렉션의 현재 요소를 가져옵니다.</summary>
      <returns>컬렉션의 현재 <see cref="T:System.Windows.LocalValueEntry" />입니다.</returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current">
      <summary>이 멤버에 대한 설명은 <see cref="P:System.Collections.IEnumerator.Current" />를 참조하십시오.</summary>
      <returns>컬렉션에 있는 현재 요소입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptions">
      <summary>속성을 serialize하는 방법을 지정합니다.</summary>
    </member>
    <member name="F:System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute">
      <summary>특성으로 serialize되어야 할 속성입니다.</summary>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptionsAttribute">
      <summary>특성의 serialization 플래그를 지정합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.DesignerSerializationOptionsAttribute.#ctor(System.Windows.Markup.DesignerSerializationOptions)">
      <summary>
        <see cref="T:System.Windows.Markup.DesignerSerializationOptionsAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="designerSerializationOptions">속성이 serialize되는 방법을 지정합니다.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="designerSerializationOptions" />는 유효한 <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> 값이 아닙니다.</exception>
    </member>
    <member name="P:System.Windows.Markup.DesignerSerializationOptionsAttribute.DesignerSerializationOptions">
      <summary>특성에 설정된 <see cref="T:System.Windows.Markup.DesignerSerializationOptions" />를 가져옵니다.</summary>
      <returns>serialization 옵션(열거형 값)입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.InternalTypeHelper">
      <summary>내부 형식의 사용을 지원하기 위해 WPF XAML 컴파일러에서 내부적으로 사용되는 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.InternalTypeHelper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary>파생된(생성된) 클래스에서 재정의되는 경우 이벤트 처리기 대리자를 내부 이벤트에 연결합니다.</summary>
      <param name="eventInfo">이벤트에 대한 이벤트 정보입니다(CLR 리플렉션 정보).</param>
      <param name="target">처리기가 연결되는 대상입니다.</param>
      <param name="handler">이벤트 처리기입니다.</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
      <summary>파생된(생성된) 클래스에서 재정의되는 경우 public이 아닌 처리기 메서드를 참조하는 이벤트 대리자를 만듭니다.</summary>
      <param name="delegateType">대리자의 <see cref="T:System.Type" />입니다.</param>
      <param name="target">처리기가 연결되는 대상입니다.</param>
      <param name="handler">처리기 구현의 이름입니다.</param>
      <returns>대리자 참조입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
      <summary>파생된(생성된) 클래스에서 재정의되는 경우 내부 형식의 인스턴스를 만듭니다.</summary>
      <param name="type">만들 <see cref="T:System.Type" />입니다.</param>
      <param name="culture">문화권별 정보입니다.</param>
      <returns>만들어진 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
      <summary>파생된(생성된) 클래스에서 재정의되는 경우 대상 개체의 내부 속성 값을 가져옵니다.</summary>
      <param name="propertyInfo">가져올 속성에 대한 속성 정보입니다.</param>
      <param name="target">필요한 속성 값을 보유한 개체입니다.</param>
      <param name="culture">문화권별 정보입니다.</param>
      <returns>속성 값입니다.</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
      <summary>파생된(생성된) 클래스에서 재정의되는 경우 대상 개체의 내부 속성 값을 설정합니다.</summary>
      <param name="propertyInfo">설정할 속성에 대한 속성 정보입니다.</param>
      <param name="target">필요한 속성 값을 보유한 개체입니다.</param>
      <param name="value">설정할 값입니다.</param>
      <param name="culture">문화권별 정보입니다.</param>
    </member>
    <member name="T:System.Windows.Markup.IReceiveMarkupExtension">
      <summary>출력이 대상 속성과 다른 속성 유형인 태그 확장에서 식 또는 다른 클래스를 받을 수 있는 형식을 선언하는 데 사용하는 메커니즘을 제공합니다. .NET Framework 4 구현에 사용하지 마십시오.</summary>
    </member>
    <member name="M:System.Windows.Markup.IReceiveMarkupExtension.ReceiveMarkupExtension(System.String,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary>속성 값을 제공하는 태그 확장에 대한 처리를 제공합니다. .NET Framework 4 구현에는 사용하지 마십시오. <see cref="T:System.Windows.Markup.IReceiveMarkupExtension" />을 참조하십시오.</summary>
      <param name="property">대상 속성의 이름입니다.</param>
      <param name="markupExtension">들어오는 데이터의 태그 확장 인스턴스입니다.</param>
      <param name="serviceProvider">속성 값에 대한 태그 확장 데이터를 처리할 때 수행해야 하는 추가 서비스를 제공할 수 있습니다.</param>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupObject">
      <summary>개체 트리를 탐색하는 데 사용할 수 있는 개체를 나타내는 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.Primitives.MarkupObject.AssignRootContext(System.Windows.Markup.IValueSerializerContext)">
      <summary>파생 클래스에서 재정의되는 경우 <see cref="T:System.Windows.Markup.ValueSerializer" /> 클래스에 대한 루트 컨텍스트를 할당합니다.</summary>
      <param name="context">루트 컨텍스트를 할당할 <see cref="T:System.Windows.Markup.IValueSerializerContext" />입니다.</param>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Attributes">
      <summary>파생 클래스에서 재정의되는 경우 이 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />와 연결된 특성을 가져옵니다.</summary>
      <returns>특성 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Instance">
      <summary>파생 클래스에서 재정의되는 경우 이 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />에서 나타내는 개체의 인스턴스를 가져옵니다.</summary>
      <returns>개체의 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.ObjectType">
      <summary>파생 클래스에서 재정의되는 경우 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 인스턴스의 형식을 가져옵니다.</summary>
      <returns>개체의 형식입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Properties">
      <summary>파생 클래스에서 재정의되는 경우 XAML에 기록되어야 하는 이 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 인스턴스의 속성을 가져옵니다.</summary>
      <returns>속성입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupProperty">
      <summary>속성과 속성 값에 대한 액세스를 캡슐화하는 태그에 쓰는 동안 사용할 속성 설명을 제공하는 추상 클래스입니다.</summary>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes">
      <summary>파생 클래스에서 재정의되는 경우 이 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />와 연결된 특성을 가져옵니다.</summary>
      <returns>특성 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty">
      <summary>파생 클래스에서 재정의되는 경우 마크업 속성이 종속성 속성으로 구현되면 해당 속성에 대한 <see cref="T:System.Windows.DependencyProperty" /> 식별자를 가져옵니다.</summary>
      <returns>종속성 속성 식별자입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached">
      <summary>파생 클래스에서 재정의되는 경우 이 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />가 연결된 <see cref="T:System.Windows.DependencyProperty" />인지 여부를 확인합니다.</summary>
      <returns>속성이 연결된 <see cref="T:System.Windows.DependencyProperty" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite">
      <summary>파생 클래스에서 재정의되는 경우 이 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />가 복합 속성인지 여부를 확인합니다.</summary>
      <returns>이 속성이 복합 속성이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument">
      <summary>파생 클래스에서 재정의되는 경우 이 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />가 생성자 인수를 나타내는지 여부를 확인합니다.</summary>
      <returns>이 속성이 데이터 생성자 인수를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent">
      <summary>파생 클래스에서 재정의되는 경우 이 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />가 컬렉션의 직접 콘텐츠를 나타내는지 여부를 확인합니다.</summary>
      <returns>속성이 직접 콘텐츠를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey">
      <summary>파생 클래스에서 재정의되는 경우 이 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />가 사전에 항목을 저장하기 위해 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" />에서 사용한 키를 나타내는지 여부를 확인합니다.</summary>
      <returns>속성이 키를 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString">
      <summary>파생 클래스에서 재정의되는 경우 이 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />가 속성의 인스턴스를 만들기 위해 형식 변환기에 전달된 텍스트를 나타내는지 여부 또는 생성자를 사용해야 하는지 여부를 확인합니다.</summary>
      <returns>이 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />가 문자열을 나타내면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Items">
      <summary>파생 클래스에서 재정의되는 경우 이 속성의 값을 구성하는 항목을 가져옵니다.</summary>
      <returns>이 속성의 값을 구성하는 항목입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Name">
      <summary>파생 클래스에서 재정의되는 경우 진단 및 오류 보고에 사용되는 이름을 가져옵니다.</summary>
      <returns>식별자 속성 이름입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor">
      <summary>파생 클래스에서 재정의되는 경우 태그 속성에 대한 <see cref="T:System.ComponentModel.PropertyDescriptor" />를 가져옵니다.</summary>
      <returns>속성 설명자입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType">
      <summary>파생 클래스에서 재정의된 경우 속성의 CLR 형식을 가져옵니다.</summary>
      <returns>CLR 형식입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue">
      <summary>파생된 클래스에서 재정의되는 경우 이 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />의 문자열 값을 가져옵니다.</summary>
      <returns>문자열 값입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences">
      <summary>파생 클래스에서 재정의되는 경우 이 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />가 자신의 값을 문자열로 serialize할 때 참조할 형식 집합을 가져옵니다.</summary>
      <returns>형식 집합입니다.</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Value">
      <summary>파생된 클래스에 재정의될 때 이 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" />의 현재 값을 가져옵니다.</summary>
      <returns>현재 값입니다.</returns>
    </member>
    <member name="T:System.Windows.Markup.ServiceProviders">
      <summary>서비스를 추가하는 메서드를 사용하여 <see cref="T:System.IServiceProvider" /> 인터페이스에 대한 구현을 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.#ctor">
      <summary>
        <see cref="T:System.Windows.Markup.ServiceProviders" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.AddService(System.Type,System.Object)">
      <summary>서비스를 목록에 추가합니다.</summary>
      <param name="serviceType">새 서비스의 서비스 형식입니다.</param>
      <param name="service">서비스 구현 클래스입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="serviceType" /> 또는 <paramref name="service" />가 <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentException">이미 사전에 있는 서비스를 추가하려고 시도했습니다.</exception>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.GetService(System.Type)">
      <summary>지정된 형식의 서비스 개체를 가져옵니다.</summary>
      <param name="serviceType">가져올 서비스 개체의 형식입니다.</param>
      <returns>
        <paramref name="serviceType" /> 형식의 서비스 구현입니다. <paramref name="serviceType" /> 형식에 대해 저장된 서비스가 없는 경우 <see langword="null" />일 수 있습니다.</returns>
    </member>
    <member name="T:System.Windows.Media.Converters.MatrixValueSerializer">
      <summary>
        <see cref="T:System.String" /> 인스턴스를 <see cref="T:System.Windows.Media.Matrix" /> 인스턴스로 변환하거나 그 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.#ctor">
      <summary>
        <see cref="T:System.Windows.Media.Converters.MatrixValueSerializer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>지정된 <see cref="T:System.String" />을 <see cref="T:System.Windows.Media.Matrix" />의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 확인할 문자열입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>값을 변환할 수 있으면 <see langword="true" />이고, 변환할 수 없으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" />의 인스턴스를 <see cref="T:System.String" />으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="value">변환을 위해 확인할 <see cref="T:System.Windows.Media.Matrix" />의 인스턴스입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" />가 <see cref="T:System.Windows.Media.Int32Collection" />이 아닌 경우 발생한 경우</exception>
      <returns>
        <paramref name="value" />를 <see cref="T:System.String" />으로 변환할 수 있으면 <see langword="true" />이고, 그러지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.String" />을 <see cref="T:System.Windows.Media.Matrix" />으로 변환합니다.</summary>
      <param name="value">
        <see cref="T:System.String" />로 변환할 <see cref="T:System.Windows.Media.Matrix" /> 값입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>지정된 <paramref name="value" />을 기반으로 하는 <see cref="T:System.Windows.Media.Matrix" />의 새 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" />의 인스턴스를 <see cref="T:System.String" />으로 변환합니다.</summary>
      <param name="value">변환을 위해 확인할 <see cref="T:System.Windows.Media.Matrix" />의 인스턴스입니다.</param>
      <param name="context">변환에 사용되는 컨텍스트 정보입니다.</param>
      <returns>제공된 <see cref="T:System.String" /> 개체의 <see cref="T:System.Windows.Media.Matrix" /> 표현입니다.</returns>
    </member>
    <member name="T:System.Windows.Media.DisableDpiAwarenessAttribute">
      <summary>WPF 애플리케이션에서 모든 사용자 인터페이스 요소에 대해 dpi(인치당 도트 수) 인식 기능을 비활성화할 수 있게 합니다.</summary>
    </member>
    <member name="M:System.Windows.Media.DisableDpiAwarenessAttribute.#ctor">
      <summary>
        <see cref="T:System.Windows.Media.DisableDpiAwarenessAttribute" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Windows.Media.Matrix">
      <summary>2-D 공간에서의 변형에 사용되는 3x3 유사 변형 매트릭스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="m11">새 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 <see cref="P:System.Windows.Media.Matrix.M11" /> 계수입니다.</param>
      <param name="m12">새 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 <see cref="P:System.Windows.Media.Matrix.M12" /> 계수입니다.</param>
      <param name="m21">새 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 <see cref="P:System.Windows.Media.Matrix.M21" /> 계수입니다.</param>
      <param name="m22">새 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 <see cref="P:System.Windows.Media.Matrix.M22" /> 계수입니다.</param>
      <param name="offsetX">새 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 <see cref="P:System.Windows.Media.Matrix.OffsetX" /> 계수입니다.</param>
      <param name="offsetY">새 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 계수입니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)">
      <summary>지정한 <see cref="T:System.Windows.Media.Matrix" /> 구조체를 이 <see cref="T:System.Windows.Media.Matrix" /> 구조체 뒤에 추가합니다.</summary>
      <param name="matrix">이 <see cref="T:System.Windows.Media.Matrix" /> 구조체 뒤에 추가할 <see cref="T:System.Windows.Media.Matrix" /> 구조체입니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Object)">
      <summary>지정한 <see cref="T:System.Object" />가 이 <see cref="T:System.Windows.Media.Matrix" />와 같은 <see cref="T:System.Windows.Media.Matrix" /> 구조체인지 여부를 결정합니다.</summary>
      <param name="o">비교할 <see cref="T:System.Object" />입니다.</param>
      <returns>
        <paramref name="o" />가 이 <see cref="T:System.Windows.Media.Matrix" /> 구조체와 같은 <see cref="T:System.Windows.Media.Matrix" /> 구조체이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)">
      <summary>지정한 <see cref="T:System.Windows.Media.Matrix" /> 구조체가 이 인스턴스와 같은지 여부를 결정합니다.</summary>
      <param name="value">이 인스턴스와 비교할 <see cref="T:System.Windows.Media.Matrix" />의 인스턴스입니다.</param>
      <returns>인스턴스가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>지정한 두 <see cref="T:System.Windows.Media.Matrix" /> 구조체가 같은지 여부를 결정합니다.</summary>
      <param name="matrix1">비교할 첫 번째 <see cref="T:System.Windows.Media.Matrix" /> 구조체입니다.</param>
      <param name="matrix2">비교할 두 번째 <see cref="T:System.Windows.Media.Matrix" /> 구조체입니다.</param>
      <returns>
        <paramref name="matrix1" />과 <paramref name="matrix2" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.GetHashCode">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 해시 코드를 반환합니다.</summary>
      <returns>이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Invert">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체를 반전합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Windows.Media.Matrix" /> 구조체를 반전할 수 없는 경우</exception>
    </member>
    <member name="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" /> 구조체에 다른 <see cref="T:System.Windows.Media.Matrix" /> 구조체를 곱합니다.</summary>
      <param name="trans1">곱할 첫 번째 <see cref="T:System.Windows.Media.Matrix" /> 구조체입니다.</param>
      <param name="trans2">곱할 두 번째 <see cref="T:System.Windows.Media.Matrix" /> 구조체입니다.</param>
      <returns>
        <paramref name="trans1" />에 <paramref name="trans2" />를 곱한 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>지정한 두 <see cref="T:System.Windows.Media.Matrix" /> 구조체가 같은지 여부를 결정합니다.</summary>
      <param name="matrix1">비교할 첫 번째 <see cref="T:System.Windows.Media.Matrix" /> 구조체입니다.</param>
      <param name="matrix2">비교할 두 번째 <see cref="T:System.Windows.Media.Matrix" /> 구조체입니다.</param>
      <returns>
        <paramref name="matrix1" />과 <paramref name="matrix2" />가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>지정한 두 <see cref="T:System.Windows.Media.Matrix" /> 구조체가 같지 않은지 여부를 결정합니다.</summary>
      <param name="matrix1">비교할 첫 번째 <see cref="T:System.Windows.Media.Matrix" /> 구조체입니다.</param>
      <param name="matrix2">비교할 두 번째 <see cref="T:System.Windows.Media.Matrix" /> 구조체입니다.</param>
      <returns>
        <paramref name="matrix1" />과 <paramref name="matrix2" />가 같지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" /> 구조체에 다른 <see cref="T:System.Windows.Media.Matrix" /> 구조체를 곱합니다.</summary>
      <param name="trans1">곱할 첫 번째 <see cref="T:System.Windows.Media.Matrix" /> 구조체입니다.</param>
      <param name="trans2">곱할 두 번째 <see cref="T:System.Windows.Media.Matrix" /> 구조체입니다.</param>
      <returns>
        <paramref name="trans1" />에 <paramref name="trans2" />를 곱한 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Parse(System.String)">
      <summary>매트릭스의 <see cref="T:System.String" /> 표현을 해당 <see cref="T:System.Windows.Media.Matrix" /> 구조체로 변환합니다.</summary>
      <param name="source">매트릭스의 <see cref="T:System.String" /> 표현입니다.</param>
      <returns>해당 <see cref="T:System.Windows.Media.Matrix" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)">
      <summary>지정한 <see cref="T:System.Windows.Media.Matrix" /> 구조체를 이 <see cref="T:System.Windows.Media.Matrix" /> 구조체 앞에 추가합니다.</summary>
      <param name="matrix">이 <see cref="T:System.Windows.Media.Matrix" /> 구조체 앞에 추가할 <see cref="T:System.Windows.Media.Matrix" /> 구조체입니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Rotate(System.Double)">
      <summary>원점을 기준으로 지정한 각도만큼 이 <see cref="T:System.Windows.Media.Matrix" /> 구조체에 회전을 적용합니다.</summary>
      <param name="angle">회전 각도입니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)">
      <summary>지정한 점을 기준으로 이 매트릭스를 회전합니다.</summary>
      <param name="angle">이 매트릭스를 회전할 각도(도)입니다.</param>
      <param name="centerX">이 매트릭스를 회전할 때 기준으로 사용할 점의 X 좌표입니다.</param>
      <param name="centerY">이 매트릭스를 회전할 때 기준으로 사용할 점의 Y 좌표입니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
      <summary>지정한 점을 기준으로 하는 지정한 각도의 회전을 이 <see cref="T:System.Windows.Media.Matrix" /> 구조체 앞에 추가합니다.</summary>
      <param name="angle">회전 각도(도)입니다.</param>
      <param name="centerX">회전 중심의 X 좌표입니다.</param>
      <param name="centerY">회전 중심의 Y 좌표입니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)">
      <summary>지정한 각도의 회전을 이 <see cref="T:System.Windows.Media.Matrix" /> 구조체 앞에 추가합니다.</summary>
      <param name="angle">앞에 추가할 회전 각도입니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)">
      <summary>지정한 배율 벡터를 이 <see cref="T:System.Windows.Media.Matrix" /> 구조체 뒤에 추가합니다.</summary>
      <param name="scaleX">X축 방향으로 이 <see cref="T:System.Windows.Media.Matrix" />의 배율을 조정할 값입니다.</param>
      <param name="scaleY">Y축 방향으로 이 <see cref="T:System.Windows.Media.Matrix" />의 배율을 조정할 값입니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
      <summary>지정한 점을 기준으로 지정한 크기만큼 이 <see cref="T:System.Windows.Media.Matrix" />의 배율을 조정합니다.</summary>
      <param name="scaleX">X축 방향으로 이 <see cref="T:System.Windows.Media.Matrix" />의 배율을 조정할 크기입니다.</param>
      <param name="scaleY">Y축 방향으로 이 <see cref="T:System.Windows.Media.Matrix" />의 배율을 조정할 크기입니다.</param>
      <param name="centerX">배율 조정 작업의 중심점의 X 좌표입니다.</param>
      <param name="centerY">배율 조정 작업의 중심점의 Y 좌표입니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
      <summary>지정한 점을 기준으로 하는 지정한 배율 조정을 이 <see cref="T:System.Windows.Media.Matrix" /> 앞에 추가합니다.</summary>
      <param name="scaleX">X축 배율 인수입니다.</param>
      <param name="scaleY">Y축 배율 인수입니다.</param>
      <param name="centerX">배율 조정 작업을 수행할 때 기준으로 사용할 점의 X 좌표입니다.</param>
      <param name="centerY">배율 조정 작업을 수행할 때 기준으로 사용할 점의 Y 좌표입니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)">
      <summary>지정한 배율 벡터를 이 <see cref="T:System.Windows.Media.Matrix" /> 구조체 앞에 추가합니다.</summary>
      <param name="scaleX">X축 방향으로 이 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 배율을 조정할 값입니다.</param>
      <param name="scaleY">Y축 방향으로 이 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 배율을 조정할 값입니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SetIdentity">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체를 항등 매트릭스로 변경합니다.</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)">
      <summary>X축 및 Y축 방향의 지정한 각도의 기울이기를 이 <see cref="T:System.Windows.Media.Matrix" /> 구조체 뒤에 추가합니다.</summary>
      <param name="skewX">이 <see cref="T:System.Windows.Media.Matrix" />를 기울일 X축 방향의 각도입니다.</param>
      <param name="skewY">이 <see cref="T:System.Windows.Media.Matrix" />를 기울일 Y축 방향의 각도입니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)">
      <summary>X축 및 Y축 방향의 지정한 각도의 기울이기를 이 <see cref="T:System.Windows.Media.Matrix" /> 구조체 앞에 추가합니다.</summary>
      <param name="skewX">이 <see cref="T:System.Windows.Media.Matrix" />를 기울일 X축 방향의 각도입니다.</param>
      <param name="skewY">이 <see cref="T:System.Windows.Media.Matrix" />를 기울일 Y축 방향의 각도입니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>지정된 형식을 사용하여 현재 인스턴스 값의 형식을 지정합니다.</summary>
      <param name="format">사용할 형식입니다.  
  
또는 
<see cref="T:System.IFormattable" /> 구현의 형식에 대해 정의된 기본 형식을 사용하려는 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <param name="provider">값의 형식을 지정하는 데 사용할 공급자입니다.  
  
또는 
운영 체제의 현재 로캘 설정에서 숫자 형식 정보를 가져오려는 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <returns>지정된 형식의 현재 인스턴스 값입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString">
      <summary>이 <see cref="T:System.String" /> 구조체의 <see cref="T:System.Windows.Media.Matrix" /> 표현을 만듭니다.</summary>
      <returns>이 <see cref="T:System.String" />의 <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" /> 및 <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 값이 포함된 <see cref="T:System.Windows.Media.Matrix" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)">
      <summary>문화권별 형식 지정 정보를 사용하여 이 <see cref="T:System.String" /> 구조체의 <see cref="T:System.Windows.Media.Matrix" /> 표현을 만듭니다.</summary>
      <param name="provider">문화권별 형식 지정 정보입니다.</param>
      <returns>이 <see cref="T:System.String" />의 <see cref="P:System.Windows.Media.Matrix.M11" />, <see cref="P:System.Windows.Media.Matrix.M12" />, <see cref="P:System.Windows.Media.Matrix.M21" />, <see cref="P:System.Windows.Media.Matrix.M22" />, <see cref="P:System.Windows.Media.Matrix.OffsetX" /> 및 <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 값이 포함된 <see cref="T:System.Windows.Media.Matrix" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" />를 사용하여 지정한 점을 변환한 다음 결과를 반환합니다.</summary>
      <param name="point">변형할 점입니다.</param>
      <returns>이 <see cref="T:System.Windows.Media.Matrix" />를 사용하여 <paramref name="point" />를 변환한 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point[])">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" />를 사용하여 지정한 점을 변환합니다.</summary>
      <param name="points">변환할 점입니다. 배열의 원래 지점은 해당 변환 값으로 대체됩니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector)">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" />를 사용하여 지정한 벡터를 변환합니다.</summary>
      <param name="vector">변환할 벡터입니다.</param>
      <returns>이 <see cref="T:System.Windows.Media.Matrix" />를 사용하여 <paramref name="vector" />를 변환한 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector[])">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" />를 사용하여 지정한 벡터를 변환합니다.</summary>
      <param name="vectors">변환할 벡터입니다. 배열의 원래 벡터는 해당 변환 값으로 대체됩니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)">
      <summary>지정한 오프셋 변환을 이 <see cref="T:System.Windows.Media.Matrix" /> 구조체 뒤에 추가합니다.</summary>
      <param name="offsetX">X축을 기준으로 이 <see cref="T:System.Windows.Media.Matrix" />를 오프셋할 크기입니다.</param>
      <param name="offsetY">Y축을 기준으로 이 <see cref="T:System.Windows.Media.Matrix" />를 오프셋할 크기입니다.</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)">
      <summary>지정한 오프셋 변환을 이 <see cref="T:System.Windows.Media.Matrix" /> 구조체 앞에 추가합니다.</summary>
      <param name="offsetX">X축을 기준으로 이 <see cref="T:System.Windows.Media.Matrix" />를 오프셋할 크기입니다.</param>
      <param name="offsetY">Y축을 기준으로 이 <see cref="T:System.Windows.Media.Matrix" />를 오프셋할 크기입니다.</param>
    </member>
    <member name="P:System.Windows.Media.Matrix.Determinant">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 행렬식을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Windows.Media.Matrix" />의 행렬식입니다.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.HasInverse">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체를 반전할 수 있는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Matrix" />에 역이 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.Identity">
      <summary>항등 <see cref="T:System.Windows.Media.Matrix" />를 가져옵니다.</summary>
      <returns>항등 행렬입니다.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.IsIdentity">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체가 항등 행렬인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Media.Matrix" /> 구조체가 항등 행렬이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M11">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 첫 번째 행과 첫 번째 열 값을 가져오거나 설정합니다.</summary>
      <returns>이 <see cref="T:System.Windows.Media.Matrix" />의 첫 번째 행과 첫 번째 열 값입니다. 기본값은 1입니다.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M12">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 첫 번째 행과 두 번째 열 값을 가져오거나 설정합니다.</summary>
      <returns>이 <see cref="T:System.Windows.Media.Matrix" />의 첫 번째 행과 첫 번째 열 값입니다. 기본값은 0입니다.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M21">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 두 번째 행과 첫 번째 열 값을 가져오거나 설정합니다.</summary>
      <returns>이 <see cref="T:System.Windows.Media.Matrix" />의 두 번째 행과 첫 번째 열 값입니다. 기본값은 0입니다.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M22">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 두 번째 행과 두 번째 열 값을 가져오거나 설정합니다.</summary>
      <returns>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 두 번째 행과 두 번째 열 값입니다. 기본값은 1입니다.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetX">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 세 번째 행과 첫 번째 열 값을 가져오거나 설정합니다.</summary>
      <returns>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 세 번째 행과 첫 번째 열 값입니다. 기본값은 0입니다.</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetY">
      <summary>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 세 번째 행과 두 번째 열 값을 가져오거나 설정합니다.</summary>
      <returns>이 <see cref="T:System.Windows.Media.Matrix" /> 구조체의 세 번째 행과 두 번째 열 값입니다. 기본값은 0입니다.</returns>
    </member>
    <member name="T:System.Windows.Media.MatrixConverter">
      <summary>다른 형식의 인스턴스를 <see cref="T:System.Windows.Media.Matrix" />으로 변환하거나 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.Media.MatrixConverter" />의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>개체를 특정 형식에서 <see cref="T:System.Windows.Media.Matrix" />의 인스턴스로 변환할 수 있는지 여부를 결정합니다.</summary>
      <param name="context">형식에 대한 컨텍스트 정보입니다.</param>
      <param name="sourceType">변환을 위해 확인할 소스 형식입니다.</param>
      <returns>형식을 <see cref="T:System.Windows.Media.Matrix" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" />의 인스턴스를 다른 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">형식에 대한 컨텍스트 정보입니다.</param>
      <param name="destinationType">변환을 위해 이 <see cref="T:System.Windows.Media.Matrix" />를 확인 중인 원하는 형식입니다.</param>
      <returns>이 <see cref="T:System.Windows.Media.Matrix" />를 <paramref name="destinationType" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 개체를 <see cref="T:System.Windows.Media.Matrix" />로 변환하려고 합니다.</summary>
      <param name="context">형식에 대한 컨텍스트 정보입니다.</param>
      <param name="culture">변환되는 유형의 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환되는 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">지정한 개체가 null이거나 <see cref="T:System.Windows.Media.Matrix" />로 변환할 수 없는 형식인 경우</exception>
      <returns>
        <paramref name="value" />를 변환하여 만드는 <see cref="T:System.Windows.Media.Matrix" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <see cref="T:System.Windows.Media.Matrix" />를 지정된 형식으로 변환하려고 합니다.</summary>
      <param name="context">형식에 대한 컨텍스트 정보입니다.</param>
      <param name="culture">변환되는 유형의 <see cref="T:System.Globalization.CultureInfo" />입니다.</param>
      <param name="value">변환할 <see cref="T:System.Windows.Media.Matrix" />입니다.</param>
      <param name="destinationType">이 <see cref="T:System.Windows.Media.Matrix" />을 변환할 대상 형식입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" />가 null이거나 <see cref="T:System.Windows.Media.Matrix" />가 아닌 경우 또는 <paramref name="destinationType" />이 올바른 변환 형식이 아닌 경우</exception>
      <returns>이 <see cref="T:System.Windows.Media.Matrix" />을 변환하여 만드는 개체입니다.</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormattingMode">
      <summary>
        <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> 클래스에서 지원하는 형식 지정 메서드를 정의합니다.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormattingMode.Display">
      <summary>
        <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" />가 GDI 호환 글꼴 메트릭을 사용하여 텍스트를 레이아웃함을 나타냅니다.</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormattingMode.Ideal">
      <summary>
        <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" />가 이상적인 글꼴 메트릭을 사용하여 텍스트를 레이아웃함을 나타냅니다.</summary>
    </member>
    <member name="T:System.Windows.NameScope">
      <summary>이름-개체 매핑을 특정 XAML 이름 범위에 저장하거나 검색하는 <see cref="T:System.Windows.Markup.INameScope" /> 메서드에 대한 기본 WPF 지원을 구현합니다. 요소 수준에서 더 간단하게 XAML 이름 범위 이름을 동적으로 가져오거나 설정할 수 있도록 연결된 속성 지원을 추가합니다.</summary>
    </member>
    <member name="F:System.Windows.NameScope.NameScopeProperty">
      <summary>
        <see cref="P:System.Windows.NameScope.NameScope" /> 연결된 속성을 식별합니다.</summary>
    </member>
    <member name="M:System.Windows.NameScope.#ctor">
      <summary>
        <see cref="T:System.Windows.NameScope" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>컬렉션에 항목을 추가합니다.</summary>
      <param name="item">XAML 이름 범위에 추가할 이름 매핑을 나타내는 <see cref="T:System.Collections.Generic.KeyValuePair`2" />(키는 <see cref="T:System.String" />, 값은 <see cref="T:System.Object" />)입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="item" />의 구성 요소 중 하나 또는 둘 다 <see langword="null" />입니다.</exception>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.String,System.Object)">
      <summary>컬렉션에 항목을 추가합니다.</summary>
      <param name="key">추가할 XAML 이름 범위 매핑의 이름이 되는 문자열 키입니다.</param>
      <param name="value">추가할 XAML 이름 범위 매핑의 개체 참조가 되는 개체 값입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 또는 <paramref name="value" />가 <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.NameScope.Clear">
      <summary>컬렉션에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.Windows.NameScope.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>컬렉션에 지정된 항목이 포함되는지 여부를 확인합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />(키는 <see cref="T:System.String" />, 값은 <see cref="T:System.Object" />)로 지정된, 컬렉션에서 찾을 항목입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <returns>지정한 <see cref="T:System.Collections.Generic.KeyValuePair`2" />가 <see cref="T:System.Windows.NameScope" />의 기존 매핑을 식별하면 <see langword="true" />입니다. 지정한 <see cref="T:System.Collections.Generic.KeyValuePair`2" />가 현재 <see cref="T:System.Windows.NameScope" />에 존재하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.NameScope.ContainsKey(System.String)">
      <summary>제공된 이름이 이 <see cref="T:System.Windows.NameScope" />에 이미 존재하는지 여부를 반환합니다.</summary>
      <param name="key">찾을 문자열 키입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />이(가) <see langword="null" />인 경우</exception>
      <returns>지정한 <paramref name="key" />가 이 <see cref="T:System.Windows.NameScope" />의 기존 매핑에 대한 이름을 식별하면 <see langword="true" />입니다. 지정한 <paramref name="key" />가 현재 <see cref="T:System.Windows.NameScope" />에 존재하지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.NameScope.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary>특정 배열 인덱스부터 시작하여 컬렉션의 요소를 배열에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사된 요소의 대상인 1차원 배열입니다. 배열에는 0부터 시작하는 인덱스가 있어야 합니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="M:System.Windows.NameScope.FindName(System.String)">
      <summary>이 <see cref="T:System.Windows.NameScope" />에서 제공된 이름 문자열에 따라 유지 관리하는 XAML 이름 범위에서 해당하는 개체를 반환합니다.</summary>
      <param name="name">개체 부분을 검색할 기존 매핑의 이름 부분입니다.</param>
      <returns>
        <paramref name="name" />과 매핑되어 있는 요청된 개체입니다. <paramref name="name" />이 <see langword="null" /> 또는 빈 문자열로 제공되었거나 일치하는 개체가 없으면 <see langword="null" />을 반환할 수 있습니다.</returns>
    </member>
    <member name="M:System.Windows.NameScope.GetNameScope(System.Windows.DependencyObject)">
      <summary>
        <see cref="P:System.Windows.NameScope.NameScope" /> 연결된 속성에 대한 연결된 속성 get 접근자를 제공합니다.</summary>
      <param name="dependencyObject">XAML 이름 범위를 가져올 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" />이(가) <see langword="null" />인 경우</exception>
      <returns>
        <see cref="T:System.Windows.Markup.INameScope" /> 인스턴스와 같은 XAML 이름 범위입니다.</returns>
    </member>
    <member name="M:System.Windows.NameScope.RegisterName(System.String,System.Object)">
      <summary>현재 XAML 이름 범위에 새 이름-개체 쌍을 등록합니다.</summary>
      <param name="name">지정된 개체를 매핑하는 데 사용할 이름입니다.</param>
      <param name="scopedElement">지정된 이름에 매핑할 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 또는 <paramref name="scopedElement" /> 가 <see langword="null" />로 지정된 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 이 빈 문자열로 지정된 경우 
또는 
 지정된<paramref name="name" /> 이 XAML 이름에 유효하지 않은 문자를 포함하여 파서에서 거부된 경우 
또는 
 지정된<paramref name="name" /> 으로 인해 중복 이름이 등록되는 경우</exception>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary>컬렉션에서 특정 개체를 제거합니다.</summary>
      <param name="item">
        <see cref="T:System.Collections.Generic.KeyValuePair`2" />(키는 <see cref="T:System.String" />, 값은 <see cref="T:System.Object" />)로 지정된, 컬렉션에서 제거할 개체입니다.</param>
      <returns>항목이 컬렉션에서 제거된 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 항목을 컬렉션에서 찾을 수 없는 경우에도 <see langword="false" />가 반환됩니다.</returns>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.String)">
      <summary>컬렉션에서 지정된 이름의 매핑을 제거합니다.</summary>
      <param name="key">제거할 XAML 이름 범위 매핑의 이름이 되는 문자열 키입니다.</param>
      <returns>항목이 컬렉션에서 제거된 경우 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다. 항목을 컬렉션에서 찾을 수 없는 경우에도 <see langword="false" />가 반환됩니다.</returns>
    </member>
    <member name="M:System.Windows.NameScope.SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)">
      <summary>
        <see cref="P:System.Windows.NameScope.NameScope" /> 연결된 속성에 대한 연결된 속성 set 접근자를 제공합니다.</summary>
      <param name="dependencyObject">XAML 이름 범위를 변경할 개체입니다.</param>
      <param name="value">인터페이스 캐스트를 사용하는 새 XAML 이름 범위입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dependencyObject" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션 전체를 반복하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션을 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션 전체를 반복하는 열거자입니다.</returns>
    </member>
    <member name="M:System.Windows.NameScope.TryGetValue(System.String,System.Object@)">
      <summary>지정한 키와 연결된 값을 가져옵니다.</summary>
      <param name="key">가져올 값의 키입니다.</param>
      <param name="value">이 메서드가 반환될 때 지정된 키가 있으면 해당 키와 연결된 값을 포함하고, 그렇지 않으면 null 개체를 포함합니다. 이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
      <returns>
        <paramref name="key" />로 제공된 이름에 대한 매핑이 <see cref="T:System.Windows.NameScope" />에 들어 있으면 <see langword="true" />입니다. 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.NameScope.UnregisterName(System.String)">
      <summary>XAML 이름 범위에서 이름-개체 매핑을 제거합니다.</summary>
      <param name="name">제거할 매핑의 이름입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="name" /> 이 빈 문자열로 지정된 경우  
  
또는 
 지정된<paramref name="name" /> 이 등록되지 않은 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="P:System.Windows.NameScope.Count">
      <summary>이 <see cref="T:System.Windows.NameScope" />의 매핑된 이름 컬렉션에 있는 항목 수를 반환합니다.</summary>
      <returns>컬렉션의 항목 수입니다.</returns>
    </member>
    <member name="P:System.Windows.NameScope.IsReadOnly">
      <summary>컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>항상 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="P:System.Windows.NameScope.Item(System.String)">
      <summary>지정된 키를 가진 항목을 가져오거나 설정합니다.</summary>
      <param name="key">가져오거나 설정할 XAML 이름 매핑에 대한 문자열 이름입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" />는 <see langword="null" />로 제공됩니다.  
  
또는 
 <paramref name="value" />는 설정 작업을 위해 <see langword="null" />로 제공합니다.</exception>
      <returns>
        <paramref name="key" />로 제공된 XAML 이름을 기준으로 매핑되어 있는 개체의 값입니다.</returns>
    </member>
    <member name="P:System.Windows.NameScope.Keys">
      <summary>
        <see cref="T:System.Windows.NameScope" /> 사전에 있는 키의 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.NameScope" /> 사전에 있는 키의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Windows.NameScope.NameScope">
      <summary>동적으로 연결된 <see cref="T:System.Windows.NameScope" /> 인스턴스를 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Windows.NameScope.Values">
      <summary>
        <see cref="T:System.Windows.NameScope" /> 사전에 있는 값의 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.NameScope" /> 사전에 있는 값의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Windows.Point">
      <summary>2차원 공간에서 x 및 y 좌표 쌍을 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
      <summary>지정된 좌표가 들어 있는 새 <see cref="T:System.Windows.Point" /> 구조체를 만듭니다.</summary>
      <param name="x">새 <see cref="T:System.Windows.Point" /> 구조체의 X 좌표입니다.</param>
      <param name="y">새 <see cref="T:System.Windows.Point" /> 구조체의 Y 좌표입니다.</param>
    </member>
    <member name="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)">
      <summary>
        <see cref="T:System.Windows.Vector" />에 <see cref="T:System.Windows.Point" />를 추가하고 그 결과를 <see cref="T:System.Windows.Point" /> 구조체로 반환합니다.</summary>
      <param name="point">추가할 <see cref="T:System.Windows.Point" /> 구조체입니다.</param>
      <param name="vector">추가할 <see cref="T:System.Windows.Vector" /> 구조체입니다.</param>
      <returns>
        <paramref name="point" />과 <paramref name="vector" />의 합계를 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Object)">
      <summary>지정된 <see cref="T:System.Object" />가 <see cref="T:System.Windows.Point" />인지 여부와 이 <see cref="T:System.Windows.Point" />와 동일한 좌표가 들어 있는지 여부를 확인합니다.</summary>
      <param name="o">비교할 <see cref="T:System.Object" />입니다.</param>
      <returns>
        <paramref name="o" />가 <see cref="T:System.Windows.Point" />이고 <see cref="P:System.Windows.Point.X" /> 및 <see cref="P:System.Windows.Point.Y" /> 값이 이 <see cref="T:System.Windows.Point" />와 동일하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point)">
      <summary>두 <see cref="T:System.Windows.Point" /> 구조체가 같은지 여부를 비교합니다.</summary>
      <param name="value">이 인스턴스와 비교할 점입니다.</param>
      <returns>두 <see cref="T:System.Windows.Point" /> 구조체의 <see cref="P:System.Windows.Point.X" /> 및 <see cref="P:System.Windows.Point.Y" /> 값이 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)">
      <summary>두 <see cref="T:System.Windows.Point" /> 구조체가 같은지 여부를 비교합니다.</summary>
      <param name="point1">비교할 첫 번째 점입니다.</param>
      <param name="point2">비교할 두 번째 점입니다.</param>
      <returns>
        <paramref name="point1" />과 <paramref name="point2" />의 <see cref="P:System.Windows.Point.X" /> 및 <see cref="P:System.Windows.Point.Y" /> 값이 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.GetHashCode">
      <summary>이 <see cref="T:System.Windows.Point" />의 해시 코드를 반환합니다.</summary>
      <returns>이 <see cref="T:System.Windows.Point" /> 구조체의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>지정된 <see cref="T:System.Windows.Point" /> 구조체로 지정된 <see cref="T:System.Windows.Media.Matrix" /> 구조체를 변환합니다.</summary>
      <param name="point">변형할 점입니다.</param>
      <param name="matrix">변환 행렬입니다.</param>
      <returns>변환된 점입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.Offset(System.Double,System.Double)">
      <summary>점의 <see cref="P:System.Windows.Point.X" /> 및 <see cref="P:System.Windows.Point.Y" /> 좌표를 지정된 크기만큼 오프셋합니다.</summary>
      <param name="offsetX">지정된 점의 <see cref="P:System.Windows.Point.X" /> 좌표를 오프셋할 크기입니다.</param>
      <param name="offsetY">지정된 점의 <see cref="P:System.Windows.Point.Y" /> 좌표를 오프셋할 크기입니다.</param>
    </member>
    <member name="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)">
      <summary>지정된 <see cref="T:System.Windows.Point" />에 따라 지정된 <see cref="T:System.Windows.Vector" />를 변환한 다음 결과를 반환합니다.</summary>
      <param name="point">변환할 점입니다.</param>
      <param name="vector">
        <paramref name="point" />를 변환할 크기입니다.</param>
      <returns>지정된 벡터에 따라 지정된 점을 변환한 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
      <summary>두 <see cref="T:System.Windows.Point" /> 구조체가 같은지 여부를 비교합니다.</summary>
      <param name="point1">비교할 첫 번째 <see cref="T:System.Windows.Point" /> 구조체입니다.</param>
      <param name="point2">비교할 두 번째 <see cref="T:System.Windows.Point" /> 구조체입니다.</param>
      <returns>
        <paramref name="point1" />과 <paramref name="point2" />의 <see cref="P:System.Windows.Point.X" /> 및 <see cref="P:System.Windows.Point.Y" /> 좌표가 모두 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Size">
      <summary>
        <see cref="T:System.Windows.Size" />가 이 점의 <see cref="P:System.Windows.Size.Width" /> 값과 같고 <see cref="P:System.Windows.Point.X" />가 이 점의 <see cref="P:System.Windows.Size.Height" /> 값과 같은 <see cref="P:System.Windows.Point.Y" /> 구조체를 만듭니다.</summary>
      <param name="point">변환할 점입니다.</param>
      <returns>
        <see cref="T:System.Windows.Size" />가 이 점의 <see cref="P:System.Windows.Size.Width" /> 값과 같고 <see cref="P:System.Windows.Point.X" />가 이 점의 <see cref="P:System.Windows.Size.Height" /> 값과 같은 <see cref="P:System.Windows.Point.Y" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Vector">
      <summary>
        <see cref="T:System.Windows.Vector" /> 값이 점의 <see cref="P:System.Windows.Vector.X" /> 값과 같고 <see cref="P:System.Windows.Point.X" /> 값이 점의 <see cref="P:System.Windows.Vector.Y" /> 값과 같은 <see cref="P:System.Windows.Point.Y" /> 구조체를 만듭니다.</summary>
      <param name="point">변환할 점입니다.</param>
      <returns>
        <see cref="P:System.Windows.Vector.X" /> 값이 점의 <see cref="P:System.Windows.Point.X" /> 값과 같고 <see cref="P:System.Windows.Vector.Y" /> 값이 점의 <see cref="P:System.Windows.Point.Y" /> 값과 같은 벡터입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
      <summary>두 <see cref="T:System.Windows.Point" /> 구조체가 다른지 여부를 비교합니다.</summary>
      <param name="point1">비교할 첫 번째 점입니다.</param>
      <param name="point2">비교할 두 번째 점입니다.</param>
      <returns>
        <paramref name="point1" /> 및 <paramref name="point2" />에 다른 <see cref="P:System.Windows.Point.X" /> 또는 <see cref="P:System.Windows.Point.Y" /> 좌표가 있으면 <see langword="true" />이고, <paramref name="point1" /> 및 <paramref name="point2" />에 동일한 <see cref="P:System.Windows.Point.X" /> 및 <see cref="P:System.Windows.Point.Y" /> 좌표가 있이면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary>지정된 <see cref="T:System.Windows.Point" />에 따라 지정된 <see cref="T:System.Windows.Media.Matrix" />를 변환합니다.</summary>
      <param name="point">변형할 점입니다.</param>
      <param name="matrix">변환 행렬입니다.</param>
      <returns>지정된 매트릭스를 사용하여 지정된 점을 변환한 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)">
      <summary>또 다른 지정된 <see cref="T:System.Windows.Point" />에서 지정된 <see cref="T:System.Windows.Point" />를 빼고 그 차이를 <see cref="T:System.Windows.Vector" />로 반환합니다.</summary>
      <param name="point1">
        <paramref name="point2" />를 빼는 점입니다.</param>
      <param name="point2">
        <paramref name="point1" />에서 뺄 점입니다.</param>
      <returns>
        <paramref name="point1" />와 <paramref name="point2" />의 차이입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)">
      <summary>지정된 <see cref="T:System.Windows.Vector" />에서 지정된 <see cref="T:System.Windows.Point" />를 빼고 결과 <see cref="T:System.Windows.Point" />를 반환합니다.</summary>
      <param name="point">
        <paramref name="vector" />를 빼는 점입니다.</param>
      <param name="vector">
        <paramref name="point1" />에서 뺄 벡터입니다.</param>
      <returns>
        <paramref name="point" />와 <paramref name="vector" />의 차이입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.Parse(System.String)">
      <summary>지정된 <see cref="T:System.Windows.Point" />에서 <see cref="T:System.String" />를 생성합니다.</summary>
      <param name="source">점에 대한 문자열 표현입니다.</param>
      <exception cref="T:System.FormatException">
        <paramref name="source" />가 두 개의 쉼표 또는 공백으로 구분된 Double 값으로 구성되어 있지 않은 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" />에 두 개의 숫자가 포함되어 있지 않은 경우  
  
또는 
 <paramref name="source" />에 구분 기호가 너무 많은 경우</exception>
      <returns>해당 <see cref="T:System.Windows.Point" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)">
      <summary>또 다른 지정된 <see cref="T:System.Windows.Point" />에서 지정된 <see cref="T:System.Windows.Point" />를 빼고 그 차이를 <see cref="T:System.Windows.Vector" />로 반환합니다.</summary>
      <param name="point1">
        <paramref name="point2" />를 빼는 점입니다.</param>
      <param name="point2">
        <paramref name="point1" />에서 뺄 점입니다.</param>
      <returns>
        <paramref name="point1" />와 <paramref name="point2" />의 차이입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)">
      <summary>지정된 <see cref="T:System.Windows.Vector" />에서 지정된 <see cref="T:System.Windows.Point" />를 빼고 결과 <see cref="T:System.Windows.Point" />를 반환합니다.</summary>
      <param name="point">
        <paramref name="vector" />를 빼는 점입니다.</param>
      <param name="vector">
        <paramref name="vector" />에서 뺄 <paramref name="point" />입니다.</param>
      <returns>
        <paramref name="point" />와 <paramref name="vector" />의 차이입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>이 멤버는 WPF(Windows Presentation Foundation) 인프라를 지원하며 코드에서 직접 사용할 수 없습니다. 이 멤버에 대한 설명은 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />를 참조하세요.</summary>
      <param name="format">사용할 형식을 지정하는 문자열입니다.  
  
또는 
 <see cref="T:System.IFormattable" /> 구현 형식에 대해 정의된 기본 형식을 사용하기 위한 <see langword="null" />입니다.</param>
      <param name="provider">값의 형식을 지정하는 데 사용할 <see langword="IFormatProvider" />입니다.  
  
또는 
 운영 체제의 현재 로캘 설정에서 숫자 형식 정보를 가져오기 위한 <see langword="null" />입니다.</param>
      <returns>지정된 형식의 현재 인스턴스 값이 포함된 문자열입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.ToString">
      <summary>이 <see cref="T:System.String" />의 <see cref="T:System.Windows.Point" /> 표현을 만듭니다.</summary>
      <returns>이 <see cref="T:System.String" /> 구조체의 <see cref="P:System.Windows.Point.X" /> 및 <see cref="P:System.Windows.Point.Y" /> 값이 포함된 <see cref="T:System.Windows.Point" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
      <summary>이 <see cref="T:System.String" />의 <see cref="T:System.Windows.Point" /> 표현을 만듭니다.</summary>
      <param name="provider">문화권별 형식 지정 정보입니다.</param>
      <returns>이 <see cref="T:System.String" /> 구조체의 <see cref="P:System.Windows.Point.X" /> 및 <see cref="P:System.Windows.Point.Y" /> 값이 포함된 <see cref="T:System.Windows.Point" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Point.X">
      <summary>이 <see cref="P:System.Windows.Point.X" /> 구조체의 <see cref="T:System.Windows.Point" /> 좌표 값을 가져오거나 설정합니다.</summary>
      <returns>이 <see cref="P:System.Windows.Point.X" /> 구조체의 <see cref="T:System.Windows.Point" /> 좌표 값입니다.  기본값은 <c>0</c>입니다.</returns>
    </member>
    <member name="P:System.Windows.Point.Y">
      <summary>이 <see cref="P:System.Windows.Point.Y" />의 <see cref="T:System.Windows.Point" /> 좌표 값을 가져오거나 설정합니다.</summary>
      <returns>이 <see cref="P:System.Windows.Point.Y" /> 구조체의 <see cref="T:System.Windows.Point" /> 좌표 값입니다.  기본값은 <c>0</c>입니다.</returns>
    </member>
    <member name="T:System.Windows.PointConverter">
      <summary>다른 형식의 인스턴스를 <see cref="T:System.Windows.Point" />으로 변환하거나 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.PointConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.PointConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>개체를 지정된 형식에서 <see cref="T:System.Windows.Point" />의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">형식의 컨텍스트 정보를 설명합니다.</param>
      <param name="sourceType">변환을 위해 확인할 소스 형식입니다.</param>
      <returns>형식을 <see cref="T:System.Windows.Point" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.Windows.Point" />의 인스턴스를 다른 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">형식의 컨텍스트 정보를 설명합니다.</param>
      <param name="destinationType">변환을 위해 이 <see cref="T:System.Windows.Point" />를 확인 중인 원하는 형식입니다.</param>
      <returns>이 <see cref="T:System.Windows.Point" />를 <paramref name="destinationType" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 개체를 <see cref="T:System.Windows.Point" />로 변환하려고 합니다.</summary>
      <param name="context">변환에 필요한 컨텍스트 정보를 제공합니다.</param>
      <param name="culture">변환 도중 적용할 문화권 정보입니다.</param>
      <param name="value">변환되는 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">지정된 개체가 NULL이거나 <see cref="T:System.Windows.Point" />으로 변환할 수 없는 형식인 경우</exception>
      <returns>
        <paramref name="value" />를 변환하여 만드는 <see cref="T:System.Windows.Point" />입니다.</returns>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <see cref="T:System.Windows.Point" />를 지정된 형식으로 변환하려고 합니다.</summary>
      <param name="context">변환에 필요한 컨텍스트 정보를 제공합니다.</param>
      <param name="culture">변환 도중 적용할 문화권 정보입니다.</param>
      <param name="value">변환할 <see cref="T:System.Windows.Point" />입니다.</param>
      <param name="destinationType">이 <see cref="T:System.Windows.Point" />을 변환할 대상 형식입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" />가 <see langword="null" />이거나 <see cref="T:System.Windows.Point" />이 아니거나 <paramref name="destinationType" />이 변환 가능한 형식 중 하나가 아닌 경우</exception>
      <returns>이 <see cref="T:System.Windows.Point" />을 변환하여 만드는 개체입니다.</returns>
    </member>
    <member name="T:System.Windows.PropertyChangedCallback">
      <summary>종속성 속성의 유효한 속성 값이 변경될 때 호출되는 콜백을 나타냅니다.</summary>
      <param name="d">속성 값이 변경된 <see cref="T:System.Windows.DependencyObject" />입니다.</param>
      <param name="e">이 속성의 유효 값에 대한 변경 내용을 추적하는 이벤트에서 발급되는 이벤트 데이터입니다.</param>
    </member>
    <member name="T:System.Windows.PropertyMetadata">
      <summary>등록하는 조건을 포함하여 특정 형식에 적용될 때 종속성 속성의 특정 동작 측면을 정의합니다.</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor">
      <summary>
        <see cref="T:System.Windows.PropertyMetadata" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
      <summary>이 메타데이터가 적용될 종속성 속성에 대한 지정된 기본값을 사용하여 <see cref="T:System.Windows.PropertyMetadata" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="defaultValue">종속성 속성에 대해 지정할 기본값이며, 일반적으로 특정 형식의 값으로 제공됩니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" />는 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 값으로 설정할 수 없습니다.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary>제공된 기본값 및 <see cref="T:System.Windows.PropertyMetadata" /> 구현 참조를 사용하여 <see cref="T:System.Windows.PropertyChangedCallback" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="defaultValue">종속성 속성의 기본값이며, 일반적으로 특정 형식의 값으로 제공됩니다.</param>
      <param name="propertyChangedCallback">속성의 유효 값이 변경될 때마다 속성 시스템에서 호출할 처리기 구현에 대한 참조입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" />는 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 값으로 설정할 수 없습니다.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
      <summary>지정된 기본값 및 콜백을 사용하여 <see cref="T:System.Windows.PropertyMetadata" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="defaultValue">종속성 속성의 기본값이며, 일반적으로 특정 형식의 값으로 제공됩니다.</param>
      <param name="propertyChangedCallback">속성의 유효 값이 변경될 때마다 속성 시스템에서 호출할 처리기 구현에 대한 참조입니다.</param>
      <param name="coerceValueCallback">속성 시스템에서 이 속성에 대해 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" />를 호출할 때마다 호출되는 처리기 구현에 대한 참조입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="defaultValue" />는 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 값으로 설정할 수 없습니다.</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary>지정된 <see cref="T:System.Windows.PropertyMetadata" /> 구현 참조를 사용하여 <see cref="T:System.Windows.PropertyChangedCallback" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="propertyChangedCallback">속성의 유효 값이 변경될 때마다 속성 시스템에서 호출할 처리기 구현에 대한 참조입니다.</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
      <summary>이 메타데이터를 기본 메타데이터와 병합합니다.</summary>
      <param name="baseMetadata">이 인스턴스의 값과 병합할 기본 메타데이터입니다.</param>
      <param name="dp">이 메타데이터를 적용하는 종속성 속성입니다.</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
      <summary>이 메타데이터가 속성에 적용되어 메타데이터가 봉인될 때 호출됩니다.</summary>
      <param name="dp">메타데이터를 적용한 종속성 속성입니다.</param>
      <param name="targetType">형식별 메타데이터인 경우 이 메타데이터에 연결된 형식입니다. 기본 메타데이터의 경우 이 값은 null 참조입니다.</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.CoerceValueCallback">
      <summary>이 메타데이터에 지정되어 있는 <see cref="T:System.Windows.CoerceValueCallback" /> 구현에 대한 참조를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">종속성 속성 작업에 적용된 후에는 메타데이터 속성을 설정할 수 없습니다.</exception>
      <returns>
        <see cref="T:System.Windows.CoerceValueCallback" /> 구현 참조입니다.</returns>
    </member>
    <member name="P:System.Windows.PropertyMetadata.DefaultValue">
      <summary>종속성 속성의 기본값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">만든 후에는 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 값으로 설정할 수 없습니다.</exception>
      <exception cref="T:System.InvalidOperationException">종속성 속성 작업에 적용된 후에는 메타데이터 속성을 설정할 수 없습니다.</exception>
      <returns>속성의 기본값입니다. 기본 값을 <see cref="T:System.Windows.PropertyMetadata" /> 매개 변수가 없는 생성자를 사용 하 여 만든 인스턴스 수 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />입니다.</returns>
    </member>
    <member name="P:System.Windows.PropertyMetadata.IsSealed">
      <summary>메타데이터가 속성에 적용되어 해당 메타데이터 인스턴스가 변경될 수 없는 상태가 되었는지 여부를 결정하는 값을 가져옵니다.</summary>
      <returns>메타데이터 인스턴스를 변경할 수 없으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
      <summary>이 메타데이터에 지정되어 있는 <see cref="T:System.Windows.PropertyChangedCallback" /> 구현에 대한 참조를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">종속성 속성 작업에 적용된 후에는 메타데이터 속성을 설정할 수 없습니다.</exception>
      <returns>
        <see cref="T:System.Windows.PropertyChangedCallback" /> 구현 참조입니다.</returns>
    </member>
    <member name="T:System.Windows.Rect">
      <summary>사각형의 너비, 높이 및 위치를 설명합니다.</summary>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary>지정된 x좌표, y좌표, 너비 및 높이를 갖는 <see cref="T:System.Windows.Rect" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="x">사각형의 왼쪽 위 모퉁이의 X 좌표입니다.</param>
      <param name="y">사각형의 왼쪽 위 모퉁이의 y 좌표입니다.</param>
      <param name="width">사각형의 너비입니다.</param>
      <param name="height">사각형의 높이입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="width" />가 음의 값입니다.  
  
또는 
 <paramref name="height" />가 음의 값입니다.</exception>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary>지정된 두 지점을 정확히 포함할 수 있는 크기의 <see cref="T:System.Windows.Rect" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="point1">새 사각형에 들어 있어야 하는 첫 번째 지점입니다.</param>
      <param name="point2">새 사각형에 들어 있어야 하는 두 번째 지점입니다.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
      <summary>지정된 왼쪽 위 모퉁이 좌표 및 지정된 너비와 높이를 갖는 <see cref="T:System.Windows.Rect" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="location">사각형의 왼쪽 위 모퉁이 위치를 지정하는 지점입니다.</param>
      <param name="size">사각형의 너비와 높이를 지정하는 <see cref="T:System.Windows.Size" /> 구조체입니다.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)">
      <summary>지정된 지점 및 지정된 지점과 지정된 벡터의 합을 정확히 포함할 수 있는 크기의 <see cref="T:System.Windows.Rect" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="point">사각형에 들어 있어야 하는 지점입니다.</param>
      <param name="vector">지정된 지점에 대한 오프셋 거리입니다. 결과 사각형은 두 지점을 정확히 포함할 수 있는 크기입니다.</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Size)">
      <summary>지정된 크기를 가지며 위치가 (0,0)인 <see cref="T:System.Windows.Rect" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="size">사각형의 너비와 높이를 지정하는 <see cref="T:System.Windows.Size" /> 구조체입니다.</param>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Double,System.Double)">
      <summary>지정된 x좌표와 y좌표가 사각형에 들어 있는지 여부를 나타냅니다.</summary>
      <param name="x">확인할 지점의 x좌표입니다.</param>
      <param name="y">확인할 지점의 y좌표입니다.</param>
      <returns>(<paramref name="x" />, <paramref name="y" />)가 사각형에 들어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
      <summary>지정된 지점이 사각형에 들어 있는지 여부를 나타냅니다.</summary>
      <param name="point">확인할 지점입니다.</param>
      <returns>지정된 지점이 사각형에 들어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Rect)">
      <summary>지정된 사각형이 사각형에 들어 있는지 여부를 나타냅니다.</summary>
      <param name="rect">확인할 사각형입니다.</param>
      <returns>
        <paramref name="rect" /> 전체가 사각형에 들어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Object)">
      <summary>지정된 개체가 현재 사각형과 같은지 여부를 나타냅니다.</summary>
      <param name="o">현재 사각형과 비교할 개체입니다.</param>
      <returns>
        <paramref name="o" />가 <see cref="T:System.Windows.Rect" />이고 <see cref="P:System.Windows.Rect.Location" /> 및 <see cref="P:System.Windows.Rect.Size" /> 값이 현재 사각형과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
      <summary>지정된 사각형이 현재 사각형과 같은지 여부를 나타냅니다.</summary>
      <param name="value">현재 사각형과 비교할 사각형입니다.</param>
      <returns>지정된 사각형의 <see cref="P:System.Windows.Rect.Location" /> 및 <see cref="P:System.Windows.Rect.Size" /> 값이 현재 사각형과 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)">
      <summary>지정된 사각형이 서로 같은지 여부를 나타냅니다.</summary>
      <param name="rect1">비교할 첫 번째 사각형입니다.</param>
      <param name="rect2">비교할 두 번째 사각형입니다.</param>
      <returns>사각형의 <see cref="P:System.Windows.Rect.Location" /> 및 <see cref="P:System.Windows.Rect.Size" /> 값이 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.GetHashCode">
      <summary>사각형에 대한 해시 코드를 만듭니다.</summary>
      <returns>현재 <see cref="T:System.Windows.Rect" /> 구조체의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Double,System.Double)">
      <summary>사각형을 지정된 너비 및 높이만큼 모든 방향으로 확장하거나 축소합니다.</summary>
      <param name="width">사각형의 왼쪽 및 오른쪽을 확장하거나 축소할 크기입니다.</param>
      <param name="height">사각형의 위쪽 및 아래쪽을 확장하거나 축소할 크기입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Empty" /> 사각형에 대해 이 메서드를 호출한 경우</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)">
      <summary>지정된 사각형을 지정된 너비 및 높이만큼 모든 방향으로 확장하거나 축소한 사각형을 만듭니다.</summary>
      <param name="rect">수정할 <see cref="T:System.Windows.Rect" /> 구조체입니다.</param>
      <param name="width">사각형의 왼쪽 및 오른쪽을 확장하거나 축소할 크기입니다.</param>
      <param name="height">사각형의 위쪽 및 아래쪽을 확장하거나 축소할 크기입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" />는 <see cref="P:System.Windows.Rect.Empty" /> 사각형입니다.</exception>
      <returns>결과 사각형입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)">
      <summary>지정된 사각형을 지정된 <see cref="T:System.Windows.Size" />만큼 모든 방향으로 확장하여 만들어지는 사각형을 반환합니다.</summary>
      <param name="rect">수정할 <see cref="T:System.Windows.Rect" /> 구조체입니다.</param>
      <param name="size">사각형을 확장할 크기를 지정합니다. <see cref="T:System.Windows.Size" /> 구조체의 <see cref="P:System.Windows.Size.Width" /> 속성은 사각형의 <see cref="P:System.Windows.Rect.Left" /> 및 <see cref="P:System.Windows.Rect.Right" /> 속성을 늘릴 크기를 지정합니다. <see cref="T:System.Windows.Size" /> 구조체의 <see cref="P:System.Windows.Size.Height" /> 속성은 사각형의 <see cref="P:System.Windows.Rect.Top" /> 및 <see cref="P:System.Windows.Rect.Bottom" /> 속성을 늘릴 크기를 지정합니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" />는 <see cref="P:System.Windows.Rect.Empty" /> 사각형입니다.</exception>
      <returns>결과 사각형입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Size)">
      <summary>지정된 <see cref="T:System.Windows.Size" />를 사용하여 모든 방향으로 사각형을 확장합니다.</summary>
      <param name="size">사각형을 확장할 크기를 지정합니다. <see cref="T:System.Windows.Size" /> 구조체의 <see cref="P:System.Windows.Size.Width" /> 속성은 사각형의 <see cref="P:System.Windows.Rect.Left" /> 및 <see cref="P:System.Windows.Rect.Right" /> 속성을 늘릴 크기를 지정합니다. <see cref="T:System.Windows.Size" /> 구조체의 <see cref="P:System.Windows.Size.Height" /> 속성은 사각형의 <see cref="P:System.Windows.Rect.Top" /> 및 <see cref="P:System.Windows.Rect.Bottom" /> 속성을 늘릴 크기를 지정합니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Empty" /> 사각형에 대해 이 메서드를 호출한 경우</exception>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
      <summary>현재 사각형과 지정된 사각형이 겹치는 부분을 찾아 결과를 현재 사각형으로 저장합니다.</summary>
      <param name="rect">현재 사각형과 겹치는 사각형입니다.</param>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)">
      <summary>지정된 사각형이 겹치는 부분을 반환합니다.</summary>
      <param name="rect1">비교할 첫 번째 사각형입니다.</param>
      <param name="rect2">비교할 두 번째 사각형입니다.</param>
      <returns>두 사각형이 겹치는 부분이거나, 겹치는 부분이 없으면 <see cref="P:System.Windows.Rect.Empty" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)">
      <summary>지정된 사각형이 현재 사각형과 겹치는지 여부를 나타냅니다.</summary>
      <param name="rect">확인할 사각형입니다.</param>
      <returns>지정된 사각형이 현재 사각형과 겹치면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Double,System.Double)">
      <summary>사각형을 지정된 가로 및 세로 거리만큼 이동합니다.</summary>
      <param name="offsetX">사각형을 가로 방향으로 이동할 거리입니다.</param>
      <param name="offsetY">사각형을 세로 방향으로 이동할 거리입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Empty" /> 사각형에 대해 이 메서드를 호출한 경우</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)">
      <summary>지정된 사각형에서 지정된 가로 및 세로 거리만큼 오프셋된 사각형을 반환합니다.</summary>
      <param name="rect">이동할 사각형입니다.</param>
      <param name="offsetX">새 사각형의 가로 오프셋입니다.</param>
      <param name="offsetY">새 사각형의 세로 오프셋입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" />이(가) <see cref="P:System.Windows.Rect.Empty" />인 경우</exception>
      <returns>결과 사각형입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)">
      <summary>지정된 사각형에서 지정된 벡터만큼 오프셋된 사각형을 반환합니다.</summary>
      <param name="rect">원래 사각형입니다.</param>
      <param name="offsetVector">새 사각형의 가로 및 세로 오프셋을 지정하는 벡터입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="rect" />이(가) <see cref="P:System.Windows.Rect.Empty" />인 경우</exception>
      <returns>결과 사각형입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Vector)">
      <summary>사각형을 지정된 벡터만큼 이동합니다.</summary>
      <param name="offsetVector">사각형을 이동할 가로 및 세로 거리를 지정하는 벡터입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Empty" /> 사각형에 대해 이 메서드를 호출한 경우</exception>
    </member>
    <member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
      <summary>두 사각형이 정확히 같은지 비교합니다.</summary>
      <param name="rect1">비교할 첫 번째 사각형입니다.</param>
      <param name="rect2">비교할 두 번째 사각형입니다.</param>
      <returns>사각형의 <see cref="P:System.Windows.Rect.Location" /> 및 <see cref="P:System.Windows.Rect.Size" /> 값이 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
      <summary>두 사각형이 다른지 비교합니다.</summary>
      <param name="rect1">비교할 첫 번째 사각형입니다.</param>
      <param name="rect2">비교할 두 번째 사각형입니다.</param>
      <returns>사각형의 <see cref="P:System.Windows.Rect.Location" /> 및 <see cref="P:System.Windows.Rect.Size" /> 값이 서로 같지 않으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Parse(System.String)">
      <summary>지정된 문자열 표현을 사용하여 새 사각형을 만듭니다.</summary>
      <param name="source">사각형의 문자열 표현이며 "x, y, 너비, 높이" 형식입니다.</param>
      <returns>결과 사각형입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Scale(System.Double,System.Double)">
      <summary>현재 사각형의 크기에 지정된 x 및 y 값을 곱합니다.</summary>
      <param name="scaleX">x 방향 배율 인수입니다.</param>
      <param name="scaleY">y 방향 배율 인수입니다.</param>
    </member>
    <member name="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>지정된 형식을 사용하여 현재 인스턴스 값의 형식을 지정합니다.</summary>
      <param name="format">사용할 형식입니다.  
  
또는 
<see cref="T:System.IFormattable" /> 구현의 형식에 대해 정의된 기본 형식을 사용하려는 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <param name="provider">값의 형식을 지정하는 데 사용할 공급자입니다.  
  
또는 
운영 체제의 현재 로캘 설정에서 숫자 형식 정보를 가져오려는 경우 null 참조(Visual Basic의 경우 <see langword="Nothing" />)입니다.</param>
      <returns>사각형의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString">
      <summary>사각형의 문자열 표현을 반환합니다.</summary>
      <returns>현재 사각형의 문자열 표현입니다. 문자열의 형식은 "<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />"입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
      <summary>지정된 형식 공급자를 사용하여 사각형의 문자열 표현을 반환합니다.</summary>
      <param name="provider">문화권별 형식 지정 정보입니다.</param>
      <returns>지정된 형식 공급자에 따라 결정된 현재 사각형의 문자열 표현입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)">
      <summary>지정된 매트릭스를 적용하여 사각형을 변환합니다.</summary>
      <param name="matrix">적용할 변환을 지정하는 매트릭스입니다.</param>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)">
      <summary>지정된 사각형에 지정된 매트릭스를 적용하여 만들어진 사각형을 반환합니다.</summary>
      <param name="rect">변환의 기준이 되는 사각형입니다.</param>
      <param name="matrix">적용할 변환을 지정하는 매트릭스입니다.</param>
      <returns>작업 결과로 만들어지는 사각형입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Point)">
      <summary>지정된 지점을 정확히 포함할 수 있는 크기로 현재 사각형을 확장합니다.</summary>
      <param name="point">포함할 지점입니다.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
      <summary>지정된 사각형을 정확히 포함할 수 있는 크기로 현재 사각형을 확장합니다.</summary>
      <param name="rect">포함할 사각형입니다.</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)">
      <summary>지정된 사각형과 지정된 지점을 정확히 포함할 수 있는 크기의 사각형을 만듭니다.</summary>
      <param name="rect">포함할 사각형입니다.</param>
      <param name="point">포함할 지점입니다.</param>
      <returns>지정된 사각형과 지정된 지점을 정확히 포함할 수 있는 크기의 사각형입니다.</returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)">
      <summary>지정된 두 사각형을 정확히 포함할 수 있는 크기의 사각형을 만듭니다.</summary>
      <param name="rect1">포함할 첫 번째 사각형입니다.</param>
      <param name="rect2">포함할 두 번째 사각형입니다.</param>
      <returns>결과 사각형입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.Bottom">
      <summary>사각형 아래쪽의 y축 값을 가져옵니다.</summary>
      <returns>사각형 아래쪽의 y축 값입니다. 사각형이 비어 있으면 값이 <see cref="F:System.Double.NegativeInfinity" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomLeft">
      <summary>사각형의 왼쪽 아래 모퉁이 위치를 가져옵니다.</summary>
      <returns>사각형의 왼쪽 아래 모퉁이 위치입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomRight">
      <summary>사각형의 오른쪽 아래 모퉁이 위치를 가져옵니다.</summary>
      <returns>사각형의 오른쪽 아래 모퉁이 위치입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.Empty">
      <summary>위치와 넓이가 없는 사각형을 나타내는 특수 값을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Windows.Rect.X" /> 및 <see cref="P:System.Windows.Rect.Y" /> 속성 값이 <see cref="F:System.Double.PositiveInfinity" />이고 <see cref="P:System.Windows.Rect.Width" /> 및 <see cref="P:System.Windows.Rect.Height" /> 속성 값이 <see cref="F:System.Double.NegativeInfinity" />인 빈 사각형입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.Height">
      <summary>사각형의 높이를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Height" />가 음수 값으로 설정된 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Height" />는 <see cref="P:System.Windows.Rect.Empty" /> 사각형에 설정됩니다.</exception>
      <returns>사각형의 높이를 나타내는 양수입니다. 기본값은 0입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.IsEmpty">
      <summary>사각형이 <see cref="P:System.Windows.Rect.Empty" /> 사각형인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>사각형이 <see cref="P:System.Windows.Rect.Empty" /> 사각형이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.Left">
      <summary>사각형 왼쪽의 x축 값을 가져옵니다.</summary>
      <returns>사각형 왼쪽의 x축 값입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.Location">
      <summary>사각형의 왼쪽 위 모퉁이 위치를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Location" />는 <see cref="P:System.Windows.Rect.Empty" /> 사각형에 설정됩니다.</exception>
      <returns>사각형의 왼쪽 위 모퉁이 위치입니다. 기본값은 (0, 0)입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.Right">
      <summary>사각형 오른쪽의 x축 값을 가져옵니다.</summary>
      <returns>사각형 오른쪽의 x축 값입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.Size">
      <summary>사각형의 너비와 높이를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Size" />는 <see cref="P:System.Windows.Rect.Empty" /> 사각형에 설정됩니다.</exception>
      <returns>사각형의 너비와 높이를 지정하는 <see cref="T:System.Windows.Size" /> 구조체입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.Top">
      <summary>사각형 위쪽의 y축 좌표를 가져옵니다.</summary>
      <returns>사각형 위쪽의 y축 좌표입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.TopLeft">
      <summary>사각형의 왼쪽 위 모퉁이 위치를 가져옵니다.</summary>
      <returns>사각형의 왼쪽 위 모퉁이 위치입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.TopRight">
      <summary>사각형의 오른쪽 위 모퉁이 위치를 가져옵니다.</summary>
      <returns>사각형의 오른쪽 위 모퉁이 위치입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.Width">
      <summary>사각형의 너비를 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentException">
        <see cref="P:System.Windows.Rect.Width" />가 음수 값으로 설정된 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Width" />는 <see cref="P:System.Windows.Rect.Empty" /> 사각형에 설정됩니다.</exception>
      <returns>사각형의 너비를 나타내는 양수입니다. 기본값은 0입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.X">
      <summary>사각형 왼쪽의 x축 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.X" />는 <see cref="P:System.Windows.Rect.Empty" /> 사각형에 설정됩니다.</exception>
      <returns>사각형 왼쪽의 x축 값입니다.</returns>
    </member>
    <member name="P:System.Windows.Rect.Y">
      <summary>사각형 위쪽의 y축 값을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Rect.Y" />는 <see cref="P:System.Windows.Rect.Empty" /> 사각형에 설정됩니다.</exception>
      <returns>사각형 위쪽의 y축 값입니다.</returns>
    </member>
    <member name="T:System.Windows.RectConverter">
      <summary>
        <see cref="T:System.Windows.Rect" />인스턴스 간에 다른 형식의 인스턴스를 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.RectConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.RectConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>개체를 지정된 형식에서 <see cref="T:System.Windows.Rect" />의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">변환에 필요한 컨텍스트 정보를 제공합니다.</param>
      <param name="sourceType">변환을 위해 확인할 소스 형식입니다.</param>
      <returns>형식을 <see cref="T:System.Windows.Rect" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.Windows.Rect" />를 지정된 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">변환에 필요한 컨텍스트 정보를 제공합니다.</param>
      <param name="destinationType">변환을 위해 이 <see cref="T:System.Windows.Rect" />를 확인 중인 원하는 형식입니다.</param>
      <returns>
        <see cref="T:System.Windows.Rect" />를 <paramref name="destinationType" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 개체를 <see cref="T:System.Windows.Rect" />로 변환하려고 합니다.</summary>
      <param name="context">변환에 필요한 컨텍스트 정보를 제공합니다.</param>
      <param name="culture">변환 시 적용되는 문화권 정보입니다.</param>
      <param name="value">변환되는 개체입니다.</param>
      <exception cref="T:System.NotSupportedException">지정된 개체가 NULL이거나 <see cref="T:System.Windows.Rect" />으로 변환할 수 없는 형식인 경우</exception>
      <returns>
        <paramref name="value" />를 변환하여 만드는 <see cref="T:System.Windows.Rect" />입니다.</returns>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <see cref="T:System.Windows.Rect" />를 지정한 형식으로 변환하려고 합니다.</summary>
      <param name="context">변환에 필요한 컨텍스트 정보를 제공합니다.</param>
      <param name="culture">변환 도중 적용되는 문화권 정보입니다.</param>
      <param name="value">변환할 <see cref="T:System.Windows.Rect" />입니다.</param>
      <param name="destinationType">이 <see cref="T:System.Windows.Rect" />을 변환할 대상 형식입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" />이(가) <see langword="null" />인 경우  
  
또는 
 <paramref name="value" />이(가) <see cref="T:System.Windows.Rect" />가 아닌 경우  
  
또는 
<paramref name="destinationType" />이 변환할 수 있는 형식 중 하나가 아닌 경우</exception>
      <returns>이 <see cref="T:System.Windows.Rect" />을 변환하여 만드는 개체입니다.</returns>
    </member>
    <member name="T:System.Windows.Size">
      <summary>개체의 <see cref="T:System.Windows.Size" /> 를 설명하는 데 사용할 구조체를 구현합니다.</summary>
    </member>
    <member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
      <summary>
        <see cref="T:System.Windows.Size" /> 구조체의 새 인스턴스를 초기화하여 초기 <paramref name="width" /> 및 <paramref name="height" />를 할당합니다.</summary>
      <param name="width">
        <see cref="T:System.Windows.Size" /> 인스턴스의 초기 너비입니다.</param>
      <param name="height">
        <see cref="T:System.Windows.Size" /> 인스턴스의 초기 높이입니다.</param>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Object)">
      <summary>개체와 <see cref="T:System.Windows.Size" /> 인스턴스가 같은지 비교합니다.</summary>
      <param name="o">비교할 <see cref="T:System.Object" />입니다.</param>
      <returns>크기가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size)">
      <summary>
        <see cref="T:System.Windows.Size" />의 인스턴스와 값이 같은지 비교합니다.</summary>
      <param name="value">
        <see cref="T:System.Windows.Size" />의 이 현재 인스턴스와 비교할 크기입니다.</param>
      <returns>
        <see cref="T:System.Windows.Size" />의 인스턴스가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size,System.Windows.Size)">
      <summary>
        <see cref="T:System.Windows.Size" />의 두 인스턴스를 비교하여 같은지 여부를 확인합니다.</summary>
      <param name="size1">비교할 <see cref="T:System.Windows.Size" />의 첫 번째 인스턴스입니다.</param>
      <param name="size2">비교할 <see cref="T:System.Windows.Size" />의 두 번째 인스턴스입니다.</param>
      <returns>
        <see cref="T:System.Windows.Size" />의 인스턴스가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Size.GetHashCode">
      <summary>이 <see cref="T:System.Windows.Size" />인스턴스의 해시 코드를 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Windows.Size" /> 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
      <summary>
        <see cref="T:System.Windows.Size" />의 두 인스턴스를 비교하여 같은지 여부를 확인합니다.</summary>
      <param name="size1">비교할 <see cref="T:System.Windows.Size" />의 첫 번째 인스턴스입니다.</param>
      <param name="size2">비교할 <see cref="T:System.Windows.Size" />의 두 번째 인스턴스입니다.</param>
      <returns>
        <see cref="T:System.Windows.Size" />의 두 인스턴스가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Point">
      <summary>
        <see cref="T:System.Windows.Size" />의 인스턴스를 <see cref="T:System.Windows.Point" />의 인스턴스로 명시적으로 변환합니다.</summary>
      <param name="size">변환될 <see cref="T:System.Windows.Size" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Windows.Point" />의 이 인스턴스와 값이 같은 <see cref="T:System.Windows.Size" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Vector">
      <summary>
        <see cref="T:System.Windows.Size" />의 인스턴스를 <see cref="T:System.Windows.Vector" />의 인스턴스로 명시적으로 변환합니다.</summary>
      <param name="size">변환될 <see cref="T:System.Windows.Size" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Windows.Vector" />의 이 인스턴스와 값이 같은 <see cref="T:System.Windows.Size" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
      <summary>
        <see cref="T:System.Windows.Size" />의 두 인스턴스를 비교하여 같지 않은지 여부를 확인합니다.</summary>
      <param name="size1">비교할 <see cref="T:System.Windows.Size" />의 첫 번째 인스턴스입니다.</param>
      <param name="size2">비교할 <see cref="T:System.Windows.Size" />의 두 번째 인스턴스입니다.</param>
      <returns>
        <see cref="T:System.Windows.Size" />의 인스턴스가 서로 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Size.Parse(System.String)">
      <summary>변환된 <see cref="T:System.Windows.Size" />에서 <see cref="T:System.String" />의 인스턴스를 반환합니다.</summary>
      <param name="source">
        <see cref="T:System.String" /> 값에 대해 구문 분석할 <see cref="T:System.Windows.Size" /> 값입니다.</param>
      <returns>
        <see cref="T:System.Windows.Size" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Windows.Size.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>이 형식 또는 멤버는 WPF(Windows Presentation Foundation) 인프라를 지원하며 사용자 코드에서 직접 사용할 수 없습니다.</summary>
      <param name="format">사용할 형식입니다.</param>
      <param name="provider">값의 형식을 지정하는 데 사용할 공급자입니다.</param>
      <returns>지정된 형식의 현재 인스턴스 값입니다.</returns>
    </member>
    <member name="M:System.Windows.Size.ToString">
      <summary>이 <see cref="T:System.String" /> 개체를 나타내는 <see cref="T:System.Windows.Size" />을 반환합니다.</summary>
      <returns>너비 다음에 높이를 지정하는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Size.ToString(System.IFormatProvider)">
      <summary>
        <see cref="T:System.String" />의 이 인스턴스를 나타내는 <see cref="T:System.Windows.Size" />을 반환합니다.</summary>
      <param name="provider">형식 지정을 제어하는 방법을 제공하는 개체입니다.</param>
      <returns>이 <see cref="T:System.String" /> 개체를 나타내는 <see cref="T:System.Windows.Size" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Size.Empty">
      <summary>빈 정적 <see cref="T:System.Windows.Size" />를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.Size" />의 빈 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Windows.Size.Height">
      <summary>
        <see cref="P:System.Windows.Size.Height" />의 이 인스턴스에 대한 <see cref="T:System.Windows.Size" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="P:System.Windows.Size.Height" />의 이 인스턴에 대한 <see cref="T:System.Windows.Size" />입니다. 기본값은 0입니다. 값은 음수일 수 없습니다.</returns>
    </member>
    <member name="P:System.Windows.Size.IsEmpty">
      <summary>
        <see cref="T:System.Windows.Size" />의 이 인스턴스가 <see cref="P:System.Windows.Size.Empty" />인지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>이 크기 인스턴스가 <see cref="P:System.Windows.Size.Empty" />이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Size.Width">
      <summary>
        <see cref="P:System.Windows.Size.Width" />의 이 인스턴스에 대한 <see cref="T:System.Windows.Size" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="P:System.Windows.Size.Width" />의 이 인스턴에 대한 <see cref="T:System.Windows.Size" />입니다. 기본값은 <c>0</c>입니다. 값은 음수일 수 없습니다.</returns>
    </member>
    <member name="T:System.Windows.SizeConverter">
      <summary>다른 형식의 인스턴스와 <see cref="T:System.Windows.Size" /> 클래스의 인스턴스를 상호 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.SizeConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>클래스를 지정된 형식에서 <see cref="T:System.Windows.Size" />의 인스턴스로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">구성 요소에 대한 컨텍스트 정보를 제공합니다.</param>
      <param name="sourceType">변환할 수 있는지 확인할 데이터 형식을 식별합니다.</param>
      <returns>
        <paramref name="sourceType" />을 <see cref="T:System.Windows.Size" />의 인스턴스로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.Windows.Size" />의 인스턴스를 다른 형식으로 변환할 수 있는지 여부를 확인합니다.</summary>
      <param name="context">구성 요소에 대한 컨텍스트 정보를 제공합니다.</param>
      <param name="destinationType">변환할 수 있는지 확인할 데이터 형식을 식별합니다.</param>
      <returns>
        <see cref="T:System.Windows.Size" />의 이 인스턴스를 <paramref name="destinationType" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정된 개체를 <see cref="T:System.Windows.Size" />의 인스턴스로 변환하려고 합니다.</summary>
      <param name="context">구성 요소에 대한 컨텍스트 정보를 제공합니다.</param>
      <param name="culture">변환 도중 적용할 문화권별 정보입니다.</param>
      <param name="value">변환되는 소스 개체입니다.</param>
      <returns>변환된 <paramref name="source" />에서 만든 <see cref="T:System.Windows.Size" />의 인스턴스입니다.</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
        <see cref="T:System.Windows.Size" />의 인스턴스를 지정된 형식으로 변환하려고 합니다.</summary>
      <param name="context">구성 요소에 대한 컨텍스트 정보를 제공합니다.</param>
      <param name="culture">변환 도중 적용할 문화권별 정보입니다.</param>
      <param name="value">변환할 <see cref="T:System.Windows.Size" />의 인스턴스입니다.</param>
      <param name="destinationType">
        <see cref="T:System.Windows.Size" />의 이 인스턴스가 변환되는 대상 형식입니다.</param>
      <exception cref="T:System.NotSupportedException">
        <paramref name="value" />가 <see langword="null" />이거나 <see cref="T:System.Windows.Size" />의 인스턴스가 아니거나 <paramref name="destinationType" />이 유효한 대상 형식 중 하나가 아닌 경우</exception>
      <returns>
        <see cref="T:System.Windows.Size" />의 변환된 인스턴스에서 만드는 개체입니다.</returns>
    </member>
    <member name="T:System.Windows.SplashScreen">
      <summary>WPF(Windows Presentation Foundation) 애플리케이션의 시작 화면을 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.Reflection.Assembly,System.String)">
      <summary>지정된 리소스 어셈블리를 사용하여 <see cref="T:System.Windows.SplashScreen" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="resourceAssembly">포함된 리소스를 포함하는 어셈블리입니다.</param>
      <param name="resourceName">포함된 리소스의 이름입니다.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.String)">
      <summary>지정된 리소스를 사용하여 <see cref="T:System.Windows.SplashScreen" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="resourceName">포함된 리소스의 이름입니다.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Close(System.TimeSpan)">
      <summary>시작 화면을 닫습니다.</summary>
      <param name="fadeoutDuration">닫기 작업이 시작된 후 시작 화면이 사라지는 데 걸리는 시간을 지정하는 <see cref="T:System.TimeSpan" />입니다.</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean)">
      <summary>시작 화면을 표시합니다.</summary>
      <param name="autoClose">시작 화면을 자동으로 닫으려면 <see langword="true" />이고, 시작 화면을 수동으로 닫으려면 <see langword="false" />입니다.</param>
      <exception cref="T:System.IO.IOException">생성자에 지정된 리소스를 찾을 수 없는 경우</exception>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean,System.Boolean)">
      <summary>시작 화면을 표시합니다.</summary>
      <param name="autoClose">시작 화면을 자동으로 닫으려면 <see langword="true" />이고, 시작 화면을 수동으로 닫으려면 <see langword="false" />입니다.</param>
      <param name="topMost">시작 화면 창이 WS_EX_TOPMOST 스타일을 사용해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</param>
    </member>
    <member name="T:System.Windows.Threading.Dispatcher">
      <summary>스레드에 대한 작업 항목 큐를 관리하는 서비스를 제공합니다.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownFinished">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 종료되면 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownStarted">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 종료되기 시작하면 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledException">
      <summary>
        <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 또는 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />를 통해 대리자를 실행하는 동안 스레드 예외가 throw되고 catch되지 않으면 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter">
      <summary>필터 단계에서 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 또는 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />를 통해 대리자를 실행하는 동안 스레드 예외가 throw되고 catch되지 않으면 발생합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 만들어진 스레드에서 지정된 인수를 사용하여 지정된 대리자를 비동기적으로 실행합니다.</summary>
      <param name="method">
        <paramref name="args" />에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <param name="args">주어진 메서드에 인수로 전달하는 개체의 배열입니다. <see langword="null" />일 수 있습니다.</param>
      <returns>
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 만들어진 스레드에서 지정된 우선 순위에 지정된 인수를 사용하여 지정된 대리자를 비동기적으로 실행합니다.</summary>
      <param name="method">
        <paramref name="args" />에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <param name="priority">지정 된 메서드가 호출 되는 이벤트 큐의 다른 보류 중인 작업을 기준으로 하는 우선 순위 <see cref="T:System.Windows.Threading.Dispatcher" /> 입니다.</param>
      <param name="args">주어진 메서드에 인수로 전달하는 개체의 배열입니다. <see langword="null" />일 수 있습니다.</param>
      <returns>
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 대리자를 비동기적으로 실행합니다.</summary>
      <param name="priority">지정 된 메서드가 호출 되는 이벤트 큐의 다른 보류 중인 작업을 기준으로 하는 우선 순위 <see cref="T:System.Windows.Threading.Dispatcher" /> 입니다.</param>
      <param name="method">인수가 없는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" />은 유효한 <see cref="T:System.Windows.Threading.DispatcherPriority" />이 아닙니다.</exception>
      <returns>
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 비동기적으로 실행합니다.</summary>
      <param name="priority">지정 된 메서드가 호출 되는 이벤트 큐의 다른 보류 중인 작업을 기준으로 하는 우선 순위 <see cref="T:System.Windows.Threading.Dispatcher" /> 입니다.</param>
      <param name="method">인수를 하나 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <param name="arg">지정된 메서드에 인수로 전달하는 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" />은 유효한 <see cref="T:System.Windows.Threading.DispatcherPriority" />이 아닙니다.</exception>
      <returns>
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수 배열을 사용하여 지정된 우선 순위에 있는 지정된 대리자를 비동기적으로 실행합니다.</summary>
      <param name="priority">지정 된 메서드가 호출 되는 이벤트 큐의 다른 보류 중인 작업을 기준으로 하는 우선 순위 <see cref="T:System.Windows.Threading.Dispatcher" /> 입니다.</param>
      <param name="method">인수를 여러 개 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <param name="arg">지정된 메서드에 인수로 전달하는 개체입니다.</param>
      <param name="args">지정된 메서드에 인수로 전달하는 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <see cref="T:System.Windows.Threading.DispatcherPriority" />가 올바른 속성이 아닌 경우</exception>
      <returns>
        <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" />가 호출된 후 즉시 반환되며, <see cref="T:System.Windows.Threading.Dispatcher" /> 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)">
      <summary>비동기적으로 <see cref="T:System.Windows.Threading.Dispatcher" /> 종료를 시작합니다.</summary>
      <param name="priority">Dispatcher 종료를 시작하는 우선 순위입니다.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.CheckAccess">
      <summary>호출 스레드가 이 <see cref="T:System.Windows.Threading.Dispatcher" />에 연결된 스레드인지 여부를 확인합니다.</summary>
      <returns>호출 스레드가 이 <see cref="T:System.Windows.Threading.Dispatcher" />에 연결된 스레드이면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.DisableProcessing">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> 큐 프로세스를 비활성화합니다.</summary>
      <returns>Dispatcher 처리를 다시 활성화하는 데 사용되는 구조체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ExitAllFrames">
      <summary>중첩된 프레임을 포함하여 모든 프레임을 종료하도록 요청합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)">
      <summary>지정된 스레드에 대한 <see cref="T:System.Windows.Threading.Dispatcher" />를 가져옵니다.</summary>
      <param name="thread">
        <see cref="T:System.Windows.Threading.Dispatcher" />를 가져올 스레드입니다.</param>
      <returns>
        <paramref name="thread" />에 대한 Dispatcher입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)">
      <summary>
        <see cref="T:System.Action" />가 연결된 스레드에서 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
      <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>
        <see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</summary>
      <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
      <param name="priority">에서 보류 중인 다른 작업을 기준으로 지정 된 콜백이 호출 되는 순서를 결정 하는 우선 순위입니다 <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</summary>
      <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
      <param name="priority">에서 보류 중인 다른 작업을 기준으로 지정 된 콜백이 호출 되는 순서를 결정 하는 우선 순위입니다 <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="cancellationToken">동작을 취소할지 여부를 나타내는 개체입니다.</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary>
        <see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</summary>
      <param name="callback">디스패처를 통해 호출할 동작 대리자입니다.</param>
      <param name="priority">에서 보류 중인 다른 작업을 기준으로 지정 된 콜백이 호출 되는 순서를 결정 하는 우선 순위입니다 <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="cancellationToken">동작을 취소할지 여부를 나타내는 개체입니다.</param>
      <param name="timeout">작업이 시작 될 때까지 대기 하는 최대 시간입니다. 작업이 시작 되 면이 메서드가 반환 되기 전에 완료 됩니다. 무한 대기를 지정 하려면-1 값을 사용 합니다. 동일한 스레드 호출에서 다른 음수 값은-1로 변환 되어 무한 대기를 발생 합니다. 크로스 스레드 호출에서 다른 모든 음수 값은을 throw <see cref="T:System.ArgumentOutOfRangeException" /> 합니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 가-1 이외의 음수이 고이 메서드가 여러 스레드에 대해 호출 된 경우</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" />가 올바른 속성이 아닌 경우</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 대리자를 동기적으로 실행합니다.</summary>
      <param name="method">
        <paramref name="args" />에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <param name="args">주어진 메서드에 인수로 전달하는 개체의 배열입니다. <see langword="null" />일 수 있습니다.</param>
      <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위의 지정된 기간 내에서 지정된 대리자를 동기적으로 실행합니다.</summary>
      <param name="method">
        <paramref name="args" />에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <param name="timeout">작업이 시작 될 때까지 대기 하는 최대 시간입니다. 그러나 작업이 시작 되 면이 메서드가 반환 되기 전에 작업이 완료 됩니다. 무한 대기를 지정 하려면-1 값을 사용 합니다. 동일한 스레드 호출에서 다른 음수 값은-1로 변환 되어 무한 대기를 발생 합니다. 크로스 스레드 호출에서 다른 모든 음수 값은을 throw <see cref="T:System.ArgumentOutOfRangeException" /> 합니다.</param>
      <param name="args">주어진 메서드에 인수로 전달하는 개체의 배열입니다. <see langword="null" />인수가 필요 하지 않은 경우 일 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 가-1 이외의 음수 이며 스레드 간에 호출 하는 경우</exception>
      <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위의 지정된 기간 내에서 지정된 대리자를 동기적으로 실행합니다.</summary>
      <param name="method">
        <paramref name="args" />에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <param name="timeout">작업이 시작 될 때까지 대기 하는 최대 시간입니다. 작업이 시작 되 면이 메서드가 반환 되기 전에 완료 됩니다. 무한 대기를 지정 하려면-1 값을 사용 합니다. 동일한 스레드 호출에서 다른 음수 값은-1로 변환 되어 무한 대기를 발생 합니다. 크로스 스레드 호출에서 다른 모든 음수 값은을 throw <see cref="T:System.ArgumentOutOfRangeException" /> 합니다.</param>
      <param name="priority">지정 된 메서드가 호출 되는 이벤트 큐의 다른 보류 중인 작업을 기준으로 하는 우선 순위 <see cref="T:System.Windows.Threading.Dispatcher" /> 입니다.</param>
      <param name="args">주어진 메서드에 인수로 전달하는 개체의 배열입니다. <see langword="null" />일 수 있습니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 가-1 이외의 음수이 고이 메서드가 여러 스레드에 대해 호출 된 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" />이(가) <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" />가 올바른 속성이 아닌 경우</exception>
      <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</summary>
      <param name="method">
        <paramref name="args" />에 지정된 매개 변수를 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <param name="priority">이벤트 큐의 다른 보류 중인 작업을 기준으로 지정 된 메서드가 호출 되는 우선 순위입니다 <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="args">주어진 메서드에 인수로 전달하는 개체의 배열입니다. <see langword="null" />일 수 있습니다.</param>
      <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary>가 연결 된 스레드에서 지정 된 우선 순위에 있는 지정 된 대리자를 동기적 <see cref="T:System.Windows.Threading.Dispatcher" /> 으로 실행 합니다.</summary>
      <param name="priority">이벤트 큐의 다른 보류 중인 작업을 기준으로 지정 된 메서드가 호출 되는 우선 순위입니다 <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="method">인수가 없는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" />이(가) <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" />가 올바른 속성이 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이(가) <see langword="null" />인 경우</exception>
      <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</summary>
      <param name="priority">지정 된 메서드가 호출 되는 이벤트 큐의 다른 보류 중인 작업을 기준으로 하는 우선 순위 <see cref="T:System.Windows.Threading.Dispatcher" /> 입니다.</param>
      <param name="method">인수를 하나 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <param name="arg">지정된 메서드에 인수로 전달하는 개체입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" />이(가) <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" />가 올바른 속성이 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이(가) <see langword="null" />인 경우</exception>
      <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</summary>
      <param name="priority">지정 된 메서드가 호출 되는 이벤트 큐의 다른 보류 중인 작업을 기준으로 하는 우선 순위 <see cref="T:System.Windows.Threading.Dispatcher" /> 입니다.</param>
      <param name="method">인수를 여러 개 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <param name="arg">지정된 메서드에 인수로 전달하는 개체입니다.</param>
      <param name="args">주어진 메서드에 인수로 전달하는 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" />이(가) <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" />가 올바른 속성이 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이(가) <see langword="null" />인 경우</exception>
      <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 만들어진 스레드에서 지정된 제한 시간 값을 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</summary>
      <param name="priority">지정 된 메서드가 호출 되는 이벤트 큐의 다른 보류 중인 작업을 기준으로 하는 우선 순위 <see cref="T:System.Windows.Threading.Dispatcher" /> 입니다.</param>
      <param name="timeout">작업이 시작 될 때까지 대기 하는 최대 시간입니다. 작업이 시작 되 면이 메서드가 반환 되기 전에 완료 됩니다. 무한 대기를 지정 하려면-1 값을 사용 합니다. 동일한 스레드 호출에서 다른 음수 값은-1로 변환 되어 무한 대기를 발생 합니다. 크로스 스레드 호출에서 다른 모든 음수 값은을 throw <see cref="T:System.ArgumentOutOfRangeException" /> 합니다.</param>
      <param name="method">인수가 없는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 가-1 이외의 음수이 고이 메서드가 여러 스레드에 대해 호출 된 경우</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" />이(가) <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" />가 올바른 속성이 아닌 경우</exception>
      <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</summary>
      <param name="priority">지정 된 메서드가 호출 되는 이벤트 큐의 다른 보류 중인 작업을 기준으로 하는 우선 순위 <see cref="T:System.Windows.Threading.Dispatcher" /> 입니다.</param>
      <param name="timeout">작업이 시작 될 때까지 대기 하는 최대 시간입니다. 작업이 시작 되 면이 메서드가 반환 되기 전에 완료 됩니다. 무한 대기를 지정 하려면-1 값을 사용 합니다. 동일한 스레드 호출에서 다른 음수 값은-1로 변환 되어 무한 대기를 발생 합니다. 크로스 스레드 호출에서 다른 모든 음수 값은을 throw <see cref="T:System.ArgumentOutOfRangeException" /> 합니다.</param>
      <param name="method">인수를 여러 개 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <param name="arg">지정된 메서드에 인수로 전달하는 개체입니다. 인수가 필요하지 않으면 <see langword="null" />일 수 있습니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" />이(가) <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" />가 올바른 속성이 아닌 경우</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이(가) <see langword="null" />인 경우</exception>
      <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드에서 지정된 인수를 사용하여 지정된 우선 순위에 있는 지정된 대리자를 동기적으로 실행합니다.</summary>
      <param name="priority">지정 된 메서드가 호출 되는 이벤트 큐의 다른 보류 중인 작업을 기준으로 하는 우선 순위 <see cref="T:System.Windows.Threading.Dispatcher" /> 입니다.</param>
      <param name="timeout">작업이 시작 될 때까지 대기 하는 최대 시간입니다. 작업이 시작 되 면이 메서드가 반환 되기 전에 완료 됩니다. 무한 대기를 지정 하려면-1 값을 사용 합니다. 동일한 스레드 호출에서 다른 음수 값은-1로 변환 되어 무한 대기를 발생 합니다. 크로스 스레드 호출에서 다른 모든 음수 값은을 throw <see cref="T:System.ArgumentOutOfRangeException" /> 합니다.</param>
      <param name="method">인수를 여러 개 사용하는 메서드에 대한 대리자로, <see cref="T:System.Windows.Threading.Dispatcher" /> 이벤트 큐로 푸시됩니다.</param>
      <param name="arg">지정된 메서드에 인수로 전달하는 개체입니다.</param>
      <param name="args">지정된 메서드에 인수로 전달하는 개체의 배열입니다.</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="priority" />이(가) <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />와 같은 경우.</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" />은 유효한 <see cref="T:System.Windows.Threading.DispatcherPriority" />이 아닙니다.</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="method" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 가-1 이외의 음수이 고이 메서드가 여러 스레드에 대해 호출 된 경우</exception>
      <returns>호출되는 대리자의 반환 값이거나, 대리자에 반환 값이 없는 경우 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})">
      <summary>
        <see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
      <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
      <typeparam name="TResult">지정된 대리자의 반환 값 형식입니다.</typeparam>
      <returns>에서 반환 하는 값 <paramref name="callback" /> 입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary>
        <see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</summary>
      <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
      <param name="priority">에서 보류 중인 다른 작업을 기준으로 지정 된 콜백이 호출 되는 순서를 결정 하는 우선 순위입니다 <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <typeparam name="TResult">지정된 대리자의 반환 값 형식입니다.</typeparam>
      <returns>에서 반환 하는 값 <paramref name="callback" /> 입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</summary>
      <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
      <param name="priority">에서 보류 중인 다른 작업을 기준으로 지정 된 콜백이 호출 되는 순서를 결정 하는 우선 순위입니다 <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="cancellationToken">작업을 취소할지 여부를 나타내는 개체입니다.</param>
      <typeparam name="TResult">지정된 대리자의 반환 값 형식입니다.</typeparam>
      <returns>에서 반환 하는 값 <paramref name="callback" /> 입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary>
        <see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 동기적으로 실행합니다.</summary>
      <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
      <param name="priority">에서 보류 중인 다른 작업을 기준으로 지정 된 콜백이 호출 되는 순서를 결정 하는 우선 순위입니다 <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="cancellationToken">작업을 취소할지 여부를 나타내는 개체입니다.</param>
      <param name="timeout">작업이 시작 될 때까지 대기 하는 최대 시간입니다. 작업이 시작 되 면이 메서드가 반환 되기 전에 완료 됩니다. 무한 대기를 지정 하려면-1 값을 사용 합니다. 동일한 스레드 호출에서 다른 음수 값은-1로 변환 되어 무한 대기를 발생 합니다. 크로스 스레드 호출에서 다른 모든 음수 값은을 throw <see cref="T:System.ArgumentOutOfRangeException" /> 합니다.</param>
      <typeparam name="TResult">지정된 대리자의 반환 값 형식입니다.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="timeout" /> 가-1 이외의 음수 이며 메서드가 스레드 간에 호출 된 경우</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" />가 올바른 속성이 아닌 경우</exception>
      <returns>에서 반환 하는 값 <paramref name="callback" /> 입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)">
      <summary>
        <see cref="T:System.Action" />가 연결된 스레드에서 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
      <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
      <returns>
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary>
        <see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
      <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
      <param name="priority">에서 보류 중인 다른 작업을 기준으로 지정 된 콜백이 호출 되는 순서를 결정 하는 우선 순위입니다 <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <returns>
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Action" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
      <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
      <param name="priority">에서 보류 중인 다른 작업을 기준으로 지정 된 콜백이 호출 되는 순서를 결정 하는 우선 순위입니다 <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="cancellationToken">동작을 취소할지 여부를 나타내는 개체입니다.</param>
      <returns>
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})">
      <summary>
        <see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
      <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
      <typeparam name="TResult">지정된 대리자의 반환 값 형식입니다.</typeparam>
      <returns>
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary>
        <see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
      <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
      <param name="priority">에서 보류 중인 다른 작업을 기준으로 지정 된 콜백이 호출 되는 순서를 결정 하는 우선 순위입니다 <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <typeparam name="TResult">지정된 대리자의 반환 값 형식입니다.</typeparam>
      <returns>
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Func`1" />가 연결된 스레드에서 지정된 우선 순위에 있는 지정된 <see cref="T:System.Windows.Threading.Dispatcher" />를 비동기적으로 실행합니다.</summary>
      <param name="callback">디스패처를 통해 호출할 대리자입니다.</param>
      <param name="priority">에서 보류 중인 다른 작업을 기준으로 지정 된 콜백이 호출 되는 순서를 결정 하는 우선 순위입니다 <see cref="T:System.Windows.Threading.Dispatcher" /> .</param>
      <param name="cancellationToken">작업을 취소할지 여부를 나타내는 개체입니다.</param>
      <typeparam name="TResult">지정된 대리자의 반환 값 형식입니다.</typeparam>
      <returns>
        <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" />가 호출된 후 즉시 반환되며, 이벤트 큐에서 실행 보류 중일 때 대리자와 상호 작용하는 데 사용할 수 있는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeShutdown">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />의 종료 프로세스를 동기적으로 시작합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)">
      <summary>실행 루프로 들어갑니다.</summary>
      <param name="frame">처리할 Dispatcher의 프레임입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="frame" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" />가 <see langword="true" />인 경우  
  
또는 
 <paramref name="frame" />이 다른 <see cref="T:System.Windows.Threading.Dispatcher" />에서 실행 중인 경우  
  
또는 
Dispatcher 처리가 비활성화된 경우</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Run">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />의 이벤트 큐에서 기본 실행 프레임을 푸시합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)">
      <summary>지정된 <see cref="T:System.Windows.Threading.DispatcherPriority" />가 유효한 우선 순위인지 여부를 확인합니다.</summary>
      <param name="priority">확인할 우선 순위입니다.</param>
      <param name="parameterName">우선 순위가 잘못된 경우 발생하는 예외에서 반환되는 문자열입니다.</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">
        <paramref name="priority" />은 유효한 <see cref="T:System.Windows.Threading.DispatcherPriority" />이 아닙니다.</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.VerifyAccess">
      <summary>호출 스레드가 이 <see cref="T:System.Windows.Threading.Dispatcher" />에 액세스할 수 있는지 여부를 확인합니다.</summary>
      <exception cref="T:System.InvalidOperationException">호출 스레드에서 이 <see cref="T:System.Windows.Threading.Dispatcher" />에 액세스할 수 없는 경우</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield">
      <summary>현재 디스패처에 비동기적으로 제어를 다시 제공하여 다른 이벤트를 처리할 수 있는 기회를 디스패처에 제공하는 awaitable 개체를 만듭니다.</summary>
      <returns>현재 디스패처에 제어를 비동기적으로 다시 제공하여 디스패처가 다른 이벤트를 처리할 수 있도록 기회를 제공하는 awaitable 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)">
      <summary>현재 디스패처에 비동기적으로 제어를 다시 제공하여 다른 이벤트를 처리할 수 있는 기회를 디스패처에 제공하는 awaitable 개체를 만듭니다.  이 메서드의 결과를 기다리는 코드에 제어를 반환할 때 발생하는 작업은 지정된 우선 순위를 사용하여 예약됩니다.</summary>
      <param name="priority">연속 예약할 우선 순위입니다.</param>
      <returns>현재 디스패처에 제어를 비동기적으로 다시 제공하여 디스패처가 다른 이벤트를 처리할 수 있도록 기회를 제공하는 awaitable 개체입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.CurrentDispatcher">
      <summary>스레드에 연결된 Dispatcher가 없는 경우 현재 실행 중인 스레드에 대한 <see cref="T:System.Windows.Threading.Dispatcher" />를 가져와서 새 <see cref="T:System.Windows.Threading.Dispatcher" />를 만듭니다.</summary>
      <returns>현재 스레드에 연결된 Dispatcher입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownFinished">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 완전히 종료되었는지 여부를 확인합니다.</summary>
      <returns>Dispatcher가 완전히 종료되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownStarted">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 종료되었는지 여부를 확인합니다.</summary>
      <returns>
        <see cref="T:System.Windows.Threading.Dispatcher" />가 종료되기 시작했으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Hooks">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />에 대한 추가 이벤트 정보를 제공하는 후크 컬렉션을 가져옵니다.</summary>
      <returns>이 <see cref="T:System.Windows.Threading.Dispatcher" />에 연결된 후크입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Thread">
      <summary>이 <see cref="T:System.Windows.Threading.Dispatcher" />가 연결된 스레드를 가져옵니다.</summary>
      <returns>스레드입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherEventArgs">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> 관련 이벤트에 대한 이벤트 데이터를 제공합니다.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherEventArgs.Dispatcher">
      <summary>이 이벤트와 연결된 <see cref="T:System.Windows.Threading.Dispatcher" />입니다.</summary>
      <returns>디스패처입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherFrame">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />에 있는 실행 루프를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherFrame" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor(System.Boolean)">
      <summary>지정된 종료 요청 플래그를 사용하여 <see cref="T:System.Windows.Threading.DispatcherFrame" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="exitWhenRequested">모든 프레임이 종료되도록 요청될 때 이 프레임이 종료될지 여부를 나타냅니다.</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherFrame.Continue">
      <summary>이 <see cref="T:System.Windows.Threading.DispatcherFrame" />을 계속할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>프레임을 계속해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventArgs">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherHooks" /> 이벤트에 대한 이벤트 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherHookEventArgs.#ctor(System.Windows.Threading.DispatcherOperation)">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherHookEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="operation">이벤트와 연결된 작업입니다.</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Dispatcher">
      <summary>이 이벤트와 연결된 <see cref="T:System.Windows.Threading.Dispatcher" />를 가져옵니다.</summary>
      <returns>이 이벤트와 연결된 <see cref="T:System.Windows.Threading.Dispatcher" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Operation">
      <summary>이 이벤트와 연결된 <see cref="T:System.Windows.Threading.DispatcherOperation" />를 가져옵니다.</summary>
      <returns>작업입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventHandler">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherHooks" /> 관련 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터입니다.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHooks">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> 처리에 대한 추가 이벤트 정보를 제공합니다.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.DispatcherInactive">
      <summary>디스패처에서 처리할 작업이 더 없을 때 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationAborted">
      <summary>작업이 중단될 때 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationCompleted">
      <summary>작업이 완료될 때 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPosted">
      <summary>작업이 디스패처로 게시될 때 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPriorityChanged">
      <summary>작업의 우선 순위가 변경될 때 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationStarted">
      <summary>작업이 호출될 때 발생합니다.</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherObject">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />와 연결된 개체를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.#ctor">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherObject" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.CheckAccess">
      <summary>호출 스레드가 이 <see cref="T:System.Windows.Threading.DispatcherObject" />에 액세스할 수 있는지 여부를 확인합니다.</summary>
      <returns>호출 스레드에서 이 개체에 액세스할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.VerifyAccess">
      <summary>호출 스레드에서 이 <see cref="T:System.Windows.Threading.DispatcherObject" />에 액세스할 수 있는지 확인합니다.</summary>
      <exception cref="T:System.InvalidOperationException">호출 스레드에서 이 <see cref="T:System.Windows.Threading.DispatcherObject" />에 액세스할 수 없는 경우</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherObject.Dispatcher">
      <summary>이 <see cref="T:System.Windows.Threading.Dispatcher" />와 연결된 <see cref="T:System.Windows.Threading.DispatcherObject" />를 가져옵니다.</summary>
      <returns>디스패처입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> 큐로 게시된 작업과 상호 작용하는 데 사용되는 개체를 나타냅니다.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Aborted">
      <summary>작업이 중단될 때 발생합니다.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Completed">
      <summary>작업이 완료되면 발생합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Abort">
      <summary>작업을 중단합니다.</summary>
      <returns>작업이 취소되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.GetAwaiter">
      <summary>비동기 작업이 완료될 때 알림을 받는 개체를 반환합니다.</summary>
      <returns>비동기 작업이 완료될 때 알림을 받는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.InvokeDelegateCore">
      <summary>이 <see cref="T:System.Windows.Threading.DispatcherOperation" />과 관련된 작업을 시작합니다.</summary>
      <returns>모든 경우에 <see langword="null" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait">
      <summary>작업이 완료되기를 기다립니다.</summary>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" />이(가) <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />와 같은 경우.  동일 스레드에서 이미 실행 중인 작업을 기다릴 때 이 예외가 발생할 수 있습니다.</exception>
      <returns>작업의 상태입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)">
      <summary>지정된 시간 동안 작업이 완료되기를 기다립니다.</summary>
      <param name="timeout">기다릴 최대 시간입니다.</param>
      <exception cref="T:System.InvalidOperationException">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" />이(가) <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />와 같은 경우.  동일 스레드에서 이미 실행 중인 작업을 기다릴 때 이 예외가 발생할 수 있습니다.</exception>
      <returns>작업의 상태입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Dispatcher">
      <summary>작업이 게시된 <see cref="T:System.Windows.Threading.Dispatcher" />를 가져옵니다.</summary>
      <returns>디스패처입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Priority">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> 큐에 있는 작업의 우선 순위를 가져오거나 설정합니다.</summary>
      <returns>큐에 있는 대리자의 우선 순위입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Result">
      <summary>작업이 완료된 후 작업 결과를 가져옵니다.</summary>
      <returns>작업이 완료되었으면 작업 결과이고, 그렇지 않으면 <see langword="null" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Status">
      <summary>작업의 현재 상태를 가져옵니다.</summary>
      <returns>작업의 상태입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Task">
      <summary>현재 작업을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />를 가져옵니다.</summary>
      <returns>현재 작업을 나타내는 개체입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation`1">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" /> 큐로 게시되고 <see cref="T:System.Threading.Tasks.Task`1" />을 포함하는 작업과 상호 작용하는 데 사용되는 개체를 나타냅니다.</summary>
      <typeparam name="TResult">
        <see cref="T:System.Threading.Tasks.Task`1" />에서 반환하는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.GetAwaiter">
      <summary>결과를 반환하는 비동기 작업을 기다리는 개체를 반환합니다.</summary>
      <returns>결과를 반환하는 비동기 작업을 기다리는 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.InvokeDelegateCore">
      <summary>이 <see cref="T:System.Windows.Threading.DispatcherOperation" />과 관련된 작업을 시작합니다.</summary>
      <returns>작업의 결과입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Result">
      <summary>작업이 완료된 후 작업 결과를 가져옵니다.</summary>
      <returns>작업의 결과입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Task">
      <summary>현재 작업을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />를 가져옵니다.</summary>
      <returns>현재 작업을 나타내는 개체입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationCallback">
      <summary>디스패처 작업에 사용할 대리자를 나타냅니다.</summary>
      <param name="arg">콜백에 전달된 인수입니다.</param>
      <returns>콜백에서 반환된 개체입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationStatus">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherOperation" /> 상태에 대한 가능한 값을 설명합니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Aborted">
      <summary>작업이 중단되었습니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Completed">
      <summary>작업이 완료되었습니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Executing">
      <summary>작업이 실행되기 시작했지만 완료되지 않았습니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Pending">
      <summary>작업이 보류 중이며 아직 <see cref="T:System.Windows.Threading.Dispatcher" /> 큐에 있습니다.</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriority">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />를 통해 작업이 호출되는 우선 순위를 설명합니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ApplicationIdle">
      <summary>열거형 값이 2입니다. 애플리케이션이 유휴 상태일 때 작업이 처리됩니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Background">
      <summary>열거형 값이 4입니다. 유휴 상태가 아닌 다른 모든 작업이 완료된 후 작업이 처리됩니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ContextIdle">
      <summary>열거형 값이 3입니다. 백그라운드 작업이 완료된 후 작업이 처리됩니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.DataBind">
      <summary>열거형 값이 8입니다. 데이터 바인딩과 동일한 우선 순위로 작업이 처리됩니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Inactive">
      <summary>열거형 값이 0입니다. 작업이 처리되지 않습니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Input">
      <summary>열거형 값이 5입니다. 입력과 동일한 우선 순위로 작업이 처리됩니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Invalid">
      <summary>열거형 값이 -1입니다. 잘못된 우선 순위입니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Loaded">
      <summary>열거형 값이 6입니다. 레이아웃과 렌더링이 종료되었지만 입력 우선 순위의 항목이 처리되기 전에 작업이 처리됩니다. 특히 Loaded 이벤트를 발생시킬 때 사용됩니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Normal">
      <summary>열거형 값이 9입니다. 보통 우선 순위로 작업이 처리됩니다. 일반적인 애플리케이션 우선 순위입니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Render">
      <summary>열거형 값이 7입니다. 렌더링과 동일한 우선 순위로 작업이 처리됩니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Send">
      <summary>열거형 값이 10입니다. 다른 비동기 작업 전에 작업이 처리됩니다. 가장 높은 우선 순위입니다.</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.SystemIdle">
      <summary>열거형 값이 1입니다. 시스템이 유휴 상태일 때 작업이 처리됩니다.</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaitable">
      <summary>현재 디스패처에 비동기적으로 제어를 다시 제공하여 다른 이벤트를 처리할 수 있는 기회를 디스패처에 제공하는 awaitable 개체를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaitable.GetAwaiter">
      <summary>비동기 작업의 완료를 기다리는 개체를 반환합니다.</summary>
      <returns>비동기 작업의 완료를 기다리는 개체입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaiter">
      <summary>비동기 작업의 완료를 기다리는 개체를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.GetResult">
      <summary>비동기 작업의 완료에 대한 대기를 종료합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.OnCompleted(System.Action)">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherPriorityAwaiter" /> 개체가 비동기 작업을 완료하기 위해 대기를 중지할 경우 수행할 동작을 설정합니다.</summary>
      <param name="continuation">대기 작업이 완료될 때 수행할 작업입니다.</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherPriorityAwaiter.IsCompleted">
      <summary>비동기 작업이 완료되었는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>모든 경우에 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherProcessingDisabled">
      <summary>비활성 상태일 때 디스패처를 나타내며 디스패처 처리를 다시 활성화할 수 있도록 합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Dispose">
      <summary>디스패처 처리를 다시 활성화합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Equals(System.Object)">
      <summary>지정된 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 개체가 이 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 개체와 같은지 여부를 확인합니다.</summary>
      <param name="obj">같은지 평가할 개체입니다.</param>
      <returns>지정된 개체가 이 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 개체와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.GetHashCode">
      <summary>이 인스턴스의 해시 코드를 가져옵니다.</summary>
      <returns>부호 있는 32비트 정수 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Equality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>두 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 개체가 서로 같은지 확인합니다.</summary>
      <param name="left">비교할 첫 번째 개체입니다.</param>
      <param name="right">비교할 두 번째 개체입니다.</param>
      <returns>
        <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 개체가 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Inequality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary>두 개의 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 개체가 같은지 여부를 확인합니다.</summary>
      <param name="left">비교할 첫 번째 개체입니다.</param>
      <param name="right">비교할 두 번째 개체입니다.</param>
      <returns>
        <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 개체가 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherSynchronizationContext">
      <summary>WPF(Windows Presentation Foundation)에 대한 동기화 컨텍스트를 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor">
      <summary>현재 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />를 사용하여 <see cref="T:System.Windows.Threading.Dispatcher" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)">
      <summary>지정된 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />을 사용하여 <see cref="T:System.Windows.Threading.Dispatcher" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dispatcher">이 <see cref="T:System.Windows.Threading.Dispatcher" />와 연결할 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority)">
      <summary>지정된 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />을 사용하여 <see cref="T:System.Windows.Threading.Dispatcher" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dispatcher">이 <see cref="T:System.Windows.Threading.Dispatcher" />와 연결할 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />입니다.</param>
      <param name="priority">콜백 메서드를 보내고 게시하는 데 사용되는 우선 순위입니다.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy">
      <summary>이 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />의 복사본을 만듭니다.</summary>
      <returns>이 동기화 컨텍스트의 복사본입니다.</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary>동기화 컨텍스트에서 비동기적으로 콜백을 호출합니다.</summary>
      <param name="d">호출할 대리자입니다.</param>
      <param name="state">대리자에 전달된 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary>동기화 컨텍스트에서 동기적으로 콜백을 호출합니다.</summary>
      <param name="d">호출할 대리자입니다.</param>
      <param name="state">대리자에 전달된 개체입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="d" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)">
      <summary>지정된 배열의 임의 또는 모든 요소가 신호를 받기를 기다립니다.</summary>
      <param name="waitHandles">네이티브 운영 체제 핸들을 포함하는 배열입니다.</param>
      <param name="waitAll">모든 핸들을 대기하려면 <see langword="true" />이고, 임의 핸들을 대기하려면 <see langword="false" />입니다.</param>
      <param name="millisecondsTimeout">대기할 시간(밀리초)이거나, 무기한 대기할 경우 <see cref="F:System.Threading.Timeout.Infinite" />(-1)입니다.</param>
      <returns>대기를 만족한 개체의 배열 인덱스입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherTimer">
      <summary>지정된 시간 간격과 우선 순위로 처리되는 <see cref="T:System.Windows.Threading.Dispatcher" /> 큐로 통합되는 타이머입니다.</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherTimer.Tick">
      <summary>타이머 간격이 경과되면 발생합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherTimer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)">
      <summary>지정된 시간 간격, 우선 순위, 이벤트 처리기 및 <see cref="T:System.Windows.Threading.DispatcherTimer" />를 사용하는 <see cref="T:System.Windows.Threading.Dispatcher" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="interval">틱 사이의 시간 간격입니다.</param>
      <param name="priority">타이머를 호출할 우선 순위입니다.</param>
      <param name="callback">
        <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> 이벤트가 발생할 때 호출할 이벤트 처리기입니다.</param>
      <param name="dispatcher">타이머가 연결된 디스패처입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="callback" />이(가) <see langword="null" />인 경우

또는

<paramref name="dispatcher" />이(가) <see langword="null" />인 경우</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" />가 0보다 작거나 <see cref="F:System.Int32.MaxValue" />보다 큽니다.</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)">
      <summary>지정된 우선 순위로 타이머 이벤트를 처리하는 <see cref="T:System.Windows.Threading.DispatcherTimer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="priority">타이머를 호출할 우선 순위입니다.</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
      <summary>지정된 <see cref="T:System.Windows.Threading.DispatcherTimer" />에서 지정된 우선 순위로 실행되는 <see cref="T:System.Windows.Threading.Dispatcher" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="priority">타이머를 호출할 우선 순위입니다.</param>
      <param name="dispatcher">타이머가 연결된 디스패처입니다.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="dispatcher" />이(가) <see langword="null" />인 경우</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Start">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherTimer" />를 시작합니다.</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Stop">
      <summary>
        <see cref="T:System.Windows.Threading.DispatcherTimer" />를 중지합니다.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Dispatcher">
      <summary>이 <see cref="T:System.Windows.Threading.Dispatcher" />와 연결된 <see cref="T:System.Windows.Threading.DispatcherTimer" />를 가져옵니다.</summary>
      <returns>디스패처입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Interval">
      <summary>타이머 틱 사이의 시간 간격을 가져오거나 설정합니다.</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="interval" />이 0보다 작거나 <see cref="F:System.Int32.MaxValue" />밀리초보다 큰 경우</exception>
      <returns>틱 사이의 시간 간격입니다. 기본값은 00:00:00입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.IsEnabled">
      <summary>타이머가 실행 중인지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>타이머가 설정되어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  기본값은 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Tag">
      <summary>사용자 정의 데이터를 가져오거나 설정합니다.</summary>
      <returns>사용자 정의 데이터입니다.  기본값은 <see langword="null" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception">
      <summary>디스패처로 코드를 실행할 때 발생한 예외를 가져옵니다.</summary>
      <returns>예외입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled">
      <summary>예외 이벤트가 처리되었는지 여부를 가져오거나 설정합니다.</summary>
      <returns>예외가 처리되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler">
      <summary>
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터입니다.</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs">
      <summary>
        <see cref="T:System.Windows.Threading.Dispatcher" />
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception">
      <summary>디스패처로 코드를 실행할 때 발생한 예외를 가져옵니다.</summary>
      <returns>예외입니다.</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch">
      <summary>이벤트 처리기가 호출될 때 예외를 catch해야 하는지 여부를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />이 발생해야 하면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.  기본값은 <see langword="true" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler">
      <summary>
        <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> 이벤트를 처리할 메서드를 나타냅니다.</summary>
      <param name="sender">이벤트 소스입니다.</param>
      <param name="e">이벤트 데이터입니다.</param>
    </member>
    <member name="T:System.Windows.ValidateValueCallback">
      <summary>종속성 속성의 유효 값을 확인하는 콜백으로 사용되는 메서드를 나타냅니다.</summary>
      <param name="value">유효성을 검사할 값입니다.</param>
      <returns>값의 유효성이 확인되었으면 <see langword="true" />이고, 제출된 값이 잘못되었으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.Vector">
      <summary>2차원 공간의 변위를 나타냅니다.</summary>
    </member>
    <member name="M:System.Windows.Vector.#ctor(System.Double,System.Double)">
      <summary>
        <see cref="T:System.Windows.Vector" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
      <param name="x">새 <see cref="P:System.Windows.Vector.X" />의 <see cref="T:System.Windows.Vector" /> 오프셋입니다.</param>
      <param name="y">새 <see cref="P:System.Windows.Vector.Y" />의 <see cref="T:System.Windows.Vector" /> 오프셋입니다.</param>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)">
      <summary>지정된 벡터에 따라 지정된 점을 변환하고 결과 점을 반환합니다.</summary>
      <param name="vector">지정된 점을 변환할 크기입니다.</param>
      <param name="point">변환할 점입니다.</param>
      <returns>
        <paramref name="point" />에 따라 <paramref name="vector" />를 변환한 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)">
      <summary>두 벡터를 더한 결과를 <see cref="T:System.Windows.Vector" /> 구조체로 반환합니다.</summary>
      <param name="vector1">더할 첫 번째 벡터입니다.</param>
      <param name="vector2">더할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="vector1" />와 <paramref name="vector2" />의 합입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)">
      <summary>지정된 두 벡터 사이의 각도를 도 단위로 검색합니다.</summary>
      <param name="vector1">계산할 첫 번째 벡터입니다.</param>
      <param name="vector2">계산할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="vector1" />과 <paramref name="vector2" /> 사이의 각도(도 단위)입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)">
      <summary>두 벡터의 외적을 계산합니다.</summary>
      <param name="vector1">계산할 첫 번째 벡터입니다.</param>
      <param name="vector2">계산할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="vector1" />과 <paramref name="vector2" />의 외적입니다. 다음 수식을 통해 외적이 계산됩니다. 
 <c>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</c></returns>
    </member>
    <member name="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)">
      <summary>두 벡터의 행렬식을 계산합니다.</summary>
      <param name="vector1">계산할 첫 번째 벡터입니다.</param>
      <param name="vector2">계산할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="vector1" />과 <paramref name="vector2" />의 행렬식입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)">
      <summary>지정된 벡터를 지정된 스칼라로 나눈 결과를 <see cref="T:System.Windows.Vector" />로 반환합니다.</summary>
      <param name="vector">나눌 벡터 구조체입니다.</param>
      <param name="scalar">
        <paramref name="vector" />를 나눌 크기입니다.</param>
      <returns>
        <paramref name="vector" />를 <paramref name="scalar" />로 나눈 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Object)">
      <summary>지정된 <see cref="T:System.Object" /> 가 <see cref="T:System.Windows.Vector" /> 구조체인지 확인하고, 벡터 구조체이면 <see cref="P:System.Windows.Vector.X" /> 및 <see cref="P:System.Windows.Vector.Y" /> 값이 이 벡터와 같은지 확인합니다.</summary>
      <param name="o">비교할 벡터입니다.</param>
      <returns>
        <paramref name="o" />가 <see cref="T:System.Windows.Vector" />이고 <see cref="P:System.Windows.Vector.X" /> 및 <see cref="P:System.Windows.Vector.Y" /> 값이 이 벡터와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector)">
      <summary>두 벡터가 같은지 비교합니다.</summary>
      <param name="value">이 벡터와 비교할 벡터입니다.</param>
      <returns>
        <paramref name="value" />의 <see cref="P:System.Windows.Vector.X" /> 및 <see cref="P:System.Windows.Vector.Y" /> 값이 이 벡터와 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)">
      <summary>지정된 두 벡터가 서로 같은지 비교합니다.</summary>
      <param name="vector1">비교할 첫 번째 벡터입니다.</param>
      <param name="vector2">비교할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="vector1" />과 <paramref name="vector2" />의 <see cref="P:System.Windows.Vector.X" /> 및 <see cref="P:System.Windows.Vector.Y" /> 구성 요소가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.GetHashCode">
      <summary>이 벡터에 대한 해시 코드를 반환합니다.</summary>
      <returns>이 인스턴스의 해시 코드입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)">
      <summary>지정된 스칼라에 지정된 벡터를 곱한 결과 <see cref="T:System.Windows.Vector" />를 반환합니다.</summary>
      <param name="scalar">곱할 스칼라입니다.</param>
      <param name="vector">곱할 벡터입니다.</param>
      <returns>
        <paramref name="scalar" />와 <paramref name="vector" />를 곱한 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)">
      <summary>지정된 벡터에 지정된 스칼라를 곱한 결과 <see cref="T:System.Windows.Vector" />를 반환합니다.</summary>
      <param name="vector">곱할 벡터입니다.</param>
      <param name="scalar">곱할 스칼라입니다.</param>
      <returns>
        <paramref name="vector" />와 <paramref name="scalar" />를 곱한 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>지정된 <see cref="T:System.Windows.Media.Matrix" /> 구조체를 사용하여 지정된 벡터의 좌표 공간을 변환합니다.</summary>
      <param name="vector">변환할 벡터 구조체입니다.</param>
      <param name="matrix">
        <paramref name="vector" />에 적용할 변환입니다.</param>
      <returns>
        <paramref name="vector" />를 <paramref name="matrix" />에 따라 변환한 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>지정된 두 벡터의 내적을 계산한 결과를 <see cref="T:System.Double" />로 반환합니다.</summary>
      <param name="vector1">곱할 첫 번째 벡터입니다.</param>
      <param name="vector2">곱할 두 번째 벡터 구조체입니다.</param>
      <returns>다음 수식에 따라 계산된 <paramref name="vector1" />과 <paramref name="vector2" />의 스칼라 내적이 들어 있는 <see cref="T:System.Double" />입니다. 
 <c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</c></returns>
    </member>
    <member name="M:System.Windows.Vector.Negate">
      <summary>이 벡터를 반전합니다. 벡터의 크기는 전과 동일하지만 방향은 반대가 됩니다.</summary>
    </member>
    <member name="M:System.Windows.Vector.Normalize">
      <summary>이 벡터를 정규화합니다.</summary>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)">
      <summary>지정된 벡터에 따라 점을 변환하고 결과 점을 반환합니다.</summary>
      <param name="vector">
        <paramref name="point" />를 변환하는 데 사용되는 벡터입니다.</param>
      <param name="point">변환할 점입니다.</param>
      <returns>
        <paramref name="point" />에 따라 <paramref name="vector" />를 변환한 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)">
      <summary>두 벡터를 더한 결과를 벡터로 반환합니다.</summary>
      <param name="vector1">더할 첫 번째 벡터입니다.</param>
      <param name="vector2">더할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="vector1" />와 <paramref name="vector2" />의 합입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)">
      <summary>지정된 벡터를 지정된 스칼라로 나누고 결과 벡터를 반환합니다.</summary>
      <param name="vector">나눌 벡터입니다.</param>
      <param name="scalar">
        <paramref name="vector" />를 나눌 스칼라입니다.</param>
      <returns>
        <paramref name="vector" />를 <paramref name="scalar" />로 나눈 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)">
      <summary>두 벡터가 같은지 비교합니다.</summary>
      <param name="vector1">비교할 첫 번째 벡터입니다.</param>
      <param name="vector2">비교할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="vector1" />과 <paramref name="vector2" />의 <see cref="P:System.Windows.Vector.X" /> 및 <see cref="P:System.Windows.Vector.Y" /> 구성 요소가 서로 같으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point">
      <summary>이 벡터의 <see cref="T:System.Windows.Point" /> 및 <see cref="P:System.Windows.Vector.X" /> 값을 사용하여 <see cref="P:System.Windows.Vector.Y" />를 만듭니다.</summary>
      <param name="vector">변환할 벡터입니다.</param>
      <returns>
        <see cref="P:System.Windows.Point.X" /> 및 <see cref="P:System.Windows.Point.Y" /> 좌표 값이 <paramref name="vector" />의 <see cref="P:System.Windows.Vector.X" /> 및 <see cref="P:System.Windows.Vector.Y" /> 오프셋 값과 같은 점입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size">
      <summary>이 벡터의 오프셋을 사용하여 <see cref="T:System.Windows.Size" />를 만듭니다.</summary>
      <param name="vector">변환할 벡터입니다.</param>
      <returns>
        <see cref="T:System.Windows.Size" />가 이 벡터의 <see cref="P:System.Windows.Size.Width" /> 속성의 절대값과 같고 <see cref="P:System.Windows.Vector.X" />가 이 벡터의 <see cref="P:System.Windows.Size.Height" /> 속성의 절대값과 같은 <see cref="P:System.Windows.Vector.Y" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)">
      <summary>두 벡터가 서로 다른지 비교합니다.</summary>
      <param name="vector1">비교할 첫 번째 벡터입니다.</param>
      <param name="vector2">비교할 두 번째 벡터입니다.</param>
      <returns>
        <paramref name="vector1" />과 <paramref name="vector2" />의 <see cref="P:System.Windows.Vector.X" /> 및 <see cref="P:System.Windows.Vector.Y" /> 구성 요소가 서로 다르면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)">
      <summary>지정된 스칼라에 지정된 벡터를 곱한 결과 벡터를 반환합니다.</summary>
      <param name="scalar">곱할 스칼라입니다.</param>
      <param name="vector">곱할 벡터입니다.</param>
      <returns>
        <paramref name="scalar" />와 <paramref name="vector" />를 곱한 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)">
      <summary>지정된 벡터에 지정된 스칼라를 곱한 결과 벡터를 반환합니다.</summary>
      <param name="vector">곱할 벡터입니다.</param>
      <param name="scalar">곱할 스칼라입니다.</param>
      <returns>
        <paramref name="vector" />와 <paramref name="scalar" />를 곱한 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary>지정된 <see cref="T:System.Windows.Media.Matrix" /> 구조체를 사용하여 지정된 벡터의 좌표 공간을 변환합니다.</summary>
      <param name="vector">변환할 벡터입니다.</param>
      <param name="matrix">
        <paramref name="vector" />에 적용할 변환입니다.</param>
      <returns>
        <paramref name="vector" />를 <paramref name="matrix" />에 따라 변환한 결과입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary>지정된 두 벡터 구조체의 내적을 계산한 결과를 <see cref="T:System.Double" />로 반환합니다.</summary>
      <param name="vector1">곱할 첫 번째 벡터입니다.</param>
      <param name="vector2">곱할 두 번째 벡터입니다.</param>
      <returns>다음 수식에 따라 계산된 <paramref name="vector1" />과 <paramref name="vector2" />의 스칼라 내적이 들어 있는 <see cref="T:System.Double" />을 반환합니다. 
 <c>vector1.y. X * vector2.x. X + vector1.y. Y * vector2.x. X.y</c></returns>
    </member>
    <member name="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)">
      <summary>벡터를 서로 뺍니다.</summary>
      <param name="vector1">
        <paramref name="vector2" />를 빼는 벡터입니다.</param>
      <param name="vector2">
        <paramref name="vector1" />에서 뺄 벡터입니다.</param>
      <returns>
        <paramref name="vector1" />와 <paramref name="vector2" />의 차이입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)">
      <summary>지정된 벡터를 부정합니다.</summary>
      <param name="vector">부정할 벡터입니다.</param>
      <returns>
        <see cref="P:System.Windows.Vector.X" /> 및 <see cref="P:System.Windows.Vector.Y" /> 값이 <paramref name="vector" />의 <see cref="P:System.Windows.Vector.X" /> 및 <see cref="P:System.Windows.Vector.Y" /> 값과 반대 방향인 벡터입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.Parse(System.String)">
      <summary>벡터의 문자열 표현을 해당 <see cref="T:System.Windows.Vector" /> 구조체로 변환합니다.</summary>
      <param name="source">벡터에 대한 문자열 표현입니다.</param>
      <returns>해당 <see cref="T:System.Windows.Vector" /> 구조체입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)">
      <summary>지정된 벡터에서 지정된 다른 벡터를 뺍니다.</summary>
      <param name="vector1">
        <paramref name="vector2" />를 빼는 벡터입니다.</param>
      <param name="vector2">
        <paramref name="vector1" />에서 뺄 벡터입니다.</param>
      <returns>
        <paramref name="vector1" />와 <paramref name="vector2" />의 차이입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary>이 멤버는 WPF(Windows Presentation Foundation) 인프라를 지원하며 코드에서 직접 사용할 수 없습니다. 이 멤버에 대한 설명은 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />를 참조하세요.</summary>
      <param name="format">사용할 형식을 지정하는 문자열입니다.  
  
또는 
 <see cref="T:System.IFormattable" /> 구현 형식에 대해 정의된 기본 형식을 사용하기 위한 <see langword="null" />입니다.</param>
      <param name="provider">값의 형식을 지정하는 데 사용할 <see langword="IFormatProvider" />입니다.  
  
또는 
 운영 체제의 현재 로캘 설정에서 숫자 형식 정보를 가져오기 위한 <see langword="null" />입니다.</param>
      <returns>지정된 형식의 현재 인스턴스 값이 포함된 문자열입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString">
      <summary>이 <see cref="T:System.Windows.Vector" /> 구조체의 문자열 표현을 반환합니다.</summary>
      <returns>이 <see cref="P:System.Windows.Vector.X" />의 <see cref="P:System.Windows.Vector.Y" /> 및 <see cref="T:System.Windows.Vector" /> 값을 나타내는 문자열입니다.</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString(System.IFormatProvider)">
      <summary>지정된 형식 정보를 사용하여 이 <see cref="T:System.Windows.Vector" /> 구조체의 문자열 표현을 반환합니다.</summary>
      <param name="provider">문화권별 형식 지정 정보입니다.</param>
      <returns>이 <see cref="P:System.Windows.Vector.X" />의 <see cref="P:System.Windows.Vector.Y" /> 및 <see cref="T:System.Windows.Vector" /> 값을 나타내는 문자열입니다.</returns>
    </member>
    <member name="P:System.Windows.Vector.Length">
      <summary>이 벡터의 길이를 가져옵니다.</summary>
      <returns>이 벡터의 길이입니다.</returns>
    </member>
    <member name="P:System.Windows.Vector.LengthSquared">
      <summary>이 벡터 길이의 제곱을 가져옵니다.</summary>
      <returns>이 벡터 <see cref="P:System.Windows.Vector.Length" />의 제곱입니다.</returns>
    </member>
    <member name="P:System.Windows.Vector.X">
      <summary>이 벡터의 <see cref="P:System.Windows.Vector.X" /> 구성 요소를 가져오거나 설정합니다.</summary>
      <returns>이 벡터의 <see cref="P:System.Windows.Vector.X" /> 구성 요소입니다. 기본값은 0입니다.</returns>
    </member>
    <member name="P:System.Windows.Vector.Y">
      <summary>이 벡터의 <see cref="P:System.Windows.Vector.Y" /> 구성 요소를 가져오거나 설정합니다.</summary>
      <returns>이 벡터의 <see cref="P:System.Windows.Vector.Y" /> 구성 요소입니다. 기본값은 0입니다.</returns>
    </member>
    <member name="T:System.Windows.VectorConverter">
      <summary>다른 형식의 인스턴스를 <see cref="T:System.Windows.Vector" />으로 변환하거나 반대로 변환합니다.</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.#ctor">
      <summary>
        <see cref="T:System.Windows.Vector" /> 구조체의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>지정한 형식에서 <see cref="T:System.Windows.Vector" />의 인스턴스로 개체를 변환할 수 있는지 여부를 나타냅니다.</summary>
      <param name="context">형식의 컨텍스트 정보를 설명합니다.</param>
      <param name="sourceType">변환이 지원되는지 여부를 쿼리하는 소스 <see cref="T:System.Type" />입니다.</param>
      <returns>지정된 형식의 개체를 <see cref="T:System.Windows.Vector" />로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
        <see cref="T:System.Windows.Vector" />의 인스턴스를 지정한 형식으로 변환할 수 있는지 여부를 결정합니다.</summary>
      <param name="context">형식의 컨텍스트 정보를 설명합니다.</param>
      <param name="destinationType">변환을 위해 이 <see cref="T:System.Windows.Vector" />를 확인 중인 원하는 형식입니다.</param>
      <returns>
        <see cref="T:System.Windows.Vector" />의 인스턴스를 <paramref name="destinationType" />으로 변환할 수 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>지정한 개체를 <see cref="T:System.Windows.Vector" />으로 변환합니다.</summary>
      <param name="context">형식의 컨텍스트 정보를 설명합니다.</param>
      <param name="culture">변환 중인 형식의 <see cref="T:System.Globalization.CultureInfo" />를 설명합니다.</param>
      <param name="value">변환되는 개체입니다.</param>
      <returns>
        <paramref name="value" />를 변환하여 만드는 <see cref="T:System.Windows.Vector" />입니다.</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>지정한 <see cref="T:System.Windows.Vector" />을 지정한 형식으로 변환합니다.</summary>
      <param name="context">형식의 컨텍스트 정보를 설명합니다.</param>
      <param name="culture">변환 중인 형식의 <see cref="T:System.Globalization.CultureInfo" />를 설명합니다.</param>
      <param name="value">변환할 <see cref="T:System.Windows.Vector" />입니다.</param>
      <param name="destinationType">이 <see cref="T:System.Windows.Vector" />을 변환할 대상 형식입니다.</param>
      <returns>이 <see cref="T:System.Windows.Vector" />을 변환하여 만드는 개체입니다.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager">
      <summary>약한 이벤트 패턴에서 사용되는 이벤트 관리자에 대해 기본 클래스를 제공합니다. 이 관리자는 마찬가지로 패턴을 사용하는 이벤트(콜백)에 대해 수신기를 추가하거나 제거합니다.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.#ctor">
      <summary>파생 클래스의 생성자에서 이니셜라이저로 사용될 때 기본 클래스 값을 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
      <summary>각 수신기에 대해 관리되는 이벤트를 전달합니다.</summary>
      <param name="sender">이벤트가 처리되는 개체입니다.</param>
      <param name="args">전달할 이벤트에 대한 이벤트 데이터를 포함하는 <see cref="T:System.EventArgs" />입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
      <summary>제공된 목록에서 각 수신기에 대해 관리되는 이벤트를 전달합니다.</summary>
      <param name="sender">이벤트가 처리되는 개체입니다.</param>
      <param name="args">이벤트 데이터가 포함된 <see cref="T:System.EventArgs" />입니다.</param>
      <param name="list">제공된 <see cref="T:System.Windows.WeakEventManager.ListenerList" />입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
      <summary>제공된 형식에 사용되는 <see cref="T:System.Windows.WeakEventManager" /> 구현을 반환합니다.</summary>
      <param name="managerType">
        <see cref="T:System.Windows.WeakEventManager" />를 가져올 형식입니다.</param>
      <returns>일치하는 <see cref="T:System.Windows.WeakEventManager" /> 구현입니다.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.NewListenerList">
      <summary>이벤트에 대한 수신기를 포함하는 새 개체를 반환합니다.</summary>
      <returns>이벤트에 대한 수신기를 포함하는 새 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
      <summary>지정된 대리자를 지정된 소스의 이벤트 처리기로 추가합니다.</summary>
      <param name="source">처리기 대리자가 구독하는 소스 개체입니다.</param>
      <param name="handler">
        <paramref name="source" />에서 발생한 이벤트를 처리하는 대리자입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>제공된 수신기를 관리 중인 이벤트에 대해 제공된 소스에 추가합니다.</summary>
      <param name="source">수신기를 연결할 소스입니다.</param>
      <param name="listener">
        <see cref="T:System.Windows.IWeakEventListener" />를 구현해야 하는 수신 클래스입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
      <summary>지정한 소스에서 이전에 추가한 처리기를 제거합니다.</summary>
      <param name="source">처리기를 제거할 소스입니다.</param>
      <param name="handler">
        <paramref name="source" />에서 제거할 대리자입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
      <summary>제공된 소스에서 이전에 추가한 수신기를 제거합니다.</summary>
      <param name="source">수신기를 제거할 소스입니다.</param>
      <param name="listener">
        <see cref="T:System.Windows.IWeakEventListener" />를 구현해야 하는 수신 클래스입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary>비활성 수신기 항목을 제공된 소스의 데이터 목록에서 제거합니다. 일부 항목이 실제로 목록에서 제거된 경우 <see langword="true" />를 반환합니다.</summary>
      <param name="source">수신 중인 이벤트의 소스입니다.</param>
      <param name="data">확인할 데이터입니다. 이 개체는 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 구현이어야 합니다.</param>
      <param name="purgeAll">
        <paramref name="source" /> 수신 대기를 중지하고 <paramref name="data" />에서 모든 항목을 완전히 제거하려면 <see langword="true" />입니다.</param>
      <returns>일부 항목이 실제로 제거되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.Remove(System.Object)">
      <summary>지정된 소스에 대해 모든 수신기를 제거합니다.</summary>
      <param name="source">수신기 정보를 제거할 소스입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ScheduleCleanup">
      <summary>기본 수신기 목록에서 사용하지 않는 항목을 비우는 작업을 우선 순위가 낮은 스레드에서 수행하도록 요청합니다.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
      <summary>지정된 관리자 형식에 대해 현재 관리자를 설정합니다.</summary>
      <param name="managerType">새 이벤트 관리자를 설정할 형식입니다.</param>
      <param name="manager">새 이벤트 관리자입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StartListening(System.Object)">
      <summary>파생 클래스에서 재정의되는 경우 관리 중인 이벤트 수신을 시작합니다. <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 메서드를 처음으로 호출하고 나면 제공된 소스의 관련 이벤트를 처리할 때마다 관리자는 <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> 또는 <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" />를 호출하는 상태여야 합니다.</summary>
      <param name="source">수신을 시작할 소스입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StopListening(System.Object)">
      <summary>파생 클래스에서 재정의되는 경우 관리 중인 이벤트에 대해 제공된 소스에서 수신을 중지합니다.</summary>
      <param name="source">수신을 중지할 소스입니다.</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.Item(System.Object)">
      <summary>지정된 소스에 대해 저장될 데이터를 가져오거나 설정합니다.</summary>
      <param name="source">요청된 소스의 인덱스(0부터 시작)입니다.</param>
      <returns>이 소스에 대해 관리자가 저장하는 데이터입니다.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ReadLock">
      <summary>기본 데이터 테이블에 대해 읽기 잠금을 설정하고 <see cref="T:System.IDisposable" />을 반환합니다.</summary>
      <returns>데이터 테이블 멤버에 대해 잠금을 설정한 다음 <see langword="using" /> 구문을 사용하여 적절하게 삭제할 수 있는 개체입니다.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.WriteLock">
      <summary>기본 데이터 테이블에 대해 쓰기 잠금을 설정하고 <see cref="T:System.IDisposable" />을 반환합니다.</summary>
      <returns>데이터 테이블 멤버에 대해 잠금을 설정한 다음 <see langword="using" /> 구문을 사용하여 적절하게 삭제할 수 있는 개체입니다.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList">
      <summary>
        <see cref="T:System.Windows.WeakEventManager" />에 대한 수신기를 저장하기 위한 기본 제공 컬렉션 목록을 제공합니다.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
      <summary>지정된 초기 용량을 사용하여 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">초기 목록에 할당되는 항목의 수입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
      <summary>
        <see cref="T:System.Windows.IWeakEventListener" /> 개체를 <see cref="T:System.Windows.WeakEventManager.ListenerList" />에 추가합니다.</summary>
      <param name="listener">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" />에 추가할 수신기 항목입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" />에 이벤트 처리기를 추가합니다.</summary>
      <param name="handler">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" />에 추가할 이벤트 처리기입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
      <summary>목록이 사용 중인 것으로 선언합니다. 이렇게 하면 목록 항목을 반복하는 동안 목록이 직접 변경되지 않습니다.</summary>
      <returns>목록이 이미 사용 중인 것으로 선언되었으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Clone">
      <summary>이 <see cref="T:System.Windows.WeakEventManager.ListenerList" />의 수정 가능한 복제본을 만듭니다.</summary>
      <returns>현재 개체의 수정 가능한 복제본입니다.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
      <summary>현재 <see cref="T:System.Windows.WeakEventManager.ListenerList" />을 지정된 <see cref="T:System.Windows.WeakEventManager.ListenerList" />에 복사합니다.</summary>
      <param name="newList">복사할 개체입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" />에서 각 수신기에 대해 관리되는 이벤트를 전달합니다.</summary>
      <param name="sender">이벤트를 발생시킨 개체입니다.</param>
      <param name="args">이벤트 데이터를 포함하는 개체입니다.</param>
      <param name="managerType">이 메서드를 호출하는 <see cref="T:System.Windows.WeakEventManager" />의 형식입니다.</param>
      <returns>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" />의 임의의 수신기가 가비지 수집된 개체를 가리키면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.EndUse">
      <summary>
        <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" />에 의해 초기화되는 잠긴 상태를 해제합니다.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
      <summary>지정된 목록이 사용 중인지 확인하고, 사용 중일 경우 목록 참조 매개 변수를 원본이 아닌 목록의 복사본으로 설정합니다.</summary>
      <param name="list">사용 상태를 확인하고 복사할 목록입니다.</param>
      <returns>지정된 목록이 호출 시 사용 중이므로 <paramref name="list" /> 매개 변수 참조가 복사본으로 다시 설정되었으면 <see langword="true" />이고, 지정된 목록이 사용 중이 아니므로 <paramref name="list" /> 매개 변수 참조가 변경되지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Purge">
      <summary>내부 참조 대상이 null 참조인 목록에서 모든 항목을 제거합니다.</summary>
      <returns>모든 항목이 제거되면 <see langword="true" />를 반환하고, 그렇지 않으면 <see langword="false" />를 반환합니다.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" />에서 맨 처음 발견되는 수신기 항목을 제거합니다.</summary>
      <param name="listener">제거할 항목입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" />에서 이벤트 처리기를 제거합니다.</summary>
      <param name="handler">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" />에서 제거할 이벤트 처리기입니다.</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Count">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" />에 들어 있는 항목 수를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" />에 들어 있는 항목 수입니다.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Empty">
      <summary>비교 작업에 사용할 빈 목록을 나타내는 값을 가져옵니다.</summary>
      <returns>빈 목록 표현입니다.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
      <summary>이 <see cref="T:System.Windows.WeakEventManager.ListenerList" />가 비어 있는지 여부를 선언하는 값을 가져옵니다.</summary>
      <returns>목록이 비어 있으면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList" />의 특정 수신기 항목을 가져오거나 설정합니다.</summary>
      <param name="index">목록에 있는 수신기의 인덱스(0부터 시작)입니다.</param>
      <returns>해당 인덱스의 항목이거나, 해당 인덱스에 항목이 없으면 null 참조입니다.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList`1">
      <summary>
        <see cref="T:System.Windows.WeakEventManager" />에 대한 수신기를 저장하기 위한 형식 안전 컬렉션 목록을 제공합니다. 이 클래스는 사용되는 이벤트 데이터의 형식 매개 변수를 정의 합니다.</summary>
      <typeparam name="TEventArgs">이벤트 데이터가 있는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor(System.Int32)">
      <summary>지정된 초기 용량을 사용하여 <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="capacity">초기 목록에 할당되는 항목의 수입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.Clone">
      <summary>값의 전체 복사본을 만들어 이 <see cref="T:System.Windows.WeakEventManager.ListenerList" />의 수정 가능한 복제본을 만듭니다.</summary>
      <returns>현재 개체의 수정 가능한 복제본입니다. 소스의 <see cref="P:System.Windows.Freezable.IsFrozen" /> 속성이 <see langword="true" />인 경우에도 복제된 개체의 <see cref="P:System.Windows.Freezable.IsFrozen" /> 속성은 <see langword="false" />입니다.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary>
        <see cref="T:System.Windows.WeakEventManager.ListenerList`1" />에서 각 수신기에 대해 관리되는 이벤트를 전달합니다.</summary>
      <param name="sender">이벤트를 발생시킨 개체입니다.</param>
      <param name="e">이벤트 데이터를 포함하는 개체입니다.</param>
      <param name="managerType">이 메서드를 호출하는 <see cref="T:System.Windows.WeakEventManager" />의 형식입니다.</param>
      <returns>
        <see cref="T:System.Windows.WeakEventManager.ListenerList`1" />의 임의의 수신기가 가비지 수집된 개체를 가리키면 <see langword="true" />이고, 그렇지 않으면 <see langword="false" />입니다.</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager`2">
      <summary>이벤트 처리기를 지정하여 "약한 이벤트 수신기" 패턴을 사용할 수 있게 하도록 형식이 안전한 <see cref="T:System.Windows.WeakEventManager" />를 제공합니다. 이 클래스는 사용되는 이벤트 데이터에 대한 형식 매개 변수와 이벤트 소스의 형식 매개 변수를 정의합니다.</summary>
      <typeparam name="TEventSource">이벤트를 발생시키는 형식입니다.</typeparam>
      <typeparam name="TEventArgs">이벤트 데이터가 있는 형식입니다.</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})">
      <summary>지정된 이벤트 처리기를 지정된 이벤트에 추가합니다.</summary>
      <param name="source">지정된 이벤트를 발생시키는 소스 개체입니다.</param>
      <param name="eventName">구도할 이벤트의 이름입니다.</param>
      <param name="handler">이벤트를 처리하는 대리자입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.NewListenerList">
      <summary>이벤트에 대한 수신기를 포함하는 새 개체를 반환합니다.</summary>
      <returns>이벤트에 대한 수신기를 포함하는 새 개체입니다.</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})">
      <summary>지정한 이벤트에서 지정한 이벤트 처리기를 제거합니다.</summary>
      <param name="source">지정된 이벤트를 발생시키는 소스 개체입니다.</param>
      <param name="eventName">처리기에서 제거할 이벤트의 이름입니다.</param>
      <param name="handler">제거할 대리자</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StartListening(System.Object)">
      <summary>지정된 개체의 이벤트 수신 대기를 시작합니다.</summary>
      <param name="source">이벤트를 발생시키는 개체입니다.</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StopListening(System.Object)">
      <summary>지정된 개체의 이벤트 수신 대기를 중지합니다.</summary>
      <param name="source">이벤트를 발생시키는 개체입니다.</param>
    </member>
  </members>
</doc>
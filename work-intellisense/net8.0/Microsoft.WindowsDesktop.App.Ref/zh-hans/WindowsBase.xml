<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>WindowsBase</name>
  </assembly>
  <members>
    <member name="T:System.Collections.Specialized.CollectionChangedEventManager">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; implementation so that you can use the &quot;weak event listener&quot; pattern to attach listeners for the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">提供 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便可以使用“弱事件侦听器”模式附加 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件的侦听器。</summary>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary vsli:raw="Adds the specified event handler, which is called when specified source raises the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">添加指定的事件处理程序，当指定的源引发 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件时进行调用。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">引发 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件的源对象。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">委托处理 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.AddListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Adds the specified listener to the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event of the specified source.">将指定侦听器添加到指定源的 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件中。</summary>
      <param name="source" vsli:raw="The object with the event.">带事件的对象。</param>
      <param name="listener" vsli:raw="The object to add as a listener.">要作为侦听器添加的对象。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.NewListenerList">
      <summary vsli:raw="Returns a new object to contain listeners to the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">返回包含 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件侦听器的新对象。</summary>
      <returns vsli:raw="A new object to contain listeners to the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">包含 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件侦听器的新对象。</returns>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveHandler(System.Collections.Specialized.INotifyCollectionChanged,System.EventHandler{System.Collections.Specialized.NotifyCollectionChangedEventArgs})">
      <summary vsli:raw="Removes the specified event handler from the specified source.">从指定源中移除指定的事件处理程序。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">引发 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件的源对象。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event.">委托处理 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.RemoveListener(System.Collections.Specialized.INotifyCollectionChanged,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Removes the specified listener from the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event of the specified source.">将指定的侦听器从指定源的 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件中移除。</summary>
      <param name="source" vsli:raw="The object with the event.">带事件的对象。</param>
      <param name="listener" vsli:raw="The listener to remove.">要移除的侦听器。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StartListening(System.Object)">
      <summary vsli:raw="Begins listening for the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event on the specified source.">开始对指定源侦听 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。</summary>
      <param name="source" vsli:raw="The object with the event.">带事件的对象。</param>
    </member>
    <member name="M:System.Collections.Specialized.CollectionChangedEventManager.StopListening(System.Object)">
      <summary vsli:raw="Stops listening for the &lt;see cref=&quot;E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged&quot; /&gt; event on the specified source.">停止对指定源侦听 <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> 事件。</summary>
      <param name="source" vsli:raw="The object with the event.">带事件的对象。</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangedEventManager">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; implementation so that you can use the &quot;weak event listener&quot; pattern to attach listeners for the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">提供 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便可以使用“弱事件侦听器”模式附加 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件的侦听器。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary vsli:raw="Adds the specified event handler, which is called when specified source raises the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">添加指定的事件处理程序，当指定的源引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件时进行调用。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件的源对象。</param>
      <param name="handler" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件的源对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Adds the specified listener to the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event of the specified source.">将指定侦听器添加到指定源的 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件中。</summary>
      <param name="source" vsli:raw="The object with the event.">带事件的对象。</param>
      <param name="listener" vsli:raw="The object to add as a listener.">要作为侦听器添加的对象。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.NewListenerList">
      <summary vsli:raw="Returns a new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">返回包含 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件侦听器的新对象。</summary>
      <returns vsli:raw="A new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">包含 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件侦听器的新对象。</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.EventArgs})">
      <summary vsli:raw="Removes the specified event handler from the specified source.">从指定源中移除指定的事件处理程序。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件的源对象。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event.">委托处理 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Removes the specified listener from the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event of the specified source.">将指定的侦听器从指定源的 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件中移除。</summary>
      <param name="source" vsli:raw="The object with the event.">带事件的对象。</param>
      <param name="listener" vsli:raw="The listener to remove.">要移除的侦听器。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StartListening(System.Object)">
      <summary vsli:raw="Begins listening for the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event on the specified source.">开始对指定源侦听 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件。</summary>
      <param name="source" vsli:raw="The object with the event.">带事件的对象。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangedEventManager.StopListening(System.Object)">
      <summary vsli:raw="Stops listening for the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanged&quot; /&gt; event on the specified source.">停止对指定源侦听 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanged" /> 事件。</summary>
      <param name="source" vsli:raw="The object with the event.">带事件的对象。</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventArgs">
      <summary vsli:raw="Provides information for the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">提供有关 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件的信息。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CurrentChangingEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventArgs.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.CurrentChangingEventArgs&quot; /&gt; class with the specified &lt;paramref name=&quot;isCancelable&quot; /&gt; value.">使用指定的 <paramref name="isCancelable" /> 值初始化 <see cref="T:System.ComponentModel.CurrentChangingEventArgs" /> 类的新实例。</summary>
      <param name="isCancelable" vsli:raw="A value that indicates whether the event is cancelable.">指示是否可取消事件的值。</param>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.Cancel">
      <summary vsli:raw="Gets or sets a value that indicates whether to cancel the event.">获取或设置一个值，它指示是否取消事件。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="If the value of &lt;see cref=&quot;P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable" /> 的值为 <see langword="false" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event is to be canceled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;false&quot; /&gt;.">如果要取消事件，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.CurrentChangingEventArgs.IsCancelable">
      <summary vsli:raw="Gets a value that indicates whether the event is cancelable.">获取一个值，该值指示事件是否可取消。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the event is cancelable, otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">如果事件可取消，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值是 <see langword="true" />。</returns>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Windows.Data.CollectionView.CurrentChanging&quot; /&gt; event.">表示 <see cref="E:System.Windows.Data.CollectionView.CurrentChanging" /> 事件的处理方法。</summary>
      <param name="sender" vsli:raw="The object that raised the event.">引发事件的对象。</param>
      <param name="e" vsli:raw="Information about the event.">有关事件的信息。</param>
    </member>
    <member name="T:System.ComponentModel.CurrentChangingEventManager">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; implementation so that you can use the &quot;weak event listener&quot; pattern to attach listeners for the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">提供 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便可以使用“弱事件侦听器”模式附加 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件的侦听器。</summary>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary vsli:raw="Adds the specified event handler, which is called when specified source raises the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">添加指定的事件处理程序，当指定的源引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件时进行调用。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件的源对象。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">委托处理 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.AddListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Adds the specified listener to the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event of the specified source.">将指定侦听器添加到指定源的 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件中。</summary>
      <param name="source" vsli:raw="The object with the event.">带事件的对象。</param>
      <param name="listener" vsli:raw="The object to add as a listener.">要作为侦听器添加的对象。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.NewListenerList">
      <summary vsli:raw="Returns a new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">返回包含 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件侦听器的新对象。</summary>
      <returns vsli:raw="A new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">包含 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件侦听器的新对象。</returns>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveHandler(System.ComponentModel.ICollectionView,System.EventHandler{System.ComponentModel.CurrentChangingEventArgs})">
      <summary vsli:raw="Removes the specified event handler from the specified source.">从指定源中移除指定的事件处理程序。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件的源对象。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event.">委托处理 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.RemoveListener(System.ComponentModel.ICollectionView,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Removes the specified listener from the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event of the specified source.">将指定的侦听器从指定源的 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件中移除。</summary>
      <param name="source" vsli:raw="The object with the event.">带事件的对象。</param>
      <param name="listener" vsli:raw="The listener to remove.">要移除的侦听器。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StartListening(System.Object)">
      <summary vsli:raw="Begins listening for the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event on the specified source.">开始对指定源侦听 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。</summary>
      <param name="source" vsli:raw="The object with the event.">带事件的对象。</param>
    </member>
    <member name="M:System.ComponentModel.CurrentChangingEventManager.StopListening(System.Object)">
      <summary vsli:raw="Stops listening for the &lt;see cref=&quot;E:System.ComponentModel.ICollectionView.CurrentChanging&quot; /&gt; event on the specified source.">停止对指定源侦听 <see cref="E:System.ComponentModel.ICollectionView.CurrentChanging" /> 事件。</summary>
      <param name="source" vsli:raw="The object with the event.">带事件的对象。</param>
    </member>
    <member name="T:System.ComponentModel.DependencyPropertyDescriptor">
      <summary vsli:raw="Provides an extension of &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; that accounts for the additional property characteristics of a dependency property.">提供说明依赖属性的其他属性特征的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的扩展。</summary>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">使其他对象在此属性更改时能得到通知。</summary>
      <param name="component" vsli:raw="The component to add the handler for.">为其添加处理程序的组件。</param>
      <param name="handler" vsli:raw="The delegate to add as a listener.">要作为侦听器添加的委托。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.CanResetValue(System.Object)">
      <summary vsli:raw="Returns whether resetting an object changes its value.">返回重置对象是否会更改该对象的值。</summary>
      <param name="component" vsli:raw="The component to test for reset capability.">要测试重置功能的组件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if resetting the component changes its value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果重置组件更改其值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.Equals(System.Object)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt; instances for equality.">比较两个 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> 实例是否相等。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt; to compare with the current instance.">与当前实例进行比较的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果值相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt; for a provided property name.">为所提供的属性名称返回 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</summary>
      <param name="name" vsli:raw="The registered name of a dependency property or an attached property.">依赖属性或附加属性的已注册的名称。</param>
      <param name="ownerType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the object that owns the property definition.">该对象的 <see cref="T:System.Type" />，它拥有属性定义。</param>
      <param name="targetType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the object you want to set the property for.">要为其设置属性的对象的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="The requested &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt;.">请求的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromName(System.String,System.Type,System.Type,System.Boolean)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt; for a provided property name.">为所提供的属性名称返回 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</summary>
      <param name="name" vsli:raw="The registered name of a dependency property or an attached property.">依赖属性或附加属性的已注册的名称。</param>
      <param name="ownerType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the object that owns the property definition.">该对象的 <see cref="T:System.Type" />，它拥有属性定义。</param>
      <param name="targetType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the object you want to set the property for.">要为其设置属性的对象的 <see cref="T:System.Type" />。</param>
      <param name="ignorePropertyType" vsli:raw="Specifies to ignore the property type.">指定以忽略属性类型。</param>
      <returns vsli:raw="The requested &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt;.">请求的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.ComponentModel.PropertyDescriptor)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt; for a provided &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt;.">返回所提供的 <see cref="T:System.ComponentModel.PropertyDescriptor" /> 的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</summary>
      <param name="property" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; to check.">要检查的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</param>
      <returns vsli:raw="If the property described by &lt;paramref name=&quot;property&quot; /&gt; is a dependency property, returns a valid &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt;. Otherwise, returns a &lt;see langword=&quot;null&quot; /&gt;&lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt;.">如果 <paramref name="property" /> 描述的属性为依赖属性，则返回有效 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。 否则返回 <see langword="null" /><see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.FromProperty(System.Windows.DependencyProperty,System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt; for a provided dependency property and target type.">针对提供的依赖属性和目标类型返回 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</summary>
      <param name="dependencyProperty" vsli:raw="The identifier for a dependency property.">依赖项属性的标识符。</param>
      <param name="targetType" vsli:raw="The type of the object where the property is set.">在其中设置属性的对象的类型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt; for the provided dependency property.">提供的依赖属性的 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt;.">返回 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</summary>
      <param name="instance" vsli:raw="A component to get the properties for.">要为其获取属性的组件。</param>
      <param name="filter" vsli:raw="An array of type &lt;see cref=&quot;T:System.Attribute&quot; /&gt; to use as a filter.">要用作筛选器的类型 <see cref="T:System.Attribute" /> 数组。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptorCollection&quot; /&gt; with the properties that match the specified attributes for the specified component.">具有与指定组件的指定属性相匹配的属性的 <see cref="T:System.ComponentModel.PropertyDescriptorCollection" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetEditor(System.Type)">
      <summary vsli:raw="Gets an editor of the specified type.">获取指定类型的编辑器。</summary>
      <param name="editorBaseType" vsli:raw="The base type of editor, which is used to differentiate between multiple editors that a property supports.">编辑器的基类型，用于区分属性所支持的多个编辑器。</param>
      <returns vsli:raw="An instance of the requested editor type, or &lt;see langword=&quot;null&quot; /&gt; if an editor cannot be found.">请求的编辑器类型的实例，或者，如果未能找到编辑器，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.ComponentModel.DependencyPropertyDescriptor&quot; /&gt;.">返回此 <see cref="T:System.ComponentModel.DependencyPropertyDescriptor" /> 的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)">
      <summary vsli:raw="Returns the current value of the property on a component.">返回组件属性的当前值。</summary>
      <param name="component" vsli:raw="The component instance.">组件实例。</param>
      <returns vsli:raw="The requested value.">请求的值。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)">
      <summary vsli:raw="Enables other objects to be notified when this property changes.">使其他对象在此属性更改时能得到通知。</summary>
      <param name="component" vsli:raw="The component to add the handler for.">为其添加处理程序的组件。</param>
      <param name="handler" vsli:raw="The delegate to add as a listener.">要作为侦听器添加的委托。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ResetValue(System.Object)">
      <summary vsli:raw="Resets the value for this property of the component to the default value.">将组件的此属性的值重置为默认值。</summary>
      <param name="component" vsli:raw="The component with the property value that is to be reset to the default value.">具有要重置为默认值的属性值的组件。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)">
      <summary vsli:raw="Sets the value of the component to a different value.">将组件的值设置为一个不同的值。</summary>
      <param name="component" vsli:raw="The component with the property value that is to be set.">具有要进行设置的属性值的组件。</param>
      <param name="value" vsli:raw="The new value.">新值。</param>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ShouldSerializeValue(System.Object)">
      <summary vsli:raw="Indicates whether the value of this property needs to be persisted by serialization processes.">指示是否需要通过序列化过程永久保存该属性的值。</summary>
      <param name="component" vsli:raw="The component with the property to be examined for persistence.">具有要检查其持久性的属性的组件。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property should be persisted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果属性应该被永久保存，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.DependencyPropertyDescriptor.ToString">
      <summary vsli:raw="Converts the value of this instance to its equivalent string representation.">将此实例的值转换为其等效的字符串表示形式。</summary>
      <returns vsli:raw="Returns the &lt;see cref=&quot;P:System.ComponentModel.MemberDescriptor.Name&quot; /&gt; value.">返回 <see cref="P:System.ComponentModel.MemberDescriptor.Name" /> 值。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Attributes">
      <summary vsli:raw="Gets the collection of attributes for this member.">获取该成员的特性集合。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.AttributeCollection&quot; /&gt; collection of attributes.">特性的 <see cref="T:System.ComponentModel.AttributeCollection" /> 集合。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Category">
      <summary vsli:raw="Gets the name of the category that the member belongs to, as specified in the &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;.">获取成员所属的类别的名称，如 <see cref="T:System.ComponentModel.CategoryAttribute" /> 中所指定的。</summary>
      <returns vsli:raw="The name of the category to which the member belongs. If there is no &lt;see cref=&quot;T:System.ComponentModel.CategoryAttribute&quot; /&gt;, the category name is set to the default category, &lt;see langword=&quot;Misc&quot; /&gt;.">该成员所属的类别的名称。 如果没有 <see cref="T:System.ComponentModel.CategoryAttribute" />，类别名将被设置为默认类别 <see langword="Misc" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.ComponentType">
      <summary vsli:raw="Gets the type of the component this property is bound to.">获取该属性绑定到的组件的类型。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type of component this property is bound to. When &lt;see cref=&quot;M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)&quot; /&gt; or &lt;see cref=&quot;M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt; are invoked, the object specified might be an instance of this type.">一个 <see cref="T:System.Type" />，表示该属性绑定到的组件的类型。 在调用 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.GetValue(System.Object)" /> 或 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> 时，指定对象可能是此类型的实例。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Converter">
      <summary vsli:raw="Gets the type converter for this property.">获取该属性的类型转换器。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.TypeConverter&quot; /&gt; that is used to convert the &lt;see cref=&quot;T:System.Type&quot; /&gt; of this property.">一个 <see cref="T:System.ComponentModel.TypeConverter" />，用于转换该属性的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DependencyProperty">
      <summary vsli:raw="Returns the dependency property identifier.">返回依赖属性标识符。</summary>
      <returns vsli:raw="The dependency property identifier.">依赖属性标识符。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Description">
      <summary vsli:raw="Gets the description of the member, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;.">获取成员的说明，如 <see cref="T:System.ComponentModel.DescriptionAttribute" /> 中所指定的。</summary>
      <returns vsli:raw="The description of the member. If there is no &lt;see cref=&quot;T:System.ComponentModel.DescriptionAttribute&quot; /&gt;, the property value is set to the default, which is an empty string (&quot;&quot;).">成员的说明。 如果没有 <see cref="T:System.ComponentModel.DescriptionAttribute" />，属性值被设置为默认值，它是一个空字符串 ("")。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignerCoerceValueCallback">
      <summary vsli:raw="Gets or sets a callback that designers use to modify the effective value of a dependency property before the dependency property value is stored in the dependency property engine.">获取或设置一个回调，设计器将使用此回调修改依赖项属性的有效值，然后将此依赖项属性值存储在依赖项属性引擎中。</summary>
      <returns vsli:raw="A callback that designers use to modify the effective value of a dependency property before the dependency property value is stored in the dependency property engine.">一个回调，设计器将使用此回调修改依赖项属性的有效值，然后将此依赖项属性值存储在依赖项属性引擎中。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DesignTimeOnly">
      <summary vsli:raw="Gets whether this member should be set only at design time, as specified in the &lt;see cref=&quot;T:System.ComponentModel.DesignOnlyAttribute&quot; /&gt;.">获取是否只能在设计时设置该成员，如 <see cref="T:System.ComponentModel.DesignOnlyAttribute" /> 中所指定的。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this member should be set only at design time; &lt;see langword=&quot;false&quot; /&gt; if the member can be set during run time. If there is no &lt;see cref=&quot;T:System.ComponentModel.DesignOnlyAttribute&quot; /&gt;, the return value is the default, which is &lt;see langword=&quot;false&quot; /&gt;.">如果只能在设计时设置该成员，则为 <see langword="true" />；如果可以在运行时设置该成员，则为 <see langword="false" />。 如果没有 <see cref="T:System.ComponentModel.DesignOnlyAttribute" />，则返回值是默认值 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.DisplayName">
      <summary vsli:raw="Gets the name that can be displayed in a window, such as a Properties window.">获取可以显示在窗口（如“属性”窗口）中的名称。</summary>
      <returns vsli:raw="The name to display for the property.">为属性显示的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsAttached">
      <summary vsli:raw="Gets a value that indicates whether the property is registered as an attached property and is being used through an attached usage.">获取一个值，该值指示属性是否注册为附加属性并通过附加用法进行使用。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is an attached property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果属性是附加属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsBrowsable">
      <summary vsli:raw="Gets a value that indicates the value of the &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt; on the property.">获取一个值，以指示属性上的 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.ComponentModel.BrowsableAttribute&quot; /&gt; was specified on the property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.ComponentModel.BrowsableAttribute" /> 是在属性上指定的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsLocalizable">
      <summary vsli:raw="Gets a value indicating whether this property should be localized, as specified in the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt;.">获取指示是否应该本地化该属性的值，如 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 中所指定的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the member is marked with the &lt;see cref=&quot;T:System.ComponentModel.LocalizableAttribute&quot; /&gt; constructor of the value true; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果使用值 true 的 <see cref="T:System.ComponentModel.LocalizableAttribute" /> 构造函数标记成员，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether this property is read-only.">获取指示该属性是否为只读的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该属性只读，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.Metadata">
      <summary vsli:raw="Gets the metadata associated with the dependency property.">获取与依赖属性关联的元数据。</summary>
      <returns vsli:raw="The dependency property metadata.">依赖属性元数据。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.PropertyType">
      <summary vsli:raw="Gets the represented &lt;see cref=&quot;T:System.Type&quot; /&gt; of the dependency property.">获取依赖属性的表示的 <see cref="T:System.Type" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the dependency property.">依赖属性的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.ComponentModel.DependencyPropertyDescriptor.SupportsChangeEvents">
      <summary vsli:raw="Indicates whether value change notifications for this property may originate from outside the property descriptor, such as from the component itself, or whether notifications will only originate from direct calls made to &lt;see cref=&quot;M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt;.">指示此属性的值更改通知是否源自属性说明符的外部（例如源自组件本身），或指示通知是否只源自对 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> 的直接调用。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if notifications for this property may originate from outside the property descriptor, such as from the component itself. &lt;see langword=&quot;false&quot; /&gt; if notifications will only originate from direct calls made to &lt;see cref=&quot;M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)&quot; /&gt;.">如果此属性的通知可以源自属性说明符的外部（例如源自组件本身），则为 <see langword="true" />。 如果通知只源自对 <see cref="M:System.ComponentModel.DependencyPropertyDescriptor.SetValue(System.Object,System.Object)" /> 的直接调用，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.ErrorsChangedEventManager">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; implementation so that you can use the weak event listener pattern to attach listeners for the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">提供 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便可以使用弱事件侦听器模式附加 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件的侦听器。</summary>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.AddHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary vsli:raw="Adds the specified event handler, which is called when specified source raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">添加指定的事件处理程序，当指定的源引发 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件时进行调用。</summary>
      <param name="source" vsli:raw="The source object that raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件的源对象。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">委托处理 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.NewListenerList">
      <summary vsli:raw="Returns a new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">返回包含 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件侦听器的新对象。</summary>
      <returns vsli:raw="A new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">包含 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件侦听器的新对象。</returns>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.RemoveHandler(System.ComponentModel.INotifyDataErrorInfo,System.EventHandler{System.ComponentModel.DataErrorsChangedEventArgs})">
      <summary vsli:raw="Removes the specified event handler from the specified source.">从指定源中移除指定的事件处理程序。</summary>
      <param name="source" vsli:raw="The source object that raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件的源对象。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">委托处理 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StartListening(System.Object)">
      <summary vsli:raw="Begins listening for the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event on the specified source.">开始对指定源侦听 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。</summary>
      <param name="source" vsli:raw="The source object that raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件的源对象。</param>
    </member>
    <member name="M:System.ComponentModel.ErrorsChangedEventManager.StopListening(System.Object)">
      <summary vsli:raw="Stops listening for the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event on the specified source.">停止对指定源侦听 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件。</summary>
      <param name="source" vsli:raw="The source object that raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.INotifyDataErrorInfo.ErrorsChanged" /> 事件的源对象。</param>
    </member>
    <member name="T:System.ComponentModel.GroupDescription">
      <summary vsli:raw="Provides an abstract base class for types that describe how to divide the items in a collection into groups.">为描述如何将集合中的项划分到各个组中的类型提供抽象基类。</summary>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">在属性值更改时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.GroupDescription.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">在属性值更改时发生。</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.GroupDescription&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.GroupDescription" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.GroupNameFromItem(System.Object,System.Int32,System.Globalization.CultureInfo)">
      <summary vsli:raw="Returns the group name(s) for the given item.">返回给定项的组名称。</summary>
      <param name="item" vsli:raw="The item to return group names for.">要返回其组名称的项。</param>
      <param name="level" vsli:raw="The level of grouping.">分组级别。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to supply to the converter.">要提供给转换器的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <returns vsli:raw="The group name(s) for the given item.">给定项的组名称。</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.NamesMatch(System.Object,System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the group name and the item name match such that the item belongs to the group.">返回一个值，该值指示组名称和项名称是否匹配，从而指示项是否属于组。</summary>
      <param name="groupName" vsli:raw="The name of the group to check.">要检查的组名称。</param>
      <param name="itemName" vsli:raw="The name of the item to check.">要检查的项名称。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the names match and the item belongs to the group; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果名称匹配并且项属于组，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.ComponentModel.GroupDescription.PropertyChanged&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.GroupDescription.PropertyChanged" /> 事件。</summary>
      <param name="e" vsli:raw="Arguments of the event being raised.">要引发事件的自变量。</param>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeGroupNames">
      <summary vsli:raw="Returns whether serialization processes should serialize the effective value of the &lt;see cref=&quot;P:System.ComponentModel.GroupDescription.GroupNames&quot; /&gt; property on instances of this class.">返回序列化进程是否应序列化此类的实例上 <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> 属性的有效值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.ComponentModel.GroupDescription.GroupNames&quot; /&gt; property value should be serialized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应当序列化 <see cref="P:System.ComponentModel.GroupDescription.GroupNames" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.GroupDescription.ShouldSerializeSortDescriptions">
      <summary vsli:raw="Returns whether serialization processes should serialize the effective value of the &lt;see cref=&quot;P:System.ComponentModel.GroupDescription.SortDescriptions&quot; /&gt; property on instances of this class.">返回序列化进程是否应序列化此类的实例上 <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" /> 属性的有效值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.ComponentModel.GroupDescription.SortDescriptions&quot; /&gt; property value should be serialized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应当序列化 <see cref="P:System.ComponentModel.GroupDescription.SortDescriptions" /> 属性值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.CustomSort">
      <summary vsli:raw="Gets or sets a custom comparer that sorts groups using an object that implements &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">获取或设置使用实现 <see cref="T:System.Collections.IComparer" /> 的对象对组进行排序的自定义比较器。</summary>
      <returns vsli:raw="A custom comparer that sorts groups using an object that implements &lt;see cref=&quot;T:System.Collections.IComparer&quot; /&gt;.">使用实现 <see cref="T:System.Collections.IComparer" /> 的对象对组进行排序的自定义比较器。</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.GroupNames">
      <summary vsli:raw="Gets the collection of names that are used to initialize a group with a set of subgroups with the given names.">获取名称的集合，这些名称用于初始化包含一系列具有给定名称的子组的组。</summary>
      <returns vsli:raw="The collection of names that are used to initialize a group with a set of subgroups with the given names.">名称的集合，这些名称用于初始化包含一系列具有给定名称的子组的组。</returns>
    </member>
    <member name="P:System.ComponentModel.GroupDescription.SortDescriptions">
      <summary vsli:raw="Gets the collection of sort criteria in which to sort the groups.">获取要按照其对组进行排序的排序条件集合。</summary>
      <returns vsli:raw="The collection of sort criteria in which to sort the groups.">要按照其对组进行排序的排序条件集合。</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionView">
      <summary vsli:raw="Enables collections to have the functionalities of current record management, custom sorting, filtering, and grouping.">使集合具有当前记录管理、自定义排序、筛选和分组功能。</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanged">
      <summary vsli:raw="When implementing this interface, raise this event after the current item has been changed.">在实现此接口时，在当前项改变之后引发此事件。</summary>
    </member>
    <member name="E:System.ComponentModel.ICollectionView.CurrentChanging">
      <summary vsli:raw="When implementing this interface, raise this event before changing the current item. Event handler can cancel this event.">在实现此接口时，在改变当前项前引发此事件。 事件处理程序可以取消此事件。</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Contains(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether a given item belongs to this collection view.">返回一个值，该值指示给定项是否属于此集合视图。</summary>
      <param name="item" vsli:raw="The object to check.">要检查的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the item belongs to this collection view; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该项属于此集合视图，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.DeferRefresh">
      <summary vsli:raw="Enters a defer cycle that you can use to merge changes to the view and delay automatic refresh.">进入延迟循环，该循环可用于将更改合并到视图并延迟自动刷新。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; object that you can use to dispose of the calling object.">一个可用于释放调用对象的 <see cref="T:System.IDisposable" /> 对象。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentTo(System.Object)">
      <summary vsli:raw="Sets the specified item to be the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; in the view.">将指定项设置为视图中的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。</summary>
      <param name="item" vsli:raw="The item to set as the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt;.">要设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 的项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; is within the view; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果最终的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 位于视图中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToFirst">
      <summary vsli:raw="Sets the first item in the view as the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt;.">将视图中的第一项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; is an item within the view; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果所生成的<see langword="true" /> 是视图中的项，则为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToLast">
      <summary vsli:raw="Sets the last item in the view as the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt;.">将视图中的最后一项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; is an item within the view; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果所生成的<see langword="true" /> 是视图中的项，则为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToNext">
      <summary vsli:raw="Sets the item after the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; in the view as the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt;.">将视图中位于 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 之后的项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; is an item within the view; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果所生成的<see langword="true" /> 是视图中的项，则为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPosition(System.Int32)">
      <summary vsli:raw="Sets the item at the specified index to be the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; in the view.">将位于指定索引位置的项设置为视图中的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。</summary>
      <param name="position" vsli:raw="The index to set the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; to.">一个索引位置，位于该位置的项将设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; is an item within the view; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果所生成的<see langword="true" /> 是视图中的项，则为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.MoveCurrentToPrevious">
      <summary vsli:raw="Sets the item before the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; in the view as the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt;.">将视图中位于 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 之前的项设置为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; is an item within the view; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果所生成的<see langword="true" /> 是视图中的项，则为 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> ；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.ICollectionView.Refresh">
      <summary vsli:raw="Recreates the view.">重新创建该视图。</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanFilter">
      <summary vsli:raw="Gets a value that indicates whether this view supports filtering via the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.Filter&quot; /&gt; property.">获取一个值，该值指示此视图是否支持通过 <see cref="P:System.ComponentModel.ICollectionView.Filter" /> 属性进行筛选。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this view support filtering; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此视图支持筛选，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanGroup">
      <summary vsli:raw="Gets a value that indicates whether this view supports grouping via the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.GroupDescriptions&quot; /&gt; property.">获取一个值，该值指示此视图是否支持通过 <see cref="P:System.ComponentModel.ICollectionView.GroupDescriptions" /> 属性进行分组。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this view supports grouping; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此视图支持分组，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CanSort">
      <summary vsli:raw="Gets a value that indicates whether this view supports sorting via the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.SortDescriptions&quot; /&gt; property.">获取一个值，该值指示此视图是否支持通过 <see cref="P:System.ComponentModel.ICollectionView.SortDescriptions" /> 属性进行排序。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this view supports sorting; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此视图支持排序，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Culture">
      <summary vsli:raw="Gets or sets the cultural info for any operations of the view that may differ by culture, such as sorting.">获取或设置根据区域性而可能不同的视图的任何操作（如排序）的区域性信息。</summary>
      <returns vsli:raw="The culture to use during sorting.">要在排序过程中使用的区域性。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentItem">
      <summary vsli:raw="Gets the current item in the view.">获取视图中的当前项。</summary>
      <returns vsli:raw="The current item of the view or &lt;see langword=&quot;null&quot; /&gt; if there is no current item.">视图中的当前项，如果没有当前项则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.CurrentPosition">
      <summary vsli:raw="Gets the ordinal position of the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; within the view.">获取视图中 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 的序号位置。</summary>
      <returns vsli:raw="The ordinal position of the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; within the view.">视图中 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 的序号位置。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Filter">
      <summary vsli:raw="Gets or sets a callback used to determine if an item is suitable for inclusion in the view.">获取或设置用于确定某个项是否适合包含在视图中的回调。</summary>
      <returns vsli:raw="A method used to determine if an item is suitable for inclusion in the view.">用于确定某个项是否适合包含在视图中的方法。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.GroupDescriptions">
      <summary vsli:raw="Gets a collection of &lt;see cref=&quot;T:System.ComponentModel.GroupDescription&quot; /&gt; objects that describe how the items in the collection are grouped in the view.">获取 <see cref="T:System.ComponentModel.GroupDescription" /> 对象的集合，这些对象描述集合中的项在视图中的分组方式。</summary>
      <returns vsli:raw="A collection of &lt;see cref=&quot;T:System.ComponentModel.GroupDescription&quot; /&gt; objects that describe how the items in the collection are grouped in the view.">
        <see cref="T:System.ComponentModel.GroupDescription" /> 对象的集合，这些对象描述集合中的项在视图中的分组方式。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.Groups">
      <summary vsli:raw="Gets the top-level groups.">获取顶级组。</summary>
      <returns vsli:raw="A read-only collection of the top-level groups or &lt;see langword=&quot;null&quot; /&gt; if there are no groups.">顶级组的只读集合；如果没有任何组，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentAfterLast">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; of the view is beyond the end of the collection.">获取一个值，该值指示视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是否超出集合的末尾。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; of the view is beyond the end of the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 超出集合的末尾，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsCurrentBeforeFirst">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; of the view is beyond the beginning of the collection.">获取一个值，该值指示视图的 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 是否超出集合的开头。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.ComponentModel.ICollectionView.CurrentItem&quot; /&gt; of the view is beyond the beginning of the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果 <see cref="P:System.ComponentModel.ICollectionView.CurrentItem" /> 视图的超出集合的开头，则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.IsEmpty">
      <summary vsli:raw="Returns a value that indicates whether the resulting view is empty.">返回一个值，该值指示获得的视图是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the resulting view is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果获得的视图为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SortDescriptions">
      <summary vsli:raw="Gets a collection of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; objects that describe how the items in the collection are sorted in the view.">获取 <see cref="T:System.ComponentModel.SortDescription" /> 对象的集合，这些对象描述集合中的项在视图中的排序方式。</summary>
      <returns vsli:raw="A collection of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; objects that describe how the items in the collection are sorted in the view.">
        <see cref="T:System.ComponentModel.SortDescription" /> 对象的集合，这些对象描述集合中的项在视图中的排序方式。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionView.SourceCollection">
      <summary vsli:raw="Returns the underlying collection.">返回基础集合。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Collections.IEnumerable&quot; /&gt; object that is the underlying collection.">属于基础集合的 <see cref="T:System.Collections.IEnumerable" /> 对象。</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewFactory">
      <summary vsli:raw="An interface that enables implementing collections to create a view to their data. Normally, user code does not call methods on this interface.">可以实现集合以创建其数据的视图的接口。 正常情况下，用户代码不在此接口上调用方法。</summary>
    </member>
    <member name="M:System.ComponentModel.ICollectionViewFactory.CreateView">
      <summary vsli:raw="Creates a new view on the collection that implements this interface. Typically, user code does not call this method.">在实现此接口的集合上创建新视图。 通常，用户代码不调用此方法。</summary>
      <returns vsli:raw="The newly created view.">新创建的视图。</returns>
    </member>
    <member name="T:System.ComponentModel.ICollectionViewLiveShaping">
      <summary vsli:raw="Defines properties that enables sorting, grouping, and filtering on a &lt;see cref=&quot;T:System.Windows.Data.CollectionView&quot; /&gt; in real time.">定义能够使 <see cref="T:System.Windows.Data.CollectionView" /> 排序，分组和筛选的属性。</summary>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveFiltering">
      <summary vsli:raw="Gets a value that indicates whether the collection view supports turning filtering data in real time on or off.">获取一个值，该值指示集合视图是否支持打开或关闭实时筛选数据。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection view supports turning live filtering on or off; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合视图支持打开或关闭实时筛选，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveGrouping">
      <summary vsli:raw="Gets a value that indicates whether the collection view supports turning grouping data in real time on or off.">获取一个值，该值指示集合视图是否支持在真实时间中打开或关闭分组数据。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection view supports turning live grouping on or off; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合视图支持旋转的实时分组开关，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.CanChangeLiveSorting">
      <summary vsli:raw="Gets a value that indicates whether the collection view supports turning sorting data in real time on or off.">获取一个值，该值指示集合视图是否支持在真实时间中打开或关闭排序数据。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection view supports turning live sorting on or off; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合视图支持旋转的实时排序开关，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveFiltering">
      <summary vsli:raw="Gets or sets a value that indicates whether filtering data in real time is enabled.">获取或设置一个值，该值指示是否启用实时筛选数据。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if filtering data in real time is enabled; &lt;see langword=&quot;false&quot; /&gt; if live filtering is not enabled; &lt;see langword=&quot;null&quot; /&gt; if it cannot be determined whether the collection view implements live filtering.">如果已启用实时筛选数据，则为 <see langword="true" />；如果未启用活动筛选，则为 <see langword="false" />；如果不能确定集合视图是否实现活动筛选，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveGrouping">
      <summary vsli:raw="Gets or sets a value that indicates whether grouping data in real time is enabled.">获取或设置一个值，该值指示是否启用实时数据分组。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if grouping data in real time is enable; &lt;see langword=&quot;false&quot; /&gt; if live grouping is not enabled; &lt;see langword=&quot;null&quot; /&gt; if it cannot be determined whether the collection view implements live grouping.">如果启用实时分组数据，则为 <see langword="true" />；如果未启用活动分组，则为 <see langword="false" />；如果不能确定集合视图是否实现活动分组，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.IsLiveSorting">
      <summary vsli:raw="Gets or sets a value that indicates whether sorting in real time is enabled.">获取或设置一个值，该值指示是否启用实时排序。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if sorting data in real time is enable; &lt;see langword=&quot;false&quot; /&gt; if live sorting is not enabled; &lt;see langword=&quot;null&quot; /&gt; if it cannot be determined whether the collection view implements live sorting.">如果已启用实时排序数据，则为 <see langword="true" />；如果未启用活动排序，则为 <see langword="false" />；如果不能确定集合视图是否实现活动排序，则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveFilteringProperties">
      <summary vsli:raw="Gets a collection of strings that specify the properties that participate in filtering data in real time.">获取在真实时间中参与筛选数据的属性的字符集合。</summary>
      <returns vsli:raw="A collection of strings that specify the properties that participate in filtering data in real time.">指定参与真实时间中的筛选数据的属性的字符集合。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveGroupingProperties">
      <summary vsli:raw="Gets a collection of strings that specify the properties that participate in grouping data in real time.">获取在真实时间中参与分组数据的属性的字符集合。</summary>
      <returns vsli:raw="A collection of strings that specify the properties that participate in grouping data in real time.">指定参与真实时间中的分组数据的属性的字符集合。</returns>
    </member>
    <member name="P:System.ComponentModel.ICollectionViewLiveShaping.LiveSortingProperties">
      <summary vsli:raw="Gets a collection of strings that specify the properties that participate in sorting data in real time.">获取在真实时间中参与排序数据的属性的字符集合。</summary>
      <returns vsli:raw="A collection of strings that specify the properties that participate in sorting data in real time.">指定参与真实时间中的排序数据的属性的字符集合。</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionView">
      <summary vsli:raw="Defines methods and properties that a &lt;see cref=&quot;T:System.Windows.Data.CollectionView&quot; /&gt; implements to provide editing capabilities to a collection.">定义一些方法和属性，<see cref="T:System.Windows.Data.CollectionView" /> 实现它们以向集合提供编辑功能。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.AddNew">
      <summary vsli:raw="Adds a new item to the collection.">将新项添加到集合。</summary>
      <returns vsli:raw="The new item that is added to the collection.">添加到集合中的新项。</returns>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelEdit">
      <summary vsli:raw="Ends the edit transaction and, if possible, restores the original value to the item.">结束编辑事务，并还原项的原始值（如有可能）。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CancelNew">
      <summary vsli:raw="Ends the add transaction and discards the pending new item.">结束添加事务并放弃挂起的新项。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitEdit">
      <summary vsli:raw="Ends the edit transaction and saves the pending changes.">结束编辑事务并保存挂起的更改。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.CommitNew">
      <summary vsli:raw="Ends the add transaction and saves the pending new item.">结束添加事务并保存挂起的新项。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.EditItem(System.Object)">
      <summary vsli:raw="Begins an edit transaction of the specified item.">开始指定项的编辑事务。</summary>
      <param name="item" vsli:raw="The item to edit.">要编辑的项。</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.Remove(System.Object)">
      <summary vsli:raw="Removes the specified item from the collection.">从集合中移除指定的项。</summary>
      <param name="item" vsli:raw="The item to remove.">要移除的项。</param>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionView.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the item at the specified position from the collection.">从集合中删除指定位置的项。</summary>
      <param name="index" vsli:raw="The position of the item to remove.">要移除的项的位置。</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than 0 or greater than the number of items in the collection view.">
        <paramref name="index" /> 小于 0 或大于集合视图中的项数。</exception>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanAddNew">
      <summary vsli:raw="Gets a value that indicates whether a new item can be added to the collection.">获取一个值，该值指示是否可以将新项添加到集合中。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a new item can be added to the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将新项添加到集合中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanCancelEdit">
      <summary vsli:raw="Gets a value that indicates whether the collection view can discard pending changes and restore the original values of an edited object.">获取一个值，该值指示集合视图是否可以放弃挂起的更改并还原所编辑对象的原始值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the collection view can discard pending changes and restore the original values of an edited object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果集合视图可以放弃挂起的更改并还原所编辑对象的原始值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CanRemove">
      <summary vsli:raw="Gets a value that indicates whether an item can be removed from the collection.">获取一个值，该值指示是否可以从集合中移除项。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an item can be removed from the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以从集合中移除项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentAddItem">
      <summary vsli:raw="Gets the item that is being added during the current add transaction.">获取当前添加事务过程中正在添加的项。</summary>
      <returns vsli:raw="The item that is being added if &lt;see cref=&quot;P:System.ComponentModel.IEditableCollectionView.IsAddingNew&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果 <see cref="P:System.ComponentModel.IEditableCollectionView.IsAddingNew" /> 为 <see langword="true" />，则为要添加的项；否则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.CurrentEditItem">
      <summary vsli:raw="Gets the item in the collection that is being edited.">获取集合中正在编辑的项。</summary>
      <returns vsli:raw="The item in the collection that is being edited if &lt;see cref=&quot;P:System.ComponentModel.IEditableCollectionView.IsEditingItem&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果 <see cref="P:System.ComponentModel.IEditableCollectionView.IsEditingItem" /> 是 <see langword="true" />，则为集合中正在编辑的项；否则为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsAddingNew">
      <summary vsli:raw="Gets a value that indicates whether an add transaction is in progress.">获取一个值，该值指示是否正在执行添加事务。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an add transaction is in progress; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果正在执行添加事务，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.IsEditingItem">
      <summary vsli:raw="Gets a value that indicates whether an edit transaction is in progress.">获取一个值，该值指示是否正在执行编辑事务。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if an edit transaction is in progress; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果正在执行编辑事务，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionView.NewItemPlaceholderPosition">
      <summary vsli:raw="Gets or sets the position of the new item placeholder in the collection view.">获取或设置集合视图中新项占位符的位置。</summary>
      <returns vsli:raw="One of the enumeration values that specifies the position of the new item placeholder in the collection view.">用于指定集合视图中新项占位符位置的枚举值之一。</returns>
    </member>
    <member name="T:System.ComponentModel.IEditableCollectionViewAddNewItem">
      <summary vsli:raw="Defines methods and properties that a &lt;see cref=&quot;T:System.Windows.Data.CollectionView&quot; /&gt; implements to enable specifying adding items of a specific type.">定义 <see cref="T:System.Windows.Data.CollectionView" /> 所实现的方法和属性，它们可用于指定添加特定类型的项。</summary>
    </member>
    <member name="M:System.ComponentModel.IEditableCollectionViewAddNewItem.AddNewItem(System.Object)">
      <summary vsli:raw="Adds the specified object to the collection.">将指定的对象添加到集合。</summary>
      <param name="newItem" vsli:raw="The object to add to the collection.">要添加到集合中的对象。</param>
      <returns vsli:raw="The object that is added to the collection.">添加到集合中的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.IEditableCollectionViewAddNewItem.CanAddNewItem">
      <summary vsli:raw="Gets a value that indicates whether a specified object can be added to the collection.">获取一个值，该值指示是否可以向集合中添加指定的对象。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a specified object can be added to the collection; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将指定的对象添加到集合中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.ComponentModel.IItemProperties">
      <summary vsli:raw="Defines a property that provides information about an object's properties.">定义一个提供对象属性相关信息的属性。</summary>
    </member>
    <member name="P:System.ComponentModel.IItemProperties.ItemProperties">
      <summary vsli:raw="Gets a collection that contains information about the properties that are available on the items in a collection.">获取一个集合，该集合包含某集合中项的可用属性的相关信息。</summary>
      <returns vsli:raw="A collection that contains information about the properties that are available on the items in a collection.">一个集合，该集合包含某集合中项的可用属性的相关信息。</returns>
    </member>
    <member name="T:System.ComponentModel.ItemPropertyInfo">
      <summary vsli:raw="Contains information about a property.">包含有关属性的信息。</summary>
    </member>
    <member name="M:System.ComponentModel.ItemPropertyInfo.#ctor(System.String,System.Type,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.ItemPropertyInfo&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.ItemPropertyInfo" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The name of the property.">属性的名称。</param>
      <param name="type" vsli:raw="The type of the property.">属性的类型。</param>
      <param name="descriptor" vsli:raw="An object that contains additional information about the property.">其中包含有关属性的附加信息的对象。</param>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Descriptor">
      <summary vsli:raw="Gets an object that contains additional information about the property.">获取包含有关属性的附加信息的对象。</summary>
      <returns vsli:raw="An object that contains additional information about the property.">其中包含有关属性的附加信息的对象。</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.Name">
      <summary vsli:raw="Gets the name of the property.">获取属性的名称。</summary>
      <returns vsli:raw="The name of the property.">属性的名称。</returns>
    </member>
    <member name="P:System.ComponentModel.ItemPropertyInfo.PropertyType">
      <summary vsli:raw="Gets the type of the property.">获取属性的类型。</summary>
      <returns vsli:raw="The type of the property.">属性的类型。</returns>
    </member>
    <member name="T:System.ComponentModel.NewItemPlaceholderPosition">
      <summary vsli:raw="Specifies where the placeholder for a new item appears in the collection.">指定新项的占位符在集合中的显示的位置。</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtBeginning">
      <summary vsli:raw="The placeholder for a new item appears at the beginning of the collection.  New items are at the beginning of the collection, after the new item placeholder.">新项的占位符出现在集合的开头。  新项位于集合开头的新项占位符之后。</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.AtEnd">
      <summary vsli:raw="The placeholder for a new item appears at the end of the collection. New items are added at the end of the collection, before the new item placeholder.">新项的占位符出现在集合的末尾。 在集合末尾的新项占位符之前添加新项。</summary>
    </member>
    <member name="F:System.ComponentModel.NewItemPlaceholderPosition.None">
      <summary vsli:raw="The collection does not use a new item placeholder. The position of items that are added depends on the underlying collection.  Usually, they are added at the end of the collection.">集合不使用新项占位符。 所添加项的位置取决于基础集合。  通常情况下，它们将添加到集合的末尾。</summary>
    </member>
    <member name="T:System.ComponentModel.PropertyChangedEventManager">
      <summary vsli:raw="Provides a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; implementation so that you can use the &quot;weak event listener&quot; pattern to attach listeners for the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">提供 <see cref="T:System.Windows.WeakEventManager" /> 实现，以便可以使用“弱事件侦听器”模式附加 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件的侦听器。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary vsli:raw="Adds the specified event handler, which is called when specified source raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event for the specified property.">添加指定的事件处理程序，当指定的源为指定的属性引发 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件时进行调用。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件的源对象。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">委托处理 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。</param>
      <param name="propertyName" vsli:raw="The name of the property that exists on &lt;paramref name=&quot;source&quot; /&gt; upon which to listen for changes. Set to &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; to indicate &quot;any property&quot;.">要侦听其上的更改的 <paramref name="source" /> 上存在的属性的名称。 设置为 <see cref="F:System.String.Empty" /> 以指定“任何属性”。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="More than one method is associated with &lt;paramref name=&quot;handler&quot; /&gt;.">多个方法与 <paramref name="handler" />相关联。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.AddListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary vsli:raw="Adds the specified listener to the list of listeners on the specified source.">将指定的侦听器添加到指定源上的侦听器列表中。</summary>
      <param name="source" vsli:raw="The object with the event.">带事件的对象。</param>
      <param name="listener" vsli:raw="The object to add as a listener.">要作为侦听器添加的对象。</param>
      <param name="propertyName" vsli:raw="The name of the property that exists on &lt;paramref name=&quot;source&quot; /&gt; upon which to listen for changes. Set to &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; to indicate &quot;any property&quot;.">要侦听其上的更改的 <paramref name="source" /> 上存在的属性的名称。 设置为 <see cref="F:System.String.Empty" /> 以指定“任何属性”。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.NewListenerList">
      <summary vsli:raw="Returns a new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">返回包含 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件侦听器的新对象。</summary>
      <returns vsli:raw="A new object to contain listeners to the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">包含 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件侦听器的新对象。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary vsli:raw="Removes listeners that are no longer active from the data for the provided source.">从提供的源的数据中移除不再处于活动状态的侦听器。</summary>
      <param name="source" vsli:raw="Source object to remove all listeners from.">要从中移除所有侦听器的源对象。</param>
      <param name="data" vsli:raw="The data to purge. This is expected to be a &lt;see cref=&quot;T:System.Collections.Specialized.HybridDictionary&quot; /&gt;.">要清除的数据。 这应为 <see cref="T:System.Collections.Specialized.HybridDictionary" />。</param>
      <param name="purgeAll" vsli:raw="Set to &lt;see langword=&quot;true&quot; /&gt; to stop listening and to completely remove all data.">设置为 <see langword="true" /> 以停止侦听，并完全移除所有数据。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if some entries were removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已移除某些项，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveHandler(System.ComponentModel.INotifyPropertyChanged,System.EventHandler{System.ComponentModel.PropertyChangedEventArgs},System.String)">
      <summary vsli:raw="Removes the specified event handler from the specified source.">从指定源中移除指定的事件处理程序。</summary>
      <param name="source" vsli:raw="The source object that the raises the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">引发 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件的源对象。</param>
      <param name="handler" vsli:raw="The delegate that handles the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event.">委托处理 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。</param>
      <param name="propertyName" vsli:raw="The name of the property that exists on &lt;paramref name=&quot;source&quot; /&gt; upon which to stop listening for changes. Set to &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; to indicate &quot;any property&quot;.">要停止侦听其上的更改的 <paramref name="source" /> 上存在的属性的名称。 设置为 <see cref="F:System.String.Empty" /> 以指定“任何属性”。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handler&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handler" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="More than one method is associated with &lt;paramref name=&quot;handler&quot; /&gt;.">多个方法与 <paramref name="handler" />相关联。</exception>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.RemoveListener(System.ComponentModel.INotifyPropertyChanged,System.Windows.IWeakEventListener,System.String)">
      <summary vsli:raw="Removes the specified listener from the list of listeners on the provided source.">将指定的侦听器从提供的源上的侦听器列表中移除。</summary>
      <param name="source" vsli:raw="The object to remove the listener from.">要从中移除侦听器的对象。</param>
      <param name="listener" vsli:raw="The listener to remove.">要移除的侦听器。</param>
      <param name="propertyName" vsli:raw="The name of the property that exists on &lt;paramref name=&quot;source&quot; /&gt; upon which to stop listening for changes. Set to &lt;see cref=&quot;F:System.String.Empty&quot; /&gt; to indicate &quot;any property&quot;.">要停止侦听其上的更改的 <paramref name="source" /> 上存在的属性的名称。 设置为 <see cref="F:System.String.Empty" /> 以指定“任何属性”。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StartListening(System.Object)">
      <summary vsli:raw="Begins listening for the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event on the provided source.">开始侦听提供的源上的 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。</summary>
      <param name="source" vsli:raw="The object on which to start listening for &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt;.">要在其上开始侦听 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 的对象。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyChangedEventManager.StopListening(System.Object)">
      <summary vsli:raw="Stops listening for the &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt; event on the provided source.">停止侦听提供的源上的 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 事件。</summary>
      <param name="source" vsli:raw="The source object on which to stop listening for &lt;see cref=&quot;E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged&quot; /&gt;.">要在其上停止侦听 <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> 的源对象。</param>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterAttribute">
      <summary vsli:raw="Specifies which properties should be reported by type descriptors, specifically the &lt;see cref=&quot;M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)&quot; /&gt; method.">指定哪些属性应由类型描述符报告，尤其是 <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> 方法。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterAttribute.Default">
      <summary vsli:raw="This member supports the .NET Framework infrastructure and is not intended to be used directly from your code.">此成员支持 .NET Framework 结构，不能在代码中直接使用。</summary>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.#ctor(System.ComponentModel.PropertyFilterOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> 类的新实例。</summary>
      <param name="filter" vsli:raw="The options that describe this property filter.">描述此属性筛选器的选项。</param>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the current &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt; .NET Framework attribute is equal to a specified object.">返回一个值，该值指示当前的是否与 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 特性 指定的对象相等。</summary>
      <param name="value" vsli:raw="The object to compare to this &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt;.">与此 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> 进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />，则为 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for the current &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt; .NET Framework attribute.">返回当前 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 特性 的哈希代码。</summary>
      <returns vsli:raw="A signed 32-bit integer value.">带符号的 32 位整数值。</returns>
    </member>
    <member name="M:System.ComponentModel.PropertyFilterAttribute.Match(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether the property filter options of the current &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt; .NET Framework attribute match the property filter options of the provided object.">返回一个值，该值指示当前的属性筛选器选项是否 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 特性 与所提供的对象的属性筛选器选项匹配。</summary>
      <param name="value" vsli:raw="The object to compare. This object is expected to be a &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt;.">要比较的对象。 此对象应为 <see cref="T:System.ComponentModel.PropertyFilterAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a match exists; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.PropertyFilterAttribute.Filter">
      <summary vsli:raw="Gets the filter options for this &lt;see cref=&quot;T:System.ComponentModel.PropertyFilterAttribute&quot; /&gt; .NET Framework attribute.">获取此的筛选选项 <see cref="T:System.ComponentModel.PropertyFilterAttribute" /> .NET Framework 特性 。</summary>
      <returns vsli:raw="The property filter options.">属性筛选选项。</returns>
    </member>
    <member name="T:System.ComponentModel.PropertyFilterOptions">
      <summary vsli:raw="Specifies which properties should be reported by type descriptors, specifically the &lt;see cref=&quot;M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)&quot; /&gt; method. This enumeration is used to specify the value of the &lt;see cref=&quot;P:System.ComponentModel.PropertyFilterAttribute.Filter&quot; /&gt; property.">指定哪些属性应由类型描述符报告，尤其是 <see cref="M:System.ComponentModel.TypeDescriptor.GetProperties(System.Object)" /> 方法。 此枚举用于指定 <see cref="P:System.ComponentModel.PropertyFilterAttribute.Filter" /> 属性的值。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.All">
      <summary vsli:raw="Return all properties.">返回所有属性。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Invalid">
      <summary vsli:raw="Return only those properties that are not valid given the current context of the object.">仅返回在对象的给定当前上下文中无效的属性。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.None">
      <summary vsli:raw="Return no properties.">不返回任何属性。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.SetValues">
      <summary vsli:raw="Return only those properties that have local values currently set.">仅返回当前设置了本地值的属性。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.UnsetValues">
      <summary vsli:raw="Return only those properties whose local values are not set, or do not have properties set in an external expression store (such as binding or deferred resource).">仅返回未设置本地值或者未在外部表达式存储（如绑定或延迟资源）中设置属性的属性。</summary>
    </member>
    <member name="F:System.ComponentModel.PropertyFilterOptions.Valid">
      <summary vsli:raw="Return any property that is valid on the object in the current scope.">返回在当前范围内的对象上有效的任何属性。</summary>
    </member>
    <member name="T:System.ComponentModel.SortDescription">
      <summary vsli:raw="Defines the direction and the property name to be used as the criteria for sorting a collection.">定义要用作集合排序条件的方向和属性名。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescription.#ctor(System.String,System.ComponentModel.ListSortDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; structure.">初始化 <see cref="T:System.ComponentModel.SortDescription" /> 结构的新实例。</summary>
      <param name="propertyName" vsli:raw="The name of the property to sort the list by. If the collection contains strings or value types, set this parameter to the empty string (&quot;&quot;).">对列表进行排序所用的属性名称。</param>
      <param name="direction" vsli:raw="The sort order.">排序顺序。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="The &lt;paramref name=&quot;direction&quot; /&gt; parameter does not specify a valid value.">
        <paramref name="direction" /> 参数未指定有效值。</exception>
    </member>
    <member name="M:System.ComponentModel.SortDescription.Equals(System.Object)">
      <summary vsli:raw="Compares the specified instance and the current instance of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; for value equality.">将指定实例与当前的 <see cref="T:System.ComponentModel.SortDescription" /> 实例比较值是否相等。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; instance to compare.">要比较的 <see cref="T:System.ComponentModel.SortDescription" /> 实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;obj&quot; /&gt; and this instance of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; have the same values.">如果 <paramref name="obj" /> 与 <see cref="T:System.ComponentModel.SortDescription" /> 的此实例具有相同值，则为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.GetHashCode">
      <summary vsli:raw="Returns the hash code for this instance of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt;.">返回 <see cref="T:System.ComponentModel.SortDescription" /> 的此实例的哈希代码。</summary>
      <returns vsli:raw="The hash code for this instance of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt;.">
        <see cref="T:System.ComponentModel.SortDescription" /> 的此实例的哈希代码。</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Equality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; objects for value equality.">比较两个 <see cref="T:System.ComponentModel.SortDescription" /> 对象的值是否相等。</summary>
      <param name="sd1" vsli:raw="The first instance to compare.">要比较的第一个实例。</param>
      <param name="sd2" vsli:raw="The second instance to compare.">要比较的第二个实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two objects are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.ComponentModel.SortDescription.op_Inequality(System.ComponentModel.SortDescription,System.ComponentModel.SortDescription)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; objects for value inequality.">比较两个 <see cref="T:System.ComponentModel.SortDescription" /> 对象的值是否相等。</summary>
      <param name="sd1" vsli:raw="The first instance to compare.">要比较的第一个实例。</param>
      <param name="sd2" vsli:raw="The second instance to compare.">要比较的第二个实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the values are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个值不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.Direction">
      <summary vsli:raw="Gets or sets a value that indicates whether to sort in ascending or descending order.">获取或设置一个值，该值指示是按升序还是降序进行排序。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.ComponentModel.ListSortDirection&quot; /&gt; value to indicate whether to sort in ascending or descending order.">一个 <see cref="T:System.ComponentModel.ListSortDirection" /> 值，指示是按升序还是降序进行排序。</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.IsSealed">
      <summary vsli:raw="Gets a value that indicates whether this object is in an immutable state.">获取一个值，该值指示此对象是否为不可变状态。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object is in use; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此对象在使用中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.ComponentModel.SortDescription.PropertyName">
      <summary vsli:raw="Gets or sets the property name being used as the sorting criteria.">获取或设置要用作排序条件的属性名称。</summary>
      <returns vsli:raw="The default value is null.">默认值为 null。</returns>
    </member>
    <member name="T:System.ComponentModel.SortDescriptionCollection">
      <summary vsli:raw="Represents a collection of &lt;see cref=&quot;T:System.ComponentModel.SortDescription&quot; /&gt; objects.">表示 <see cref="T:System.ComponentModel.SortDescription" /> 对象集合。</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.CollectionChanged">
      <summary vsli:raw="Occurs when an item is added or removed.">添加或删除项时发生。</summary>
    </member>
    <member name="E:System.ComponentModel.SortDescriptionCollection.System#Collections#Specialized#INotifyCollectionChanged#CollectionChanged">
      <summary vsli:raw="Occurs when an item is added or removed.">添加或删除项时发生。</summary>
    </member>
    <member name="F:System.ComponentModel.SortDescriptionCollection.Empty">
      <summary vsli:raw="Gets an empty and non-modifiable instance of &lt;see cref=&quot;T:System.ComponentModel.SortDescriptionCollection&quot; /&gt;.">获取 <see cref="T:System.ComponentModel.SortDescriptionCollection" /> 的不可更改的空实例。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.ComponentModel.SortDescriptionCollection&quot; /&gt; class.">初始化 <see cref="T:System.ComponentModel.SortDescriptionCollection" /> 类的新实例。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.ClearItems">
      <summary vsli:raw="Removes all items from the collection.">从集合中移除所有项。</summary>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.InsertItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary vsli:raw="Inserts an item into the collection at the specified index.">将一项插入集合中指定索引处。</summary>
      <param name="index" vsli:raw="The zero-based index where the &lt;paramref name=&quot;item&quot; /&gt; is inserted.">插入了 <paramref name="item" /> 且从零开始的索引。</param>
      <param name="item" vsli:raw="The object to insert.">要插入的对象。</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.RemoveItem(System.Int32)">
      <summary vsli:raw="Removes the item at the specified index in the collection.">删除集合内指定索引处的项。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to remove.">要移除的元素的从零开始的索引。</param>
    </member>
    <member name="M:System.ComponentModel.SortDescriptionCollection.SetItem(System.Int32,System.ComponentModel.SortDescription)">
      <summary vsli:raw="Replaces the element at the specified index.">替换指定索引处的元素。</summary>
      <param name="index" vsli:raw="The zero-based index of the element to replace.">待替换元素的从零开始的索引。</param>
      <param name="item" vsli:raw="The new value for the element at the specified index.">位于指定索引处的元素的新值。</param>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceLevel">
      <summary vsli:raw="Describes the level of detail to trace about a particular object.">说明对特定对象进行跟踪的详细等级。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.High">
      <summary vsli:raw="Traces all additional information.">跟踪所有附加信息。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Low">
      <summary vsli:raw="Traces some additional information.">跟踪一些附加信息。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.Medium">
      <summary vsli:raw="Traces a medium amount of additional information.">跟踪中等数量的附加信息。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceLevel.None">
      <summary vsli:raw="Traces no available additional information.">不跟踪可用的附加信息。</summary>
    </member>
    <member name="T:System.Diagnostics.PresentationTraceSources">
      <summary vsli:raw="Provides debug tracing support that is specifically targeted for Windows Presentation Foundation (WPF) applications.">提供专门针对 Windows Presentation Foundation (WPF) 应用程序的调试跟踪支持。</summary>
    </member>
    <member name="F:System.Diagnostics.PresentationTraceSources.TraceLevelProperty">
      <summary vsli:raw="Identifies the &lt;see cref=&quot;P:System.Diagnostics.PresentationTraceSources.TraceLevel&quot; /&gt; attached property.">标识 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 附加属性。</summary>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.GetTraceLevel(System.Object)">
      <summary vsli:raw="Gets the value of the &lt;see cref=&quot;P:System.Diagnostics.PresentationTraceSources.TraceLevel&quot; /&gt; attached property for a specified element.">获取指定元素的 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 附加属性值。</summary>
      <param name="element" vsli:raw="The element from which the property value is read.">要从中读取属性值的元素。</param>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Diagnostics.PresentationTraceSources.TraceLevel&quot; /&gt; property value for the element.">元素的 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 属性值。</returns>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.Refresh">
      <summary vsli:raw="Refreshes trace sources, by forcing the app.config file to be re-read.">通过强制重新读取 app.config 文件来刷新跟踪源。</summary>
    </member>
    <member name="M:System.Diagnostics.PresentationTraceSources.SetTraceLevel(System.Object,System.Diagnostics.PresentationTraceLevel)">
      <summary vsli:raw="Sets the value of the &lt;see cref=&quot;P:System.Diagnostics.PresentationTraceSources.TraceLevel&quot; /&gt; attached property to a specified element.">将 <see cref="P:System.Diagnostics.PresentationTraceSources.TraceLevel" /> 附加属性的值设置为指定的元素。</summary>
      <param name="element" vsli:raw="The element to which the attached property is written.">要向其写入附加属性的元素。</param>
      <param name="traceLevel" vsli:raw="The needed &lt;see cref=&quot;T:System.Diagnostics.PresentationTraceLevel&quot; /&gt; value.">所需的 <see cref="T:System.Diagnostics.PresentationTraceLevel" /> 值。</param>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.AnimationSource">
      <summary vsli:raw="Gets an animation trace source.">获取动画跟踪源。</summary>
      <returns vsli:raw="An animation trace source.">动画跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DataBindingSource">
      <summary vsli:raw="Gets a data-binding trace source.">获取数据绑定跟踪源。</summary>
      <returns vsli:raw="A data-binding trace source.">数据绑定跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DependencyPropertySource">
      <summary vsli:raw="Gets a dependency property trace source.">获取依赖属性跟踪源。</summary>
      <returns vsli:raw="A dependency property trace source.">依赖属性跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.DocumentsSource">
      <summary vsli:raw="Gets a document trace source.">获取文档跟踪源。</summary>
      <returns vsli:raw="A document trace source.">文档跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.FreezableSource">
      <summary vsli:raw="Gets a Freezable trace source.">获取 Freezable 跟踪源。</summary>
      <returns vsli:raw="A Freezable trace source.">Freezable 跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.HwndHostSource">
      <summary vsli:raw="Gets an hwnd host trace source.">获取 hwnd 宿主跟踪源。</summary>
      <returns vsli:raw="An hwnd host trace source.">hwnd 宿主跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.MarkupSource">
      <summary vsli:raw="Gets a markup trace source.">获取标记跟踪源。</summary>
      <returns vsli:raw="A markup trace source.">标记跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.NameScopeSource">
      <summary vsli:raw="Gets a name scope trace source.">获取名称范围跟踪源。</summary>
      <returns vsli:raw="A name scope trace source.">名称范围跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ResourceDictionarySource">
      <summary vsli:raw="Gets a resource dictionary trace source.">获取资源字典跟踪源。</summary>
      <returns vsli:raw="A resource dictionary trace source.">资源字典跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.RoutedEventSource">
      <summary vsli:raw="Gets a routed event trace source.">获取路由事件跟踪源。</summary>
      <returns vsli:raw="A routed event trace source.">路由事件跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.ShellSource">
      <summary vsli:raw="Gets a shell trace source.">获取 shell 跟踪源。</summary>
      <returns vsli:raw="A shell trace source.">shell 跟踪源。</returns>
    </member>
    <member name="P:System.Diagnostics.PresentationTraceSources.TraceLevel" />
    <member name="T:System.IO.Packaging.CertificateEmbeddingOption">
      <summary vsli:raw="Specifies the location where the X.509 certificate that is used in signing is stored.">指定一个位置，其中存储了签名时所用的 X.509 证书。</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InCertificatePart">
      <summary vsli:raw="The certificate is embedded in its own &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt;.">该证书嵌入在自己的 <see cref="T:System.IO.Packaging.PackagePart" /> 中。</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.InSignaturePart">
      <summary vsli:raw="The certificate is embedded in the &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.SignaturePart&quot; /&gt; that is created for the signature being added.">该证书嵌入到为要添加的签名创建的 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart" /> 中。</summary>
    </member>
    <member name="F:System.IO.Packaging.CertificateEmbeddingOption.NotEmbedded">
      <summary vsli:raw="The certificate in not embedded in the package.">包中未嵌入证书。</summary>
    </member>
    <member name="T:System.IO.Packaging.EncryptedPackageEnvelope">
      <summary vsli:raw="Represents an OLE compound file that contains an encrypted package.">表示包含加密包的 OLE 复合文件。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Close">
      <summary vsli:raw="Closes the encrypted package and the OLE compound file that holds it.">关闭加密包和存放它的 OLE 复合文件。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary vsli:raw="Creates and returns an &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; on the specified stream.">在指定的流上创建并返回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</summary>
      <param name="envelopeStream" vsli:raw="The stream on which to create the file.">要在其上创建文件的流。</param>
      <param name="publishLicense" vsli:raw="The publish license that is embedded in the compound file.">嵌入复合文件的发布许可证。</param>
      <param name="cryptoProvider" vsli:raw="An object that determines what operations the current user is allowed to perform on the encrypted content.">确定允许当前用户对加密的内容执行哪些操作的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;envelopeStream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="envelopeStream" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;envelopeStream&quot; /&gt; does not provide read/write access.">
        <paramref name="envelopeStream" /> 不提供读/写访问权限。</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;.">新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Create(System.String,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary vsli:raw="Creates and returns an &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; and gives it the specified file name.">创建并返回 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />，然后为其提供指定的文件名。</summary>
      <param name="envelopeFileName" vsli:raw="The name of the OLE compound file.">OLE 复合文件的名称。</param>
      <param name="publishLicense" vsli:raw="The publish license that is embedded in the compound file.">嵌入复合文件的发布许可证。</param>
      <param name="cryptoProvider" vsli:raw="An object that determines what operations the current user is allowed to perform on the encrypted content.">确定允许当前用户对加密的内容执行哪些操作的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;envelopeFileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="envelopeFileName" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;.">新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.IO.Stream,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary vsli:raw="Creates and returns an &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; (on the specified stream) that uses the specified unencrypted package as its content.">创建并返回将指定的未加密的包用作其内容的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />（在指定的流上）。</summary>
      <param name="envelopeStream" vsli:raw="The stream on which to create the file.">要在其上创建文件的流。</param>
      <param name="packageStream" vsli:raw="The stream representing the existing unencrypted package.">表示现有未加密的包的流。</param>
      <param name="publishLicense" vsli:raw="The publish license that is embedded in the compound file.">嵌入复合文件的发布许可证。</param>
      <param name="cryptoProvider" vsli:raw="An object that determines what operations the current user is allowed to perform on the encrypted content.">确定允许当前用户对加密的内容执行哪些操作的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;envelopeStream&quot; /&gt; or &lt;paramref name=&quot;packageStream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="envelopeStream" /> 或 <paramref name="packageStream" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;envelopeStream&quot; /&gt; does not provide read/write access.">
        <paramref name="envelopeStream" /> 不提供读/写访问权限。</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;.">新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.CreateFromPackage(System.String,System.IO.Stream,System.Security.RightsManagement.PublishLicense,System.Security.RightsManagement.CryptoProvider)">
      <summary vsli:raw="Creates and returns an &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; that uses the specified unencrypted package as its content, and gives it the specified file name.">创建并返回将指定的未加密的包用作其内容的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />，然后为其提供指定的文件名。</summary>
      <param name="envelopeFileName" vsli:raw="The name of the OLE compound file.">OLE 复合文件的名称。</param>
      <param name="packageStream" vsli:raw="The stream representing the existing unencrypted package.">表示现有未加密的包的流。</param>
      <param name="publishLicense" vsli:raw="The publish license that is embedded in the compound file.">嵌入复合文件的发布许可证。</param>
      <param name="cryptoProvider" vsli:raw="An object that determines what operations the current user is allowed to perform on the encrypted content.">确定允许当前用户对加密的内容执行哪些操作的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;envelopeFileName&quot; /&gt; or &lt;paramref name=&quot;packageStream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="envelopeFileName" /> 或 <paramref name="packageStream" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The newly created &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;.">新创建的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;.">释放由 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; and optionally releases the managed resources.">释放由 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Flush">
      <summary vsli:raw="Flush the stream for both the &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; and its package content.">为 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 及其包内容刷新流。</summary>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.GetPackage">
      <summary vsli:raw="Gets the encrypted package inside the &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;.">获取 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 内部的加密包。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.Package&quot; /&gt; in the envelope.">封包中的 <see cref="T:System.IO.Packaging.Package" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.IO.Stream)">
      <summary vsli:raw="Gets a value specifying whether the specified stream is an OLE compound file with an encrypted package stream.">获取一个值，该值指示指定的流是否为具有加密包流的 OLE 复合文件。</summary>
      <param name="stream" vsli:raw="The stream that is tested.">所测试的流。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;stream&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="stream" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified stream is an OLE compound file with an encrypted package stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的流是具有加密包流的 OLE 复合文件，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.IsEncryptedPackageEnvelope(System.String)">
      <summary vsli:raw="Gets a value specifying whether the specified file is an OLE compound file with an encrypted package stream.">获取一个值，该值指示指定的文件是否为具有加密包流的 OLE 复合文件。</summary>
      <param name="fileName" vsli:raw="The file that is tested.">所测试的文件。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;fileName&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="fileName" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified file is an OLE compound file with an encrypted package stream; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的文件是具有加密包流的 OLE 复合文件，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.IO.Stream)">
      <summary vsli:raw="Open the encrypted package in the specified stream.">打开指定流中的加密包。</summary>
      <param name="envelopeStream" vsli:raw="The stream containing the encrypted package.">包含加密包的流。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; that is opened.">打开的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String)">
      <summary vsli:raw="Open the encrypted package in the specified file as read only and unshared.">以只读和非共享方式打开指定文件中的加密包。</summary>
      <param name="envelopeFileName" vsli:raw="The file containing the encrypted package.">包含加密包的文件。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; that is opened.">打开的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess)">
      <summary vsli:raw="Open the encrypted package in the specified file as unshared and with the specified access.">以非共享方式使用指定的访问权限打开指定文件中的加密包。</summary>
      <param name="envelopeFileName" vsli:raw="The file containing the encrypted package.">包含加密包的文件。</param>
      <param name="access" vsli:raw="The type of access.">访问的类型。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; that is opened.">打开的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.EncryptedPackageEnvelope.Open(System.String,System.IO.FileAccess,System.IO.FileShare)">
      <summary vsli:raw="Open the encrypted package in the specified file and gives it the specified access and sharing.">打开指定文件中的加密包，并为其提供指定的访问权限和共享属性。</summary>
      <param name="envelopeFileName" vsli:raw="The file containing the encrypted package.">包含加密包的文件。</param>
      <param name="access" vsli:raw="The type of access.">访问的类型。</param>
      <param name="sharing" vsli:raw="The type of sharing.">共享的类型。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt; that is opened.">打开的 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.FileOpenAccess">
      <summary vsli:raw="Gets a value that specifies whether the file was opened with access to read, write, or both.">获取一个值，该值指示文件是以读访问权限、写访问权限，还是以读写访问权限打开的。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.FileAccess&quot; /&gt; value that was used to open the file.">用于打开文件的 <see cref="T:System.IO.FileAccess" /> 值。</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.PackageProperties">
      <summary vsli:raw="Gets the core package properties (such as Title and Subject) of the rights managed document.">获取权限管理文档的核心包属性（如，Title 和 Subject）。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.PackageProperties&quot; /&gt; for the package.">包的 <see cref="T:System.IO.Packaging.PackageProperties" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.RightsManagementInformation">
      <summary vsli:raw="Gets the rights management information stored in the &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;; specifically, the &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; and the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt;s stored in the OLE compound file that embodies the rights-management protected package.">获取存储在 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 中的权限管理信息；具体而言，即存储在包含权限管理保护包的 OLE 复合文件中的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 和 <see cref="T:System.Security.RightsManagement.UseLicense" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.RightsManagementInformation&quot; /&gt; for the package.">包的 <see cref="T:System.IO.Packaging.RightsManagementInformation" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.EncryptedPackageEnvelope.StorageInfo">
      <summary vsli:raw="Gets an object that provides access to the compound file streams outside the encrypted package.">获取一个对象，该对象提供对加密包外部的复合文件流的访问。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.IO.Packaging.StorageInfo&quot; /&gt; representing streams in the OLE compound file that are outside the encrypted package.">一个 <see cref="T:System.IO.Packaging.StorageInfo" />，表示加密包外部的 OLE 复合文件中的流。</returns>
    </member>
    <member name="T:System.IO.Packaging.InvalidSignatureEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent&quot; /&gt; that is raised when &lt;see cref=&quot;M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)&quot; /&gt; detects an invalid signature.">表示处理当 <see cref="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent" /> 检测到无效的签名时所引发的 <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> 的方法。</summary>
      <param name="sender" vsli:raw="The invalid &lt;see cref=&quot;T:System.IO.Packaging.PackageDigitalSignature&quot; /&gt; source of the event.">无效的 <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> 事件源。</param>
      <param name="e" vsli:raw="The event data.">事件数据。</param>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignature">
      <summary vsli:raw="Represents a digital signature that is applied to a set of package parts and relationships.">表示应用于一组包部件和关系的数字签名。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.GetPartTransformList(System.Uri)">
      <summary vsli:raw="Returns an ordered list of the &lt;see cref=&quot;T:System.Security.Cryptography.Xml.Transform&quot; /&gt; operations applied to a given part.">返回应用于给定部件的 <see cref="T:System.Security.Cryptography.Xml.Transform" /> 操作的排序列表。</summary>
      <param name="partName" vsli:raw="The &lt;see cref=&quot;T:System.Uri&quot; /&gt; of the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; to return the transform list for.">为其返回转换列表的 <see cref="T:System.Uri" /> 的 <see cref="T:System.IO.Packaging.PackagePart" />。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
      <returns vsli:raw="An ordered list of URI strings, such as &lt;see cref=&quot;F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl&quot; /&gt; or &lt;see cref=&quot;F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl&quot; /&gt;, that represents the canonical XML transformations applied to the part with the given &lt;paramref name=&quot;partName&quot; /&gt; URI.">表示应用于具有给定 <paramref name="partName" /> URI 的部件的规范 XML 转换的 URI 字符串（如 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigCanonicalizationUrl" /> 或 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />）排序列表。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify">
      <summary vsli:raw="Verifies the digital signature against an X.509 certificate.">根据 X.509 证书验证数字签名。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
      <returns vsli:raw="&lt;see cref=&quot;F:System.IO.Packaging.VerifyResult.Success&quot; /&gt; if the verification succeeded; otherwise, one of the &lt;see cref=&quot;T:System.IO.Packaging.VerifyResult&quot; /&gt; values that identifies a problem.">如果验证成功，则为 <see cref="F:System.IO.Packaging.VerifyResult.Success" />；否则为标识问题的 <see cref="T:System.IO.Packaging.VerifyResult" /> 值之一。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignature.Verify(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary vsli:raw="Verifies the digital signature against a given X.509 certificate.">根据指定的 X.509 证书验证数字签名。</summary>
      <param name="signingCertificate" vsli:raw="The signer's X.509 certificate to verify the digital signature against.">验证数字签名所根据的签名者的 X.509 证书。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
      <returns vsli:raw="&lt;see cref=&quot;F:System.IO.Packaging.VerifyResult.Success&quot; /&gt; if the verification succeeded; otherwise, one of the &lt;see cref=&quot;T:System.IO.Packaging.VerifyResult&quot; /&gt; values that identifies a problem.">如果验证成功，则为 <see cref="F:System.IO.Packaging.VerifyResult.Success" />；否则为标识问题的 <see cref="T:System.IO.Packaging.VerifyResult" /> 值之一。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.CertificateEmbeddingOption">
      <summary vsli:raw="Gets the X.509 certificate embedding option.">获取 X.509 证书嵌入选项。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.IO.Packaging.CertificateEmbeddingOption&quot; /&gt; values that specifies the option for the digital signature.">
        <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> 值之一，指定数字签名的选项。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signature">
      <summary vsli:raw="Gets or sets the XML digital signature.">获取或设置 XML 数字签名。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
      <returns vsli:raw="The XML digital signature.">XML 数字签名。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignaturePart">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; that contains the signature.">获取包含签名的 <see cref="T:System.IO.Packaging.PackagePart" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
      <returns vsli:raw="The package part that contains the signature.">包含签名的包部件。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureType">
      <summary vsli:raw="Gets the URI string that identifies the signature type.">获取标识签名类型的 URI 字符串。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
      <returns vsli:raw="A URI string that identifies the signature type. The default is &lt;see cref=&quot;F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl&quot; /&gt;.">标识签名类型的 URI 字符串。 默认值为 <see cref="F:System.Security.Cryptography.Xml.SignedXml.XmlDsigC14NTransformUrl" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignatureValue">
      <summary vsli:raw="Gets the encrypted hash value of the &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt;.">获取 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 的加密哈希值。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
      <returns vsli:raw="A byte array that contains the encrypted hash value of the &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt;.">包含 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 的加密哈希值的字节数组。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedParts">
      <summary vsli:raw="Gets a collection of all the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; objects signed with the signature.">获取已使用相关签名进行签名的所有 <see cref="T:System.IO.Packaging.PackagePart" /> 对象的集合。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
      <returns vsli:raw="A collection that contains all the package parts signed with the signature.">包含已使用相关签名进行签名的所有包部件的集合。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SignedRelationshipSelectors">
      <summary vsli:raw="Gets the list of the &lt;see cref=&quot;T:System.IO.Packaging.PackageRelationship&quot; /&gt; parts that have been signed with the signature.">获取已使用相关签名进行签名的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件的列表。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
      <returns vsli:raw="The list of the &lt;see cref=&quot;T:System.IO.Packaging.PackageRelationship&quot; /&gt; parts that have been signed with the signature.">已使用相关签名进行签名的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 部件的列表。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.Signer">
      <summary vsli:raw="Gets the X.509 certificate of the signer.">获取签名程序的 X.509 证书。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
      <returns vsli:raw="The digital certificate of the signer, or &lt;see langword=&quot;null&quot; /&gt; if the certificate is not stored in the &lt;see cref=&quot;T:System.IO.Packaging.Package&quot; /&gt;.">签名程序的数字证书，或者，如果证书未存储于 <see cref="T:System.IO.Packaging.Package" />，则为<see langword="null" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.SigningTime">
      <summary vsli:raw="Gets the date and time that the signature was created.">获取创建签名的日期和时间。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
      <returns vsli:raw="The date and time that the signature was created.">创建签名的日期和时间。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignature.TimeFormat">
      <summary vsli:raw="Gets the format of the date and time returned by the &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.SigningTime&quot; /&gt; property.">获取由 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> 属性返回的日期和时间的格式。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The digital &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.Signature&quot; /&gt; has been deleted.">数字 <see cref="P:System.IO.Packaging.PackageDigitalSignature.Signature" /> 已被删除。</exception>
      <returns vsli:raw="The format of the date and time returned by the &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.SigningTime&quot; /&gt; property.">由 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> 属性返回的日期和时间的格式。</returns>
    </member>
    <member name="T:System.IO.Packaging.PackageDigitalSignatureManager">
      <summary vsli:raw="Provides a utility class for the creation and verification of digital signatures in a &lt;see cref=&quot;T:System.IO.Packaging.Package&quot; /&gt;.">提供一个实用工具类，用来在 <see cref="T:System.IO.Packaging.Package" /> 中创建和验证数字签名。</summary>
    </member>
    <member name="E:System.IO.Packaging.PackageDigitalSignatureManager.InvalidSignatureEvent">
      <summary vsli:raw="Occurs when &lt;see cref=&quot;M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)&quot; /&gt; encounters an invalid signature.">当 <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)" /> 遇到无效的签名时发生。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.#ctor(System.IO.Packaging.Package)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.Packaging.PackageDigitalSignatureManager&quot; /&gt; class for use with a specified &lt;see cref=&quot;T:System.IO.Packaging.Package&quot; /&gt;.">使用指定的 <see cref="T:System.IO.Packaging.PackageDigitalSignatureManager" /> 初始化 <see cref="T:System.IO.Packaging.Package" /> 类的新实例以供使用。</summary>
      <param name="package" vsli:raw="The package associated with this signature manager.">与此签名管理器关联的包。</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign">
      <summary vsli:raw="Countersigns all the signatures in the package with a user-selected X.509 certificate.">使用用户选定的 X.509 证书副署包中的所有签名。</summary>
      <returns vsli:raw="The signature that was added as a countersign; or &lt;see langword=&quot;null&quot; /&gt; if no certificate could be located or the user canceled the certificate selection dialog.">作为副署添加的签名；如果找不到证书或用户取消了证书选择对话框，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary vsli:raw="Countersigns all the signatures in the package with a specified X.509 certificate.">使用指定的 X.509 证书副署包中的所有签名。</summary>
      <param name="certificate" vsli:raw="The X.509 certificate to add as a countersign signature.">要作为副署签名添加的 X.509 证书。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;certificate&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;">
        <paramref name="certificate" /> 为 <see langword="null" /></exception>
      <returns vsli:raw="The signature that was added as a countersign.">作为副署添加的签名。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Countersign(System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.Uri})">
      <summary vsli:raw="Countersigns a list of signatures with a given X.509 certificate.">使用给定 X.509 证书对签名的列表进行副署。</summary>
      <param name="certificate" vsli:raw="The X.509 certificate to countersign each of the specified &lt;paramref name=&quot;signatures&quot; /&gt;.">用于对每个指定 <paramref name="signatures" /> 进行副署的 X.509 证书。</param>
      <param name="signatures" vsli:raw="The list of signatures to countersign.">要进行副署的签名的列表。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Either the &lt;paramref name=&quot;certificate&quot; /&gt; or &lt;paramref name=&quot;signatures&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="certificate" /> 或 <paramref name="signatures" /> 参数是 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The package contains no signed &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; objects.">包不包含任何签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 对象。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The package contains no &lt;see cref=&quot;T:System.IO.Packaging.PackageDigitalSignature&quot; /&gt; parts.">包不包含任何 <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> 部件。</exception>
      <returns vsli:raw="The digital signature used to countersign each of the &lt;paramref name=&quot;signatures&quot; /&gt;.">用于对每个 <paramref name="signatures" /> 进行副署的数字签名。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.GetSignature(System.Uri)">
      <summary vsli:raw="Returns the digital signature for a given signature uniform resource identifier (URI).">返回给定签名统一资源标识符 (URI) 的数字签名。</summary>
      <param name="signatureUri" vsli:raw="The URI of the digital signature to return.">要返回的数字签名的 URI。</param>
      <returns vsli:raw="The digital signature for the specified &lt;paramref name=&quot;signatureUri&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if a signature for the given &lt;paramref name=&quot;signatureUri&quot; /&gt; cannot be found.">指定 <paramref name="signatureUri" /> 的数字签名，或者，如果找不到给定 <paramref name="signatureUri" /> 的签名，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveAllSignatures">
      <summary vsli:raw="Removes all digital signatures from the package.">从包中删除所有数字签名。</summary>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.RemoveSignature(System.Uri)">
      <summary vsli:raw="Removes the digital signature with a given signature uniform resource identifier (URI).">删除具有给定签名统一资源标识符 (URI) 的数字签名。</summary>
      <param name="signatureUri" vsli:raw="The URI of the &lt;see cref=&quot;T:System.IO.Packaging.PackageDigitalSignature&quot; /&gt; to remove.">要删除的 <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> 的 URI。</param>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})">
      <summary vsli:raw="Prompts the user for an X.509 certificate, which is then used to digitally sign a specified list of package parts.">提示用户提供 X.509 证书，然后将其用于对指定的包部件列表进行数字签名。</summary>
      <param name="parts" vsli:raw="The list of uniform resource identifiers (URIs) for the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; elements to sign.">要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 元素的统一资源标识符 (URI) 的列表。</param>
      <returns vsli:raw="The digital signature used to sign the list of &lt;paramref name=&quot;parts&quot; /&gt;.">用于对 <paramref name="parts" /> 的列表进行签名的数字签名。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary vsli:raw="Signs a list of package parts with a given X.509 certificate.">使用给定的 X.509 证书对包部件的列表进行签名。</summary>
      <param name="parts" vsli:raw="The list of uniform resource identifiers (URIs) for the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; elements to sign.">要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 元素的统一资源标识符 (URI) 的列表。</param>
      <param name="certificate" vsli:raw="The X.509 certificate to use to digitally sign each of the specified &lt;paramref name=&quot;parts&quot; /&gt;.">用于对每个指定 <paramref name="parts" /> 进行数字签名的 X.509 证书。</param>
      <returns vsli:raw="The digital signature used to sign the given list of &lt;paramref name=&quot;parts&quot; /&gt;; or &lt;see langword=&quot;null&quot; /&gt; if no certificate could be found or the user clicked &quot;Cancel&quot; in the certificate selection dialog box.">如果有，则为用于对 <paramref name="parts" /> 的指定列表进行签名的数字签名；如果未找到证书或者用户在证书选择对话框中单击了“取消”，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector})">
      <summary vsli:raw="Signs a list of package parts and package relationships with a given X.509 certificate.">使用给定的 X.509 证书对包部件和包关系列表进行签名。</summary>
      <param name="parts" vsli:raw="The list of uniform resource identifiers (URIs) for the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; objects to sign.">要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 对象的统一资源标识符 (URI) 的列表。</param>
      <param name="certificate" vsli:raw="The X.509 certificate to use to digitally sign each of the specified parts and relationships.">用于对每个指定部件和关系进行数字签名的 X.509 证书。</param>
      <param name="relationshipSelectors" vsli:raw="The list of &lt;see cref=&quot;T:System.IO.Packaging.PackageRelationship&quot; /&gt; objects to sign.">要签名的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 对象的列表。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Neither &lt;paramref name=&quot;parts&quot; /&gt; nor &lt;paramref name=&quot;relationshipSelectors&quot; /&gt; specify any objects to sign.">
        <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 均未指定任何要签名的对象。</exception>
      <returns vsli:raw="The digital signature used to sign the elements specified in the &lt;paramref name=&quot;parts&quot; /&gt; and &lt;paramref name=&quot;relationshipSelectors&quot; /&gt; lists.">用于对 <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 列表中指定的元素进行签名的数字签名。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String)">
      <summary vsli:raw="Signs a list of package parts and package relationships with a given X.509 certificate and identifier (ID).">使用给定的 X.509 证书和 标识符 (ID) 对包部件和包关系列表进行签名。</summary>
      <param name="parts" vsli:raw="The list of uniform resource identifiers (URIs) for the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; objects to sign.">要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 对象的统一资源标识符 (URI) 的列表。</param>
      <param name="certificate" vsli:raw="The X.509 certificate to use to digitally sign each of the specified parts and relationships.">用于对每个指定部件和关系进行数字签名的 X.509 证书。</param>
      <param name="relationshipSelectors" vsli:raw="The list of &lt;see cref=&quot;T:System.IO.Packaging.PackageRelationship&quot; /&gt; objects to sign.">要签名的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 对象的列表。</param>
      <param name="signatureId" vsli:raw="An identification string to associate with the signature.">要与签名关联的标识字符串。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Neither &lt;paramref name=&quot;parts&quot; /&gt; nor &lt;paramref name=&quot;relationshipSelectors&quot; /&gt; specify any elements to sign.">
        <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 均未指定任何要签名的元素。</exception>
      <returns vsli:raw="The digital signature used to sign the elements specified in the &lt;paramref name=&quot;parts&quot; /&gt; and &lt;paramref name=&quot;relationshipSelectors&quot; /&gt; lists.">用于对 <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 列表中指定的元素进行签名的数字签名。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri},System.Security.Cryptography.X509Certificates.X509Certificate,System.Collections.Generic.IEnumerable{System.IO.Packaging.PackageRelationshipSelector},System.String,System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.DataObject},System.Collections.Generic.IEnumerable{System.Security.Cryptography.Xml.Reference})">
      <summary vsli:raw="Signs a list of package parts, package relationships, or custom objects with a specified X.509 certificate and signature identifier (ID).">使用指定的 X.509 证书和签名 标识符 (ID) 对包部件、包关系或自定义对象的列表进行签名。</summary>
      <param name="parts" vsli:raw="The list of uniform resource identifiers (URIs) for the &lt;see cref=&quot;T:System.IO.Packaging.PackagePart&quot; /&gt; objects to sign.">要签名的 <see cref="T:System.IO.Packaging.PackagePart" /> 对象的统一资源标识符 (URI) 的列表。</param>
      <param name="certificate" vsli:raw="The X.509 certificate to use to digitally sign each of the specified parts and relationships.">用于对每个指定部件和关系进行数字签名的 X.509 证书。</param>
      <param name="relationshipSelectors" vsli:raw="The list of &lt;see cref=&quot;T:System.IO.Packaging.PackageRelationship&quot; /&gt; objects to sign.">要签名的 <see cref="T:System.IO.Packaging.PackageRelationship" /> 对象的列表。</param>
      <param name="signatureId" vsli:raw="An identification string to associate with the signature.">要与签名关联的标识字符串。</param>
      <param name="signatureObjects" vsli:raw="A list of custom data objects to sign.">要签名的自定义数据对象的列表。</param>
      <param name="objectReferences" vsli:raw="A list of references to custom objects to sign.">要签名的自定义对象的引用列表。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Neither &lt;paramref name=&quot;parts&quot; /&gt;, &lt;paramref name=&quot;relationshipSelectors&quot; /&gt;, &lt;paramref name=&quot;signatureObjects&quot; /&gt;, nor &lt;paramref name=&quot;objectReferences&quot; /&gt; specify any elements to sign.">
        <paramref name="parts" />、<paramref name="relationshipSelectors" />、<paramref name="signatureObjects" />、<paramref name="objectReferences" /> 均未指定任何要签名的元素。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="A &lt;see cref=&quot;P:System.IO.Packaging.PackagePart.ContentType&quot; /&gt; of a part being signed references an empty, &lt;see langword=&quot;null&quot; /&gt;, or undefined &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping&quot; /&gt;.">被签名部件的 <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> 引用了为空、为 <see langword="null" />、或未定义的 <see cref="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping" />。</exception>
      <exception cref="T:System.Xml.XmlException" vsli:raw="&lt;paramref name=&quot;signatureId&quot; /&gt; is not &lt;see langword=&quot;null&quot; /&gt; and is not a valid XML schema ID (for example, begins with a leading numeric digit).">
        <paramref name="signatureId" /> 不是 <see langword="null" />，也不是有效 XML 架构 ID（例如，它以前导数字开头）。</exception>
      <returns vsli:raw="The digital signature used to sign the elements specified in the &lt;paramref name=&quot;parts&quot; /&gt; and &lt;paramref name=&quot;relationshipSelectors&quot; /&gt; lists.">用于对 <paramref name="parts" /> 和 <paramref name="relationshipSelectors" /> 列表中指定的元素进行签名的数字签名。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifyCertificate(System.Security.Cryptography.X509Certificates.X509Certificate)">
      <summary vsli:raw="Verifies a given X.509 certificate.">验证给定的 X.509 证书。</summary>
      <param name="certificate" vsli:raw="The X.509 certificate to verify.">要验证的 X.509 证书。</param>
      <returns vsli:raw="&lt;see cref=&quot;F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError&quot; /&gt; (value 0) if the certificate verified successfully; otherwise, a bitwise enumeration of error flags.">如果证书验证已成功，则为 <see cref="F:System.Security.Cryptography.X509Certificates.X509ChainStatusFlags.NoError" />（值为 0）；否则为错误标志的的按位枚举。</returns>
    </member>
    <member name="M:System.IO.Packaging.PackageDigitalSignatureManager.VerifySignatures(System.Boolean)">
      <summary vsli:raw="Verifies the signatures on all signed parts within the package.">验证包内所有已签名部件上的签名。</summary>
      <param name="exitOnFailure" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to exit on first failure; otherwise, &lt;see langword=&quot;false&quot; /&gt; to continue and check all signatures.">若要在首次失败时退出，则为 <see langword="true" />；若要继续检查所有签名，则为 <see langword="false" />。</param>
      <returns vsli:raw="&lt;see cref=&quot;F:System.IO.Packaging.VerifyResult.Success&quot; /&gt; (value 0) if all signatures are verified successfully; otherwise, an enumeration that identifies the error.">如果成功验证所有签名，则为 <see cref="F:System.IO.Packaging.VerifyResult.Success" />（值为 0）；否则为标识错误的枚举。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.CertificateOption">
      <summary vsli:raw="Gets or sets the X.509 certificate embedding option used by the &lt;see cref=&quot;M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})&quot; /&gt; method to digitally sign package parts.">获取或设置由 <see cref="M:System.IO.Packaging.PackageDigitalSignatureManager.Sign(System.Collections.Generic.IEnumerable{System.Uri})" /> 方法使用的 X.509 证书嵌入选项以对包部件进行数字签名。</summary>
      <returns vsli:raw="One of the &lt;see cref=&quot;T:System.IO.Packaging.CertificateEmbeddingOption&quot; /&gt; values.">
        <see cref="T:System.IO.Packaging.CertificateEmbeddingOption" /> 值之一。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.DefaultHashAlgorithm">
      <summary vsli:raw="Gets a URI string that identifies the default hash algorithm used to create and verify signatures.">获取 URI 字符串，该字符串可标识用于创建和验证签名的默认哈希算法。</summary>
      <returns vsli:raw="A URI string that identifies the default hash algorithm used to create and verify signatures.">标识用于创建和验证签名的默认哈希算法的 URI 字符串。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.HashAlgorithm">
      <summary vsli:raw="Gets or sets the URI identifier for the &lt;see cref=&quot;T:System.Security.Cryptography.HashAlgorithm&quot; /&gt; instance used to create and verify signatures.">获取或设置用于创建和验证签名的 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 实例的 URI 标识符。</summary>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The string for the URI to set is &lt;see langword=&quot;null&quot; /&gt;.">要设置的 URI 的字符串为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The string for the URI to set is empty.">要设置的 URI 的字符串为空。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Security.Cryptography.Xml.SignedXml&quot; /&gt; URI identifier for the &lt;see cref=&quot;T:System.Security.Cryptography.HashAlgorithm&quot; /&gt; instance used to create and verify signatures.">
        <see cref="T:System.Security.Cryptography.Xml.SignedXml" />
        <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 用于创建和验证签名的实例的 URI 标识符。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.IsSigned">
      <summary vsli:raw="Gets a value that indicates whether the package contains any signatures.">获取一个值，该值指示包是否包含任何签名。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the package contains signatures; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果包中包含签名，则为 <see langword="true" />，否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.ParentWindow">
      <summary vsli:raw="Gets or sets a handle to the parent window for displaying a certificate selection dialog box.">获取或设置父窗口的句柄，以显示证书选择对话框。</summary>
      <returns vsli:raw="The handle of the parent window to use to display the certificate selection dialog box.">用于显示证书选择对话框的父窗口的句柄。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOrigin">
      <summary vsli:raw="Gets the uniform resource identifier (URI) of the signature origin part.">获取签名源部分的统一资源标识符 (URI)。</summary>
      <returns vsli:raw="The URI of the signature origin part.">签名源部件的 URI。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.SignatureOriginRelationshipType">
      <summary vsli:raw="Gets the type of default signature origin relationship.">获取默认签名源关系的类型。</summary>
      <returns vsli:raw="The type of default signature origin relationship.">默认签名源关系的类型。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.Signatures">
      <summary vsli:raw="Gets a collection of all the signatures contained in the package.">获取包中包含的所有签名的集合。</summary>
      <returns vsli:raw="A collection of all the &lt;see cref=&quot;T:System.IO.Packaging.PackageDigitalSignature&quot; /&gt; objects.">所有 <see cref="T:System.IO.Packaging.PackageDigitalSignature" /> 对象的集合。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TimeFormat">
      <summary vsli:raw="Gets or sets the date/time format used to create a signature &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.SigningTime&quot; /&gt;.">获取或设置用于创建签名 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> 的日期/时间格式。</summary>
      <returns vsli:raw="The date/time format used to create a signature &lt;see cref=&quot;P:System.IO.Packaging.PackageDigitalSignature.SigningTime&quot; /&gt;.">用于创建签名 <see cref="P:System.IO.Packaging.PackageDigitalSignature.SigningTime" /> 的日期/时间格式。</returns>
    </member>
    <member name="P:System.IO.Packaging.PackageDigitalSignatureManager.TransformMapping">
      <summary vsli:raw="Gets a dictionary that contains each defined &lt;see cref=&quot;P:System.IO.Packaging.PackagePart.ContentType&quot; /&gt; and its associated XML &lt;see cref=&quot;T:System.Security.Cryptography.Xml.Transform&quot; /&gt;.&lt;see cref=&quot;P:System.Security.Cryptography.Xml.Transform.Algorithm&quot; /&gt; identifier.">获取一个字典，其中包含每个定义的 <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> 及其关联 XML <see cref="T:System.Security.Cryptography.Xml.Transform" />.<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> 标识符。</summary>
      <returns vsli:raw="A dictionary that contains each defined &lt;see cref=&quot;P:System.IO.Packaging.PackagePart.ContentType&quot; /&gt; and its associated XML &lt;see cref=&quot;T:System.Security.Cryptography.Xml.Transform&quot; /&gt;.&lt;see cref=&quot;P:System.Security.Cryptography.Xml.Transform.Algorithm&quot; /&gt; identifier.">一个字典，其中包含每个定义的 <see cref="P:System.IO.Packaging.PackagePart.ContentType" /> 及其关联的 XML <see cref="T:System.Security.Cryptography.Xml.Transform" /> 。<see cref="P:System.Security.Cryptography.Xml.Transform.Algorithm" /> 标识符。</returns>
    </member>
    <member name="T:System.IO.Packaging.RightsManagementInformation">
      <summary vsli:raw="Represents Digital Rights Management (DRM) information that is stored in an &lt;see cref=&quot;T:System.IO.Packaging.EncryptedPackageEnvelope&quot; /&gt;.">表示存储在 <see cref="T:System.IO.Packaging.EncryptedPackageEnvelope" /> 中的数字版权管理 (DRM) 信息。</summary>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.DeleteUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary vsli:raw="Deletes the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for a specified user from the encrypted rights management data stream.">从加密权限管理数据流中删除指定用户的 <see cref="T:System.Security.RightsManagement.UseLicense" />。</summary>
      <param name="userKey" vsli:raw="The user of the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; to be deleted.">要删除的 <see cref="T:System.Security.RightsManagement.UseLicense" /> 的用户。</param>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.GetEmbeddedUseLicenses">
      <summary vsli:raw="Returns a dictionary collection of user and &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; key/value pairs from the encrypted rights management data stream.">从加密权限管理数据流返回用户和 <see cref="T:System.Security.RightsManagement.UseLicense" /> 键/值对的字典集合。</summary>
      <returns vsli:raw="A collection of user and &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; key/value pairs that are contained in the rights managed protected package.">包含在权限管理保护包中的用户和 <see cref="T:System.Security.RightsManagement.UseLicense" /> 键/值对的集合。</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadPublishLicense">
      <summary vsli:raw="Returns the embedded &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; from the encrypted rights management data stream.">从加密权限管理数据流返回嵌入的 <see cref="T:System.Security.RightsManagement.PublishLicense" />。</summary>
      <exception cref="T:System.IO.FileFormatException" vsli:raw="The rights management information in this package cannot be read by the current version of this class.">该类的当前版本无法读取此包中的权限管理信息。</exception>
      <returns vsli:raw="The embedded &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt;; or &lt;see langword=&quot;null&quot; /&gt;, if the package does not contain a &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt;.">嵌入的 <see cref="T:System.Security.RightsManagement.PublishLicense" />；或者 <see langword="null" />（如果包中不包含 <see cref="T:System.Security.RightsManagement.PublishLicense" />）。</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.LoadUseLicense(System.Security.RightsManagement.ContentUser)">
      <summary vsli:raw="Returns a specified user's embedded &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; from the encrypted rights management data stream.">从加密权限管理数据流返回指定用户的嵌入 <see cref="T:System.Security.RightsManagement.UseLicense" />。</summary>
      <param name="userKey" vsli:raw="The user or user group to return the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for.">要为其返回 <see cref="T:System.Security.RightsManagement.UseLicense" /> 的用户或用户组。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;userKey&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="userKey" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileFormatException" vsli:raw="The rights management information in this package cannot be read by the current version of this class.">该类的当前版本无法读取此包中的权限管理信息。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for the specified user; or &lt;see langword=&quot;null&quot; /&gt;, if the package does not contain a &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; that matches the given &lt;paramref name=&quot;userKey&quot; /&gt;.">指定用户的 <see cref="T:System.Security.RightsManagement.UseLicense" />；或 <see langword="null" />（如果包中不包含与给定的 <paramref name="userKey" /> 相匹配的 <see cref="T:System.Security.RightsManagement.UseLicense" />）。</returns>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SavePublishLicense(System.Security.RightsManagement.PublishLicense)">
      <summary vsli:raw="Saves a given &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; to the encrypted rights management data stream.">将给定的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 保存到加密权限管理数据流。</summary>
      <param name="publishLicense" vsli:raw="The publish license to store and embed in the package.">要在包中存储和嵌入的发布许可证。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;publishLicense&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="publishLicense" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileFormatException" vsli:raw="The rights management information in this package cannot be read by the current version of this class.">该类的当前版本无法读取此包中的权限管理信息。</exception>
    </member>
    <member name="M:System.IO.Packaging.RightsManagementInformation.SaveUseLicense(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.UseLicense)">
      <summary vsli:raw="Saves a given &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for a specified user to the encrypted rights management data stream.">将指定用户的给定 <see cref="T:System.Security.RightsManagement.UseLicense" /> 保存到加密权限管理数据流。</summary>
      <param name="userKey" vsli:raw="The user of the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt;.">
        <see cref="T:System.Security.RightsManagement.UseLicense" /> 的用户。</param>
      <param name="useLicense" vsli:raw="The use license to store and embed in the package.">要在包中存储和嵌入的使用许可证。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Either the &lt;paramref name=&quot;userKey&quot; /&gt; or &lt;paramref name=&quot;useLicense&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="userKey" /> 或 <paramref name="useLicense" /> 参数是 <see langword="null" />。</exception>
      <exception cref="T:System.IO.FileFormatException" vsli:raw="The rights management information in this package cannot be read by the current version of this class.">该类的当前版本无法读取此包中的权限管理信息。</exception>
    </member>
    <member name="P:System.IO.Packaging.RightsManagementInformation.CryptoProvider">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;T:System.Security.RightsManagement.CryptoProvider&quot; /&gt; for accessing the package's encrypted rights management data stream.">获取或设置用于访问包的加密权限管理数据流的 <see cref="T:System.Security.RightsManagement.CryptoProvider" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Security.RightsManagement.CryptoProvider&quot; /&gt; for accessing the rights management information.">访问权限管理信息的 <see cref="T:System.Security.RightsManagement.CryptoProvider" />。</returns>
    </member>
    <member name="T:System.IO.Packaging.SignatureVerificationEventArgs">
      <summary vsli:raw="Specifies the event args provided to the &lt;see cref=&quot;T:System.IO.Packaging.InvalidSignatureEventHandler&quot; /&gt;.">指定提供给 <see cref="T:System.IO.Packaging.InvalidSignatureEventHandler" /> 的事件参数。</summary>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.Signature">
      <summary vsli:raw="Gets the digital signature being verified.">获取要验证的数字签名。</summary>
      <returns vsli:raw="The digital signature being verified.">要验证的数字签名。</returns>
    </member>
    <member name="P:System.IO.Packaging.SignatureVerificationEventArgs.VerifyResult">
      <summary vsli:raw="Gets the signature verification error.">获取签名验证错误。</summary>
      <returns vsli:raw="The signature verification error.">签名验证错误。</returns>
    </member>
    <member name="T:System.IO.Packaging.StorageInfo">
      <summary vsli:raw="Provides access and information for manipulating data stores in a &lt;see cref=&quot;T:System.IO.Packaging.Package&quot; /&gt;.">提供访问和信息，用以操作 <see cref="T:System.IO.Packaging.Package" /> 中的数据存储区。</summary>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String)">
      <summary vsli:raw="Creates a new stream with a given name.">使用给定名称新建流。</summary>
      <param name="name" vsli:raw="The name for the new stream.">新流的名称。</param>
      <returns vsli:raw="The new stream with the specified &lt;paramref name=&quot;name&quot; /&gt;.">具有指定 <paramref name="name" /> 的新流。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateStream(System.String,System.IO.Packaging.CompressionOption,System.IO.Packaging.EncryptionOption)">
      <summary vsli:raw="Creates a new stream with a given name, &lt;see cref=&quot;T:System.IO.Packaging.CompressionOption&quot; /&gt;, and &lt;see cref=&quot;T:System.IO.Packaging.EncryptionOption&quot; /&gt;.">使用给定名称 <see cref="T:System.IO.Packaging.CompressionOption" /> 和 <see cref="T:System.IO.Packaging.EncryptionOption" /> 新建流。</summary>
      <param name="name" vsli:raw="The name for the new stream.">新流的名称。</param>
      <param name="compressionOption" vsli:raw="The compression option for the data stream.">数据流的压缩选项。</param>
      <param name="encryptionOption" vsli:raw="The encryption option for the data stream.">数据流的加密选项。</param>
      <returns vsli:raw="The new stream with the specified &lt;paramref name=&quot;name&quot; /&gt;, &lt;paramref name=&quot;compressionOption&quot; /&gt;, and &lt;paramref name=&quot;encryptionOption&quot; /&gt;.">带有指定的 <paramref name="name" />、<paramref name="compressionOption" /> 和 <paramref name="encryptionOption" /> 的新流。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.CreateSubStorage(System.String)">
      <summary vsli:raw="Creates a new child &lt;see cref=&quot;T:System.IO.Packaging.StorageInfo&quot; /&gt; with this &lt;see cref=&quot;T:System.IO.Packaging.StorageInfo&quot; /&gt; as the parent.">新建子级 <see cref="T:System.IO.Packaging.StorageInfo" />，使此 <see cref="T:System.IO.Packaging.StorageInfo" /> 作为父级。</summary>
      <param name="name" vsli:raw="The name for the new child data store.">新的子级数据存储区的名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="The new child data store.">新的子级数据存储区。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteStream(System.String)">
      <summary vsli:raw="Deletes the stream with a specified name.">删除具有指定名称的流。</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.StreamInfo&quot; /&gt; name of the stream to delete.">要删除的流的 <see cref="T:System.IO.Packaging.StreamInfo" /> 名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.DeleteSubStorage(System.String)">
      <summary vsli:raw="Deletes a specified sub-store.">删除指定的子存储区。</summary>
      <param name="name" vsli:raw="The name of the sub-store to delete.">要删除的子存储区的名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreamInfo(System.String)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.IO.Packaging.StreamInfo&quot; /&gt; instance with the given name.">返回具有给定名称的 <see cref="T:System.IO.Packaging.StreamInfo" /> 实例。</summary>
      <param name="name" vsli:raw="The name of the &lt;see cref=&quot;T:System.IO.Packaging.StreamInfo&quot; /&gt; instance to return.">要返回的 <see cref="T:System.IO.Packaging.StreamInfo" /> 实例的名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="The stream with the specified &lt;paramref name=&quot;name&quot; /&gt;.">具有指定 <paramref name="name" /> 的流。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetStreams">
      <summary vsli:raw="Returns an array of the &lt;see cref=&quot;T:System.IO.Packaging.StreamInfo&quot; /&gt; instances that are currently contained in this store.">返回当前包含在此存储区中的 <see cref="T:System.IO.Packaging.StreamInfo" /> 实例的数组。</summary>
      <returns vsli:raw="An array of the &lt;see cref=&quot;T:System.IO.Packaging.StreamInfo&quot; /&gt; objects, each pointing to an I/O steam defined within this store.">
        <see cref="T:System.IO.Packaging.StreamInfo" /> 对象的数组，每个都指向在此存储区中定义的 I/O 流。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorageInfo(System.String)">
      <summary vsli:raw="Returns the child sub-store with a given name.">返回具有给定名称的子级子存储。</summary>
      <param name="name" vsli:raw="The name of the sub-store to return.">要返回的子存储的名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;name&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 参数为 <see langword="null" />。</exception>
      <returns vsli:raw="The child sub-store with the specified &lt;paramref name=&quot;name&quot; /&gt;.">具有指定 <paramref name="name" /> 的子级子存储。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.GetSubStorages">
      <summary vsli:raw="Returns an array of the child sub-stores that are currently contained in this store.">返回当前包含在此存储区中的子级子存储区的数组。</summary>
      <returns vsli:raw="An array of &lt;see cref=&quot;T:System.IO.Packaging.StorageInfo&quot; /&gt; objects, each pointing to a sub-store defined within this store.">
        <see cref="T:System.IO.Packaging.StorageInfo" /> 对象的数组，每个数组都指向在此存储区中定义的子存储区。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.StreamExists(System.String)">
      <summary vsli:raw="Returns a value that indicates whether a given stream exists.">返回一个值，该值指示给定的流是否存在。</summary>
      <param name="name" vsli:raw="The &lt;see cref=&quot;T:System.IO.Packaging.StreamInfo&quot; /&gt; name to check for.">要检查的 <see cref="T:System.IO.Packaging.StreamInfo" /> 名称。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a stream with the specified &lt;paramref name=&quot;name&quot; /&gt; exists; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果具有指定 <paramref name="name" /> 的流存在，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.IO.Packaging.StorageInfo.SubStorageExists(System.String)">
      <summary vsli:raw="Returns a value that indicates whether a given child sub-store exists.">返回一个值，该值表示指定的子存储区是否存在。</summary>
      <param name="name" vsli:raw="The child &lt;see cref=&quot;T:System.IO.Packaging.StorageInfo&quot; /&gt; name to check for.">要检查的子存储区的 <see cref="T:System.IO.Packaging.StorageInfo" /> 名称。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a child sub-store with the specified &lt;paramref name=&quot;name&quot; /&gt; exists; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果存在具有指定 <paramref name="name" /> 的子存储区，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.IO.Packaging.StorageInfo.Name">
      <summary vsli:raw="Gets the name of the store.">获取存储区的名称。</summary>
      <returns vsli:raw="The name of this store.">该存储区的名称。</returns>
    </member>
    <member name="T:System.IO.Packaging.StreamInfo">
      <summary vsli:raw="Provides access and information for manipulating I/O streams within a &lt;see cref=&quot;T:System.IO.Packaging.Package&quot; /&gt;.">提供用于操作 <see cref="T:System.IO.Packaging.Package" /> 中的 I/O 流的访问和信息。</summary>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream">
      <summary vsli:raw="Returns a stream opened in a default &lt;see cref=&quot;T:System.IO.FileMode&quot; /&gt; and &lt;see cref=&quot;T:System.IO.FileAccess&quot; /&gt;.">返回在默认 <see cref="T:System.IO.FileMode" /> 和 <see cref="T:System.IO.FileAccess" /> 中打开的流。</summary>
      <returns vsli:raw="The I/O stream opened in a default &lt;see cref=&quot;T:System.IO.Packaging.Package&quot; /&gt; root &lt;see cref=&quot;T:System.IO.FileMode&quot; /&gt; and &lt;see cref=&quot;T:System.IO.FileAccess&quot; /&gt;.">在默认 <see cref="T:System.IO.Packaging.Package" /> 根 <see cref="T:System.IO.FileMode" /> 和 <see cref="T:System.IO.FileAccess" /> 中打开的 I/O 流。</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode)">
      <summary vsli:raw="Returns an I/O stream opened in a specified &lt;see cref=&quot;T:System.IO.FileMode&quot; /&gt;.">返回在指定 <see cref="T:System.IO.FileMode" /> 中打开的 I/O 流。</summary>
      <param name="mode" vsli:raw="The file mode in which to open the stream.">用于打开流的文件模式。</param>
      <returns vsli:raw="The stream opened in the specified file &lt;paramref name=&quot;mode&quot; /&gt;.">在指定文件 <paramref name="mode" /> 中打开的流。</returns>
    </member>
    <member name="M:System.IO.Packaging.StreamInfo.GetStream(System.IO.FileMode,System.IO.FileAccess)">
      <summary vsli:raw="Returns an I/O stream opened in a specified &lt;see cref=&quot;T:System.IO.FileMode&quot; /&gt; and with a given &lt;see cref=&quot;T:System.IO.FileAccess&quot; /&gt;.">返回以指定的 <see cref="T:System.IO.FileMode" /> 打开并且具有给定的 <see cref="T:System.IO.FileAccess" /> 的 I/O 流。</summary>
      <param name="mode" vsli:raw="The file mode in which to open the stream.">用于打开流的文件模式。</param>
      <param name="access" vsli:raw="The file access mode in which to read or write to the stream.">用于读取或写入流的文件访问模式。</param>
      <returns vsli:raw="The I/O stream opened in the specified &lt;see cref=&quot;T:System.IO.FileMode&quot; /&gt; and with a given &lt;see cref=&quot;T:System.IO.FileAccess&quot; /&gt;.">在指定的 <see cref="T:System.IO.FileMode" /> 中打开并且具有给定的 <see cref="T:System.IO.FileAccess" /> 的 I/O 流。</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.CompressionOption">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.IO.Packaging.CompressionOption&quot; /&gt; setting for the stream.">获得流的 <see cref="T:System.IO.Packaging.CompressionOption" /> 设置。</summary>
      <returns vsli:raw="The compression option setting for the package stream.">包流的压缩选项设置。</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.EncryptionOption">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.IO.Packaging.EncryptionOption&quot; /&gt; setting for the stream.">获得流的 <see cref="T:System.IO.Packaging.EncryptionOption" /> 设置。</summary>
      <returns vsli:raw="The encryption option setting for the package stream.">包流的加密选项设置。</returns>
    </member>
    <member name="P:System.IO.Packaging.StreamInfo.Name">
      <summary vsli:raw="Gets the name of the stream.">获取流的名称。</summary>
      <returns vsli:raw="The name of this stream.">该流的名称。</returns>
    </member>
    <member name="T:System.IO.Packaging.VerifyResult">
      <summary vsli:raw="Specifies the result of a certificate or signature verification.">指定证书或签名验证的结果。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.CertificateRequired">
      <summary vsli:raw="The X.509 certificate is not available to verify the signature.">X.509 证书不可用于验证签名。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidCertificate">
      <summary vsli:raw="The X.509 certificate is not valid.">X.509 证书无效。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.InvalidSignature">
      <summary vsli:raw="The signature is not valid.">该签名无效。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.NotSigned">
      <summary vsli:raw="The specified package or part has no signature.">指定的包或部件不具有签名。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.ReferenceNotFound">
      <summary vsli:raw="A reference relationship to the signature was not found.">找不到签名的引用关系。</summary>
    </member>
    <member name="F:System.IO.Packaging.VerifyResult.Success">
      <summary vsli:raw="The verification was successful.">验证成功。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.AuthenticationType">
      <summary vsli:raw="Specifies the method of rights management authentication.">指定权限管理身份验证的方法。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Internal">
      <summary vsli:raw="Implicit authentication to any requesting user.">对所有请求用户执行隐式身份验证。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Passport">
      <summary vsli:raw="Windows Live ID authentication.">Windows Live ID 身份验证。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.Windows">
      <summary vsli:raw="Windows authentication in a corporate domain environment.">公司域环境中的 Windows 身份验证。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.AuthenticationType.WindowsPassport">
      <summary vsli:raw="Either Windows authentication or Windows Live ID authentication.">Windows 身份验证或 Windows Live ID 身份验证。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentGrant">
      <summary vsli:raw="Represents a right granted to a user to access information in a rights managed document.">表示向用户授予的一个权限，该权限使用户可访问权限管理文档中的信息。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.ContentGrant&quot; /&gt; class that grants a specified &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; a specified &lt;see cref=&quot;T:System.Security.RightsManagement.ContentRight&quot; /&gt;.">初始化 <see cref="T:System.Security.RightsManagement.ContentGrant" /> 类的新实例，以向指定的 <see cref="T:System.Security.RightsManagement.ContentUser" /> 授予指定的 <see cref="T:System.Security.RightsManagement.ContentRight" />。</summary>
      <param name="user" vsli:raw="The user the access right is granted to.">向其授予访问权限的用户。</param>
      <param name="right" vsli:raw="The access right that is granted.">所授予的访问权限。</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight,System.DateTime,System.DateTime)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.ContentGrant&quot; /&gt; class that grants a specified &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; a specified &lt;see cref=&quot;T:System.Security.RightsManagement.ContentRight&quot; /&gt; for a specified &lt;see cref=&quot;T:System.DateTime&quot; /&gt; duration.">初始化 <see cref="T:System.Security.RightsManagement.ContentGrant" /> 类的新实例，以授予指定的 <see cref="T:System.Security.RightsManagement.ContentUser" /> 在指定的 <see cref="T:System.Security.RightsManagement.ContentRight" /> 期间内具有指定的 <see cref="T:System.DateTime" />。</summary>
      <param name="user" vsli:raw="The user the access right is granted to.">向其授予访问权限的用户。</param>
      <param name="right" vsli:raw="The access right that is granted.">所授予的访问权限。</param>
      <param name="validFrom" vsli:raw="The starting date and time that the right begins.">该权限开始生效的起始日期和时间。</param>
      <param name="validUntil" vsli:raw="The ending date and time that the right expires.">该权限到期的终止日期和时间。</param>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.Right">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Security.RightsManagement.ContentRight&quot; /&gt; that is granted.">获取所授予的 <see cref="T:System.Security.RightsManagement.ContentRight" />。</summary>
      <returns vsli:raw="The access right that is granted to the &lt;see cref=&quot;P:System.Security.RightsManagement.ContentGrant.User&quot; /&gt;, as specified to the &lt;see cref=&quot;M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)&quot; /&gt; constructor.">向 <see cref="P:System.Security.RightsManagement.ContentGrant.User" /> 授予的访问权限，该权限已在 <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> 构造函数中指定。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.User">
      <summary vsli:raw="Gets the user who is granted the access &lt;see cref=&quot;P:System.Security.RightsManagement.ContentGrant.Right&quot; /&gt;.">获取向其授予访问权限 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 的用户。</summary>
      <returns vsli:raw="The user that the access &lt;see cref=&quot;P:System.Security.RightsManagement.ContentGrant.Right&quot; /&gt; is granted to, as specified to the &lt;see cref=&quot;M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)&quot; /&gt; constructor.">向其授予访问权限 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 的用户，该权限已在 <see cref="M:System.Security.RightsManagement.ContentGrant.#ctor(System.Security.RightsManagement.ContentUser,System.Security.RightsManagement.ContentRight)" /> 构造函数中指定。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidFrom">
      <summary vsli:raw="Gets the starting date and time that the granted &lt;see cref=&quot;P:System.Security.RightsManagement.ContentGrant.Right&quot; /&gt; begins.">获取所授予的 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 开始生效的起始日期和时间。</summary>
      <returns vsli:raw="The start date and time that the granted &lt;see cref=&quot;P:System.Security.RightsManagement.ContentGrant.Right&quot; /&gt; begins, or &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.&lt;see cref=&quot;F:System.DateTime.MinValue&quot;&gt;DateTime.MinValue&lt;/see&gt; if there is there is no starting limitation.">所授予的开始日期和时间 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> ，或 <see cref="T:System.DateTime" /> 。<see cref="F:System.DateTime.MinValue" /> 如果没有起始限制，则为。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentGrant.ValidUntil">
      <summary vsli:raw="Gets the ending date and time that the granted &lt;see cref=&quot;P:System.Security.RightsManagement.ContentGrant.Right&quot; /&gt; expires.">获取所授予的 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> 到期的终止日期和时间。</summary>
      <returns vsli:raw="The end date and time that the granted &lt;see cref=&quot;P:System.Security.RightsManagement.ContentGrant.Right&quot; /&gt; expires, or &lt;see cref=&quot;T:System.DateTime&quot; /&gt;.&lt;see cref=&quot;F:System.DateTime.MaxValue&quot;&gt;DateTime.MaxValue&lt;/see&gt; if there is no ending limitation.">授予的到期的结束日期和时间 <see cref="P:System.Security.RightsManagement.ContentGrant.Right" /> ，或 <see cref="T:System.DateTime" /> 。<see cref="F:System.DateTime.MaxValue" /> 如果没有结束限制，则为。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.ContentRight">
      <summary vsli:raw="Specifies rights that can be granted to users for accessing content in a rights managed document.">指定可授予用户访问权限管理文档中内容的权限。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.DocumentEdit">
      <summary vsli:raw="The user can edit the document that contains the protected content.">用户可以编辑包含受保护内容的文档。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Edit">
      <summary vsli:raw="The user can edit and encrypt the protected content.">用户可以编辑和加密受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Export">
      <summary vsli:raw="The user can export the protected content.">用户可以导出受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Extract">
      <summary vsli:raw="The user can extract (copy and paste) the protected content.">用户可以解压缩（复制和粘贴）受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Forward">
      <summary vsli:raw="The user can forward the protected content to another user.">用户可以将受保护的内容转发给其他用户。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ObjectModel">
      <summary vsli:raw="The user can control programmed access to the protected content.">用户可以控制对受保护内容的编程访问。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Owner">
      <summary vsli:raw="The user is the content owner.  The owner can edit and encrypt the protected content, and decrypt the signed &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt;.">用户是内容所有者。  内容所有者可以对受保护的内容进行编辑和加密，并可以对已签名的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 进行解密。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Print">
      <summary vsli:raw="The user can print the protected content.">用户可以打印受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Reply">
      <summary vsli:raw="The user can reply to the sender of the protected content.">用户可以答复受保护内容的发送方。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ReplyAll">
      <summary vsli:raw="The user can &quot;reply all&quot; to recipients of the protected content.">用户可以“全部答复”受保护内容的接收方。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.Sign">
      <summary vsli:raw="The user can digitally sign the protected content.">用户可以对受保护的内容进行数字签名。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.View">
      <summary vsli:raw="The user can view the protected content.">用户可以查看受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.ContentRight.ViewRightsData">
      <summary vsli:raw="The user can decrypt and view the rights specified in the signed &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt;.">用户可以对已签名的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 中指定的权限进行解密并查看这些权限。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.ContentUser">
      <summary vsli:raw="Represents a user or user-group for granting access to rights managed content.">表示要为其授予权限管理内容访问权限的用户或用户组。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; class.">初始化 <see cref="T:System.Security.RightsManagement.ContentUser" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The user or group name.">用户或用户组名称。</param>
      <param name="authenticationType" vsli:raw="The method for authentication.">身份验证的方法。</param>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.Equals(System.Object)">
      <summary vsli:raw="Returns a value that indicates whether this &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; is equivalent to another given instance.">返回一个值，该值指示此 <see cref="T:System.Security.RightsManagement.ContentUser" /> 是否与另一个给定实例等效。</summary>
      <param name="obj" vsli:raw="The user instance to compare for equality.">要比较是否等效的用户实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;see cref=&quot;P:System.Security.RightsManagement.ContentUser.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.ContentUser.AuthenticationType&quot; /&gt; are the same for both this user and the given user; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> 和 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> 对于此用户和给定用户是相同的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.GetHashCode">
      <summary vsli:raw="Returns a computed hash code based on the user &lt;see cref=&quot;P:System.Security.RightsManagement.ContentUser.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.ContentUser.AuthenticationType&quot; /&gt;.">返回基于用户 <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> 和 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> 计算出的哈希代码。</summary>
      <returns vsli:raw="A hash code computed from the user &lt;see cref=&quot;P:System.Security.RightsManagement.ContentUser.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.ContentUser.AuthenticationType&quot; /&gt;.">基于用户 <see cref="P:System.Security.RightsManagement.ContentUser.Name" /> 和 <see cref="P:System.Security.RightsManagement.ContentUser.AuthenticationType" /> 计算出的哈希代码。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.ContentUser.IsAuthenticated">
      <summary vsli:raw="Returns a value that indicates whether the user is currently authenticated.">返回一个值，该值指示当前是否已验证用户的身份。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the user is currently authenticated; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  The default is &lt;see langword=&quot;false&quot; /&gt; until authenticated.">如果当前已验证用户的身份，则为 <see langword="true" />；否则为 <see langword="false" />。  在进行身份验证之前，默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AnyoneUser">
      <summary vsli:raw="Gets an instance of the &quot;Anyone&quot; &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; persona.">获取“Anyone”<see cref="T:System.Security.RightsManagement.ContentUser" /> 角色的实例。</summary>
      <returns vsli:raw="An instance of the &quot;Anyone&quot; &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; persona.">“Anyone”<see cref="T:System.Security.RightsManagement.ContentUser" /> 角色的一个实例。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.AuthenticationType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Security.RightsManagement.AuthenticationType&quot; /&gt; specified to the &lt;see cref=&quot;M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)&quot; /&gt; constructor.">获取为 <see cref="T:System.Security.RightsManagement.AuthenticationType" /> 构造函数指定的 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Security.RightsManagement.AuthenticationType&quot; /&gt; specified to the &lt;see cref=&quot;M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)&quot; /&gt; constructor.">为 <see cref="T:System.Security.RightsManagement.AuthenticationType" /> 构造函数指定的 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" />。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.Name">
      <summary vsli:raw="Gets the user or group name specified to the &lt;see cref=&quot;M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)&quot; /&gt; constructor.">获取为 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> 构造函数指定的用户或用户组名称。</summary>
      <returns vsli:raw="The user or group name specified to the &lt;see cref=&quot;M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)&quot; /&gt; constructor.">为 <see cref="M:System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)" /> 构造函数指定的用户或用户组名称。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.ContentUser.OwnerUser">
      <summary vsli:raw="Gets an instance of the &quot;Owner&quot; &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; persona.">获取“Owner”<see cref="T:System.Security.RightsManagement.ContentUser" /> 角色的实例。</summary>
      <returns vsli:raw="An instance of the &quot;Owner&quot; &lt;see cref=&quot;T:System.Security.RightsManagement.ContentUser&quot; /&gt; persona.">“Owner”<see cref="T:System.Security.RightsManagement.ContentUser" /> 角色的一个实例。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.CryptoProvider">
      <summary vsli:raw="Provides digital rights management services for encrypting and decrypting protected content.">为加密和解密受保护的内容提供数字权限管理服务。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])">
      <summary vsli:raw="Decrypts cipher text to clear text.">将密码文本解密为明文。</summary>
      <param name="cryptoText" vsli:raw="The cipher text to decrypt.">要解密的密码文本。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;cipherText&quot; /&gt; is null.">
        <paramref name="cipherText" /> 为 null。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException" vsli:raw="Decryption right not granted.">未授予解密权限。</exception>
      <returns vsli:raw="The decrypted clear text of &lt;paramref name=&quot;cryptoText&quot; /&gt;.">
        <paramref name="cryptoText" /> 的解密明文。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Security.RightsManagement.CryptoProvider&quot; /&gt;.">释放由 <see cref="T:System.Security.RightsManagement.CryptoProvider" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Security.RightsManagement.CryptoProvider&quot; /&gt; and optionally releases the managed resources.">释放由 <see cref="T:System.Security.RightsManagement.CryptoProvider" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])">
      <summary vsli:raw="Encrypts clear text to cipher text.">将明文加密为密文。</summary>
      <param name="clearText" vsli:raw="The clear text content to encrypt.">要加密的明文内容。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;clearText&quot; /&gt; is null.">
        <paramref name="clearText" /> 为 null。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException" vsli:raw="Encryption is not permitted.">不允许加密。</exception>
      <returns vsli:raw="Encrypted cipher text of the given &lt;paramref name=&quot;clearText&quot; /&gt;.">指定 <paramref name="clearText" /> 的已加密密文。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.CryptoProvider.Finalize">
      <summary vsli:raw="Frees resources and performs internal cleanup before the instance is reclaimed by garbage collection.">在通过垃圾回收将实例回收之前，释放资源并执行内部清理。</summary>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BlockSize">
      <summary vsli:raw="Gets the cipher block size, in bytes.">获取密码块大小（以字节为单位）。</summary>
      <returns vsli:raw="The cipher block size, in bytes.  The default block size for Advanced Encryption Standard (AES) is 8.">密码块大小（以字节为单位）。  高级加密标准 (AES) 的默认块大小为8。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.BoundGrants">
      <summary vsli:raw="Gets a collection listing the rights that passed verification and that are granted to the user.">获取一个集合，该集合列出已通过验证并授予用户的权限。</summary>
      <returns vsli:raw="A collection enumerating the rights that passed verification and that are granted to the user.">一个集合，枚举已通过验证并向用户授予的权限。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanDecrypt">
      <summary vsli:raw="Gets a value that indicates whether the user has rights to decrypt.">获取一个指示用户是否有解密权限的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; grants the user rights to decrypt; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果 <see cref="T:System.Security.RightsManagement.UseLicense" /> 授予用户要解密的权限，则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanEncrypt">
      <summary vsli:raw="Gets a value that indicates whether the user has rights to encrypt.">获取一个指示用户是否有加密权限的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; grants the user rights to encrypt; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果 <see cref="T:System.Security.RightsManagement.UseLicense" /> 授予用户加密的权限，则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.CryptoProvider.CanMergeBlocks">
      <summary vsli:raw="Gets a value that indicates whether &lt;see cref=&quot;M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])&quot; /&gt; and &lt;see cref=&quot;M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])&quot; /&gt; can accept buffers that are different block sizes in length.">获取一个值，该值指示 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> 和 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> 是否可以接受块长度不同的缓冲区。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the buffer passed to &lt;see cref=&quot;M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])&quot; /&gt; can be a different length from the buffer passed to &lt;see cref=&quot;M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt; if the buffers passed to &lt;see cref=&quot;M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])&quot; /&gt; and &lt;see cref=&quot;M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])&quot; /&gt; must be the exact same length.  For AES the default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 如果传递到的缓冲区 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> 可以与传递到的缓冲区的长度不同 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> ，则为; 否则， <see langword="false" /> 如果传递到 <see cref="M:System.Security.RightsManagement.CryptoProvider.Encrypt(System.Byte[])" /> 和 <see cref="M:System.Security.RightsManagement.CryptoProvider.Decrypt(System.Byte[])" /> 的缓冲区的长度必须完全相同，则为。  对于 AES，默认值为 <see langword="true" /> 。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.LocalizedNameDescriptionPair">
      <summary vsli:raw="Represents an immutable (read-only) pair of &quot;Name&quot; and &quot;Description&quot; strings.">表示“Name”和“Description”字符串的不可变（只读）对。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.#ctor(System.String,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.LocalizedNameDescriptionPair&quot; /&gt; class.">初始化 <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> 类的新实例。</summary>
      <param name="name" vsli:raw="The value for the locale &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name&quot; /&gt; property.">区域设置 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 属性的值。</param>
      <param name="description" vsli:raw="The value for the locale &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description&quot; /&gt; property.">区域设置 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性的值。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="Either the &lt;paramref name=&quot;name&quot; /&gt; parameter or &lt;paramref name=&quot;description&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 参数或 <paramref name="description" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description&quot; /&gt; properties of a given object match those of this &lt;see cref=&quot;T:System.Security.RightsManagement.LocalizedNameDescriptionPair&quot; /&gt;.">指示给定对象的 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性是否与此 <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> 的相应属性匹配。</summary>
      <param name="obj" vsli:raw="The object to compare the &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description&quot; /&gt; properties of.">用于比较 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description&quot; /&gt; properties of the given object match those of this instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果给定对象的 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性与此实例的相应属性匹配，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.LocalizedNameDescriptionPair.GetHashCode">
      <summary vsli:raw="Gets a computed hash code based on the &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description&quot; /&gt; properties.">获取基于 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性计算所得的哈希代码。</summary>
      <returns vsli:raw="A computed hash code based on the &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name&quot; /&gt; and &lt;see cref=&quot;P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description&quot; /&gt; properties of this &lt;see cref=&quot;T:System.Security.RightsManagement.LocalizedNameDescriptionPair&quot; /&gt;.">基于此 <see cref="T:System.Security.RightsManagement.LocalizedNameDescriptionPair" /> 的 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name" /> 和 <see cref="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description" /> 属性计算所得的哈希代码。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Description">
      <summary vsli:raw="Gets the locale description.">获取区域设置说明。</summary>
      <returns vsli:raw="The locale description.">区域设置说明。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.LocalizedNameDescriptionPair.Name">
      <summary vsli:raw="Gets the locale name.">获取区域设置名称。</summary>
      <returns vsli:raw="The locale name.">区域设置名称。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.PublishLicense">
      <summary vsli:raw="Represents a signed rights managed publish license.">表示已签名的权限管理发布许可证。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; class from a specified serialized and signed &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt;.">从指定的已签名并序列化的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 初始化 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 类的新实例。</summary>
      <param name="signedPublishLicense" vsli:raw="A signed and serialized publish license.">已签名并序列化的发布许可证。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;signedPublishLicense&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="signedPublishLicense" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException" vsli:raw="The license is invalid.">该许可证无效。</exception>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)">
      <summary vsli:raw="Attempts to acquire a &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for a user or user group in a specified &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt;.">尝试为指定 <see cref="T:System.Security.RightsManagement.UseLicense" /> 中的用户或用户组获取 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />。</summary>
      <param name="secureEnvironment" vsli:raw="The secure environment for license activation and binding.">用于激活和绑定许可证的安全环境。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;secureEnvironment&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="secureEnvironment" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException" vsli:raw="The authentication failed.">身份验证失败。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for a user or user group in the specified &lt;paramref name=&quot;secureEnvironment&quot; /&gt;.">指定 <paramref name="secureEnvironment" /> 中的用户或用户组的 <see cref="T:System.Security.RightsManagement.UseLicense" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)">
      <summary vsli:raw="Attempts to acquire a &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for a user or user group in a specified &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt;.">尝试为指定 <see cref="T:System.Security.RightsManagement.UseLicense" /> 中的用户或用户组获取 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />。</summary>
      <param name="secureEnvironment" vsli:raw="The secure environment for license activation and binding.">用于激活和绑定许可证的安全环境。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;secureEnvironment&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="secureEnvironment" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException" vsli:raw="The authentication failed.">身份验证失败。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for a user or user group in the specified &lt;paramref name=&quot;secureEnvironment&quot; /&gt;.">指定 <paramref name="secureEnvironment" /> 中的用户或用户组的 <see cref="T:System.Security.RightsManagement.UseLicense" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)">
      <summary vsli:raw="Returns a decrypted &lt;see cref=&quot;T:System.Security.RightsManagement.UnsignedPublishLicense&quot; /&gt; version of this signed &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt;.">返回已签名的此 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 解密版本。</summary>
      <param name="cryptoProvider" vsli:raw="The rights management service to use for decrypting the license.">用于对该许可证进行解密的权限管理服务。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;cryptoProvider&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="cryptoProvider" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="A decrypted, unsigned version of this license.">此许可证的未签名的解密版本。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.PublishLicense.ToString">
      <summary vsli:raw="Returns the serialized XrML string that was used to create this license.">返回用于创建此许可证的序列化 XrML 字符串。</summary>
      <returns vsli:raw="The serialized Extensible Rights Markup Language (XrML) string that was used to create this license.">用于创建此许可证的序列化 可扩展权限标记语言 (XrML) 字符串。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ContentId">
      <summary vsli:raw="Gets the publisher-created content identifier.">获取发布者创建的内容标识符。</summary>
      <returns vsli:raw="The publisher-created content identifier.">发布者创建的内容标识符。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoName">
      <summary vsli:raw="Gets the contact name for the author or publisher of the content.">获取内容作者或发布者的联系人名称。</summary>
      <returns vsli:raw="The contact name for the author or publisher of the content.">内容作者或发布者的联系人名称。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.ReferralInfoUri">
      <summary vsli:raw="Gets the contact URI for the author or publisher of the content.">获取内容作者或发布者的联系人 URI。</summary>
      <returns vsli:raw="The contact uniform resource identifier (URI) for the author or publisher of the content.">联系人统一资源标识符 (内容作者或发布者的 URI) 。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl">
      <summary vsli:raw="Gets the URI to use for acquiring a &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt;.">获取用于获得 <see cref="T:System.Security.RightsManagement.UseLicense" /> 的 URI。</summary>
      <returns vsli:raw="The URI to use for acquiring a &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt;.">用于获取的 URI <see cref="T:System.Security.RightsManagement.UseLicense" /> 。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementException">
      <summary vsli:raw="Represents an error condition when a rights management operation cannot complete successfully.">表示权限管理操作无法成功完成时的错误条件。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class.">初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class and sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; store with information about the exception.">初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类的新实例并使用与异常有关的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储区。</summary>
      <param name="info" vsli:raw="The object that holds the serialized data.">包含序列化数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class with a given &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementFailureCode&quot; /&gt;.">用给定的 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 初始化 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> 类的新实例。</summary>
      <param name="failureCode" vsli:raw="The failure code for the error.">错误的失败代码。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class with a given &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementFailureCode&quot; /&gt; and &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt;.">使用给定的 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 和 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> 初始化 <see cref="P:System.Exception.InnerException" /> 类的新实例。</summary>
      <param name="failureCode" vsli:raw="The failure code for the error.">错误的失败代码。</param>
      <param name="innerException" vsli:raw="The exception instance that caused the error.">导致错误的异常实例。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class with a given &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementFailureCode&quot; /&gt; and &lt;see cref=&quot;P:System.Exception.Message&quot; /&gt;.">使用给定的 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 和 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> 初始化 <see cref="P:System.Exception.Message" /> 类的新实例。</summary>
      <param name="failureCode" vsli:raw="The failure code for the error.">错误的失败代码。</param>
      <param name="message" vsli:raw="A message that describes the error.">描述错误的消息。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.Security.RightsManagement.RightsManagementFailureCode,System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class with a given &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementFailureCode&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.Message&quot; /&gt; and &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt;.">使用给定的 <see cref="T:System.Security.RightsManagement.RightsManagementException" />，<see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" /> 和 <see cref="P:System.Exception.Message" /> 初始化 <see cref="P:System.Exception.InnerException" /> 类的新实例。</summary>
      <param name="failureCode" vsli:raw="The failure code for the error.">错误的失败代码。</param>
      <param name="message" vsli:raw="A message that describes the error.">描述错误的消息。</param>
      <param name="innerException" vsli:raw="The exception instance that caused the error.">导致错误的异常实例。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class with a given message.">使用给定消息初始化 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="A message that describes the error.">描述错误的消息。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementException&quot; /&gt; class with a given &lt;see cref=&quot;P:System.Exception.Message&quot; /&gt; and &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt;.">使用给定的 <see cref="T:System.Security.RightsManagement.RightsManagementException" /> 和 <see cref="P:System.Exception.Message" /> 初始化 <see cref="P:System.Exception.InnerException" /> 类的新实例。</summary>
      <param name="message" vsli:raw="A message that describes the error.">描述错误的消息。</param>
      <param name="innerException" vsli:raw="The exception instance that caused this exception.">导致此异常的异常实例。</param>
    </member>
    <member name="M:System.Security.RightsManagement.RightsManagementException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Sets the &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; store with the parameter name and information about the exception.">使用参数名和与异常有关的信息设置 <see cref="T:System.Runtime.Serialization.SerializationInfo" /> 存储区。</summary>
      <param name="info" vsli:raw="The object that holds the serialized data.">包含序列化数据的对象。</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">关于来源和目标的上下文信息</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;info&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> 参数为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.RightsManagementException.FailureCode">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Security.RightsManagement.RightsManagementFailureCode&quot; /&gt; for the error.">获取错误的 <see cref="T:System.Security.RightsManagement.RightsManagementFailureCode" />。</summary>
      <returns vsli:raw="The failure code for the error.">错误的失败代码。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.RightsManagementFailureCode">
      <summary vsli:raw="Specifies error conditions that can occur when performing a rights management operation.">指定执行权限管理操作时可能出现的错误条件。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Aborted">
      <summary vsli:raw="Asynchronous operation canceled, or a non-recoverable error has occurred.">已取消异步操作，或出现不可恢复的错误。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ActivationFailed">
      <summary vsli:raw="License activation failed; rights management services are not properly configured.">许可证激活失败；未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AdEntryNotFound">
      <summary vsli:raw="The current user was not found in the Active Directory (AD) for certification under Windows authentication.">未在 Windows 身份验证下证书的 Active Directory (AD) 中找到当前用户。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AlreadyInProgress">
      <summary vsli:raw="The requested operation is already in progress.">请求的操作已在进行中。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.AuthenticationFailed">
      <summary vsli:raw="Possible authentication error (HTTP error 401) returned by an Internet request. Or, the current user does not have valid domain credentials in a silent user activation attempt. Or, the certification server in silent user activation is not in the local intranet or trusted sites zone.">Internet 请求返回可能的身份验证错误（HTTP 错误 401）。 或者，当前用户在无提示用户激活尝试中没有有效的域凭据。 或者，无提示用户激活中的认证服务器不在本地 Intranet 或受信任的站点区域中。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BadGetInfoQuery">
      <summary vsli:raw="An invalid constant was passed.">传递了一个无效常量。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessPrincipalNotEnabling">
      <summary vsli:raw="The access condition is not matched to the enabling principal that is handed into the bind.">访问条件与递交给该绑定的启用主体不匹配。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindAccessUnsatisfied">
      <summary vsli:raw="The current user does not satisfy the conditions defined in the End Use License (EUL).">当前用户不满足在最终用户许可证 (EUL) 中所定义的条件。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindContentNotInEndUseLicense">
      <summary vsli:raw="The specified resource is not contained in any WORK node of the license.">指定的资源不包含在许可证的任何工作节点中。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIndicatedPrincipalMissing">
      <summary vsli:raw="The enabling principal does not match the issued principal of the End Use License (EUL).">启用主体与最终用户许可证 (EUL) 的颁布主体不匹配。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindIntervalTimeViolated">
      <summary vsli:raw="The defined time period for the protected content has expired; access is no longer permitted.">受保护内容的定义时间段已到期；不再允许访问。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindMachineNotFoundInGroupIdentity">
      <summary vsli:raw="The current machine is not defined within the rights managed group identity.">当前计算机未在权限管理组标识中定义。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoApplicableRevocationList">
      <summary vsli:raw="The current user does not have rights to access the protected content.">当前用户没有权限访问受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindNoSatisfiedRightsGroup">
      <summary vsli:raw="The specified rights group is not contained in the End Use License (EUL).">指定的权限组不包含在最终用户许可证 (EUL) 中。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindPolicyViolation">
      <summary vsli:raw="The current user does not have rights to access the protected content.">当前用户没有权限访问受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevocationListStale">
      <summary vsli:raw="The license requires that a new revocation list must be acquired.">该许可证要求必须获取新的吊销列表。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedIssuer">
      <summary vsli:raw="The current user does not have rights to access the protected content.">当前用户没有权限访问受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedLicense">
      <summary vsli:raw="The current user does not have rights to access the protected content.">当前用户没有权限访问受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedModule">
      <summary vsli:raw="Rights management services are not properly configured.">未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedPrincipal">
      <summary vsli:raw="The current user does not have rights to access the protected content.">当前用户没有权限访问受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindRevokedResource">
      <summary vsli:raw="The current user does not have rights to access the protected content.">当前用户没有权限访问受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindSpecifiedWorkMissing">
      <summary vsli:raw="The End Use License (EUL) contains no WORK node.">最终用户许可证 (EUL) 不包含工作节点。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BindValidityTimeViolated">
      <summary vsli:raw="The defined time period for the protected content has expired; access is no longer permitted.">受保护内容的定义时间段已到期；不再允许访问。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.BrokenCertChain">
      <summary vsli:raw="The rights management certificate chain is broken.">权限管理的证书链已中断。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ClockRollbackDetected">
      <summary vsli:raw="Clock rollback has been detected. Protected content cannot be accessed.">检测到时钟回滚。 无法访问受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.CryptoOperationUnsupported">
      <summary vsli:raw="A cryptographic operation that was requested is not supported. For example, passing an RMS encrypting object for decrypting purposes.">请求的加密操作不受支持。 例如，传递 RMS 加密对象用于解密。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.DebuggerDetected">
      <summary vsli:raw="Cannot open or publish content with restricted permissions because a debugger has been detected.">由于检测到调试器，因此无法使用受限权限打开或发布内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EmailNotVerified">
      <summary vsli:raw="The user's email address cannot be verified.">无法验证用户的电子邮件地址。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnablingPrincipalFailure">
      <summary vsli:raw="The specified principal cannot be enabled.">无法启用指定的主体。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EncryptionNotPermitted">
      <summary vsli:raw="Encryption is not permitted.">不允许加密。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentCannotLoad">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; cannot load.">无法加载 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.EnvironmentNotLoaded">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; cannot load.">无法加载 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ExpiredOfficialIssuanceLicenseTemplate">
      <summary vsli:raw="The authorized time period defined in the issuance license template has expired; access is no longer permitted.">在发行许可证模板中定义的授权时间段已到期；不再允许访问。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GlobalOptionAlreadySet">
      <summary vsli:raw="The option specified has already been set.">已设置指定的选项。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.GroupIdentityNotSet">
      <summary vsli:raw="A user name was not specified for the client session.">未向客户端会话指定用户名。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidCorrupted">
      <summary vsli:raw="The Hardware ID (HID) used in a machine activation attempt is incorrectly formatted. Rights management services are not properly configured.">在计算机激活尝试中使用的硬件 ID (HID) 的格式不正确。 未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.HidInvalid">
      <summary vsli:raw="The Hardware ID (HID) used in a machine activation attempt is invalid. Rights management services are not properly configured.">在计算机激活尝试中使用的硬件 ID (HID) 无效。 未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IdMismatch">
      <summary vsli:raw="The content ID from the license does not match the content ID the license storage session.">许可证中的内容 ID 与许可证存储会话的内容 ID 不匹配。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.IncompatibleObjects">
      <summary vsli:raw="An object type passed is incompatible with this operation.">传递的对象类型与此操作不兼容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotInLicense">
      <summary vsli:raw="When creating a bound license, an issuance license, not an end-use license, was specified.">创建绑定许可证时，指定发行许可证，而不是最终用户许可证。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InfoNotPresent">
      <summary vsli:raw="Some information is missing.">丢失了某些信息。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InstallationFailed">
      <summary vsli:raw="An installation operation failed.">安装操作失败。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidAlgorithmType">
      <summary vsli:raw="The algorithm type specified is invalid.">指定的算法类型无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidClientLicensorCertificate">
      <summary vsli:raw="Rights management services are not properly configured.">未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEmail">
      <summary vsli:raw="RMS Server email address verification failed.">RMS 服务器的电子邮件地址验证失败。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidEncodingType">
      <summary vsli:raw="The specified encoding type is invalid.">指定的编码类型无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidHandle">
      <summary vsli:raw="Either the environment or the enabling principal handle is invalid.">环境或启用主体句柄无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidIssuanceLicenseTemplate">
      <summary vsli:raw="The Rights Management Services template contains one or more errors.">权限管理服务模板包含一个或多个错误。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidKeyLength">
      <summary vsli:raw="The key length specified in a key/value pair is invalid.">在键/值对中指定的键长度无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicense">
      <summary vsli:raw="The license structure in one of the certificates is invalid.">其中一个证书的许可证结构无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLicenseSignature">
      <summary vsli:raw="Rights management signed digital certificate cannot be validated. (The signed certificate may have been tampered.)">无法验证权限管理签名的数字证书。 （已签名证书可能已遭到篡改。）</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxPath">
      <summary vsli:raw="Rights management services are not properly configured.">未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidLockboxType">
      <summary vsli:raw="Rights management services are not properly configured.">未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidNumericalValue">
      <summary vsli:raw="The numeric value specified is invalid.">指定的数值无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidRegistryPath">
      <summary vsli:raw="The specified registry path is invalid.">指定的注册表路径无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidServerResponse">
      <summary vsli:raw="Rights management services are not properly configured.">未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidTimeInfo">
      <summary vsli:raw="The time information specified is invalid.">指定的时间信息无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.InvalidVersion">
      <summary vsli:raw="The rights management version is incorrect.">权限管理版本不正确。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.KeyTypeUnsupported">
      <summary vsli:raw="The key type specified in a key/value pair is not supported.">在键/值对中指定的键类型不受支持。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryFail">
      <summary vsli:raw="A library operation failed.">库操作失败。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LibraryUnsupportedPlugIn">
      <summary vsli:raw="The specified library plug-in is not supported.">不支持指定的库插件。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseAcquisitionFailed">
      <summary vsli:raw="An End Use License (EUL) could not be acquired from the rights management server.">无法从权限管理服务器获取最终用户许可证 (EUL)。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.LicenseBindingToWindowsIdentityFailed">
      <summary vsli:raw="The current user credentials are not valid for acquiring a license.">当前用户凭据对于获取许可证无效。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ManifestPolicyViolation">
      <summary vsli:raw="An operation is in violation of the rights management manifest policy.">操作违反权限管理清单策略。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.MetadataNotSet">
      <summary vsli:raw="The specified metadata could net be set.">无法设置指定元数据。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsGroupIdentityActivation">
      <summary vsli:raw="The user is not activated, or no Rights Account Certificate (RAC) was submitted and none was found in the license store to match the license associated with this session.">未激活用户，或者未提交任何权限帐户证书 (RAC)，并且未在许可证存储中找到匹配此会话所关联许可证的证书。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NeedsMachineActivation">
      <summary vsli:raw="The computer must be activated before the user can be activated.">必须先激活计算机，才能激活用户。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoAesCryptoProvider">
      <summary vsli:raw="Rights management services are not properly configured.">未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoConnect">
      <summary vsli:raw="Rights management cannot connect to the URI specified for the license server.">权限管理无法连接到为许可证服务器指定的 URI。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoDistributionPointUrlFound">
      <summary vsli:raw="The protected content is corrupted.">受保护的内容已损坏。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoLicense">
      <summary vsli:raw="A required license is not available.">所需许可证不可用。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NoMoreData">
      <summary vsli:raw="No license or certificate exists at the specified index.">指定索引处不存在许可证或证书。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotAChain">
      <summary vsli:raw="Rights managed content is corrupted.">权限管理的内容已损坏。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.NotSet">
      <summary vsli:raw="The item requested to delete does not exist.">请求删除的项目不存在。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutdatedModule">
      <summary vsli:raw="Rights management services are not properly configured.">未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OutOfQuota">
      <summary vsli:raw="The license server's maximum quota of End Use Licenses (EULs) has been reached.">已达到最终用户许可证 (EUL) 的许可证服务器的最大配额。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.OwnerLicenseNotFound">
      <summary vsli:raw="The document does not contain an Owner License.">该文档不包含所有者许可证。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.QueryReportsNoResults">
      <summary vsli:raw="No instances of the requested attribute exist.">请求的属性不存在实例。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RecordNotFound">
      <summary vsli:raw="The specified license was not found.">未找到指定许可证。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RequestDenied">
      <summary vsli:raw="The Rights Management server does not allow temporary certification of the current user.">权限管理服务器不允许当前用户的临时证书。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RevocationInfoNotSet">
      <summary vsli:raw="Certificate or license revocation information has not been set.">尚未设置证书或许可证吊销信息。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotGranted">
      <summary vsli:raw="The current user does not have rights to access the protected content.">当前用户没有权限访问受保护的内容。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.RightNotSet">
      <summary vsli:raw="The requested right was not specified when the content was published with rights management.">使用权限管理发布内容时，未指定请求的权限。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerError">
      <summary vsli:raw="Rights management services are not properly configured.">未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServerNotFound">
      <summary vsli:raw="Rights management services are not properly configured.">未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceGone">
      <summary vsli:raw="Rights management services are not properly configured.">未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceMoved">
      <summary vsli:raw="Rights management services are not properly configured.">未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ServiceNotFound">
      <summary vsli:raw="Rights management services are not properly configured.">未正确配置权限管理服务。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.Success">
      <summary vsli:raw="Operation has competed successfully.">已成功完成操作。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyCertificates">
      <summary vsli:raw="The number of certificates has exceeded the maximum number allowed.">证书数量已超过允许的最大数量。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.TooManyLoadedEnvironments">
      <summary vsli:raw="Too many &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; instance have been created.">已创建太多 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 实例。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UnexpectedException">
      <summary vsli:raw="An unspecified error occurred.  Also thrown when an application runs in debug mode.">发生了未指定的错误。  在调试模式下运行应用程序时也会引发。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault">
      <summary vsli:raw="If a request is made for computer activation or a rights account certificate, receiving &lt;see cref=&quot;F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault&quot; /&gt; indicates that the application should pass &lt;see langword=&quot;null&quot; /&gt; into the ActServInfo parameter.">如果为计算机激活或权限帐户证书发出请求，接收 <see cref="F:System.Security.RightsManagement.RightsManagementFailureCode.UseDefault" /> 则表示该应用程序应将 <see langword="null" /> 传递到 ActServInfo 参数。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.RightsManagementFailureCode.ValidityTimeViolation">
      <summary vsli:raw="The defined time period for the protected content has expired; access is no longer permitted.">受保护内容的定义时间段已到期；不再允许访问。</summary>
    </member>
    <member name="T:System.Security.RightsManagement.SecureEnvironment">
      <summary vsli:raw="Represents a secure client session for user activation, license binding, and other rights management operations.">表示一个用于用户激活、许可证绑定和其他权限管理操作的安全客户端会话。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)">
      <summary vsli:raw="Creates a secure client session given an application rights manifest, &lt;see cref=&quot;T:System.Security.RightsManagement.AuthenticationType&quot; /&gt;, and &lt;see cref=&quot;T:System.Security.RightsManagement.UserActivationMode&quot; /&gt;.">创建给定了应用程序权限清单 <see cref="T:System.Security.RightsManagement.AuthenticationType" /> 和 <see cref="T:System.Security.RightsManagement.UserActivationMode" /> 的安全客户端会话。</summary>
      <param name="applicationManifest" vsli:raw="The application rights manifest.">应用程序权限清单。</param>
      <param name="authentication" vsli:raw="The method of authentication.">身份验证的方法。</param>
      <param name="userActivationMode" vsli:raw="The type of the user rights account certificate.">用户权限帐户证书的类型。</param>
      <returns vsli:raw="A secure client session for activation, license binding, and other rights management operations.">一个用于激活、许可证绑定和其他权限管理操作的安全客户端会话。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)">
      <summary vsli:raw="Creates a secure client session for a specified user with a given rights manifest.">使用给定权限清单为指定用户创建安全客户端会话。</summary>
      <param name="applicationManifest" vsli:raw="The application rights manifest.">应用程序权限清单。</param>
      <param name="user" vsli:raw="The user or user-group for granting access to rights managed content.">要为其授予权限管理内容访问权限的用户或用户组。</param>
      <returns vsli:raw="A secure client session for activation, license binding, and other rights management operations.">一个用于激活、许可证绑定和其他权限管理操作的安全客户端会话。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt;.">释放由 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 使用的所有资源。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; and optionally releases the managed resources.">释放由 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 占用的非托管资源，还可以另外再释放托管资源。</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">若要释放托管资源和非托管资源，则为 <see langword="true" />；若仅释放非托管资源，则为 <see langword="false" />。</param>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers">
      <summary vsli:raw="Returns a list of the activated users.">返回激活用户的列表。</summary>
      <returns vsli:raw="A list of the currently activated users.">当前激活用户的一个列表。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)">
      <summary vsli:raw="Indicates whether a given user has been activated for accessing rights managed content.">表示是否已激活访问权限管理内容的给定用户。</summary>
      <param name="user" vsli:raw="The user or user-group for granting access to rights managed content.">要为其授予权限管理内容访问权限的用户或用户组。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the given &lt;paramref name=&quot;user&quot; /&gt; has been activated for accessing rights managed content; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果已激活访问权限管理内容的给定 <paramref name="user" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)">
      <summary vsli:raw="Removes the license activation for a specified user.">删除指定用户的许可证激活。</summary>
      <param name="user" vsli:raw="The user to remove the license activation for.">要为其删除许可证激活的用户。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;user&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="user" /> 参数为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The given &lt;paramref name=&quot;user&quot; /&gt; is not authenticated with either Windows authentication or Passport authentication.">给定的 <paramref name="user" /> 既未经过 Windows 身份验证也未经过 Passport 身份验证的验证。</exception>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest">
      <summary vsli:raw="Gets the &lt;see cref=&quot;P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest&quot; /&gt; specified when the &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; was created.">获取创建 <see cref="P:System.Security.RightsManagement.SecureEnvironment.ApplicationManifest" /> 时指定的 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />。</summary>
      <returns vsli:raw="The application manifest specified to the &lt;see cref=&quot;Overload:System.Security.RightsManagement.SecureEnvironment.Create&quot; /&gt; method when the &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; is created.">创建 <see cref="Overload:System.Security.RightsManagement.SecureEnvironment.Create" /> 时为 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 方法指定的应用程序清单。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.SecureEnvironment.User">
      <summary vsli:raw="Gets the user or user-group specified when the &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; was created.">获取创建 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 时指定的用户或用户组。</summary>
      <returns vsli:raw="The user or user-group specified to the &lt;see cref=&quot;M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)&quot; /&gt; method when the &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt; was created.">创建 <see cref="M:System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)" /> 时为 <see cref="T:System.Security.RightsManagement.SecureEnvironment" /> 方法指定的用户或用户组。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UnsignedPublishLicense">
      <summary vsli:raw="Represents an unsigned rights managed &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; or an unsigned &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; template.">表示未签名的权限管理 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 或未签名的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 模板。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.UnsignedPublishLicense&quot; /&gt; class.">初始化 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.UnsignedPublishLicense&quot; /&gt; class from a specified XrML publish-license template.">从指定的 XrML 发布许可证模板初始化 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 类的新实例。</summary>
      <param name="publishLicenseTemplate" vsli:raw="The Extensible Rights Markup Language (XrML) publish-license template to use to create this license.">用于创建此许可证的 可扩展权限标记语言 (XrML) 发布许可证模板。</param>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.Sign(System.Security.RightsManagement.SecureEnvironment,System.Security.RightsManagement.UseLicense@)">
      <summary vsli:raw="Creates a signed &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; and returns a &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for the document author.">创建一个已签名的 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 并向文档作者返回 <see cref="T:System.Security.RightsManagement.UseLicense" />。</summary>
      <param name="secureEnvironment" vsli:raw="The secure environment for license activation and binding.">用于激活和绑定许可证的安全环境。</param>
      <param name="authorUseLicense" vsli:raw="A returned &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; for the document author.">向文档作者返回的 <see cref="T:System.Security.RightsManagement.UseLicense" />。</param>
      <returns vsli:raw="The signed &lt;see cref=&quot;T:System.Security.RightsManagement.PublishLicense&quot; /&gt; that is created by signing this &lt;see cref=&quot;T:System.Security.RightsManagement.UnsignedPublishLicense&quot; /&gt;.">通过对此 <see cref="T:System.Security.RightsManagement.PublishLicense" /> 进行签名而创建的已签名 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UnsignedPublishLicense.ToString">
      <summary vsli:raw="Returns a serialized template created from the XrML of the &lt;see cref=&quot;T:System.Security.RightsManagement.UnsignedPublishLicense&quot; /&gt;.">返回从 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 的 XrML 创建的序列化模板。</summary>
      <returns vsli:raw="A serialized template created from the XrML of the &lt;see cref=&quot;T:System.Security.RightsManagement.UnsignedPublishLicense&quot; /&gt;.">从 <see cref="T:System.Security.RightsManagement.UnsignedPublishLicense" /> 的 XrML 创建的序列化模板。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ContentId">
      <summary vsli:raw="Gets or sets the publisher-created content identifier.">获取或设置发布者创建的内容标识符。</summary>
      <returns vsli:raw="The publisher-created rights-managed content identifier.">发布者创建的权限管理内容标识符。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Grants">
      <summary vsli:raw="Gets a collection of assigned user rights.">获取一组已分配的用户权限。</summary>
      <returns vsli:raw="A collection of the assigned user rights that are provided in this license.">此许可证中提供的一组已分配的用户权限。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.LocalizedNameDescriptionDictionary">
      <summary vsli:raw="Gets a collection of name and description pairs.">获取一组名称和说明对。</summary>
      <returns vsli:raw="A collection of name and description pairs.">一组名称和说明对。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.Owner">
      <summary vsli:raw="Gets or sets the content owner.">获取或设置内容所有者。</summary>
      <returns vsli:raw="The user who owns the published content.">拥有已发布内容的用户。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoName">
      <summary vsli:raw="Gets or sets the contact name for the author or publisher of the content.">获取或设置内容作者或发布者的联系人名称。</summary>
      <returns vsli:raw="The contact name for the author or publisher of the content.">内容作者或发布者的联系人名称。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UnsignedPublishLicense.ReferralInfoUri">
      <summary vsli:raw="Gets or sets the contact URI for the author or publisher of the content.">获取或设置内容作者或发布者的联系人 URI。</summary>
      <returns vsli:raw="The contact uniform resource identifier (URI) for the author or publisher of the content.">联系人统一资源标识符 (内容作者或发布者的 URI) 。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UseLicense">
      <summary vsli:raw="Represents a license that enables access to protected rights managed content.">表示使用户可以访问受保护的权限管理内容的许可证。</summary>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.RightsManagement.UseLicense&quot; /&gt; class.">初始化 <see cref="T:System.Security.RightsManagement.UseLicense" /> 类的新实例。</summary>
      <param name="useLicense" vsli:raw="A use license in serialized Extensible Rights Markup Language (XrML) form.">一个采用序列化 可扩展权限标记语言 (XrML) 形式的使用许可证。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;useLicense&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="useLicense" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.Security.RightsManagement.RightsManagementException" vsli:raw="&lt;paramref name=&quot;useLicense&quot; /&gt; is invalid.">
        <paramref name="useLicense" /> 无效。</exception>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Bind(System.Security.RightsManagement.SecureEnvironment)">
      <summary vsli:raw="Binds the license to a given &lt;see cref=&quot;T:System.Security.RightsManagement.SecureEnvironment&quot; /&gt;.">将许可证绑定到给定的 <see cref="T:System.Security.RightsManagement.SecureEnvironment" />。</summary>
      <param name="secureEnvironment" vsli:raw="The environment to bind the license to.">要将许可证绑定到的环境。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;secureEnvironment&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="secureEnvironment" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Security.RightsManagement.CryptoProvider&quot; /&gt; instance if the license binding succeeded; otherwise, &lt;see langword=&quot;null&quot; /&gt;.">如果许可证绑定成功，则为 <see cref="T:System.Security.RightsManagement.CryptoProvider" /> 实例；否则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.Equals(System.Object)">
      <summary vsli:raw="Indicates if this license is equivalent to another given license.">指示此许可证是否与另一个给定许可证等效。</summary>
      <param name="x" vsli:raw="The license to compare.">要比较的许可证。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if both licenses are the equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个许可证等效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.GetHashCode">
      <summary vsli:raw="Returns the hash code associated with this license.">返回与此许可证关联的哈希代码。</summary>
      <returns vsli:raw="A hash code for this license.">此许可证的哈希代码。</returns>
    </member>
    <member name="M:System.Security.RightsManagement.UseLicense.ToString">
      <summary vsli:raw="Returns the serialized XrML string used to create this license.">返回用于创建此许可证的序列化 XrML 字符串。</summary>
      <returns vsli:raw="The serialized Extensible Rights Markup Language (XrML) string originally passed to the &lt;see cref=&quot;M:System.Security.RightsManagement.UseLicense.#ctor(System.String)&quot; /&gt; constructor.">最初传递给 <see cref="M:System.Security.RightsManagement.UseLicense.#ctor(System.String)" /> 构造函数的序列化 可扩展权限标记语言 (XrML) 字符串。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ApplicationData">
      <summary vsli:raw="Gets the application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.">获取应用程序数据字典，该字典包括从发布应用程序传递给使用应用程序的键/值对。</summary>
      <returns vsli:raw="The application data dictionary that contains key/value pairs passed from the publishing application to the consuming application.">应用程序数据字典，该字典包括从发布应用程序传递给使用应用程序的键/值对。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.ContentId">
      <summary vsli:raw="Gets the content identifier created by the publisher.">获取发布者创建的内容标识符。</summary>
      <returns vsli:raw="The content identifier created by the publisher.">发布者创建的内容标识符。</returns>
    </member>
    <member name="P:System.Security.RightsManagement.UseLicense.Owner">
      <summary vsli:raw="Gets the owner of the license.">获取许可证的所有者。</summary>
      <returns vsli:raw="The owner of the license.">许可证的所有者。</returns>
    </member>
    <member name="T:System.Security.RightsManagement.UserActivationMode">
      <summary vsli:raw="Specifies the type of user Rights Account Certificate to request for rights management activation.">指定用于请求激活权限管理的用户权限帐户证书的类型。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Permanent">
      <summary vsli:raw="A permanent Rights Account Certificate.">永久性权限帐户证书。</summary>
    </member>
    <member name="F:System.Security.RightsManagement.UserActivationMode.Temporary">
      <summary vsli:raw="A temporary Rights Account Certificate.">临时性权限帐户证书。</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableAttribute">
      <summary vsli:raw="Provides a base class for .NET attributes that report the use scope of attached properties.">为报告附加属性使用范围的 .NET Framework 特性提供基类。</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.AttachedPropertyBrowsableAttribute" /> 类的新实例。</summary>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute">
      <summary vsli:raw="Specifies that an attached property is browsable only for elements that derive from a specified type.">指定附加属性只能供从指定类型派生的元素浏览。</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt; class, using the provided &lt;paramref name=&quot;targetType&quot; /&gt;.">使用提供的 <paramref name="targetType" /> 初始化 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> 类的一个新实例。</summary>
      <param name="targetType" vsli:raw="The intended type that scopes the use of the attached property where this .NET Framework attribute applies.">确定此 .NET Framework 特性 所应用附加属性使用范围的预期类型。</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt; .NET Framework attribute is equal to a specified object.">确定当前的是否与 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework 特性 指定的对象相等。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt; to compare to the current &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt;.">要与当前 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> 进行比较的 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />，则为 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableForTypeAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt; .NET Framework attribute.">返回此 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework 特性 的哈希代码。</summary>
      <returns vsli:raw="An unsigned 32-bit integer value.">32 位无符号整数值。</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TargetType">
      <summary vsli:raw="Gets the base type that scopes the use of the attached property where this .NET Framework attribute applies.">获取基类型，该类型设定此 .NET Framework 特性 应用的附加属性的使用范围。</summary>
      <returns vsli:raw="The requested &lt;see cref=&quot;T:System.Type&quot; /&gt;.">请求的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableForTypeAttribute.TypeId">
      <summary vsli:raw="Gets a unique type identifier for this &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt; .NET Framework attribute.">获取此的唯一类型标识符 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> .NET Framework 特性 。</summary>
      <returns vsli:raw="An object that is a unique identifier for the &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableForTypeAttribute&quot; /&gt;.">一个对象，表示 <see cref="T:System.Windows.AttachedPropertyBrowsableForTypeAttribute" /> 的唯一标识符。</returns>
    </member>
    <member name="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute">
      <summary vsli:raw="Specifies that an attached property is only browsable on an element that also has another specific .NET attribute applied to its class definition.">指定附加属性仅在一个元素上可浏览，该元素还具有另一个特定 .NET Framework 特性应用到其类定义。</summary>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> 类的新实例。</summary>
      <param name="attributeType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the  .NET Framework attribute that must also be applied on a class in order for the attached property to be browsable on the class where &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt; is applied.">为了在应用 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> 的类上浏览附加属性，必须还对该类应用 .NET Framework 特性 的 <see cref="T:System.Type" />。</param>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.Equals(System.Object)">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt; .NET Framework attribute is equal to a specified object.">确定当前的是否与 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework 特性 指定的对象相等。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt; to compare to the current &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt;.">要与当前 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> 进行比较的 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />，则为 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute&quot; /&gt; .NET Framework attribute.">返回此 <see cref="T:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute" /> .NET Framework 特性 的哈希代码。</summary>
      <returns vsli:raw="An unsigned 32-bit integer value.">32 位无符号整数值。</returns>
    </member>
    <member name="P:System.Windows.AttachedPropertyBrowsableWhenAttributePresentAttribute.AttributeType">
      <summary vsli:raw="Gets the type of the  .NET Framework attribute that must also be applied on a class.">获取必须同时应用在类上的 .NET Framework 特性 的类型。</summary>
      <returns vsli:raw="The  .NET Framework attribute type.">.NET Framework 特性类型。</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences">
      <summary vsli:raw="Contains properties that specify how an application should behave relative to new WPF features that are in the WindowsBase assembly.">包含指定应用程序相对于新的 WPF 功能（在 WindowsBase 程序集中）应如何运行的属性。</summary>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.FlowDispatcherSynchronizationContextPriority">
      <summary vsli:raw="Gets or sets a value that indicates whether information about the &lt;see cref=&quot;P:System.Windows.Threading.DispatcherOperation.Priority&quot; /&gt; is saved to the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt;.">获取或设置一个指示信息是否有关 <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> 保存为 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if information about the &lt;see cref=&quot;P:System.Windows.Threading.DispatcherOperation.Priority&quot; /&gt; is saved to the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> ，如果 <see cref="P:System.Windows.Threading.DispatcherOperation.Priority" /> 有关的信息保存到 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />；否则， <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailure">
      <summary vsli:raw="Defines how the dispatcher reacts to failures encountered when it requests processing.">定义调度程序如何应对请求处理时遇到的失败。</summary>
      <returns vsli:raw="A value that defines how the dispatcher reacts to failures.">定义调度程序如何应对失败的值。</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.InlineDispatcherSynchronizationContextSend">
      <summary vsli:raw="Gets or sets a value that indicates whether the &lt;see cref=&quot;M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)&quot; /&gt; method puts the delegates on the dispatcher queue or if the delegate is directly invoked.">获取或设置一个值，此值指示是 <see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" /> 方法将委托置于调度程序队列之上，还是直接调用委托。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)&quot; /&gt; method puts the delegates on the dispatcher queue or if the delegate is directly invoked; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />如果<see cref="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)" />方法将委托置于调度程序队列之上，还是直接调用委托，否则<see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.BaseCompatibilityPreferences.ReuseDispatcherSynchronizationContextInstance">
      <summary vsli:raw="Gets or sets a value that indicates whether a single &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt; is used for multiple dispatcher operations.">获取或设置一个值，该值指示单个 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 是否用于多个调度程序操作。</summary>
      <returns vsli:raw="true if a single &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt; is used for multiple dispatcher operations; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果单个 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 为多个计划程序操作，是真实的；否则 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions">
      <summary vsli:raw="Provides a set of values that describes how the dispatcher responds to failures that are encountered while requesting processing.">提供一组值，用于描述调度程序如何响应请求处理时遇到的失败。</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Continue">
      <summary vsli:raw="Continue after the failure.  &#xA;  &#xA; This is the default value. It defines the behavior of the Windows Presentation Foundation dispatcher prior to the .NET Framework 4.7.1. The dispatcher may become unresponsive when this option is selected.">失败后继续。  
  
 这是默认值。 它定义 .NET Framework 4.7.1 之前的 Windows Presentation Foundation 调度程序的行为。 如果选择此选项，调度程序可能无响应。</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Reset">
      <summary vsli:raw="Reset the dispatcher's state to try another request the next time one is needed.  &#xA;  &#xA; While this option can sometimes &quot;repair&quot; unresponsiveness, it cannot honor the usual timing of processing, which can be crucial. Selecting this option can lead to unexpected behavior.">重置调度程序的状态，在下次需要请求时尝试另一请求。  
  
 虽然此选项有时可以“修复”无响应，但它不会使用正常处理时间，而这个时间可能很重要。 选择此选项可能导致意外的行为。</summary>
    </member>
    <member name="F:System.Windows.BaseCompatibilityPreferences.HandleDispatcherRequestProcessingFailureOptions.Throw">
      <summary vsli:raw="Throw an exception.  &#xA;  &#xA; This option immediately brings the problem to the application developer's attention.">引发异常。  
  
 此选项可让应用程序开发人员立即注意到问题。</summary>
    </member>
    <member name="T:System.Windows.CoerceValueCallback">
      <summary vsli:raw="Provides a template for a method that is called whenever a dependency property value is being re-evaluated, or coercion is specifically requested.">为只要重新计算依赖项属性值或专门请求强制转换时就调用的方法提供一个模板。</summary>
      <param name="d" vsli:raw="The object that the property exists on. When the callback is invoked, the property system will pass this value.">该属性所在的对象。 在调用该回调时，属性系统将会传递该值。</param>
      <param name="baseValue" vsli:raw="The new value of the property, prior to any coercion attempt.">该属性在尝试执行任何强制转换之前的新值。</param>
      <returns vsli:raw="The coerced value (with appropriate type).">强制转换后的值（采用适当的类型）。</returns>
    </member>
    <member name="T:System.Windows.Converters.Int32RectValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">将 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Int32Rect" /> 的实例进行来回转换。</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Converters.Int32RectValueSerializer&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Converters.Int32RectValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">确定指定的 <see cref="T:System.String" /> 是否可转换为 <see cref="T:System.Windows.Int32Rect" /> 的实例。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">要进行计算以供转换的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">始终返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">确定指定的 <see cref="T:System.Windows.Int32Rect" /> 是否可以转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">要进行计算以供转换的对象。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Int32Rect" />。</summary>
      <param name="value" vsli:raw="The string to convert.">要转换的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">基于所提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Int32Rect" /> 新实例。</returns>
    </member>
    <member name="M:System.Windows.Converters.Int32RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">将 <see cref="T:System.Windows.Int32Rect" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to convert into a string.">要转换为字符串的对象。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A string representation of the specified &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">指定的 <see cref="T:System.Windows.Int32Rect" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.Windows.Converters.PointValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">将 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Point" /> 的实例进行来回转换。</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Converters.PointValueSerializer&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Converters.PointValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">确定指定的 <see cref="T:System.String" /> 是否可转换为 <see cref="T:System.Windows.Point" /> 的实例。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">要进行计算以供转换的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">始终返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">确定指定的 <see cref="T:System.Windows.Point" /> 是否可以转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">要进行计算以供转换的对象。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Point" />。</summary>
      <param name="value" vsli:raw="The string to convert.">要转换的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">基于所提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Point" /> 新实例。</returns>
    </member>
    <member name="M:System.Windows.Converters.PointValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">将 <see cref="T:System.Windows.Point" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to convert into a string.">要转换为字符串的对象。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A string representation of the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">指定的 <see cref="T:System.Windows.Point" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.Windows.Converters.RectValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">将 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Rect" /> 的实例进行来回转换。</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Converters.RectValueSerializer&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Converters.RectValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">确定指定的 <see cref="T:System.String" /> 是否可转换为 <see cref="T:System.Windows.Rect" /> 的实例。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">要进行计算以供转换的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">始终返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">确定指定的 <see cref="T:System.Windows.Rect" /> 是否可以转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">要进行计算以供转换的对象。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Rect" />。</summary>
      <param name="value" vsli:raw="The string to convert.">要转换的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">基于所提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Rect" /> 新实例。</returns>
    </member>
    <member name="M:System.Windows.Converters.RectValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">将 <see cref="T:System.Windows.Rect" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to convert into a string.">要转换为字符串的对象。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A string representation of the specified &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">指定的 <see cref="T:System.Windows.Rect" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.Windows.Converters.SizeValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">将 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Size" /> 的实例进行来回转换。</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Converters.SizeValueSerializer&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Converters.SizeValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">确定指定的 <see cref="T:System.String" /> 是否可转换为 <see cref="T:System.Windows.Size" /> 的实例。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">要进行计算以供转换的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">始终返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">确定指定的 <see cref="T:System.Windows.Size" /> 是否可以转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">要进行计算以供转换的对象。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Size" />。</summary>
      <param name="value" vsli:raw="The string to convert.">要转换的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">基于所提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Size" /> 新实例。</returns>
    </member>
    <member name="M:System.Windows.Converters.SizeValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">将 <see cref="T:System.Windows.Size" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to convert into a string.">要转换为字符串的对象。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A string representation of the specified &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">指定的 <see cref="T:System.Windows.Size" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.Windows.Converters.VectorValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">将 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Vector" /> 的实例进行来回转换。</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Converters.VectorValueSerializer&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Converters.VectorValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">确定指定的 <see cref="T:System.String" /> 是否可转换为 <see cref="T:System.Windows.Vector" /> 的实例。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">要进行计算以供转换的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">始终返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">确定指定的 <see cref="T:System.Windows.Vector" /> 是否可以转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to evaluate for conversion.">要进行计算以供转换的对象。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Vector" />。</summary>
      <param name="value" vsli:raw="The string to convert.">要转换的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">基于所提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Vector" /> 新实例。</returns>
    </member>
    <member name="M:System.Windows.Converters.VectorValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">将 <see cref="T:System.Windows.Vector" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The object to convert into a string.">要转换为字符串的对象。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A string representation of the specified &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">指定的 <see cref="T:System.Windows.Vector" /> 的字符串表示形式。</returns>
    </member>
    <member name="T:System.Windows.Data.DataSourceProvider">
      <summary vsli:raw="Common base class and contract for &lt;see cref=&quot;T:System.Windows.Data.DataSourceProvider&quot; /&gt; objects, which are factories that execute some queries to produce a single object or a list of objects that you can use as binding source objects.">
        <see cref="T:System.Windows.Data.DataSourceProvider" /> 对象的公共基类和协定，它们是执行某些查询以生成可以用作绑定源对象的单个对象或对象列表的工厂。</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.DataChanged">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;P:System.Windows.Data.DataSourceProvider.Data&quot; /&gt; property has a new value.">在 <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> 属性具有一个新值时发生。</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">在属性值更改时发生。</summary>
    </member>
    <member name="E:System.Windows.Data.DataSourceProvider.System#ComponentModel#INotifyPropertyChanged#PropertyChanged">
      <summary vsli:raw="Occurs when a property value changes.">在属性值更改时发生。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Data.DataSourceProvider&quot; /&gt; class. This is a protected constructor.">初始化 <see cref="T:System.Windows.Data.DataSourceProvider" /> 类的新实例。 这是一个受保护的构造函数。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginInit">
      <summary vsli:raw="Indicates that initialization of this object is about to begin; no implicit &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.Refresh&quot; /&gt; occurs until the matched &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.EndInit&quot; /&gt; method is called.">指示即将开始初始化此对象；在调用匹配的 <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" /> 方法前不要进行隐式 <see cref="M:System.Windows.Data.DataSourceProvider.EndInit" />。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.BeginQuery">
      <summary vsli:raw="When overridden in a derived class, this base class calls this method when &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.InitialLoad&quot; /&gt; or &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.Refresh&quot; /&gt; has been called. The base class delays the call if refresh is deferred or initial load is disabled.">在派生类中重写此基类时，如果已调用 <see cref="M:System.Windows.Data.DataSourceProvider.InitialLoad" /> 或 <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" />，那么此基类会调用此方法。 如果刷新发生延迟或已禁用初始加载，则基类会延迟调用。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.DeferRefresh">
      <summary vsli:raw="Enters a defer cycle that you can use to change properties of the provider and delay automatic refresh.">进入延迟循环，该循环可用于更改提供程序的属性并延迟自动刷新。</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IDisposable&quot; /&gt; object that you can use to dispose of the calling object.">一个可用于释放调用对象的 <see cref="T:System.IDisposable" /> 对象。</returns>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.EndInit">
      <summary vsli:raw="Indicates that the initialization of this object has completed; this causes a &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.Refresh&quot; /&gt; if no other &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.DeferRefresh&quot; /&gt; is outstanding.">表示此对象的初始化已完成；如果没有其他未完成的 <see cref="M:System.Windows.Data.DataSourceProvider.Refresh" />，则这会导致 <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" />。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.InitialLoad">
      <summary vsli:raw="Starts the initial query to the underlying data model. The result is returned on the &lt;see cref=&quot;P:System.Windows.Data.DataSourceProvider.Data&quot; /&gt; property.">启动对基础数据模型的初始查询。 结果返回到 <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> 属性。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Windows.Data.DataSourceProvider.PropertyChanged&quot; /&gt; event with the provided arguments.">通过提供的参数引发 <see cref="E:System.Windows.Data.DataSourceProvider.PropertyChanged" /> 事件。</summary>
      <param name="e" vsli:raw="Arguments of the event being raised.">要引发事件的自变量。</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object)">
      <summary vsli:raw="Derived classes call this method to indicate that a query has finished.">派生类调用此方法以指示查询已完成。</summary>
      <param name="newData" vsli:raw="The data that is the result of the query.">作为查询结果的数据。</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.OnQueryFinished(System.Object,System.Exception,System.Windows.Threading.DispatcherOperationCallback,System.Object)">
      <summary vsli:raw="Derived classes call this method to indicate that a query has finished.">派生类调用此方法以指示查询已完成。</summary>
      <param name="newData" vsli:raw="The data that is the result of the query.">作为查询结果的数据。</param>
      <param name="error" vsli:raw="The error that occurred while running the query. This value is &lt;see langword=&quot;null&quot; /&gt; if there is no error.">在运行查询期间发生的错误。 如果未发生错误，此值为 <see langword="null" />。</param>
      <param name="completionWork" vsli:raw="Optional delegate that is used to execute completion work on the UI thread, for example, to set additional properties.">用于对 UI 线程执行完成工作的可选委托，如设置其他属性。</param>
      <param name="callbackArguments" vsli:raw="Optional arguments to send as a parameter with the &lt;paramref name=&quot;completionWork&quot; /&gt; delegate.">可选实参，作为带 <paramref name="completionWork" /> 委托的形参发送。</param>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.Refresh">
      <summary vsli:raw="Initiates a refresh operation to the underlying data model. The result is returned on the &lt;see cref=&quot;P:System.Windows.Data.DataSourceProvider.Data&quot; /&gt; property.">启动对基础数据模型的刷新操作。 结果返回到 <see cref="P:System.Windows.Data.DataSourceProvider.Data" /> 属性。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#BeginInit">
      <summary vsli:raw="This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.">此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不能在代码中直接使用。</summary>
    </member>
    <member name="M:System.Windows.Data.DataSourceProvider.System#ComponentModel#ISupportInitialize#EndInit">
      <summary vsli:raw="This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.">此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不能在代码中直接使用。</summary>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Data">
      <summary vsli:raw="Gets the underlying data object.">获取基础数据对象。</summary>
      <returns vsli:raw="A value of type &lt;see cref=&quot;T:System.Object&quot; /&gt; that is the underlying data object.">属于基础数据对象的类型 <see cref="T:System.Object" /> 的值。</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Dispatcher">
      <summary vsli:raw="Gets or sets the current &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; object to the UI thread to use.">获取或设置要使用的 UI 线程当前的 <see cref="T:System.Windows.Threading.Dispatcher" /> 对象。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; object to the UI thread to use. By default, this is the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; object that is associated with the thread on which this instance was created.">要 <see cref="T:System.Windows.Threading.Dispatcher" /> 使用的线程的当前对象 UI 。 默认情况下，这是与创建此实例的线程关联的 <see cref="T:System.Windows.Threading.Dispatcher" /> 对象。</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.Error">
      <summary vsli:raw="Gets the error of the last query operation.">获取最新查询操作的错误。</summary>
      <returns vsli:raw="A value of type &lt;see cref=&quot;T:System.Exception&quot; /&gt; that is the error of the last query operation, or &lt;see langword=&quot;null&quot; /&gt; if there was no error.">
        <see cref="T:System.Exception" /> 类型的值，它是最新查询操作的错误，如果没有错误，则该值为 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsInitialLoadEnabled">
      <summary vsli:raw="Gets or sets a value that indicates whether to prevent or delay the automatic loading of data.">获取或设置一个值，该值指示是否阻止或延迟数据自动加载。</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; to prevent or delay the automatic loading of data; otherwise, &lt;see langword=&quot;true&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">如果要阻止或延迟数据自动加载，则为 <see langword="false" />；否则为 <see langword="true" />。 默认值是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Windows.Data.DataSourceProvider.IsRefreshDeferred">
      <summary vsli:raw="Gets a value that indicates whether there is an outstanding &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.DeferRefresh&quot; /&gt; in use.">获取一个值，该值指示是否有某个未完成的 <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> 正在运行。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there is an outstanding &lt;see cref=&quot;M:System.Windows.Data.DataSourceProvider.DeferRefresh&quot; /&gt; in use; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果有某个未完成的 <see cref="M:System.Windows.Data.DataSourceProvider.DeferRefresh" /> 正在运行，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.DependencyObject">
      <summary vsli:raw="Represents an object that participates in the dependency property system.">表示参与依赖属性系统的对象。</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; class.">初始化 <see cref="T:System.Windows.DependencyObject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)">
      <summary vsli:raw="Clears the local value of a property. The property to be cleared is specified by a &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; identifier.">清除属性的本地值。 要清除的属性由 <see cref="T:System.Windows.DependencyProperty" /> 标识符指定。</summary>
      <param name="dp" vsli:raw="The dependency property to be cleared, identified by a &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; object reference.">要清除的由 <see cref="T:System.Windows.DependencyProperty" /> 对象引用指定的依赖属性。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempted to call &lt;see cref=&quot;M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)&quot; /&gt; on a sealed &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">尝试对密封 <see cref="T:System.Windows.DependencyObject" /> 调用 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)">
      <summary vsli:raw="Clears the local value of a read-only property. The property to be cleared is specified by a &lt;see cref=&quot;T:System.Windows.DependencyPropertyKey&quot; /&gt;.">清除只读属性的本地值。 要清除的属性由 <see cref="T:System.Windows.DependencyPropertyKey" /> 指定。</summary>
      <param name="key" vsli:raw="The key for the dependency property to be cleared.">要清除的依赖属性的关键字。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempted to call &lt;see cref=&quot;M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)&quot; /&gt; on a sealed &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">尝试对密封 <see cref="T:System.Windows.DependencyObject" /> 调用 <see cref="M:System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)" />。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)">
      <summary vsli:raw="Coerces the value of the specified dependency property. This is accomplished by invoking any &lt;see cref=&quot;T:System.Windows.CoerceValueCallback&quot; /&gt; function specified in property metadata for the dependency property as it exists on the calling &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">对指定依赖属性的值进行强制。 通过对调用方 <see cref="T:System.Windows.DependencyObject" /> 上存在的依赖属性的属性元数据中所指定的任何 <see cref="T:System.Windows.CoerceValueCallback" /> 函数进行调用来完成此操作。</summary>
      <param name="dp" vsli:raw="The identifier for the dependency property to coerce.">要强制转换的依赖项属性的标识符。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The specified &lt;paramref name=&quot;dp&quot; /&gt; or its value were invalid or do not exist.">指定的 <paramref name="dp" /> 或其值无效或不存在。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.Equals(System.Object)">
      <summary vsli:raw="Determines whether a provided &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">确定提供的 <see cref="T:System.Windows.DependencyObject" /> 是否等效于当前 <see cref="T:System.Windows.DependencyObject" />。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; to compare to the current instance.">要与当前实例进行比较的 <see cref="T:System.Windows.DependencyObject" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances are the same; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个实例相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetHashCode">
      <summary vsli:raw="Gets a hash code for this &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">获取此 <see cref="T:System.Windows.DependencyObject" /> 的哈希代码。</summary>
      <returns vsli:raw="A signed 32-bit integer hash code.">带符号 32 位整数哈希代码。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetLocalValueEnumerator">
      <summary vsli:raw="Creates a specialized enumerator for determining which dependency properties have locally set values on this &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">创建一个专用的枚举数，用于确定哪些依赖项属性在此 <see cref="T:System.Windows.DependencyObject" /> 上具有以本地方式设置的值。</summary>
      <returns vsli:raw="A specialized local value enumerator.">一个专用的本地值枚举数。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)">
      <summary vsli:raw="Returns the current effective value of a dependency property on this instance of a &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">对 <see cref="T:System.Windows.DependencyObject" /> 的此实例返回依赖属性的当前有效值。</summary>
      <param name="dp" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; identifier of the property to retrieve the value for.">要检索其值的属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The specified &lt;paramref name=&quot;dp&quot; /&gt; or its value was invalid, or the specified &lt;paramref name=&quot;dp&quot; /&gt; does not exist.">指定 <paramref name="dp" /> 或其值无效，或者指定 <paramref name="dp" /> 不存在。</exception>
      <returns vsli:raw="Returns the current effective value.">返回当前有效值。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)">
      <summary vsli:raw="Re-evaluates the effective value for the specified dependency property.">重新评估指定依赖属性的有效值。</summary>
      <param name="dp" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; identifier of the property to invalidate.">要使其失效的属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</param>
    </member>
    <member name="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary vsli:raw="Invoked whenever the effective value of any dependency property on this &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; has been updated. The specific dependency property that changed is reported in the event data.">每当更新此 <see cref="T:System.Windows.DependencyObject" /> 的任何依赖属性的有效值时调用。 更改的特定依赖属性将在事件数据中报告。</summary>
      <param name="e" vsli:raw="Event data that will contain the dependency property identifier of interest, the property metadata for the type, and old and new values.">将包含相关依赖属性标识符、类型的属性元数据以及旧值和新值的事件数据。</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)">
      <summary vsli:raw="Returns the local value of a dependency property, if it exists.">如果存在，则返回依赖属性的本地值。</summary>
      <param name="dp" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; identifier of the property to retrieve the value for.">要检索其值的属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</param>
      <returns vsli:raw="Returns the local value, or returns the sentinel value &lt;see cref=&quot;F:System.Windows.DependencyProperty.UnsetValue&quot; /&gt; if no local value is set.">返回本地值，或者如果未设置本地值，则返回 sentinel 值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)">
      <summary vsli:raw="Sets the value of a dependency property without changing its value source.">设置依赖属性的值而不更改其值源。</summary>
      <param name="dp" vsli:raw="The identifier of the dependency property to set.">要设置的依赖属性的标识符。</param>
      <param name="value" vsli:raw="The new local value.">新的本地值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempted to modify a read-only dependency property, or a property on a sealed &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">尝试修改只读依赖属性或密封 <see cref="T:System.Windows.DependencyObject" /> 上的属性。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; was not the correct type as registered for the &lt;paramref name=&quot;dp&quot; /&gt; property.">
        <paramref name="value" /> 不是为 <paramref name="dp" /> 属性注册的正确类型。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)">
      <summary vsli:raw="Sets the local value of a dependency property, specified by its dependency property identifier.">设置依赖属性的本地值，该值由其依赖属性标识符指定。</summary>
      <param name="dp" vsli:raw="The identifier of the dependency property to set.">要设置的依赖属性的标识符。</param>
      <param name="value" vsli:raw="The new local value.">新的本地值。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempted to modify a read-only dependency property, or a property on a sealed &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">尝试修改只读依赖属性或密封 <see cref="T:System.Windows.DependencyObject" /> 上的属性。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; was not the correct type as registered for the &lt;paramref name=&quot;dp&quot; /&gt; property.">
        <paramref name="value" /> 不是为 <paramref name="dp" /> 属性注册的正确类型。</exception>
    </member>
    <member name="M:System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)">
      <summary vsli:raw="Sets the local value of a read-only dependency property, specified by the &lt;see cref=&quot;T:System.Windows.DependencyPropertyKey&quot; /&gt; identifier of the dependency property.">设置一个只读依赖属性的本地值，该值由依赖属性的 <see cref="T:System.Windows.DependencyPropertyKey" /> 标识符指定。</summary>
      <param name="key" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyPropertyKey&quot; /&gt; identifier of the property to set.">要设置的属性的 <see cref="T:System.Windows.DependencyPropertyKey" /> 标识符。</param>
      <param name="value" vsli:raw="The new local value.">新的本地值。</param>
    </member>
    <member name="M:System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)">
      <summary vsli:raw="Returns a value that indicates whether serialization processes should serialize the value for the provided dependency property.">返回一个值，该值指示序列化进程是否应序列化所提供的依赖属性的值。</summary>
      <param name="dp" vsli:raw="The identifier for the dependency property that should be serialized.">应被序列化的依赖项属性的标识符。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dependency property that is supplied should be value-serialized; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果应对所提供的依赖属性的值进行序列化，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyObject.DependencyObjectType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; that wraps the CLR type of this instance.">获取对此实例的 CLR 类型进行包装的 <see cref="T:System.Windows.DependencyObjectType" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; that wraps the CLR type of this instance.">对此实例的 CLR 类型进行包装的 <see cref="T:System.Windows.DependencyObjectType" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyObject.IsSealed">
      <summary vsli:raw="Gets a value that indicates whether this instance is currently sealed (read-only).">获取一个值，该值指示此实例当前是否为密封的（只读）。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance is sealed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此实例是密封的，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.DependencyObjectType">
      <summary vsli:raw="Implements an underlying type cache for all &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; derived types.">为所有 <see cref="T:System.Windows.DependencyObject" /> 派生类型实现基础类型缓存。</summary>
    </member>
    <member name="M:System.Windows.DependencyObjectType.FromSystemType(System.Type)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; that represents a given system (CLR) type.">返回一个表示给定系统 (CLR) 类型的 <see cref="T:System.Windows.DependencyObjectType" />。</summary>
      <param name="systemType" vsli:raw="The system (CLR) type to convert.">要转换的系统 (CLR) 类型。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; that represents the system (CLR) type.">一个表示系统 (CLR) 类型的 <see cref="T:System.Windows.DependencyObjectType" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt;.">返回此 <see cref="T:System.Windows.DependencyObjectType" /> 的哈希代码。</summary>
      <returns vsli:raw="A 32-bit signed integer hash code.">32 位有符号整数哈希代码。</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsInstanceOfType(System.Windows.DependencyObject)">
      <summary vsli:raw="Determines whether the specified object is an instance of the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt;.">确定指定的对象是否是当前 <see cref="T:System.Windows.DependencyObjectType" /> 的实例。</summary>
      <param name="dependencyObject" vsli:raw="The object to compare with the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt;.">将与当前 <see cref="T:System.Windows.DependencyObjectType" /> 进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class represented by the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; is in the inheritance hierarchy of the &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; passed as &lt;paramref name=&quot;d&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前 <see cref="T:System.Windows.DependencyObjectType" /> 表示的类位于作为 <paramref name="d" /> 传递的 <see cref="T:System.Windows.DependencyObject" /> 的继承层次结构中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyObjectType.IsSubclassOf(System.Windows.DependencyObjectType)">
      <summary vsli:raw="Determines whether the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; derives from the specified &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt;.">确定当前 <see cref="T:System.Windows.DependencyObjectType" /> 是否派生自指定的 <see cref="T:System.Windows.DependencyObjectType" />。</summary>
      <param name="dependencyObjectType" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; to compare.">要比较的 <see cref="T:System.Windows.DependencyObjectType" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;dependencyObjectType&quot; /&gt; parameter and the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; represent types of classes, and the class represented by the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; derives from the class represented by &lt;paramref name=&quot;dependencyObjectType&quot; /&gt;. Otherwise, &lt;see langword=&quot;false&quot; /&gt;. This method also returns &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;dependencyObjectType&quot; /&gt; and the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; represent the same class.">如果 <paramref name="dependencyObjectType" /> 参数和当前 <see cref="T:System.Windows.DependencyObjectType" /> 表示类的类型，并且由当前 <see cref="T:System.Windows.DependencyObjectType" /> 表示的类派生自 <paramref name="dependencyObjectType" /> 表示的类，则为 <see langword="true" />。 否则为 <see langword="false" />。 如果 <paramref name="dependencyObjectType" /> 和当前的 <see cref="T:System.Windows.DependencyObjectType" /> 表示相同的类，则此方法还返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.BaseType">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; of the immediate base class of the current &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt;.">获取当前 <see cref="T:System.Windows.DependencyObjectType" /> 的直接基类的 <see cref="T:System.Windows.DependencyObjectType" />。</summary>
      <returns vsli:raw="The type of the base class.">基类的类型。</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Id">
      <summary vsli:raw="Gets a zero-based unique identifier for constant-time array lookup operations.">为常数时间数组查找操作获取一个从零开始的唯一标识符。</summary>
      <returns vsli:raw="An internal identifier.">内部标识符。</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.Name">
      <summary vsli:raw="Gets the name of the represented common language runtime (CLR) system type.">获取表示的公共语言运行时 (CLR) 系统类型的名称。</summary>
      <returns vsli:raw="The name of the represented CLR system type.">表示的 CLR 系统类型的名称。</returns>
    </member>
    <member name="P:System.Windows.DependencyObjectType.SystemType">
      <summary vsli:raw="Gets the common language runtime (CLR) system type represented by this &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt;.">获取由此 <see cref="T:System.Windows.DependencyObjectType" /> 表示的公共语言运行时 (CLR) 系统类型。</summary>
      <returns vsli:raw="The CLR system type represented by this &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt;.">由此 <see cref="T:System.Windows.DependencyObjectType" /> 表示的 CLR 系统类型。</returns>
    </member>
    <member name="T:System.Windows.DependencyProperty">
      <summary vsli:raw="Represents a property that can be set through methods such as, styling, data binding, animation, and inheritance.">表示可通过诸如样式、数据绑定、动画和继承等方法设置的属性。</summary>
    </member>
    <member name="F:System.Windows.DependencyProperty.UnsetValue">
      <summary vsli:raw="Specifies a static value that is used by the WPF property system rather than &lt;see langword=&quot;null&quot; /&gt; to indicate that the property exists, but does not have its value set by the property system.">指定由 WPF 属性系统使用的静态值而非 <see langword="null" />，以指示属性存在，但其值未经属性系统设置。</summary>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type)">
      <summary vsli:raw="Adds another type as an owner of a dependency property that has already been registered.">将另一种类型添加为已注册的依赖属性的所有者。</summary>
      <param name="ownerType" vsli:raw="The type to add as an owner of this dependency property.">要作为此依赖属性所有者添加的类型。</param>
      <returns vsli:raw="A reference to the original &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; identifier that identifies the dependency property. This identifier should be exposed by the adding class as a &lt;see langword=&quot;public static readonly&quot; /&gt; field.">一个引用，它指向可标识依赖属性的原始 <see cref="T:System.Windows.DependencyProperty" /> 标识符。 应通过将类添加为 <see langword="public static readonly" /> 字段来公开此标识符。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.AddOwner(System.Type,System.Windows.PropertyMetadata)">
      <summary vsli:raw="Adds another type as an owner of a dependency property that has already been registered, providing dependency property metadata for the dependency property as it will exist on the provided owner type.">将其他类型添加为已注册的依赖对象所有者，从而为依赖属性提供依赖属性元数据使其存在于提供的所有者类型上。</summary>
      <param name="ownerType" vsli:raw="The type to add as owner of this dependency property.">要作为此依赖属性所有者添加的类型。</param>
      <param name="typeMetadata" vsli:raw="The metadata that qualifies the dependency property as it exists on the provided type.">在依赖属性存在于所提供的类型上时对其进行限定的元数据。</param>
      <returns vsli:raw="A reference to the original &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; identifier that identifies the dependency property. This identifier should be exposed by the adding class as a &lt;see langword=&quot;public static readonly&quot; /&gt; field.">一个引用，它指向可标识依赖属性的原始 <see cref="T:System.Windows.DependencyProperty" /> 标识符。 应通过将类添加为 <see langword="public static readonly" /> 字段来公开此标识符。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetHashCode">
      <summary vsli:raw="Returns a hash code for this &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt;.">返回此 <see cref="T:System.Windows.DependencyProperty" /> 的哈希代码。</summary>
      <returns vsli:raw="The hash code for this &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt;.">此 <see cref="T:System.Windows.DependencyProperty" /> 的哈希代码。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Type)">
      <summary vsli:raw="Returns the metadata for this dependency property as it exists on a specified existing type.">返回此依赖属性的元数据，因为它存在于指定的现有类型上。</summary>
      <param name="forType" vsli:raw="The specific type from which to retrieve the dependency property metadata.">要从中检索依赖属性元数据的特定类型。</param>
      <returns vsli:raw="A property metadata object.">属性元数据对象。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObject)">
      <summary vsli:raw="Returns the metadata for this dependency property as it exists on the specified object instance.">返回此依赖属性的元数据，因为它存在于指定的对象实例上。</summary>
      <param name="dependencyObject" vsli:raw="A dependency object that is checked for type, to determine which type-specific version of the dependency property the metadata should come from.">一个依赖对象，检查了其类型，以便确定元数据应来自依赖属性的哪个类型特定版本。</param>
      <returns vsli:raw="A property metadata object.">属性元数据对象。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.GetMetadata(System.Windows.DependencyObjectType)">
      <summary vsli:raw="Returns the metadata for this dependency property as it exists on a specified type.">为此依赖属性（当它位于指定的对象实例上时）返回元数据。</summary>
      <param name="dependencyObjectType" vsli:raw="A specific object that records the dependency object type from which the dependency property metadata is desired.">一个特定对象，该对象记录需要其中的依赖属性元数据的依赖项对象类型。</param>
      <returns vsli:raw="A property metadata object.">属性元数据对象。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidType(System.Object)">
      <summary vsli:raw="Determines whether a specified value is acceptable for this dependency property's type, as checked against the property type provided in the original dependency property registration.">确定指定的值对于该依赖项对象的类型是否可接受（与原依赖项对象注册中提供的属性类型相对照）。</summary>
      <param name="value" vsli:raw="The value to check.">要检查的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified value is the registered property type or an acceptable derived type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的值是已注册的属性类型或可接受的派生类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.IsValidValue(System.Object)">
      <summary vsli:raw="Determines whether the provided value is accepted for the type of property through basic type checking, and also potentially if it is within the allowed range of values for that type.">确定所提供的值通过基本类型检查后是否被属性类型接受，以及它是否有可能在该类型的值的允许范围以内。</summary>
      <param name="value" vsli:raw="The value to check.">要检查的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value is acceptable and is of the correct type or a derived type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果值是可接受的，并且具有正确的类型或派生类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary vsli:raw="Specifies alternate metadata for this dependency property when it is present on instances of a specified type, overriding the metadata that existed for the dependency property as it was inherited from base types.">当此依赖属性位于指定类型的实例上时为其指定替换元数据，以在该依赖属性继承自基类型时重写该属性已存在的元数据。</summary>
      <param name="forType" vsli:raw="The type where this dependency property is inherited and where the provided alternate metadata will be applied.">一种类型，在该类型上继承该依赖属性并将应用所提供的替换元数据。</param>
      <param name="typeMetadata" vsli:raw="The metadata to apply to the dependency property on the overriding type.">一种元数据，它将应用于重写类型上的依赖属性。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="An attempt was made to override metadata on a read-only dependency property (that operation cannot be done using this signature).">尝试重写只读依赖属性的元数据（不能使用此签名完成该操作）。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Metadata was already established for the dependency property as it exists on the provided type.">已为依赖属性建立元数据，因为它存在于所提供的类型上。</exception>
    </member>
    <member name="M:System.Windows.DependencyProperty.OverrideMetadata(System.Type,System.Windows.PropertyMetadata,System.Windows.DependencyPropertyKey)">
      <summary vsli:raw="Supplies alternate metadata for a read-only dependency property when it is present on instances of a specified type, overriding the metadata that was provided in the initial dependency property registration. You must pass the &lt;see cref=&quot;T:System.Windows.DependencyPropertyKey&quot; /&gt; for the read-only dependency property to avoid raising an exception.">当只读依赖属性位于指定类型的实例上时为其提供替换元数据，以便重写在最初注册依赖属性时提供的元数据。 你必须为只读依赖属性传递 <see cref="T:System.Windows.DependencyPropertyKey" />，以免引发异常。</summary>
      <param name="forType" vsli:raw="The type where this dependency property is inherited and where the provided alternate metadata will be applied.">一种类型，在该类型上继承该依赖属性并将应用所提供的替换元数据。</param>
      <param name="typeMetadata" vsli:raw="The metadata to apply to the dependency property on the overriding type.">一种元数据，它将应用于重写类型上的依赖属性。</param>
      <param name="key" vsli:raw="The access key for a read-only dependency property.">只读依赖属性的访问键。</param>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type)">
      <summary vsli:raw="Registers a dependency property with the specified property name, property type, and owner type.">使用指定的属性名称、属性类型和所有者类型注册依赖属性。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register. The name must be unique within the registration namespace of the owner type.">要注册的依赖属性的名称。 名称必须在所有者类型的注册命名空间中是唯一的。</param>
      <param name="propertyType" vsli:raw="The type of the property.">属性的类型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">正在注册依赖属性的所有者类型。</param>
      <returns vsli:raw="A dependency property identifier that should be used to set the value of a &lt;see langword=&quot;public static readonly&quot; /&gt; field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.">一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。 稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary vsli:raw="Registers a dependency property with the specified property name, property type, owner type, and property metadata.">使用指定的属性名称、属性类型、所有者类型和属性元数据注册依赖属性。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">要注册的依赖属性的名称。</param>
      <param name="propertyType" vsli:raw="The type of the property.">属性的类型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">正在注册依赖属性的所有者类型。</param>
      <param name="typeMetadata" vsli:raw="Property metadata for the dependency property.">依赖属性的属性元数据。</param>
      <returns vsli:raw="A dependency property identifier that should be used to set the value of a &lt;see langword=&quot;public static readonly&quot; /&gt; field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.">一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。 稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.Register(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary vsli:raw="Registers a dependency property with the specified property name, property type, owner type, property metadata, and a value validation callback for the property.">使用指定的属性名称、属性类型、所有者类型、属性元数据和属性的值验证回叫来注册依赖属性。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">要注册的依赖属性的名称。</param>
      <param name="propertyType" vsli:raw="The type of the property.">属性的类型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">正在注册依赖属性的所有者类型。</param>
      <param name="typeMetadata" vsli:raw="Property metadata for the dependency property.">依赖属性的属性元数据。</param>
      <param name="validateValueCallback" vsli:raw="A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.">对回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。</param>
      <returns vsli:raw="A dependency property identifier that should be used to set the value of a &lt;see langword=&quot;public static readonly&quot; /&gt; field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.">一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。 稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type)">
      <summary vsli:raw="Registers an attached property with the specified property name, property type, and owner type.">使用指定的属性名称、属性类型和所有者类型注册附加属性。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">要注册的依赖属性的名称。</param>
      <param name="propertyType" vsli:raw="The type of the property.">属性的类型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">正在注册依赖属性的所有者类型。</param>
      <returns vsli:raw="A dependency property identifier that should be used to set the value of a &lt;see langword=&quot;public static readonly&quot; /&gt; field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.">一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。 稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary vsli:raw="Registers an attached property with the specified property name, property type, owner type, and property metadata.">使用指定的属性名、属性类型、所有者类型和属性元数据注册附加的属性。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">要注册的依赖属性的名称。</param>
      <param name="propertyType" vsli:raw="The type of the property.">属性的类型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">正在注册依赖属性的所有者类型。</param>
      <param name="defaultMetadata" vsli:raw="Property metadata for the dependency property. This can include the default value as well as other characteristics.">依赖属性的属性元数据。 这可以包括默认值和其他特征。</param>
      <returns vsli:raw="A dependency property identifier that should be used to set the value of a &lt;see langword=&quot;public static readonly&quot; /&gt; field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.">一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。 稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttached(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary vsli:raw="Registers an attached property with the specified property type, owner type, property metadata, and value validation callback for the property.">使用指定的属性类型、所有者类型、属性元数据和属性的值验证回调来注册附加属性。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">要注册的依赖属性的名称。</param>
      <param name="propertyType" vsli:raw="The type of the property.">属性的类型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">正在注册依赖属性的所有者类型。</param>
      <param name="defaultMetadata" vsli:raw="Property metadata for the dependency property. This can include the default value as well as other characteristics.">依赖属性的属性元数据。 这可以包括默认值和其他特征。</param>
      <param name="validateValueCallback" vsli:raw="A reference to a callback that should perform any custom validation of the dependency property value beyond typical type validation.">对回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。</param>
      <returns vsli:raw="A dependency property identifier that should be used to set the value of a &lt;see langword=&quot;public static readonly&quot; /&gt; field in your class. That identifier is then used to reference the dependency property later, for operations such as setting its value programmatically or obtaining metadata.">一个依赖属性标识符，应使用它来设置类中 <see langword="public static readonly" /> 字段的值。 稍后将此标识符用来引用依赖属性，从而实现以编程方式设置其值或获取元数据等操作。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary vsli:raw="Registers a read-only attached property, with the specified property type, owner type, and property metadata.">使用指定的属性名称、所有者类型和属性元数据注册只读附加属性。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">要注册的依赖属性的名称。</param>
      <param name="propertyType" vsli:raw="The type of the property.">属性的类型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">正在注册依赖属性的所有者类型。</param>
      <param name="defaultMetadata" vsli:raw="Property metadata for the dependency property.">依赖属性的属性元数据。</param>
      <returns vsli:raw="A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.">一个依赖属性键，此键应用于设置你的类中静态只读字段的值，该值稍后被用于引用该依赖属性。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterAttachedReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary vsli:raw="Registers a read-only attached property, with the specified property type, owner type, property metadata, and a validation callback.">使用指定的属性类型、所有者类型、属性元数据和验证回调来注册只读附加属性。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">要注册的依赖属性的名称。</param>
      <param name="propertyType" vsli:raw="The type of the property.">属性的类型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">正在注册依赖属性的所有者类型。</param>
      <param name="defaultMetadata" vsli:raw="Property metadata for the dependency property.">依赖属性的属性元数据。</param>
      <param name="validateValueCallback" vsli:raw="A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.">对用户创建的回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。</param>
      <returns vsli:raw="A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.">一个依赖属性键，应使用它在类中设置静态只读字段的值，然后使用该字段的值引用依赖属性。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata)">
      <summary vsli:raw="Registers a read-only dependency property, with the specified property type, owner type, and property metadata.">使用指定的属性名称、所有者类型和属性元数据注册只读依赖属性。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">要注册的依赖属性的名称。</param>
      <param name="propertyType" vsli:raw="The type of the property.">属性的类型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">正在注册依赖属性的所有者类型。</param>
      <param name="typeMetadata" vsli:raw="Property metadata for the dependency property.">依赖属性的属性元数据。</param>
      <returns vsli:raw="A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property.">一个依赖属性键，应使用它在类中设置静态只读字段的值，然后使用该字段的值引用依赖属性。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.RegisterReadOnly(System.String,System.Type,System.Type,System.Windows.PropertyMetadata,System.Windows.ValidateValueCallback)">
      <summary vsli:raw="Registers a read-only dependency property, with the specified property type, owner type, property metadata, and a validation callback.">使用指定的属性类型、所有者类型、属性元数据和验证回叫来注册只读依赖属性。</summary>
      <param name="name" vsli:raw="The name of the dependency property to register.">要注册的依赖属性的名称。</param>
      <param name="propertyType" vsli:raw="The type of the property.">属性的类型。</param>
      <param name="ownerType" vsli:raw="The owner type that is registering the dependency property.">正在注册依赖属性的所有者类型。</param>
      <param name="typeMetadata" vsli:raw="Property metadata for the dependency property.">依赖属性的属性元数据。</param>
      <param name="validateValueCallback" vsli:raw="A reference to a user-created callback that should perform any custom validation of the dependency property value beyond typical type validation.">对用户创建的回调的引用，除了典型的类型验证之外，该引用还应执行依赖属性值的任何自定义验证。</param>
      <returns vsli:raw="A dependency property key that should be used to set the value of a static read-only field in your class, which is then used to reference the dependency property later.">一个依赖属性键，此键应用于设置你的类中静态只读字段的值，该值稍后被用于引用该依赖属性。</returns>
    </member>
    <member name="M:System.Windows.DependencyProperty.ToString">
      <summary vsli:raw="Returns the string representation of the dependency property.">返回依赖属性的字符串表示形式。</summary>
      <returns vsli:raw="The string representation of the dependency property.">依赖属性的字符串表示形式。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.DefaultMetadata">
      <summary vsli:raw="Gets the default metadata of the dependency property.">获取依赖项对象的默认元数据。</summary>
      <returns vsli:raw="The default metadata of the dependency property.">依赖项对象的默认元数据。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.GlobalIndex">
      <summary vsli:raw="Gets an internally generated value that uniquely identifies the dependency property.">获取唯一标识依赖项对象的内部生成值。</summary>
      <returns vsli:raw="A unique numeric identifier.">唯一数字标识符。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.Name">
      <summary vsli:raw="Gets the name of the dependency property.">获取依赖属性的名称。</summary>
      <returns vsli:raw="The name of the property.">属性的名称。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.OwnerType">
      <summary vsli:raw="Gets the type of the object that registered the dependency property with the property system, or added itself as owner of the property.">获取使用属性系统注册依赖属性或者将自己作为属性所有者添加的对象的类型。</summary>
      <returns vsli:raw="The type of the object that registered the property or added itself as owner of the property.">注册属性或者将自己作为属性所有者添加的对象的类型。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.PropertyType">
      <summary vsli:raw="Gets the type that the dependency property uses for its value.">获取依赖项对象用于其值的类型。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the property value.">属性值的 <see cref="T:System.Type" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ReadOnly">
      <summary vsli:raw="Gets a value that indicates whether the dependency property identified by this &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; instance is a read-only dependency property.">获取一个值，该值指示由此 <see cref="T:System.Windows.DependencyProperty" /> 实例标识的依赖项对象是否为只读依赖项对象。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dependency property is read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该依赖项对象为只读属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyProperty.ValidateValueCallback">
      <summary vsli:raw="Gets the value validation callback for the dependency property.">获取依赖项对象的值验证回调。</summary>
      <returns vsli:raw="The value validation callback for this dependency property, as provided for the &lt;paramref name=&quot;validateValueCallback&quot; /&gt; parameter in the original dependency property registration.">最初依赖项对象注册时为 <paramref name="validateValueCallback" /> 参数提供的该依赖项对象的值验证回调。</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventArgs">
      <summary vsli:raw="Provides data for various property changed events. Typically these events report effective value changes in the value of a read-only dependency property. Another usage is as part of a &lt;see cref=&quot;T:System.Windows.PropertyChangedCallback&quot; /&gt; implementation.">提供各种属性更改事件的数据。 通常这些事件对只读依赖属性的值中的有效值更改进行报告。 另一个用法是用作 <see cref="T:System.Windows.PropertyChangedCallback" /> 实现的一部分。</summary>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.#ctor(System.Windows.DependencyProperty,System.Object,System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 类的新实例。</summary>
      <param name="property" vsli:raw="The identifier for the dependency property that changed.">更改的依赖项属性的标识符。</param>
      <param name="oldValue" vsli:raw="The value of the property before the change reported by the relevant event or state change.">相关事件报告更改或状态更改之前的属性的值。</param>
      <param name="newValue" vsli:raw="The value of the property after the change reported by the relevant event or state change.">相关事件报告更改或状态更改之后的属性的值。</param>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Object)">
      <summary vsli:raw="Determines whether the provided object is equivalent to the current &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt;.">确定提供的对象是否与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 相同。</summary>
      <param name="obj" vsli:raw="The object to compare to the current &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt;.">要与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the provided object is equivalent to the current &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果提供的对象与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.Equals(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary vsli:raw="Determines whether the provided &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt;.">确定提供的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 是否与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 相同。</summary>
      <param name="args" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; to compare to the current &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt;.">要与当前的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 进行比较的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /></param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the provided &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; is equivalent to the current &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果提供的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 与当前 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.GetHashCode">
      <summary vsli:raw="Gets a hash code  for this &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt;.">获取此 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 的哈希代码。</summary>
      <returns vsli:raw="A signed 32-bit integer hash code.">带符号 32 位整数哈希代码。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Equality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; objects have the same value.">确定两个指定的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 对象是否具有相同的值。</summary>
      <param name="left" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; to compare.">要比较的第一个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <param name="right" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; to compare.">要比较的第二个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; instances are equivalent; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 实例等效，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.DependencyPropertyChangedEventArgs.op_Inequality(System.Windows.DependencyPropertyChangedEventArgs,System.Windows.DependencyPropertyChangedEventArgs)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; objects are different.">确定两个指定的 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 对象是否不同。</summary>
      <param name="left" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; to compare.">要比较的第一个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <param name="right" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; to compare.">要比较的第二个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two &lt;see cref=&quot;T:System.Windows.DependencyPropertyChangedEventArgs&quot; /&gt; instances are different; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个 <see cref="T:System.Windows.DependencyPropertyChangedEventArgs" /> 实例不同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.NewValue">
      <summary vsli:raw="Gets the value of the property after the change.">获取发生更改之后的属性的值。</summary>
      <returns vsli:raw="The property value after the change.">发生更改之后的属性值。</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.OldValue">
      <summary vsli:raw="Gets the value of the property before the change.">获取发生更改之前的属性的值。</summary>
      <returns vsli:raw="The property value before the change.">发生更改之前的属性值。</returns>
    </member>
    <member name="P:System.Windows.DependencyPropertyChangedEventArgs.Property">
      <summary vsli:raw="Gets the identifier for the dependency property where the value change occurred.">获取发生值更改的依赖项属性的标识符。</summary>
      <returns vsli:raw="The identifier field of the dependency property where the value change occurred.">发生值更改的依赖项属性的标识符字段。</returns>
    </member>
    <member name="T:System.Windows.DependencyPropertyChangedEventHandler">
      <summary vsli:raw="Represents the method that will handle events raised when a &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; is changed on a particular &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; implementation.">表示将处理某些事件的方法，这些事件在特定 <see cref="T:System.Windows.DependencyObject" /> 实现上的 <see cref="T:System.Windows.DependencyProperty" /> 发生更改时引发。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="The event data.">事件数据。</param>
    </member>
    <member name="T:System.Windows.DependencyPropertyKey">
      <summary vsli:raw="Provides a dependency property identifier for limited write access to a read-only dependency property.">提供依赖项对象标识符，以便对只读依赖项对象进行有限的写访问。</summary>
    </member>
    <member name="M:System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)">
      <summary vsli:raw="Overrides the metadata of a read-only dependency property that is represented by this dependency property identifier.">重写由此依赖项对象标识符表示的只读依赖项对象的元数据。</summary>
      <param name="forType" vsli:raw="The type on which this dependency property exists and metadata should be overridden.">作为此依赖项对象存在基础以及应依据其重写元数据的类型。</param>
      <param name="typeMetadata" vsli:raw="Metadata supplied for this type.">为此类型提供的元数据。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Attempted metadata override on a read-write dependency property (cannot be done using this signature).">尝试在读写依赖项对象上进行元数据重写（无法使用此签名完成该操作）。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Metadata was already established for the property as it exists on the provided type.">当属性存在于提供的类型上时，已为该属性建立元数据。</exception>
    </member>
    <member name="P:System.Windows.DependencyPropertyKey.DependencyProperty">
      <summary vsli:raw="Gets the dependency property identifier associated with this specialized read-only dependency property identifier.">获取与此专用只读依赖项对象标识符关联的依赖项对象标识符。</summary>
      <returns vsli:raw="The relevant dependency property identifier.">相关的依赖项对象标识符。</returns>
    </member>
    <member name="T:System.Windows.Expression">
      <summary vsli:raw="This type supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.">此类型支持 Windows Presentation Foundation (WPF) 基础结构，不应在代码中直接使用。</summary>
    </member>
    <member name="T:System.Windows.ExpressionConverter">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.Windows.Expression&quot; /&gt; to and from other types.">在 <see cref="T:System.Windows.Expression" /> 的实例和其他类型之间来回转换。</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.ExpressionConverter&quot; /&gt; class.">初始化 <see cref="T:System.Windows.ExpressionConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert from a source object to an &lt;see cref=&quot;T:System.Windows.Expression&quot; /&gt; object.">返回此转换器是否能从源对象转换为 <see cref="T:System.Windows.Expression" /> 对象。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="sourceType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert from.">
        <see cref="T:System.Type" />，表示要从中进行转换的类型。</param>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">总是为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Returns whether this converter can convert an &lt;see cref=&quot;T:System.Windows.Expression&quot; /&gt; object to a specific destination type.">返回此转换器能否将 <see cref="T:System.Windows.Expression" /> 对象转换为特定的目标类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;.">总是为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the provided value to the &lt;see cref=&quot;T:System.Windows.Expression&quot; /&gt; type.">将所提供的值转换为 <see cref="T:System.Windows.Expression" /> 类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <returns vsli:raw="Always throws an exception and returns &lt;see langword=&quot;null&quot; /&gt;.">始终引发异常，并返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.ExpressionConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the provided &lt;see cref=&quot;T:System.Windows.Expression&quot; /&gt; object to the specified type.">将所提供的 <see cref="T:System.Windows.Expression" /> 对象转换为指定的类型。</summary>
      <param name="context" vsli:raw="An &lt;see cref=&quot;T:System.ComponentModel.ITypeDescriptorContext&quot; /&gt; that provides a format context.">一个 <see cref="T:System.ComponentModel.ITypeDescriptorContext" />，用于提供格式上下文。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; to use as the current culture.">要用作当前区域性的 <see cref="T:System.Globalization.CultureInfo" /> 对象。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <param name="destinationType" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that represents the type you wish to convert to.">表示要转换到的类型的 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="Always throws an exception and returns &lt;see langword=&quot;null&quot; /&gt;.">始终引发异常，并返回 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Windows.Freezable">
      <summary vsli:raw="Defines an object that has a modifiable state and a read-only (frozen) state. Classes that derive from &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; provide detailed change notification, can be made immutable, and can clone themselves.">定义具有可修改状态和只读（冻结）状态的对象。 从 <see cref="T:System.Windows.Freezable" /> 派生的类提供详细更改通知，可以设置为不可变，并且可以克隆自身。</summary>
    </member>
    <member name="E:System.Windows.Freezable.Changed">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; or an object it contains is modified.">在修改 <see cref="T:System.Windows.Freezable" /> 或其包含的对象时发生。</summary>
    </member>
    <member name="M:System.Windows.Freezable.#ctor">
      <summary vsli:raw="Initializes a new instance of a &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; derived class.">初始化 <see cref="T:System.Windows.Freezable" /> 派生类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Freezable.Clone">
      <summary vsli:raw="Creates a modifiable clone of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt;, making deep copies of the object's values. When copying the object's dependency properties, this method copies expressions (which might no longer resolve) but not animations or their current values.">创建 <see cref="T:System.Windows.Freezable" /> 的可修改克隆，以制作该对象值的深层副本。 在复制此对象的依赖属性时，此方法会复制表达式（可能不再解析），但不复制动画或其当前值。</summary>
      <returns vsli:raw="A modifiable clone of the current object. The cloned object's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt; even if the source's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;.">当前对象的可修改复本。 即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 <see langword="false" />，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCore(System.Windows.Freezable)">
      <summary vsli:raw="Makes the instance a clone (deep copy) of the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; using base (non-animated) property values.">使用基（未经过动画处理的）属性值使该实例成为指定 <see cref="T:System.Windows.Freezable" /> 的克隆（深层复制）。</summary>
      <param name="sourceFreezable" vsli:raw="The object to clone.">要克隆的对象。</param>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValue">
      <summary vsli:raw="Creates a modifiable clone (deep copy) of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; using its current values.">使用 <see cref="T:System.Windows.Freezable" /> 的当前值创建其可修改复本（深层副本）。</summary>
      <returns vsli:raw="A modifiable clone of the current object. The cloned object's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property is &lt;see langword=&quot;false&quot; /&gt; even if the source's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property is &lt;see langword=&quot;true&quot; /&gt;.">当前对象的可修改复本。 即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 <see langword="false" />，所克隆对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Windows.Freezable.CloneCurrentValueCore(System.Windows.Freezable)">
      <summary vsli:raw="Makes the instance a modifiable clone (deep copy) of the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; using current property values.">使用当前属性值使该实例成为指定 <see cref="T:System.Windows.Freezable" /> 的可修改克隆（深层复制）。</summary>
      <param name="sourceFreezable" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; to be cloned.">要克隆的 <see cref="T:System.Windows.Freezable" />。</param>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstance">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Freezable" /> 类的新实例。</summary>
      <returns vsli:raw="The new instance.">新实例。</returns>
    </member>
    <member name="M:System.Windows.Freezable.CreateInstanceCore">
      <summary vsli:raw="When implemented in a derived class, creates a new instance of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; derived class.">在派生类中实现时，创建 <see cref="T:System.Windows.Freezable" /> 派生类的新实例。</summary>
      <returns vsli:raw="The new instance.">新实例。</returns>
    </member>
    <member name="M:System.Windows.Freezable.Freeze">
      <summary vsli:raw="Makes the current object unmodifiable and sets its &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property to &lt;see langword=&quot;true&quot; /&gt;.">使当前对象不可修改，并且将其 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性设置为 <see langword="true" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; cannot be made unmodifiable.">无法将 <see cref="T:System.Windows.Freezable" /> 设置为不可修改。</exception>
    </member>
    <member name="M:System.Windows.Freezable.Freeze(System.Windows.Freezable,System.Boolean)">
      <summary vsli:raw="If the &lt;paramref name=&quot;isChecking&quot; /&gt; parameter is &lt;see langword=&quot;true&quot; /&gt;, this method indicates whether the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; can be made unmodifiable. If the &lt;paramref name=&quot;isChecking&quot; /&gt; parameter is &lt;see langword=&quot;false&quot; /&gt;, this method attempts to make the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; unmodifiable and indicates whether the operation succeeded.">如果 <paramref name="isChecking" /> 参数为 <see langword="true" />，则此方法指示是否可将指定的 <see cref="T:System.Windows.Freezable" /> 变为不可修改。 如果 <paramref name="isChecking" /> 参数为 <see langword="false" />，则此方法尝试将指定的 <see cref="T:System.Windows.Freezable" /> 变为不可修改，并指示操作是否成功。</summary>
      <param name="freezable" vsli:raw="The object to check or make unmodifiable. If &lt;paramref name=&quot;isChecking&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, the object is checked to determine whether it can be made unmodifiable. If &lt;paramref name=&quot;isChecking&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, the object is made unmodifiable, if possible.">要检查或要变为不可修改的对象。 如果 <paramref name="isChecking" /> 为 <see langword="true" />，则检查此对象，以确定是否可将其变为不可修改。 如果 <paramref name="isChecking" /> 为 <see langword="false" />，则在可能的情况下将此对象变为不可修改。</param>
      <param name="isChecking" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return an indication of whether the object can be frozen (without actually freezing it); &lt;see langword=&quot;false&quot; /&gt; to actually freeze the object.">若为 <see langword="true" />，则返回是否可冻结对象的指示（不实际冻结对象）；若为 <see langword="false" />，则实际冻结对象。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="When &lt;paramref name=&quot;isChecking&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, the attempt to make &lt;paramref name=&quot;freezable&quot; /&gt; unmodifiable was unsuccessful; the object is now in an unknown state (it might be partially frozen).">如果 <paramref name="isChecking" /> 为 <see langword="false" />，则表明将 <paramref name="freezable" /> 变为不可修改的尝试已失败；对象目前处于未知状态（可能已将其部分冻结）。</exception>
      <returns vsli:raw="If &lt;paramref name=&quot;isChecking&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, this method returns &lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; can be made unmodifiable, or &lt;see langword=&quot;false&quot; /&gt; if it cannot be made unmodifiable. If &lt;paramref name=&quot;isChecking&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, this method returns &lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; is now unmodifiable, or &lt;see langword=&quot;false&quot; /&gt; if it cannot be made unmodifiable.">当 <paramref name="isChecking" /> 为 <see langword="true" /> 时，如果可以将指定的 <see cref="T:System.Windows.Freezable" /> 变为不可修改，则此方法返回 <see langword="true" />；如果无法将其变为不可修改，则返回 <see langword="false" />。 当 <paramref name="isChecking" /> 为 <see langword="false" /> 时，如果指定的 <see cref="T:System.Windows.Freezable" /> 目前已经不可修改，则此方法返回 <see langword="true" />；如果无法将其变为不可修改，则返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Freezable.FreezeCore(System.Boolean)">
      <summary vsli:raw="Makes the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; object unmodifiable or tests whether it can be made unmodifiable.">使 <see cref="T:System.Windows.Freezable" /> 对象变为不可修改或测试是否可将其变为不可修改。</summary>
      <param name="isChecking" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return an indication of whether the object can be frozen (without actually freezing it); &lt;see langword=&quot;false&quot; /&gt; to actually freeze the object.">若为 <see langword="true" />，则返回是否可冻结对象的指示（不实际冻结对象）；若为 <see langword="false" />，则实际冻结对象。</param>
      <returns vsli:raw="If &lt;paramref name=&quot;isChecking&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;, this method returns &lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; can be made unmodifiable, or &lt;see langword=&quot;false&quot; /&gt; if it cannot be made unmodifiable. If &lt;paramref name=&quot;isChecking&quot; /&gt; is &lt;see langword=&quot;false&quot; /&gt;, this method returns &lt;see langword=&quot;true&quot; /&gt; if the if the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; is now unmodifiable, or &lt;see langword=&quot;false&quot; /&gt; if it cannot be made unmodifiable.">当 <paramref name="isChecking" /> 为 <see langword="true" /> 时，如果可以将 <see cref="T:System.Windows.Freezable" /> 变为不可修改，则此方法返回 <see langword="true" />；如果无法将其变为不可修改，则返回 <see langword="false" />。 当 <paramref name="isChecking" /> 为 <see langword="false" /> 时，如果指定的 <see cref="T:System.Windows.Freezable" /> 目前已经不可修改，则此方法返回 <see langword="true" />，如果无法将其变为不可修改，则返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozen">
      <summary vsli:raw="Creates a frozen copy of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt;, using base (non-animated) property values. Because the copy is frozen, any frozen sub-objects are copied by reference.">使用基（未经过动画处理的）属性值创建 <see cref="T:System.Windows.Freezable" /> 的冻结副本。 由于副本已冻结，因此将通过引用复制任何冻结的子对象。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; cannot be frozen because it contains expressions or animated properties.">无法冻结此 <see cref="T:System.Windows.Freezable" />，因为它包含表达式或经过动画处理的属性。</exception>
      <returns vsli:raw="A frozen copy of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt;. The copy's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property is set to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Windows.Freezable" /> 的冻结副本。 副本的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性设置为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetAsFrozenCore(System.Windows.Freezable)">
      <summary vsli:raw="Makes the instance a frozen clone of the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; using base (non-animated) property values.">让该实例成为指定的 <see cref="T:System.Windows.Freezable" /> 的冻结克隆，前者使用基（非动画的）属性值。</summary>
      <param name="sourceFreezable" vsli:raw="The instance to copy.">要复制的实例。</param>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozen">
      <summary vsli:raw="Creates a frozen copy of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; using current property values. Because the copy is frozen, any frozen sub-objects are copied by reference.">使用当前属性值创建 <see cref="T:System.Windows.Freezable" /> 的冻结副本。 由于副本已冻结，因此将通过引用复制任何冻结的子对象。</summary>
      <returns vsli:raw="A frozen copy of the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt;. The copy's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property is set to &lt;see langword=&quot;true&quot; /&gt;.">
        <see cref="T:System.Windows.Freezable" /> 的冻结副本。 副本的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性设置为 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Windows.Freezable.GetCurrentValueAsFrozenCore(System.Windows.Freezable)">
      <summary vsli:raw="Makes the current instance a frozen clone of the specified &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt;. If the object has animated dependency properties, their current animated values are copied.">使当前实例成为指定 <see cref="T:System.Windows.Freezable" /> 的冻结克隆。 如果对象具有动画依赖属性，则复制其当前的动画值。</summary>
      <param name="sourceFreezable" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; to copy and freeze.">要复制和冻结的 <see cref="T:System.Windows.Freezable" />。</param>
    </member>
    <member name="M:System.Windows.Freezable.OnChanged">
      <summary vsli:raw="Called when the current &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; object is modified.">修改当前 <see cref="T:System.Windows.Freezable" /> 对象时调用。</summary>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)">
      <summary vsli:raw="Ensures that appropriate context pointers are established for a &lt;see cref=&quot;T:System.Windows.DependencyObjectType&quot; /&gt; data member that has just been set.">确保为刚刚设置的 <see cref="T:System.Windows.DependencyObjectType" /> 数据成员建立适当的上下文指针。</summary>
      <param name="oldValue" vsli:raw="The previous value of the data member.">数据成员以前的值。</param>
      <param name="newValue" vsli:raw="The current value of the data member.">数据成员当前的值。</param>
    </member>
    <member name="M:System.Windows.Freezable.OnFreezablePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyObject,System.Windows.DependencyProperty)">
      <summary vsli:raw="This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.">此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不能在代码中直接使用。</summary>
      <param name="oldValue" vsli:raw="The previous value of the data member.">数据成员以前的值。</param>
      <param name="newValue" vsli:raw="The current value of the data member.">数据成员当前的值。</param>
      <param name="property" vsli:raw="The property that changed.">已更改的属性。</param>
    </member>
    <member name="M:System.Windows.Freezable.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
      <summary vsli:raw="Overrides the &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; implementation of &lt;see cref=&quot;M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)&quot; /&gt; to also invoke any &lt;see cref=&quot;E:System.Windows.Freezable.Changed&quot; /&gt; handlers in response to a changing dependency property of type &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt;.">重写 <see cref="M:System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" /> 的 <see cref="T:System.Windows.DependencyObject" /> 实现，以同时调用任何响应类型 <see cref="T:System.Windows.Freezable" /> 不断变化的依赖属性的 <see cref="E:System.Windows.Freezable.Changed" /> 处理程序。</summary>
      <param name="e" vsli:raw="Event data that contains information about which property changed, and its old and new values.">包含有关已更改的属性的信息及其旧值和新值的事件数据。</param>
    </member>
    <member name="M:System.Windows.Freezable.ReadPreamble">
      <summary vsli:raw="Ensures that the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; is being accessed from a valid thread. Inheritors of &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; must call this method at the beginning of any API that reads data members that are not dependency properties.">确保正在从有效的线程访问 <see cref="T:System.Windows.Freezable" />。 <see cref="T:System.Windows.Freezable" /> 的继承者必须在任何 API 一开始读取不属于依赖项对象的数据成员时调用此方法。</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePostscript">
      <summary vsli:raw="Raises the &lt;see cref=&quot;E:System.Windows.Freezable.Changed&quot; /&gt; event for the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; and invokes its &lt;see cref=&quot;M:System.Windows.Freezable.OnChanged&quot; /&gt; method. Classes that derive from &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; should call this method at the end of any API that modifies class members that are not stored as dependency properties.">引发 <see cref="T:System.Windows.Freezable" /> 的 <see cref="E:System.Windows.Freezable.Changed" /> 事件并调用其 <see cref="M:System.Windows.Freezable.OnChanged" /> 方法。 从 <see cref="T:System.Windows.Freezable" /> 派生的类应在修改的类成员不存储为依赖属性的任何 API 的末尾调用此方法。</summary>
    </member>
    <member name="M:System.Windows.Freezable.WritePreamble">
      <summary vsli:raw="Verifies that the &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; is not frozen and that it is being accessed from a valid threading context. &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; inheritors should call this method at the beginning of any API that writes to data members that are not dependency properties.">验证 <see cref="T:System.Windows.Freezable" /> 是否未被冻结，并且是否正在从有效的线程上下文中访问它。 <see cref="T:System.Windows.Freezable" /> 的继承项应当在任何 API 一开始写入不属于依赖项属性的数据成员时调用此方法。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Freezable&quot; /&gt; instance is frozen and cannot have its members written to.">
        <see cref="T:System.Windows.Freezable" /> 实例已冻结，并且无法写入其成员。</exception>
    </member>
    <member name="P:System.Windows.Freezable.CanFreeze">
      <summary vsli:raw="Gets a value that indicates whether the object can be made unmodifiable.">获取一个值，该值指示是否可将对象变为不可修改。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the current object can be made unmodifiable or is already unmodifiable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果当前对象可以变为不可修改，或者已经不可修改，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Freezable.IsFrozen">
      <summary vsli:raw="Gets a value that indicates whether the object is currently modifiable.">获取一个值，该值指示对象当前是否可修改。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object is frozen and cannot be modified; &lt;see langword=&quot;false&quot; /&gt; if the object can be modified.">如果该对象已被冻结且无法修改，则为 <see langword="true" />；如果可以修改该对象，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Input.FocusNavigationDirection">
      <summary vsli:raw="Specifies the direction within a user interface (UI) in which a desired focus change request is attempted. The direction is either based on tab order or by relative direction in layout.">指定用户界面 (UI) 内尝试所需焦点更改请求的方向。 该方向基于 Tab 键顺序，或者根据布局中的相关方向。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Down">
      <summary vsli:raw="Move focus to another focusable element downwards from the currently focused element.">将焦点移至当前设定焦点的元素下部的另一个可获得焦点的元素。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.First">
      <summary vsli:raw="Move focus to the first focusable element in tab order. Not supported for &lt;see cref=&quot;M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)&quot; /&gt;.">按照 Tab 键顺序将焦点移至第一个可获得焦点的元素。 对于 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />，不受支持。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Last">
      <summary vsli:raw="Move focus to the last focusable element in tab order. Not supported for &lt;see cref=&quot;M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)&quot; /&gt;.">按照 Tab 键顺序将焦点移至最后一个可获得焦点的元素。 对于 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />，不受支持。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Left">
      <summary vsli:raw="Move focus to another focusable element to the left of the currently focused element.">将焦点移至当前设定焦点的元素左侧的另一个可获得焦点的元素。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Next">
      <summary vsli:raw="Move focus to the next focusable element in tab order. Not supported for &lt;see cref=&quot;M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)&quot; /&gt;.">按照 Tab 键顺序将焦点移至下一个可获得焦点的元素。 对于 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />，不受支持。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Previous">
      <summary vsli:raw="Move focus to the previous focusable element in tab order. Not supported for &lt;see cref=&quot;M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)&quot; /&gt;.">按照 Tab 键顺序将焦点移至前一个可获得焦点的元素。 对于 <see cref="M:System.Windows.UIElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)" />，不受支持。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Right">
      <summary vsli:raw="Move focus to another focusable element to the right of the currently focused element.">将焦点移至当前设定焦点的元素右侧的另一个可获得焦点的元素。</summary>
    </member>
    <member name="F:System.Windows.Input.FocusNavigationDirection.Up">
      <summary vsli:raw="Move focus to another focusable element upwards from the currently focused element.">将焦点移至当前设定焦点的元素上部的另一个可获得焦点的元素。</summary>
    </member>
    <member name="T:System.Windows.Input.Key">
      <summary vsli:raw="Specifies the possible key values on a keyboard.">指定键盘上可能的键值。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.A">
      <summary vsli:raw="The A key.">A 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC1">
      <summary vsli:raw="The ABNT_C1 (Brazilian) key.">ABNT_C1（巴西）键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.AbntC2">
      <summary vsli:raw="The ABNT_C2 (Brazilian) key.">ABNT_C2（巴西）键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Add">
      <summary vsli:raw="The Add key.">加号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Apps">
      <summary vsli:raw="The Application key (Microsoft Natural Keyboard). Also known as the Menu key, as it displays an application-specific context menu.">应用程序键 (Microsoft Natural Keyboard)。 也称为菜单键，因为它显示特定于应用程序的上下文菜单。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Attn">
      <summary vsli:raw="The ATTN key.">ATTN 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.B">
      <summary vsli:raw="The B key.">B 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Back">
      <summary vsli:raw="The Backspace key.">Backspace 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserBack">
      <summary vsli:raw="The Browser Back key.">浏览器后退键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserFavorites">
      <summary vsli:raw="The Browser Favorites key.">浏览器收藏键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserForward">
      <summary vsli:raw="The Browser Forward key.">浏览器前进键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserHome">
      <summary vsli:raw="The Browser Home key.">浏览器主页键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserRefresh">
      <summary vsli:raw="The Browser Refresh key.">浏览器刷新键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserSearch">
      <summary vsli:raw="The Browser Search key.">浏览器搜索键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.BrowserStop">
      <summary vsli:raw="The Browser Stop key.">浏览器停止键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.C">
      <summary vsli:raw="The C key.">C 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Cancel">
      <summary vsli:raw="The Cancel key.">Cancel 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Capital">
      <summary vsli:raw="The Caps Lock key.">Caps Lock 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CapsLock">
      <summary vsli:raw="The Caps Lock key.">Caps Lock 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Clear">
      <summary vsli:raw="The Clear key.">Clear 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.CrSel">
      <summary vsli:raw="The CRSEL key.">CRSEL 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D">
      <summary vsli:raw="The D key.">D 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D0">
      <summary vsli:raw="The 0 (zero) key.">0 （零）键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D1">
      <summary vsli:raw="The 1 (one) key.">1 （一）键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D2">
      <summary vsli:raw="The 2 key.">2 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D3">
      <summary vsli:raw="The 3 key.">3 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D4">
      <summary vsli:raw="The 4 key.">4 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D5">
      <summary vsli:raw="The 5 key.">5 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D6">
      <summary vsli:raw="The 6 key.">6 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D7">
      <summary vsli:raw="The 7 key.">7 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D8">
      <summary vsli:raw="The 8 key.">8 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.D9">
      <summary vsli:raw="The 9 key.">9 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeAlphanumeric">
      <summary vsli:raw="The DBE_ALPHANUMERIC key.">DBE_ALPHANUMERIC 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeCodeInput">
      <summary vsli:raw="The DBE_CODEINPUT key.">DBE_CODEINPUT 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDbcsChar">
      <summary vsli:raw="The DBE_DBCSCHAR key.">DBE_DBCSCHAR 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeDetermineString">
      <summary vsli:raw="The DBE_DETERMINESTRING key.">DBE_DETERMINESTRING 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterDialogConversionMode">
      <summary vsli:raw="The DBE_ENTERDLGCONVERSIONMODE key.">DBE_ENTERDLGCONVERSIONMODE 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterImeConfigureMode">
      <summary vsli:raw="The DBE_ENTERIMECONFIGMODE key.">DBE_ENTERIMECONFIGMODE 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeEnterWordRegisterMode">
      <summary vsli:raw="The DBE_ENTERWORDREGISTERMODE key.">DBE_ENTERWORDREGISTERMODE 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeFlushString">
      <summary vsli:raw="The DBE_FLUSHSTRING key.">DBE_FLUSHSTRING 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeHiragana">
      <summary vsli:raw="The DBE_HIRAGANA key.">DBE_HIRAGANA 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeKatakana">
      <summary vsli:raw="The DBE_KATAKANA key.">DBE_KATAKANA 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoCodeInput">
      <summary vsli:raw="The DBE_NOCODEINPUT key.">DBE_NOCODEINPUT 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeNoRoman">
      <summary vsli:raw="The DBE_NOROMAN key.">DBE_NOROMAN 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeRoman">
      <summary vsli:raw="The DBE_ROMAN key.">DBE_ROMAN 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DbeSbcsChar">
      <summary vsli:raw="The DBE_SBCSCHAR key.">DBE_SBCSCHAR 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.DeadCharProcessed">
      <summary vsli:raw="The key is used with another key to create a single combined character.">该键与另一个键配合使用，用于创建单一的组合字符。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Decimal">
      <summary vsli:raw="The Decimal key.">句点键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Delete">
      <summary vsli:raw="The Delete key."> Delete 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Divide">
      <summary vsli:raw="The Divide key.">除号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Down">
      <summary vsli:raw="The Down Arrow key.">Down Arrow 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.E">
      <summary vsli:raw="The E key.">E 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.End">
      <summary vsli:raw="The End key.">End 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Enter">
      <summary vsli:raw="The Enter key.">Enter 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.EraseEof">
      <summary vsli:raw="The ERASE EOF key.">ERASE EOF 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Escape">
      <summary vsli:raw="The ESC key.">ESC 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Execute">
      <summary vsli:raw="The Execute key.">Execute 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ExSel">
      <summary vsli:raw="The EXSEL key.">EXSEL 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F">
      <summary vsli:raw="The F key.">F 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F1">
      <summary vsli:raw="The F1 key.">F1 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F10">
      <summary vsli:raw="The F10 key.">F10 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F11">
      <summary vsli:raw="The F11 key.">F11 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F12">
      <summary vsli:raw="The F12 key.">F12 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F13">
      <summary vsli:raw="The F13 key.">F13 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F14">
      <summary vsli:raw="The F14 key.">F14 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F15">
      <summary vsli:raw="The F15 key.">F15 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F16">
      <summary vsli:raw="The F16 key.">F16 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F17">
      <summary vsli:raw="The F17 key.">F17 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F18">
      <summary vsli:raw="The F18 key.">F18 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F19">
      <summary vsli:raw="The F19 key.">F19 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F2">
      <summary vsli:raw="The F2 key.">F2 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F20">
      <summary vsli:raw="The F20 key.">F20 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F21">
      <summary vsli:raw="The F21 key.">F21 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F22">
      <summary vsli:raw="The F22 key.">F22 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F23">
      <summary vsli:raw="The F23 key.">F23 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F24">
      <summary vsli:raw="The F24 key.">F24 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F3">
      <summary vsli:raw="The F3 key.">F3 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F4">
      <summary vsli:raw="The F4 key.">F4 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F5">
      <summary vsli:raw="The F5 key.">F5 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F6">
      <summary vsli:raw="The F6 key.">F6 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F7">
      <summary vsli:raw="The F7 key.">F7 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F8">
      <summary vsli:raw="The F8 key.">F8 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.F9">
      <summary vsli:raw="The F9 key.">F9 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.FinalMode">
      <summary vsli:raw="The IME Final mode key.">IME Final 模式键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.G">
      <summary vsli:raw="The G key.">G 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.H">
      <summary vsli:raw="The H key.">H 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HangulMode">
      <summary vsli:raw="The IME Hangul mode key.">IME Hangul 模式键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.HanjaMode">
      <summary vsli:raw="The IME Hanja mode key.">IME Hanja 模式键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Help">
      <summary vsli:raw="The Help key.">Help 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Home">
      <summary vsli:raw="The Home key.">Home 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.I">
      <summary vsli:raw="The I key.">I 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeAccept">
      <summary vsli:raw="The IME Accept key.">IME Accept 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeConvert">
      <summary vsli:raw="The IME Convert key.">IME Convert 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeModeChange">
      <summary vsli:raw="The IME Mode change request.">IME 模式更改请求。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeNonConvert">
      <summary vsli:raw="The IME NonConvert key.">IME NonConvert 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.ImeProcessed">
      <summary vsli:raw="A special key masking the real key being processed by an IME.">用于屏蔽 IME 正在处理的真实键的特殊键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Insert">
      <summary vsli:raw="The Insert key.">Insert 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.J">
      <summary vsli:raw="The J key.">J 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.JunjaMode">
      <summary vsli:raw="The IME Junja mode key.">IME Junja 模式键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.K">
      <summary vsli:raw="The K key.">K 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanaMode">
      <summary vsli:raw="The IME Kana mode key.">IME Kana 模式键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.KanjiMode">
      <summary vsli:raw="The IME Kanji mode key.">IME Kanji 模式键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.L">
      <summary vsli:raw="The L key.">L 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication1">
      <summary vsli:raw="The Launch Application1 key.">启动应用程序 1 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchApplication2">
      <summary vsli:raw="The Launch Application2 key.">启动应用程序 2 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LaunchMail">
      <summary vsli:raw="The Launch Mail key.">启动邮件键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Left">
      <summary vsli:raw="The Left Arrow key.">Left Arrow 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftAlt">
      <summary vsli:raw="The left ALT key.">左 ALT 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftCtrl">
      <summary vsli:raw="The left CTRL key.">左 CTRL 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LeftShift">
      <summary vsli:raw="The left Shift key.">左 Shift 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LineFeed">
      <summary vsli:raw="The Linefeed key.">Linefeed 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.LWin">
      <summary vsli:raw="The left Windows logo key (Microsoft Natural Keyboard).">左 Windows 徽标键 (Microsoft Natural Keyboard)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.M">
      <summary vsli:raw="The M key.">M 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaNextTrack">
      <summary vsli:raw="The Media Next Track key.">媒体下一曲目键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPlayPause">
      <summary vsli:raw="The Media Play Pause key.">媒体暂停播放键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaPreviousTrack">
      <summary vsli:raw="The Media Previous Track key.">媒体上一曲目键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.MediaStop">
      <summary vsli:raw="The Media Stop key.">媒体停止键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Multiply">
      <summary vsli:raw="The Multiply key.">乘号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.N">
      <summary vsli:raw="The N key.">N 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Next">
      <summary vsli:raw="The Page Down key.">Page Down 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NoName">
      <summary vsli:raw="A constant reserved for future use.">留待将来使用的常数。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.None">
      <summary vsli:raw="No key pressed.">不按任何键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumLock">
      <summary vsli:raw="The Num Lock key.">Num Lock 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad0">
      <summary vsli:raw="The 0 key on the numeric keypad.">数字键盘上的 0 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad1">
      <summary vsli:raw="The 1 key on the numeric keypad.">数字键盘上的 1 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad2">
      <summary vsli:raw="The 2 key on the numeric keypad.">数字键盘上的 2 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad3">
      <summary vsli:raw="The 3 key on the numeric keypad.">数字键盘上的 3 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad4">
      <summary vsli:raw="The 4 key on the numeric keypad.">数字键盘上的 4 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad5">
      <summary vsli:raw="The 5 key on the numeric keypad.">数字键盘上的 5 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad6">
      <summary vsli:raw="The 6 key on the numeric keypad.">数字键盘上的 6 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad7">
      <summary vsli:raw="The 7 key on the numeric keypad.">数字键盘上的 7 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad8">
      <summary vsli:raw="The 8 key on the numeric keypad.">数字键盘上的 8 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.NumPad9">
      <summary vsli:raw="The 9 key on the numeric keypad.">数字键盘上的 9 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.O">
      <summary vsli:raw="The O key.">O 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem1">
      <summary vsli:raw="The OEM 1 key.">OEM 1 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem102">
      <summary vsli:raw="The OEM 102 key.">OEM 102 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem2">
      <summary vsli:raw="The OEM 2 key.">OEM 2 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem3">
      <summary vsli:raw="The OEM 3 key.">OEM 3 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem4">
      <summary vsli:raw="The OEM 4 key.">OEM 4 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem5">
      <summary vsli:raw="The OEM 5 key.">OEM 5 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem6">
      <summary vsli:raw="The OEM 6 key.">OEM 6 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem7">
      <summary vsli:raw="The OEM 7 key.">OEM 7 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Oem8">
      <summary vsli:raw="The OEM 8 key.">OEM 8 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAttn">
      <summary vsli:raw="The OEM ATTN key.">OEM ATTN 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemAuto">
      <summary vsli:raw="The OEM AUTO key.">OEM AUTO 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackslash">
      <summary vsli:raw="The OEM Backslash key.">OEM 反斜杠键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemBackTab">
      <summary vsli:raw="The OEM BACKTAB key.">OEM BACKTAB 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemClear">
      <summary vsli:raw="The OEM Clear key.">OEM 清除键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCloseBrackets">
      <summary vsli:raw="The OEM Close Brackets key.">OEM 右大括号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemComma">
      <summary vsli:raw="The OEM Comma key.">OEM 逗号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemCopy">
      <summary vsli:raw="The OEM COPY key.">OEM COPY 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemEnlw">
      <summary vsli:raw="The OEM ENLW key.">OEM ENLW 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemFinish">
      <summary vsli:raw="The OEM FINISH key.">OEM FINISH 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemMinus">
      <summary vsli:raw="The OEM Minus key.">OEM 减号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemOpenBrackets">
      <summary vsli:raw="The OEM Open Brackets key.">OEM 左大括号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPeriod">
      <summary vsli:raw="The OEM Period key.">OEM 句号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPipe">
      <summary vsli:raw="The OEM Pipe key.">OEM 管道键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemPlus">
      <summary vsli:raw="The OEM Addition key.">OEM 加号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuestion">
      <summary vsli:raw="The OEM Question key.">OEM 问号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemQuotes">
      <summary vsli:raw="The OEM Quotes key.">OEM 引号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemSemicolon">
      <summary vsli:raw="The OEM Semicolon key.">OEM 分号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.OemTilde">
      <summary vsli:raw="The OEM Tilde key.">OEM 颚化符键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.P">
      <summary vsli:raw="The P key.">P 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pa1">
      <summary vsli:raw="The PA1 key.">PA1 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageDown">
      <summary vsli:raw="The Page Down key.">Page Down 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PageUp">
      <summary vsli:raw="The Page Up key.">Page Up 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Pause">
      <summary vsli:raw="The Pause key.">Pause 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Play">
      <summary vsli:raw="The PLAY key.">播放键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Print">
      <summary vsli:raw="The Print key.">Print 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.PrintScreen">
      <summary vsli:raw="The Print Screen key.">Print Screen 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Prior">
      <summary vsli:raw="The Page Up key.">Page Up 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Q">
      <summary vsli:raw="The Q key.">Q 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.R">
      <summary vsli:raw="The R key.">R 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Return">
      <summary vsli:raw="The Return key.">Return 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Right">
      <summary vsli:raw="The Right Arrow key.">Right Arrow 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightAlt">
      <summary vsli:raw="The right ALT key.">右 ALT 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightCtrl">
      <summary vsli:raw="The right CTRL key.">右 CTRL 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RightShift">
      <summary vsli:raw="The right Shift key.">右 Shift 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.RWin">
      <summary vsli:raw="The right Windows logo key (Microsoft Natural Keyboard).">右 Windows 徽标键 (Microsoft Natural Keyboard)。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.S">
      <summary vsli:raw="The S key.">S 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Scroll">
      <summary vsli:raw="The Scroll Lock key.">Scroll Lock 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Select">
      <summary vsli:raw="The Select key.">Select 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.SelectMedia">
      <summary vsli:raw="The Select Media key.">选择媒体键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Separator">
      <summary vsli:raw="The Separator key.">分隔符键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Sleep">
      <summary vsli:raw="The Computer Sleep key.">计算机休眠键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Snapshot">
      <summary vsli:raw="The Print Screen key.">Print Screen 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Space">
      <summary vsli:raw="The Spacebar key.">Spacebar 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Subtract">
      <summary vsli:raw="The Subtract key.">减号键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.System">
      <summary vsli:raw="A special key masking the real key being processed as a system key.">用于屏蔽作为系统键处理的真实键的特殊键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.T">
      <summary vsli:raw="The T key.">T 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Tab">
      <summary vsli:raw="The Tab key.">Tab 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.U">
      <summary vsli:raw="The U key.">U 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Up">
      <summary vsli:raw="The Up Arrow key.">Up Arrow 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.V">
      <summary vsli:raw="The V key.">V 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeDown">
      <summary vsli:raw="The Volume Down key.">音量减小键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeMute">
      <summary vsli:raw="The Volume Mute key.">静音键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.VolumeUp">
      <summary vsli:raw="The Volume Up key.">音量增大键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.W">
      <summary vsli:raw="The W key.">W 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.X">
      <summary vsli:raw="The X key.">X 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Y">
      <summary vsli:raw="The Y key.">Y 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Z">
      <summary vsli:raw="The Z key.">Z 键。</summary>
    </member>
    <member name="F:System.Windows.Input.Key.Zoom">
      <summary vsli:raw="The ZOOM key.">缩放键。</summary>
    </member>
    <member name="T:System.Windows.Input.KeyConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; object to and from other types.">在 <see cref="T:System.Windows.Input.Key" /> 对象与其他类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Input.Key" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object of the specified type can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;, using the specified context.">确定是否可使用指定上下文，将指定类型的对象转换为 <see cref="T:System.Windows.Input.Key" /> 的实例。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="sourceType" vsli:raw="The type being evaluated for conversion.">要进行计算以供转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;sourceType&quot; /&gt; is of type &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的类型是 <paramref name="sourceType" />，则为 <see cref="T:System.String" /> ；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; can be converted to the specified type, using the specified context.">确定是否可使用指定的上下文将 <see cref="T:System.Windows.Input.Key" /> 的实例转换为指定类型。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="destinationType" vsli:raw="The type being evaluated for conversion.">要进行计算以供转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;destinationType&quot; /&gt; is of type &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see langword="true" /> 的类型是 <paramref name="destinationType" />，则为 <see cref="T:System.String" /> ；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified object to a &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;, using the specified context.">尝试使用指定上下文将指定对象转换为 <see cref="T:System.Windows.Input.Key" />。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture" vsli:raw="Culture specific information.">特定于区域性的信息。</param>
      <param name="source" vsli:raw="The object to convert.">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; cannot be converted.">无法转换 <paramref name="source" />。</exception>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert a &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; to the specified type, using the specified context.">尝试使用指定上下文将 <see cref="T:System.Windows.Input.Key" /> 转换为指定类型。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture" vsli:raw="Culture specific information.">特定于区域性的信息。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">对象要转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted to &lt;paramref name=&quot;destinationType&quot; /&gt;.">
        <paramref name="value" /> 无法转换为 <paramref name="destinationType" />。</exception>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
    </member>
    <member name="T:System.Windows.Input.KeyInterop">
      <summary vsli:raw="Provides static methods to convert between Win32 Virtual-Keys and the WPF &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; enumeration.">提供在 Win32 虚拟键和 WPF <see cref="T:System.Windows.Input.Key" /> 枚举之间进行转换的静态方法。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.KeyFromVirtualKey(System.Int32)">
      <summary vsli:raw="Converts a Win32 Virtual-Key into WPF &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;.">将 Win32 虚拟键转换为 WPF<see cref="T:System.Windows.Input.Key" />。</summary>
      <param name="virtualKey" vsli:raw="The virtual key to convert.">要转换的虚拟键。</param>
      <returns vsli:raw="The WPF key.">WPF 键。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyInterop.VirtualKeyFromKey(System.Windows.Input.Key)">
      <summary vsli:raw="Converts a WPF &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; into a Win32 Virtual-Key.">将 WPF<see cref="T:System.Windows.Input.Key" /> 转换为 Win32 虚拟键。</summary>
      <param name="key" vsli:raw="The WPF to convert.">要转换的 WPF。</param>
      <returns vsli:raw="The Win32 Virtual-Key.">Win32 虚拟键。</returns>
    </member>
    <member name="T:System.Windows.Input.KeyValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;.">将 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Input.Key" /> 的实例进行来回转换。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Input.KeyValueSerializer&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Input.KeyValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be convert to an instance of &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;.">确定指定的 <see cref="T:System.String" /> 是否可以转换为 <see cref="T:System.Windows.Input.Key" /> 的实例。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">要进行计算以供转换的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">始终返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if the specified &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">确定是否可将指定的 <see cref="T:System.Windows.Input.Key" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The key to evaluate for conversion.">要进行计算以供转换的键。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;.">将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Input.Key" />。</summary>
      <param name="value" vsli:raw="The string to convert into a &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;.">要转换为 <see cref="T:System.Windows.Input.Key" /> 的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">基于所提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Input.Key" /> 新实例。</returns>
    </member>
    <member name="M:System.Windows.Input.KeyValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">将 <see cref="T:System.Windows.Input.Key" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The key to convert into a string.">要转换为字符串的键。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="An invariant string representation of the specified &lt;see cref=&quot;T:System.Windows.Input.Key&quot; /&gt;.">指定 <see cref="T:System.Windows.Input.Key" /> 的固定字符串表示形式。</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeys">
      <summary vsli:raw="Specifies the set of modifier keys.">指定修改键集。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Alt">
      <summary vsli:raw="The ALT key.">Alt 键。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Control">
      <summary vsli:raw="The CTRL key.">CTRL 键。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.None">
      <summary vsli:raw="No modifiers are pressed.">没有按下任何修饰符。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Shift">
      <summary vsli:raw="The SHIFT key.">Shift 键。</summary>
    </member>
    <member name="F:System.Windows.Input.ModifierKeys.Windows">
      <summary vsli:raw="The Windows logo key.">Windows 徽标键。</summary>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysConverter">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; object to and from other types.">在 <see cref="T:System.Windows.Input.ModifierKeys" /> 对象与其他类型之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Input.ModifierKeysConverter&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Input.ModifierKeysConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object of the specified type can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt;, using the specified context.">确定是否可使用指定上下文，将指定类型的对象转换为 <see cref="T:System.Windows.Input.ModifierKeys" /> 的实例。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="sourceType" vsli:raw="The type being evaluated for conversion.">要进行计算以供转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;sourceType&quot; /&gt; is type &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="sourceType" /> 为 <see cref="T:System.String" /> 类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; can be converted to the specified type, using the specified context.">确定是否可使用指定的上下文将 <see cref="T:System.Windows.Input.ModifierKeys" /> 的实例转换为指定类型。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="destinationType" vsli:raw="The type being evaluated for conversion.">要进行计算以供转换的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;destinationType&quot; /&gt; is type &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="destinationType" /> 为 <see cref="T:System.String" /> 类型，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified object to a &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt;, using the specified context.">尝试使用指定上下文将指定对象转换为 <see cref="T:System.Windows.Input.ModifierKeys" />。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture" vsli:raw="Culture specific information.">特定于区域性的信息。</param>
      <param name="source" vsli:raw="The object to convert.">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; cannot be converted.">无法转换 <paramref name="source" />。</exception>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert a &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; to the specified type, using the specified context.">尝试使用指定上下文将 <see cref="T:System.Windows.Input.ModifierKeys" /> 转换为指定类型。</summary>
      <param name="context" vsli:raw="A format context that provides information about the environment from which this converter is being invoked.">一种格式上下文，可提供有关要从中调用此转换器的环境的信息。</param>
      <param name="culture" vsli:raw="Culture specific information.">特定于区域性的信息。</param>
      <param name="value" vsli:raw="The object to convert.">要转换的对象。</param>
      <param name="destinationType" vsli:raw="The type to convert the object to.">对象要转换为的类型。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;destinationType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="destinationType" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; does not map to a valid &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt;.">
        <paramref name="value" /> 无法映射到有效 <see cref="T:System.Windows.Input.ModifierKeys" />。</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; cannot be converted.">无法转换 <paramref name="value" />。</exception>
      <returns vsli:raw="The converted object.">被转换的对象。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysConverter.IsDefinedModifierKeys(System.Windows.Input.ModifierKeys)">
      <summary vsli:raw="Determines whether the specified value is a valid &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; value.">确定指定值是否为有效的 <see cref="T:System.Windows.Input.ModifierKeys" /> 值。</summary>
      <param name="modifierKeys" vsli:raw="The value to check for validity.">要检查其有效性的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if input is a valid &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; value; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果输入是有效的 <see cref="T:System.Windows.Input.ModifierKeys" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Input.ModifierKeysValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt;.">将 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Input.ModifierKeys" /> 的实例进行来回转换。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Input.ModifierKeysValueSerializer&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Input.ModifierKeysValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if the specified &lt;see cref=&quot;T:System.String&quot; /&gt; can be convert to an instance of &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt;.">确定指定的 <see cref="T:System.String" /> 是否可以转换为 <see cref="T:System.Windows.Input.ModifierKeys" /> 的实例。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">要进行计算以供转换的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="Always returns &lt;see langword=&quot;true&quot; /&gt;.">始终返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if the specified &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">确定是否可将指定的 <see cref="T:System.Windows.Input.ModifierKeys" /> 转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The modifier keys to evaluate for conversion.">要进行计算以供转换的修改键。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; value.">将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Input.ModifierKeys" /> 值。</summary>
      <param name="value" vsli:raw="The string to convert into a &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt;.">要转换为 <see cref="T:System.Windows.Input.ModifierKeys" /> 的字符串。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">基于所提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Input.ModifierKeys" /> 新实例。</returns>
    </member>
    <member name="M:System.Windows.Input.ModifierKeysValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">将 <see cref="T:System.Windows.Input.ModifierKeys" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="The key to convert into a string.">要转换为字符串的键。</param>
      <param name="context" vsli:raw="Context information that is used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="An invariant string representation of the specified &lt;see cref=&quot;T:System.Windows.Input.ModifierKeys&quot; /&gt; value.">指定 <see cref="T:System.Windows.Input.ModifierKeys" /> 值的固定字符串表示形式。</returns>
    </member>
    <member name="T:System.Windows.Input.TraversalRequest">
      <summary vsli:raw="Represents a request to move focus to another control.">表示要将焦点移到另一个控件的请求。</summary>
    </member>
    <member name="M:System.Windows.Input.TraversalRequest.#ctor(System.Windows.Input.FocusNavigationDirection)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Input.TraversalRequest&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Input.TraversalRequest" /> 类的新实例。</summary>
      <param name="focusNavigationDirection" vsli:raw="The intended direction of the focus traversal, as a value of the enumeration.">预期的焦点遍历方向，作为一个枚举值。</param>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.FocusNavigationDirection">
      <summary vsli:raw="Gets the traversal direction.">获取遍历方向。</summary>
      <returns vsli:raw="One of the traversal direction enumeration values.">遍历方向枚举值之一。</returns>
    </member>
    <member name="P:System.Windows.Input.TraversalRequest.Wrapped">
      <summary vsli:raw="Gets or sets a value that indicates whether focus traversal has reached the end of child elements that can have focus.">获取或设置一个值，该值指示焦点遍历是否已到达可以具有焦点的最后一个子元素。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this traversal has reached the end of child elements that can have focus; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;false&quot; /&gt;.">如果此遍历已到达可以具有焦点的最后一个子元素；则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Int32Rect">
      <summary vsli:raw="Describes the width, height, and location of an integer rectangle.">描述整数矩形的宽度、高度和位置。</summary>
    </member>
    <member name="M:System.Windows.Int32Rect.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; with the specified &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt; coordinates and the specified &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt;.">用指定的 <see cref="T:System.Windows.Int32Rect" /> 和 <see cref="P:System.Windows.Int32Rect.X" /> 坐标以及指定的 <see cref="P:System.Windows.Int32Rect.Y" /> 和 <see cref="P:System.Windows.Int32Rect.Width" /> 来初始化 <see cref="P:System.Windows.Int32Rect.Height" /> 的新实例。</summary>
      <param name="x" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt; of the new &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; instance which specifies the x-coordinate of the top-left corner of the rectangle.">新的 <see cref="P:System.Windows.Int32Rect.X" /> 实例的 <see cref="T:System.Windows.Int32Rect" />，用于指定矩形左上角的 x 坐标。</param>
      <param name="y" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt; of the new &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; instance which specifies the y-coordinate of the top-left corner of the rectangle.">新的 <see cref="P:System.Windows.Int32Rect.Y" /> 实例的 <see cref="T:System.Windows.Int32Rect" />，用于指定矩形左上角的 y 坐标。</param>
      <param name="width" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt; of the new &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; instance which specifies the width of the rectangle.">新的 <see cref="P:System.Windows.Int32Rect.Width" /> 实例的 <see cref="T:System.Windows.Int32Rect" />，用于指定矩形的宽度。</param>
      <param name="height" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt; of the new &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; instance which specifies the height of the rectangle.">新的 <see cref="P:System.Windows.Int32Rect.Height" /> 实例的 <see cref="T:System.Windows.Int32Rect" />，用于指定矩形的高度。</param>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified rectangle is equal to this rectangle.">确定指定的矩形是否与此矩形相等。</summary>
      <param name="o" vsli:raw="The object to compare to the current rectangle.">要与当前矩形进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; and has the same &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt; as this rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="o" /> 是 <see cref="T:System.Windows.Int32Rect" /> 且与此矩形具有相同的 <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect)">
      <summary vsli:raw="Determines whether the specified rectangle is equal to this rectangle.">确定指定的矩形是否与此矩形相等。</summary>
      <param name="value" vsli:raw="The rectangle to compare to the current rectangle.">要与当前矩形进行比较的矩形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; has the same &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt; as this rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 与此矩形具有相同的 <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Equals(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary vsli:raw="Determines whether the specified rectangles are equal.">确定指定的矩形是否相等。</summary>
      <param name="int32Rect1" vsli:raw="The first rectangle to compare.">要比较的第一个矩形。</param>
      <param name="int32Rect2" vsli:raw="The second rectangle to compare.">要比较的第二个矩形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;int32Rect1&quot; /&gt; and &lt;paramref name=&quot;int32Rect2&quot; /&gt; have the same &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="int32Rect1" /> 和 <paramref name="int32Rect2" /> 具有相同的 <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" />，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.GetHashCode">
      <summary vsli:raw="Creates a hash code from this rectangle's &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt; values.">从此矩形的 <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" /> 值创建哈希代码。</summary>
      <returns vsli:raw="This rectangle's hash code.">此矩形的哈希代码。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Equality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary vsli:raw="Compares two rectangles for exact equality.">比较两个矩形是否完全相等。</summary>
      <param name="int32Rect1" vsli:raw="The first rectangle to compare.">要比较的第一个矩形。</param>
      <param name="int32Rect2" vsli:raw="The second rectangle to compare.">要比较的第二个矩形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;int32Rect1&quot; /&gt; and &lt;paramref name=&quot;int32Rect2&quot; /&gt; have the same &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="int32Rect1" /> 和 <paramref name="int32Rect2" /> 具有相同的 <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" />，则返回 <see langword="true" />；否则，返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.op_Inequality(System.Windows.Int32Rect,System.Windows.Int32Rect)">
      <summary vsli:raw="Compares two rectangles for inequality.">比较两个矩形是否不相等。</summary>
      <param name="int32Rect1" vsli:raw="The first rectangle to compare.">要比较的第一个矩形。</param>
      <param name="int32Rect2" vsli:raw="The second rectangle to compare.">要比较的第二个矩形。</param>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;int32Rect1&quot; /&gt; and &lt;paramref name=&quot;int32Rect2&quot; /&gt; have the same &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt;; otherwise, if all of these values are the same, then &lt;see langword=&quot;true&quot; /&gt;.">如果 <paramref name="int32Rect1" /> 和 <paramref name="int32Rect2" /> 具有相同的 <see cref="P:System.Windows.Int32Rect.X" />、<see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" />，则返回 <see langword="false" />；否则，如果所有这些值都相同，则返回 <see langword="true" />。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.Parse(System.String)">
      <summary vsli:raw="Creates an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; structure from the specified &lt;see cref=&quot;T:System.String&quot; /&gt; representation.">从指定的 <see cref="T:System.Windows.Int32Rect" /> 表示形式创建一个 <see cref="T:System.String" /> 结构。</summary>
      <param name="source" vsli:raw="A string representation of an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">
        <see cref="T:System.Windows.Int32Rect" /> 的字符串表示形式。</param>
      <returns vsli:raw="The equivalent &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; structure.">等效的 <see cref="T:System.Windows.Int32Rect" /> 结构。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Formats the value of the current instance using the specified format.">使用指定格式对当前实例的值设置格式。</summary>
      <param name="format" vsli:raw="The format to use.">要使用的格式。</param>
      <param name="provider" vsli:raw="The provider to use to format the value.">要用于设置值格式的提供程序。</param>
      <returns vsli:raw="The value of the current instance in the specified format.">采用指定格式的当前实例的值。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString">
      <summary vsli:raw="Creates a string representation of this &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">创建此 <see cref="T:System.Windows.Int32Rect" /> 的字符串表示形式。</summary>
      <returns vsli:raw="A string containing the same &lt;see cref=&quot;P:System.Windows.Int32Rect.X&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Y&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt; values of this &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; structure.">一个字符串，其中包含与此 <see cref="P:System.Windows.Int32Rect.X" /> 结构相同的 <see cref="P:System.Windows.Int32Rect.Y" />、<see cref="P:System.Windows.Int32Rect.Width" />、<see cref="P:System.Windows.Int32Rect.Height" /> 和 <see cref="T:System.Windows.Int32Rect" /> 值。</returns>
    </member>
    <member name="M:System.Windows.Int32Rect.ToString(System.IFormatProvider)">
      <summary vsli:raw="Creates a string representation of this &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; based on the supplied &lt;see cref=&quot;T:System.IFormatProvider&quot; /&gt;.">基于提供的 <see cref="T:System.Windows.Int32Rect" /> 创建此 <see cref="T:System.IFormatProvider" /> 的字符串表示形式。</summary>
      <param name="provider" vsli:raw="The format provider to use. If provider is &lt;see langword=&quot;null&quot; /&gt;, the current culture is used.">要使用的格式提供程序。 如果提供程序为 <see langword="null" />，则使用当前区域性。</param>
      <returns vsli:raw="A string representation of this instance of &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">此 <see cref="T:System.Windows.Int32Rect" /> 实例的字符串表示形式。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Empty">
      <summary vsli:raw="Gets the empty rectangle, a special value that represents a rectangle with no position or area.">获取空矩形，这个特殊值表示没有位置或区域的矩形。</summary>
      <returns vsli:raw="An empty rectangle with no position or area.">一个没有位置或区域的空矩形。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.HasArea">
      <summary vsli:raw="Gets a value that indicates whether the &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt; properties of the &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; are greater than 0.">获取一个值，该值指示 <see cref="P:System.Windows.Int32Rect.Width" /> 的 <see cref="P:System.Windows.Int32Rect.Height" /> and <see cref="T:System.Windows.Int32Rect" /> 属性大于 0。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Windows.Int32Rect.Width&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Int32Rect.Height&quot; /&gt; properties of the &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; are greater than 0; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> 如果的 <see cref="P:System.Windows.Int32Rect.Width" /> 和 <see cref="P:System.Windows.Int32Rect.Height" /> 属性 <see cref="T:System.Windows.Int32Rect" /> 大于0，则为; 否则为 <see langword="false" /> 。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Height">
      <summary vsli:raw="Gets or sets the height of the rectangle.">获取或设置矩形的高度。</summary>
      <returns vsli:raw="The height of the rectangle. The default value is &lt;c&gt;0&lt;/c&gt;.">矩形的高度。 默认值为 <c>0</c>。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.IsEmpty">
      <summary vsli:raw="Gets a value indicating whether the rectangle is empty.">获取一个值，该值指示矩形是否为空。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the rectangle is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default value is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" /> 如果矩形为空，则为; 否则为。否则为 <see langword="false" /> 。 默认值是 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Width">
      <summary vsli:raw="Gets or sets the width of the rectangle.">获取或设置矩形的宽度。</summary>
      <returns vsli:raw="The width of the rectangle. The default value is &lt;c&gt;0&lt;/c&gt;.">矩形的宽度。 默认值为 <c>0</c>。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.X">
      <summary vsli:raw="Gets or sets the x-coordinate of the top-left corner of the rectangle.">获取或设置矩形左上角的 x 坐标。</summary>
      <returns vsli:raw="The x-coordinate of the top-left corner of the rectangle. The default value is &lt;c&gt;0&lt;/c&gt;.">矩形左上角的 x 坐标。 默认值为 <c>0</c>。</returns>
    </member>
    <member name="P:System.Windows.Int32Rect.Y">
      <summary vsli:raw="Gets or sets the y-coordinate of the top-left corner of the rectangle.">获取或设置矩形左上角的 y 坐标。</summary>
      <returns vsli:raw="The y-coordinate of the top-left corner of the rectangle. The default value is &lt;c&gt;0&lt;/c&gt;.">矩形左上角的 y 坐标。 默认值为 <c>0</c>。</returns>
    </member>
    <member name="T:System.Windows.Int32RectConverter">
      <summary vsli:raw="Converts instances of other types to and from an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">在其他类型的实例和 <see cref="T:System.Windows.Int32Rect" /> 之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Int32RectConverter&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Int32RectConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object can be converted from a given type to an instance of an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">确定是否可将一个对象从给定类型转换成 <see cref="T:System.Windows.Int32Rect" /> 的实例。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">描述类型的上下文信息。</param>
      <param name="sourceType" vsli:raw="The type of the source that is being evaluated for conversion.">正被计算用于转换的源类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted to an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可将类型转换为 <see cref="T:System.Windows.Int32Rect" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; can be converted to a different type.">确定是否可将 <see cref="T:System.Windows.Int32Rect" /> 的实例转换成其他类型。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">描述类型的上下文信息。</param>
      <param name="destinationType" vsli:raw="The desired type this &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; is being evaluated for conversion.">要计算用于转换的此 <see cref="T:System.Windows.Int32Rect" /> 的所需类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; can be converted to &lt;paramref name=&quot;destinationType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Windows.Int32Rect" /> 可转换为 <paramref name="destinationType" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified type to an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">尝试将指定类型转换成 <see cref="T:System.Windows.Int32Rect" />。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">提供转换所需的上下文信息。</param>
      <param name="culture" vsli:raw="Cultural information to respect during conversion.">要在转换过程中考虑的区域性信息。</param>
      <param name="value" vsli:raw="The object being converted.">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The specified object is NULL or is a type that cannot be converted to an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">如果指定的对象为 NULL 或者是无法转换为 <see cref="T:System.Windows.Int32Rect" /> 的类型，则引发该异常。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; created from converting &lt;paramref name=&quot;value&quot; /&gt;.">通过转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Int32Rect" />。</returns>
    </member>
    <member name="M:System.Windows.Int32RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; to a specified type.">尝试将 <see cref="T:System.Windows.Int32Rect" /> 转换为指定类型。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">提供转换所需的上下文信息。</param>
      <param name="culture" vsli:raw="Cultural information to respect during conversion.">要在转换过程中考虑的区域性信息。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; to convert.">要转换的 <see cref="T:System.Windows.Int32Rect" />。</param>
      <param name="destinationType" vsli:raw="The type to convert this &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt; to.">要将此 <see cref="T:System.Windows.Int32Rect" /> 转换为的类型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or is not an &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;, or &lt;paramref name=&quot;destinationType&quot; /&gt; is not one of the valid types for conversion.">如果 <paramref name="value" /> 为 <see langword="null" /> 或者不是 <see cref="T:System.Windows.Int32Rect" />，或者，如果 <paramref name="destinationType" /> 不是要转换的有效类型之一，则引发该异常。</exception>
      <returns vsli:raw="The object created from converting this &lt;see cref=&quot;T:System.Windows.Int32Rect&quot; /&gt;.">通过转换此 <see cref="T:System.Windows.Int32Rect" /> 创建的对象。</returns>
    </member>
    <member name="T:System.Windows.Interop.ComponentDispatcher">
      <summary vsli:raw="Enables shared control of the message pump between Win32 and WPF in interoperation scenarios.">在互操作方案中，启用 Win32 与 WPF 之间的消息泵的共享控件。</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.EnterThreadModal">
      <summary vsli:raw="Occurs when a thread becomes modal.">当线程变成模式线程时发生。</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.LeaveThreadModal">
      <summary vsli:raw="Occurs when a modal thread becomes nonmodal.">当模式线程变成非模式线程时发生。</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage">
      <summary vsli:raw="Occurs when the message pump receives a keyboard message.">当消息泵接收键盘消息时发生。</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadIdle">
      <summary vsli:raw="Occurs when the thread is idle.">当线程空闲时发生。</summary>
    </member>
    <member name="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage">
      <summary vsli:raw="Occurs when the message pump receives a keyboard message.">当消息泵接收键盘消息时发生。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PopModal">
      <summary vsli:raw="Called to indicate that a modal thread is no longer modal.">调用以指示模式线程不再是模式。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.PushModal">
      <summary vsli:raw="Called to indicate that the thread is modal.">调用以指示该线程是模式。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseIdle">
      <summary vsli:raw="Called to indicate that a thread is idle.">调用以指示某线程处于空闲状态。</summary>
    </member>
    <member name="M:System.Windows.Interop.ComponentDispatcher.RaiseThreadMessage(System.Windows.Interop.MSG@)">
      <summary vsli:raw="Indicates that a new message is available for possible handling.">指示会对可能的处理显示新消息。</summary>
      <param name="msg" vsli:raw="The message and its associated data.">该消息及其关联数据。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if one of the modules listening to the message loop processed the message. The owner of the message loop should ignore the message. &lt;see langword=&quot;false&quot; /&gt;, if the message was not processed. In this case, the owner of the message pump should call the Win32 function TranslateMessage followed by DispatchMessage.">如果侦听消息循环的任一模块已处理了该消息，则为 <see langword="true" />。 消息循环的所有者应忽略该消息。 如果未处理该消息，则为 <see langword="false" />。 在这种情况下，消息泵的所有者应调用 Win32 函数 TranslateMessage（后跟 DispatchMessage）。</returns>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.CurrentKeyboardMessage">
      <summary vsli:raw="Gets the last message that was raised.">获取已引发的最后一条消息。</summary>
      <returns vsli:raw="The last message.">最后一条消息。</returns>
    </member>
    <member name="P:System.Windows.Interop.ComponentDispatcher.IsThreadModal">
      <summary vsli:raw="Gets a value that indicates whether the thread is modal.">获取一个值，该值指示线程是否是模式。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the thread is modal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果线程是模式，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSink">
      <summary vsli:raw="Provides a keyboard sink for components that manages tabbing, accelerators, and mnemonics across interop boundaries and between HWNDs. This interface implements keyboard message management in WPF-Win32 interoperation scenarios.">为跨互操作边界和在 HWND 之间管理 Tab 键次序、快捷键、助记键的组件提供键盘接收器。 此接口实现 WPF-Win32 互操作方案中的键盘消息管理。</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.HasFocusWithin">
      <summary vsli:raw="Gets a value that indicates whether the sink or one of its contained components has focus.">获取一个值，该值指示接收器或其所包含的组件之一是否具有焦点。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sink or one of its contained components has focus; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果接收器或其所包含的组件之一具有焦点，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary vsli:raw="Called when one of the mnemonics (access keys) for this sink is invoked.">调用此接收器的助记键（访问键）之一时调用。</summary>
      <param name="msg" vsli:raw="The message for the mnemonic and associated data. Do not modify this message structure. It is passed by reference for performance reasons only.">助记键和关联数据的消息。 请勿修改此消息结构。 仅由于性能原因，通过引用来传递此消息。</param>
      <param name="modifiers" vsli:raw="Modifier keys.">修改键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果消息已处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.RegisterKeyboardInputSink(System.Windows.Interop.IKeyboardInputSink)">
      <summary vsli:raw="Registers the &lt;see cref=&quot;T:System.Windows.Interop.IKeyboardInputSink&quot; /&gt; interface of a contained component.">注册所包含组件的 <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 接口。</summary>
      <param name="sink" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Interop.IKeyboardInputSink&quot; /&gt; sink of the contained component.">所包含组件的 <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 接收器。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Interop.IKeyboardInputSite&quot; /&gt; site of the contained component.">所包含组件的 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 站点。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TabInto(System.Windows.Input.TraversalRequest)">
      <summary vsli:raw="Sets focus on either the first tab stop or the last tab stop of the sink.">在接收器的第一个制表位或最后一个制表位上设置焦点。</summary>
      <param name="request" vsli:raw="Specifies whether focus should be set to the first or the last tab stop.">指定是将焦点设置到第一个制表位，还是设置到最后一个制表位。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the focus has been set as requested; &lt;see langword=&quot;false&quot; /&gt;, if there are no tab stops.">如果已按要求对焦点进行了设置，则为 <see langword="true" />；如果没有制表位，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateAccelerator(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary vsli:raw="Processes keyboard input at the keydown message level.">在 keydown 消息级处理键盘输入。</summary>
      <param name="msg" vsli:raw="The message and associated data. Do not modify this structure. It is passed by reference for performance reasons only.">消息及关联数据。 请勿修改此结构。 仅由于性能原因，通过引用来传递此消息。</param>
      <param name="modifiers" vsli:raw="Modifier keys.">修改键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was handled by the method implementation; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果方法实现对该消息进行了处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSink.TranslateChar(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)">
      <summary vsli:raw="Processes WM_CHAR, WM_SYSCHAR, WM_DEADCHAR, and WM_SYSDEADCHAR input messages before &lt;see cref=&quot;M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)&quot; /&gt; is called.">在调用 <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" /> 之前处理 WM_CHAR、WM_SYSCHAR、WM_DEADCHAR 和 WM_SYSDEADCHAR 输入消息。</summary>
      <param name="msg" vsli:raw="The message and associated data. Do not modify this structure. It is passed by reference for performance reasons only.">消息及关联数据。 请勿修改此结构。 仅由于性能原因，通过引用来传递此消息。</param>
      <param name="modifiers" vsli:raw="Modifier keys.">修改键。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was processed and &lt;see cref=&quot;M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)&quot; /&gt; should not be called; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果消息已处理并且不应调用 <see cref="M:System.Windows.Interop.IKeyboardInputSink.OnMnemonic(System.Windows.Interop.MSG@,System.Windows.Input.ModifierKeys)" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSink.KeyboardInputSite">
      <summary vsli:raw="Gets or sets a reference to the component's container's &lt;see cref=&quot;T:System.Windows.Interop.IKeyboardInputSite&quot; /&gt; interface.">获取或设置对组件容器的 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 接口的引用。</summary>
      <returns vsli:raw="A reference to the container's &lt;see cref=&quot;T:System.Windows.Interop.IKeyboardInputSite&quot; /&gt; interface.">对容器的 <see cref="T:System.Windows.Interop.IKeyboardInputSite" /> 接口的引用。</returns>
    </member>
    <member name="T:System.Windows.Interop.IKeyboardInputSite">
      <summary vsli:raw="Manages keyboard focus within the container.  This interface implements keyboard message management in WPF-Win32 interoperation scenarios.">管理容器中的键盘焦点。  此接口实现 WPF-Win32 互操作方案中的键盘消息管理。</summary>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.OnNoMoreTabStops(System.Windows.Input.TraversalRequest)">
      <summary vsli:raw="Called by a contained component when it has reached its last tab stop and has no further items to tab to.">当所包含的组件到达其最后一个制表位并且按 Tab 键不能移动到其他项时，由该组件调用。</summary>
      <param name="request" vsli:raw="Specifies whether focus should be set to the first or the last tab stop.">指定是将焦点设置到第一个制表位，还是设置到最后一个制表位。</param>
      <returns vsli:raw="If this method returns &lt;see langword=&quot;true&quot; /&gt;, the site has shifted focus to another component. If this method returns &lt;see langword=&quot;false&quot; /&gt;, focus is still within the calling component. The component should &quot;wrap around&quot; and set focus to its first contained tab stop.">如果此方法返回 <see langword="true" />，则表示该站点已将焦点移动至其他组件。 如果此方法返回 <see langword="false" />，则表示焦点仍在调用组件中。 组件应该“回绕”并将焦点设置到其所包含的第一个制表位。</returns>
    </member>
    <member name="M:System.Windows.Interop.IKeyboardInputSite.Unregister">
      <summary vsli:raw="Unregisters a child keyboard input sink from this site.">从此站点中注销子键盘输入接收器。</summary>
    </member>
    <member name="P:System.Windows.Interop.IKeyboardInputSite.Sink">
      <summary vsli:raw="Gets the keyboard sink associated with this site.">获取与此站点关联的键盘接收器。</summary>
      <returns vsli:raw="The current site's &lt;see cref=&quot;T:System.Windows.Interop.IKeyboardInputSink&quot; /&gt; interface.">当前站点的 <see cref="T:System.Windows.Interop.IKeyboardInputSink" /> 接口。</returns>
    </member>
    <member name="T:System.Windows.Interop.MSG">
      <summary vsli:raw="Contains message information from a thread's message queue.">包含来自线程的消息队列的消息信息。</summary>
    </member>
    <member name="P:System.Windows.Interop.MSG.hwnd">
      <summary vsli:raw="Gets or sets the window handle (HWND) to the window whose window procedure receives the message.">获取或设置其窗口过程接收消息的窗口的窗口句柄 (HWND)。</summary>
      <returns vsli:raw="The window handle (HWND).">窗口句柄 (HWND)。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.lParam">
      <summary vsli:raw="Gets or sets the &lt;paramref name=&quot;lParam&quot; /&gt; value that specifies additional information about the message. The exact meaning depends on the value of the &lt;see cref=&quot;P:System.Windows.Interop.MSG.message&quot; /&gt; member.">获取或设置指定有关消息的其他信息的 <paramref name="lParam" /> 值。 其具体含义取决于 <see cref="P:System.Windows.Interop.MSG.message" /> 成员的值。</summary>
      <returns vsli:raw="The &lt;paramref name=&quot;lParam&quot; /&gt; value for the message.">消息的 <paramref name="lParam" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.message">
      <summary vsli:raw="Gets or sets the message identifier.">获取或设置消息标识符。</summary>
      <returns vsli:raw="The message identifier.">消息的标识符。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_x">
      <summary vsli:raw="Gets or sets the x coordinate of the cursor position on the screen, when the message was posted.">获取或设置发送消息之后屏幕上光标位置的 x 坐标。</summary>
      <returns vsli:raw="The x coordinate of the cursor position.">光标位置的 x 坐标。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.pt_y">
      <summary vsli:raw="Gets or sets the y coordinate of the cursor position on the screen, when the message was posted.">获取或设置发送消息之后屏幕上光标位置的 y 坐标。</summary>
      <returns vsli:raw="The y coordinate of the cursor position.">光标位置的 y 坐标。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.time">
      <summary vsli:raw="Gets or sets the time at which the message was posted.">获取或设置消息的发送时间。</summary>
      <returns vsli:raw="The time that the message was posted.">消息的发送时间。</returns>
    </member>
    <member name="P:System.Windows.Interop.MSG.wParam">
      <summary vsli:raw="Gets or sets the &lt;paramref name=&quot;wParam&quot; /&gt; value for the message, which specifies additional information about the message. The exact meaning depends on the value of the message.">获取或设置消息的 <paramref name="wParam" /> 值，该值指定有关该消息的其他信息。 其具体含义取决于该消息的值。</summary>
      <returns vsli:raw="The &lt;paramref name=&quot;wParam&quot; /&gt; value for the message.">消息的 <paramref name="wParam" /> 值。</returns>
    </member>
    <member name="T:System.Windows.Interop.ThreadMessageEventHandler">
      <summary vsli:raw="Represents the method that handles the &lt;see cref=&quot;E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage&quot; /&gt; and &lt;see cref=&quot;E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage&quot; /&gt; events.">表示处理 <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadFilterMessage" /> 和 <see cref="E:System.Windows.Interop.ComponentDispatcher.ThreadPreprocessMessage" /> 事件的方法。</summary>
      <param name="msg" vsli:raw="A structure with the message data.">具有消息数据的结构。</param>
      <param name="handled" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the message was handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果消息已处理，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="T:System.Windows.IWeakEventListener">
      <summary vsli:raw="Provides event listening support for classes that expect to receive events through the WeakEvent pattern and a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt;.">为希望通过 WeakEvent 模式和 <see cref="T:System.Windows.WeakEventManager" /> 接收事件的类提供事件侦听支持。</summary>
    </member>
    <member name="M:System.Windows.IWeakEventListener.ReceiveWeakEvent(System.Type,System.Object,System.EventArgs)">
      <summary vsli:raw="Receives events from the centralized event manager.">接收集中事件管理器中的事件。</summary>
      <param name="managerType" vsli:raw="The type of the &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; calling this method.">调用此方法的 <see cref="T:System.Windows.WeakEventManager" /> 的类型。</param>
      <param name="sender" vsli:raw="Object that originated the event.">发出该事件的对象。</param>
      <param name="e" vsli:raw="Event data.">事件数据。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the listener handled the event. It is considered an error by the &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; handling in WPF to register a listener for an event that the listener does not handle. Regardless, the method should return &lt;see langword=&quot;false&quot; /&gt; if it receives an event that it does not recognize or handle.">如果侦听器已对事件进行了处理，则为 <see langword="true" />。 在 WPF 中，<see cref="T:System.Windows.WeakEventManager" /> 处理为侦听器未处理的事件注册侦听器被视为错误。 无论如何，如果此方法接收到它未能识别或处理的事件，它都应该返回 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.LocalValueEntry">
      <summary vsli:raw="Represents a property identifier and the property value for a locally set dependency property.">表示本地设置的依赖属性的属性标识符和属性值。</summary>
    </member>
    <member name="M:System.Windows.LocalValueEntry.Equals(System.Object)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; instances are equal.">确定两个 <see cref="T:System.Windows.LocalValueEntry" /> 实例是否相等。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt;.">要与当前的 <see cref="T:System.Windows.LocalValueEntry" /> 进行比较的 <see cref="T:System.Windows.LocalValueEntry" />。</param>
      <returns vsli:raw="This &lt;see cref=&quot;M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)&quot; /&gt; implementation compares the values of the &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Property&quot; /&gt;, and potentially compares the values of &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Value&quot; /&gt;. The &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Property&quot; /&gt; component of a &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; is a value type, so will always be a bitwise comparison. For the &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Value&quot; /&gt; component, this implementation employs a bitwise comparison if it is a value type. For locally set properties that have reference types, the behavior is deferred to that type's equality determination mechanisms, because it just uses the == operator on the two values internally. By default, this would be a reference equality of the values and thus the equality of the entire &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; would become a reference equality.">此 <see cref="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)" /> 实现比较 <see cref="P:System.Windows.LocalValueEntry.Property" /> 的各个值，并可能比较 <see cref="P:System.Windows.LocalValueEntry.Value" /> 的各个值。 <see cref="P:System.Windows.LocalValueEntry.Property" /> 的 <see cref="T:System.Windows.LocalValueEntry" /> 组件为值类型，因此将始终是按位比较。 对于 <see cref="P:System.Windows.LocalValueEntry.Value" /> 组件，如果它是值类型，此实现将使用按位比较。 对于具有引用类型的本地设置的属性，该行为将推迟到该类型的相等性确定机制中进行，因为它只在内部为两个值使用 == 运算符。 默认情况下，这将是值的引用相等性，因而整个 <see cref="T:System.Windows.LocalValueEntry" /> 的相等性将变为引用相等性。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt;.">返回此 <see cref="T:System.Windows.LocalValueEntry" /> 的哈希代码。</summary>
      <returns vsli:raw="A signed 32-bit integer value.">带符号的 32 位整数值。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Equality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary vsli:raw="Compares the specified &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; instances to determine whether they are the same.">比较指定的 <see cref="T:System.Windows.LocalValueEntry" /> 实例，以确定它们是否相同。</summary>
      <param name="obj1" vsli:raw="The first instance to compare.">要比较的第一个实例。</param>
      <param name="obj2" vsli:raw="The second instance to compare.">要比较的第二个实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;obj1&quot; /&gt;&lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; is equal to the &lt;paramref name=&quot;obj2&quot; /&gt;&lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEntry" /> 等于 <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEntry" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEntry.op_Inequality(System.Windows.LocalValueEntry,System.Windows.LocalValueEntry)">
      <summary vsli:raw="Compares the specified &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt; instances to determine whether they are different.">比较指定的 <see cref="T:System.Windows.LocalValueEnumerator" /> 实例，以确定它们是否不同。</summary>
      <param name="obj1" vsli:raw="The first instance to compare.">要比较的第一个实例。</param>
      <param name="obj2" vsli:raw="The second instance to compare.">要比较的第二个实例。</param>
      <returns vsli:raw="This implementation compares the values of the &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Property&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Value&quot; /&gt; components of a &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt;. The &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Property&quot; /&gt; component of a &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; is always a value type, so this comparison will always be a bitwise comparison. For the &lt;see cref=&quot;P:System.Windows.LocalValueEntry.Value&quot; /&gt; component, this implementation employs a bitwise comparison if it is a value type.  &#xA;  &#xA; For locally set properties that have reference types, the behavior is deferred to that type's equality determination mechanisms, because it uses the &lt;see langword=&quot;==&quot; /&gt; operator on the two values internally. By default, this is a reference equality of the values.">此实现比较 <see cref="P:System.Windows.LocalValueEntry.Property" /> 的值和 <see cref="P:System.Windows.LocalValueEntry.Value" /> 的 <see cref="T:System.Windows.LocalValueEntry" /> 组件。 <see cref="P:System.Windows.LocalValueEntry.Property" /> 的 <see cref="T:System.Windows.LocalValueEntry" /> 组件始终为值类型，所以此比较将始终是按位比较。 对于 <see cref="P:System.Windows.LocalValueEntry.Value" /> 组件，如果它是值类型，此实现将使用按位比较。  
  
对于具有引用类型的本地设置的属性，该行为将推迟到该类型的相等性确定机制中进行，因为它只在内部为两个值使用 <see langword="==" /> 运算符。 默认情况下，这是值的引用相等性。</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Property">
      <summary vsli:raw="Gets the identifier for the locally set dependency property that is represented by this entry.">获取该条目表示的本地设置的依赖项属性的标识符。</summary>
      <returns vsli:raw="The identifier for the locally set dependency property.">本地设置的依赖项属性的标识符。</returns>
    </member>
    <member name="P:System.Windows.LocalValueEntry.Value">
      <summary vsli:raw="Gets the value of the locally set dependency property.">获取本地设置的依赖属性的值。</summary>
      <returns vsli:raw="The value of the locally set dependency property as an object.">对象形式的本地设置的依赖属性的值。</returns>
    </member>
    <member name="T:System.Windows.LocalValueEnumerator">
      <summary vsli:raw="Provides enumeration support for the local values of any dependency properties that exist on a &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt;.">为 <see cref="T:System.Windows.DependencyObject" /> 上存在的任何依赖属性的本地值提供枚举支持。</summary>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Equals(System.Object)">
      <summary vsli:raw="Determines whether the provided &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt; is equivalent to this &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt;.">确定提供的 <see cref="T:System.Windows.LocalValueEnumerator" /> 是否等效于此 <see cref="T:System.Windows.LocalValueEnumerator" />。</summary>
      <param name="obj" vsli:raw="The &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt; to compare with the current &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt;.">要与当前的 <see cref="T:System.Windows.LocalValueEnumerator" /> 进行比较的 <see cref="T:System.Windows.LocalValueEnumerator" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt; is equal to the current &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的 <see langword="true" /> 等于当前的 <see cref="T:System.Windows.LocalValueEnumerator" />，则为 <see cref="T:System.Windows.LocalValueEnumerator" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.GetHashCode">
      <summary vsli:raw="Returns a hash code for the current &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt;.">返回当前 <see cref="T:System.Windows.LocalValueEnumerator" /> 的哈希代码。</summary>
      <returns vsli:raw="A 32-bit integer hash code.">32 位整数哈希代码。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.MoveNext">
      <summary vsli:raw="Advances the enumerator to the next element of the collection.">将枚举数推进到集合的下一个元素。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the enumerator was successfully advanced to the next element; &lt;see langword=&quot;false&quot; /&gt; if the enumerator has passed the end of the collection.">如果枚举数已成功地推进到下一个元素，则为 <see langword="true" />；如果枚举数传递到集合的末尾，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary vsli:raw="Compares whether two specified &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt; objects are the same.">比较两个指定的 <see cref="T:System.Windows.LocalValueEnumerator" /> 对象是否相同。</summary>
      <param name="obj1" vsli:raw="The first object to compare.">要比较的第一个对象。</param>
      <param name="obj2" vsli:raw="The second object to compare.">要比较的第二个对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;obj1&quot; /&gt;&lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt; is equal to the &lt;paramref name=&quot;obj2&quot; /&gt;&lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="obj1" /><see cref="T:System.Windows.LocalValueEnumerator" /> 等于 <paramref name="obj2" /><see cref="T:System.Windows.LocalValueEnumerator" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)">
      <summary vsli:raw="Compares two specified &lt;see cref=&quot;T:System.Windows.LocalValueEnumerator&quot; /&gt; objects to determine whether they are not the same.">比较两个指定的 <see cref="T:System.Windows.LocalValueEnumerator" /> 对象，以确定它们是否不相同。</summary>
      <param name="obj1" vsli:raw="The first object to compare.">要比较的第一个对象。</param>
      <param name="obj2" vsli:raw="The second object to compare.">要比较的第二个对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果实例不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.LocalValueEnumerator.Reset">
      <summary vsli:raw="Sets the enumerator to its initial position, which is before the first element in the collection.">将枚举数设置为其初始位置，该位置位于集合中第一个元素之前。</summary>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Count">
      <summary vsli:raw="Gets the number of items that are represented in the collection.">获取在集合中表示的项数。</summary>
      <returns vsli:raw="The number of items in the collection.">集合中项的数目。</returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.Current">
      <summary vsli:raw="Gets the current element in the collection.">获取集合中的当前元素。</summary>
      <returns vsli:raw="The current &lt;see cref=&quot;T:System.Windows.LocalValueEntry&quot; /&gt; in the collection.">集合中的当前 <see cref="T:System.Windows.LocalValueEntry" />。</returns>
    </member>
    <member name="P:System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current">
      <summary vsli:raw="For a description of this members, see &lt;see cref=&quot;P:System.Collections.IEnumerator.Current&quot; /&gt;.">有关此成员的说明，请参见 <see cref="P:System.Collections.IEnumerator.Current" />。</summary>
      <returns vsli:raw="The current element in the collection.">集合中的当前元素。</returns>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptions">
      <summary vsli:raw="Specifies how a property is to be serialized.">指定要如何序列化属性。</summary>
    </member>
    <member name="F:System.Windows.Markup.DesignerSerializationOptions.SerializeAsAttribute">
      <summary vsli:raw="The property should be serialized as an attribute.">属性应序列化为特性。</summary>
    </member>
    <member name="T:System.Windows.Markup.DesignerSerializationOptionsAttribute">
      <summary vsli:raw="Specifies the serialization flags for a property.">指定属性的序列化标志。</summary>
    </member>
    <member name="M:System.Windows.Markup.DesignerSerializationOptionsAttribute.#ctor(System.Windows.Markup.DesignerSerializationOptions)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.DesignerSerializationOptionsAttribute&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.DesignerSerializationOptionsAttribute" /> 类的新实例。</summary>
      <param name="designerSerializationOptions" vsli:raw="Specifies how the property is to be serialized.">指定要如何序列化该属性。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;designerSerializationOptions&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Windows.Markup.DesignerSerializationOptions&quot; /&gt; value.">
        <paramref name="designerSerializationOptions" /> 不是有效的 <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> 值。</exception>
    </member>
    <member name="P:System.Windows.Markup.DesignerSerializationOptionsAttribute.DesignerSerializationOptions">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Markup.DesignerSerializationOptions&quot; /&gt; set on the attribute.">获取特性的 <see cref="T:System.Windows.Markup.DesignerSerializationOptions" /> 集。</summary>
      <returns vsli:raw="The serialization option, as a value of the enumeration.">以枚举值形式表示的序列化选项。</returns>
    </member>
    <member name="T:System.Windows.Markup.InternalTypeHelper">
      <summary vsli:raw="Abstract class used internally by the WPF XAML compiler to support the use of internal types.">由 WPF XAML 编译器在内部使用的抽象类，用于支持使用内部类型。</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.InternalTypeHelper&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.InternalTypeHelper" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.AddEventHandler(System.Reflection.EventInfo,System.Object,System.Delegate)">
      <summary vsli:raw="When overridden in a derived (generated) class, attaches an event handler delegate to an internal event.">在派生（生成）类中重写时，会将事件处理程序委托附加到内部事件。</summary>
      <param name="eventInfo" vsli:raw="The event information for the event (CLR reflection information).">事件的事件信息（CLR 反射信息）。</param>
      <param name="target" vsli:raw="The target where the handler is attached.">附加处理程序的目标。</param>
      <param name="handler" vsli:raw="The event handler.">事件处理程序。</param>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateDelegate(System.Type,System.Object,System.String)">
      <summary vsli:raw="When overridden in a derived (generated) class, creates an event delegate referencing a non-public handler method.">在派生（生成）类中重写时，会创建一个引用非公共处理程序方法的事件委托。</summary>
      <param name="delegateType" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the delegate.">委托的 <see cref="T:System.Type" />。</param>
      <param name="target" vsli:raw="The target where the handler is attached.">附加处理程序的目标。</param>
      <param name="handler" vsli:raw="The name of the handler implementation.">处理程序实现的名称。</param>
      <returns vsli:raw="The delegate reference.">委托引用。</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.CreateInstance(System.Type,System.Globalization.CultureInfo)">
      <summary vsli:raw="When overridden in a derived (generated) class, creates an instance of an internal type.">在派生（生成）类中重写时，创建内部类型的实例。</summary>
      <param name="type" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; to create.">要创建的 <see cref="T:System.Type" />。</param>
      <param name="culture" vsli:raw="Culture specific information.">特定于区域性的信息。</param>
      <returns vsli:raw="The created instance.">已创建的实例。</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.GetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Globalization.CultureInfo)">
      <summary vsli:raw="When overridden in a derived (generated) class, gets the value of an internal property on the target object.">在派生（生成）类中重写时，获取目标对象的内部属性值。</summary>
      <param name="propertyInfo" vsli:raw="Property information for the property to get.">要获取的属性的属性信息。</param>
      <param name="target" vsli:raw="The object that holds the desired property value.">容纳所需属性值的对象。</param>
      <param name="culture" vsli:raw="Culture specific information.">特定于区域性的信息。</param>
      <returns vsli:raw="The value of the property.">该属性的值。</returns>
    </member>
    <member name="M:System.Windows.Markup.InternalTypeHelper.SetPropertyValue(System.Reflection.PropertyInfo,System.Object,System.Object,System.Globalization.CultureInfo)">
      <summary vsli:raw="When overridden in a derived (generated) class, sets the value on an internal property on the target object.">在派生（生成）类中重写时，设置目标对象的内部属性的值。</summary>
      <param name="propertyInfo" vsli:raw="Property information for the property to set.">要设置的属性的属性信息。</param>
      <param name="target" vsli:raw="The object that holds the desired property value.">容纳所需属性值的对象。</param>
      <param name="value" vsli:raw="The value to set.">要设置的值。</param>
      <param name="culture" vsli:raw="Culture specific information.">特定于区域性的信息。</param>
    </member>
    <member name="T:System.Windows.Markup.IReceiveMarkupExtension">
      <summary vsli:raw="Provides a mechanism whereby types can declare that they can receive an expression (or another class) from a markup extension, where the output is a different property type than the target property. Do not use for .NET Framework 4 implementations.">提供一种机制，通过该机制，类型可以声明它们可从标记扩展接收表达式（或另一个类），其中的输出是一个与目标属性不同的属性类型。 请不要用于 .NET Framework 4 实现。</summary>
    </member>
    <member name="M:System.Windows.Markup.IReceiveMarkupExtension.ReceiveMarkupExtension(System.String,System.Windows.Markup.MarkupExtension,System.IServiceProvider)">
      <summary vsli:raw="Provides the handling for markup extensions that provide property values. Do not use for .NET Framework 4 implementations; see &lt;see cref=&quot;T:System.Windows.Markup.IReceiveMarkupExtension&quot; /&gt;.">对提供属性值的标记扩展提供处理。 请不要用于 .NET Framework 4 实现；请参阅 <see cref="T:System.Windows.Markup.IReceiveMarkupExtension" />。</summary>
      <param name="property" vsli:raw="The name of the target property.">目标属性的名称。</param>
      <param name="markupExtension" vsli:raw="The markup extension instance of the incoming data.">传入数据的标记扩展实例。</param>
      <param name="serviceProvider" vsli:raw="Can provide additional services that should be performed when processing the markup extension data for a property value.">可以提供附加服务，在为属性值处理标记扩展数据时，应执行这些服务。</param>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupObject">
      <summary vsli:raw="Abstract class that represents an object that can be used to navigate a tree of objects.">一个抽象类，用来表示可用于在对象树内进行导航的对象。</summary>
    </member>
    <member name="M:System.Windows.Markup.Primitives.MarkupObject.AssignRootContext(System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="When overridden in a derived class, assigns a root context for &lt;see cref=&quot;T:System.Windows.Markup.ValueSerializer&quot; /&gt; classes.">当在派生类中重写时，可为 <see cref="T:System.Windows.Markup.ValueSerializer" /> 类分配根上下文。</summary>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Markup.IValueSerializerContext&quot; /&gt; to assign a root context for.">要为其分配根上下文的 <see cref="T:System.Windows.Markup.IValueSerializerContext" />。</param>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Attributes">
      <summary vsli:raw="When overridden in a derived class, gets the attributes associated with this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupObject&quot; /&gt;.">当在派生类中重写时，可获取与此 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 关联的特性。</summary>
      <returns vsli:raw="The collection of attributes.">特性的集合。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Instance">
      <summary vsli:raw="When overridden in a derived class, gets the instance of the object represented by this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupObject&quot; /&gt;.">当在派生类中重写时，可获取由此 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 表示的对象的实例。</summary>
      <returns vsli:raw="The instance of the object.">对象的实例。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.ObjectType">
      <summary vsli:raw="When overridden in a derived class, gets the type of the &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupObject&quot; /&gt; instance.">当在派生类中重写时，可获取 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 实例的类型。</summary>
      <returns vsli:raw="The type of the object.">对象的类型。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupObject.Properties">
      <summary vsli:raw="When overridden in a derived class, gets the properties of this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupObject&quot; /&gt; instance that should be written to XAML.">当在派生类中重写时，可获取应写入 XAML 的此 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 实例的属性。</summary>
      <returns vsli:raw="The properties.">属性。</returns>
    </member>
    <member name="T:System.Windows.Markup.Primitives.MarkupProperty">
      <summary vsli:raw="Abstract class that provides a property description to be used while writing to markup which encapsulates access to properties and their values.">一个提供属性说明的抽象类，这些属性说明要在写入标记（该标记封装对属性及其值的访问）时使用。</summary>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Attributes">
      <summary vsli:raw="When overridden in a derived class, gets the attributes associated with this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt;.">当在派生类中重写时，可获取与此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 关联的特性。</summary>
      <returns vsli:raw="The collection of attributes.">特性的集合。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.DependencyProperty">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt; identifier for the markup property if the property is implemented as a dependency property.">在派生类中重写时，如果以依赖属性的形式实现标记属性，则获取该属性的 <see cref="T:System.Windows.DependencyProperty" /> 标识符。</summary>
      <returns vsli:raw="The dependency property identifier.">依赖属性标识符。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsAttached">
      <summary vsli:raw="When overridden in a derived class, determines whether this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; is an attached &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt;.">当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否为附加 <see cref="T:System.Windows.DependencyProperty" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property is an attached &lt;see cref=&quot;T:System.Windows.DependencyProperty&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此属性为附加 <see cref="T:System.Windows.DependencyProperty" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsComposite">
      <summary vsli:raw="When overridden in a derived class, determines whether this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; is a composite property.">当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否为复合属性。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; is this property is a composite property; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此属性为复合属性，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsConstructorArgument">
      <summary vsli:raw="When overridden in a derived class, determines whether this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; represents a constructor argument.">当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示构造函数参数。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property represents a constructor argument; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此属性表示构造函数参数，则为 <see langword="true" />；否该 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsContent">
      <summary vsli:raw="When overridden in a derived class, determines whether this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; represents direct content of a collection.">当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示集合的直接内容。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the property represents direct content; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此属性表示直接内容，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsKey">
      <summary vsli:raw="When overridden in a derived class, determines whether this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; represents the key used by the &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupObject&quot; /&gt; to store the item in a dictionary.">当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示 <see cref="T:System.Windows.Markup.Primitives.MarkupObject" /> 将项存储在字典中时使用的键。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this property represents a key; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此属性表示键，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.IsValueAsString">
      <summary vsli:raw="When overridden in a derived class, determines whether this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; represents text which is passed to a type converter to create an instance of the property or if a constructor should be used.">当在派生类中重写时，可确定此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 是否表示为创建属性实例而传递给类型转换器的文本，或者确定是否应使用构造函数。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt;, if this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; represents a string; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 表示字符串，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Items">
      <summary vsli:raw="When overridden in a derived class, gets the items that make up the value of this property.">当在派生类中重写时，可获取组成此属性的值的多个项。</summary>
      <returns vsli:raw="The items that make up the value of this property.">组成此属性的值的多个项。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Name">
      <summary vsli:raw="When overridden in a derived class, gets a name that is used for diagnostics and error reporting.">当在派生类中重写时，可获取用于诊断和错误报告的名称。</summary>
      <returns vsli:raw="The identifier property name.">标识符属性名称。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyDescriptor">
      <summary vsli:raw="When overridden in a derived class, gets the &lt;see cref=&quot;T:System.ComponentModel.PropertyDescriptor&quot; /&gt; for the markup property.">当在派生类中重写时，可获取标记属性的 <see cref="T:System.ComponentModel.PropertyDescriptor" />。</summary>
      <returns vsli:raw="The property descriptor.">属性描述符。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.PropertyType">
      <summary vsli:raw="When overridden in a derived class, gets the CLR type of the property.">在派生类中重写时，获取属性的 CLR 类型。</summary>
      <returns vsli:raw="The CLR type.">CLR 类型。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.StringValue">
      <summary vsli:raw="When overridden in a derived class, gets the string value of this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt;.">当在派生类中重写时，可获取此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 的字符串值。</summary>
      <returns vsli:raw="The string value.">字符串值。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.TypeReferences">
      <summary vsli:raw="When overridden in a derived class, gets the set of types that this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt; will reference when it serializes its value as a string.">在派生类重写时，获取此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 在将其值序列化为字符串时将引用的一组类型。</summary>
      <returns vsli:raw="The set of types.">这组类型。</returns>
    </member>
    <member name="P:System.Windows.Markup.Primitives.MarkupProperty.Value">
      <summary vsli:raw="When overridden in a derived class, gets the current value of this &lt;see cref=&quot;T:System.Windows.Markup.Primitives.MarkupProperty&quot; /&gt;.">当在派生类中重写时，获取此 <see cref="T:System.Windows.Markup.Primitives.MarkupProperty" /> 的当前值。</summary>
      <returns vsli:raw="The current value.">当前值。</returns>
    </member>
    <member name="T:System.Windows.Markup.ServiceProviders">
      <summary vsli:raw="Provides an implementation for the &lt;see cref=&quot;T:System.IServiceProvider&quot; /&gt; interface with methods that enable adding services.">使用可以添加服务的方法来提供 <see cref="T:System.IServiceProvider" /> 接口的实现。</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Markup.ServiceProviders&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Markup.ServiceProviders" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.AddService(System.Type,System.Object)">
      <summary vsli:raw="Adds a service to the list.">将服务添加到列表。</summary>
      <param name="serviceType" vsli:raw="Service type of the new service.">新服务的服务类型。</param>
      <param name="service" vsli:raw="The service implementation class.">服务实现类。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;serviceType&quot; /&gt; or &lt;paramref name=&quot;service&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="serviceType" /> 或 <paramref name="service" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="Attempted to add a service that already exists in the dictionary.">尝试添加一个已经在字典中存在的服务。</exception>
    </member>
    <member name="M:System.Windows.Markup.ServiceProviders.GetService(System.Type)">
      <summary vsli:raw="Gets the service object of the specified type.">获取指定类型的服务对象。</summary>
      <param name="serviceType" vsli:raw="The type of service object to get.">要获取的服务对象的类型。</param>
      <returns vsli:raw="A service implementation for the type &lt;paramref name=&quot;serviceType&quot; /&gt;. May be &lt;see langword=&quot;null&quot; /&gt; if there is no service stored for type &lt;paramref name=&quot;serviceType&quot; /&gt;.">类型 <paramref name="serviceType" /> 的服务实现。 如果没有为类型 <paramref name="serviceType" /> 存储任何服务，则可以为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Windows.Media.Converters.MatrixValueSerializer">
      <summary vsli:raw="Converts instances of &lt;see cref=&quot;T:System.String&quot; /&gt; to and from instances of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">将 <see cref="T:System.String" /> 的实例与 <see cref="T:System.Windows.Media.Matrix" /> 的实例进行来回转换。</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Media.Converters.MatrixValueSerializer&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Media.Converters.MatrixValueSerializer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if conversion from a given &lt;see cref=&quot;T:System.String&quot; /&gt; to an instance of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; is possible.">确定是否可以从给定的 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Media.Matrix" /> 的实例。</summary>
      <param name="value" vsli:raw="String to evaluate for conversion.">要进行计算以供转换的字符串。</param>
      <param name="context" vsli:raw="Context information used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value can be converted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该值可以转换，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.CanConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Determines if an instance of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; can be converted to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">确定是否可将 <see cref="T:System.Windows.Media.Matrix" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="Instance of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; to evaluate for conversion.">要进行计算以供转换的 <see cref="T:System.Windows.Media.Matrix" /> 的实例。</param>
      <param name="context" vsli:raw="Context information used for conversion.">用于转换的上下文信息。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Occurs when &lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.Windows.Media.Int32Collection&quot; /&gt;.">当 <paramref name="value" /> 不是 <see cref="T:System.Windows.Media.Int32Collection" /> 时发生。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; can be converted into a &lt;see cref=&quot;T:System.String&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可将 <paramref name="value" /> 转换为 <see cref="T:System.String" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertFromString(System.String,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; into a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">将 <see cref="T:System.String" /> 转换为 <see cref="T:System.Windows.Media.Matrix" />。</summary>
      <param name="value" vsli:raw="&lt;see cref=&quot;T:System.String&quot; /&gt; value to convert into a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">要转换为 <see cref="T:System.String" /> 的 <see cref="T:System.Windows.Media.Matrix" /> 值。</param>
      <param name="context" vsli:raw="Context information used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A new instance of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; based on the supplied &lt;paramref name=&quot;value&quot; /&gt;.">基于所提供的 <paramref name="value" /> 的 <see cref="T:System.Windows.Media.Matrix" /> 新实例。</returns>
    </member>
    <member name="M:System.Windows.Media.Converters.MatrixValueSerializer.ConvertToString(System.Object,System.Windows.Markup.IValueSerializerContext)">
      <summary vsli:raw="Converts an instance of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; to a &lt;see cref=&quot;T:System.String&quot; /&gt;.">将 <see cref="T:System.Windows.Media.Matrix" /> 的实例转换为 <see cref="T:System.String" />。</summary>
      <param name="value" vsli:raw="Instance of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; to evaluate for conversion.">要进行计算以供转换的 <see cref="T:System.Windows.Media.Matrix" /> 的实例。</param>
      <param name="context" vsli:raw="Context information used for conversion.">用于转换的上下文信息。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; representation of the supplied &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; object.">提供的 <see cref="T:System.String" /> 对象的 <see cref="T:System.Windows.Media.Matrix" /> 表示形式。</returns>
    </member>
    <member name="T:System.Windows.Media.DisableDpiAwarenessAttribute">
      <summary vsli:raw="Allows WPF applications to disable dots per inch (dpi) awareness for all user interface elements.">允许 WPF 应用程序对所有用户界面元素禁用每英寸点数 (dpi) 识别。</summary>
    </member>
    <member name="M:System.Windows.Media.DisableDpiAwarenessAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Windows.Media.DisableDpiAwarenessAttribute&quot; /&gt;.">初始化 <see cref="T:System.Windows.Media.DisableDpiAwarenessAttribute" /> 的新实例。</summary>
    </member>
    <member name="T:System.Windows.Media.Matrix">
      <summary vsli:raw="Represents a 3x3 affine transformation matrix used for transformations in 2-D space.">表示用于在二维空间中进行转换的 3x3 仿射转换矩阵。</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">初始化 <see cref="T:System.Windows.Media.Matrix" /> 结构的新实例。</summary>
      <param name="m11" vsli:raw="The new &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Media.Matrix.M11&quot; /&gt; coefficient.">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M11" /> 系数。</param>
      <param name="m12" vsli:raw="The new &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Media.Matrix.M12&quot; /&gt; coefficient.">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M12" /> 系数。</param>
      <param name="m21" vsli:raw="The new &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Media.Matrix.M21&quot; /&gt; coefficient.">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M21" /> 系数。</param>
      <param name="m22" vsli:raw="The new &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Media.Matrix.M22&quot; /&gt; coefficient.">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.M22" /> 系数。</param>
      <param name="offsetX" vsli:raw="The new &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Media.Matrix.OffsetX&quot; /&gt; coefficient.">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.OffsetX" /> 系数。</param>
      <param name="offsetY" vsli:raw="The new &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Media.Matrix.OffsetY&quot; /&gt; coefficient.">新的 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="P:System.Windows.Media.Matrix.OffsetY" /> 系数。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Append(System.Windows.Media.Matrix)">
      <summary vsli:raw="Appends the specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">将指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构追加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
      <param name="matrix" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to append to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">要追加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure that is identical to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">确定指定的 <see cref="T:System.Object" /> 是否是一个与此 <see cref="T:System.Windows.Media.Matrix" /> 相同的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare.">要比较的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure that is identical to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="o" /> 是一个与此 <see cref="T:System.Windows.Media.Matrix" /> 结构相同的 <see cref="T:System.Windows.Media.Matrix" /> 结构，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure is identical to this instance.">确定指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构是否与此实例相同。</summary>
      <param name="value" vsli:raw="The instance of &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; to compare to this instance.">要与此实例比较的 <see cref="T:System.Windows.Media.Matrix" /> 实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if instances are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Equals(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary vsli:raw="Determines whether the two specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structures are identical.">确定两个指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构是否相同。</summary>
      <param name="matrix1" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to compare.">要比较的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <param name="matrix2" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to compare.">要比较的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;matrix1&quot; /&gt; and &lt;paramref name=&quot;matrix2&quot; /&gt; are identical; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="matrix1" /> 和 <paramref name="matrix2" /> 相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">返回此 <see cref="T:System.Windows.Media.Matrix" /> 结构的哈希代码。</summary>
      <returns vsli:raw="The hash code for this instance.">此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Invert">
      <summary vsli:raw="Inverts this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">反转此 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure is not invertible.">不能反转 <see cref="T:System.Windows.Media.Matrix" /> 结构。</exception>
    </member>
    <member name="M:System.Windows.Media.Matrix.Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary vsli:raw="Multiplies a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure by another &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">让 <see cref="T:System.Windows.Media.Matrix" /> 结构乘以另一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
      <param name="trans1" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to multiply.">要相乘的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <param name="trans2" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to multiply.">要相乘的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <returns vsli:raw="The result of multiplying &lt;paramref name=&quot;trans1&quot; /&gt; by &lt;paramref name=&quot;trans2&quot; /&gt;.">
        <paramref name="trans1" /> 与 <paramref name="trans2" /> 相乘的结果。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Equality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary vsli:raw="Determines whether the two specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structures are identical.">确定两个指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构是否相同。</summary>
      <param name="matrix1" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to compare.">要比较的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <param name="matrix2" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to compare.">要比较的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;matrix1&quot; /&gt; and &lt;paramref name=&quot;matrix2&quot; /&gt; are identical; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="matrix1" /> 和 <paramref name="matrix2" /> 相同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Inequality(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary vsli:raw="Determines whether the two specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structures are not identical.">确定两个指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构是否不同。</summary>
      <param name="matrix1" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to compare.">要比较的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <param name="matrix2" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to compare.">要比较的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;matrix1&quot; /&gt; and &lt;paramref name=&quot;matrix2&quot; /&gt; are not identical; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="matrix1" /> 和 <paramref name="matrix2" /> 不同，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.op_Multiply(System.Windows.Media.Matrix,System.Windows.Media.Matrix)">
      <summary vsli:raw="Multiplies a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure by another &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">让 <see cref="T:System.Windows.Media.Matrix" /> 结构乘以另一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
      <param name="trans1" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to multiply.">要相乘的第一个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <param name="trans2" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to multiply.">要相乘的第二个 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
      <returns vsli:raw="The result of multiplying &lt;paramref name=&quot;trans1&quot; /&gt; by &lt;paramref name=&quot;trans2&quot; /&gt;.">
        <paramref name="trans1" /> 与 <paramref name="trans2" /> 相乘的结果。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Parse(System.String)">
      <summary vsli:raw="Converts a &lt;see cref=&quot;T:System.String&quot; /&gt; representation of a matrix into the equivalent &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">将矩阵的 <see cref="T:System.String" /> 表示形式转换为等效的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
      <param name="source" vsli:raw="The &lt;see cref=&quot;T:System.String&quot; /&gt; representation of the matrix.">矩阵的 <see cref="T:System.String" /> 表示形式。</param>
      <returns vsli:raw="The equivalent &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">等效的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Prepend(System.Windows.Media.Matrix)">
      <summary vsli:raw="Prepends the specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure onto this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">将指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构添加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构之前。</summary>
      <param name="matrix" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure to prepend to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">要添加到此 <see cref="T:System.Windows.Media.Matrix" /> 结构之前的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Rotate(System.Double)">
      <summary vsli:raw="Applies a rotation of the specified angle about the origin of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">以此 <see cref="T:System.Windows.Media.Matrix" /> 结构的原点为中心旋转指定的角度。</summary>
      <param name="angle" vsli:raw="The angle of rotation.">旋转角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAt(System.Double,System.Double,System.Double)">
      <summary vsli:raw="Rotates this matrix about the specified point.">绕指定的点旋转此矩阵。</summary>
      <param name="angle" vsli:raw="The angle, in degrees, by which to rotate this matrix.">此矩阵要旋转的角度（单位为度）。</param>
      <param name="centerX" vsli:raw="The x-coordinate of the point about which to rotate this matrix.">此矩阵要围绕其旋转的点的 x 坐标。</param>
      <param name="centerY" vsli:raw="The y-coordinate of the point about which to rotate this matrix.">此矩阵要围绕其旋转的点的 y 坐标。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotateAtPrepend(System.Double,System.Double,System.Double)">
      <summary vsli:raw="Prepends a rotation of the specified angle at the specified point to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加围绕指定点的指定角度的旋转。</summary>
      <param name="angle" vsli:raw="The rotation angle, in degrees.">旋转角度（单位为度）。</param>
      <param name="centerX" vsli:raw="The x-coordinate of the rotation center.">旋转中心的 x 坐标。</param>
      <param name="centerY" vsli:raw="The y-coordinate of the rotation center.">旋转中心的 y 坐标。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.RotatePrepend(System.Double)">
      <summary vsli:raw="Prepends a rotation of the specified angle to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加指定角度的旋转。</summary>
      <param name="angle" vsli:raw="The angle of rotation to prepend.">要在前面添加的旋转的角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Scale(System.Double,System.Double)">
      <summary vsli:raw="Appends the specified scale vector to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">在此 <see cref="T:System.Windows.Media.Matrix" /> 结构后面追加指定的缩放向量。</summary>
      <param name="scaleX" vsli:raw="The value by which to scale this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the x-axis.">此 <see cref="T:System.Windows.Media.Matrix" /> 要沿 x 轴缩放的值。</param>
      <param name="scaleY" vsli:raw="The value by which to scale this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the y-axis.">此 <see cref="T:System.Windows.Media.Matrix" /> 要沿 y 轴缩放的值。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAt(System.Double,System.Double,System.Double,System.Double)">
      <summary vsli:raw="Scales this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; by the specified amount about the specified point.">围绕指定的点按指定的量缩放此 <see cref="T:System.Windows.Media.Matrix" />。</summary>
      <param name="scaleX" vsli:raw="The amount by which to scale this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the x-axis.">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 x 轴的缩放量。</param>
      <param name="scaleY" vsli:raw="The amount by which to scale this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the y-axis.">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 y 轴的缩放量。</param>
      <param name="centerX" vsli:raw="The x-coordinate of the scale operation's center point.">缩放操作中心点的 x 坐标。</param>
      <param name="centerY" vsli:raw="The y-coordinate of the scale operation's center point.">缩放操作中心点的 y 坐标。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScaleAtPrepend(System.Double,System.Double,System.Double,System.Double)">
      <summary vsli:raw="Prepends the specified scale about the specified point of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">在此 <see cref="T:System.Windows.Media.Matrix" /> 前面添加围绕指定点的指定缩放。</summary>
      <param name="scaleX" vsli:raw="The x-axis scale factor.">x 轴的缩放比例。</param>
      <param name="scaleY" vsli:raw="The y-axis scale factor.">y 轴的缩放比例。</param>
      <param name="centerX" vsli:raw="The x-coordinate of the point about which the scale operation is performed.">执行缩放操作所围绕的点的 x 坐标。</param>
      <param name="centerY" vsli:raw="The y-coordinate of the point about which the scale operation is performed.">执行缩放操作所围绕的点的 y 坐标。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.ScalePrepend(System.Double,System.Double)">
      <summary vsli:raw="Prepends the specified scale vector to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加指定的缩放向量。</summary>
      <param name="scaleX" vsli:raw="The value by which to scale this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure along the x-axis.">此 <see cref="T:System.Windows.Media.Matrix" /> 结构要沿 x 轴缩放的值。</param>
      <param name="scaleY" vsli:raw="The value by which to scale this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure along the y-axis.">此 <see cref="T:System.Windows.Media.Matrix" /> 结构要沿 y 轴缩放的值。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SetIdentity">
      <summary vsli:raw="Changes this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure into an identity matrix.">将此 <see cref="T:System.Windows.Media.Matrix" /> 结构更改为恒等矩阵。</summary>
    </member>
    <member name="M:System.Windows.Media.Matrix.Skew(System.Double,System.Double)">
      <summary vsli:raw="Appends a skew of the specified degrees in the x and y dimensions to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">在此 <see cref="T:System.Windows.Media.Matrix" /> 结构后面追加 x 和 y 维中指定角度的扭曲。</summary>
      <param name="skewX" vsli:raw="The angle in the x dimension by which to skew this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">用于扭曲此 <see cref="T:System.Windows.Media.Matrix" /> 的 x 维角度。</param>
      <param name="skewY" vsli:raw="The angle in the y dimension by which to skew this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">用于扭曲此 <see cref="T:System.Windows.Media.Matrix" /> 的 y 维角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.SkewPrepend(System.Double,System.Double)">
      <summary vsli:raw="Prepends a skew of the specified degrees in the x and y dimensions to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加 x 和 y 维中指定角度的扭曲。</summary>
      <param name="skewX" vsli:raw="The angle in the x dimension by which to skew this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">用于扭曲此 <see cref="T:System.Windows.Media.Matrix" /> 的 x 维角度。</param>
      <param name="skewY" vsli:raw="The angle in the y dimension by which to skew this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">用于扭曲此 <see cref="T:System.Windows.Media.Matrix" /> 的 y 维角度。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Formats the value of the current instance using the specified format.">使用指定格式对当前实例的值设置格式。</summary>
      <param name="format" vsli:raw="The format to use.  &#xA;  &#xA; -or-  &#xA;  &#xA; A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) to use the default format defined for the type of the &lt;see cref=&quot;T:System.IFormattable&quot; /&gt; implementation.">要使用的格式。  
  
- 或 - 
null 引用（在 Visual Basic 中为 <see langword="Nothing" />），用于使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。</param>
      <param name="provider" vsli:raw="The provider to use to format the value.  &#xA;  &#xA; -or-  &#xA;  &#xA; A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.">要用于格式化值的提供程序。  
  
- 或 - 
null 引用（在 Visual Basic 中为 <see langword="Nothing" />），用于从操作系统的当前区域设置获取数字格式信息。</param>
      <returns vsli:raw="The value of the current instance in the specified format.">采用指定格式的当前实例的值。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.String&quot; /&gt; representation of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">创建此 <see cref="T:System.String" /> 结构的 <see cref="T:System.Windows.Media.Matrix" /> 表示形式。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the &lt;see cref=&quot;P:System.Windows.Media.Matrix.M11&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.M12&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.M21&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.M22&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.OffsetX&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Media.Matrix.OffsetY&quot; /&gt; values of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">一个 <see cref="T:System.String" />，其中包含此 <see cref="P:System.Windows.Media.Matrix.M11" /> 的 <see cref="P:System.Windows.Media.Matrix.M12" />、<see cref="P:System.Windows.Media.Matrix.M21" />、<see cref="P:System.Windows.Media.Matrix.M22" />、<see cref="P:System.Windows.Media.Matrix.OffsetX" />、<see cref="P:System.Windows.Media.Matrix.OffsetY" /> 和 <see cref="T:System.Windows.Media.Matrix" /> 值。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.ToString(System.IFormatProvider)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.String&quot; /&gt; representation of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure with culture-specific formatting information.">使用区域性特定的格式设置信息创建此 <see cref="T:System.String" /> 结构的 <see cref="T:System.Windows.Media.Matrix" /> 表示形式。</summary>
      <param name="provider" vsli:raw="The culture-specific formatting information.">特定于区域的格式设置信息。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the &lt;see cref=&quot;P:System.Windows.Media.Matrix.M11&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.M12&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.M21&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.M22&quot; /&gt;, &lt;see cref=&quot;P:System.Windows.Media.Matrix.OffsetX&quot; /&gt;, and &lt;see cref=&quot;P:System.Windows.Media.Matrix.OffsetY&quot; /&gt; values of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">一个 <see cref="T:System.String" />，其中包含此 <see cref="P:System.Windows.Media.Matrix.M11" /> 的 <see cref="P:System.Windows.Media.Matrix.M12" />、<see cref="P:System.Windows.Media.Matrix.M21" />、<see cref="P:System.Windows.Media.Matrix.M22" />、<see cref="P:System.Windows.Media.Matrix.OffsetX" />、<see cref="P:System.Windows.Media.Matrix.OffsetY" /> 和 <see cref="T:System.Windows.Media.Matrix" /> 值。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point)">
      <summary vsli:raw="Transforms the specified point by the &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; and returns the result.">用 <see cref="T:System.Windows.Media.Matrix" /> 变换指定的点并返回结果。</summary>
      <param name="point" vsli:raw="The point to transform.">要转换的点。</param>
      <returns vsli:raw="The result of transforming &lt;paramref name=&quot;point&quot; /&gt; by this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">用此 <see cref="T:System.Windows.Media.Matrix" /> 变换 <paramref name="point" /> 的结果。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Point[])">
      <summary vsli:raw="Transforms the specified points by this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">用此 <see cref="T:System.Windows.Media.Matrix" /> 变换指定的点。</summary>
      <param name="points" vsli:raw="The points to transform. The original points in the array are replaced by their transformed values.">要变换的点。 数组中的原始点将被它们的变换值替换。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector)">
      <summary vsli:raw="Transforms the specified vector by this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">用此 <see cref="T:System.Windows.Media.Matrix" /> 变换指定的向量。</summary>
      <param name="vector" vsli:raw="The vector to transform.">要转换的向量。</param>
      <returns vsli:raw="The result of transforming &lt;paramref name=&quot;vector&quot; /&gt; by this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">用此 <see cref="T:System.Windows.Media.Matrix" /> 变换 <paramref name="vector" /> 的结果。</returns>
    </member>
    <member name="M:System.Windows.Media.Matrix.Transform(System.Windows.Vector[])">
      <summary vsli:raw="Transforms the specified vectors by this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">用此 <see cref="T:System.Windows.Media.Matrix" /> 变换指定的向量。</summary>
      <param name="vectors" vsli:raw="The vectors to transform. The original vectors in the array are replaced by their transformed values.">要变换的向量。 数组中的原始向量将被它们的变换值替换。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.Translate(System.Double,System.Double)">
      <summary vsli:raw="Appends a translation of the specified offsets to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">在此 <see cref="T:System.Windows.Media.Matrix" /> 结构后面追加指定偏移量的平移。</summary>
      <param name="offsetX" vsli:raw="The amount to offset this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the x-axis.">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 x 轴的偏移量。</param>
      <param name="offsetY" vsli:raw="The amount to offset this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the y-axis.">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 y 轴的偏移量。</param>
    </member>
    <member name="M:System.Windows.Media.Matrix.TranslatePrepend(System.Double,System.Double)">
      <summary vsli:raw="Prepends a translation of the specified offsets to this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">在此 <see cref="T:System.Windows.Media.Matrix" /> 结构前面添加指定偏移量的平移。</summary>
      <param name="offsetX" vsli:raw="The amount to offset this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the x-axis.">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 x 轴的偏移量。</param>
      <param name="offsetY" vsli:raw="The amount to offset this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; along the y-axis.">此 <see cref="T:System.Windows.Media.Matrix" /> 沿 y 轴的偏移量。</param>
    </member>
    <member name="P:System.Windows.Media.Matrix.Determinant">
      <summary vsli:raw="Gets the determinant of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">获取此 <see cref="T:System.Windows.Media.Matrix" /> 结构的行列式。</summary>
      <returns vsli:raw="The determinant of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">此 <see cref="T:System.Windows.Media.Matrix" /> 的行列式。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.HasInverse">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure is invertible.">获取一个值，该值指示此 <see cref="T:System.Windows.Media.Matrix" /> 结构是否可以反转。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; has an inverse; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果 <see cref="T:System.Windows.Media.Matrix" /> 存在逆矩阵，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.Identity">
      <summary vsli:raw="Gets an identity &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">获取一个恒等 <see cref="T:System.Windows.Media.Matrix" />。</summary>
      <returns vsli:raw="An identity matrix.">一个恒等矩阵。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.IsIdentity">
      <summary vsli:raw="Gets a value that indicates whether this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure is an identity matrix.">获取一个值，该值指示此 <see cref="T:System.Windows.Media.Matrix" /> 结构是否为恒等矩阵。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure is an identity matrix; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">如果 <see cref="T:System.Windows.Media.Matrix" /> 结构是恒等矩阵，则为 <see langword="true" />；否则为 <see langword="false" />。 默认值为 <see langword="true" />。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M11">
      <summary vsli:raw="Gets or sets the value of the first row and first column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第一行与第一列相交处的值。</summary>
      <returns vsli:raw="The value of the first row and first column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;. The default value is 1.">此 <see cref="T:System.Windows.Media.Matrix" /> 中第一行与第一列相交处的值。 默认值为 1。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M12">
      <summary vsli:raw="Gets or sets the value of the first row and second column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第一行与第二列相交处的值。</summary>
      <returns vsli:raw="The value of the first row and second column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;. The default value is 0.">此 <see cref="T:System.Windows.Media.Matrix" /> 中第一行与第二列相交处的值。 默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M21">
      <summary vsli:raw="Gets or sets the value of the second row and first column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第二行与第一列相交处的值。</summary>
      <returns vsli:raw="The value of the second row and first column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;. The default value is 0.">此 <see cref="T:System.Windows.Media.Matrix" /> 中第二行与第一列相交处的值。 默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.M22">
      <summary vsli:raw="Gets or sets the value of the second row and second column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第二行与第二列相交处的值。</summary>
      <returns vsli:raw="The value of the second row and second column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure. The default value is 1.">此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第二行与第二列相交处的值。 默认值为 1。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetX">
      <summary vsli:raw="Gets or sets the value of the third row and first column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第三行与第一列相交处的值。</summary>
      <returns vsli:raw="The value of the third row and first column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure. The default value is 0.">此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第三行与第一列相交处的值。 默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Media.Matrix.OffsetY">
      <summary vsli:raw="Gets or sets the value of the third row and second column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">获取或设置此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第三行与第二列相交处的值。</summary>
      <returns vsli:raw="The value of the third row and second column of this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure. The default value is 0.">此 <see cref="T:System.Windows.Media.Matrix" /> 结构中第三行与第二列相交处的值。 默认值为 0。</returns>
    </member>
    <member name="T:System.Windows.Media.MatrixConverter">
      <summary vsli:raw="Converts instances of other types to and from a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">在 <see cref="T:System.Windows.Media.Matrix" /> 实例与其他类型的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of &lt;see cref=&quot;T:System.Windows.Media.MatrixConverter&quot; /&gt;.">初始化 <see cref="T:System.Windows.Media.MatrixConverter" /> 的新实例。</summary>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object can be converted from a specific type to an instance of a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">确定是否可将一个对象从特定类型转换为 <see cref="T:System.Windows.Media.Matrix" /> 的实例。</summary>
      <param name="context" vsli:raw="The context information of a type.">类型的上下文信息。</param>
      <param name="sourceType" vsli:raw="The type of the source that is being evaluated for conversion.">正被计算用于转换的源类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted to a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该类型可以转换为 <see cref="T:System.Windows.Media.Matrix" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; can be converted to a different type.">确定是否可将 <see cref="T:System.Windows.Media.Matrix" /> 的实例转换成其他类型。</summary>
      <param name="context" vsli:raw="The context information of a type.">类型的上下文信息。</param>
      <param name="destinationType" vsli:raw="The desired type this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; is being evaluated for conversion.">要计算用于转换的此 <see cref="T:System.Windows.Media.Matrix" /> 的所需类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; can be converted to &lt;paramref name=&quot;destinationType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Windows.Media.Matrix" /> 可转换为 <paramref name="destinationType" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified object to a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">尝试将指定对象转换为 <see cref="T:System.Windows.Media.Matrix" />。</summary>
      <param name="context" vsli:raw="The context information of a type.">类型的上下文信息。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the type being converted.">要转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The object being converted.">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The specified object is null or is a type that cannot be converted to a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">指定的对象为 Null 或者为无法转换为 <see cref="T:System.Windows.Media.Matrix" /> 的类型。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; created from converting &lt;paramref name=&quot;value&quot; /&gt;.">通过转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Media.Matrix" />。</returns>
    </member>
    <member name="M:System.Windows.Media.MatrixConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; to a specified type.">尝试将 <see cref="T:System.Windows.Media.Matrix" /> 转换为指定类型。</summary>
      <param name="context" vsli:raw="The context information of a type.">类型的上下文信息。</param>
      <param name="culture" vsli:raw="The &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the type being converted.">要转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; to convert.">要转换的 <see cref="T:System.Windows.Media.Matrix" />。</param>
      <param name="destinationType" vsli:raw="The type to convert this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; to.">要将此 <see cref="T:System.Windows.Media.Matrix" /> 转换为的类型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The &lt;paramref name=&quot;value&quot; /&gt; is null or is not a &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;, or the &lt;paramref name=&quot;destinationType&quot; /&gt; is not a valid conversion type.">
        <paramref name="value" /> 为 Null 或不是 <see cref="T:System.Windows.Media.Matrix" />，或者 <paramref name="destinationType" /> 不是有效的转换类型。</exception>
      <returns vsli:raw="The object created from converting this &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">通过转换此 <see cref="T:System.Windows.Media.Matrix" /> 创建的对象。</returns>
    </member>
    <member name="T:System.Windows.Media.TextFormattingMode">
      <summary vsli:raw="Defines the formatting methods supported by the &lt;see cref=&quot;T:System.Windows.Media.TextFormatting.TextFormatter&quot; /&gt; class.">定义 <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> 类支持的格式设置方法。</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormattingMode.Display">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Windows.Media.TextFormatting.TextFormatter&quot; /&gt; lays out text by using GDI-compatible font metrics.">指示 <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> 使用 GDI 兼容字体规格布局文本。</summary>
    </member>
    <member name="F:System.Windows.Media.TextFormattingMode.Ideal">
      <summary vsli:raw="Indicates that the &lt;see cref=&quot;T:System.Windows.Media.TextFormatting.TextFormatter&quot; /&gt; lays out text by using ideal font metrics.">指示 <see cref="T:System.Windows.Media.TextFormatting.TextFormatter" /> 使用理想的字体规格布局文本。</summary>
    </member>
    <member name="T:System.Windows.NameScope">
      <summary vsli:raw="Implements base WPF support for the &lt;see cref=&quot;T:System.Windows.Markup.INameScope&quot; /&gt; methods that store or retrieve name-object mappings into a particular XAML namescope. Adds attached property support to make it simpler to get or set XAML namescope names dynamically at the element level.">实现对 <see cref="T:System.Windows.Markup.INameScope" /> 方法的基本 WPF 支持，这些方法用于向特定 XAML 名称范围中存储名称-对象映射或检索此类映射。 添加附加属性支持，以便更简单地在元素级别动态获取或设置 XAML 名称范围的名称。</summary>
    </member>
    <member name="F:System.Windows.NameScope.NameScopeProperty">
      <summary vsli:raw="Identifies the &lt;see cref=&quot;P:System.Windows.NameScope.NameScope&quot; /&gt; attached property.">标识 <see cref="P:System.Windows.NameScope.NameScope" /> 附加属性。</summary>
    </member>
    <member name="M:System.Windows.NameScope.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; class.">初始化 <see cref="T:System.Windows.NameScope" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary vsli:raw="Adds an item to the collection.">向集合中添加一项。</summary>
      <param name="item" vsli:raw="A &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; (key is &lt;see cref=&quot;T:System.String&quot; /&gt;, value is &lt;see cref=&quot;T:System.Object&quot; /&gt;) that represents the name mapping to add to the XAML namescope.">一个 <see cref="T:System.Collections.Generic.KeyValuePair`2" />（键为 <see cref="T:System.String" />，值为 <see cref="T:System.Object" />），表示要添加到 XAML 名称范围中的名称映射。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Either or both components of &lt;paramref name=&quot;item&quot; /&gt; are &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="item" /> 的任一个或两个组件都为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.NameScope.Add(System.String,System.Object)">
      <summary vsli:raw="Adds an item to the collection.">向集合中添加一项。</summary>
      <param name="key" vsli:raw="The string key, which is the name of the XAML namescope mapping to add.">字符串键，即作为要添加的 XAML 名称范围映射的名称。</param>
      <param name="value" vsli:raw="The object value, which is the object reference of the XAML namescope mapping to add.">对象值，即要添加的 XAML 名称范围映射的对象引用。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; or &lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 或 <paramref name="value" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.NameScope.Clear">
      <summary vsli:raw="Removes all items from the collection.">从集合中移除所有项。</summary>
    </member>
    <member name="M:System.Windows.NameScope.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary vsli:raw="Determines whether the collection contains a specified item.">确定集合是否包含指定的项。</summary>
      <param name="item" vsli:raw="The item to find in the collection, specified as a &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; (key is &lt;see cref=&quot;T:System.String&quot; /&gt;, value is &lt;see cref=&quot;T:System.Object&quot; /&gt;).">要在集合中查找的项，指定为 <see cref="T:System.Collections.Generic.KeyValuePair`2" />（键为 <see cref="T:System.String" />，值为 <see cref="T:System.Object" />）。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; identifies an existing mapping in this &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; . &lt;see langword=&quot;false&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; does not exist in the current &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt;.">如果指定的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 标识此 <see cref="T:System.Windows.NameScope" /> 中的现有映射，则为 <see langword="true" />。 如果当前的 <see cref="T:System.Collections.Generic.KeyValuePair`2" /> 中不存在指定的 <see cref="T:System.Windows.NameScope" />，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.NameScope.ContainsKey(System.String)">
      <summary vsli:raw="Returns whether a provided name already exists in this &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt;.">返回此 <see cref="T:System.Windows.NameScope" /> 中是否已存在所提供的名称。</summary>
      <param name="key" vsli:raw="The string key to find.">要查找的字符串键。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="key" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;paramref name=&quot;key&quot; /&gt; identifies a name for an existing mapping in this &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt;. &lt;see langword=&quot;false&quot; /&gt; if the specified &lt;paramref name=&quot;key&quot; /&gt; does not exist in the current &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt;.">如果指定的 <paramref name="key" /> 标识此 <see cref="T:System.Windows.NameScope" /> 中现有映射的名称，则为 <see langword="true" />。 如果当前的 <paramref name="key" /> 中不存在指定的 <see cref="T:System.Windows.NameScope" />，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.NameScope.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
      <summary vsli:raw="Copies the elements of the collection to an array, starting at a particular array index.">从特定的数组索引开始，将集合的元素复制到数组中。</summary>
      <param name="array" vsli:raw="The one-dimensional array that is the destination of the elements copied from the collection The array must have zero-based indexing.">一维数组，是从集合中复制的元素的目标，并且索引必须从零开始。</param>
      <param name="arrayIndex" vsli:raw="The zero-based index in &lt;paramref name=&quot;array&quot; /&gt; at which copying begins.">
        <paramref name="array" /> 中从零开始的索引，从此处开始复制。</param>
    </member>
    <member name="M:System.Windows.NameScope.FindName(System.String)">
      <summary vsli:raw="Returns the corresponding object in the XAML namescope maintained by this &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt;, based on a provided name string.">根据提供的名称字符串，返回由此 <see cref="T:System.Windows.NameScope" /> 保留的 XAML 名称范围中的相应对象。</summary>
      <param name="name" vsli:raw="Name portion of an existing mapping to retrieve the object portion for.">要检索其对象部分的现有映射的名称部分。</param>
      <returns vsli:raw="The requested object that is mapped with &lt;paramref name=&quot;name&quot; /&gt;. Can return &lt;see langword=&quot;null&quot; /&gt; if &lt;paramref name=&quot;name&quot; /&gt; was provided as &lt;see langword=&quot;null&quot; /&gt; or empty string, or if no matching object was found.">用 <paramref name="name" /> 映射的所请求对象。 如果提供的 <paramref name="name" /> 为 <see langword="null" /> 或空字符串，或者未找到匹配的对象，则可返回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.NameScope.GetNameScope(System.Windows.DependencyObject)">
      <summary vsli:raw="Provides the attached property get accessor for the &lt;see cref=&quot;P:System.Windows.NameScope.NameScope&quot; /&gt; attached property.">为 <see cref="P:System.Windows.NameScope.NameScope" /> 附加属性提供附加属性 get 访问器。</summary>
      <param name="dependencyObject" vsli:raw="The object to get the XAML namescope from.">要从中获取 XAML 名称范围的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dependencyObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dependencyObject" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="A XAML namescope, as an &lt;see cref=&quot;T:System.Windows.Markup.INameScope&quot; /&gt; instance.">以 <see cref="T:System.Windows.Markup.INameScope" /> 实例表示的 XAML 名称范围。</returns>
    </member>
    <member name="M:System.Windows.NameScope.RegisterName(System.String,System.Object)">
      <summary vsli:raw="Registers a new name-object pair into the current XAML namescope.">将新的名称-对象对注册到当前的 XAML 名称范围中。</summary>
      <param name="name" vsli:raw="The name to use for mapping the given object.">要用于映射给定对象的名称。</param>
      <param name="scopedElement" vsli:raw="The object to be mapped to the provided name.">要映射到所提供名称的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; or &lt;paramref name=&quot;scopedElement&quot; /&gt; was provided as &lt;see langword=&quot;null&quot; /&gt;.">提供的 <paramref name="name" /> 或 <paramref name="scopedElement" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; was provided as empty string  &#xA;  &#xA;-or-&#xA;  &#xA; &lt;paramref name=&quot;name&quot; /&gt; provided was rejected by the parser, because it contained characters that are invalid for a XAML name  &#xA;  &#xA;-or-&#xA;  &#xA; &lt;paramref name=&quot;name&quot; /&gt; provided would result in a duplicate name registration.">提供的 <paramref name="name" /> 为空字符串 
- 或 - 
 提供的 <paramref name="name" /> 包含对 XAML 名称无效的字符，因此被分析程序拒绝 
- 或 - 
 提供的 <paramref name="name" /> 导致注册重复的名称。</exception>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
      <summary vsli:raw="Removes the specific object from the collection.">从集合中移除特定对象。</summary>
      <param name="item" vsli:raw="The object to remove from the collection, specified as a &lt;see cref=&quot;T:System.Collections.Generic.KeyValuePair`2&quot; /&gt; (key is &lt;see cref=&quot;T:System.String&quot; /&gt;, value is &lt;see cref=&quot;T:System.Object&quot; /&gt;).">要从集合中移除的对象，指定为 <see cref="T:System.Collections.Generic.KeyValuePair`2" />（键为 <see cref="T:System.String" />，值为 <see cref="T:System.Object" />）。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the collection, otherwise &lt;see langword=&quot;false&quot; /&gt;. Also returns &lt;see langword=&quot;false&quot; /&gt; if the item was not found in the collection.">如果从集合中成功移除了项，则为 <see langword="true" />；否则为 <see langword="false" />。 如果在集合中没有找到该项，还会返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.NameScope.Remove(System.String)">
      <summary vsli:raw="Removes a mapping for a specified name from the collection.">从集合中移除指定名称的映射。</summary>
      <param name="key" vsli:raw="The string key, which is the name of the XAML namescope mapping to remove.">字符串键，这是要移除的 XAML 名称范围映射的名称。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if item was successfully removed from the collection, otherwise &lt;see langword=&quot;false&quot; /&gt;. Also returns &lt;see langword=&quot;false&quot; /&gt; if the item was not found in the collection.">如果从集合中成功移除了项，则为 <see langword="true" />；否则为 <see langword="false" />。 如果在集合中没有找到该项，还会返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.NameScope.SetNameScope(System.Windows.DependencyObject,System.Windows.Markup.INameScope)">
      <summary vsli:raw="Provides the attached property set accessor for the &lt;see cref=&quot;P:System.Windows.NameScope.NameScope&quot; /&gt; attached property.">为 <see cref="P:System.Windows.NameScope.NameScope" /> 附加属性提供附加属性 set 访问器。</summary>
      <param name="dependencyObject" vsli:raw="Object to change XAML namescope for.">要为其更改 XAML 名称范围的对象。</param>
      <param name="value" vsli:raw="The new XAML namescope, using an interface cast.">使用接口转换的新 XAML 名称范围。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dependencyObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dependencyObject" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{System#String@System#Object}}#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An enumerator that iterates through a collection.">循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Windows.NameScope.System#Collections#IEnumerable#GetEnumerator">
      <summary vsli:raw="Returns an enumerator that iterates through a collection.">返回循环访问集合的枚举数。</summary>
      <returns vsli:raw="An enumerator that iterates through a collection.">循环访问集合的枚举器。</returns>
    </member>
    <member name="M:System.Windows.NameScope.TryGetValue(System.String,System.Object@)">
      <summary vsli:raw="Gets the value associated with the specified key.">获取与指定键关联的值。</summary>
      <param name="key" vsli:raw="The key of the value to get.">要获取的值的键。</param>
      <param name="value" vsli:raw="When this method returns, contains the value associated with the specified key, if the key is found; otherwise, a null object. This parameter is passed uninitialized.">当此方法返回时，如果找到指定的键，则其中包含与该键关联的值；否则为 null 对象。 此参数未经初始化即被传递。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; contains a mapping for the name provided as &lt;paramref name=&quot;key&quot; /&gt;. Otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Windows.NameScope" /> 包含以 <paramref name="key" /> 形式提供的名称的映射，则为 <see langword="true" />。 否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.NameScope.UnregisterName(System.String)">
      <summary vsli:raw="Removes a name-object mapping from the XAML namescope.">从 XAML 名称范围中删除名称对象映射。</summary>
      <param name="name" vsli:raw="The name of the mapping to remove.">要删除的映射的名称。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; was provided as empty string.  &#xA;  &#xA;-or-&#xA;  &#xA; &lt;paramref name=&quot;name&quot; /&gt; provided had not been registered.">
        <paramref name="name" /> 是作为空字符串提供的。  
  
- 或 - 
 提供的 <paramref name="name" /> 尚未注册。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="name" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Windows.NameScope.Count">
      <summary vsli:raw="Returns the number of items in the collection of mapped names in this &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt;.">返回此 <see cref="T:System.Windows.NameScope" /> 中映射名称的集合中的项数。</summary>
      <returns vsli:raw="The number of items in the collection.">集合中项的数目。</returns>
    </member>
    <member name="P:System.Windows.NameScope.IsReadOnly">
      <summary vsli:raw="Gets a value indicating whether the collection is read-only.">获取一个值，该值指示集合是否为只读。</summary>
      <returns vsli:raw="Always returns &lt;see langword=&quot;false&quot; /&gt;.">始终返回 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.NameScope.Item(System.String)">
      <summary vsli:raw="Gets or sets the item with the specified key.">获取或设置具有指定键的项。</summary>
      <param name="key" vsli:raw="The string name for the XAML name mapping to get or set.">映射到 get 或 set 的 XAML 名称映射的字符串名称。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;key&quot; /&gt; is provided as &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is provided as &lt;see langword=&quot;null&quot; /&gt; for a set operation.">
        <paramref name="key" /> 提供为 <see langword="null" />。  
  
- 或 - 
 <paramref name="value" /> 作为用于设置操作的 <see langword="null" /> 提供。</exception>
      <returns vsli:raw="The value of the object mapped by the XAML name provided as &lt;paramref name=&quot;key&quot; /&gt;.">以 <paramref name="key" /> 形式提供的 XAML 名称所映射的对象的值。</returns>
    </member>
    <member name="P:System.Windows.NameScope.Keys">
      <summary vsli:raw="Gets a collection of the keys in the &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; dictionary.">获取 <see cref="T:System.Windows.NameScope" /> 字典中键的集合。</summary>
      <returns vsli:raw="A collection of the keys in the &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; dictionary.">
        <see cref="T:System.Windows.NameScope" /> 字典中键的集合。</returns>
    </member>
    <member name="P:System.Windows.NameScope.NameScope">
      <summary vsli:raw="Gets or sets dynamically attached &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; instances.">获取或设置动态附加的 <see cref="T:System.Windows.NameScope" /> 实例。</summary>
    </member>
    <member name="P:System.Windows.NameScope.Values">
      <summary vsli:raw="Gets a collection of the values in the &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; dictionary.">获取 <see cref="T:System.Windows.NameScope" /> 字典中值的集合。</summary>
      <returns vsli:raw="A collection of the values in the &lt;see cref=&quot;T:System.Windows.NameScope&quot; /&gt; dictionary.">
        <see cref="T:System.Windows.NameScope" /> 字典中值的集合。</returns>
    </member>
    <member name="T:System.Windows.Point">
      <summary vsli:raw="Represents an x- and y-coordinate pair in two-dimensional space.">表示二维空间中的 x 坐标和 y 坐标对。</summary>
    </member>
    <member name="M:System.Windows.Point.#ctor(System.Double,System.Double)">
      <summary vsli:raw="Creates a new &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure that contains the specified coordinates.">创建一个包含指定坐标的新 <see cref="T:System.Windows.Point" /> 结构。</summary>
      <param name="x" vsli:raw="The x-coordinate of the new &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">新的 <see cref="T:System.Windows.Point" /> 结构的 x 坐标。</param>
      <param name="y" vsli:raw="The y-coordinate of the new &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">新的 <see cref="T:System.Windows.Point" /> 结构的 y 坐标。</param>
    </member>
    <member name="M:System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; to a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; and returns the result as a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">将 <see cref="T:System.Windows.Vector" /> 与 <see cref="T:System.Windows.Point" /> 相加并将结果以 <see cref="T:System.Windows.Point" /> 结构返回。</summary>
      <param name="point" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure to add.">要添加的 <see cref="T:System.Windows.Point" /> 结构。</param>
      <param name="vector" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure to add.">要添加的 <see cref="T:System.Windows.Vector" /> 结构。</param>
      <returns vsli:raw="Returns the sum of &lt;paramref name=&quot;point&quot; /&gt; and &lt;paramref name=&quot;vector&quot; /&gt;.">返回 <paramref name="point" /> 和 <paramref name="vector" /> 的总和。</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; and whether it contains the same coordinates as this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">确定指定的 <see cref="T:System.Object" /> 是否是 <see cref="T:System.Windows.Point" /> 以及它是否包含与此 <see cref="T:System.Windows.Point" /> 相同的坐标。</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare.">要比较的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; and contains the same &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; values as this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="o" /> 是 <see cref="T:System.Windows.Point" /> 并且包含与此 <see cref="P:System.Windows.Point.X" /> 相同的 <see cref="P:System.Windows.Point.Y" /> 值和 <see cref="T:System.Windows.Point" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structures for equality.">比较两个 <see cref="T:System.Windows.Point" /> 结构是否相等。</summary>
      <param name="value" vsli:raw="The point to compare to this instance.">要与此实例进行比较的点。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if both &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structures contain the same &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; values; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个 <see cref="T:System.Windows.Point" /> 结构都包含相同的 <see cref="P:System.Windows.Point.X" /> 值和 <see cref="P:System.Windows.Point.Y" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structures for equality.">比较两个 <see cref="T:System.Windows.Point" /> 结构是否相等。</summary>
      <param name="point1" vsli:raw="The first point to compare.">要比较的第一个点。</param>
      <param name="point2" vsli:raw="The second point to compare.">要比较的第二个点。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;point1&quot; /&gt; and &lt;paramref name=&quot;point2&quot; /&gt; contain the same &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; values; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="point1" /> 和 <paramref name="point2" /> 包含相同的 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.GetHashCode">
      <summary vsli:raw="Returns the hash code for this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">返回此 <see cref="T:System.Windows.Point" /> 的哈希代码。</summary>
      <returns vsli:raw="The hash code for this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">此 <see cref="T:System.Windows.Point" /> 结构的哈希代码。</returns>
    </member>
    <member name="M:System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary vsli:raw="Transforms the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure by the specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt; structure.">使用指定的 <see cref="T:System.Windows.Point" /> 结构转换指定的 <see cref="T:System.Windows.Media.Matrix" /> 结构。</summary>
      <param name="point" vsli:raw="The point to transform.">要转换的点。</param>
      <param name="matrix" vsli:raw="The transformation matrix.">变换矩阵。</param>
      <returns vsli:raw="The transformed point.">已转换的点。</returns>
    </member>
    <member name="M:System.Windows.Point.Offset(System.Double,System.Double)">
      <summary vsli:raw="Offsets a point's &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; coordinates by the specified amounts.">将某个点的 <see cref="P:System.Windows.Point.X" /> 坐标和 <see cref="P:System.Windows.Point.Y" /> 坐标偏移指定的量。</summary>
      <param name="offsetX" vsli:raw="The amount to offset the point's &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; coordinate.">要偏移该点 <see cref="P:System.Windows.Point.X" /> 坐标的量。</param>
      <param name="offsetY" vsli:raw="The amount to offset the point's &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; coordinate.">要偏移该点 <see cref="P:System.Windows.Point.Y" /> 坐标的量。</param>
    </member>
    <member name="M:System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)">
      <summary vsli:raw="Translates the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; by the specified &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; and returns the result.">将指定的 <see cref="T:System.Windows.Point" /> 平移指定的 <see cref="T:System.Windows.Vector" /> 并返回结果。</summary>
      <param name="point" vsli:raw="The point to translate.">要平移的点。</param>
      <param name="vector" vsli:raw="The amount by which to translate &lt;paramref name=&quot;point&quot; /&gt;.">
        <paramref name="point" /> 的平移量。</param>
      <returns vsli:raw="The result of translating the specified point by the specified vector.">将指定点平移指定的向量所得的结果。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structures for equality.">比较两个 <see cref="T:System.Windows.Point" /> 结构是否相等。</summary>
      <param name="point1" vsli:raw="The first &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure to compare.">要比较的第一个 <see cref="T:System.Windows.Point" /> 结构。</param>
      <param name="point2" vsli:raw="The second &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure to compare.">要比较的第二个 <see cref="T:System.Windows.Point" /> 结构。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if both the &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; coordinates of &lt;paramref name=&quot;point1&quot; /&gt; and &lt;paramref name=&quot;point2&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果两个点（即 <paramref name="point1" /> 和 <paramref name="point2" />）的 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 坐标都相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Size">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure with a &lt;see cref=&quot;P:System.Windows.Size.Width&quot; /&gt; equal to this point's &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; value and a &lt;see cref=&quot;P:System.Windows.Size.Height&quot; /&gt; equal to this point's &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; value.">创建一个 <see cref="T:System.Windows.Size" /> 结构，该结构的 <see cref="P:System.Windows.Size.Width" /> 等于此点的 <see cref="P:System.Windows.Point.X" /> 值，且 <see cref="P:System.Windows.Size.Height" /> 等于此点的 <see cref="P:System.Windows.Point.Y" /> 值。</summary>
      <param name="point" vsli:raw="The point to convert.">要变换的点。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure with a &lt;see cref=&quot;P:System.Windows.Size.Width&quot; /&gt; equal to this point's &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; value and a &lt;see cref=&quot;P:System.Windows.Size.Height&quot; /&gt; equal to this point's &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; value.">一个 <see cref="T:System.Windows.Size" /> 结构，它的 <see cref="P:System.Windows.Size.Width" /> 等于此点的 <see cref="P:System.Windows.Point.X" /> 值，且 <see cref="P:System.Windows.Size.Height" /> 等于此点的 <see cref="P:System.Windows.Point.Y" /> 值。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Explicit(System.Windows.Point)~System.Windows.Vector">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure with an &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; value equal to the point's &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; value and a &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; value equal to the point's &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; value.">创建一个 <see cref="T:System.Windows.Vector" /> 结构，该结构的 <see cref="P:System.Windows.Vector.X" /> 值等于该点的 <see cref="P:System.Windows.Point.X" /> 值，且 <see cref="P:System.Windows.Vector.Y" /> 值等于该点的 <see cref="P:System.Windows.Point.Y" /> 值。</summary>
      <param name="point" vsli:raw="The point to convert.">要变换的点。</param>
      <returns vsli:raw="A vector with an &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; value equal to the point's &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; value and a &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; value equal to the point's &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; value.">一个向量，它的 <see cref="P:System.Windows.Vector.X" /> 值等于该点的 <see cref="P:System.Windows.Point.X" /> 值，且 <see cref="P:System.Windows.Vector.Y" /> 值等于该点的 <see cref="P:System.Windows.Point.Y" /> 值。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)">
      <summary vsli:raw="Compares two &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structures for inequality.">比较两个 <see cref="T:System.Windows.Point" /> 结构是否不相等。</summary>
      <param name="point1" vsli:raw="The first point to compare.">要比较的第一个点。</param>
      <param name="point2" vsli:raw="The second point to compare.">要比较的第二个点。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;point1&quot; /&gt; and &lt;paramref name=&quot;point2&quot; /&gt; have different &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; or &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; coordinates; &lt;see langword=&quot;false&quot; /&gt; if &lt;paramref name=&quot;point1&quot; /&gt; and &lt;paramref name=&quot;point2&quot; /&gt; have the same &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; coordinates.">如果 <paramref name="point1" /> 和 <paramref name="point2" /> 有不同的 <see cref="P:System.Windows.Point.X" /> 或 <see cref="P:System.Windows.Point.Y" /> 坐标，则为 <see langword="true" />；如果 <paramref name="point1" /> 和 <paramref name="point2" /> 有相同的 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 坐标，则为.<see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)">
      <summary vsli:raw="Transforms the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; by the specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">将指定的 <see cref="T:System.Windows.Point" /> 转换为指定的 <see cref="T:System.Windows.Media.Matrix" />。</summary>
      <param name="point" vsli:raw="The point to transform.">要转换的点。</param>
      <param name="matrix" vsli:raw="The transformation matrix.">变换矩阵。</param>
      <returns vsli:raw="The result of transforming the specified point using the specified matrix.">使用指定的矩阵转换指定点所得的结果。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)">
      <summary vsli:raw="Subtracts the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; from another specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; and returns the difference as a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">从指定的 <see cref="T:System.Windows.Point" /> 中减去另一个指定的 <see cref="T:System.Windows.Point" /> 并将差作为 <see cref="T:System.Windows.Vector" /> 返回。</summary>
      <param name="point1" vsli:raw="The point from which &lt;paramref name=&quot;point2&quot; /&gt; is subtracted.">要从中减去 <paramref name="point2" /> 的点。</param>
      <param name="point2" vsli:raw="The point to subtract from &lt;paramref name=&quot;point1&quot; /&gt;.">要从 <paramref name="point1" /> 中减去的点。</param>
      <returns vsli:raw="The difference between &lt;paramref name=&quot;point1&quot; /&gt; and &lt;paramref name=&quot;point2&quot; /&gt;.">
        <paramref name="point1" /> 和 <paramref name="point2" /> 之间的差值。</returns>
    </member>
    <member name="M:System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)">
      <summary vsli:raw="Subtracts the specified &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; from the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; and returns the resulting &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">从指定的 <see cref="T:System.Windows.Vector" /> 减去指定的 <see cref="T:System.Windows.Point" /> 并返回所得的 <see cref="T:System.Windows.Point" />。</summary>
      <param name="point" vsli:raw="The point from which &lt;paramref name=&quot;vector&quot; /&gt; is subtracted.">要从中减去 <paramref name="vector" /> 的点。</param>
      <param name="vector" vsli:raw="The vector to subtract from &lt;paramref name=&quot;point1&quot; /&gt;.">要从 <paramref name="point1" /> 中减去的向量</param>
      <returns vsli:raw="The difference between &lt;paramref name=&quot;point&quot; /&gt; and &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="point" /> 和 <paramref name="vector" /> 之间的差值。</returns>
    </member>
    <member name="M:System.Windows.Point.Parse(System.String)">
      <summary vsli:raw="Constructs a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; from the specified &lt;see cref=&quot;T:System.String&quot; /&gt;.">从指定的 <see cref="T:System.Windows.Point" /> 构造 <see cref="T:System.String" />。</summary>
      <param name="source" vsli:raw="A string representation of a point.">点的字符串表示形式。</param>
      <exception cref="T:System.FormatException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; is not composed of two comma- or space-delimited double values.">
        <paramref name="source" /> 不是由两个逗号分隔或空格分隔的双精度值组成。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt; does not contain two numbers.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;source&quot; /&gt; contains too many delimiters.">
        <paramref name="source" /> 不包含两个数字。  
  
- 或 - 
 <paramref name="source" /> 包含的分隔符过多。</exception>
      <returns vsli:raw="The equivalent &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">等效的 <see cref="T:System.Windows.Point" /> 结构。</returns>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)">
      <summary vsli:raw="Subtracts the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; from another specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; and returns the difference as a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">从指定的 <see cref="T:System.Windows.Point" /> 中减去另一个指定的 <see cref="T:System.Windows.Point" /> 并将差作为 <see cref="T:System.Windows.Vector" /> 返回。</summary>
      <param name="point1" vsli:raw="The point from which &lt;paramref name=&quot;point2&quot; /&gt; is subtracted.">要从中减去 <paramref name="point2" /> 的点。</param>
      <param name="point2" vsli:raw="The point to subtract from &lt;paramref name=&quot;point1&quot; /&gt;.">要从 <paramref name="point1" /> 中减去的点。</param>
      <returns vsli:raw="The difference between &lt;paramref name=&quot;point1&quot; /&gt; and &lt;paramref name=&quot;point2&quot; /&gt;.">
        <paramref name="point1" /> 和 <paramref name="point2" /> 之间的差值。</returns>
    </member>
    <member name="M:System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)">
      <summary vsli:raw="Subtracts the specified &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; from the specified &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; and returns the resulting &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">从指定的 <see cref="T:System.Windows.Vector" /> 减去指定的 <see cref="T:System.Windows.Point" /> 并返回所得的 <see cref="T:System.Windows.Point" />。</summary>
      <param name="point" vsli:raw="The point from which &lt;paramref name=&quot;vector&quot; /&gt; is subtracted.">要从中减去 <paramref name="vector" /> 的点。</param>
      <param name="vector" vsli:raw="The &lt;paramref name=&quot;vector&quot; /&gt; to subtract from &lt;paramref name=&quot;point&quot; /&gt;.">要从 <paramref name="vector" /> 中减去的 <paramref name="point" />。</param>
      <returns vsli:raw="The difference between &lt;paramref name=&quot;point&quot; /&gt; and &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="point" /> 和 <paramref name="vector" /> 之间的差值。</returns>
    </member>
    <member name="M:System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see &lt;see cref=&quot;M:System.IFormattable.ToString(System.String,System.IFormatProvider)&quot; /&gt;.">此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不能在代码中直接使用。 有关此成员的说明，请参见 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />。</summary>
      <param name="format" vsli:raw="The string specifying the format to use.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default format defined for the type of the &lt;see cref=&quot;T:System.IFormattable&quot; /&gt; implementation.">指定要使用的格式的字符串。  
  
- 或 - 
 <see langword="null" />，表示使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。</param>
      <param name="provider" vsli:raw="The &lt;see langword=&quot;IFormatProvider&quot; /&gt; to use to format the value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to obtain the numeric format information from the current locale setting of the operating system.">用于格式化该值的 <see langword="IFormatProvider" />。  
  
- 或 - 
 从操作系统的当前区域设置中获取数字格式信息的 <see langword="null" />。</param>
      <returns vsli:raw="A string containing the value of the current instance in the specified format.">一个字符串，包含采用指定格式的当前实例的值。</returns>
    </member>
    <member name="M:System.Windows.Point.ToString">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.String&quot; /&gt; representation of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">创建此 <see cref="T:System.String" /> 的 <see cref="T:System.Windows.Point" /> 表示形式。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; values of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">一个 <see cref="T:System.String" />，它包含此 <see cref="P:System.Windows.Point.X" /> 结构的 <see cref="P:System.Windows.Point.Y" /> 和 <see cref="T:System.Windows.Point" /> 值。</returns>
    </member>
    <member name="M:System.Windows.Point.ToString(System.IFormatProvider)">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.String&quot; /&gt; representation of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">创建此 <see cref="T:System.String" /> 的 <see cref="T:System.Windows.Point" /> 表示形式。</summary>
      <param name="provider" vsli:raw="Culture-specific formatting information.">区域性特定的格式设置信息。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; containing the &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt; values of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">一个 <see cref="T:System.String" />，它包含此 <see cref="P:System.Windows.Point.X" /> 结构的 <see cref="P:System.Windows.Point.Y" /> 和 <see cref="T:System.Windows.Point" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Point.X">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt;-coordinate value of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.">获取或设置此 <see cref="P:System.Windows.Point.X" /> 结构的 <see cref="T:System.Windows.Point" /> 坐标值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt;-coordinate value of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.  The default value is &lt;c&gt;0&lt;/c&gt;.">此 <see cref="P:System.Windows.Point.X" /> 结构的 <see cref="T:System.Windows.Point" /> 坐标值。  默认值为 <c>0</c>。</returns>
    </member>
    <member name="P:System.Windows.Point.Y">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt;-coordinate value of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">获取或设置此 <see cref="P:System.Windows.Point.Y" /> 的 <see cref="T:System.Windows.Point" /> 坐标值。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt;-coordinate value of this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; structure.  The default value is &lt;c&gt;0&lt;/c&gt;.">此 <see cref="P:System.Windows.Point.Y" /> 结构的 <see cref="T:System.Windows.Point" /> 坐标值。  默认值为 <c>0</c>。</returns>
    </member>
    <member name="T:System.Windows.PointConverter">
      <summary vsli:raw="Converts instances of other types to and from a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">在 <see cref="T:System.Windows.Point" /> 实例与其他类型的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.PointConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.PointConverter&quot; /&gt; class.">初始化 <see cref="T:System.Windows.PointConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object can be converted from a given type to an instance of a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">确定是否可将一个对象从给定类型转换成 <see cref="T:System.Windows.Point" /> 的实例。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">描述类型的上下文信息。</param>
      <param name="sourceType" vsli:raw="The type of the source that is being evaluated for conversion.">正被计算用于转换的源类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted to a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该类型可以转换为 <see cref="T:System.Windows.Point" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.PointConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; can be converted to a different type.">确定是否可将 <see cref="T:System.Windows.Point" /> 的实例转换成其他类型。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">描述类型的上下文信息。</param>
      <param name="destinationType" vsli:raw="The desired type this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; is being evaluated for conversion.">要计算用于转换的此 <see cref="T:System.Windows.Point" /> 的所需类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; can be converted to &lt;paramref name=&quot;destinationType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果此 <see cref="T:System.Windows.Point" /> 可转换为 <paramref name="destinationType" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified object to a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">尝试将指定对象转换为 <see cref="T:System.Windows.Point" />。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">提供转换所需的上下文信息。</param>
      <param name="culture" vsli:raw="Cultural information to respect during conversion.">要在转换过程中考虑的区域性信息。</param>
      <param name="value" vsli:raw="The object being converted.">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The specified object is NULL or is a type that cannot be converted to a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">如果指定的对象为 NULL 或者是无法转换为 <see cref="T:System.Windows.Point" /> 的类型，则引发该异常。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; created from converting &lt;paramref name=&quot;value&quot; /&gt;.">通过转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Point" />。</returns>
    </member>
    <member name="M:System.Windows.PointConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; to a specified type.">尝试将 <see cref="T:System.Windows.Point" /> 转换为指定类型。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">提供转换所需的上下文信息。</param>
      <param name="culture" vsli:raw="Cultural information to respect during conversion.">要在转换过程中考虑的区域性信息。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; to convert.">要转换的 <see cref="T:System.Windows.Point" />。</param>
      <param name="destinationType" vsli:raw="The type to convert this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; to.">要将此 <see cref="T:System.Windows.Point" /> 转换为的类型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or is not a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;, or &lt;paramref name=&quot;destinationType&quot; /&gt; is not one of the valid types for conversion.">如果 <paramref name="value" /> 为 <see langword="null" /> 或者不是 <see cref="T:System.Windows.Point" />，或者，如果 <paramref name="destinationType" /> 不是有效的转换类型之一，则引发该异常。</exception>
      <returns vsli:raw="The object created from converting this &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">通过转换此 <see cref="T:System.Windows.Point" /> 创建的对象。</returns>
    </member>
    <member name="T:System.Windows.PropertyChangedCallback">
      <summary vsli:raw="Represents the callback that is invoked when the effective property value of a dependency property changes.">表示在依赖属性的有效属性值更改时调用的回调。</summary>
      <param name="d" vsli:raw="The &lt;see cref=&quot;T:System.Windows.DependencyObject&quot; /&gt; on which the property has changed value.">属性值已更改的 <see cref="T:System.Windows.DependencyObject" />。</param>
      <param name="e" vsli:raw="Event data that is issued by any event that tracks changes to the effective value of this property.">跟踪对此属性有效值的更改的任何事件发出的事件数据。</param>
    </member>
    <member name="T:System.Windows.PropertyMetadata">
      <summary vsli:raw="Defines certain behavior aspects of a dependency property as it is applied to a specific type, including conditions it was registered with.">定义依赖属性在应用于特定类型（包括该属性向其注册的条件）时行为的某些方面。</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.PropertyMetadata&quot; /&gt; class.">初始化 <see cref="T:System.Windows.PropertyMetadata" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.PropertyMetadata&quot; /&gt; class with a specified default value for the dependency property that this metadata will be applied to.">使用此元数据将应用于的依赖项对象的指定默认值，初始化 <see cref="T:System.Windows.PropertyMetadata" /> 类的新实例。</summary>
      <param name="defaultValue" vsli:raw="The default value to specify for a dependency property, usually provided as a value of some specific type.">要为依赖项对象指定的默认值，通常作为某种特定类型的值提供。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;defaultValue&quot; /&gt; cannot be set to the value &lt;see cref=&quot;F:System.Windows.DependencyProperty.UnsetValue&quot; /&gt;.">
        <paramref name="defaultValue" /> 不能设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.PropertyMetadata&quot; /&gt; class with the specified default value and &lt;see cref=&quot;T:System.Windows.PropertyChangedCallback&quot; /&gt; implementation reference.">用指定的默认值和 <see cref="T:System.Windows.PropertyMetadata" /> 实现引用初始化 <see cref="T:System.Windows.PropertyChangedCallback" /> 类的新实例。</summary>
      <param name="defaultValue" vsli:raw="The default value of the dependency property, usually provided as a value of some specific type.">依赖项对象的默认值，通常作为某种特定类型的值提供。</param>
      <param name="propertyChangedCallback" vsli:raw="Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.">对处理程序实现的引用，每当属性的有效值更改时，属性系统都将调用该处理程序实现。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;defaultValue&quot; /&gt; cannot be set to the value &lt;see cref=&quot;F:System.Windows.DependencyProperty.UnsetValue&quot; /&gt;.">
        <paramref name="defaultValue" /> 不能设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Object,System.Windows.PropertyChangedCallback,System.Windows.CoerceValueCallback)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.PropertyMetadata&quot; /&gt; class with the specified default value and callbacks.">用指定的默认值和回调初始化 <see cref="T:System.Windows.PropertyMetadata" /> 类的新实例。</summary>
      <param name="defaultValue" vsli:raw="The default value of the dependency property, usually provided as a value of some specific type.">依赖项对象的默认值，通常作为某种特定类型的值提供。</param>
      <param name="propertyChangedCallback" vsli:raw="Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.">对处理程序实现的引用，每当属性的有效值更改时，属性系统都将调用该处理程序实现。</param>
      <param name="coerceValueCallback" vsli:raw="Reference to a handler implementation that is to be called whenever the property system calls &lt;see cref=&quot;M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)&quot; /&gt; against this property.">对处理程序实现的引用，每当属性系统对该属性调用 <see cref="M:System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)" /> 时都将调用此处理程序实现。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;defaultValue&quot; /&gt; cannot be set to the value &lt;see cref=&quot;F:System.Windows.DependencyProperty.UnsetValue&quot; /&gt;.">
        <paramref name="defaultValue" /> 不能设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</exception>
    </member>
    <member name="M:System.Windows.PropertyMetadata.#ctor(System.Windows.PropertyChangedCallback)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.PropertyMetadata&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Windows.PropertyChangedCallback&quot; /&gt; implementation reference.">用指定的 <see cref="T:System.Windows.PropertyMetadata" /> 实现引用初始化 <see cref="T:System.Windows.PropertyChangedCallback" /> 类的新实例。</summary>
      <param name="propertyChangedCallback" vsli:raw="Reference to a handler implementation that is to be called by the property system whenever the effective value of the property changes.">对处理程序实现的引用，每当属性的有效值更改时，属性系统都将调用该处理程序实现。</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.Merge(System.Windows.PropertyMetadata,System.Windows.DependencyProperty)">
      <summary vsli:raw="Merges this metadata with the base metadata.">将此元数据与基元数据合并。</summary>
      <param name="baseMetadata" vsli:raw="The base metadata to merge with this instance's values.">要与此实例的值合并的基元数据。</param>
      <param name="dp" vsli:raw="The dependency property to which this metadata is being applied.">要应用此元数据的依赖项对象。</param>
    </member>
    <member name="M:System.Windows.PropertyMetadata.OnApply(System.Windows.DependencyProperty,System.Type)">
      <summary vsli:raw="Called when this metadata has been applied to a property, which indicates that the metadata is being sealed.">当此元数据已经应用到一个属性时（这表明正在密封元数据）调用。</summary>
      <param name="dp" vsli:raw="The dependency property to which the metadata has been applied.">已应用了元数据的依赖项对象。</param>
      <param name="targetType" vsli:raw="The type associated with this metadata if this is type-specific metadata. If this is default metadata, this value is a null reference.">与此元数据关联的类型（如果这是特定于类型的元数据）。 如果这是默认元数据，则此值为 null 引用。</param>
    </member>
    <member name="P:System.Windows.PropertyMetadata.CoerceValueCallback">
      <summary vsli:raw="Gets or sets a reference to a &lt;see cref=&quot;T:System.Windows.CoerceValueCallback&quot; /&gt; implementation specified in this metadata.">获取或设置对此元数据中所指定 <see cref="T:System.Windows.CoerceValueCallback" /> 实现的引用。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Cannot set a metadata property once it is applied to a dependency property operation.">将元数据属性应用于依赖属性操作后，无法设置该属性。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.CoerceValueCallback&quot; /&gt; implementation reference.">一个 <see cref="T:System.Windows.CoerceValueCallback" /> 实现引用。</returns>
    </member>
    <member name="P:System.Windows.PropertyMetadata.DefaultValue">
      <summary vsli:raw="Gets or sets the default value of the dependency property.">获取或设置依赖属性的默认值。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="Cannot be set to the value &lt;see cref=&quot;F:System.Windows.DependencyProperty.UnsetValue&quot; /&gt; once created.">创建之后不能设置为值 <see cref="F:System.Windows.DependencyProperty.UnsetValue" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Cannot set a metadata property once it is applied to a dependency property operation.">将元数据属性应用于依赖属性操作后，无法设置该属性。</exception>
      <returns vsli:raw="The default value of the property. The default value on a &lt;see cref=&quot;T:System.Windows.PropertyMetadata&quot; /&gt; instance created with the parameterless constructor will be &lt;see cref=&quot;F:System.Windows.DependencyProperty.UnsetValue&quot; /&gt;.">属性的默认值。 <see cref="T:System.Windows.PropertyMetadata" />使用无参数构造函数创建的实例上的默认值将为 <see cref="F:System.Windows.DependencyProperty.UnsetValue" /> 。</returns>
    </member>
    <member name="P:System.Windows.PropertyMetadata.IsSealed">
      <summary vsli:raw="Gets a value that determines whether the metadata has been applied to a property in some way, resulting in the immutable state of that metadata instance.">获取一个值，该值确定是否已通过某种方式将元数据应用于属性，从而导致该元数据实例变为不可变状态。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the metadata instance is immutable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果元数据实例不可变，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.PropertyMetadata.PropertyChangedCallback">
      <summary vsli:raw="Gets or sets a reference to a &lt;see cref=&quot;T:System.Windows.PropertyChangedCallback&quot; /&gt; implementation specified in this metadata.">获取或设置对此元数据中所指定 <see cref="T:System.Windows.PropertyChangedCallback" /> 实现的引用。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="Cannot set a metadata property once it is applied to a dependency property operation.">将元数据属性应用于依赖属性操作后，无法设置该属性。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.PropertyChangedCallback&quot; /&gt; implementation reference.">一个 <see cref="T:System.Windows.PropertyChangedCallback" /> 实现引用。</returns>
    </member>
    <member name="T:System.Windows.Rect">
      <summary vsli:raw="Describes the width, height, and location of a rectangle.">描述矩形的宽度、高度和位置。</summary>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Double,System.Double,System.Double,System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure that has the specified x-coordinate, y-coordinate, width, and height.">初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构具有指定的 x 坐标、y 坐标、宽度和高度。</summary>
      <param name="x" vsli:raw="The x-coordinate of the top-left corner of the rectangle.">矩形左上角的 x 坐标。</param>
      <param name="y" vsli:raw="The y-coordinate of the top-left corner of the rectangle.">矩形左上角的 y 坐标。</param>
      <param name="width" vsli:raw="The width of the rectangle.">矩形的宽度。</param>
      <param name="height" vsli:raw="The height of the rectangle.">矩形的高度。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;width&quot; /&gt; is a negative value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;height&quot; /&gt; is a negative value.">
        <paramref name="width" /> 是负值。  
  
- 或 - 
 <paramref name="height" /> 是负值。</exception>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Point)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure that is exactly large enough to contain the two specified points.">初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构的大小刚好足以包含两个指定点。</summary>
      <param name="point1" vsli:raw="The first point that the new rectangle must contain.">新矩形必须包含的第一个点。</param>
      <param name="point2" vsli:raw="The second point that the new rectangle must contain.">新矩形必须包含的第二个点。</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Size)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure that has the specified top-left corner location and the specified width and height.">初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构具有指定的左上角位置和指定的宽度及高度。</summary>
      <param name="location" vsli:raw="A point that specifies the location of the top-left corner of the rectangle.">一个点，指定矩形的左上角位置。</param>
      <param name="size" vsli:raw="A &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure that specifies the width and height of the rectangle.">一个 <see cref="T:System.Windows.Size" /> 结构，指定矩形的宽度和高度。</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Point,System.Windows.Vector)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure that is exactly large enough to contain the specified point and the sum of the specified point and the specified vector.">初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构的大小刚好足以包含指定点及指定点和指定向量之和。</summary>
      <param name="point" vsli:raw="The first point the rectangle must contain.">矩形必须包含的第一个点。</param>
      <param name="vector" vsli:raw="The amount to offset the specified point. The resulting rectangle will be exactly large enough to contain both points.">指定点的偏移量。 所得矩形的大小将刚好足以包含这两个点。</param>
    </member>
    <member name="M:System.Windows.Rect.#ctor(System.Windows.Size)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure that is of the specified size and is located at (0,0).">初始化 <see cref="T:System.Windows.Rect" /> 结构的新实例，此结构具有指定大小，位于 (0,0)。</summary>
      <param name="size" vsli:raw="A &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure that specifies the width and height of the rectangle.">一个 <see cref="T:System.Windows.Size" /> 结构，指定矩形的宽度和高度。</param>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Double,System.Double)">
      <summary vsli:raw="Indicates whether the rectangle contains the specified x-coordinate and y-coordinate.">指示矩形中是否包含指定的 x 坐标和 y 坐标。</summary>
      <param name="x" vsli:raw="The x-coordinate of the point to check.">要检查的点的 x 坐标。</param>
      <param name="y" vsli:raw="The y-coordinate of the point to check.">要检查的点的 y 坐标。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if (&lt;paramref name=&quot;x&quot; /&gt;, &lt;paramref name=&quot;y&quot; /&gt;) is contained by the rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果（<paramref name="x" />、<paramref name="y" />）包含在矩形中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Point)">
      <summary vsli:raw="Indicates whether the rectangle contains the specified point.">指示矩形中是否包含指定点。</summary>
      <param name="point" vsli:raw="The point to check.">要检查的点。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the rectangle contains the specified point; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果矩形中包含指定点，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Contains(System.Windows.Rect)">
      <summary vsli:raw="Indicates whether the rectangle contains the specified rectangle.">指示矩形中是否包含指定矩形。</summary>
      <param name="rect" vsli:raw="The rectangle to check.">要检查的矩形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;rect&quot; /&gt; is entirely contained by the rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="rect" /> 完全包含在矩形中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the specified object is equal to the current rectangle.">指示指定对象是否等于当前矩形。</summary>
      <param name="o" vsli:raw="The object to compare to the current rectangle.">要与当前矩形进行比较的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; and has the same &lt;see cref=&quot;P:System.Windows.Rect.Location&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Size&quot; /&gt; values as the current rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="o" /> 为 <see cref="T:System.Windows.Rect" />，并且具有与当前矩形相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect)">
      <summary vsli:raw="Indicates whether the specified rectangle is equal to the current rectangle.">指示指定矩形是否等于当前矩形。</summary>
      <param name="value" vsli:raw="The rectangle to compare to the current rectangle.">要与当前矩形进行比较的矩形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified rectangle has the same &lt;see cref=&quot;P:System.Windows.Rect.Location&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Size&quot; /&gt; values as the current rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定矩形具有与当前矩形相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Equals(System.Windows.Rect,System.Windows.Rect)">
      <summary vsli:raw="Indicates whether the specified rectangles are equal.">指示指定的矩形是否相等。</summary>
      <param name="rect1" vsli:raw="The first rectangle to compare.">要比较的第一个矩形。</param>
      <param name="rect2" vsli:raw="The second rectangle to compare.">要比较的第二个矩形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the rectangles have the same &lt;see cref=&quot;P:System.Windows.Rect.Location&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Size&quot; /&gt; values; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果这些矩形具有相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.GetHashCode">
      <summary vsli:raw="Creates a hash code for the rectangle.">创建矩形的哈希代码。</summary>
      <returns vsli:raw="A hash code for the current &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure.">当前 <see cref="T:System.Windows.Rect" /> 结构的哈希代码。</returns>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Double,System.Double)">
      <summary vsli:raw="Expands or shrinks the rectangle by using the specified width and height amounts, in all directions.">使用指定的宽度和高度量向所有方向放大或缩小矩形。</summary>
      <param name="width" vsli:raw="The amount by which to expand or shrink the left and right sides of the rectangle.">矩形左边和右边的放大或缩小量。</param>
      <param name="height" vsli:raw="The amount by which to expand or shrink the top and bottom sides of the rectangle.">矩形上边和下边的放大或缩小量。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method is called on the &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">对 <see cref="P:System.Windows.Rect.Empty" /> 矩形调用此方法。</exception>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Double,System.Double)">
      <summary vsli:raw="Creates a rectangle that results from expanding or shrinking the specified rectangle by the specified width and height amounts, in all directions.">创建一个矩形，该矩形是通过将指定矩形向所有方向放大或缩小指定宽度和高度而得到的。</summary>
      <param name="rect" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure to modify.">要修改的 <see cref="T:System.Windows.Rect" /> 结构。</param>
      <param name="width" vsli:raw="The amount by which to expand or shrink the left and right sides of the rectangle.">矩形左边和右边的放大或缩小量。</param>
      <param name="height" vsli:raw="The amount by which to expand or shrink the top and bottom sides of the rectangle.">矩形上边和下边的放大或缩小量。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;rect&quot; /&gt; is an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">
        <paramref name="rect" /> 是 <see cref="P:System.Windows.Rect.Empty" /> 矩形。</exception>
      <returns vsli:raw="The resulting rectangle.">所得矩形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Rect,System.Windows.Size)">
      <summary vsli:raw="Returns the rectangle that results from expanding the specified rectangle by the specified &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;, in all directions.">返回矩形，该矩形是通过将指定矩形向所有方向放大指定 <see cref="T:System.Windows.Size" /> 而得到的。</summary>
      <param name="rect" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; structure to modify.">要修改的 <see cref="T:System.Windows.Rect" /> 结构。</param>
      <param name="size" vsli:raw="Specifies the amount to expand the rectangle. The &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Size.Width&quot; /&gt; property specifies the amount to increase the rectangle's &lt;see cref=&quot;P:System.Windows.Rect.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Right&quot; /&gt; properties. The &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Size.Height&quot; /&gt; property specifies the amount to increase the rectangle's &lt;see cref=&quot;P:System.Windows.Rect.Top&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Bottom&quot; /&gt; properties.">指定矩形的放大量。 <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Width" /> 属性指定矩形的 <see cref="P:System.Windows.Rect.Left" /> 和 <see cref="P:System.Windows.Rect.Right" /> 属性的增量。 <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Height" /> 属性指定矩形的 <see cref="P:System.Windows.Rect.Top" /> 和 <see cref="P:System.Windows.Rect.Bottom" /> 属性的增量。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;rect&quot; /&gt; is an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">
        <paramref name="rect" /> 是 <see cref="P:System.Windows.Rect.Empty" /> 矩形。</exception>
      <returns vsli:raw="The resulting rectangle.">所得矩形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Inflate(System.Windows.Size)">
      <summary vsli:raw="Expands the rectangle by using the specified &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;, in all directions.">使用指定的 <see cref="T:System.Windows.Size" /> 向所有方向放大矩形。</summary>
      <param name="size" vsli:raw="Specifies the amount to expand the rectangle. The &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Size.Width&quot; /&gt; property specifies the amount to increase the rectangle's &lt;see cref=&quot;P:System.Windows.Rect.Left&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Right&quot; /&gt; properties. The &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure's &lt;see cref=&quot;P:System.Windows.Size.Height&quot; /&gt; property specifies the amount to increase the rectangle's &lt;see cref=&quot;P:System.Windows.Rect.Top&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Bottom&quot; /&gt; properties.">指定矩形的放大量。 <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Width" /> 属性指定矩形的 <see cref="P:System.Windows.Rect.Left" /> 和 <see cref="P:System.Windows.Rect.Right" /> 属性的增量。 <see cref="T:System.Windows.Size" /> 结构的 <see cref="P:System.Windows.Size.Height" /> 属性指定矩形的 <see cref="P:System.Windows.Rect.Top" /> 和 <see cref="P:System.Windows.Rect.Bottom" /> 属性的增量。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method is called on the &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">对 <see cref="P:System.Windows.Rect.Empty" /> 矩形调用此方法。</exception>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect)">
      <summary vsli:raw="Finds the intersection of the current rectangle and the specified rectangle, and stores the result as the current rectangle.">查找当前矩形和指定矩形的交集，并将结果存储为当前矩形。</summary>
      <param name="rect" vsli:raw="The rectangle to intersect with the current rectangle.">要与当前矩形相交的矩形。</param>
    </member>
    <member name="M:System.Windows.Rect.Intersect(System.Windows.Rect,System.Windows.Rect)">
      <summary vsli:raw="Returns the intersection of the specified rectangles.">返回指定矩形的交集。</summary>
      <param name="rect1" vsli:raw="The first rectangle to compare.">要比较的第一个矩形。</param>
      <param name="rect2" vsli:raw="The second rectangle to compare.">要比较的第二个矩形。</param>
      <returns vsli:raw="The intersection of the two rectangles, or &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; if no intersection exists.">两个矩形的交集；如果不存在任何交集，则为 <see cref="P:System.Windows.Rect.Empty" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.IntersectsWith(System.Windows.Rect)">
      <summary vsli:raw="Indicates whether the specified rectangle intersects with the current rectangle.">指示指定矩形是否与当前矩形相交。</summary>
      <param name="rect" vsli:raw="The rectangle to check.">要检查的矩形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified rectangle intersects with the current rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定矩形与当前矩形相交，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Double,System.Double)">
      <summary vsli:raw="Moves the rectangle by the specified horizontal and vertical amounts.">将矩形沿水平和垂直方向移动指定的量。</summary>
      <param name="offsetX" vsli:raw="The amount to move the rectangle horizontally.">水平移动矩形的量。</param>
      <param name="offsetY" vsli:raw="The amount to move the rectangle vertically.">垂直移动矩形的量。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method is called on the &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">对 <see cref="P:System.Windows.Rect.Empty" /> 矩形调用此方法。</exception>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Double,System.Double)">
      <summary vsli:raw="Returns a rectangle that is offset from the specified rectangle by using the specified horizontal and vertical amounts.">返回一个矩形，该矩形是通过将指定矩形偏移指定的水平和垂直量而得到的。</summary>
      <param name="rect" vsli:raw="The rectangle to move.">要移动的矩形。</param>
      <param name="offsetX" vsli:raw="The horizontal offset for the new rectangle.">新矩形的水平偏移量。</param>
      <param name="offsetY" vsli:raw="The vertical offset for the new rectangle.">新矩形的垂直偏移量。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;rect&quot; /&gt; is &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt;.">
        <paramref name="rect" /> 为 <see cref="P:System.Windows.Rect.Empty" />。</exception>
      <returns vsli:raw="The resulting rectangle.">所得矩形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Rect,System.Windows.Vector)">
      <summary vsli:raw="Returns a rectangle that is offset from the specified rectangle by using the specified vector.">返回一个矩形，该矩形是通过将指定矩形偏移指定向量而得到的。</summary>
      <param name="rect" vsli:raw="The original rectangle.">原始矩形。</param>
      <param name="offsetVector" vsli:raw="A vector that specifies the horizontal and vertical offsets for the new rectangle.">一个向量，指定新矩形的水平和垂直偏移量。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;rect&quot; /&gt; is &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt;.">
        <paramref name="rect" /> 为 <see cref="P:System.Windows.Rect.Empty" />。</exception>
      <returns vsli:raw="The resulting rectangle.">所得矩形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Offset(System.Windows.Vector)">
      <summary vsli:raw="Moves the rectangle by the specified vector.">将矩形移动指定向量。</summary>
      <param name="offsetVector" vsli:raw="A vector that specifies the horizontal and vertical amounts to move the rectangle.">一个向量，指定矩形沿水平和垂直方向移动的量。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This method is called on the &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">对 <see cref="P:System.Windows.Rect.Empty" /> 矩形调用此方法。</exception>
    </member>
    <member name="M:System.Windows.Rect.op_Equality(System.Windows.Rect,System.Windows.Rect)">
      <summary vsli:raw="Compares two rectangles for exact equality.">比较两个矩形是否完全相等。</summary>
      <param name="rect1" vsli:raw="The first rectangle to compare.">要比较的第一个矩形。</param>
      <param name="rect2" vsli:raw="The second rectangle to compare.">要比较的第二个矩形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the rectangles have the same &lt;see cref=&quot;P:System.Windows.Rect.Location&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Size&quot; /&gt; values; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果这些矩形具有相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.op_Inequality(System.Windows.Rect,System.Windows.Rect)">
      <summary vsli:raw="Compares two rectangles for inequality.">比较两个矩形是否不相等。</summary>
      <param name="rect1" vsli:raw="The first rectangle to compare.">要比较的第一个矩形。</param>
      <param name="rect2" vsli:raw="The second rectangle to compare.">要比较的第二个矩形。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the rectangles do not have the same &lt;see cref=&quot;P:System.Windows.Rect.Location&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Size&quot; /&gt; values; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果这些矩形具有不相同的 <see cref="P:System.Windows.Rect.Location" /> 和 <see cref="P:System.Windows.Rect.Size" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Rect.Parse(System.String)">
      <summary vsli:raw="Creates a new rectangle from the specified string representation.">根据指定的字符串表示形式创建新的矩形。</summary>
      <param name="source" vsli:raw="The string representation of the rectangle, in the form &quot;x, y, width, height&quot;.">矩形的字符串表示形式，格式为“x, y, width, height”。</param>
      <returns vsli:raw="The resulting rectangle.">所得矩形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Scale(System.Double,System.Double)">
      <summary vsli:raw="Multiplies the size of the current rectangle by the specified x and y values.">将当前矩形的大小与指定的 x 和 y 值相乘。</summary>
      <param name="scaleX" vsli:raw="The scale factor in the x-direction.">x 方向的比例因子。</param>
      <param name="scaleY" vsli:raw="The scale factor in the y-direction.">y 方向的比例因子。</param>
    </member>
    <member name="M:System.Windows.Rect.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="Formats the value of the current instance using the specified format.">使用指定格式对当前实例的值设置格式。</summary>
      <param name="format" vsli:raw="The format to use.  &#xA;  &#xA; -or-  &#xA;  &#xA; A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) to use the default format defined for the type of the &lt;see cref=&quot;T:System.IFormattable&quot; /&gt; implementation.">要使用的格式。  
  
- 或 - 
null 引用（在 Visual Basic 中为 <see langword="Nothing" />），用于使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。</param>
      <param name="provider" vsli:raw="The provider to use to format the value.  &#xA;  &#xA; -or-  &#xA;  &#xA; A null reference (&lt;see langword=&quot;Nothing&quot; /&gt; in Visual Basic) to obtain the numeric format information from the current locale setting of the operating system.">要用于格式化值的提供程序。  
  
- 或 - 
null 引用（在 Visual Basic 中为 <see langword="Nothing" />），用于从操作系统的当前区域设置获取数字格式信息。</param>
      <returns vsli:raw="A string representation of the rectangle.">矩形的字符串表示形式。</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString">
      <summary vsli:raw="Returns a string representation of the rectangle.">返回矩形的字符串表示形式。</summary>
      <returns vsli:raw="A string representation of the current rectangle. The string has the following form: &quot;&lt;see cref=&quot;P:System.Windows.Rect.X&quot; /&gt;,&lt;see cref=&quot;P:System.Windows.Rect.Y&quot; /&gt;,&lt;see cref=&quot;P:System.Windows.Rect.Width&quot; /&gt;,&lt;see cref=&quot;P:System.Windows.Rect.Height&quot; /&gt;&quot;.">当前矩形的字符串表示形式。 此字符串采用以下格式："<see cref="P:System.Windows.Rect.X" />,<see cref="P:System.Windows.Rect.Y" />,<see cref="P:System.Windows.Rect.Width" />,<see cref="P:System.Windows.Rect.Height" />"。</returns>
    </member>
    <member name="M:System.Windows.Rect.ToString(System.IFormatProvider)">
      <summary vsli:raw="Returns a string representation of the rectangle by using the specified format provider.">使用指定的格式提供程序返回矩形的字符串表示形式。</summary>
      <param name="provider" vsli:raw="Culture-specific formatting information.">区域性特定的格式设置信息。</param>
      <returns vsli:raw="A string representation of the current rectangle that is determined by the specified format provider.">当前矩形的字符串表示形式，由指定的格式提供程序确定。</returns>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Media.Matrix)">
      <summary vsli:raw="Transforms the rectangle by applying the specified matrix.">通过应用指定矩阵来转换矩形。</summary>
      <param name="matrix" vsli:raw="A matrix that specifies the transformation to apply.">指定将应用转换的矩阵。</param>
    </member>
    <member name="M:System.Windows.Rect.Transform(System.Windows.Rect,System.Windows.Media.Matrix)">
      <summary vsli:raw="Returns the rectangle that results from applying the specified matrix to the specified rectangle.">返回矩形，该矩形是通过向指定矩形应用指定矩阵而得到的。</summary>
      <param name="rect" vsli:raw="A rectangle that is the basis for the transformation.">作为转换基础的矩形。</param>
      <param name="matrix" vsli:raw="A matrix that specifies the transformation to apply.">指定将应用转换的矩阵。</param>
      <returns vsli:raw="The rectangle that results from the operation.">此操作生成的矩形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Point)">
      <summary vsli:raw="Expands the current rectangle exactly enough to contain the specified point.">放大当前矩形，使其刚好足以包含指定点。</summary>
      <param name="point" vsli:raw="The point to include.">要包含的点。</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect)">
      <summary vsli:raw="Expands the current rectangle exactly enough to contain the specified rectangle.">放大当前矩形，使其刚好足以包含指定矩形。</summary>
      <param name="rect" vsli:raw="The rectangle to include.">要包含的矩形。</param>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Point)">
      <summary vsli:raw="Creates a rectangle that is exactly large enough to include the specified rectangle and the specified point.">创建一个矩形，该矩形的大小刚好足以包含指定矩形和指定点。</summary>
      <param name="rect" vsli:raw="The rectangle to include.">要包含的矩形。</param>
      <param name="point" vsli:raw="The point to include.">要包含的点。</param>
      <returns vsli:raw="A rectangle that is exactly large enough to contain the specified rectangle and the specified point.">大小刚好足以包含指定矩形和指定点的矩形。</returns>
    </member>
    <member name="M:System.Windows.Rect.Union(System.Windows.Rect,System.Windows.Rect)">
      <summary vsli:raw="Creates a rectangle that is exactly large enough to contain the two specified rectangles.">创建一个矩形，该矩形的大小刚好足以包含两个指定矩形。</summary>
      <param name="rect1" vsli:raw="The first rectangle to include.">要包含的第一个矩形。</param>
      <param name="rect2" vsli:raw="The second rectangle to include.">要包含的第二个矩形。</param>
      <returns vsli:raw="The resulting rectangle.">所得矩形。</returns>
    </member>
    <member name="P:System.Windows.Rect.Bottom">
      <summary vsli:raw="Gets the y-axis value of the bottom of the rectangle.">获取矩形底边的 y 轴值。</summary>
      <returns vsli:raw="The y-axis value of the bottom of the rectangle. If the rectangle is empty, the value is &lt;see cref=&quot;F:System.Double.NegativeInfinity&quot; /&gt; .">矩形底边的 y 轴值。 如果矩形为空，则该值为 <see cref="F:System.Double.NegativeInfinity" />。</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomLeft">
      <summary vsli:raw="Gets the position of the bottom-left corner of the rectangle.">获取矩形的左下角位置。</summary>
      <returns vsli:raw="The position of the bottom-left corner of the rectangle.">矩形的左下角位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.BottomRight">
      <summary vsli:raw="Gets the position of the bottom-right corner of the rectangle.">获取矩形的右下角位置。</summary>
      <returns vsli:raw="The position of the bottom-right corner of the rectangle.">矩形的左下角位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.Empty">
      <summary vsli:raw="Gets a special value that represents a rectangle with no position or area.">获取一个特殊值，该值表示没有位置或区域的矩形。</summary>
      <returns vsli:raw="The empty rectangle, which has &lt;see cref=&quot;P:System.Windows.Rect.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Y&quot; /&gt; property values of &lt;see cref=&quot;F:System.Double.PositiveInfinity&quot; /&gt;, and has &lt;see cref=&quot;P:System.Windows.Rect.Width&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Rect.Height&quot; /&gt; property values of &lt;see cref=&quot;F:System.Double.NegativeInfinity&quot; /&gt;.">空矩形，其 <see cref="P:System.Windows.Rect.X" /> 和 <see cref="P:System.Windows.Rect.Y" /> 属性值为 <see cref="F:System.Double.PositiveInfinity" />，<see cref="P:System.Windows.Rect.Width" /> 和 <see cref="P:System.Windows.Rect.Height" /> 属性值为 <see cref="F:System.Double.NegativeInfinity" />。</returns>
    </member>
    <member name="P:System.Windows.Rect.Height">
      <summary vsli:raw="Gets or sets the height of the rectangle.">获取或设置矩形的高度。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.Height&quot; /&gt; is set to a negative value.">
        <see cref="P:System.Windows.Rect.Height" /> 设置为一个负值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.Height&quot; /&gt; is set on an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">在 <see cref="P:System.Windows.Rect.Height" /> 矩形上设置 <see cref="P:System.Windows.Rect.Empty" />。</exception>
      <returns vsli:raw="A positive number that represents the height of the rectangle. The default is 0.">一个正数，表示矩形的高度。 默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Rect.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether the rectangle is the &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">获取一个值，该值指示矩形是否为 <see cref="P:System.Windows.Rect.Empty" /> 矩形。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the rectangle is the &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果矩形为 <see cref="P:System.Windows.Rect.Empty" /> 矩形，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Rect.Left">
      <summary vsli:raw="Gets the x-axis value of the left side of the rectangle.">获取矩形左边的 x 轴值。</summary>
      <returns vsli:raw="The x-axis value of the left side of the rectangle.">矩形左边的 x 轴值。</returns>
    </member>
    <member name="P:System.Windows.Rect.Location">
      <summary vsli:raw="Gets or sets the position of the top-left corner of the rectangle.">获取或设置矩形的左上角位置。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.Location&quot; /&gt; is set on an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">在 <see cref="P:System.Windows.Rect.Location" /> 矩形上设置 <see cref="P:System.Windows.Rect.Empty" />。</exception>
      <returns vsli:raw="The position of the top-left corner of the rectangle. The default is (0, 0).">矩形的左上角位置。 默认值为 (0, 0)。</returns>
    </member>
    <member name="P:System.Windows.Rect.Right">
      <summary vsli:raw="Gets the x-axis value of the right side of the rectangle.">获取矩形右边的 x 轴值。</summary>
      <returns vsli:raw="The x-axis value of the right side of the rectangle.">矩形右边的 x 轴值。</returns>
    </member>
    <member name="P:System.Windows.Rect.Size">
      <summary vsli:raw="Gets or sets the width and height of the rectangle.">获取或设置矩形的宽度和高度。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.Size&quot; /&gt; is set on an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">在 <see cref="P:System.Windows.Rect.Size" /> 矩形上设置 <see cref="P:System.Windows.Rect.Empty" />。</exception>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure that specifies the width and height of the rectangle.">一个 <see cref="T:System.Windows.Size" /> 结构，指定矩形的宽度和高度。</returns>
    </member>
    <member name="P:System.Windows.Rect.Top">
      <summary vsli:raw="Gets the y-axis position of the top of the rectangle.">获取矩形顶边的 y 轴位置。</summary>
      <returns vsli:raw="The y-axis position of the top of the rectangle.">矩形顶边的 y 轴位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.TopLeft">
      <summary vsli:raw="Gets the position of the top-left corner of the rectangle.">获取矩形的左上角位置。</summary>
      <returns vsli:raw="The position of the top-left corner of the rectangle.">矩形的左上角位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.TopRight">
      <summary vsli:raw="Gets the position of the top-right corner of the rectangle.">获取矩形的右上角位置。</summary>
      <returns vsli:raw="The position of the top-right corner of the rectangle.">矩形的右上角位置。</returns>
    </member>
    <member name="P:System.Windows.Rect.Width">
      <summary vsli:raw="Gets or sets the width of the rectangle.">获取或设置矩形的宽度。</summary>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.Width&quot; /&gt; is set to a negative value.">
        <see cref="P:System.Windows.Rect.Width" /> 设置为一个负值。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.Width&quot; /&gt; is set on an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">在 <see cref="P:System.Windows.Rect.Width" /> 矩形上设置 <see cref="P:System.Windows.Rect.Empty" />。</exception>
      <returns vsli:raw="A positive number that represents the width of the rectangle. The default is 0.">一个正数，表示矩形的宽度。 默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Rect.X">
      <summary vsli:raw="Gets or sets the x-axis value of the left side of the rectangle.">获取或设置矩形左边的 x 轴值。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.X&quot; /&gt; is set on an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">在 <see cref="P:System.Windows.Rect.X" /> 矩形上设置 <see cref="P:System.Windows.Rect.Empty" />。</exception>
      <returns vsli:raw="The x-axis value of the left side of the rectangle.">矩形左边的 x 轴值。</returns>
    </member>
    <member name="P:System.Windows.Rect.Y">
      <summary vsli:raw="Gets or sets the y-axis value of the top side of the rectangle.">获取或设置矩形顶边的 y 轴值。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Rect.Y&quot; /&gt; is set on an &lt;see cref=&quot;P:System.Windows.Rect.Empty&quot; /&gt; rectangle.">在 <see cref="P:System.Windows.Rect.Y" /> 矩形上设置 <see cref="P:System.Windows.Rect.Empty" />。</exception>
      <returns vsli:raw="The y-axis value of the top side of the rectangle.">矩形顶边的 y 轴值。</returns>
    </member>
    <member name="T:System.Windows.RectConverter">
      <summary vsli:raw="Converts instances of other types to and from instances of &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">将其他类型的实例与 <see cref="T:System.Windows.Rect" /> 的实例进行来回转换。</summary>
    </member>
    <member name="M:System.Windows.RectConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.RectConverter&quot; /&gt; class.">初始化 <see cref="T:System.Windows.RectConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an object can be converted from a given type to an instance of &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">确定是否可将一个对象从给定类型转换成 <see cref="T:System.Windows.Rect" /> 的实例。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">提供转换所需的上下文信息。</param>
      <param name="sourceType" vsli:raw="The type of the source that is being evaluated for conversion.">正被计算用于转换的源类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type can be converted to a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果该类型可以转换为 <see cref="T:System.Windows.Rect" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.RectConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; can be converted to the specified type.">确定是否可将 <see cref="T:System.Windows.Rect" /> 转换成指定类型。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">提供转换所需的上下文信息。</param>
      <param name="destinationType" vsli:raw="The desired type this &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; is being evaluated for conversion.">要计算用于转换的此 <see cref="T:System.Windows.Rect" /> 的所需类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; can be converted to &lt;paramref name=&quot;destinationType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可将 <see cref="T:System.Windows.Rect" /> 转换为 <paramref name="destinationType" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert the specified object to a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">尝试将指定对象转换为 <see cref="T:System.Windows.Rect" />。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">提供转换所需的上下文信息。</param>
      <param name="culture" vsli:raw="Cultural information which is respected when converting.">在转换时考虑的区域性信息。</param>
      <param name="value" vsli:raw="The object being converted.">要转换的对象。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The specified object is NULL or is a type that cannot be converted to a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">如果指定的对象为 NULL 或者是无法转换为 <see cref="T:System.Windows.Rect" /> 的类型，则引发该异常。</exception>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; created from converting &lt;paramref name=&quot;value&quot; /&gt;.">通过转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Rect" />。</returns>
    </member>
    <member name="M:System.Windows.RectConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; to the specified type.">尝试将 <see cref="T:System.Windows.Rect" /> 转换为指定类型。</summary>
      <param name="context" vsli:raw="Provides contextual information required for conversion.">提供转换所需的上下文信息。</param>
      <param name="culture" vsli:raw="Cultural information which is respected during conversion.">转换过程中考虑的区域性信息。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; to convert.">要转换的 <see cref="T:System.Windows.Rect" />。</param>
      <param name="destinationType" vsli:raw="The type to convert this &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt; to.">要将此 <see cref="T:System.Windows.Rect" /> 转换为的类型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.  &#xA;  &#xA;-or-&#xA;  &#xA; &lt;paramref name=&quot;value&quot; /&gt; is not a &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.  &#xA;  &#xA;-or-&#xA;  &#xA; The &lt;paramref name=&quot;destinationType&quot; /&gt; is not one of the valid types for conversion.">
        <paramref name="value" /> 为 <see langword="null" />。  
  
- 或 - 
 <paramref name="value" /> 不是 <see cref="T:System.Windows.Rect" />。  
  
- 或 - 
<paramref name="destinationType" /> 不是转换的有效类型之一。</exception>
      <returns vsli:raw="The object created from converting this &lt;see cref=&quot;T:System.Windows.Rect&quot; /&gt;.">通过转换此 <see cref="T:System.Windows.Rect" /> 创建的对象。</returns>
    </member>
    <member name="T:System.Windows.Size">
      <summary vsli:raw="Implements a structure that is used to describe the &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; of an object.">实现一个结构，该结构用于描述对象的 <see cref="T:System.Windows.Size" />。</summary>
    </member>
    <member name="M:System.Windows.Size.#ctor(System.Double,System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; structure and assigns it an initial &lt;paramref name=&quot;width&quot; /&gt; and &lt;paramref name=&quot;height&quot; /&gt;.">初始化 <see cref="T:System.Windows.Size" /> 结构的新实例，并为其分配初始 <paramref name="width" /> 和 <paramref name="height" />。</summary>
      <param name="width" vsli:raw="The initial width of the instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> 的实例的初始宽度。</param>
      <param name="height" vsli:raw="The initial height of the instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> 的实例的初始高度。</param>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Object)">
      <summary vsli:raw="Compares an object to an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; for equality.">比较某个对象与 <see cref="T:System.Windows.Size" /> 的实例是否相等。</summary>
      <param name="o" vsli:raw="The &lt;see cref=&quot;T:System.Object&quot; /&gt; to compare.">要比较的 <see cref="T:System.Object" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the sizes are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果大小相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size)">
      <summary vsli:raw="Compares a value to an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; for equality.">比较某个值与 <see cref="T:System.Windows.Size" /> 的实例是否相等。</summary>
      <param name="value" vsli:raw="The size to compare to this current instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">要与此 <see cref="T:System.Windows.Size" /> 的当前实例进行比较的大小。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Windows.Size" /> 的实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.Equals(System.Windows.Size,System.Windows.Size)">
      <summary vsli:raw="Compares two instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; for equality.">比较 <see cref="T:System.Windows.Size" /> 的两个实例是否相等。</summary>
      <param name="size1" vsli:raw="The first instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to compare.">要比较的 <see cref="T:System.Windows.Size" /> 的第一个实例。</param>
      <param name="size2" vsli:raw="The second instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to compare.">要比较的 <see cref="T:System.Windows.Size" /> 的第二个实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Windows.Size" /> 的实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.GetHashCode">
      <summary vsli:raw="Gets the hash code for this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">获取 <see cref="T:System.Windows.Size" /> 的此实例的哈希代码。</summary>
      <returns vsli:raw="The hash code for this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> 的此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Windows.Size.op_Equality(System.Windows.Size,System.Windows.Size)">
      <summary vsli:raw="Compares two instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; for equality.">比较 <see cref="T:System.Windows.Size" /> 的两个实例是否相等。</summary>
      <param name="size1" vsli:raw="The first instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to compare.">要比较的 <see cref="T:System.Windows.Size" /> 的第一个实例。</param>
      <param name="size2" vsli:raw="The second instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to compare.">要比较的 <see cref="T:System.Windows.Size" /> 的第二个实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the two instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; are equal; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Windows.Size" /> 的两个实例相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Point">
      <summary vsli:raw="Explicitly converts an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to an instance of &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt;.">将 <see cref="T:System.Windows.Size" /> 的实例显式转换为 <see cref="T:System.Windows.Point" /> 的实例。</summary>
      <param name="size" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; value to be converted.">要转换的 <see cref="T:System.Windows.Size" /> 值。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; equal in value to this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">一个 <see cref="T:System.Windows.Point" />，其值与此 <see cref="T:System.Windows.Size" /> 实例的值相等。</returns>
    </member>
    <member name="M:System.Windows.Size.op_Explicit(System.Windows.Size)~System.Windows.Vector">
      <summary vsli:raw="Explicitly converts an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to an instance of &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">将 <see cref="T:System.Windows.Size" /> 的实例显式转换为 <see cref="T:System.Windows.Vector" /> 的实例。</summary>
      <param name="size" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; value to be converted.">要转换的 <see cref="T:System.Windows.Size" /> 值。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; equal in value to this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">一个 <see cref="T:System.Windows.Vector" />，其值与此 <see cref="T:System.Windows.Size" /> 实例的值相等。</returns>
    </member>
    <member name="M:System.Windows.Size.op_Inequality(System.Windows.Size,System.Windows.Size)">
      <summary vsli:raw="Compares two instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; for inequality.">比较 <see cref="T:System.Windows.Size" /> 的两个实例是否不相等。</summary>
      <param name="size1" vsli:raw="The first instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to compare.">要比较的 <see cref="T:System.Windows.Size" /> 的第一个实例。</param>
      <param name="size2" vsli:raw="The second instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to compare.">要比较的 <see cref="T:System.Windows.Size" /> 的第二个实例。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the instances of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; are not equal; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Windows.Size" /> 的实例不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Size.Parse(System.String)">
      <summary vsli:raw="Returns an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; from a converted &lt;see cref=&quot;T:System.String&quot; /&gt;.">从转换后的 <see cref="T:System.Windows.Size" /> 返回 <see cref="T:System.String" /> 的实例。</summary>
      <param name="source" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; value to parse to a &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; value.">一个要分析为 <see cref="T:System.String" /> 值的 <see cref="T:System.Windows.Size" /> 值。</param>
      <returns vsli:raw="An instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> 的一个实例。</returns>
    </member>
    <member name="M:System.Windows.Size.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="This type or member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code.">此类型或成员支持 Windows Presentation Foundation (WPF) 基础结构，但不可直接在代码中使用。</summary>
      <param name="format" vsli:raw="The format to use.">要使用的格式。</param>
      <param name="provider" vsli:raw="The provider to use to format the value.">要用于格式化值的提供程序。</param>
      <returns vsli:raw="The value of the current instance in the specified format.">采用指定格式的当前实例的值。</returns>
    </member>
    <member name="M:System.Windows.Size.ToString">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents this &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; object.">返回一个表示此 <see cref="T:System.String" /> 对象的 <see cref="T:System.Windows.Size" />。</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that specifies the width followed by the height.">用于指定后跟高度的宽度的 <see cref="T:System.String" />。</returns>
    </member>
    <member name="M:System.Windows.Size.ToString(System.IFormatProvider)">
      <summary vsli:raw="Returns a &lt;see cref=&quot;T:System.String&quot; /&gt; that represents this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">返回一个表示此 <see cref="T:System.String" /> 实例的 <see cref="T:System.Windows.Size" />。</summary>
      <param name="provider" vsli:raw="An object that provides a way to control formatting.">一个对象，提供用于控制格式设置的方式。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; that represents this &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; object.">一个 <see cref="T:System.String" />，表示此 <see cref="T:System.Windows.Size" /> 对象。</returns>
    </member>
    <member name="P:System.Windows.Size.Empty">
      <summary vsli:raw="Gets a value that represents a static empty &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">获取一个值，该值表示空的静态 <see cref="T:System.Windows.Size" />。</summary>
      <returns vsli:raw="An empty instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">
        <see cref="T:System.Windows.Size" /> 的空实例。</returns>
    </member>
    <member name="P:System.Windows.Size.Height">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;P:System.Windows.Size.Height&quot; /&gt; of this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">获取或设置此 <see cref="P:System.Windows.Size.Height" /> 实例的 <see cref="T:System.Windows.Size" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Windows.Size.Height&quot; /&gt; of this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;. The default is 0. The value cannot be negative.">此 <see cref="P:System.Windows.Size.Height" /> 实例的 <see cref="T:System.Windows.Size" />。 默认值为 0。 该值不能为负数。</returns>
    </member>
    <member name="P:System.Windows.Size.IsEmpty">
      <summary vsli:raw="Gets a value that indicates whether this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; is &lt;see cref=&quot;P:System.Windows.Size.Empty&quot; /&gt;.">获取一个值，该值指示此 <see cref="T:System.Windows.Size" /> 实例是否为 <see cref="P:System.Windows.Size.Empty" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance of size is &lt;see cref=&quot;P:System.Windows.Size.Empty&quot; /&gt;; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果此 Size 实例为 <see cref="P:System.Windows.Size.Empty" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Size.Width">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;P:System.Windows.Size.Width&quot; /&gt; of this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">获取或设置此 <see cref="P:System.Windows.Size.Width" /> 实例的 <see cref="T:System.Windows.Size" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Windows.Size.Width&quot; /&gt; of this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;. The default value is &lt;c&gt;0&lt;/c&gt;. The value cannot be negative.">此 <see cref="P:System.Windows.Size.Width" /> 实例的 <see cref="T:System.Windows.Size" />。 默认值为 <c>0</c>。 该值不能为负数。</returns>
    </member>
    <member name="T:System.Windows.SizeConverter">
      <summary vsli:raw="Converts instances of other types to and from instances of the &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; class.">在 <see cref="T:System.Windows.Size" /> 类的实例与其他类型的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.SizeConverter&quot; /&gt; class.">初始化 <see cref="T:System.Windows.SizeConverter" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether a class can be converted from a given type to an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">确定是否可将一个类从特定类型转换成 <see cref="T:System.Windows.Size" /> 实例。</summary>
      <param name="context" vsli:raw="Provides contextual information about a component.">提供有关某个组件的上下文信息。</param>
      <param name="sourceType" vsli:raw="Identifies the data type to evaluate for conversion.">标识要计算用于转换的数据类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;sourceType&quot; /&gt; can be converted to an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将 <paramref name="sourceType" /> 转换为 <see cref="T:System.Windows.Size" /> 实例，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; can be converted to a different type.">确定是否可将 <see cref="T:System.Windows.Size" /> 的实例转换成不同类型。</summary>
      <param name="context" vsli:raw="Provides contextual information about a component.">提供有关某个组件的上下文信息。</param>
      <param name="destinationType" vsli:raw="Identifies the data type to evaluate for conversion.">标识要计算用于转换的数据类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; can be converted to the &lt;paramref name=&quot;destinationType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将 <see cref="T:System.Windows.Size" /> 的此实例转换为 <paramref name="destinationType" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Attempts to convert a specified object to an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">试图将指定对象转换为 <see cref="T:System.Windows.Size" /> 实例。</summary>
      <param name="context" vsli:raw="Provides contextual information about a component.">提供有关某个组件的上下文信息。</param>
      <param name="culture" vsli:raw="Culture-specific information that should be respected during conversion.">转换过程中应考虑的区域性特定信息。</param>
      <param name="value" vsli:raw="The source object that is being converted.">正在转换的源对象。</param>
      <returns vsli:raw="The instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; that is created from the converted &lt;paramref name=&quot;source&quot; /&gt;.">从已转换的 <paramref name="source" /> 创建的 <see cref="T:System.Windows.Size" /> 实例。</returns>
    </member>
    <member name="M:System.Windows.SizeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Attempts to convert an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to a specified type.">尝试将 <see cref="T:System.Windows.Size" /> 的实例转换为指定类型。</summary>
      <param name="context" vsli:raw="Provides contextual information about a component.">提供有关某个组件的上下文信息。</param>
      <param name="culture" vsli:raw="Culture-specific information that should be respected during conversion.">转换过程中应考虑的区域性特定信息。</param>
      <param name="value" vsli:raw="The instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; to convert.">要转换的 <see cref="T:System.Windows.Size" /> 实例。</param>
      <param name="destinationType" vsli:raw="The type that this instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; is converted to.">此 <see cref="T:System.Windows.Size" /> 实例被转换成的类型。</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt; or is not an instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;, or if the &lt;paramref name=&quot;destinationType&quot; /&gt; is not one of the valid destination types.">
        <paramref name="value" /> 是 <see langword="null" /> 或者不是 <see cref="T:System.Windows.Size" /> 的实例；或者 <paramref name="destinationType" /> 不是有效目标类型之一。</exception>
      <returns vsli:raw="The object that is created from the converted instance of &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt;.">从 <see cref="T:System.Windows.Size" /> 的已转换实例创建的对象。</returns>
    </member>
    <member name="T:System.Windows.SplashScreen">
      <summary vsli:raw="Provides a startup screen for a Windows Presentation Foundation (WPF) application.">为 Windows Presentation Foundation (WPF) 应用程序提供启动屏幕。</summary>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.Reflection.Assembly,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.SplashScreen&quot; /&gt; class with the specified resource assembly.">使用指定的资源程序集初始化 <see cref="T:System.Windows.SplashScreen" /> 类的新实例。</summary>
      <param name="resourceAssembly" vsli:raw="The assembly that contains the embedded resource.">包含嵌入资源的程序集。</param>
      <param name="resourceName" vsli:raw="The name of the embedded resource.">嵌入资源的名称。</param>
    </member>
    <member name="M:System.Windows.SplashScreen.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.SplashScreen&quot; /&gt; class with the specified resource.">使用指定的资源初始化 <see cref="T:System.Windows.SplashScreen" /> 类的新实例。</summary>
      <param name="resourceName" vsli:raw="The name of the embedded resource.">嵌入资源的名称。</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Close(System.TimeSpan)">
      <summary vsli:raw="Closes the splash screen.">关闭初始屏幕。</summary>
      <param name="fadeoutDuration" vsli:raw="A &lt;see cref=&quot;T:System.TimeSpan&quot; /&gt; that specifies how long it will take for the splash screen to fade after the close operation has been initiated.">一个 <see cref="T:System.TimeSpan" />，它指定初始屏幕在关闭操作启动后将需要多长时间淡化。</param>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean)">
      <summary vsli:raw="Displays the splash screen.">显示初始屏幕。</summary>
      <param name="autoClose" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to automatically close the splash screen; &lt;see langword=&quot;false&quot; /&gt; to close the splash screen manually.">设置为 <see langword="true" /> 以自动关闭初始屏幕；设置为 <see langword="false" /> 以手动关闭初始屏幕。</param>
      <exception cref="T:System.IO.IOException" vsli:raw="The resource specified in the constructor could not be found.">未能找到构造函数中指定的资源。</exception>
    </member>
    <member name="M:System.Windows.SplashScreen.Show(System.Boolean,System.Boolean)">
      <summary vsli:raw="Displays the splash screen.">显示初始屏幕。</summary>
      <param name="autoClose" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to automatically close the splash screen; &lt;see langword=&quot;false&quot; /&gt; to close the splash screen manually.">设置为 <see langword="true" /> 以自动关闭初始屏幕；设置为 <see langword="false" /> 以手动关闭初始屏幕。</param>
      <param name="topMost" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the splash screen window should use the WS_EX_TOPMOST style; otherwise &lt;see langword=&quot;false&quot; /&gt;.">如果初始屏幕窗口应该使用 WS_EX_TOPMOST 样式，则为 <see langword="true" />；否则为 <see langword="false" />。</param>
    </member>
    <member name="T:System.Windows.Threading.Dispatcher">
      <summary vsli:raw="Provides services for managing the queue of work items for a thread.">提供用于管理线程工作项队列的服务。</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownFinished">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; finishes shutting down.">当 <see cref="T:System.Windows.Threading.Dispatcher" /> 完成关闭时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.ShutdownStarted">
      <summary vsli:raw="Occurs when the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; begins to shut down.">当 <see cref="T:System.Windows.Threading.Dispatcher" /> 开始关闭时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledException">
      <summary vsli:raw="Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.Invoke&quot; /&gt; or &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.BeginInvoke&quot; /&gt;.">在通过 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 执行委托的过程中，如果引发线程异常且未能捕获该异常，则发生此事件。</summary>
    </member>
    <member name="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter">
      <summary vsli:raw="Occurs when a thread exception is thrown and uncaught during execution of a delegate by way of &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.Invoke&quot; /&gt; or &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.BeginInvoke&quot; /&gt; when in the filter stage.">当在筛选阶段通过 <see cref="Overload:System.Windows.Threading.Dispatcher.Invoke" /> 或 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 执行委托的过程中，如果引发线程异常且未能捕获该异常，则发生此事件。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Object[])">
      <summary vsli:raw="Executes the specified delegate asynchronously with the specified arguments on the thread that the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; was created on.">用在其上创建了 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程的指定参数异步执行指定委托。</summary>
      <param name="method" vsli:raw="The delegate to a method that takes parameters specified in &lt;paramref name=&quot;args&quot; /&gt;, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the given method. Can be &lt;see langword=&quot;null&quot; /&gt;.">作为给定方法的自变量传递的对象数组。 可以为 <see langword="null" />。</param>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.BeginInvoke&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary vsli:raw="Executes the specified delegate asynchronously with the specified arguments, at the specified priority, on the thread that the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; was created on.">用在其上创建了 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程上的指定参数，按指定优先级异步执行指定委托。</summary>
      <param name="method" vsli:raw="The delegate to a method that takes parameters specified in &lt;paramref name=&quot;args&quot; /&gt;, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the given method. Can be &lt;see langword=&quot;null&quot; /&gt;.">作为给定方法的自变量传递的对象数组。 可以为 <see langword="null" />。</param>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.BeginInvoke&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary vsli:raw="Executes the specified delegate asynchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">按指定的优先级在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</param>
      <param name="method" vsli:raw="The delegate to a method that takes no arguments, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Windows.Threading.DispatcherPriority&quot; /&gt;.">
        <paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.BeginInvoke&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary vsli:raw="Executes the specified delegate asynchronously at the specified priority and with the specified argument on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</param>
      <param name="method" vsli:raw="A delegate to a method that takes one argument, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对采用一个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="arg" vsli:raw="The object to pass as an argument to the specified method.">作为参数传递到指定方法中的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Windows.Threading.DispatcherPriority&quot; /&gt;.">
        <paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.BeginInvoke&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary vsli:raw="Executes the specified delegate asynchronously at the specified priority and with the specified array of arguments on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">按指定的优先级并使用指定的参数数组在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上异步执行指定的委托。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</param>
      <param name="method" vsli:raw="A delegate to a method that takes multiple arguments, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="arg" vsli:raw="The object to pass as an argument to the specified method.">作为参数传递到指定方法中的对象。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the specified method.">作为指定方法的参数传递的对象数组。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;see cref=&quot;T:System.Windows.Threading.DispatcherPriority&quot; /&gt; is not a valid priority.">
        <see cref="T:System.Windows.Threading.DispatcherPriority" /> 不是有效的优先级。</exception>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;Overload:System.Windows.Threading.Dispatcher.BeginInvoke&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; queue.">调用 <see cref="Overload:System.Windows.Threading.Dispatcher.BeginInvoke" /> 之后立即返回的对象，可用来与 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列中挂起执行的委托进行交互。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.BeginInvokeShutdown(System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Initiates shutdown of the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; asynchronously.">异步启动 <see cref="T:System.Windows.Threading.Dispatcher" /> 的关闭。</summary>
      <param name="priority" vsli:raw="The priority at which to begin shutting down the dispatcher.">将按其开始关闭调度程序的优先级。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.CheckAccess">
      <summary vsli:raw="Determines whether the calling thread is the thread associated with this &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">确定调用线程是否为与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the calling thread is the thread associated with this &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果调用线程是与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.DisableProcessing">
      <summary vsli:raw="Disables processing of the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; queue.">禁用对 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列的处理。</summary>
      <returns vsli:raw="A structure used to re-enable dispatcher processing.">一个用于重新启用调度程序处理的结构。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ExitAllFrames">
      <summary vsli:raw="Requests that all frames exit, including nested frames.">请求退出所有帧，包括嵌套的帧。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.FromThread(System.Threading.Thread)">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; for the specified thread.">获取指定线程的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="thread" vsli:raw="The thread to obtain the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; from.">要从中获取 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程。</param>
      <returns vsli:raw="The dispatcher for &lt;paramref name=&quot;thread&quot; /&gt;.">
        <paramref name="thread" /> 的调度程序。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Action&quot; /&gt; synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">在与 <see cref="T:System.Action" /> 关联的线程上同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">要通过调度程序调用的委托。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Action&quot; /&gt; synchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">要通过调度程序调用的委托。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Action&quot; /&gt; synchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">要通过调度程序调用的委托。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <param name="cancellationToken" vsli:raw="An object that indicates whether to cancel the action.">指示是否取消操作的对象。</param>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Action&quot; /&gt; synchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="callback" vsli:raw="An Action delegate to invoke through the dispatcher.">要通过调度程序调用的操作委托。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <param name="cancellationToken" vsli:raw="An object that indicates whether to cancel the action.">指示是否取消操作的对象。</param>
      <param name="timeout" vsli:raw="The maximum amount of time to wait for the operation to start. Once the operation has started, it will complete before this method returns. To specify an infinite wait, use a value of -1. In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait. In a cross-thread call, any other negative value throws an &lt;see cref=&quot;T:System.ArgumentOutOfRangeException&quot; /&gt;.">等待操作启动的最长时间。 操作开始后，它将在此方法返回前完成。 若要指定无限期等待，请使用值-1。 在同一线程调用中，任何其他负值都转换为-1，导致无限期等待。 在跨线程调用中，任何其他负值都将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callback" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1, and this method was invoked across threads.">
        <paramref name="timeout" /> 是一个非-1 的负数，此方法是在线程间调用的。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> 不是有效的优先级。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Object[])">
      <summary vsli:raw="Executes the specified delegate with the specified arguments synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数同步执行指定委托。</summary>
      <param name="method" vsli:raw="A delegate to a method that takes parameters specified in &lt;paramref name=&quot;args&quot; /&gt;, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the given method. Can be &lt;see langword=&quot;null&quot; /&gt;.">作为给定方法的自变量传递的对象数组。 可以为 <see langword="null" />。</param>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Object[])">
      <summary vsli:raw="Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数，按指定优先级同步执行指定时间范围内的指定委托。</summary>
      <param name="method" vsli:raw="A delegate to a method that takes parameters specified in &lt;paramref name=&quot;args&quot; /&gt;, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="timeout" vsli:raw="The maximum amount of time to wait for the operation to start. However, once the operation starts, it will complete before this method returns. To specify an infinite wait, use a value of -1. In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait. In a cross-thread call, any other negative value throws an &lt;see cref=&quot;T:System.ArgumentOutOfRangeException&quot; /&gt;.">等待操作启动的最长时间。 但在操作启动后，它将在此方法返回前完成。 若要指定无限期等待，请使用值-1。 在同一线程调用中，任何其他负值都转换为-1，导致无限期等待。 在跨线程调用中，任何其他负值都将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the given method. Can be &lt;see langword=&quot;null&quot; /&gt; if no arguments are needed.">作为给定方法的自变量传递的对象数组。 <see langword="null" />如果不需要参数，则可以为。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1, and you're invoking across threads.">
        <paramref name="timeout" /> 是一个非-1 的负数，并且您要跨线程调用。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary vsli:raw="Executes the specified delegate within the designated time span at the specified priority with the specified arguments synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">用与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上的指定参数，按指定优先级同步执行指定时间范围内的指定委托。</summary>
      <param name="method" vsli:raw="A delegate to a method that takes parameters specified in &lt;paramref name=&quot;args&quot; /&gt;, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="timeout" vsli:raw="The maximum amount of time to wait for the operation to start. Once the operation has started, it will complete before this method returns. To specify an infinite wait, use a value of -1. In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait. In a cross-thread call, any other negative value throws an &lt;see cref=&quot;T:System.ArgumentOutOfRangeException&quot; /&gt;.">等待操作启动的最长时间。 操作开始后，它将在此方法返回前完成。 若要指定无限期等待，请使用值-1。 在同一线程调用中，任何其他负值都转换为-1，导致无限期等待。 在跨线程调用中，任何其他负值都将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。</param>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the given method. Can be &lt;see langword=&quot;null&quot; /&gt;.">作为给定方法的自变量传递的对象数组。 可以为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1, and this method was invoked across threads.">
        <paramref name="timeout" /> 是一个非-1 的负数，此方法是在线程间调用的。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherPriority.Inactive&quot; /&gt;.">
        <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> 不是有效的优先级。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Delegate,System.Windows.Threading.DispatcherPriority,System.Object[])">
      <summary vsli:raw="Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
      <param name="method" vsli:raw="A delegate to a method that takes parameters specified in &lt;paramref name=&quot;args&quot; /&gt;, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对采用 <paramref name="args" /> 中指定参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="priority" vsli:raw="The priority with which the specified method is invoked, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">与指定的方法相对应的优先级，与事件队列中的其他挂起操作相关 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the given method. Can be &lt;see langword=&quot;null&quot; /&gt;.">作为给定方法的自变量传递的对象数组。 可以为 <see langword="null" />。</param>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate)">
      <summary vsli:raw="Executes the specified delegate synchronously at the specified priority on the thread that the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">按指定的优先级在与关联的线程上同步执行指定的委托 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</summary>
      <param name="priority" vsli:raw="The priority with which the specified method is invoked, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">与指定的方法相对应的优先级，与事件队列中的其他挂起操作相关 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <param name="method" vsli:raw="A delegate to a method that takes no arguments, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherPriority.Inactive&quot; /&gt;.">
        <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> 不是有效的优先级。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object)">
      <summary vsli:raw="Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</param>
      <param name="method" vsli:raw="A delegate to a method that takes one argument, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对采用一个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="arg" vsli:raw="An object to pass as an argument to the given method.">作为参数传递到给定方法中的对象。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherPriority.Inactive&quot; /&gt;.">
        <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> 不是有效的优先级。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.Delegate,System.Object,System.Object[])">
      <summary vsli:raw="Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</param>
      <param name="method" vsli:raw="A delegate to a method that takes multiple arguments, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="arg" vsli:raw="An object to pass as an argument to the given method.">作为参数传递到给定方法中的对象。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the given method.">作为给定方法的自变量传递的对象数组。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherPriority.Inactive&quot; /&gt;.">
        <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> 不是有效的优先级。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate)">
      <summary vsli:raw="Executes the specified delegate synchronously at the specified priority and with the specified time-out value on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; was created.">按指定的优先级并使用指定的超时值在创建 <see cref="T:System.Windows.Threading.Dispatcher" /> 的线程上同步执行指定的委托。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</param>
      <param name="timeout" vsli:raw="The maximum amount of time to wait for the operation to start. Once the operation has started, it will complete before this method returns. To specify an infinite wait, use a value of -1. In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait. In a cross-thread call, any other negative value throws an &lt;see cref=&quot;T:System.ArgumentOutOfRangeException&quot; /&gt;.">等待操作启动的最长时间。 操作开始后，它将在此方法返回前完成。 若要指定无限期等待，请使用值-1。 在同一线程调用中，任何其他负值都转换为-1，导致无限期等待。 在跨线程调用中，任何其他负值都将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。</param>
      <param name="method" vsli:raw="The delegate to a method that takes no arguments, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对不采用任何参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1, and this method was invoked across threads.">
        <paramref name="timeout" /> 是一个非-1 的负数，此方法是在线程间调用的。</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherPriority.Inactive&quot; /&gt;.">
        <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> 不是有效的优先级。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object)">
      <summary vsli:raw="Executes the specified delegate at the specified priority with the specified argument synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</param>
      <param name="timeout" vsli:raw="The maximum amount of time to wait for the operation to start. Once the operation has started, it will complete before this method returns. To specify an infinite wait, use a value of -1. In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait. In a cross-thread call, any other negative value throws an &lt;see cref=&quot;T:System.ArgumentOutOfRangeException&quot; /&gt;.">等待操作启动的最长时间。 操作开始后，它将在此方法返回前完成。 若要指定无限期等待，请使用值-1。 在同一线程调用中，任何其他负值都转换为-1，导致无限期等待。 在跨线程调用中，任何其他负值都将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。</param>
      <param name="method" vsli:raw="A delegate to a method that takes multiple arguments, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="arg" vsli:raw="An object to pass as an argument to the given method. This can be &lt;see langword=&quot;null&quot; /&gt; if no arguments are needed.">作为参数传递到给定方法中的对象。 如果不需要参数，则可以为 <see langword="null" />。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherPriority.Inactive&quot; /&gt;.">
        <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> 不是有效的优先级。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> 为 <see langword="null" />。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke(System.Windows.Threading.DispatcherPriority,System.TimeSpan,System.Delegate,System.Object,System.Object[])">
      <summary vsli:raw="Executes the specified delegate at the specified priority with the specified arguments synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">按指定的优先级并使用指定的参数在与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程上同步执行指定的委托。</summary>
      <param name="priority" vsli:raw="The priority, relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue, with which the specified method is invoked.">相对于事件队列中的其他挂起操作的优先级， <see cref="T:System.Windows.Threading.Dispatcher" /> 指定方法将被调用。</param>
      <param name="timeout" vsli:raw="The maximum amount of time to wait for the operation to start. Once the operation has started, it will complete before this method returns. To specify an infinite wait, use a value of -1. In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait. In a cross-thread call, any other negative value throws an &lt;see cref=&quot;T:System.ArgumentOutOfRangeException&quot; /&gt;.">等待操作启动的最长时间。 操作开始后，它将在此方法返回前完成。 若要指定无限期等待，请使用值-1。 在同一线程调用中，任何其他负值都转换为-1，导致无限期等待。 在跨线程调用中，任何其他负值都将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。</param>
      <param name="method" vsli:raw="A delegate to a method that takes multiple arguments, which is pushed onto the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; event queue.">对采用多个参数的方法的委托，该委托将被推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 事件队列中。</param>
      <param name="arg" vsli:raw="An object to pass as an argument to the specified method.">作为参数传递到指定方法中的对象。</param>
      <param name="args" vsli:raw="An array of objects to pass as arguments to the specified method.">作为指定方法的参数传递的对象数组。</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherPriority.Inactive&quot; /&gt;.">
        <paramref name="priority" /> 等于 <see cref="F:System.Windows.Threading.DispatcherPriority.Inactive" />。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Windows.Threading.DispatcherPriority&quot; /&gt;.">
        <paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;method&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="method" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1, and this method was invoked across threads.">
        <paramref name="timeout" /> 是一个非-1 的负数，此方法是在线程间调用的。</exception>
      <returns vsli:raw="The return value from the delegate being invoked or &lt;see langword=&quot;null&quot; /&gt; if the delegate has no return value.">正在被调用的委托的返回值，如果该委托没有返回值，则为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0})">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Func`1&quot; /&gt; synchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">在与 <see cref="T:System.Func`1" /> 关联的线程上同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">要通过调度程序调用的委托。</param>
      <typeparam name="TResult" vsli:raw="The return value type of the specified delegate.">指定委托的返回值类型。</typeparam>
      <returns vsli:raw="The value returned by &lt;paramref name=&quot;callback&quot; /&gt;.">返回的值 <paramref name="callback" /> 。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Func`1&quot; /&gt; synchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">要通过调度程序调用的委托。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <typeparam name="TResult" vsli:raw="The return value type of the specified delegate.">指定委托的返回值类型。</typeparam>
      <returns vsli:raw="The value returned by &lt;paramref name=&quot;callback&quot; /&gt;.">返回的值 <paramref name="callback" /> 。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Func`1&quot; /&gt; synchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">要通过调度程序调用的委托。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <param name="cancellationToken" vsli:raw="An object that indicates whether to cancel the operation.">指示是否取消操作的对象。</param>
      <typeparam name="TResult" vsli:raw="The return value type of the specified delegate.">指定委托的返回值类型。</typeparam>
      <returns vsli:raw="The value returned by &lt;paramref name=&quot;callback&quot; /&gt;.">返回的值 <paramref name="callback" /> 。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Invoke``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken,System.TimeSpan)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Func`1&quot; /&gt; synchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，同步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">要通过调度程序调用的委托。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <param name="cancellationToken" vsli:raw="An object that indicates whether to cancel the operation.">指示是否取消操作的对象。</param>
      <param name="timeout" vsli:raw="The maximum amount of time to wait for the operation to start. Once the operation has started, it will complete before this method returns. To specify an infinite wait, use a value of -1. In a same-thread call, any other negative value is converted to -1, resulting in an infinite wait. In a cross-thread call, any other negative value throws an &lt;see cref=&quot;T:System.ArgumentOutOfRangeException&quot; /&gt;.">等待操作启动的最长时间。 操作开始后，它将在此方法返回前完成。 若要指定无限期等待，请使用值-1。 在同一线程调用中，任何其他负值都转换为-1，导致无限期等待。 在跨线程调用中，任何其他负值都将引发 <see cref="T:System.ArgumentOutOfRangeException" /> 。</param>
      <typeparam name="TResult" vsli:raw="The return value type of the specified delegate.">指定委托的返回值类型。</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callback" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;timeout&quot; /&gt; is a negative number other than -1, and the method was invoked across threads.">
        <paramref name="timeout" /> 是一个非-1 的负数，并且该方法是跨线程调用的。</exception>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid priority.">
        <paramref name="priority" /> 不是有效的优先级。</exception>
      <returns vsli:raw="The value returned by &lt;paramref name=&quot;callback&quot; /&gt;.">返回的值 <paramref name="callback" /> 。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Action&quot; /&gt; asynchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">在与 <see cref="T:System.Action" /> 关联的线程上异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">要通过调度程序调用的委托。</param>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Action&quot; /&gt; asynchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">要通过调度程序调用的委托。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Action&quot; /&gt; asynchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">在与 <see cref="T:System.Action" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">要通过调度程序调用的委托。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <param name="cancellationToken" vsli:raw="An object that indicates whether to cancel the action.">指示是否取消操作的对象。</param>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync(System.Action,System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Func`1&quot; /&gt; asynchronously on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">在与 <see cref="T:System.Func`1" /> 关联的线程上异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">要通过调度程序调用的委托。</param>
      <typeparam name="TResult" vsli:raw="The return value type of the specified delegate.">指定委托的返回值类型。</typeparam>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0})" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Func`1&quot; /&gt; asynchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">要通过调度程序调用的委托。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <typeparam name="TResult" vsli:raw="The return value type of the specified delegate.">指定委托的返回值类型。</typeparam>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)">
      <summary vsli:raw="Executes the specified &lt;see cref=&quot;T:System.Func`1&quot; /&gt; asynchronously at the specified priority on the thread the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">在与 <see cref="T:System.Func`1" /> 关联的线程上，以指定的优先级，异步执行指定的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="callback" vsli:raw="A delegate to invoke through the dispatcher.">要通过调度程序调用的委托。</param>
      <param name="priority" vsli:raw="The priority that determines the order in which the specified callback is invoked relative to the other pending operations in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">确定指定的回调相对于中的其他挂起操作的调用顺序的优先级 <see cref="T:System.Windows.Threading.Dispatcher" /> 。</param>
      <param name="cancellationToken" vsli:raw="An object that indicates whether to cancel the operation.">指示是否取消操作的对象。</param>
      <typeparam name="TResult" vsli:raw="The return value type of the specified delegate.">指定委托的返回值类型。</typeparam>
      <returns vsli:raw="An object, which is returned immediately after &lt;see cref=&quot;M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)&quot; /&gt; is called, that can be used to interact with the delegate as it is pending execution in the event queue.">调用 <see cref="M:System.Windows.Threading.Dispatcher.InvokeAsync``1(System.Func{``0},System.Windows.Threading.DispatcherPriority,System.Threading.CancellationToken)" /> 之后立即返回的对象，可用来与事件队列中挂起执行的委托进行交互。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.InvokeShutdown">
      <summary vsli:raw="Initiates the shutdown process of the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; synchronously.">同步启动 <see cref="T:System.Windows.Threading.Dispatcher" /> 的关闭过程。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.PushFrame(System.Windows.Threading.DispatcherFrame)">
      <summary vsli:raw="Enters an execute loop.">进入执行循环。</summary>
      <param name="frame" vsli:raw="The frame for the dispatcher to process.">调度程序要处理的帧。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;frame&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="frame" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Threading.Dispatcher.HasShutdownFinished&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt;  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;frame&quot; /&gt; is running on a different &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; Dispatcher processing has been disabled.">
        <see cref="P:System.Windows.Threading.Dispatcher.HasShutdownFinished" /> 为 <see langword="true" />  
  
- 或 - 
 <paramref name="frame" /> 在不同的 <see cref="T:System.Windows.Threading.Dispatcher" /> 中运行。  
  
- 或 - 
已禁用对调度程序的处理。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Run">
      <summary vsli:raw="Pushes the main execution frame on the event queue of the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">将主执行帧推送到 <see cref="T:System.Windows.Threading.Dispatcher" /> 的事件队列中。</summary>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.ValidatePriority(System.Windows.Threading.DispatcherPriority,System.String)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Threading.DispatcherPriority&quot; /&gt; is a valid priority.">确定指定的 <see cref="T:System.Windows.Threading.DispatcherPriority" /> 是否为有效的优先级。</summary>
      <param name="priority" vsli:raw="The priority to check.">要检查的优先级。</param>
      <param name="parameterName" vsli:raw="A string that will be returned by the exception that occurs if the priority is invalid.">将由优先级无效时发生的异常返回的字符串。</param>
      <exception cref="T:System.ComponentModel.InvalidEnumArgumentException" vsli:raw="&lt;paramref name=&quot;priority&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.Windows.Threading.DispatcherPriority&quot; /&gt;.">
        <paramref name="priority" /> 不是有效的 <see cref="T:System.Windows.Threading.DispatcherPriority" />。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.VerifyAccess">
      <summary vsli:raw="Determines whether the calling thread has access to this &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">确定调用线程是否可以访问此 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The calling thread does not have access to this &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">调用线程不能访问此 <see cref="T:System.Windows.Threading.Dispatcher" />。</exception>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield">
      <summary vsli:raw="Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.">创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</summary>
      <returns vsli:raw="An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.">异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</returns>
    </member>
    <member name="M:System.Windows.Threading.Dispatcher.Yield(System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Creates an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.  The work that occurs when control returns to the code awaiting the result of this method is scheduled with the specified priority.">创建异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。  当控件返回等待此方法的结果的代码按指定的优先级计划时，发生的操作。</summary>
      <param name="priority" vsli:raw="The priority at which to schedule the continuation.">安排延续的优先级别。</param>
      <returns vsli:raw="An awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.">异步产生控制权交还给当前计划程序并为该计划程序提供机会处理其他事件的可等待对象。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.CurrentDispatcher">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; for the thread currently executing and creates a new &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; if one is not already associated with the thread.">获取当前正在执行的线程的 <see cref="T:System.Windows.Threading.Dispatcher" />，并在该线程没有关联的调度程序时创建一个新的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <returns vsli:raw="The dispatcher associated with the current thread.">与当前线程关联的调度程序。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownFinished">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; has finished shutting down.">确定 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否已经完成关闭。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the dispatcher has finished shutting down; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果调度程序已经完成关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.HasShutdownStarted">
      <summary vsli:raw="Determines whether the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is shutting down.">确定 <see cref="T:System.Windows.Threading.Dispatcher" /> 是否正在关闭。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; has started shutting down; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Windows.Threading.Dispatcher" /> 已经开始关闭，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Hooks">
      <summary vsli:raw="Gets the collection of hooks that provide additional event information about the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">获取提供有关 <see cref="T:System.Windows.Threading.Dispatcher" /> 的其他事件信息的挂钩集合。</summary>
      <returns vsli:raw="The hooks associated with this &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的挂钩。</returns>
    </member>
    <member name="P:System.Windows.Threading.Dispatcher.Thread">
      <summary vsli:raw="Gets the thread this &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; is associated with.">获取与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的线程。</summary>
      <returns vsli:raw="The thread.">线程。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherEventArgs">
      <summary vsli:raw="Provides event data for &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; related events.">为与 <see cref="T:System.Windows.Threading.Dispatcher" /> 相关的事件提供事件数据。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherEventArgs.Dispatcher">
      <summary vsli:raw="The &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; associated with this event.">与此事件关联的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <returns vsli:raw="The dispatcher.">调度程序。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherFrame">
      <summary vsli:raw="Represents an execution loop in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">表示 <see cref="T:System.Windows.Threading.Dispatcher" /> 中的执行循环。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherFrame&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Threading.DispatcherFrame" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherFrame.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherFrame&quot; /&gt; class, by using the specified exit request flag.">使用指定的退出请求标志初始化 <see cref="T:System.Windows.Threading.DispatcherFrame" /> 类的新实例。</summary>
      <param name="exitWhenRequested" vsli:raw="Indicates whether this frame will exit when all frames are requested to exit.">指示在要求退出所有帧时是否将退出此帧。</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherFrame.Continue">
      <summary vsli:raw="Gets or sets a value that indicates whether this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherFrame&quot; /&gt; should continue.">获取或设置一个值，该值指示此 <see cref="T:System.Windows.Threading.DispatcherFrame" /> 是否应该继续。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the frame should continue; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  The default value is &lt;see langword=&quot;true&quot; /&gt;.">如果此帧应该继续，则为 <see langword="true" />；否则为 <see langword="false" />。  默认值是 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventArgs">
      <summary vsli:raw="Provides event data for &lt;see cref=&quot;T:System.Windows.Threading.DispatcherHooks&quot; /&gt; events.">为 <see cref="T:System.Windows.Threading.DispatcherHooks" /> 事件提供事件数据。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherHookEventArgs.#ctor(System.Windows.Threading.DispatcherOperation)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherHookEventArgs&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Threading.DispatcherHookEventArgs" /> 类的新实例。</summary>
      <param name="operation" vsli:raw="The operation associated with the event.">与事件关联的操作。</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Dispatcher">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; associated with this event.">获取与此事件关联的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; associated with this event.">与此事件关联的 <see cref="T:System.Windows.Threading.Dispatcher" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherHookEventArgs.Operation">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherOperation&quot; /&gt; associated with this event.">获取与此事件关联的 <see cref="T:System.Windows.Threading.DispatcherOperation" />。</summary>
      <returns vsli:raw="The operation.">操作。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHookEventHandler">
      <summary vsli:raw="Represents the method that will handle &lt;see cref=&quot;T:System.Windows.Threading.DispatcherHooks&quot; /&gt; related events.">表示将处理与 <see cref="T:System.Windows.Threading.DispatcherHooks" /> 相关的事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="The event data.">事件数据。</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherHooks">
      <summary vsli:raw="Provides additional event information about &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; processing.">提供有关 <see cref="T:System.Windows.Threading.Dispatcher" /> 处理的附加事件信息。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.DispatcherInactive">
      <summary vsli:raw="Occurs when the dispatcher has no more operations to process.">在调度程序没有要处理的其他操作时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationAborted">
      <summary vsli:raw="Occurs when an operation is aborted.">中止操作时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationCompleted">
      <summary vsli:raw="Occurs when an operation completes.">完成操作时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPosted">
      <summary vsli:raw="Occurs when an operation is posted to the dispatcher.">将操作发布到调度程序时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationPriorityChanged">
      <summary vsli:raw="Occurs when the priority of an operation is changed.">在更改操作的优先级时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherHooks.OperationStarted">
      <summary vsli:raw="Occurs when an operation is invoked.">调用操作时发生。</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherObject">
      <summary vsli:raw="Represents an object that is associated with a &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">表示与 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的对象。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherObject&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Threading.DispatcherObject" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.CheckAccess">
      <summary vsli:raw="Determines whether the calling thread has access to this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherObject&quot; /&gt;.">确定调用线程是否可以访问此 <see cref="T:System.Windows.Threading.DispatcherObject" />。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the calling thread has access to this object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果调用线程可以访问此对象，则为 <see langword="true" />；否则，为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherObject.VerifyAccess">
      <summary vsli:raw="Enforces that the calling thread has access to this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherObject&quot; /&gt;.">强制调用线程具有此 <see cref="T:System.Windows.Threading.DispatcherObject" /> 的访问权限。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="the calling thread does not have access to this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherObject&quot; /&gt;.">调用线程不可以访问此 <see cref="T:System.Windows.Threading.DispatcherObject" />。</exception>
    </member>
    <member name="P:System.Windows.Threading.DispatcherObject.Dispatcher">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherObject&quot; /&gt; is associated with.">获取与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的 <see cref="T:System.Windows.Threading.DispatcherObject" />。</summary>
      <returns vsli:raw="The dispatcher.">调度程序。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation">
      <summary vsli:raw="Represents an object that is used to interact with an operation that has been posted to the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; queue.">表示一个用于与已发布到 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列的操作进行交互的对象。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Aborted">
      <summary vsli:raw="Occurs when the operation is aborted.">中止操作时发生。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherOperation.Completed">
      <summary vsli:raw="Occurs when the operation has completed.">操作完成时发生。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Abort">
      <summary vsli:raw="Aborts the operation.">中止该操作。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the operation was aborted; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果中止了操作，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.GetAwaiter">
      <summary vsli:raw="Returns an object that is notified when the asynchronous operation is finished.">返回完成异步操作时通知的对象。</summary>
      <returns vsli:raw="An object that is notified when the asynchronous operation is finished.">完成异步操作时通知的对象。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.InvokeDelegateCore">
      <summary vsli:raw="Begins the operation that is associated with this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherOperation&quot; /&gt;.">开始与 <see cref="T:System.Windows.Threading.DispatcherOperation" /> 关联的操作。</summary>
      <returns vsli:raw="&lt;see langword=&quot;null&quot; /&gt; in all cases.">在所有情况下均为 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait">
      <summary vsli:raw="Waits for the operation to complete.">等待操作完成。</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Threading.DispatcherOperation.Status&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherOperationStatus.Executing&quot; /&gt;.  This can occur when waiting for an operation that is already executing on the same thread.">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> 等于 <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />。  等待已在同一线程上执行的操作时可能会发生此异常。</exception>
      <returns vsli:raw="The status of the operation.">操作的状态。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation.Wait(System.TimeSpan)">
      <summary vsli:raw="Waits for the operation to complete in the specified period of time.">等待操作在指定的时期内完成。</summary>
      <param name="timeout" vsli:raw="The maximum period of time to wait.">要等待的最大时期。</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;see cref=&quot;P:System.Windows.Threading.DispatcherOperation.Status&quot; /&gt; is equal to &lt;see cref=&quot;F:System.Windows.Threading.DispatcherOperationStatus.Executing&quot; /&gt;.  This can occur when waiting for an operation that is already executing on the same thread.">
        <see cref="P:System.Windows.Threading.DispatcherOperation.Status" /> 等于 <see cref="F:System.Windows.Threading.DispatcherOperationStatus.Executing" />。  等待已在同一线程上执行的操作时可能会发生此异常。</exception>
      <returns vsli:raw="The status of the operation.">操作的状态。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Dispatcher">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; that the operation was posted to.">获取操作所发布到的 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <returns vsli:raw="The dispatcher.">调度程序。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Priority">
      <summary vsli:raw="Gets or sets the priority of the operation in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; queue.">获取或设置 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列中的操作的优先级。</summary>
      <returns vsli:raw="The priority of the delegate on the queue.">队列中委托的优先级。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Result">
      <summary vsli:raw="Gets the result of the operation after it has completed.">获取操作完成后的结果。</summary>
      <returns vsli:raw="The result of the operation -or- &lt;see langword=&quot;null&quot; /&gt; if the operation has not completed.">操作的结果或 <see langword="null" />（如果操作未完成）。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Status">
      <summary vsli:raw="Gets the current status of the operation.">获取操作的当前状态。</summary>
      <returns vsli:raw="The status of the operation.">操作的状态。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation.Task">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the current operation.">获取一个表示当前操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns vsli:raw="An object that represents the current operation.">表示当前操作的对象。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperation`1">
      <summary vsli:raw="Represents an object that is used to interact with an operation that has been posted to the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; queue and contains a &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt;.">表示一个用于与已发布到 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列的操作进行交互的对象，并包含 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <typeparam name="TResult" vsli:raw="The type that is returned by the &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt;.">由 <see cref="T:System.Threading.Tasks.Task`1" /> 返回的类型。</typeparam>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.GetAwaiter">
      <summary vsli:raw="Returns an object that awaits an asynchronous operation that returns a result.">返回等待返回结果的异步操作对象。</summary>
      <returns vsli:raw="An object that awaits an asynchronous operation that returns a result.">一个等待返回结果的异步操作对象。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherOperation`1.InvokeDelegateCore">
      <summary vsli:raw="Begins the operation that is associated with this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherOperation&quot; /&gt;.">开始与 <see cref="T:System.Windows.Threading.DispatcherOperation" /> 关联的操作。</summary>
      <returns vsli:raw="The result of the operation.">操作的结果。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Result">
      <summary vsli:raw="Gets the result of the operation after it has completed.">获取操作完成后的结果。</summary>
      <returns vsli:raw="The result of the operation.">操作的结果。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherOperation`1.Task">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Threading.Tasks.Task`1&quot; /&gt; that represents the current operation.">获取一个表示当前操作的 <see cref="T:System.Threading.Tasks.Task`1" />。</summary>
      <returns vsli:raw="An object that represents the current operation.">表示当前操作的对象。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationCallback">
      <summary vsli:raw="Represents a delegate to use for dispatcher operations.">表示一个用于调度程序操作的委托。</summary>
      <param name="arg" vsli:raw="An argument passed to the callback.">一个传递到回叫的参数。</param>
      <returns vsli:raw="The object returned by the callback.">由回叫返回的对象。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherOperationStatus">
      <summary vsli:raw="Describes the possible values for the status of a &lt;see cref=&quot;T:System.Windows.Threading.DispatcherOperation&quot; /&gt;.">描述 <see cref="T:System.Windows.Threading.DispatcherOperation" /> 状态的可能值。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Aborted">
      <summary vsli:raw="The operation has aborted.">该操作已中止。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Completed">
      <summary vsli:raw="The operation is completed.">该操作已完成。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Executing">
      <summary vsli:raw="The operation started executing, but has not completed.">该操作已开始执行，但尚未完成。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherOperationStatus.Pending">
      <summary vsli:raw="The operation is pending and is still in the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; queue.">该操作为挂起状态，并仍然处于 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列中。</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriority">
      <summary vsli:raw="Describes the priorities at which operations can be invoked by way of the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">描述可通过 <see cref="T:System.Windows.Threading.Dispatcher" /> 调用操作的优先级。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ApplicationIdle">
      <summary vsli:raw="The enumeration value is 2. Operations are processed when the application is idle.">枚举值为 2。 在应用程序空闲时处理操作。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Background">
      <summary vsli:raw="The enumeration value is 4. Operations are processed after all other non-idle operations are completed.">枚举值为 4。 在完成所有其他非空闲操作后处理操作。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.ContextIdle">
      <summary vsli:raw="The enumeration value is 3. Operations are processed after background operations have completed.">枚举值为 3。 在完成后台操作后处理操作。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.DataBind">
      <summary vsli:raw="The enumeration value is 8. Operations are processed at the same priority as data binding.">枚举值为 8。 按与数据绑定相同的优先级处理操作。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Inactive">
      <summary vsli:raw="The enumeration value is 0. Operations are not processed.">枚举值为 0。 操作未处理。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Input">
      <summary vsli:raw="The enumeration value is 5. Operations are processed at the same priority as input.">枚举值为 5。 按与输入相同的优先级处理操作。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Invalid">
      <summary vsli:raw="The enumeration value is -1. This is an invalid priority.">枚举值为 -1。 这是一个无效的优先级。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Loaded">
      <summary vsli:raw="The enumeration value is 6. Operations are processed when layout and render has finished but just before items at input priority are serviced. Specifically this is used when raising the Loaded event.">枚举值为 6。 在布局和呈现已完成，即将按输入优先级处理项之前处理操作。 具体来说，此值在引发 Loaded 事件时使用。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Normal">
      <summary vsli:raw="The enumeration value is 9. Operations are processed at normal priority. This is the typical application priority.">枚举值为 9。 按正常优先级处理操作。 这是典型的应用程序优先级。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Render">
      <summary vsli:raw="The enumeration value is 7. Operations processed at the same priority as rendering.">枚举值为 7。 按与呈现相同的优先级处理操作。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.Send">
      <summary vsli:raw="The enumeration value is 10. Operations are processed before other asynchronous operations. This is the highest priority.">枚举值为 10。 在其他异步操作之前处理操作。 这是最高优先级。</summary>
    </member>
    <member name="F:System.Windows.Threading.DispatcherPriority.SystemIdle">
      <summary vsli:raw="The enumeration value is 1. Operations are processed when the system is idle.">枚举值为 1。 在系统空闲时处理操作。</summary>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaitable">
      <summary vsli:raw="Represents an awaitable object that asynchronously yields control back to the current dispatcher and provides an opportunity for the dispatcher to process other events.">表示异步产生控制权交还给当前调度程序并为该调度程序提供机会处理其他事件的可等待对象。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaitable.GetAwaiter">
      <summary vsli:raw="Returns an object that waits for the completion of an asynchronous task.">返回对象，其等待异步任务的完成。</summary>
      <returns vsli:raw="An object that waits for the completion of an asynchronous task.">一个对象，其等待异步任务的完成。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherPriorityAwaiter">
      <summary vsli:raw="Represents an object that waits for the completion of an asynchronous task.">表示对象，其等待异步任务的完成。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.GetResult">
      <summary vsli:raw="Ends the wait for the completion of the asynchronous task.">结束异步任务完成的等待。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherPriorityAwaiter.OnCompleted(System.Action)">
      <summary vsli:raw="Sets the action to perform when the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherPriorityAwaiter&quot; /&gt; object stops waiting for the asynchronous task to complete.">将操作设置为当 <see cref="T:System.Windows.Threading.DispatcherPriorityAwaiter" /> 对象停止等待异步任务完成时执行。</summary>
      <param name="continuation" vsli:raw="The action to perform when the wait operation completes.">在等待操作完成时要执行的操作。</param>
    </member>
    <member name="P:System.Windows.Threading.DispatcherPriorityAwaiter.IsCompleted">
      <summary vsli:raw="Gets a value that indicates whether the asynchronous task has completed.">获取一个值，该值指示异步任务是否已完成。</summary>
      <returns vsli:raw="&lt;see langword=&quot;false&quot; /&gt; in all cases.">在所有情况下均为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherProcessingDisabled">
      <summary vsli:raw="Represents the Dispatcher when it is in a disable state and provides a means to re-enable dispatcher processing.">表示处于禁用状态的调度程序，并提供重新启用调度程序处理的方法。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Dispose">
      <summary vsli:raw="Re-enables dispatcher processing.">重新启用调度程序处理。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Windows.Threading.DispatcherProcessingDisabled&quot; /&gt; object is equal to this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherProcessingDisabled&quot; /&gt; object.">确定指定的 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象是否等同于此 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象。</summary>
      <param name="obj" vsli:raw="The object to evaluate for equality.">要评价是否相等的对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified object is equal to this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherProcessingDisabled&quot; /&gt; object; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果指定的对象等同于此 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.GetHashCode">
      <summary vsli:raw="Gets a hash code for this instance.">获取此实例的哈希代码。</summary>
      <returns vsli:raw="A signed 32-bit integer hash code.">带符号 32 位整数哈希代码。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Equality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.Windows.Threading.DispatcherProcessingDisabled&quot; /&gt; objects are equal.">确定两个 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象是否相等。</summary>
      <param name="left" vsli:raw="The first object to compare.">要比较的第一个对象。</param>
      <param name="right" vsli:raw="The second object to compare.">要比较的第二个对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherProcessingDisabled&quot; /&gt; objects are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherProcessingDisabled.op_Inequality(System.Windows.Threading.DispatcherProcessingDisabled,System.Windows.Threading.DispatcherProcessingDisabled)">
      <summary vsli:raw="Determines whether two &lt;see cref=&quot;T:System.Windows.Threading.DispatcherProcessingDisabled&quot; /&gt; objects are not equal.">确定两个 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象是否相等。</summary>
      <param name="left" vsli:raw="The first object to compare.">要比较的第一个对象。</param>
      <param name="right" vsli:raw="The second object to compare.">要比较的第二个对象。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherProcessingDisabled&quot; /&gt; objects are not equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <see cref="T:System.Windows.Threading.DispatcherProcessingDisabled" /> 对象不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherSynchronizationContext">
      <summary vsli:raw="Provides a synchronization context for Windows Presentation Foundation (WPF).">为 Windows Presentation Foundation (WPF) 提供同步上下文。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt; class by using the current &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">使用当前的 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 初始化 <see cref="T:System.Windows.Threading.Dispatcher" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt; class by using the specified &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">使用指定的 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 初始化 <see cref="T:System.Windows.Threading.Dispatcher" /> 类的新实例。</summary>
      <param name="dispatcher" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; to associate this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt; with.">要将此 <see cref="T:System.Windows.Threading.Dispatcher" /> 与其关联的 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dispatcher&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dispatcher" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.#ctor(System.Windows.Threading.Dispatcher,System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt; class by using the specified &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">使用指定的 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 初始化 <see cref="T:System.Windows.Threading.Dispatcher" /> 类的新实例。</summary>
      <param name="dispatcher" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; to associate this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt; with.">要将此 <see cref="T:System.Windows.Threading.Dispatcher" /> 与其关联的 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" />。</param>
      <param name="priority" vsli:raw="The priority used to send and post callback methods.">用于的优先级别发送和发送回调方法。</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.CreateCopy">
      <summary vsli:raw="Creates a copy of this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherSynchronizationContext&quot; /&gt;.">创建此 <see cref="T:System.Windows.Threading.DispatcherSynchronizationContext" /> 的副本。</summary>
      <returns vsli:raw="The copy of this synchronization context.">此同步上下文的副本。</returns>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Post(System.Threading.SendOrPostCallback,System.Object)">
      <summary vsli:raw="Invokes the callback in the synchronization context asynchronously.">异步调用同步上下文中的回调。</summary>
      <param name="d" vsli:raw="The delegate to call.">要调用的委托。</param>
      <param name="state" vsli:raw="The object passed to the delegate.">传递给委托的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;d&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Send(System.Threading.SendOrPostCallback,System.Object)">
      <summary vsli:raw="Invokes the callback in the synchronization context synchronously.">同步调用同步上下文中的回调。</summary>
      <param name="d" vsli:raw="The delegate to call.">要调用的委托。</param>
      <param name="state" vsli:raw="The object passed to the delegate.">传递给委托的对象。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;d&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="d" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherSynchronizationContext.Wait(System.IntPtr[],System.Boolean,System.Int32)">
      <summary vsli:raw="Waits for any or all the elements in the specified array to receive a signal.">等待指定数组中的任一元素或所有元素接收信号。</summary>
      <param name="waitHandles" vsli:raw="An array that contains the native operating system handles.">一个包含本机操作系统句柄的数组。</param>
      <param name="waitAll" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to wait for all handles; &lt;see langword=&quot;false&quot; /&gt; to wait for any handle.">若等待所有句柄，则为 <see langword="true" />；若等待任一句柄，则为 <see langword="false" />。</param>
      <param name="millisecondsTimeout" vsli:raw="The number of milliseconds to wait, or &lt;see cref=&quot;F:System.Threading.Timeout.Infinite&quot; /&gt; (-1) to wait indefinitely.">等待的毫秒数，或为 <see cref="F:System.Threading.Timeout.Infinite" /> (-1)，表示无限期等待。</param>
      <returns vsli:raw="The array index of the object that satisfied the wait.">满足等待的对象的数组索引。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherTimer">
      <summary vsli:raw="A timer that is integrated into the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; queue which is processed at a specified interval of time and at a specified priority.">集成到按指定时间间隔和指定优先级处理的 <see cref="T:System.Windows.Threading.Dispatcher" /> 队列中的计时器。</summary>
    </member>
    <member name="E:System.Windows.Threading.DispatcherTimer.Tick">
      <summary vsli:raw="Occurs when the timer interval has elapsed.">超过计时器间隔时发生。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherTimer&quot; /&gt; class.">初始化 <see cref="T:System.Windows.Threading.DispatcherTimer" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.TimeSpan,System.Windows.Threading.DispatcherPriority,System.EventHandler,System.Windows.Threading.Dispatcher)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherTimer&quot; /&gt; class which uses the specified time interval, priority, event handler, and &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;.">初始化 <see cref="T:System.Windows.Threading.DispatcherTimer" /> 类的新实例，该类使用指定的时间间隔、优先级、事件处理程序和 <see cref="T:System.Windows.Threading.Dispatcher" />。</summary>
      <param name="interval" vsli:raw="The period of time between ticks.">刻度之间的时间段。</param>
      <param name="priority" vsli:raw="The priority at which to invoke the timer.">调用计时器的优先级。</param>
      <param name="callback" vsli:raw="The event handler to call when the &lt;see cref=&quot;E:System.Windows.Threading.DispatcherTimer.Tick&quot; /&gt; event occurs.">当 <see cref="E:System.Windows.Threading.DispatcherTimer.Tick" /> 事件发生时调用的事件处理程序。</param>
      <param name="dispatcher" vsli:raw="The dispatcher the timer is associated with.">与计时器关联的调度程序。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;callback&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA;-or-&#xA;&#xA;&lt;paramref name=&quot;dispatcher&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="callback" /> 为 <see langword="null" />。

- 或 -

<paramref name="dispatcher" /> 为 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;interval&quot; /&gt; is less than 0 or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt;.">
        <paramref name="interval" /> 小于 0 或大于 <see cref="F:System.Int32.MaxValue" />。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherTimer&quot; /&gt; class which processes timer events at the specified priority.">初始化按指定优先级处理计时器事件的 <see cref="T:System.Windows.Threading.DispatcherTimer" /> 类的新实例。</summary>
      <param name="priority" vsli:raw="The priority at which to invoke the timer.">调用计时器的优先级。</param>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.#ctor(System.Windows.Threading.DispatcherPriority,System.Windows.Threading.Dispatcher)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherTimer&quot; /&gt; class which runs on the specified &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; at the specified priority.">初始化 <see cref="T:System.Windows.Threading.DispatcherTimer" /> 类的新实例，该类按指定优先级在指定的 <see cref="T:System.Windows.Threading.Dispatcher" /> 上运行。</summary>
      <param name="priority" vsli:raw="The priority at which to invoke the timer.">调用计时器的优先级。</param>
      <param name="dispatcher" vsli:raw="The dispatcher the timer is associated with.">与计时器关联的调度程序。</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;dispatcher&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="dispatcher" /> 为 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Start">
      <summary vsli:raw="Starts the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherTimer&quot; /&gt;.">启动 <see cref="T:System.Windows.Threading.DispatcherTimer" />。</summary>
    </member>
    <member name="M:System.Windows.Threading.DispatcherTimer.Stop">
      <summary vsli:raw="Stops the &lt;see cref=&quot;T:System.Windows.Threading.DispatcherTimer&quot; /&gt;.">停止 <see cref="T:System.Windows.Threading.DispatcherTimer" />。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Dispatcher">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt; associated with this &lt;see cref=&quot;T:System.Windows.Threading.DispatcherTimer&quot; /&gt;.">获取与此 <see cref="T:System.Windows.Threading.Dispatcher" /> 关联的 <see cref="T:System.Windows.Threading.DispatcherTimer" />。</summary>
      <returns vsli:raw="The dispatcher.">调度程序。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Interval">
      <summary vsli:raw="Gets or sets the period of time between timer ticks.">获取或设置计时器刻度之间的时间段。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;interval&quot; /&gt; is less than 0 or greater than &lt;see cref=&quot;F:System.Int32.MaxValue&quot;&gt;Int32.MaxValue&lt;/see&gt; milliseconds.">
        <paramref name="interval" /> 小于 0 或大于 <see cref="F:System.Int32.MaxValue" /> 毫秒。</exception>
      <returns vsli:raw="The period of time between ticks. The default is 00:00:00.">刻度之间的时间段。 默认值为“00:00:00”。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.IsEnabled">
      <summary vsli:raw="Gets or sets a value that indicates whether the timer is running.">获取或设置一个指示是否正在运行计时器的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the timer is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.  The default is &lt;see langword=&quot;false&quot; /&gt;.">如果计时器处于启用状态，则为 <see langword="true" />；否则为 <see langword="false" />。  默认值为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherTimer.Tag">
      <summary vsli:raw="Gets or sets a user-defined data object.">获取或设置用户定义的数据对象。</summary>
      <returns vsli:raw="The user-defined data.  The default is &lt;see langword=&quot;null&quot; /&gt;.">用户定义的数据。  默认值为 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;&lt;see cref=&quot;E:System.Windows.Threading.Dispatcher.UnhandledException&quot; /&gt; event.">提供 <see cref="T:System.Windows.Threading.Dispatcher" /><see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 事件的数据。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Exception">
      <summary vsli:raw="Gets the exception that was raised when executing code by way of the dispatcher.">获取通过调度程序执行代码时引发的异常。</summary>
      <returns vsli:raw="The exception.">异常。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionEventArgs.Handled">
      <summary vsli:raw="Gets or sets whether the exception event has been handled.">获取或设置是否已处理异常事件。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the exception was handled; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果异常已得到处理，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Windows.Threading.Dispatcher.UnhandledException&quot; /&gt; event.">表示用来处理 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="The event data.">事件数据。</param>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs">
      <summary vsli:raw="Provides data for the &lt;see cref=&quot;T:System.Windows.Threading.Dispatcher&quot; /&gt;&lt;see cref=&quot;E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&quot; /&gt; event.">提供 <see cref="T:System.Windows.Threading.Dispatcher" /><see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> 事件的数据。</summary>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.Exception">
      <summary vsli:raw="Gets the exception that was raised when executing code by way of the dispatcher.">获取通过调度程序执行代码时引发的异常。</summary>
      <returns vsli:raw="The exception.">异常。</returns>
    </member>
    <member name="P:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventArgs.RequestCatch">
      <summary vsli:raw="Gets or sets whether the exception should be caught and the event handlers called.">获取或设置异常是否应被捕获，并获取或设置调用的事件处理程序。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;E:System.Windows.Threading.Dispatcher.UnhandledException&quot; /&gt; should be raised; otherwise; &lt;see langword=&quot;false&quot; /&gt;.  The default value is &lt;see langword=&quot;true&quot; /&gt;.">如果应引发 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledException" />，则为 <see langword="true" />；否则为 <see langword="false" />。  默认值是 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Windows.Threading.DispatcherUnhandledExceptionFilterEventHandler">
      <summary vsli:raw="Represents the method that will handle the &lt;see cref=&quot;E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter&quot; /&gt; event.">表示用来处理 <see cref="E:System.Windows.Threading.Dispatcher.UnhandledExceptionFilter" /> 事件的方法。</summary>
      <param name="sender" vsli:raw="The source of the event.">事件源。</param>
      <param name="e" vsli:raw="The event data.">事件数据。</param>
    </member>
    <member name="T:System.Windows.ValidateValueCallback">
      <summary vsli:raw="Represents a method used as a callback that validates the effective value of a dependency property.">表示用作验证依赖属性有效值的回调的方法。</summary>
      <param name="value" vsli:raw="The value to be validated.">要验证的值。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value was validated; &lt;see langword=&quot;false&quot; /&gt; if the submitted value was invalid.">如果验证了值，则为 <see langword="true" />；如果提交的值无效，则为 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Windows.Vector">
      <summary vsli:raw="Represents a displacement in 2-D space.">表示二维空间中的位移。</summary>
    </member>
    <member name="M:System.Windows.Vector.#ctor(System.Double,System.Double)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure.">初始化 <see cref="T:System.Windows.Vector" /> 结构的新实例。</summary>
      <param name="x" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt;-offset of the new &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">新 <see cref="P:System.Windows.Vector.X" /> 的 <see cref="T:System.Windows.Vector" /> 偏移量。</param>
      <param name="y" vsli:raw="The &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt;-offset of the new &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">新 <see cref="P:System.Windows.Vector.Y" /> 的 <see cref="T:System.Windows.Vector" /> 偏移量。</param>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)">
      <summary vsli:raw="Translates the specified point by the specified vector and returns the resulting point.">按指定向量平移指定点，并返回结果点。</summary>
      <param name="vector" vsli:raw="The amount to translate the specified point.">指定点的平移量。</param>
      <param name="point" vsli:raw="The point to translate.">要平移的点。</param>
      <returns vsli:raw="The result of translating &lt;paramref name=&quot;point&quot; /&gt; by &lt;paramref name=&quot;vector&quot; /&gt;.">按 <paramref name="point" /> 平移 <paramref name="vector" /> 的结果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Adds two vectors and returns the result as a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure.">将两个向量相加并将结果以 <see cref="T:System.Windows.Vector" /> 结构的形式返回。</summary>
      <param name="vector1" vsli:raw="The first vector to add.">要相加的第一个向量。</param>
      <param name="vector2" vsli:raw="The second vector to add.">要相加的第二个向量。</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;.">
        <paramref name="vector1" /> 与 <paramref name="vector2" /> 的和。</returns>
    </member>
    <member name="M:System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Retrieves the angle, expressed in degrees, between the two specified vectors.">检索两个指定向量之间的角度（用度表示）。</summary>
      <param name="vector1" vsli:raw="The first vector to evaluate.">要计算的第一个向量。</param>
      <param name="vector2" vsli:raw="The second vector to evaluate.">要计算的第二个向量。</param>
      <returns vsli:raw="The angle, in degrees, between &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;.">
        <paramref name="vector1" /> 和 <paramref name="vector2" /> 之间的角度（以度为单位）。</returns>
    </member>
    <member name="M:System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Calculates the cross product of two vectors.">计算两个向量的叉积。</summary>
      <param name="vector1" vsli:raw="The first vector to evaluate.">要计算的第一个向量。</param>
      <param name="vector2" vsli:raw="The second vector to evaluate.">要计算的第二个向量。</param>
      <returns vsli:raw="The cross product of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;. The following formula is used to calculate the cross product:  &#xA;  &#xA; &lt;c&gt;(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)&lt;/c&gt;">
        <paramref name="vector1" /> 和 <paramref name="vector2" /> 的叉乘积。 可使用下面的公式计算叉乘积： 
 <c>(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)</c></returns>
    </member>
    <member name="M:System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Calculates the determinant of two vectors.">计算两个向量的行列式。</summary>
      <param name="vector1" vsli:raw="The first vector to evaluate.">要计算的第一个向量。</param>
      <param name="vector2" vsli:raw="The second vector to evaluate.">要计算的第二个向量。</param>
      <returns vsli:raw="The determinant of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;.">
        <paramref name="vector1" /> 和 <paramref name="vector2" /> 的行列式。</returns>
    </member>
    <member name="M:System.Windows.Vector.Divide(System.Windows.Vector,System.Double)">
      <summary vsli:raw="Divides the specified vector by the specified scalar and returns the result as a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">将指定向量除以指定标量，并将结果以 <see cref="T:System.Windows.Vector" /> 形式返回。</summary>
      <param name="vector" vsli:raw="The vector structure to divide.">作为除数的向量结构。</param>
      <param name="scalar" vsli:raw="The amount by which &lt;paramref name=&quot;vector&quot; /&gt; is divided.">
        <paramref name="vector" /> 的被除量。</param>
      <returns vsli:raw="The result of dividing &lt;paramref name=&quot;vector&quot; /&gt; by &lt;paramref name=&quot;scalar&quot; /&gt;.">
        <paramref name="vector" /> 除以 <paramref name="scalar" /> 的结果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Object)">
      <summary vsli:raw="Determines whether the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; is a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure and, if it is, whether it has the same &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values as this vector.">确定指定的 <see cref="T:System.Object" /> 是不是 <see cref="T:System.Windows.Vector" /> 结构，如果是，则确定其是否与此向量具有相同的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值。</summary>
      <param name="o" vsli:raw="The vector to compare.">要比较的向量。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;o&quot; /&gt; is a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; and has the same &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values as this vector; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="o" /> 是 <see cref="T:System.Windows.Vector" /> 并具有与此向量相同的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector)">
      <summary vsli:raw="Compares two vectors for equality.">比较两个向量是否相等。</summary>
      <param name="value" vsli:raw="The vector to compare with this vector.">要与此向量比较的向量。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;value&quot; /&gt; has the same &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values as this vector; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="value" /> 具有与此向量相同的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Compares the two specified vectors for equality.">比较两个指定向量是否相等。</summary>
      <param name="vector1" vsli:raw="The first vector to compare.">要比较的第一个向量。</param>
      <param name="vector2" vsli:raw="The second vector to compare.">要比较的第二个向量。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; components of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 分量相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.GetHashCode">
      <summary vsli:raw="Returns the hash code for this vector.">返回此向量的哈希代码。</summary>
      <returns vsli:raw="The hash code for this instance.">此实例的哈希代码。</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)">
      <summary vsli:raw="Multiplies the specified scalar by the specified vector and returns the resulting &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">将指定标量与指定向量相乘，并返回结果 <see cref="T:System.Windows.Vector" />。</summary>
      <param name="scalar" vsli:raw="The scalar to multiply.">要乘以的标量。</param>
      <param name="vector" vsli:raw="The vector to multiply.">要相乘的向量。</param>
      <returns vsli:raw="The result of multiplying &lt;paramref name=&quot;scalar&quot; /&gt; and &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="scalar" /> 与 <paramref name="vector" /> 相乘的结果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)">
      <summary vsli:raw="Multiplies the specified vector by the specified scalar and returns the resulting &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">将指定向量与指定标量相乘，并返回结果 <see cref="T:System.Windows.Vector" />。</summary>
      <param name="vector" vsli:raw="The vector to multiply.">要相乘的向量。</param>
      <param name="scalar" vsli:raw="The scalar to multiply.">要乘以的标量。</param>
      <returns vsli:raw="The result of multiplying &lt;paramref name=&quot;vector&quot; /&gt; and &lt;paramref name=&quot;scalar&quot; /&gt;.">
        <paramref name="vector" /> 与 <paramref name="scalar" /> 相乘的结果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary vsli:raw="Transforms the coordinate space of the specified vector using the specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">使用指定的 <see cref="T:System.Windows.Media.Matrix" /> 变换指定向量的坐标空间。</summary>
      <param name="vector" vsli:raw="The vector structure to transform.">要变换的向量结构。</param>
      <param name="matrix" vsli:raw="The transformation to apply to &lt;paramref name=&quot;vector&quot; /&gt;.">要应用于 <paramref name="vector" /> 的变换。</param>
      <returns vsli:raw="The result of transforming &lt;paramref name=&quot;vector&quot; /&gt; by &lt;paramref name=&quot;matrix&quot; /&gt;.">按 <paramref name="vector" /> 变换 <paramref name="matrix" /> 的结果。</returns>
    </member>
    <member name="M:System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Calculates the dot product of the two specified vectors and returns the result as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">计算两个指定向量的点积并将结果以 <see cref="T:System.Double" /> 形式返回。</summary>
      <param name="vector1" vsli:raw="The first vector to multiply.">要相乘的第一个向量。</param>
      <param name="vector2" vsli:raw="The second vector structure to multiply.">要相乘的第二个向量结构。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Double&quot; /&gt; containing the scalar dot product of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;, which is calculated using the following formula:  &#xA;  &#xA; &lt;c&gt;(vector1.X * vector2.X) + (vector1.Y * vector2.Y)&lt;/c&gt;">一个 <see cref="T:System.Double" />，其中包含 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的标量点积，标量点积可通过下面的公式计算得出： 
 <c>(vector1.X * vector2.X) + (vector1.Y * vector2.Y)</c></returns>
    </member>
    <member name="M:System.Windows.Vector.Negate">
      <summary vsli:raw="Negates this vector. The vector has the same magnitude as before, but its direction is now opposite.">对此向量求反。 向量的大小与以前相同，但现在的方向与以前相反。</summary>
    </member>
    <member name="M:System.Windows.Vector.Normalize">
      <summary vsli:raw="Normalizes this vector.">规范化此向量。</summary>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)">
      <summary vsli:raw="Translates a point by the specified vector and returns the resulting point.">按指定向量平移点，并返回结果点。</summary>
      <param name="vector" vsli:raw="The vector used to translate &lt;paramref name=&quot;point&quot; /&gt;.">用于平移 <paramref name="point" /> 的向量。</param>
      <param name="point" vsli:raw="The point to translate.">要平移的点。</param>
      <returns vsli:raw="The result of translating &lt;paramref name=&quot;point&quot; /&gt; by &lt;paramref name=&quot;vector&quot; /&gt;.">按 <paramref name="point" /> 平移 <paramref name="vector" /> 的结果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Adds two vectors and returns the result as a vector.">将两个向量相加并将结果以向量形式返回。</summary>
      <param name="vector1" vsli:raw="The first vector to add.">要相加的第一个向量。</param>
      <param name="vector2" vsli:raw="The second vector to add.">要相加的第二个向量。</param>
      <returns vsli:raw="The sum of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;.">
        <paramref name="vector1" /> 与 <paramref name="vector2" /> 的和。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)">
      <summary vsli:raw="Divides the specified vector by the specified scalar and returns the resulting vector.">将指定向量除以指定标量，并返回结果向量。</summary>
      <param name="vector" vsli:raw="The vector to divide.">作为除数的向量。</param>
      <param name="scalar" vsli:raw="The scalar by which &lt;paramref name=&quot;vector&quot; /&gt; will be divided.">
        <paramref name="vector" /> 将除以的标量。</param>
      <returns vsli:raw="The result of dividing &lt;paramref name=&quot;vector&quot; /&gt; by &lt;paramref name=&quot;scalar&quot; /&gt;.">
        <paramref name="vector" /> 除以 <paramref name="scalar" /> 的结果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Compares two vectors for equality.">比较两个向量是否相等。</summary>
      <param name="vector1" vsli:raw="The first vector to compare.">要比较的第一个向量。</param>
      <param name="vector2" vsli:raw="The second vector to compare.">要比较的第二个向量。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; components of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt; are equal; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 分量相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Point">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Windows.Point&quot; /&gt; with the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values of this vector.">使用此向量的 <see cref="T:System.Windows.Point" /> 和 <see cref="P:System.Windows.Vector.X" /> 值创建 <see cref="P:System.Windows.Vector.Y" />。</summary>
      <param name="vector" vsli:raw="The vector to convert.">要变换的向量。</param>
      <returns vsli:raw="A point with &lt;see cref=&quot;P:System.Windows.Point.X&quot; /&gt;- and &lt;see cref=&quot;P:System.Windows.Point.Y&quot; /&gt;-coordinate values equal to the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; offset values of &lt;paramref name=&quot;vector&quot; /&gt;.">一个点，其 <see cref="P:System.Windows.Point.X" /> 和 <see cref="P:System.Windows.Point.Y" /> 坐标值与 <paramref name="vector" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 偏移值相等。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Explicit(System.Windows.Vector)~System.Windows.Size">
      <summary vsli:raw="Creates a &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; from the offsets of this vector.">根据此向量的偏移量创建 <see cref="T:System.Windows.Size" />。</summary>
      <param name="vector" vsli:raw="The vector to convert.">要变换的向量。</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Windows.Size&quot; /&gt; with a &lt;see cref=&quot;P:System.Windows.Size.Width&quot; /&gt; equal to the absolute value of this vector's &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; property and a &lt;see cref=&quot;P:System.Windows.Size.Height&quot; /&gt; equal to the absolute value of this vector's &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; property.">一个 <see cref="T:System.Windows.Size" />，其 <see cref="P:System.Windows.Size.Width" /> 等于此向量的 <see cref="P:System.Windows.Vector.X" /> 属性的绝对值，其 <see cref="P:System.Windows.Size.Height" /> 等于此向量的 <see cref="P:System.Windows.Vector.Y" /> 属性的绝对值。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Compares two vectors for inequality.">比较两个向量是否不相等。</summary>
      <param name="vector1" vsli:raw="The first vector to compare.">要比较的第一个向量。</param>
      <param name="vector2" vsli:raw="The second vector to compare.">要比较的第二个向量。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; components of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt; are different; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 分量不相等，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)">
      <summary vsli:raw="Multiplies the specified scalar by the specified vector and returns the resulting vector.">将指定标量与指定向量相乘，并返回结果向量。</summary>
      <param name="scalar" vsli:raw="The scalar to multiply.">要乘以的标量。</param>
      <param name="vector" vsli:raw="The vector to multiply.">要相乘的向量。</param>
      <returns vsli:raw="The result of multiplying &lt;paramref name=&quot;scalar&quot; /&gt; and &lt;paramref name=&quot;vector&quot; /&gt;.">
        <paramref name="scalar" /> 与 <paramref name="vector" /> 相乘的结果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)">
      <summary vsli:raw="Multiplies the specified vector by the specified scalar and returns the resulting vector.">将指定向量与指定标量相乘，并返回结果向量。</summary>
      <param name="vector" vsli:raw="The vector to multiply.">要相乘的向量。</param>
      <param name="scalar" vsli:raw="The scalar to multiply.">要乘以的标量。</param>
      <returns vsli:raw="The result of multiplying &lt;paramref name=&quot;vector&quot; /&gt; and &lt;paramref name=&quot;scalar&quot; /&gt;.">
        <paramref name="vector" /> 与 <paramref name="scalar" /> 相乘的结果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)">
      <summary vsli:raw="Transforms the coordinate space of the specified vector using the specified &lt;see cref=&quot;T:System.Windows.Media.Matrix&quot; /&gt;.">使用指定的 <see cref="T:System.Windows.Media.Matrix" /> 变换指定向量的坐标空间。</summary>
      <param name="vector" vsli:raw="The vector to transform.">要转换的向量。</param>
      <param name="matrix" vsli:raw="The transformation to apply to &lt;paramref name=&quot;vector&quot; /&gt;.">要应用于 <paramref name="vector" /> 的变换。</param>
      <returns vsli:raw="The result of transforming &lt;paramref name=&quot;vector&quot; /&gt; by &lt;paramref name=&quot;matrix&quot; /&gt;.">按 <paramref name="vector" /> 变换 <paramref name="matrix" /> 的结果。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Calculates the dot product of the two specified vector structures and returns the result as a &lt;see cref=&quot;T:System.Double&quot; /&gt;.">计算两个指定向量结构的点积并将结果以 <see cref="T:System.Double" /> 形式返回。</summary>
      <param name="vector1" vsli:raw="The first vector to multiply.">要相乘的第一个向量。</param>
      <param name="vector2" vsli:raw="The second vector to multiply.">要相乘的第二个向量。</param>
      <returns vsli:raw="Returns a &lt;see cref=&quot;T:System.Double&quot; /&gt; containing the scalar dot product of &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;, which is calculated using the following formula:  &#xA;  &#xA; &lt;c&gt;vector1.X * vector2.X + vector1.Y * vector2.Y&lt;/c&gt;">返回一个 <see cref="T:System.Double" />，其中包含 <paramref name="vector1" /> 和 <paramref name="vector2" /> 的标量点积，标量点积可通过下面的公式计算得出： 
 <c>vector1.y.X * vector2.y。X + vector1.y。Y * vector2.y。误差</c></returns>
    </member>
    <member name="M:System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Subtracts one specified vector from another.">从一个指定向量中减去另一个指定向量。</summary>
      <param name="vector1" vsli:raw="The vector from which &lt;paramref name=&quot;vector2&quot; /&gt; is subtracted.">从其中减去 <paramref name="vector2" /> 的向量。</param>
      <param name="vector2" vsli:raw="The vector to subtract from &lt;paramref name=&quot;vector1&quot; /&gt;.">要从 <paramref name="vector1" /> 中减去的向量。</param>
      <returns vsli:raw="The difference between &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;.">
        <paramref name="vector1" /> 和 <paramref name="vector2" /> 之间的差值。</returns>
    </member>
    <member name="M:System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)">
      <summary vsli:raw="Negates the specified vector.">对指定向量求反。</summary>
      <param name="vector" vsli:raw="The vector to negate.">要求反的向量。</param>
      <returns vsli:raw="A vector with &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values opposite of the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values of &lt;paramref name=&quot;vector&quot; /&gt;.">一个向量，其 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值与 <paramref name="vector" /> 的 <see cref="P:System.Windows.Vector.X" /> 和 <see cref="P:System.Windows.Vector.Y" /> 值相反。</returns>
    </member>
    <member name="M:System.Windows.Vector.Parse(System.String)">
      <summary vsli:raw="Converts a string representation of a vector into the equivalent &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure.">将向量的字符串表示形式转换为等效的 <see cref="T:System.Windows.Vector" /> 结构。</summary>
      <param name="source" vsli:raw="The string representation of the vector.">向量的字符串表示形式。</param>
      <returns vsli:raw="The equivalent &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure.">等效的 <see cref="T:System.Windows.Vector" /> 结构。</returns>
    </member>
    <member name="M:System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)">
      <summary vsli:raw="Subtracts the specified vector from another specified vector.">从一个指定向量中减去另一个指定向量。</summary>
      <param name="vector1" vsli:raw="The vector from which &lt;paramref name=&quot;vector2&quot; /&gt; is subtracted.">从其中减去 <paramref name="vector2" /> 的向量。</param>
      <param name="vector2" vsli:raw="The vector to subtract from &lt;paramref name=&quot;vector1&quot; /&gt;.">要从 <paramref name="vector1" /> 中减去的向量。</param>
      <returns vsli:raw="The difference between &lt;paramref name=&quot;vector1&quot; /&gt; and &lt;paramref name=&quot;vector2&quot; /&gt;.">
        <paramref name="vector1" /> 和 <paramref name="vector2" /> 之间的差值。</returns>
    </member>
    <member name="M:System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)">
      <summary vsli:raw="This member supports the Windows Presentation Foundation (WPF) infrastructure and is not intended to be used directly from your code. For a description of this member, see &lt;see cref=&quot;M:System.IFormattable.ToString(System.String,System.IFormatProvider)&quot; /&gt;.">此成员支持 Windows Presentation Foundation (WPF) 基础结构，但不能在代码中直接使用。 有关此成员的说明，请参见 <see cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)" />。</summary>
      <param name="format" vsli:raw="The string specifying the format to use.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to use the default format defined for the type of the &lt;see cref=&quot;T:System.IFormattable&quot; /&gt; implementation.">指定要使用的格式的字符串。  
  
- 或 - 
 <see langword="null" />，表示使用为 <see cref="T:System.IFormattable" /> 实现的类型定义的默认格式。</param>
      <param name="provider" vsli:raw="The &lt;see langword=&quot;IFormatProvider&quot; /&gt; to use to format the value.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;null&quot; /&gt; to obtain the numeric format information from the current locale setting of the operating system.">用于格式化该值的 <see langword="IFormatProvider" />。  
  
- 或 - 
 从操作系统的当前区域设置中获取数字格式信息的 <see langword="null" />。</param>
      <returns vsli:raw="A string containing the value of the current instance in the specified format.">一个字符串，包含采用指定格式的当前实例的值。</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString">
      <summary vsli:raw="Returns the string representation of this &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure.">返回此 <see cref="T:System.Windows.Vector" /> 结构的字符串表示形式。</summary>
      <returns vsli:raw="A string that represents the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values of this &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">一个字符串，表示此 <see cref="P:System.Windows.Vector.X" /> 的 <see cref="P:System.Windows.Vector.Y" /> 和 <see cref="T:System.Windows.Vector" /> 值。</returns>
    </member>
    <member name="M:System.Windows.Vector.ToString(System.IFormatProvider)">
      <summary vsli:raw="Returns the string representation of this &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure with the specified formatting information.">使用指定的格式设置信息返回此 <see cref="T:System.Windows.Vector" /> 结构的字符串表示形式。</summary>
      <param name="provider" vsli:raw="The culture-specific formatting information.">特定于区域的格式设置信息。</param>
      <returns vsli:raw="A string that represents the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; and &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; values of this &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">一个字符串，表示此 <see cref="P:System.Windows.Vector.X" /> 的 <see cref="P:System.Windows.Vector.Y" /> 和 <see cref="T:System.Windows.Vector" /> 值。</returns>
    </member>
    <member name="P:System.Windows.Vector.Length">
      <summary vsli:raw="Gets the length of this vector.">获取此向量的长度。</summary>
      <returns vsli:raw="The length of this vector.">此向量的长度。</returns>
    </member>
    <member name="P:System.Windows.Vector.LengthSquared">
      <summary vsli:raw="Gets the square of the length of this vector.">获取此向量的长度的平方。</summary>
      <returns vsli:raw="The square of the &lt;see cref=&quot;P:System.Windows.Vector.Length&quot; /&gt; of this vector.">此向量的 <see cref="P:System.Windows.Vector.Length" /> 的平方。</returns>
    </member>
    <member name="P:System.Windows.Vector.X">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; component of this vector.">获取或设置此向量的 <see cref="P:System.Windows.Vector.X" /> 分量。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Windows.Vector.X&quot; /&gt; component of this vector. The default value is 0.">此向量的 <see cref="P:System.Windows.Vector.X" /> 分量。 默认值为 0。</returns>
    </member>
    <member name="P:System.Windows.Vector.Y">
      <summary vsli:raw="Gets or sets the &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; component of this vector.">获取或设置此向量的 <see cref="P:System.Windows.Vector.Y" /> 分量。</summary>
      <returns vsli:raw="The &lt;see cref=&quot;P:System.Windows.Vector.Y&quot; /&gt; component of this vector. The default value is 0.">此向量的 <see cref="P:System.Windows.Vector.Y" /> 分量。 默认值为 0。</returns>
    </member>
    <member name="T:System.Windows.VectorConverter">
      <summary vsli:raw="Converts instances of other types to and from a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">在 <see cref="T:System.Windows.Vector" /> 实例与其他类型的实例之间进行转换。</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; structure.">初始化 <see cref="T:System.Windows.Vector" /> 结构的新实例。</summary>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Indicates whether an object can be converted from a given type to an instance of a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">指示是否可将对象从给定类型转换为 <see cref="T:System.Windows.Vector" /> 的实例。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">描述类型的上下文信息。</param>
      <param name="sourceType" vsli:raw="The source &lt;see cref=&quot;T:System.Type&quot; /&gt; that is being queried for conversion support.">将对其查询转换支持的源 <see cref="T:System.Type" />。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if objects of the specified type can be converted to a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将指定类型的对象转换为 <see cref="T:System.Windows.Vector" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary vsli:raw="Determines whether instances of &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; can be converted to the specified type.">确定是否可将 <see cref="T:System.Windows.Vector" /> 的实例转换为指定类型。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">描述类型的上下文信息。</param>
      <param name="destinationType" vsli:raw="The desired type this &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; is being evaluated for conversion.">要计算用于转换的此 <see cref="T:System.Windows.Vector" /> 的所需类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if instances of &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; can be converted to &lt;paramref name=&quot;destinationType&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果可以将 <see cref="T:System.Windows.Vector" /> 的实例转换为 <paramref name="destinationType" />，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary vsli:raw="Converts the specified object to a &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">将指定对象转换为 <see cref="T:System.Windows.Vector" />。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">描述类型的上下文信息。</param>
      <param name="culture" vsli:raw="Describes the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the type being converted.">描述正在转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The object being converted.">要转换的对象。</param>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; created from converting &lt;paramref name=&quot;value&quot; /&gt;.">通过转换 <paramref name="value" /> 创建的 <see cref="T:System.Windows.Vector" />。</returns>
    </member>
    <member name="M:System.Windows.VectorConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary vsli:raw="Converts the specified &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; to the specified type.">将指定的 <see cref="T:System.Windows.Vector" /> 转换为指定类型。</summary>
      <param name="context" vsli:raw="Describes the context information of a type.">描述类型的上下文信息。</param>
      <param name="culture" vsli:raw="Describes the &lt;see cref=&quot;T:System.Globalization.CultureInfo&quot; /&gt; of the type being converted.">描述正在转换的类型的 <see cref="T:System.Globalization.CultureInfo" />。</param>
      <param name="value" vsli:raw="The &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; to convert.">要转换的 <see cref="T:System.Windows.Vector" />。</param>
      <param name="destinationType" vsli:raw="The type to convert this &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt; to.">要将此 <see cref="T:System.Windows.Vector" /> 转换为的类型。</param>
      <returns vsli:raw="The object created from converting this &lt;see cref=&quot;T:System.Windows.Vector&quot; /&gt;.">通过转换此 <see cref="T:System.Windows.Vector" /> 创建的对象。</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager">
      <summary vsli:raw="Provides a base class for the event manager that is used in the weak event pattern. The manager adds and removes listeners for events (or callbacks) that also use the pattern.">为在“弱事件模式”中使用的事件管理器提供基类**。 管理器为也使用该模式的事件（或回调）添加和移除侦听器。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.#ctor">
      <summary vsli:raw="Initializes base class values when it is used as the initializer by the constructor of a derived class.">在基类值由派生类的构造函数用作初始值设定项时初始化基类值。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)">
      <summary vsli:raw="Delivers the event being managed to each listener.">将正在托管的事件传送到每个侦听器。</summary>
      <param name="sender" vsli:raw="The object on which the event is being handled.">在其中处理事件的对象。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data for the event to deliver.">一个包含要传递的事件的事件数据的 <see cref="T:System.EventArgs" />。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)">
      <summary vsli:raw="Delivers the event being managed to each listener in the provided list.">将正在托管的事件传送到所提供列表中的每个侦听器。</summary>
      <param name="sender" vsli:raw="The object on which the event is being handled.">在其中处理事件的对象。</param>
      <param name="args" vsli:raw="An &lt;see cref=&quot;T:System.EventArgs&quot; /&gt; that contains the event data.">包含事件数据的 <see cref="T:System.EventArgs" />。</param>
      <param name="list" vsli:raw="The provided &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">提供的 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.GetCurrentManager(System.Type)">
      <summary vsli:raw="Returns the &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; implementation that is used for the provided type.">返回用于所提供类型的 <see cref="T:System.Windows.WeakEventManager" /> 实现。</summary>
      <param name="managerType" vsli:raw="The type to obtain the &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; for.">要为其获取 <see cref="T:System.Windows.WeakEventManager" /> 的类型。</param>
      <returns vsli:raw="The matching &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; implementation.">匹配的 <see cref="T:System.Windows.WeakEventManager" /> 实现。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.NewListenerList">
      <summary vsli:raw="Returns a new object to contain listeners to an event.">返回包含事件侦听器的新对象。</summary>
      <returns vsli:raw="A new object to contain listeners to an event.">包含事件侦听器的新对象。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Adds the specified delegate as an event handler of the specified source.">添加指定的委托为指定源的事件处理程序。</summary>
      <param name="source" vsli:raw="The source object that the handler delegate subscribes to.">处理程序代理订阅的源对象。</param>
      <param name="handler" vsli:raw="The delegate that handles the event that is raised by &lt;paramref name=&quot;source&quot; /&gt;.">处理 <paramref name="source" /> 引发的事件的委托。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Adds the provided listener to the provided source for the event being managed.">将提供的侦听器添加到为托管事件所提供的源中。</summary>
      <param name="source" vsli:raw="The source to attach listeners to.">要附加侦听器的源。</param>
      <param name="listener" vsli:raw="The listening class (which must implement &lt;see cref=&quot;T:System.Windows.IWeakEventListener&quot; /&gt;).">侦听类（必须实现 <see cref="T:System.Windows.IWeakEventListener" />）。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Removes the previously added handler from the specified source.">从指定的源中移除以前添加的处理程序。</summary>
      <param name="source" vsli:raw="The source to remove the handler from.">要从中移除处理程序的源。</param>
      <param name="handler" vsli:raw="The delegate to remove from &lt;paramref name=&quot;source&quot; /&gt;.">要从 <paramref name="source" /> 移除的委托。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)">
      <summary vsli:raw="Removes a previously added listener from the provided source.">从提供的源中移除以前添加的侦听器。</summary>
      <param name="source" vsli:raw="The source to remove listeners from.">要从中移除侦听器的源。</param>
      <param name="listener" vsli:raw="The listening class (which must implement &lt;see cref=&quot;T:System.Windows.IWeakEventListener&quot; /&gt;).">侦听类（必须实现 <see cref="T:System.Windows.IWeakEventListener" />）。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)">
      <summary vsli:raw="Removes inactive listener entries from the data list for the provided source. Returns &lt;see langword=&quot;true&quot; /&gt; if some entries were actually removed from the list.">从所提供源的数据列表中移除不活动的侦听器项。 如果某些项实际上已经从列表中移除，则返回 <see langword="true" />。</summary>
      <param name="source" vsli:raw="The source for events being listened to.">要侦听的事件的源。</param>
      <param name="data" vsli:raw="The data to check. This object is expected to be a &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt; implementation.">要检查的数据。 此对象应为 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 实现。</param>
      <param name="purgeAll" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to stop listening to &lt;paramref name=&quot;source&quot; /&gt;, and completely remove all entries from &lt;paramref name=&quot;data&quot; /&gt;.">设置为 <see langword="true" /> 可停止侦听 <paramref name="source" />，并从 <paramref name="data" /> 中完全移除所有项。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if some entries were actually removed; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果某些项实际上已经移除，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.Remove(System.Object)">
      <summary vsli:raw="Removes all listeners for the specified source.">移除指定源的所有侦听器。</summary>
      <param name="source" vsli:raw="The source to remove listener information for.">要移除侦听器信息的源。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ScheduleCleanup">
      <summary vsli:raw="Requests that a purge of unused entries in the underlying listener list be performed on a lower priority thread.">要求在优先级较低的线程上清除基础侦听器列表中未使用的项。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)">
      <summary vsli:raw="Sets the current manager for the specified manager type.">为指定的管理器类型设置当前管理器。</summary>
      <param name="managerType" vsli:raw="The type to set the new event manager.">要为其设置新事件管理器的类型。</param>
      <param name="manager" vsli:raw="The new event manager.">新事件管理器。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StartListening(System.Object)">
      <summary vsli:raw="When overridden in a derived class, starts listening for the event being managed. After the &lt;see cref=&quot;M:System.Windows.WeakEventManager.StartListening(System.Object)&quot; /&gt; method is first called, the manager should be in the state of calling &lt;see cref=&quot;M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)&quot; /&gt; or &lt;see cref=&quot;M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)&quot; /&gt; whenever the relevant event from the provided source is handled.">在派生类中重写时，开始侦听被托管的事件。 第一次调用 <see cref="M:System.Windows.WeakEventManager.StartListening(System.Object)" /> 方法后，只要处理了所提供源中的相关事件，管理器就应处于调用 <see cref="M:System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)" /> 或 <see cref="M:System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)" /> 的状态。</summary>
      <param name="source" vsli:raw="The source to begin listening on.">开始侦听的源。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.StopListening(System.Object)">
      <summary vsli:raw="When overridden in a derived class, stops listening on the provided source for the event being managed.">在派生类中重写时，停止为被托管的事件侦听所提供的源。</summary>
      <param name="source" vsli:raw="The source to stop listening on.">停止侦听的源。</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.Item(System.Object)">
      <summary vsli:raw="Gets or sets the data being stored for the specified source.">获取或设置为指定的源存储的数据。</summary>
      <param name="source" vsli:raw="The zero-based index of the requested source.">所请求源的从零开始的索引。</param>
      <returns vsli:raw="Data being stored by the manager for this source.">通过此源的管理器存储的数据。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ReadLock">
      <summary vsli:raw="Establishes a read-lock on the underlying data table, and returns an &lt;see cref=&quot;T:System.IDisposable&quot; /&gt;.">在基础数据表上建立读取锁定，并返回 <see cref="T:System.IDisposable" />。</summary>
      <returns vsli:raw="An object that can be used to establish a lock on the data table members and then be appropriately disposed with a &lt;see langword=&quot;using&quot; /&gt; construct.">一个对象，可用于在数据表成员上建立锁定，然后通过 <see langword="using" /> 构造被相应释放。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.WriteLock">
      <summary vsli:raw="Establishes a write-lock on the underlying data table, and returns an &lt;see cref=&quot;T:System.IDisposable&quot; /&gt;.">在基础数据表上建立写入锁定，并返回 <see cref="T:System.IDisposable" />。</summary>
      <returns vsli:raw="An object that can be used to establish a lock on the data table members and then be appropriately disposed with a &lt;see langword=&quot;using&quot; /&gt; construct.">一个对象，可用于在数据表成员上建立锁定，然后通过 <see langword="using" /> 构造被相应释放。</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList">
      <summary vsli:raw="Provides a built-in collection list for storing listeners for a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt;.">提供用于存储 <see cref="T:System.Windows.WeakEventManager" /> 的侦听器的内置集合列表。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt; class.">初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt; class with the specified initial capacity.">使用指定的初始容量初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 类的新实例。</summary>
      <param name="capacity" vsli:raw="The number of items that should be allocated in the initial list.">应在初始列表中分配的项数。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Add(System.Windows.IWeakEventListener)">
      <summary vsli:raw="Adds a &lt;see cref=&quot;T:System.Windows.IWeakEventListener&quot; /&gt; object to the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">将 <see cref="T:System.Windows.IWeakEventListener" /> 对象添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中。</summary>
      <param name="listener" vsli:raw="The listener element to add to the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">要添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 的侦听器元素。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.AddHandler(System.Delegate)">
      <summary vsli:raw="Adds an event handler to the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">将事件处理程序添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中。</summary>
      <param name="handler" vsli:raw="The event handler to add to the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">将添加到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中的事件处理程序。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.BeginUse">
      <summary vsli:raw="Declares the list to be in use. This prevents direct changes to the list during iterations of the list items.">声明列表正在使用中。 这可以防止在列表项迭代过程中直接更改列表。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list was already declared to be in use; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果列表已经声明为正在使用中，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Clone">
      <summary vsli:raw="Creates a modifiable clone of this &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">创建此 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 的可修改复本。</summary>
      <returns vsli:raw="A modifiable clone of the current object.">当前对象的可修改复本。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.CopyTo(System.Windows.WeakEventManager.ListenerList)">
      <summary vsli:raw="Copies the current &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt; to the specified &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">将当前的 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 复制到指定 <see cref="T:System.Windows.WeakEventManager.ListenerList" />。</summary>
      <param name="newList" vsli:raw="The object to copy to.">要复制到的对象。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary vsli:raw="Delivers the event being managed to each listener in the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">将正在托管的事件传送到 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中的每个侦听器。</summary>
      <param name="sender" vsli:raw="The object that raised the event.">引发事件的对象。</param>
      <param name="args" vsli:raw="An object that contains the event data.">包含事件数据的对象。</param>
      <param name="managerType" vsli:raw="The type of the &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; that calls this method.">调用此方法的 <see cref="T:System.Windows.WeakEventManager" /> 的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the listeners in the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt; refer to an object that has been garbage collected; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果任何一个 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中侦听器引用的对象已被垃圾回收，则为 <see langword="true" />；否则，为<see langword="false" /> 。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.EndUse">
      <summary vsli:raw="Unlocks the locked state initiated by &lt;see cref=&quot;M:System.Windows.WeakEventManager.ListenerList.BeginUse&quot; /&gt;.">解除由 <see cref="M:System.Windows.WeakEventManager.ListenerList.BeginUse" /> 启动的锁定状态。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.PrepareForWriting(System.Windows.WeakEventManager.ListenerList@)">
      <summary vsli:raw="Checks to see whether the provided list is in use, and if so, sets the list reference parameter to a copy of that list rather than the original.">检查是否正在使用提供的列表，如果正在使用，则将列表引用参数设置为该列表的副本，而不是原稿列表的副本。</summary>
      <param name="list" vsli:raw="The list to check for use state and potentially copy.">要检查其使用状态和可能副本的列表。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the provided list was in use at the time of call and therefore the &lt;paramref name=&quot;list&quot; /&gt; parameter reference was reset to be a copy. &lt;see langword=&quot;false&quot; /&gt; if the provided list was not in use, in which case the &lt;paramref name=&quot;list&quot; /&gt; parameter reference remains unaltered.">如果调用时正在使用提供的列表，并因此 <paramref name="list" /> 参数引用被重置为副本，则为 <see langword="true" />。 如果未使用提供的列表，在此情况下 <paramref name="list" /> 参数引用保持不变，则为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Purge">
      <summary vsli:raw="Removes all entries from the list where the underlying reference target is a null reference.">从基础引用目标为 null 引用的列表中移除所有项。</summary>
      <returns vsli:raw="Returns &lt;see langword=&quot;true&quot; /&gt; if any entries were purged; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果清除了所有项，则返回 <see langword="true" />；否则返回 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.Remove(System.Windows.IWeakEventListener)">
      <summary vsli:raw="Removes the first occurrence of a listener item from the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">从 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中移除侦听器项的第一个匹配项。</summary>
      <param name="listener" vsli:raw="The item to remove.">要移除的项。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList.RemoveHandler(System.Delegate)">
      <summary vsli:raw="Removes an event handler from the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">从 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 目标中移除事件处理程序。</summary>
      <param name="handler" vsli:raw="The event handler to remove from the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">要从 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中移除的处理程序。</param>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Count">
      <summary vsli:raw="Gets the number of items contained in the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">获取 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中包含的项的数量。</summary>
      <returns vsli:raw="The number of items contained in the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;.">
        <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中包含的项的数量。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Empty">
      <summary vsli:raw="Gets a value that represents an empty list for purposes of comparisons.">获取表示用于对比的空列表的值。</summary>
      <returns vsli:raw="The empty list representation.">空列表表示。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.IsEmpty">
      <summary vsli:raw="Gets a value that declares whether this &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt; is empty.">获取声明此 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 是否为空的值。</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the list is empty; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果列表为空，则为 <see langword="true" />；否则为 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Windows.WeakEventManager.ListenerList.Item(System.Int32)">
      <summary vsli:raw="Gets or sets a specific listener item in the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt; .">获取或设置 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 中的特定侦听器项。</summary>
      <param name="index" vsli:raw="The zero-based index of the listener in the list.">列表中侦听器的从零开始的索引。</param>
      <returns vsli:raw="The item at that index, or a null reference if no item was at that index.">该索引处的项，如果该索引处没有项，则为 null 引用。</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager.ListenerList`1">
      <summary vsli:raw="Provides a type-safe collection list for storing listeners for a &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt;. This class defines a type parameter for the event data that is used.">提供用于存储 <see cref="T:System.Windows.WeakEventManager" /> 的侦听器的类型安全集合列表。 这种用于定义使用的事件数据的类型参数。</summary>
      <typeparam name="TEventArgs" vsli:raw="The type that holds the event data.">保存事件数据的类型。</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList`1&quot; /&gt; class.">初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 类的新实例。</summary>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList`1&quot; /&gt; class with the specified initial capacity.">使用指定的初始容量初始化 <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 类的新实例。</summary>
      <param name="capacity" vsli:raw="The number of items that should be allocated in the initial list.">应在初始列表中分配的项数。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.Clone">
      <summary vsli:raw="Creates a modifiable clone of this &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList&quot; /&gt;, making deep copies of the values.">创建该 <see cref="T:System.Windows.WeakEventManager.ListenerList" /> 的可修改复本，从而制作值的深层副本。</summary>
      <returns vsli:raw="A modifiable clone of the current object. The cloned object's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property will be &lt;see langword=&quot;false&quot; /&gt; even if the source's &lt;see cref=&quot;P:System.Windows.Freezable.IsFrozen&quot; /&gt; property was &lt;see langword=&quot;true&quot; /&gt;.">当前对象的可修改复本。 即使源的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性为 <see langword="true" />，所克隆的对象的 <see cref="P:System.Windows.Freezable.IsFrozen" /> 属性也将为 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager.ListenerList`1.DeliverEvent(System.Object,System.EventArgs,System.Type)">
      <summary vsli:raw="Delivers the event being managed to each listener in the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList`1&quot; /&gt;.">将正在托管的事件传送到 <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 中的每个侦听器。</summary>
      <param name="sender" vsli:raw="The object that raised the event.">引发事件的对象。</param>
      <param name="e" vsli:raw="An object that contains the event data.">包含事件数据的对象。</param>
      <param name="managerType" vsli:raw="The type of the &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; that calls this method.">调用此方法的 <see cref="T:System.Windows.WeakEventManager" /> 的类型。</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if any of the listeners in the &lt;see cref=&quot;T:System.Windows.WeakEventManager.ListenerList`1&quot; /&gt; refer to an object that has been garbage collected; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">如果任何一个 <see cref="T:System.Windows.WeakEventManager.ListenerList`1" /> 中侦听器引用的对象已被垃圾回收，则为 <see langword="true" />；否则，为<see langword="false" /> 。</returns>
    </member>
    <member name="T:System.Windows.WeakEventManager`2">
      <summary vsli:raw="Provides a type-safe &lt;see cref=&quot;T:System.Windows.WeakEventManager&quot; /&gt; that enables you to specify the event handler to use for the &quot;weak event listener&quot; pattern. This class defines a type parameter for the source of the event and a type parameter for the event data that is used.">提供类型安全的 <see cref="T:System.Windows.WeakEventManager" />，其可让您指定要用于弱事件监听程序模式的事件处理程序。 此类定义事件源的类型参数和使用的事件数据的类型参数。</summary>
      <typeparam name="TEventSource" vsli:raw="The type that raises the event.">引发事件的类型。</typeparam>
      <typeparam name="TEventArgs" vsli:raw="The type that holds the event data.">保存事件数据的类型。</typeparam>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.AddHandler(`0,System.String,System.EventHandler{`1})">
      <summary vsli:raw="Adds the specified event handler to the specified event.">添加指定的事件处理程序到指定的事件。</summary>
      <param name="source" vsli:raw="The source object that raises the specified event.">引发指定事件的源对象。</param>
      <param name="eventName" vsli:raw="The name of the event to subscribe to.">要订阅的事件的名称。</param>
      <param name="handler" vsli:raw="The delegate that handles the event.">处理事件的委托。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.NewListenerList">
      <summary vsli:raw="Returns a new object to contain listeners to an event.">返回包含事件侦听器的新对象。</summary>
      <returns vsli:raw="A new object to contain listeners to an event.">包含事件侦听器的新对象。</returns>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.RemoveHandler(`0,System.String,System.EventHandler{`1})">
      <summary vsli:raw="Removes the specified event handler from the specified event.">从指定事件中移除指定的事件处理程序。</summary>
      <param name="source" vsli:raw="The source object that raises the specified event.">引发指定事件的源对象。</param>
      <param name="eventName" vsli:raw="The name of the event to remove the handler from.">从中移除处理程序的事件的名称。</param>
      <param name="handler" vsli:raw="The delegate to remove.">移除的委托</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StartListening(System.Object)">
      <summary vsli:raw="Starts listening for the event on the specified object.">启动对指定对象侦听事件。</summary>
      <param name="source" vsli:raw="The object to that raises the event.">引发事件到其中的对象。</param>
    </member>
    <member name="M:System.Windows.WeakEventManager`2.StopListening(System.Object)">
      <summary vsli:raw="Stops listening for the event on the specified object.">停止对指定对象侦听事件。</summary>
      <param name="source" vsli:raw="The object to that raises the event.">引发事件到其中的对象。</param>
    </member>
  </members>
</doc>
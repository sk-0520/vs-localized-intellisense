<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Security.Cryptography.Algorithms</name>
  </assembly>
  <members>
    <member name="T:System.Security.Cryptography.Aes">
      <summary>代表抽象基底類別，進階加密標準 (AES) 的所有實作都必須從它繼承。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.Aes" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create">
      <summary>建立用來執行對稱演算法的密碼編譯物件。</summary>
      <returns>用來執行對稱演算法的密碼編譯物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.Aes.Create(System.String)">
      <summary>建立密碼編譯物件，指定執行對稱演算法所使用的 AES 實作。</summary>
      <param name="algorithmName">要使用的特定 AES 實作名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithmName" /> 參數為 <see langword="null" />。</exception>
      <returns>用來執行對稱演算法的密碼編譯物件。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesCcm">
      <summary>表示要搭配 CBC-MAC (CCM) 模式作業計數器使用的進階加密標準 (AES) 金鑰。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.#ctor(System.Byte[])">
      <summary>使用提供的金鑰，初始化 <see cref="T:System.Security.Cryptography.AesCcm" /> 類別的新執行個體。</summary>
      <param name="key">要用於這個執行個體的祕密金鑰。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> 參數長度是 16、24 或 32 個位元組 (128、192 或 256 位元) 以外的長度。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>使用提供的金鑰，初始化 <see cref="T:System.Security.Cryptography.AesCcm" /> 類別的新執行個體。</summary>
      <param name="key">要用於這個執行個體的祕密金鑰。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> 參數長度是 16、24 或 32 個位元組 (128、192 或 256 位元) 以外的長度。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>如果可對驗證標記進行驗證，則將加密文字解密至提供的目的地緩衝區。</summary>
      <param name="nonce">與這個訊息建立關聯的 nonce，必須符合加密期間所提供的值。</param>
      <param name="ciphertext">要解密的加密內容。</param>
      <param name="tag">在加密期間為了這個訊息所產生的驗證標記。</param>
      <param name="plaintext">要接收解密內容的位元組陣列。</param>
      <param name="associatedData">與這個訊息建立關聯的額外資料，必須符合加密期間所提供的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 參數與 <paramref name="ciphertext" /> 的長度不同。

-或-

<see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" /> 不允許 <paramref name="nonce" /> 參數長度。

-或-

<see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" /> 不允許 <paramref name="tag" /> 參數長度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />、<paramref name="ciphertext" />、<paramref name="tag" /> 或 <paramref name="plaintext" /> 參數是 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法驗證標記值，或解密作業失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>如果可對驗證標記進行驗證，則將加密文字解密至提供的目的地緩衝區。</summary>
      <param name="nonce">與這個訊息建立關聯的 nonce，必須符合加密期間所提供的值。</param>
      <param name="ciphertext">要解密的加密內容。</param>
      <param name="tag">在加密期間為了這個訊息所產生的驗證標記。</param>
      <param name="plaintext">要接收解密內容的位元組範圍。</param>
      <param name="associatedData">與這個訊息建立關聯的額外資料，必須符合加密期間所提供的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 參數與 <paramref name="ciphertext" /> 的長度不同。

-或-

<see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" /> 不允許 <paramref name="nonce" /> 參數長度。

-或-

<see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" /> 不允許 <paramref name="tag" /> 參數長度。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法驗證標記值，或解密作業失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Dispose">
      <summary>將 <see cref="T:System.Security.Cryptography.AesCcm" /> 類別的目前執行個體所使用的資源釋出。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>將純文字加密至加密文字目的地緩衝區，並在另一個緩衝區中產生驗證標記。</summary>
      <param name="nonce">與這個訊息建立關聯的 nonce，對於具有相同金鑰的每項作業，這應該是唯一的值。</param>
      <param name="plaintext">要加密內容。</param>
      <param name="ciphertext">要接收加密內容的位元組陣列。</param>
      <param name="tag">要接收所產生驗證標記的位元組陣列。</param>
      <param name="associatedData">與這個訊息建立關聯的額外資料，也必須在解密期間提供。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 參數與 <paramref name="ciphertext" /> 的長度不同。

-或-

<see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" /> 不允許 <paramref name="nonce" /> 參數長度。

-或-

<see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" /> 不允許 <paramref name="tag" /> 參數長度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />、<paramref name="ciphertext" />、<paramref name="tag" /> 或 <paramref name="plaintext" /> 參數是 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">加密作業失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesCcm.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>將純文字加密至加密文字目的地緩衝區，並在另一個緩衝區中產生驗證標記。</summary>
      <param name="nonce">與這個訊息建立關聯的 nonce，對於具有相同金鑰的每項作業，這應該是唯一的值。</param>
      <param name="plaintext">要加密內容。</param>
      <param name="ciphertext">要接收加密內容的位元組範圍。</param>
      <param name="tag">要接收所產生驗證標記的位元組範圍。</param>
      <param name="associatedData">與這個訊息建立關聯的額外資料，也必須在解密期間提供。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 參數與 <paramref name="ciphertext" /> 的長度不同。

-或-

<see cref="P:System.Security.Cryptography.AesCcm.NonceByteSizes" /> 不允許 <paramref name="nonce" /> 參數長度。

-或-

<see cref="P:System.Security.Cryptography.AesCcm.TagByteSizes" /> 不允許 <paramref name="tag" /> 參數長度。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">加密作業失敗。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesCcm.NonceByteSizes">
      <summary>取得這個執行個體支援的 nonce 大小 (以位元組為單位)。</summary>
      <returns>此實例支援的 nonce 大小：7、8、9、10、11、12或13個位元組 (56、64、72、80、88、96或 104 bits) 。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesCcm.TagByteSizes">
      <summary>取得這個執行個體支援的標記大小 (以位元組為單位)。</summary>
      <returns>此實例支援的標記大小：4、6、8、10、12、14或16位元組 (32、48、64、80、96、112或 128 bits) 。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesGcm">
      <summary>表示要搭配 Galois/計數器模式 (GCM) 模式作業使用的進階加密標準 (AES) 金鑰。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.#ctor(System.Byte[])">
      <summary>使用提供的金鑰，初始化 <see cref="T:System.Security.Cryptography.AesGcm" /> 類別的新執行個體。</summary>
      <param name="key">要用於這個執行個體的祕密金鑰。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> 參數長度是 16、24 或 32 個位元組 (128、192 或 256 位元) 以外的長度。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.#ctor(System.ReadOnlySpan{System.Byte})">
      <summary>使用提供的金鑰，初始化 <see cref="T:System.Security.Cryptography.AesGcm" /> 類別的新執行個體。</summary>
      <param name="key">要用於這個執行個體的祕密金鑰。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="key" /> 參數長度是 16、24 或 32 個位元組 (128、192 或 256 位元) 以外的長度。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>如果可對驗證標記進行驗證，則將加密文字解密至提供的目的地緩衝區。</summary>
      <param name="nonce">與這個訊息建立關聯的 nonce，必須符合加密期間所提供的值。</param>
      <param name="ciphertext">要解密的加密內容。</param>
      <param name="tag">在加密期間為了這個訊息所產生的驗證標記。</param>
      <param name="plaintext">要接收解密內容的位元組陣列。</param>
      <param name="associatedData">與這個訊息建立關聯的額外資料，必須符合加密期間所提供的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 參數與 <paramref name="ciphertext" /> 的長度不同。

-或-

<see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" /> 不允許 <paramref name="nonce" /> 參數長度。

-或-

<see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" /> 不允許 <paramref name="tag" /> 參數長度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />、<paramref name="ciphertext" />、<paramref name="tag" /> 或 <paramref name="plaintext" /> 參數是 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法驗證標記值，或解密作業失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Decrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>如果可對驗證標記進行驗證，則將加密文字解密至提供的目的地緩衝區。</summary>
      <param name="nonce">與這個訊息建立關聯的 nonce，必須符合加密期間所提供的值。</param>
      <param name="ciphertext">要解密的加密內容。</param>
      <param name="tag">在加密期間為了這個訊息所產生的驗證標記。</param>
      <param name="plaintext">要接收解密內容的位元組範圍。</param>
      <param name="associatedData">與這個訊息建立關聯的額外資料，必須符合加密期間所提供的值。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 參數與 <paramref name="ciphertext" /> 的長度不同。

-或-

<see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" /> 不允許 <paramref name="nonce" /> 參數長度。

-或-

<see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" /> 不允許 <paramref name="tag" /> 參數長度。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法驗證標記值，或解密作業失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Dispose">
      <summary>將 <see cref="T:System.Security.Cryptography.AesGcm" /> 類別的目前執行個體所使用的資源釋出。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Byte[],System.Byte[])">
      <summary>將純文字加密至加密文字目的地緩衝區，並在另一個緩衝區中產生驗證標記。</summary>
      <param name="nonce">與這個訊息建立關聯的 nonce，對於具有相同金鑰的每項作業，這應該是唯一的值。</param>
      <param name="plaintext">要加密內容。</param>
      <param name="ciphertext">要接收加密內容的位元組陣列。</param>
      <param name="tag">要接收所產生驗證標記的位元組陣列。</param>
      <param name="associatedData">與這個訊息建立關聯的額外資料，也必須在解密期間提供。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 參數與 <paramref name="ciphertext" /> 的長度不同。

-或-

<see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" /> 不允許 <paramref name="nonce" /> 參數長度。

-或-

<see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" /> 不允許 <paramref name="tag" /> 參數長度。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="nonce" />、<paramref name="ciphertext" />、<paramref name="tag" /> 或 <paramref name="plaintext" /> 參數是 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">加密作業失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesGcm.Encrypt(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>將純文字加密至加密文字目的地緩衝區，並在另一個緩衝區中產生驗證標記。</summary>
      <param name="nonce">與這個訊息建立關聯的 nonce，對於具有相同金鑰的每項作業，這應該是唯一的值。</param>
      <param name="plaintext">要加密內容。</param>
      <param name="ciphertext">要接收加密內容的位元組陣列。</param>
      <param name="tag">要接收所產生驗證標記的位元組陣列。</param>
      <param name="associatedData">與這個訊息建立關聯的額外資料，也必須在解密期間提供。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="plaintext" /> 參數與 <paramref name="ciphertext" /> 的長度不同。

-或-

<see cref="P:System.Security.Cryptography.AesGcm.NonceByteSizes" /> 不允許 <paramref name="nonce" /> 參數長度。

-或-

<see cref="P:System.Security.Cryptography.AesGcm.TagByteSizes" /> 不允許 <paramref name="tag" /> 參數長度。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">加密作業失敗。</exception>
    </member>
    <member name="P:System.Security.Cryptography.AesGcm.NonceByteSizes">
      <summary>取得這個執行個體支援的 nonce 大小 (以位元組為單位)。</summary>
      <returns>此實例支援的 nonce 大小：12個位元組 (96 位) 。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesGcm.TagByteSizes">
      <summary>取得這個執行個體支援的標記大小 (以位元組為單位)。</summary>
      <returns>此實例支援的標記大小：12、13、14、15或16位元組 (96、104、112、120或128位) 。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AesManaged">
      <summary>提供先進加密標準 (AES) 對稱演算法的 Managed 實作。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AesManaged" /> 類別的新執行個體。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">已啟用 FIPS 的 Windows 安全性原則設定。</exception>
      <exception cref="T:System.InvalidOperationException">此實作不屬於 Windows Platform FIPS 已驗證密碼編譯演算法的一部分。</exception>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor">
      <summary>建立對稱的解密子物件，使用目前的金鑰和初始化向量 (IV)。</summary>
      <returns>對稱解密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>建立對稱的解密子物件，使用指定的金鑰和初始化向量 (IV)。</summary>
      <param name="rgbKey">對稱演算法所用的祕密金鑰。</param>
      <param name="rgbIV">對稱演算法所用的初始化向量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 無效。</exception>
      <returns>對稱解密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor">
      <summary>建立對稱的加密子物件，使用目前的金鑰和初始化向量 (IV)。</summary>
      <returns>對稱加密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>建立對稱的加密子物件，使用指定的金鑰和初始化向量 (IV)。</summary>
      <param name="rgbKey">對稱演算法所用的祕密金鑰。</param>
      <param name="rgbIV">對稱演算法所用的初始化向量。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 或 <paramref name="iv" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="key" /> 無效。</exception>
      <returns>對稱加密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateIV">
      <summary>產生要用於對稱演算法的隨機初始化向量 (IV)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AesManaged.GenerateKey">
      <summary>產生用於對稱演算法的隨機金鑰。</summary>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.BlockSize">
      <summary>取得或設定密碼編譯作業的區塊大小，以位元為單位。</summary>
      <returns>密碼編譯作業的區塊大小，以位為單位。 預設值為128位。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.FeedbackSize">
      <summary>取得或設定用來做為回饋的位元數。</summary>
      <returns>回饋大小 (以位元為單位)。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.IV">
      <summary>取得或設定對稱演算法的初始化向量 (IV)。</summary>
      <returns>對稱演算法所用的初始化向量</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Key">
      <summary>取得或設定用於對稱演算法的秘密金鑰。</summary>
      <returns>對稱演算法的金鑰。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.KeySize">
      <summary>取得或設定用於對稱演算法之秘密金鑰的大小，以位元為單位。</summary>
      <returns>對稱演算法使用之金鑰的大小，以位元為單位。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalBlockSizes">
      <summary>取得對稱演算法所支援的區塊大小，以位元為單位。</summary>
      <returns>對稱演算法所支援的區塊大小，以位為單位。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.LegalKeySizes">
      <summary>取得對稱演算法所支援的金鑰大小，以位元為單位。</summary>
      <returns>對稱演算法所支援的金鑰大小（以位為單位）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Mode">
      <summary>取得或設定對稱演算法的作業模式。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.AesManaged.Mode" /> 設定為 <see cref="F:System.Security.Cryptography.CipherMode.CFB" /> 或 <see cref="F:System.Security.Cryptography.CipherMode.OFB" />。</exception>
      <returns>其中一個列舉值，指定要用於加密的區塊編碼器模式。 預設為 <see cref="F:System.Security.Cryptography.CipherMode.CBC" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.AesManaged.Padding">
      <summary>取得或設定對稱演算法中使用的填補模式。</summary>
      <returns>其中一個列舉值，指定要套用的填補型別。 預設為 <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter">
      <summary>代表從中衍生所有非對稱金鑰交換變形項的基底類型。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>在衍生類別中覆寫時，從加密的金鑰交換資料中擷取秘密資訊。</summary>
      <param name="rgb">隱藏秘密資訊的金鑰交換資料。</param>
      <returns>從金鑰交換資料中衍生的秘密資訊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>在衍生類別中覆寫時，設定要用來解密機密資訊的私密金鑰。</summary>
      <param name="key">包含私密金鑰之 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 實作的執行個體。</param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeDeformatter.Parameters">
      <summary>在衍生類別中覆寫時，取得或設定非對稱金鑰交換的參數。</summary>
      <returns>包含非對稱金鑰交換作業參數的 XML 格式字串。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter">
      <summary>表示所有非對稱金鑰交換格式器衍生來源的基底類型。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsymmetricKeyExchangeFormatter" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>在衍生類別中覆寫時，從指定的輸入資料建立加密的金鑰交換資料。</summary>
      <param name="data">要以金鑰交換傳遞的機密資訊。</param>
      <returns>要傳送給預定收件者的加密金鑰交換資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>在衍生類別中覆寫時，從指定的輸入資料建立加密的金鑰交換資料。</summary>
      <param name="data">要以金鑰交換傳遞的機密資訊。</param>
      <param name="symAlgType">目前版本中未使用這個參數。</param>
      <returns>要傳送給預定收件者的加密金鑰交換資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>在衍生類別中覆寫時，設定要用來加密機密資訊的公開金鑰。</summary>
      <param name="key">包含公開金鑰之 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 實作的執行個體。</param>
    </member>
    <member name="P:System.Security.Cryptography.AsymmetricKeyExchangeFormatter.Parameters">
      <summary>在衍生類別中覆寫時，取得非對稱金鑰交換的參數。</summary>
      <returns>包含非對稱金鑰交換作業參數的 XML 格式字串。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureDeformatter">
      <summary>表示從中衍生所有非對稱簽章變形項實作的抽象基底類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>在衍生類別中覆寫時，設定要用於驗證簽章的雜湊演算法。</summary>
      <param name="strName">要用來驗證簽章的雜湊演算法。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>在衍生類別中覆寫時，設定要用來驗證簽章的公開金鑰。</summary>
      <param name="key">包含公開金鑰之 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 實作的執行個體。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>在衍生類別中覆寫時，驗證指定資料的簽章。</summary>
      <param name="rgbHash">使用 <paramref name="rgbSignature" /> 簽署的資料。</param>
      <param name="rgbSignature">要驗證 <paramref name="rgbHash" /> 的簽章。</param>
      <returns>如果 <paramref name="rgbSignature" /> 和 <paramref name="rgbHash" /> 上使用指定雜湊演算法和金鑰計算的簽章相符，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureDeformatter.VerifySignature(System.Security.Cryptography.HashAlgorithm,System.Byte[])">
      <summary>驗證指定雜湊值的簽章。</summary>
      <param name="hash">要用來驗證簽章的雜湊演算法。</param>
      <param name="rgbSignature">要驗證的簽章。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 參數為 <see langword="null" />。</exception>
      <returns>如果簽章對於此雜湊有效，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.AsymmetricSignatureFormatter">
      <summary>代表從中衍生所有非對稱簽章格式子實作的基底類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Byte[])">
      <summary>在衍生類別中覆寫時，會建立指定資料的簽章。</summary>
      <param name="rgbHash">要簽署的資料。</param>
      <returns>
        <paramref name="rgbHash" /> 參數的數位簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.CreateSignature(System.Security.Cryptography.HashAlgorithm)">
      <summary>建立指定雜湊值的簽章。</summary>
      <param name="hash">要用來建立簽章的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 參數為 <see langword="null" />。</exception>
      <returns>指定雜湊值的簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>在衍生類別中覆寫時，設定要用於建立簽章的雜湊演算法。</summary>
      <param name="strName">要用於建立簽章之雜湊演算法的名稱。</param>
    </member>
    <member name="M:System.Security.Cryptography.AsymmetricSignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>在衍生類別中覆寫時，設定要用來建立簽章的非對稱演算法。</summary>
      <param name="key">用來建立簽章之 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 實作的執行個體。</param>
    </member>
    <member name="T:System.Security.Cryptography.CryptoConfig">
      <summary>存取加密組態資訊。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.CryptoConfig" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddAlgorithm(System.Type,System.String[])">
      <summary>在演算法對應中加入一組名稱，供目前的應用程式定義域使用。</summary>
      <param name="algorithm">要對應的演算法。</param>
      <param name="names">要對應至演算法的名稱陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 或 <paramref name="names" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="algorithm" /> 無法從組件外部存取。  
  
-或- 
<paramref name="names" /> 參數中的一個項目是空的或 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.AddOID(System.String,System.String[])">
      <summary>在物件識別項 (OID) 對應中加入一組名稱，供目前的應用程式定義域使用。</summary>
      <param name="oid">要對應的物件識別項 (OID)。</param>
      <param name="names">要對應至物件識別項的名稱陣列。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oid" /> 或 <paramref name="names" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="names" /> 參數中的一個項目是空的或 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String)">
      <summary>指定密碼編譯物件的新執行個體。</summary>
      <param name="name">要建立執行個體的密碼編譯物件的簡單名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <paramref name="name" /> 參數描述的演算法，在聯邦資訊處理標準 (FIPS) 模式啟用的情況下使用，但是和 FIPS 並不相容。</exception>
      <returns>指定密碼編譯物件的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.CreateFromName(System.String,System.Object[])">
      <summary>建立具有指定引數的指定密碼編譯物件的新執行個體。</summary>
      <param name="name">要建立執行個體的密碼編譯物件的簡單名稱。</param>
      <param name="args">用來建立指定的密碼編譯物件的引數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <paramref name="name" /> 參數描述的演算法，在聯邦資訊處理標準 (FIPS) 模式啟用的情況下使用，但是和 FIPS 並不相容。</exception>
      <returns>指定密碼編譯物件的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.EncodeOID(System.String)">
      <summary>編碼指定的物件識別項 (OID)。</summary>
      <param name="str">要編碼的 OID。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="str" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">編碼 OID 時發生錯誤。</exception>
      <returns>位元組陣列，包含已編碼的 OID。</returns>
    </member>
    <member name="M:System.Security.Cryptography.CryptoConfig.MapNameToOID(System.String)">
      <summary>取得對應至指定簡單名稱的演算法之物件識別項 (OID)。</summary>
      <param name="name">要為其取得 OID 的演算法簡單名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="name" /> 參數為 <see langword="null" />。</exception>
      <returns>指定演算法的 OID。</returns>
    </member>
    <member name="P:System.Security.Cryptography.CryptoConfig.AllowOnlyFipsAlgorithms">
      <summary>表示執行階段是否應該強制執行原則，以限制只建立已通過聯邦資訊處理標準 (FIPS) 的演算法。</summary>
      <returns>如果要強制執行原則的話為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.DeriveBytes">
      <summary>表示衍生指定長度位元組序列所有類別所繼承的來源抽象基底類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.DeriveBytes" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose">
      <summary>在衍生類別中覆寫時，將目前 <see cref="T:System.Security.Cryptography.DeriveBytes" /> 類別的執行個體所使用的所有資源全部釋出。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Dispose(System.Boolean)">
      <summary>在衍生類別中覆寫時，釋出 <see cref="T:System.Security.Cryptography.DeriveBytes" /> 類別使用的 Unmanaged 資源，並選擇性釋出 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.GetBytes(System.Int32)">
      <summary>在衍生類別中覆寫時，傳回虛擬隨機金鑰位元組。</summary>
      <param name="cb">要產生的似隨機金鑰位元組數量。</param>
      <returns>位元組陣列，以虛擬隨機金鑰位元組填入。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DeriveBytes.Reset">
      <summary>在衍生類別中覆寫時，重設作業的狀態。</summary>
    </member>
    <member name="T:System.Security.Cryptography.DES">
      <summary>表示資料加密標準 (DES) 演算法的基底類別，所有 <see cref="T:System.Security.Cryptography.DES" /> 實作都必須衍生自此類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.DES" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create">
      <summary>建立密碼編譯物件的執行個體，以執行資料加密標準 (<see cref="T:System.Security.Cryptography.DES" />) 演算法。</summary>
      <returns>密碼編譯物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.Create(System.String)">
      <summary>建立密碼編譯物件的執行個體，以執行資料加密標準 (<see cref="T:System.Security.Cryptography.DES" />) 演算法的指定實作。</summary>
      <param name="algName">要使用之 <see cref="T:System.Security.Cryptography.DES" /> 的特定實作的名稱。</param>
      <returns>密碼編譯物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])">
      <summary>判斷指定的金鑰是否為半弱式。</summary>
      <param name="rgbKey">測試秘密金鑰是否為半弱式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 參數的大小無效。</exception>
      <returns>如果是半弱式金鑰，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])">
      <summary>判斷指定的金鑰是否為弱式。</summary>
      <param name="rgbKey">測試祕密金鑰是否為弱式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 參數的大小無效。</exception>
      <returns>如果是弱式金鑰，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.DES.Key">
      <summary>取得或設定資料加密標準 (<see cref="T:System.Security.Cryptography.DES" />) 演算法的祕密金鑰。</summary>
      <exception cref="T:System.ArgumentNullException">嘗試將金鑰設定為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">已嘗試設定長度不等於 <see cref="F:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue" /> 的金鑰。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">已嘗試設定弱式金鑰 (請參閱 <see cref="M:System.Security.Cryptography.DES.IsWeakKey(System.Byte[])" />) 或半弱式金鑰 (請參閱 <see cref="M:System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])" />)。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.DES" /> 演算法的祕密金鑰。</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSA">
      <summary>表示抽象基底類別，數位簽章演算法 (<see cref="T:System.Security.Cryptography.DSA" />) 的所有實作都必須從它繼承。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.DSA" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create">
      <summary>建立用來執行非對稱演算法之預設密碼編譯物件。</summary>
      <returns>密碼編譯物件，用來執行非對稱演算法。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Int32)">
      <summary>以指定的金鑰大小建立新的暫時 DSA 金鑰。</summary>
      <param name="keySizeInBits">金鑰大小 (位元)。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes" /> 不允許 <paramref name="keySizeInBits" />。</exception>
      <returns>具有指定金鑰大小的新暫時 DSA 金鑰。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.Security.Cryptography.DSAParameters)">
      <summary>以指定的 DSA 金鑰參數建立新的暫時 DSA 金鑰。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.DSA" /> 演算法的參數。</param>
      <returns>新的暫時 DSA 金鑰。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.Create(System.String)">
      <summary>建立用來執行非對稱演算法之指定密碼編譯物件。</summary>
      <param name="algName">要使用之 <see cref="T:System.Security.Cryptography.DSA" /> 的特定實作的名稱。</param>
      <returns>密碼編譯物件，用來執行非對稱演算法。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[])">
      <summary>在衍生類別中覆寫時，會建立指定雜湊值的 <see cref="T:System.Security.Cryptography.DSA" /> 簽章。</summary>
      <param name="rgbHash">要簽署的雜湊值。</param>
      <returns>指定雜湊值的數位簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignature(System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>以指定的格式建立指定雜湊值的 DSA 簽章。</summary>
      <param name="rgbHash">要簽署的雜湊值。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">簽署作業發生錯誤。</exception>
      <returns>指定資料的 DSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.CreateSignatureCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>以指定的格式建立指定雜湊值的 DSA 簽章。</summary>
      <param name="hash">要簽署的雜湊值。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">簽署作業發生錯誤。</exception>
      <returns>指定資料的 DSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ExportParameters(System.Boolean)">
      <summary>在衍生類別中覆寫時，會匯出 <see cref="T:System.Security.Cryptography.DSAParameters" />。</summary>
      <param name="includePrivateParameters">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>
        <see cref="T:System.Security.Cryptography.DSA" /> 的參數。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.FromXmlString(System.String)">
      <summary>從 XML 字串重新建構 <see cref="T:System.Security.Cryptography.DSA" /> 物件。</summary>
      <param name="xmlString">要用來重新建構 <see cref="T:System.Security.Cryptography.DSA" /> 物件的 XML 字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlString" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="xmlString" /> 參數的格式無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.GetMaxSignatureSize(System.Security.Cryptography.DSASignatureFormat)">
      <summary>取得此索引鍵以指定格式所產生簽章的最大大小 (以位元組為單位)。</summary>
      <param name="signatureFormat">簽章的編碼格式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <returns>此索引鍵以指定格式所產生簽章的最大大小 (以位元組為單位)。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>在衍生類別中覆寫時，會使用指定的雜湊演算法，來為位元組陣列中的指定部分計算出雜湊值。</summary>
      <param name="data">要雜湊的資料。</param>
      <param name="offset">在 <paramref name="data" /> 中要雜湊的第一個位元組索引。</param>
      <param name="count">要雜湊的位元組數。</param>
      <param name="hashAlgorithm">要用來雜湊資料的演算法。</param>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <returns>已雜湊的資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>在衍生類別中覆寫時，會使用指定的雜湊演算法，來為指定的二進位資料流計算出雜湊值。</summary>
      <param name="data">要雜湊的二進位資料流。</param>
      <param name="hashAlgorithm">要用來雜湊資料的演算法。</param>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <returns>已雜湊的資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用位元組型密碼解密之後，從 PKCS#8 EncryptedPrivateKeyInfo 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="passwordBytes">解密金鑰內容時要用作密碼的位元組。</param>
      <param name="source">以 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="source" /> 的內容指出要套用的金鑰衍生函數 (Key Derivation Function) (KDF) 是舊版 PKCS#12 KDF，這需要 <see cref="T:System.Char" /> 型密碼。

-或-

<paramref name="source" /> 的內容不表示 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用 Char 型密碼解密之後，從 PKCS#8 EncryptedPrivateKeyInfo 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="password">要用於解密金鑰產製原料的密碼。</param>
      <param name="source">以 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="source" /> 的內容不表示 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>匯入 RFC 7468 PEM 編碼的加密私密金鑰，並取代這個物件的金鑰。</summary>
      <param name="input">要匯入的加密金鑰 PEM 文字。</param>
      <param name="passwordBytes">解密金鑰產製原料時要用作密碼的位元組。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含具有辨識標籤的 PEM 編碼金鑰。

-或-

            <paramref name="input" /> 包含多個具有辨識標籤的 PEM 編碼金鑰。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，不代表 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，代表非支援格式的金鑰。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>匯入 RFC 7468 PEM 編碼的加密私密金鑰，並取代這個物件的金鑰。</summary>
      <param name="input">要匯入的加密金鑰 PEM 文字。</param>
      <param name="password">要用於解密金鑰產製原料的密碼。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含具有辨識標籤的 PEM 編碼金鑰。

-或-

            <paramref name="input" /> 包含多個具有辨識標籤的 PEM 編碼金鑰。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，不代表 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，代表非支援格式的金鑰。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>匯入 RFC 7468 PEM 編碼的金鑰，並取代這個物件的金鑰。</summary>
      <param name="input">要匯入的金鑰 PEM 文字。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含具有辨識標籤的 PEM 編碼金鑰。

-或-

            <paramref name="input" /> 包含多個具有辨識標籤的 PEM 編碼金鑰。

-或-

            <paramref name="input" /> 包含 PEM 編碼的加密金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportParameters(System.Security.Cryptography.DSAParameters)">
      <summary>在衍生類別中覆寫時，會匯入指定的 <see cref="T:System.Security.Cryptography.DSAParameters" />。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.DSA" /> 的參數。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="parameters" /> 遺漏必要欄位。

-或-

<paramref name="parameters" /> 具有有效金鑰長度不一致的欄位。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> 不代表有效的 DSA 金鑰參數集。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密後，從 PKCS#8 PrivateKeyInfo 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="source">以 ASN.1-BER 編碼的 PKCS#8 PrivateKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的內容不表示 ASN.1-BER 編碼的 PKCS#8 PrivateKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密後，從 X.509 SubjectPublicKeyInfo 結構匯入公開金鑰，以取代這個物件的金鑰。</summary>
      <param name="source">以 ASN.1-DER 編碼的 X.509 SubjectPublicKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的內容不表示 ASN.1-DER 編碼的 X.509 SubjectPublicKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的雜湊演算法，並簽署產生的雜湊值，來為指定的部分位元組陣列計算出雜湊值。</summary>
      <param name="data">用來計算雜湊值的輸入資料。</param>
      <param name="offset">這個陣列中的位移，在此處開始使用資料。</param>
      <param name="count">陣列中要用作資料的位元組數目。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小於零。  
  
-或- 
 <paramref name="count" /> 小於零。  
  
-或- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 產生的索引超出 <paramref name="data" /> 上限。</exception>
      <returns>指定資料的 DSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>計算指定資料的雜湊值，並使用指定的簽章格式進行簽署。</summary>
      <param name="data">要簽署的資料。</param>
      <param name="offset">開始雜湊的 <paramref name="data" /> 的位移。</param>
      <param name="count">要從 <paramref name="data" /> 讀取的位元組數。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。
 
-或- <paramref name="offset" /> 小於零。
 
-或- <paramref name="count" /> 小於零。
 
-或- <paramref name="offset" /> + <paramref name="count" /> -1 會產生超出上限 <paramref name="data" /> 的索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空白 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊或簽署作業發生錯誤。</exception>
      <returns>指定資料的 DSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的雜湊演算法，並簽署產生的雜湊值，來為指定的位元組陣列計算出雜湊值。</summary>
      <param name="data">用來計算雜湊值的輸入資料。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>指定資料的 DSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>計算指定資料的雜湊值，並使用指定的簽章格式進行簽署。</summary>
      <param name="data">要簽署的資料。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空白 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊或簽署作業發生錯誤。</exception>
      <returns>指定資料的 DSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的雜湊演算法，並簽署產生的雜湊值，來為指定的資料流計算出雜湊值。</summary>
      <param name="data">用來計算雜湊值的輸入資料流。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>指定資料的 DSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>計算指定資料的雜湊值，並使用指定的簽章格式進行簽署。</summary>
      <param name="data">要簽署的資料。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空白 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊或簽署作業發生錯誤。</exception>
      <returns>指定資料的 DSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignDataCore(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>計算指定資料的雜湊值，並使用指定的簽章格式進行簽署。</summary>
      <param name="data">要簽署的資料。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊或簽署作業發生錯誤。</exception>
      <returns>指定資料的 DSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.SignDataCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>計算指定資料的雜湊值，並使用指定的簽章格式進行簽署。</summary>
      <param name="data">要簽署的資料。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊或簽署作業發生錯誤。</exception>
      <returns>指定資料的 DSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.ToXmlString(System.Boolean)">
      <summary>建立並傳回表示目前 <see cref="T:System.Security.Cryptography.DSA" /> 物件的 XML 字串。</summary>
      <param name="includePrivateParameters">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <returns>目前 <see cref="T:System.Security.Cryptography.DSA" /> 物件的 XML 字串編碼方式。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>嘗試在所提供緩衝區中為指定的雜湊建立 DSA 簽章。</summary>
      <param name="hash">要簽署的雜湊。</param>
      <param name="destination">要接收簽章的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">這個執行個體只表示公開金鑰。

-或-

實作類型只支援舊版 DSA (FIPS 186-2)，且 <paramref name="hash" /> 值不是 20 個位元組。

-或-

建立簽章失敗。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收結果，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignature(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>嘗試以指定的格式，建立指定雜湊值的 DSA 簽章，並放至提供的緩衝區。</summary>
      <param name="hash">要簽署的雜湊值。</param>
      <param name="destination">要接收簽章的緩衝區。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">簽署作業發生錯誤。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryCreateSignatureCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>嘗試以指定的格式，建立指定雜湊值的 DSA 簽章，並放至提供的緩衝區。</summary>
      <param name="hash">要簽署的雜湊值。</param>
      <param name="destination">要接收簽章的緩衝區。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">簽署作業發生錯誤。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>使用位元組型密碼，嘗試以 PKCS#8 EncryptedPrivateKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="passwordBytes">加密金鑰內容時要用作密碼的位元組。</param>
      <param name="pbeParameters">加密金鑰產製原料時要使用的密碼型加密 (PBE) 參數。</param>
      <param name="destination">要接收 PKCS#8 EncryptedPrivateKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。

-或-

<paramref name="pbeParameters" /> 指出應該使用 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />，這需要 <see cref="T:System.Char" /> 型密碼。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>使用 Char 型密碼，嘗試以 PKCS#8 EncryptedPrivateKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="password">加密金鑰產製原料時要使用的密碼。</param>
      <param name="pbeParameters">加密金鑰產製原料時要使用的密碼型加密 (PBE) 參數。</param>
      <param name="destination">要接收 PKCS#8 EncryptedPrivateKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>嘗試以 PKCS#8 PrivateKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="destination">要接收 PKCS#8 PrivateKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>嘗試以 X.509 SubjectPublicKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="destination">要接收 X.509 SubjectPublicKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入至 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>嘗試在所提供緩衝區中計算所提供資料的雜湊值。</summary>
      <param name="data">要雜湊的資料。</param>
      <param name="destination">要接收雜湊值的位元組範圍。</param>
      <param name="hashAlgorithm">要使用的雜湊演算法的名稱。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。</param>
      <returns>若 <paramref name="destination" /> 夠大可接收結果，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>嘗試在所提供緩衝區中為指定的資料建立 DSA 簽章。</summary>
      <param name="data">要雜湊處理和簽章的資料。</param>
      <param name="destination">要接收簽章的位元組範圍。</param>
      <param name="hashAlgorithm">要使用的雜湊演算法的名稱。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。</param>
      <returns>若 <paramref name="destination" /> 夠大可接收結果，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>嘗試以指定的格式，建立指定資料的 DSA 簽章，並放至提供的緩衝區。</summary>
      <param name="data">要雜湊處理和簽章的資料。</param>
      <param name="destination">要接收簽章的緩衝區。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空白 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">簽署作業發生錯誤。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.TrySignDataCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>嘗試以指定的格式，建立指定資料的 DSA 簽章，並放至提供的緩衝區。</summary>
      <param name="data">要雜湊處理和簽章的資料。</param>
      <param name="destination">要接收簽章的緩衝區。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">簽署作業發生錯誤。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的雜湊演算法，並和提供的簽章比較，來為指定的資料計算出雜湊值，藉此驗證數位簽章是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章資料。</param>
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="signature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">實作類型只支援舊版 DSA (FIPS 186-2)，且雜湊演算法不是 SHA-1。

-或-

驗證簽章失敗。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>如果數位簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的資料是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="hashAlgorithm">雜湊演算法，用來雜湊處理驗證程序的資料。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空白 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊處理或驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的雜湊演算法，並和提供的簽章比較，來為指定的部分位元組陣列計算出資料的雜湊值，便藉此驗證數位簽章是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="offset">用來計算雜湊值的起始索引。</param>
      <param name="count">要雜湊的位元組數。</param>
      <param name="signature">要驗證的簽章資料。</param>
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="signature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小於零。  
  
-或- 
 <paramref name="count" /> 小於零。  
  
-或- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 產生的索引超出 <paramref name="data" /> 上限。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">實作類型只支援舊版 DSA (FIPS 186-2)，且雜湊演算法不是 SHA-1。

-或-

驗證簽章失敗。</exception>
      <returns>如果數位簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的資料是否有效。</summary>
      <param name="data">包含已簽署資料的陣列。</param>
      <param name="offset">
        <paramref name="data" /> 的已簽署部分的起始索引。</param>
      <param name="count">
        <paramref name="data" /> 中已簽署的位元組數目。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="hashAlgorithm">雜湊演算法，用來雜湊處理驗證程序的資料。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。
 
-或- <paramref name="offset" /> 小於零。
 
-或- <paramref name="count" /> 小於零。
 
-或- <paramref name="offset" /> + <paramref name="count" /> -1 會產生超出上限 <paramref name="data" /> 的索引。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空白 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊處理或驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的雜湊演算法，並和提供的簽章比較，來為指定的資料流計算出雜湊值，藉此驗證數位簽章是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章資料。</param>
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="signature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">實作類型只支援舊版 DSA (FIPS 186-2)，且雜湊演算法不是 SHA-1。

-或-

驗證簽章失敗。</exception>
      <returns>如果數位簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的資料是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="hashAlgorithm">雜湊演算法，用來雜湊處理驗證程序的資料。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空白 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊處理或驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的雜湊演算法，並和提供的簽章比較，來為位元組範圍中的資料計算出雜湊值，藉此驗證數位簽章是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">實作類型只支援舊版 DSA (FIPS 186-2)，且雜湊演算法不是 SHA-1。

-或-

驗證簽章失敗。</exception>
      <returns>如果數位簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的資料是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="hashAlgorithm">雜湊演算法，用來雜湊處理驗證程序的資料。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊處理或驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyDataCore(System.IO.Stream,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的資料是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="hashAlgorithm">雜湊演算法，用來雜湊處理驗證程序的資料。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊處理或驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的資料是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="hashAlgorithm">雜湊演算法，用來雜湊處理驗證程序的資料。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊處理或驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[])">
      <summary>在衍生類別中覆寫時，驗證所指定資料的 <see cref="T:System.Security.Cryptography.DSA" /> 簽章。</summary>
      <param name="rgbHash">以 <paramref name="rgbSignature" /> 簽章之資料的雜湊。</param>
      <param name="rgbSignature">要驗證 <c>rgbData</c> 的簽章。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">實作類型只支援舊版 DSA (FIPS 186-2)，且雜湊值長度不是 20 個位元組。

-或-

驗證簽章失敗。</exception>
      <returns>如果 <paramref name="rgbSignature" /> 和 <paramref name="rgbHash" /> 上使用指定雜湊演算法和金鑰計算的簽章相符，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.Byte[],System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的雜湊是否有效。</summary>
      <param name="rgbHash">已簽署的雜湊。</param>
      <param name="rgbSignature">要驗證的簽章。</param>
      <param name="signatureFormat">
        <paramref name="rgbSignature" /> 的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 或 <paramref name="rgbSignature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>驗證數位簽章對提供的資料雜湊是否有效。</summary>
      <param name="hash">要驗證的資料雜湊。</param>
      <param name="signature">要驗證的簽章。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">實作類型只支援舊版 DSA (FIPS 186-2)，且雜湊值長度不是 20 個位元組。

-或-

驗證簽章失敗。</exception>
      <returns>若數位簽章對雜湊是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignature(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的雜湊是否有效。</summary>
      <param name="hash">已簽署的雜湊。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSA.VerifySignatureCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的雜湊是否有效。</summary>
      <param name="hash">已簽署的雜湊。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSAParameters">
      <summary>包含 <see cref="T:System.Security.Cryptography.DSA" /> 演算法的一般參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Counter">
      <summary>指定 <see cref="T:System.Security.Cryptography.DSA" /> 演算法的計數器。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.G">
      <summary>為 <see cref="T:System.Security.Cryptography.DSA" /> 演算法指定 <see langword="G" /> 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.J">
      <summary>為 <see cref="T:System.Security.Cryptography.DSA" /> 演算法指定 <see langword="J" /> 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.P">
      <summary>為 <see cref="T:System.Security.Cryptography.DSA" /> 演算法指定 <see langword="P" /> 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Q">
      <summary>為 <see cref="T:System.Security.Cryptography.DSA" /> 演算法指定 <see langword="Q" /> 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Seed">
      <summary>指定 <see cref="T:System.Security.Cryptography.DSA" /> 演算法的種子。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.X">
      <summary>為 <see cref="T:System.Security.Cryptography.DSA" /> 演算法指定 <see langword="X" /> 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSAParameters.Y">
      <summary>為 <see cref="T:System.Security.Cryptography.DSA" /> 演算法指定 <see langword="Y" /> 參數。</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureDeformatter">
      <summary>驗證數位簽章演算法 (<see cref="T:System.Security.Cryptography.DSA" />) PKCS#1 v1.5 的簽章。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的金鑰，初始化 <see cref="T:System.Security.Cryptography.DSASignatureDeformatter" /> 類別的新執行個體。</summary>
      <param name="key">數位簽章演算法 (<see cref="T:System.Security.Cryptography.DSA" />) 的執行個體，存有金鑰。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>指定數位簽章演算法 (<see cref="T:System.Security.Cryptography.DSA" />) 簽章變形項 (Deformatter) 的雜湊演算法。</summary>
      <param name="strName">要用來簽章變形項之雜湊演算法的名稱。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <paramref name="strName" /> 參數不會對應至 <see cref="T:System.Security.Cryptography.SHA1" /> 雜湊演算法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>指定要使用於數位簽章演算法 (<see cref="T:System.Security.Cryptography.DSA" />) 簽章變形項的金鑰。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.DSA" /> 的執行個體，存有金鑰。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>驗證資料上的數位簽章演算法 (<see cref="T:System.Security.Cryptography.DSA" />) 簽章。</summary>
      <param name="rgbHash">使用 <paramref name="rgbSignature" /> 簽署的資料。</param>
      <param name="rgbSignature">要驗證 <paramref name="rgbHash" /> 的簽章。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="rgbSignature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">DSA 金鑰遺失。</exception>
      <returns>如果簽章對資料是有效的，則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureFormat">
      <summary>使用 DSA 系列演算法指定簽章的資料格式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSASignatureFormat.IeeeP1363FixedFieldConcatenation">
      <summary>來自 IEEE P1363 的簽章格式，其會針對指定的金鑰產生固定大小的簽章。</summary>
    </member>
    <member name="F:System.Security.Cryptography.DSASignatureFormat.Rfc3279DerSequence">
      <summary>來自 IETF RFC 3279 的簽章格式，其會產生可變大小的簽章。</summary>
    </member>
    <member name="T:System.Security.Cryptography.DSASignatureFormatter">
      <summary>建立數位簽章演算法 (<see cref="T:System.Security.Cryptography.DSA" />) 簽章。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的金鑰，初始化 <see cref="T:System.Security.Cryptography.DSASignatureFormatter" /> 類別的新執行個體。</summary>
      <param name="key">數位簽章演算法 (<see cref="T:System.Security.Cryptography.DSA" />) 的執行個體，存有金鑰。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.CreateSignature(System.Byte[])">
      <summary>對指定的資料建立數位簽章演算法 (<see cref="T:System.Security.Cryptography.DSA" />) PKCS #1 的簽章。</summary>
      <param name="rgbHash">要簽署的資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">OID 為 <see langword="null" />。  
  
-或- 
DSA 金鑰為 <see langword="null" />。</exception>
      <returns>指定資料的數位簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>指定數位簽章演算法 (<see cref="T:System.Security.Cryptography.DSA" />) 簽章格式子 (Formatter) 的雜湊演算法。</summary>
      <param name="strName">要用來簽章格式子之雜湊演算法的名稱。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">
        <paramref name="strName" /> 參數不會對應至 <see cref="T:System.Security.Cryptography.SHA1" /> 雜湊演算法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.DSASignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>指定要使用於數位簽章演算法 (<see cref="T:System.Security.Cryptography.DSA" />) 簽章格式子的金鑰。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.DSA" /> 的執行個體，存有金鑰。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve">
      <summary>表示橢圓曲線。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.A">
      <summary>明確曲線的第一個係數。 <c>A</c> 表示短維爾斯特拉斯、蒙哥馬利及 Twisted Edwards 曲線。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.B">
      <summary>明確曲線的第二個係數。 <c>B</c> 表示短維爾斯特拉斯曲線，<c>D</c> 表示 Twisted Edwards 曲線。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Cofactor">
      <summary>曲線的餘因子。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.CurveType">
      <summary>識別 <see cref="T:System.Security.Cryptography.ECCurve" /> 物件的組合。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.G">
      <summary>適用於曲線上作業的產生器或基底點。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Hash">
      <summary>雜湊演算法的名稱，用來根據 ANSI X9.62 產生演算法從 <see cref="F:System.Security.Cryptography.ECCurve.Seed" /> 產生曲線係數 (<see cref="F:System.Security.Cryptography.ECCurve.A" /> 和 <see cref="F:System.Security.Cryptography.ECCurve.B" />)。 僅適用於明確的曲線。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Order">
      <summary>曲線的順序。 僅適用於明確的曲線。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Polynomial">
      <summary>曲線多項式。 僅適用於特性 2 曲線。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Prime">
      <summary>指定基底欄位的質數。 僅適用於質數曲線。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.Seed">
      <summary>用來根據 ANSI X9.62 產生演算法產生係數的種子值。 僅適用於明確的曲線。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromFriendlyName(System.String)">
      <summary>使用指定的識別項易記名稱，來建立具名曲線。</summary>
      <param name="oidFriendlyName">識別項的易記名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidFriendlyName" /> 為 <see langword="null" />。</exception>
      <returns>代表具名曲線的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromOid(System.Security.Cryptography.Oid)">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.Oid" /> 物件，建立具名曲線。</summary>
      <param name="curveOid">要使用的物件識別碼。</param>
      <returns>代表具名曲線的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.CreateFromValue(System.String)">
      <summary>使用識別項的指定小數點十進位表示法，來建立具名曲線。</summary>
      <param name="oidValue">識別項具小數點的數字。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="oidValue" /> 為 <see langword="null" />。</exception>
      <returns>代表具名曲線的物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECCurve.Validate">
      <summary>驗證目前曲線的完整性。 如果結構不是有效的，即會擲回 <see cref="T:System.Security.Cryptography.CryptographicException" /> 例外狀況。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">曲線參數不適用於目前的曲線類型。</exception>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsCharacteristic2">
      <summary>取得值，指出曲線類型是否代表明確的特性 2 曲線。</summary>
      <returns>如果曲線是明確的特性 2 曲線，則為 <see langword="true" />；如果曲線是具名的特性 2、質數或隱含的曲線，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsExplicit">
      <summary>取得值，指出曲線類型是否代表明確的曲線 (可能是質數或特性 2)。</summary>
      <returns>如果曲線是明確的曲線 (可能是質數或特性 2)，則為 <see langword="true" />；如果曲線是具名或隱含的曲線，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsNamed">
      <summary>取得值，指出曲線類型是否代表具名曲線。</summary>
      <returns>
        <see langword="true" /> 如果曲線為命名曲線，則為， <see langword="false" /> 如果曲線是隱含或明確曲線 (是質數或特性 2) 。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.IsPrime">
      <summary>取得值，指出曲線類型是否代表明確的質數曲線。</summary>
      <returns>如果曲線是明確的質數曲線，則為 <see langword="true" />；如果曲線是具名的質數、特性 2 或隱含的曲線，則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.Oid">
      <summary>取得具名曲線的識別項。</summary>
      <returns>具名曲線的識別項。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.ECCurveType">
      <summary>指出如何解譯 <see cref="T:System.Security.Cryptography.ECCurve" /> 物件中所含的資料。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Characteristic2">
      <summary>曲線參數代表特性 2 曲線。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Implicit">
      <summary>未解譯任何曲線資料。 假設呼叫端知道曲線是什麼。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.Named">
      <summary>曲線參數代表具名曲線。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeMontgomery">
      <summary>曲線參數代表含有公式 B*y^2 = x^3 + A*x^2 + x 的質數曲線。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeShortWeierstrass">
      <summary>曲線參數代表質數欄位 P 中含有公式 y^2 = x^3 + A*x + B 的質數曲線。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECCurve.ECCurveType.PrimeTwistedEdwards">
      <summary>曲線參數代表質數欄位 P 中含有公式 A*x^2 + y^2 = 1 + B*x^2*y^2 的質數曲線。</summary>
    </member>
    <member name="T:System.Security.Cryptography.ECCurve.NamedCurves">
      <summary>表示用來建立具名曲線的 Factory 類別。</summary>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160r1">
      <summary>取得 brainpoolP160r1 具名曲線。</summary>
      <returns>brainpoolP160r1 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP160t1">
      <summary>取得 brainpoolP160t1 具名曲線。</summary>
      <returns>brainpoolP160t1 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192r1">
      <summary>取得 brainpoolP192r1 具名曲線。</summary>
      <returns>brainpoolP192r1 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP192t1">
      <summary>取得 brainpoolP192t1 具名曲線。</summary>
      <returns>brainpoolP192t1 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224r1">
      <summary>取得 brainpoolP224r1 具名曲線。</summary>
      <returns>brainpoolP224r1 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP224t1">
      <summary>取得 brainpoolP224t1 具名曲線。</summary>
      <returns>brainpoolP224t1 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256r1">
      <summary>取得 brainpoolP256r1 具名曲線。</summary>
      <returns>brainpoolP256r1 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP256t1">
      <summary>取得 brainpoolP256t1 具名曲線。</summary>
      <returns>brainpoolP256t1 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320r1">
      <summary>取得 brainpoolP320r1 具名曲線。</summary>
      <returns>brainpoolP320r1 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP320t1">
      <summary>取得 brainpoolP320t1 具名曲線。</summary>
      <returns>brainpoolP320t1 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384r1">
      <summary>取得 brainpoolP384r1 具名曲線。</summary>
      <returns>brainpoolP384r1 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP384t1">
      <summary>取得 brainpoolP384t1 具名曲線。</summary>
      <returns>brainpoolP384t1 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512r1">
      <summary>取得 brainpoolP512r1 具名曲線。</summary>
      <returns>brainpoolP512r1 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.brainpoolP512t1">
      <summary>取得 brainpoolP512t1 具名曲線。</summary>
      <returns>brainpoolP512t1 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP256">
      <summary>取得 nistP256 具名曲線。</summary>
      <returns>nistP256 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP384">
      <summary>取得 nistP384 具名曲線。</summary>
      <returns>nistP384 具名曲線。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECCurve.NamedCurves.nistP521">
      <summary>取得 nistP521 具名曲線。</summary>
      <returns>nistP521 具名曲線。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellman">
      <summary>提供 Elliptic Curve Diffie-Hellman (ECDH) 演算法實作可從中衍生的抽象基底類別。 這個類別提供一組所有 ECDH 實作都必須支援的基本作業。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create">
      <summary>建立 Elliptic Curve Diffie-Hellman (ECDH) 演算法預設實作的新執行個體。</summary>
      <returns>這個類別預設實作的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECCurve)">
      <summary>使用在指定曲線上產生的新公開/私密金鑰組，來建立橢圓曲線 Diffie-Hellman (ECDH) 演算法之預設實作的新執行個體。</summary>
      <param name="curve">用來產生新公用/私密金鑰組的曲線。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> 不會驗證。</exception>
      <returns>橢圓曲線 Diffie-Hellman (ECDH) 演算法之預設實作的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.Security.Cryptography.ECParameters)">
      <summary>使用指定 <see cref="T:System.Security.Cryptography.ECParameters" /> 物件所指定的金鑰，來建立橢圓曲線 Diffie-Hellman (ECDH) 演算法之預設實作的新執行個體。</summary>
      <param name="parameters">適用於橢圓曲線密碼編譯 (ECC) 演算法的參數。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> 不會驗證。</exception>
      <returns>橢圓曲線 Diffie-Hellman (ECDH) 演算法之預設實作的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.Create(System.String)">
      <summary>建立橢圓曲線 Diffie-Hellman (ECDH) 演算法的指定實作新執行個體。</summary>
      <param name="algorithm">ECDH 演算法的實作名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 參數為 <see langword="null" />。</exception>
      <returns>此類別之指定實作的新執行個體。 如果指定的演算法名稱未對應到 ECDH 實作，這個方法會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用所指定雜湊演算法來執行金鑰衍生。</summary>
      <param name="otherPartyPublicKey">另一方的公開金鑰。</param>
      <param name="hashAlgorithm">要用來衍生金鑰內容的雜湊演算法。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 所使用曲線與此金鑰的曲線大小不同。

-或-

<paramref name="hashAlgorithm" /> 參數未指定雜湊。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" /> 所使用曲線與此金鑰的曲線不同。

-或-

這個執行個體只表示公開金鑰。</exception>
      <returns>所共用密碼的雜湊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHash(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>在衍生類別中實作時，使用指定的雜湊演算法搭配選擇性前置或附加資料來執行金鑰衍生。</summary>
      <param name="otherPartyPublicKey">另一方的公開金鑰。</param>
      <param name="hashAlgorithm">要用來衍生金鑰內容的雜湊演算法。</param>
      <param name="secretPrepend">雜湊之前要加在衍生密碼前面的值。</param>
      <param name="secretAppend">雜湊之前要附加至衍生密碼的值。</param>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 所使用曲線與此金鑰的曲線大小不同。

-或-

<paramref name="hashAlgorithm" /> 參數未指定雜湊。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" /> 所使用曲線與此金鑰的曲線不同。

-或-

這個執行個體只表示公開金鑰。</exception>
      <returns>依要求前置或附加資料後的共用密碼雜湊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>使用指定的 HMAC (雜湊式訊息驗證碼) 演算法來執行金鑰衍生。</summary>
      <param name="otherPartyPublicKey">另一方的公開金鑰。</param>
      <param name="hashAlgorithm">要用來衍生金鑰內容的雜湊演算法。</param>
      <param name="hmacKey">HMAC 的金鑰。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 所使用曲線與此金鑰的曲線大小不同。

-或-

<paramref name="hashAlgorithm" /> 參數未指定雜湊。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" /> 所使用曲線與此金鑰的曲線不同。

-或-

這個執行個體只表示公開金鑰。</exception>
      <returns>所共用密碼的 HMAC。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyFromHmac(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[],System.Byte[])">
      <summary>在衍生類別中實作時，使用指定的 HMAC (雜湊式訊息驗證碼) 演算法搭配選擇性的前置或附加資料來執行金鑰衍生。</summary>
      <param name="otherPartyPublicKey">另一方的公開金鑰。</param>
      <param name="hashAlgorithm">要用來衍生金鑰內容的雜湊演算法。</param>
      <param name="hmacKey">HMAC 的金鑰。</param>
      <param name="secretPrepend">雜湊之前要加在衍生密碼前面的值。</param>
      <param name="secretAppend">雜湊之前要附加至衍生密碼的值。</param>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 所使用曲線與此金鑰的曲線大小不同。

-或-

<paramref name="hashAlgorithm" /> 參數未指定雜湊。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" /> 所使用曲線與此金鑰的曲線不同。

-或-

這個執行個體只表示公開金鑰。</exception>
      <returns>依要求前置或附加資料後的共用密碼 HMAC。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyMaterial(System.Security.Cryptography.ECDiffieHellmanPublicKey)">
      <summary>在衍生類別中實作時，依據共用密碼來執行金鑰衍生。</summary>
      <param name="otherPartyPublicKey">另一方的公開金鑰。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 所使用曲線與此金鑰的曲線大小不同。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="otherPartyPublicKey" /> 所使用曲線與此金鑰的曲線不同。

-或-

這個執行個體只表示公開金鑰。</exception>
      <returns>使用共用密碼作為輸入的金鑰衍生函式結果。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.DeriveKeyTls(System.Security.Cryptography.ECDiffieHellmanPublicKey,System.Byte[],System.Byte[])">
      <summary>當在衍生類別中實作時，使用 TLS (傳輸層安全性) 1.1 PRF (虛擬隨機函式) 來執行金鑰衍生。</summary>
      <param name="otherPartyPublicKey">另一方的公開金鑰。</param>
      <param name="prfLabel">ASCII 編碼的 PRF 標籤。</param>
      <param name="prfSeed">64 位元組的 PRF 種子。</param>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="otherPartyPublicKey" /> 所使用曲線與此金鑰的曲線大小不同。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="otherPartyPublicKey" />、<paramref name="prfLabel" /> 或 <paramref name="prfSeed" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="prfSeed" /> 的長度不是正好 64 位元組。

-或-

<paramref name="otherPartyPublicKey" /> 所使用曲線與此金鑰的曲線不同。

-或-

這個執行個體只表示公開金鑰。</exception>
      <returns>來自 TLS 1.1 PRF 的前 48 個位元組，其使用共用密碼作為金鑰。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportECPrivateKey">
      <summary>以 ECPrivateKey 格式匯出目前的金鑰。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>位元組陣列，其中包含此金鑰的 ECPrivateKey 表示法。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportExplicitParameters(System.Boolean)">
      <summary>在衍生類別中覆寫時，會使用明確的曲線形式，將公開或公開和私密金鑰資訊從運作中的 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 金鑰匯出至 <see cref="T:System.Security.Cryptography.ECParameters" /> 結構，讓您可將它傳遞至 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 方法。</summary>
      <param name="includePrivateParameters">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <returns>物件，使用明確的曲線格式，表示此金鑰在曲線上的點。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ExportParameters(System.Boolean)">
      <summary>在衍生類別中覆寫時，會將公開或公開和私密金鑰資訊從運作中的 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 金鑰匯出至 <see cref="T:System.Security.Cryptography.ECParameters" /> 結構，讓您可將它傳遞至 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 方法。</summary>
      <param name="includePrivateParameters">
        <see langword="true" /> 以包括私用參數；否則，<see langword="false" /> 以只包含公開參數。</param>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <returns>物件，表示此金鑰在曲線上的點。 可將它傳遞至 <see cref="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)" /> 方法。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.FromXmlString(System.String)">
      <summary>這個方法在所有情況下都會擲回。</summary>
      <param name="xmlString">要用來重新建構 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 物件的 XML 字串。</param>
      <exception cref="T:System.NotImplementedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>在衍生類別中覆寫時，會針對指定的曲線產生新的暫時性公開/私密金鑰組。</summary>
      <param name="curve">用來產生暫時性公開/私密金鑰組的曲線。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="curve" /> 不會驗證。</exception>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>從 ECPrivateKey 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="source">以 ASN.1-BER 編碼的 ECPrivateKey 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的內容不表示 ASN.1-BER 編碼的 PKCS#8 ECPrivateKey 結構。

-或-

金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用位元組型密碼解密之後，從 PKCS#8 EncryptedPrivateKeyInfo 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="passwordBytes">解密金鑰內容時要用作密碼的位元組。</param>
      <param name="source">以 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="source" /> 的內容指出要套用的金鑰衍生函數 (Key Derivation Function) (KDF) 是舊版 PKCS#12 KDF，這需要 <see cref="T:System.Char" /> 型密碼。

-或-

<paramref name="source" /> 的內容不表示 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用 Char 型密碼解密之後，從 PKCS#8 EncryptedPrivateKeyInfo 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="password">要用於解密金鑰產製原料的密碼。</param>
      <param name="source">以 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="source" /> 的內容不表示 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>匯入 RFC 7468 PEM 編碼的加密私密金鑰，並取代這個物件的金鑰。</summary>
      <param name="input">要匯入的加密金鑰 PEM 文字。</param>
      <param name="passwordBytes">解密金鑰產製原料時要用作密碼的位元組。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含具有辨識標籤的 PEM 編碼金鑰。

-或-

<paramref name="input" /> 包含多個具有辨識標籤的 PEM 編碼金鑰。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，不代表 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，代表非支援格式的金鑰。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>匯入 RFC 7468 PEM 編碼的加密私密金鑰，並取代這個物件的金鑰。</summary>
      <param name="input">要匯入的加密金鑰 PEM 文字。</param>
      <param name="password">要用於解密金鑰產製原料的密碼。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含具有辨識標籤的 PEM 編碼金鑰。

-或-

<paramref name="input" /> 包含多個具有辨識標籤的 PEM 編碼金鑰。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，不代表 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，代表非支援格式的金鑰。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>匯入 RFC 7468 PEM 編碼的金鑰，並取代這個物件的金鑰。</summary>
      <param name="input">要匯入的金鑰 PEM 文字。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含具有辨識標籤的 PEM 編碼金鑰。

-或-

<paramref name="input" /> 包含多個具有辨識標籤的 PEM 編碼金鑰。

-或-

<paramref name="input" /> 包含 PEM 編碼的加密金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>在衍生類別中覆寫時，會將 <see cref="T:System.Security.Cryptography.ECCurve" /> 的指定參數做為暫時性金鑰匯入目前的 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 物件。</summary>
      <param name="parameters">要匯入的曲線參數。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> 不會驗證。</exception>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密後，從 PKCS#8 PrivateKeyInfo 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="source">以 ASN.1-BER 編碼的 PKCS#8 PrivateKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的內容不表示 ASN.1-BER 編碼的 PKCS#8 PrivateKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密後，從 X.509 SubjectPublicKeyInfo 結構匯入公開金鑰，以取代這個物件的金鑰。</summary>
      <param name="source">以 ASN.1-DER 編碼的 X.509 SubjectPublicKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的內容不表示 ASN.1-DER 編碼的 X.509 SubjectPublicKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.ToXmlString(System.Boolean)">
      <summary>這個方法在所有情況下都會擲回。</summary>
      <param name="includePrivateParameters">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.NotImplementedException">在所有情況下。</exception>
      <returns>這個方法不會傳回值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>嘗試以 <see langword="ECPrivateKey" /> 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="destination">要接收 <see langword="ECPrivateKey" /> 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>使用位元組型密碼，嘗試以 PKCS#8 EncryptedPrivateKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="passwordBytes">加密金鑰內容時要用作密碼的位元組。</param>
      <param name="pbeParameters">加密金鑰內容時要使用的密碼型加密 (PBE) 參數。</param>
      <param name="destination">要接收 PKCS#8 EncryptedPrivateKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。

-或-

<paramref name="pbeParameters" /> 指出應該使用 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />，這需要 <see cref="T:System.Char" /> 型密碼。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>使用 Char 型密碼，嘗試以 PKCS#8 EncryptedPrivateKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="password">加密金鑰產製原料時要使用的密碼。</param>
      <param name="pbeParameters">加密金鑰產製原料時要使用的密碼型加密 (PBE) 參數。</param>
      <param name="destination">要接收 PKCS#8 EncryptedPrivateKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>嘗試以 PKCS#8 PrivateKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="destination">要接收 PKCS#8 PrivateKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellman.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>嘗試以 X.509 SubjectPublicKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="destination">要接收 X.509 SubjectPublicKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.KeyExchangeAlgorithm">
      <summary>取得金鑰交換演算法的名稱。</summary>
      <returns>金鑰交換演算法的名稱。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.PublicKey">
      <summary>取得目前的 Elliptic Curve Diffie-Hellman (ECDH) 執行個體正在使用的公開金鑰。</summary>
      <returns>這個 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 執行個體正在使用的 ECDH 金鑰組的公開部分。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDiffieHellman.SignatureAlgorithm">
      <summary>取得簽章演算法的名稱。</summary>
      <returns>一定是 <see langword="null" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDiffieHellmanPublicKey">
      <summary>提供抽象基底類別，所有 <see cref="T:System.Security.Cryptography.ECDiffieHellmanCngPublicKey" /> 實作都必須繼承自該類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.#ctor(System.Byte[])">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 類別的新執行個體。</summary>
      <param name="keyBlob">位元組陣列，代表 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 物件。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="keyBlob" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose">
      <summary>釋放 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 類別目前的執行個體所使用的全部資源。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Security.Cryptography.ECDiffieHellman" /> 類別所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportExplicitParameters">
      <summary>在衍生類別中覆寫時，會針對 <see cref="T:System.Security.Cryptography.ECCurve" /> 物件匯出明確的 <see cref="T:System.Security.Cryptography.ECParameters" />。</summary>
      <exception cref="T:System.NotSupportedException">衍生的類別必須覆寫這個方法。</exception>
      <returns>物件，使用明確的曲線格式，表示此金鑰在曲線上的點。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ExportParameters">
      <summary>在衍生類別中覆寫時，會針對 <see cref="T:System.Security.Cryptography.ECCurve" /> 物件匯出具名或明確的 <see cref="T:System.Security.Cryptography.ECParameters" />。</summary>
      <exception cref="T:System.NotSupportedException">衍生的類別必須覆寫這個方法。</exception>
      <returns>物件，表示此金鑰在曲線上的點。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToByteArray">
      <summary>將 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 金鑰 BLOB 序列化為位元組陣列。</summary>
      <returns>包含序列化橢圓曲線 Diffie-Hellman (ECDH) 公開金鑰的位元組陣列。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDiffieHellmanPublicKey.ToXmlString">
      <summary>將 <see cref="T:System.Security.Cryptography.ECDiffieHellmanPublicKey" /> 公開金鑰序列化為 XML 字串。</summary>
      <returns>包含序列化橢圓曲線 Diffie-Hellman (ECDH) 公開金鑰的 XML 字串。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECDsa">
      <summary>提供抽象基底類別，這個類別封裝 Elliptic Curve Digital Signature Algorithm (ECDSA)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.ECDsa" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create">
      <summary>建立 Elliptic Curve Digital Signature Algorithm (ECDSA) 預設實作的新執行個體。</summary>
      <returns>這個類別之預設實作 (<see cref="T:System.Security.Cryptography.ECDsaCng" />) 的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECCurve)">
      <summary>使用在指定曲線上新產生的金鑰，來建立橢圓曲線數位簽章演算法 (ECDSA) 之預設實作的新執行個體。</summary>
      <param name="curve">要用來產生曲線的金鑰。</param>
      <returns>這個類別之預設實作 (<see cref="T:System.Security.Cryptography.ECDsaCng" />) 的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.Security.Cryptography.ECParameters)">
      <summary>使用指定的參數做為金鑰，來建立橢圓曲線數位簽章演算法 (ECDSA) 之預設實作的新執行個體。</summary>
      <param name="parameters">代表要使用之金鑰的參數。</param>
      <returns>這個類別之預設實作 (<see cref="T:System.Security.Cryptography.ECDsaCng" />) 的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.Create(System.String)">
      <summary>建立 Elliptic Curve Digital Signature Algorithm (ECDSA) 指定實作的新執行個體。</summary>
      <param name="algorithm">ECDSA 實作的名稱。 下列字串全部參考相同的實作，也就是 .NET Framework 中目前支援的唯一實作。 
- "ECDsa" 
- "ECDsaCng" 
- "System.Security.Cryptography.ECDsaCng" 
您也可以提供自訂 ECDSA 實作的名稱。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="algorithm" /> 參數為 <see langword="null" />。</exception>
      <returns>此類別之指定實作的新執行個體。 如果指定的演算法名稱未對應至 ECDSA 實作，則這個方法會傳回 <see langword="null" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportECPrivateKey">
      <summary>以 ECPrivateKey 格式匯出目前金鑰。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>位元組陣列，其中包含此金鑰的 ECPrivateKey 表示法。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportExplicitParameters(System.Boolean)">
      <summary>在衍生類別中覆寫時，匯出橢圓曲線的明確參數。</summary>
      <param name="includePrivateParameters">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">衍生的類別必須覆寫這個方法。</exception>
      <returns>參數，使用明確的曲線格式，表示此金鑰在曲線上的點。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ExportParameters(System.Boolean)">
      <summary>在衍生類別中覆寫時，會匯出橢圓曲線的具名或明確參數。 如果曲線具有名稱，<see cref="F:System.Security.Cryptography.ECParameters.Curve" /> 欄位即會包含具名曲線參數，否則會包含明確的參數。</summary>
      <param name="includePrivateParameters">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.NotSupportedException">衍生的類別必須覆寫這個方法。</exception>
      <returns>參數，表示此金鑰在曲線上的點。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.FromXmlString(System.String)">
      <summary>這個方法在所有情況下都會擲回。</summary>
      <param name="xmlString">要用來重新建構 <see cref="T:System.Security.Cryptography.AsymmetricAlgorithm" /> 物件的 XML 字串。</param>
      <exception cref="T:System.NotImplementedException">在所有情況下。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GenerateKey(System.Security.Cryptography.ECCurve)">
      <summary>在衍生類別中覆寫時，會針對所指定曲線產生新的暫時性公開/私密金鑰組，並取代目前的金鑰。</summary>
      <param name="curve">要用來產生金鑰的曲線。</param>
      <exception cref="T:System.NotSupportedException">衍生的類別必須覆寫這個方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.GetMaxSignatureSize(System.Security.Cryptography.DSASignatureFormat)">
      <summary>取得此索引鍵以指定格式所產生簽章的最大大小 (以位元組為單位)。</summary>
      <param name="signatureFormat">簽章的編碼格式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <returns>此索引鍵以指定格式所產生簽章的最大大小 (以位元組為單位)。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>在衍生類別中覆寫時，會使用指定的雜湊演算法，來為位元組陣列中的指定部分計算出雜湊值。</summary>
      <param name="data">要雜湊的資料。</param>
      <param name="offset">在 <paramref name="data" /> 中要雜湊的第一個位元組索引。</param>
      <param name="count">要雜湊的位元組數。</param>
      <param name="hashAlgorithm">要用來雜湊資料的演算法。</param>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <returns>已雜湊的資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>在衍生類別中覆寫時，會使用指定的雜湊演算法，來為指定的二進位資料流計算出雜湊值。</summary>
      <param name="data">要雜湊的二進位資料流。</param>
      <param name="hashAlgorithm">要用來雜湊資料的演算法。</param>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <returns>已雜湊的資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportECPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>從 ECPrivateKey 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="source">以 ASN.1-BER 編碼的 ECPrivateKey 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的內容不表示 ASN.1-BER 編碼的 PKCS#8 ECPrivateKey 結構。

-或-

金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用位元組型密碼解密之後，從 PKCS#8 EncryptedPrivateKeyInfo 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="passwordBytes">解密金鑰產製原料時要用作密碼的位元組。</param>
      <param name="source">以 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="source" /> 的內容指出要套用的金鑰衍生函數 (Key Derivation Function) (KDF) 是舊版 PKCS#12 KDF，這需要 <see cref="T:System.Char" /> 型密碼。

-或-

<paramref name="source" /> 的內容不表示 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用 Char 型密碼解密之後，從 PKCS#8 EncryptedPrivateKeyInfo 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="password">要用於解密金鑰產製原料的密碼。</param>
      <param name="source">以 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="source" /> 的內容不表示 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>匯入 RFC 7468 PEM 編碼的加密私密金鑰，並取代這個物件的金鑰。</summary>
      <param name="input">要匯入的加密金鑰 PEM 文字。</param>
      <param name="passwordBytes">解密金鑰產製原料時要用作密碼的位元組。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含具有辨識標籤的 PEM 編碼金鑰。

-或-

<paramref name="input" /> 包含多個具有辨識標籤的 PEM 編碼金鑰。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或- 
<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，不代表 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，代表非支援格式的金鑰。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>匯入 RFC 7468 PEM 編碼的加密私密金鑰，並取代這個物件的金鑰。</summary>
      <param name="input">要匯入的加密金鑰 PEM 文字。</param>
      <param name="password">要用於解密金鑰產製原料的密碼。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含具有辨識標籤的 PEM 編碼金鑰。

-或-

<paramref name="input" /> 包含多個具有辨識標籤的 PEM 編碼金鑰。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，不代表 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，代表非支援格式的金鑰。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>匯入 RFC 7468 PEM 編碼的金鑰，並取代這個物件的金鑰。</summary>
      <param name="input">要匯入的金鑰 PEM 文字。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含具有辨識標籤的 PEM 編碼金鑰。

-或-

<paramref name="input" /> 包含多個具有辨識標籤的 PEM 編碼金鑰。

-或-

<paramref name="input" /> 包含 PEM 編碼的加密金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportParameters(System.Security.Cryptography.ECParameters)">
      <summary>在衍生類別中覆寫時，匯入指定的參數。</summary>
      <param name="parameters">曲線參數。</param>
      <exception cref="T:System.NotSupportedException">衍生的類別必須覆寫這個方法。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密後，從 PKCS#8 PrivateKeyInfo 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="source">以 ASN.1-BER 編碼的 PKCS#8 PrivateKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的內容不表示 ASN.1-BER 編碼的 PKCS#8 PrivateKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密後，從 X.509 SubjectPublicKeyInfo 結構匯入公開金鑰，以取代這個物件的金鑰。</summary>
      <param name="source">以 ASN.1-DER 編碼的 X.509 SubjectPublicKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的內容不表示 ASN.1-DER 編碼的 X.509 SubjectPublicKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的雜湊演算法，並簽署產生的雜湊值，來為指定的部分位元組陣列計算出雜湊值。</summary>
      <param name="data">用來計算雜湊值的輸入資料。</param>
      <param name="offset">這個陣列中的位移，在此處開始使用資料。</param>
      <param name="count">陣列中要用作資料的位元組數目。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小於零。  
  
-或- 
 <paramref name="count" /> 小於零。  
  
-或- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 產生的索引超出 <paramref name="data" /> 上限。</exception>
      <returns>指定資料的 ECDSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>計算指定資料的雜湊值，並使用指定的簽章格式進行簽署。</summary>
      <param name="data">要簽署的資料。</param>
      <param name="offset">開始雜湊的 <paramref name="data" /> 的位移。</param>
      <param name="count">要從 <paramref name="data" /> 讀取的位元組數。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。
 
-或- 
 <paramref name="offset" /> 小於零。
 
-或- 
 <paramref name="count" /> 小於零。
 
-或- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 產生的索引超出 <paramref name="data" /> 上限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空白 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊或簽署作業發生錯誤。</exception>
      <returns>指定資料的 ECDSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的雜湊演算法，並簽署產生的雜湊值，來為指定的位元組陣列計算出雜湊值。</summary>
      <param name="data">用來計算雜湊值的輸入資料。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>指定資料的 ECDSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>計算指定資料的雜湊值，並使用指定的簽章格式進行簽署。</summary>
      <param name="data">要簽署的資料。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空白 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊或簽署作業發生錯誤。</exception>
      <returns>指定資料的 ECDSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>使用指定的雜湊演算法，並簽署產生的雜湊值，來為指定的資料流計算出雜湊值。</summary>
      <param name="data">用來計算雜湊值的輸入資料流。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>指定資料的 ECDSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>計算指定資料的雜湊值，並使用指定的簽章格式進行簽署。</summary>
      <param name="data">要簽署的資料。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空白 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊或簽署作業發生錯誤。</exception>
      <returns>指定資料的 ECDSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignDataCore(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>計算指定資料的雜湊值，並使用指定的簽章格式進行簽署。</summary>
      <param name="data">要簽署的資料。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊或簽署作業發生錯誤。</exception>
      <returns>指定資料的 ECDSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignDataCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>計算指定資料的雜湊值，並使用指定的簽章格式進行簽署。</summary>
      <param name="data">要簽署的資料。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊或簽署作業發生錯誤。</exception>
      <returns>指定資料的 ECDSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[])">
      <summary>產生指定雜湊值的數位簽章。</summary>
      <param name="hash">要簽署之資料的雜湊值。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 參數為 <see langword="null" />。</exception>
      <returns>指定雜湊值的數位簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHash(System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>以指定的格式計算指定雜湊值的 ECDSA 簽章。</summary>
      <param name="hash">要簽署的雜湊值。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">簽署作業發生錯誤。</exception>
      <returns>指定資料的 ECDSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.SignHashCore(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>以指定的格式計算指定雜湊值的 ECDSA 簽章。</summary>
      <param name="hash">要簽署的雜湊值。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">簽署作業發生錯誤。</exception>
      <returns>指定資料的 ECDSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.ToXmlString(System.Boolean)">
      <summary>這個方法在所有情況下都會擲回。</summary>
      <param name="includePrivateParameters">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.NotImplementedException">在所有情況下。</exception>
      <returns>這個方法不會傳回值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportECPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>嘗試以 ECPrivateKey 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="destination">要接收 ECPrivateKey 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>使用位元組型密碼，嘗試以 PKCS#8 EncryptedPrivateKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="passwordBytes">加密金鑰內容時要用作密碼的位元組。</param>
      <param name="pbeParameters">加密金鑰產製原料時要使用的密碼型加密 (PBE) 參數。</param>
      <param name="destination">要接收 PKCS#8 EncryptedPrivateKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。

-或-

<paramref name="pbeParameters" /> 指出應該使用 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />，這需要 <see cref="T:System.Char" /> 型密碼。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>使用 Char 型密碼，嘗試以 PKCS#8 EncryptedPrivateKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="password">加密金鑰產製原料時要使用的密碼。</param>
      <param name="pbeParameters">加密金鑰產製原料時要使用的密碼型加密 (PBE) 參數。</param>
      <param name="destination">要接收 PKCS#8 EncryptedPrivateKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>嘗試以 PKCS#8 PrivateKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="destination">要接收 PKCS#8 PrivateKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>嘗試以 X.509 SubjectPublicKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="destination">要接收 X.509 SubjectPublicKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入至 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>使用指定的雜湊演算法，嘗試將所指定唯讀位元組範圍的雜湊值計算到提供的目的地。</summary>
      <param name="data">要雜湊的資料。</param>
      <param name="destination">要接收雜湊值的緩衝區。</param>
      <param name="hashAlgorithm">要用來雜湊資料的演算法。</param>
      <param name="bytesWritten">當此方法傳回時，為寫入 <paramref name="destination" /> 的位元組總數。 這個參數會被視為未初始化。</param>
      <returns>如果 <paramref name="destination" /> 不夠長，無法接收雜湊值，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>使用指定的雜湊演算法與目前金鑰，嘗試將所指定唯讀位元組範圍的 ECDSA 數位簽章計算到提供的目的地。</summary>
      <param name="data">要簽署的資料。</param>
      <param name="destination">要接收簽章的緩衝區。</param>
      <param name="hashAlgorithm">要用來雜湊資料以進行簽署的演算法。</param>
      <param name="bytesWritten">當這個方法傳回時，寫入 <paramref name="destination" /> 的位元組總數。 這個參數會被視為未初始化。</param>
      <returns>如果 <paramref name="destination" /> 不夠長，無法接收此簽章，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>嘗試以指定的格式，建立指定資料的 ECDSA 簽章，放至提供的緩衝區。</summary>
      <param name="data">要雜湊處理和簽章的資料。</param>
      <param name="destination">要接收簽章的緩衝區。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空白 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">簽署作業發生錯誤。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignDataCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>嘗試以指定的格式，建立指定資料的 ECDSA 簽章，放至提供的緩衝區。</summary>
      <param name="data">要雜湊處理和簽章的資料。</param>
      <param name="destination">要接收簽章的緩衝區。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">簽署作業發生錯誤。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>使用目前金鑰，嘗試將所指定唯讀位元組範圍 (代表資料雜湊) 的 ECDSA 數位簽章計算到提供的目的地。</summary>
      <param name="hash">要簽署之資料的雜湊值。</param>
      <param name="destination">要接收簽章的緩衝區。</param>
      <param name="bytesWritten">當此方法傳回時，為寫入 <paramref name="destination" /> 的位元組總數。 這個參數會被視為未初始化。</param>
      <returns>如果 <paramref name="destination" /> 不夠長，無法接收此簽章，則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>嘗試以指定的格式，建立指定雜湊值的 ECDSA 簽章，放至提供的緩衝區。</summary>
      <param name="hash">要簽署的雜湊值。</param>
      <param name="destination">要接收簽章的緩衝區。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">簽署作業發生錯誤。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.TrySignHashCore(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.DSASignatureFormat,System.Int32@)">
      <summary>嘗試以指定的格式，建立指定雜湊值的 ECDSA 簽章，放至提供的緩衝區。</summary>
      <param name="hash">要簽署的雜湊值。</param>
      <param name="destination">要接收簽章的緩衝區。</param>
      <param name="signatureFormat">用於簽章的編碼格式。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">簽署作業發生錯誤。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>確認數位簽章適用於目前金鑰和使用所指定雜湊演算法提供的資料。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章資料。</param>
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="signature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的資料是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="hashAlgorithm">雜湊演算法，用來雜湊處理驗證程序的資料。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空白 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊處理或驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>確認數位簽章適用於目前金鑰和使用所指定雜湊演算法提供的資料部分。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="offset">用來計算雜湊值的起始索引。</param>
      <param name="count">要雜湊的位元組數。</param>
      <param name="signature">要驗證的簽章資料。</param>
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="signature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小於零。  
  
-或- 
 <paramref name="count" /> 小於零。  
  
-或- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 產生的索引超出 <paramref name="data" /> 上限。</exception>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的資料是否有效。</summary>
      <param name="data">包含已簽署資料的陣列。</param>
      <param name="offset">
        <paramref name="data" /> 的已簽署部分的起始索引。</param>
      <param name="count">
        <paramref name="data" /> 中已簽署的位元組數目。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="hashAlgorithm">雜湊演算法，用來雜湊處理驗證程序的資料。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。
 
-或- 
 <paramref name="offset" /> 小於零。
 
-或- 
 <paramref name="count" /> 小於零。
 
-或- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 產生的索引超出 <paramref name="data" /> 上限。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空白 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊處理或驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)">
      <summary>確認數位簽章適用於目前金鑰和使用所指定雜湊演算法提供的資料。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章資料。</param>
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="signature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的資料是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="hashAlgorithm">雜湊演算法，用來雜湊處理驗證程序的資料。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="signature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 具有 <see langword="null" /> 或空白 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊處理或驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName)">
      <summary>確認數位簽章適用於目前金鑰和使用所指定雜湊演算法提供的資料。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的資料是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="hashAlgorithm">雜湊演算法，用來雜湊處理驗證程序的資料。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊處理或驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyDataCore(System.IO.Stream,System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的資料是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="hashAlgorithm">雜湊演算法，用來雜湊處理驗證程序的資料。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊處理或驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyDataCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的資料是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="hashAlgorithm">雜湊演算法，用來雜湊處理驗證程序的資料。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊處理或驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[])">
      <summary>確認數位簽章適用於目前金鑰和提供的資料雜湊。</summary>
      <param name="hash">要驗證之資料的雜湊值。</param>
      <param name="signature">要根據雜湊值驗證之資料的數位簽章。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 或 <paramref name="signature" /> 為 <see langword="null" />。</exception>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的雜湊是否有效。</summary>
      <param name="hash">已簽署的雜湊。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 或 <paramref name="signature" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>確認數位簽章適用於目前金鑰和提供的資料雜湊。</summary>
      <param name="hash">要驗證之資料的雜湊值。</param>
      <param name="signature">要根據雜湊值驗證之資料的數位簽章。</param>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的雜湊是否有效。</summary>
      <param name="hash">已簽署的雜湊。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="signatureFormat" /> 不是已知的格式。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.ECDsa.VerifyHashCore(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.DSASignatureFormat)">
      <summary>驗證數位簽章對提供的雜湊是否有效。</summary>
      <param name="hash">已簽署的雜湊。</param>
      <param name="signature">要驗證的簽章。</param>
      <param name="signatureFormat">
        <paramref name="signature" /> 的編碼格式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">驗證作業發生錯誤。</exception>
      <returns>若數位簽章對提供的資料是有效的，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm">
      <summary>取得金鑰交換演算法的名稱。</summary>
      <returns>一定是 <see langword="null" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.ECDsa.SignatureAlgorithm">
      <summary>取得簽章演算法的名稱。</summary>
      <returns>字串 "ECDsa"。</returns>
    </member>
    <member name="T:System.Security.Cryptography.ECParameters">
      <summary>代表適用於橢圓曲線密碼編譯 (ECC) 演算法的標準參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Curve">
      <summary>表示與公開金鑰 (<see cref="F:System.Security.Cryptography.ECParameters.Q" />) 和選用私密金鑰 (<see cref="F:System.Security.Cryptography.ECParameters.D" />) 相關聯的曲線。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.D">
      <summary>代表適用於橢圓曲線密碼編譯 (ECC) 演算法的私密金鑰 <see langword="D" /> (以位元組由大到小格式儲存)。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECParameters.Q">
      <summary>代表適用於橢圓曲線密碼編譯 (ECC) 演算法的公開金鑰 <see langword="Q" />。</summary>
    </member>
    <member name="M:System.Security.Cryptography.ECParameters.Validate">
      <summary>驗證目前的物件。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">金鑰或曲線參數不適用於目前的曲線類型。</exception>
    </member>
    <member name="T:System.Security.Cryptography.ECPoint">
      <summary>代表橢圓曲線加密 (ECC) 結構的 (X，Y) 座標組。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.X">
      <summary>代表 X 座標。</summary>
    </member>
    <member name="F:System.Security.Cryptography.ECPoint.Y">
      <summary>代表 Y 座標。</summary>
    </member>
    <member name="T:System.Security.Cryptography.HKDF">
      <summary>RFC5869 HMAC 型擷取再擴展的金鑰衍生函數 (HKDF)</summary>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.DeriveKey(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Int32,System.Byte[],System.Byte[])">
      <summary>執行金鑰衍生 HKDF 擴展和擷取函數。</summary>
      <param name="hashAlgorithmName">用於 HMAC 作業的雜湊演算法。</param>
      <param name="ikm">輸入金鑰產製原料。</param>
      <param name="outputLength">輸出金鑰產製原料的長度。</param>
      <param name="salt">選用的 salt 值 (非秘密的隨機值)。 如未提供，則預設為與所指定雜湊演算法的輸出相同長度的位元組陣列。</param>
      <param name="info">選用的內容和應用程式特有資訊。</param>
      <returns>輸出金鑰產製原料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.DeriveKey(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>執行金鑰衍生 HKDF 擴展和擷取函數。</summary>
      <param name="hashAlgorithmName">用於 HMAC 作業的雜湊演算法。</param>
      <param name="ikm">輸入金鑰產製原料。</param>
      <param name="output">代表輸出金鑰產製原料的輸出緩衝區。</param>
      <param name="salt">salt 值 (非秘密的隨機值)。</param>
      <param name="info">內容和應用程式的特有資訊 (可以是空的範圍)。</param>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Expand(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Int32,System.Byte[])">
      <summary>執行 HKDF 擴展函數，請參閱 RFC5869 的 2.3 節。</summary>
      <param name="hashAlgorithmName">用於 HMAC 作業的雜湊演算法。</param>
      <param name="prk">偽隨機金鑰，至少和所指定雜湊演算法的輸出位元組陣列一樣長 (通常是「擴展」步驟的輸出)。</param>
      <param name="outputLength">輸出金鑰產製原料的長度。</param>
      <param name="info">選用的內容和應用程式特有資訊。</param>
      <returns>輸出金鑰產製原料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Expand(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.ReadOnlySpan{System.Byte})">
      <summary>執行 HKDF 擴展函數。 請參閱 RFC5869 的 2.3 節。</summary>
      <param name="hashAlgorithmName">用於 HMAC 作業的雜湊演算法。</param>
      <param name="prk">偽隨機金鑰，至少和所指定雜湊演算法的輸出位元組陣列一樣長 (通常是「擴展」步驟的輸出)。</param>
      <param name="output">要接收輸出金鑰產製原料的目的地緩衝區。</param>
      <param name="info">內容和應用程式的特有資訊 (可以是空的範圍)。</param>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Extract(System.Security.Cryptography.HashAlgorithmName,System.Byte[],System.Byte[])">
      <summary>執行 HKDF 擷取函數。
請參閱 RFC5869的 2.2 節。</summary>
      <param name="hashAlgorithmName">用於 HMAC 作業的雜湊演算法。</param>
      <param name="ikm">輸入金鑰產製原料。</param>
      <param name="salt">選用的 salt 值 (非秘密的隨機值)。 如未提供，則預設為與所指定雜湊演算法的輸出相同長度的位元組陣列。</param>
      <returns>偽隨機金鑰 (prk)。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HKDF.Extract(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>執行 HKDF 擷取函數。
請參閱 RFC5869的 2.2 節。</summary>
      <param name="hashAlgorithmName">用於 HMAC 作業的雜湊演算法。</param>
      <param name="ikm">輸入金鑰產製原料。</param>
      <param name="salt">salt 值 (非秘密的隨機值)。</param>
      <param name="prk">要接收偽隨機金鑰 (prk) 的目的地緩衝區。</param>
      <returns>寫入 <paramref name="prk" /> 緩衝區的位元組數目。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACMD5">
      <summary>使用 <see cref="T:System.Security.Cryptography.MD5" /> 雜湊函式，計算雜湊架構訊息驗證碼 (Hash-based Message Authentication Code，HMAC)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor">
      <summary>以隨機產生的金鑰初始化 <see cref="T:System.Security.Cryptography.HMACMD5" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.#ctor(System.Byte[])">
      <summary>使用指定的金鑰，初始化 <see cref="T:System.Security.Cryptography.HMACMD5" /> 類別的新執行個體。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACMD5" /> 加密的秘密金鑰。 金鑰可以是任何長度，但其長度若超過 64 個位元組，便會使用 SHA-1 進行雜湊，以衍生 64 位元組金鑰。 因此，秘密金鑰的建議大小為 64 個位元組。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Security.Cryptography.HMACMD5" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>將寫入物件的資料路由傳送至 HMAC 演算法，以用來計算 HMAC。</summary>
      <param name="rgb">要用來計算 HMAC 的輸入。</param>
      <param name="ib">位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="cb">位元組陣列中要用作資料的位元組數目。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>將寫入物件的資料路由傳送至 HMAC 演算法，以用來計算 HMAC。</summary>
      <param name="source">要用來計算 HMAC 的輸入。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.HashFinal">
      <summary>在演算法處理最後一筆資料之後，完成 HMAC 計算。</summary>
      <returns>位元組陣列中計算出的 HMAC 值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.Initialize">
      <summary>將雜湊演算法重設為其初始狀態。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACMD5.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>在 HMAC 演算法處理最後一筆資料之後，嘗試完成 HMAC 計算。</summary>
      <param name="destination">要接收 HMAC 值的緩衝區。</param>
      <param name="bytesWritten">當此方法傳回時，為寫入 <paramref name="destination" /> 的位元組總數。 這個參數會被視為未初始化。</param>
      <returns>如果 <paramref name="destination" /> 的長度足以接收 HMAC 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACMD5.Key">
      <summary>取得或設定要在 HMAC 計算中使用的索引鍵。</summary>
      <returns>要在 HMAC 計算中使用的索引鍵。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA1">
      <summary>使用 <see cref="T:System.Security.Cryptography.SHA1" /> 雜湊函式，計算雜湊式訊息驗證碼 (Hash-based Message Authentication Code，HMAC)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor">
      <summary>使用隨機產生的金鑰，初始化 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[])">
      <summary>使用指定的金鑰資料，初始化 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 類別的新執行個體。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> 加密的秘密金鑰。 金鑰可以是任何長度，但其長度若超過 64 個位元組，便會使用 SHA-1 進行雜湊，以衍生 64 位元組金鑰。 因此，秘密金鑰的建議大小為 64 個位元組。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.#ctor(System.Byte[],System.Boolean)">
      <summary>使用指定的金鑰資料和指定是否使用 SHA1 演算法之 Managed 版本的值，初始化 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 類別的新執行個體。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA1" /> 加密的秘密金鑰。 金鑰可以是任何長度，但其長度若超過 64 個位元組，便會使用 SHA-1 進行雜湊，以衍生 64 位元組金鑰。 因此，秘密金鑰的建議大小為 64 個位元組。</param>
      <param name="useManagedSha1">
        <see langword="true" /> 表示使用 SHA1 演算法的 Managed 實作 (<see cref="T:System.Security.Cryptography.SHA1Managed" /> 類別)，<see langword="false" /> 表示使用 Unmanaged 實作 (<see cref="T:System.Security.Cryptography.SHA1CryptoServiceProvider" /> 類別)。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Dispose(System.Boolean)">
      <summary>這個成員會覆寫 <see cref="M:System.Security.Cryptography.KeyedHashAlgorithm.Dispose(System.Boolean)" />，您可以在該主題中找到更完整的文件。

釋放 <see cref="T:System.Security.Cryptography.KeyedHashAlgorithm" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示會同時釋放受控和非受控資源；false 則表示只釋放非受控資源。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>將寫入物件的資料路由傳送到用來計算雜湊式訊息驗證碼 (HMAC) 的 SHA1 雜湊演算法。</summary>
      <param name="rgb">輸入資料。</param>
      <param name="ib">位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="cb">陣列中要用作資料的位元組數目。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>將寫入物件的資料路由傳送至 HMAC 演算法，以用來計算 HMAC。</summary>
      <param name="source">要用來計算 HMAC 的輸入。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.HashFinal">
      <summary>在演算法處理最後一筆資料之後，完成 HMAC 計算。</summary>
      <returns>位元組陣列中計算出的 HMAC 值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.Initialize">
      <summary>將雜湊演算法重設為其初始狀態。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA1.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>在 HMAC 演算法處理最後一筆資料之後，嘗試完成 HMAC 計算。</summary>
      <param name="destination">要接收 HMAC 值的緩衝區。</param>
      <param name="bytesWritten">當此方法傳回時，為寫入 <paramref name="destination" /> 的位元組總數。 這個參數會被視為未初始化。</param>
      <returns>如果 <paramref name="destination" /> 的長度足以接收 HMAC 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA1.Key">
      <summary>取得或設定要使用於雜湊演算法的金鑰。</summary>
      <returns>要使用於雜湊演算法的金鑰。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA256">
      <summary>使用 <see cref="T:System.Security.Cryptography.SHA256" /> 雜湊函式，計算雜湊架構訊息驗證碼 (Hash-based Message Authentication Code，HMAC)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor">
      <summary>使用隨機產生的金鑰，初始化 <see cref="T:System.Security.Cryptography.HMACSHA256" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.#ctor(System.Byte[])">
      <summary>使用指定的金鑰資料，初始化 <see cref="T:System.Security.Cryptography.HMACSHA256" /> 類別的新執行個體。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA256" /> 加密的秘密金鑰。 金鑰可以是任何長度。 不過，建議的大小是 64 個位元組。 如果索引鍵長度超過 64 個位元組，就會進行雜湊 (使用 SHA-256) 以衍生 64 位元組金鑰。 如果長度少於 64 個位元組，它會填補為 64 個位元組。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Security.Cryptography.HMACSHA256" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>將寫入物件的資料路由傳送至 HMAC 演算法，以用來計算 HMAC。</summary>
      <param name="rgb">要用來計算 HMAC 的輸入。</param>
      <param name="ib">位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="cb">位元組陣列中要用作資料的位元組數目。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>將寫入物件的資料路由傳送至 HMAC 演算法，以用來計算 HMAC。</summary>
      <param name="source">要用來計算 HMAC 的輸入。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.HashFinal">
      <summary>在演算法處理最後一筆資料之後，完成 HMAC 計算。</summary>
      <returns>位元組陣列中計算出的 HMAC 值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.Initialize">
      <summary>將雜湊演算法重設為其初始狀態。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA256.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>在 HMAC 演算法處理最後一筆資料之後，嘗試完成 HMAC 計算。</summary>
      <param name="destination">要接收 HMAC 值的緩衝區。</param>
      <param name="bytesWritten">當此方法傳回時，為寫入 <paramref name="destination" /> 的位元組總數。 這個參數會被視為未初始化。</param>
      <returns>如果 <paramref name="destination" /> 的長度足以接收 HMAC 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA256.Key">
      <summary>取得或設定要在 HMAC 計算中使用的索引鍵。</summary>
      <returns>要在 HMAC 計算中使用的索引鍵。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA384">
      <summary>使用 <see cref="T:System.Security.Cryptography.SHA384" /> 雜湊函式，計算雜湊式訊息驗證碼 (Hash-based Message Authentication Code，HMAC)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor">
      <summary>以隨機產生的金鑰初始化 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.#ctor(System.Byte[])">
      <summary>使用指定的金鑰資料初始化 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 類別的新執行個體。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA384" /> 加密的秘密金鑰。 金鑰可以是任何長度。 不過，建議的大小是 128 個位元組。 如果索引鍵長度超過 128 個位元組，就會進行雜湊 (使用 SHA-384) 以衍生 128 位元組金鑰。 如果長度少於 128 個位元組，它會填補為 128 個位元組。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>將寫入物件的資料路由傳送至 HMAC 演算法，以用來計算 HMAC。</summary>
      <param name="rgb">要用來計算 HMAC 的輸入。</param>
      <param name="ib">位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="cb">位元組陣列中要用作資料的位元組數目。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>將寫入物件的資料路由傳送至 HMAC 演算法，以用來計算 HMAC。</summary>
      <param name="source">要用來計算 HMAC 的輸入。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.HashFinal">
      <summary>在演算法處理最後一筆資料之後，完成 HMAC 計算。</summary>
      <returns>位元組陣列中計算出的 HMAC 值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.Initialize">
      <summary>將雜湊演算法重設為其初始狀態。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA384.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>在 HMAC 演算法處理最後一筆資料之後，嘗試完成 HMAC 計算。</summary>
      <param name="destination">要接收 HMAC 值的緩衝區。</param>
      <param name="bytesWritten">當此方法傳回時，為寫入 <paramref name="destination" /> 的位元組總數。 這個參數會被視為未初始化。</param>
      <returns>如果 <paramref name="destination" /> 的長度足以接收 HMAC 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA384.Key">
      <summary>取得或設定要在 HMAC 計算中使用的索引鍵。</summary>
      <returns>要在 HMAC 計算中使用的索引鍵。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA384.ProduceLegacyHmacValues">
      <summary>提供給 <see cref="T:System.Security.Cryptography.HMACSHA384" /> 演算法之 .NET Framework 2.0 實作的因應措施，與演算法的 .NET Framework 2.0 Service Pack 1 實作不一致。</summary>
      <returns>
        <see langword="true" /> 表示讓 .NET Framework 2.0 Service Pack 1 應用程式與 .NET Framework 2.0 應用程式互動，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.HMACSHA512">
      <summary>使用 <see cref="T:System.Security.Cryptography.SHA512" /> 雜湊函式，計算雜湊式訊息驗證碼 (Hash-based Message Authentication Code，HMAC)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor">
      <summary>使用隨機產生的金鑰，初始化 <see cref="T:System.Security.Cryptography.HMACSHA512" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.#ctor(System.Byte[])">
      <summary>使用指定的金鑰資料，初始化 <see cref="T:System.Security.Cryptography.HMACSHA512" /> 類別的新執行個體。</summary>
      <param name="key">
        <see cref="T:System.Security.Cryptography.HMACSHA512" /> 加密的秘密金鑰。 金鑰可以是任何長度。 不過，建議的大小是 128 個位元組。 如果金鑰長度超過 128 個位元組，就會進行雜湊 (使用 SHA-512) 以衍生 128 位元組金鑰。 如果長度少於 128 個位元組，它會填補為 128 個位元組。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Security.Cryptography.HMACSHA512" /> 所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.Byte[],System.Int32,System.Int32)">
      <summary>將寫入物件的資料路由傳送至 HMAC 演算法，以用來計算 HMAC。</summary>
      <param name="rgb">要用來計算 HMAC 的輸入。</param>
      <param name="ib">位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="cb">位元組陣列中要用作資料的位元組數目。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashCore(System.ReadOnlySpan{System.Byte})">
      <summary>將寫入物件的資料路由傳送至 HMAC 演算法，以用來計算 HMAC。</summary>
      <param name="source">要用來計算 HMAC 的輸入。</param>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.HashFinal">
      <summary>在演算法處理最後一筆資料之後，完成 HMAC 計算。</summary>
      <returns>位元組陣列中計算出的 HMAC 值。</returns>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.Initialize">
      <summary>將雜湊演算法重設為其初始狀態。</summary>
    </member>
    <member name="M:System.Security.Cryptography.HMACSHA512.TryHashFinal(System.Span{System.Byte},System.Int32@)">
      <summary>在 HMAC 演算法處理最後一筆資料之後，嘗試完成 HMAC 計算。</summary>
      <param name="destination">要接收 HMAC 值的緩衝區。</param>
      <param name="bytesWritten">當此方法傳回時，為寫入 <paramref name="destination" /> 的位元組總數。 這個參數會被視為未初始化。</param>
      <returns>如果 <paramref name="destination" /> 的長度足以接收 HMAC 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA512.Key">
      <summary>取得或設定要在 HMAC 計算中使用的索引鍵。</summary>
      <returns>要在 HMAC 計算中使用的索引鍵。</returns>
    </member>
    <member name="P:System.Security.Cryptography.HMACSHA512.ProduceLegacyHmacValues">
      <summary>提供 <see cref="T:System.Security.Cryptography.HMACSHA512" /> 演算法的 .NET Framework 2.0實作與 .NET Framework 2.0 Service Pack 1 實作不一致的解決方法。</summary>
      <returns>
        <see langword="true" /> 表示讓 .NET Framework 2.0 Service Pack 1 應用程式與 .NET Framework 2.0 應用程式互動，否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.IncrementalHash">
      <summary>提供支援，以跨多個區段累加計算雜湊或雜湊式訊息驗證碼 (HMAC) 值。</summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[])">
      <summary>將指定的資料附加至已經雜湊或 HMAC 處理的資料尾端。</summary>
      <param name="data">要處理的資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="T:System.Security.Cryptography.IncrementalHash" /> 物件。</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.Byte[],System.Int32,System.Int32)">
      <summary>從指定的位移開始，將來自指定資料的指定位元組數目附加到已經過雜湊或雜湊式訊息驗證碼 (HMAC) 處理的資料。</summary>
      <param name="data">要處理的資料。</param>
      <param name="offset">位元組陣列中的座標，從此處開始使用資料。</param>
      <param name="count">從 <paramref name="data" /> 使用的位元組數。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="count" /> 或 <paramref name="offset" /> 為負。  
  
-或- 
 <paramref name="count" /> 大於 <paramref name="data" /> 的長度。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 和 <paramref name="count" /> 的總和大於資料長度。</exception>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="T:System.Security.Cryptography.IncrementalHash" /> 物件。</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})">
      <summary>將所指定資料附加至已經過雜湊或雜湊式訊息驗證碼 (HMAC) 處理的資料尾端。</summary>
      <param name="data">要處理的資料。</param>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="T:System.Security.Cryptography.IncrementalHash" /> 物件。</exception>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHash(System.Security.Cryptography.HashAlgorithmName)">
      <summary>為指定的演算法建立 <see cref="T:System.Security.Cryptography.IncrementalHash" />。</summary>
      <param name="hashAlgorithm">要執行的雜湊演算法名稱。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或空字串。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> 不是已知的雜湊演算法。</exception>
      <returns>隨時可計算 <paramref name="hashAlgorithm" /> 指定雜湊演算法的 <see cref="T:System.Security.Cryptography.IncrementalHash" /> 執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.Byte[])">
      <summary>為使用指定的雜湊演算法和金鑰的雜湊訊息驗證碼 (HMAC) 演算法建立 <see cref="T:System.Security.Cryptography.IncrementalHash" />。</summary>
      <param name="hashAlgorithm">在 HMAC 內執行的雜湊演算法名稱。</param>
      <param name="key">HMAC 的祕密金鑰。 金鑰可為任意長度，但超過指定雜湊演算法輸出大小的金鑰會被雜湊，以衍生大小正確的金鑰。 因此，建議的祕密金鑰大小是指定的雜湊演算法輸出大小。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或空字串。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> 不是已知的雜湊演算法。</exception>
      <returns>隨時可計算指定雜湊演算法的<see cref="T:System.Security.Cryptography.IncrementalHash" /> 類別的執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.CreateHMAC(System.Security.Cryptography.HashAlgorithmName,System.ReadOnlySpan{System.Byte})">
      <summary>使用由 <paramref name="hashAlgorithm" /> 指定的雜湊演算法，以及由 <paramref name="key" /> 指定的金鑰，為雜湊式訊息驗證碼 (HMAC) 演算法建立 <see cref="T:System.Security.Cryptography.IncrementalHash" />。</summary>
      <param name="hashAlgorithm">在 HMAC 內執行的雜湊演算法名稱。</param>
      <param name="key">HMAC 的祕密金鑰。 金鑰可為任意長度，但系統將會針對超過 <paramref name="hashAlgorithm" /> 指定的雜湊演算法輸出大小的金鑰進行雜湊處理 (使用由 <paramref name="hashAlgorithm" /> 指定的演算法)，以衍生大小正確的金鑰。 因此，建議的祕密金鑰大小是由 <paramref name="hashAlgorithm" /> 指定的雜湊輸出大小。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或空字串。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="hashAlgorithm" /> 不是已知的雜湊演算法。</exception>
      <returns>由 <paramref name="hashAlgorithm" /> 指定來計算雜湊演算法的雜湊執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.Dispose">
      <summary>將 <see cref="T:System.Security.Cryptography.IncrementalHash" /> 類別的目前執行個體所使用的資源釋出。</summary>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetCurrentHash">
      <summary>擷取先前對 <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> 方法的呼叫所累積之資料的雜湊或雜湊式訊息驗證碼 (HMAC)，而不將物件重設為其初始狀態。</summary>
      <exception cref="T:System.ObjectDisposedException">物件已經處置。</exception>
      <returns>已計算的雜湊或 HMAC。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetCurrentHash(System.Span{System.Byte})">
      <summary>擷取先前對 <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> 方法的呼叫所累積之資料的雜湊或雜湊式訊息驗證碼 (HMAC)，而不將物件重設為其初始狀態。</summary>
      <param name="destination">要接收雜湊或 HMAC 值的緩衝區。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 具有小於 <see cref="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes" /> 的 <see cref="P:System.Span`1.Length" /> 值。</exception>
      <exception cref="T:System.ObjectDisposedException">物件已經處置。</exception>
      <returns>寫入至 <paramref name="destination" /> 的位元組數。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset">
      <summary>從先前對 <see cref="Overload:System.Security.Cryptography.IncrementalHash.AppendData" /> 方法的呼叫所累積資料，擷取雜湊或雜湊式訊息驗證碼 (HMAC)，並將物件重設為其初始狀態。</summary>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="T:System.Security.Cryptography.IncrementalHash" /> 物件。</exception>
      <returns>已計算的雜湊或 HMAC。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.GetHashAndReset(System.Span{System.Byte})">
      <summary>擷取先前對 <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> 方法的呼叫所累積之資料的雜湊或雜湊式訊息驗證碼 (HMAC)，並將物件重設為其初始狀態。</summary>
      <param name="destination">要接收雜湊或 HMAC 值的緩衝區。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 具有小於 <see cref="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes" /> 的 <see cref="P:System.Span`1.Length" /> 值。</exception>
      <exception cref="T:System.ObjectDisposedException">物件已經處置。</exception>
      <returns>寫入至 <paramref name="destination" /> 的位元組數。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.TryGetCurrentHash(System.Span{System.Byte},System.Int32@)">
      <summary>嘗試擷取先前對 <see cref="M:System.Security.Cryptography.IncrementalHash.AppendData(System.ReadOnlySpan{System.Byte})" /> 方法的呼叫所累積之資料的雜湊或雜湊式訊息驗證碼 (HMAC)，而不將物件重設為其初始狀態。</summary>
      <param name="destination">要接收雜湊或 HMAC 值的緩衝區。</param>
      <param name="bytesWritten">當此方法傳回時，為寫入 <paramref name="destination" /> 的位元組總數。
這個參數會被視為未初始化。</param>
      <exception cref="T:System.ObjectDisposedException">物件已經處置。</exception>
      <returns>如果 <paramref name="destination" /> 的長度足以接收雜湊或 HMAC 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.IncrementalHash.TryGetHashAndReset(System.Span{System.Byte},System.Int32@)">
      <summary>在雜湊演算法處理最後一筆資料之後，嘗試完成雜湊計算。</summary>
      <param name="destination">要接收雜湊或雜湊式訊息驗證碼 (HMAC) 值的緩衝區。</param>
      <param name="bytesWritten">當此方法傳回時，為寫入 <paramref name="destination" /> 的位元組總數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.ObjectDisposedException">已處置 <see cref="T:System.Security.Cryptography.IncrementalHash" /> 物件。</exception>
      <returns>如果 <paramref name="destination" /> 的長度足以接收雜湊或 HMAC 值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.AlgorithmName">
      <summary>取得正在執行的演算法名稱。 HMAC 演算法前面會加上 "HMAC"，以便與未加上索引鍵的摘要進行區分。</summary>
      <returns>正在執行的演算法名稱。</returns>
    </member>
    <member name="P:System.Security.Cryptography.IncrementalHash.HashLengthInBytes">
      <summary>取得此雜湊或 HMAC 演算法的輸出大小 (以位元組為單位)。</summary>
      <returns>此雜湊或 HMAC 演算法的輸出大小（以位元組為單位）。</returns>
    </member>
    <member name="T:System.Security.Cryptography.MaskGenerationMethod">
      <summary>代表必須從中衍生所有遮罩產生器演算法的抽象類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.MaskGenerationMethod" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>在衍生類別中覆寫時，使用指定的隨機種子，產生指定長度的遮罩。</summary>
      <param name="rgbSeed">要用於計算遮罩的隨機種子。</param>
      <param name="cbReturn">所產生的遮罩長度 (以位元組為單位)。</param>
      <returns>隨機產生的遮罩，其長度等於 <paramref name="cbReturn" /> 參數。</returns>
    </member>
    <member name="T:System.Security.Cryptography.MD5">
      <summary>表示抽象類別 (Abstract Class)，<see cref="T:System.Security.Cryptography.MD5" /> 雜湊演算法的所有實作 (Implementation) 從它繼承。</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.MD5" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create">
      <summary>建立 <see cref="T:System.Security.Cryptography.MD5" /> 雜湊演算法之預設實作的執行個體。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">在已啟用美國聯邦資訊處理標準 (FIPS) 模式的情況下使用演算法，但它與 FIPS 不相容。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.MD5" /> 雜湊演算法的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.Create(System.String)">
      <summary>建立 <see cref="T:System.Security.Cryptography.MD5" /> 雜湊演算法之指定實作的執行個體。</summary>
      <param name="algName">要使用之 <see cref="T:System.Security.Cryptography.MD5" /> 的特定實作的名稱。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <paramref name="algName" /> 參數描述的演算法，在聯邦資訊處理標準 (FIPS) 模式啟用的情況下使用，但是和 FIPS 並不相容。</exception>
      <returns>指定之 <see cref="T:System.Security.Cryptography.MD5" /> 實作的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.Byte[])">
      <summary>使用 MD5 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <returns>資料的雜湊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>使用 MD5 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <returns>資料的雜湊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>使用 MD5 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <param name="destination">要接收雜湊值的緩衝區。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 中的緩衝區太小而無法保存計算的雜湊大小。 MD5 演算法一律會產生 128 位元雜湊，或 16 個位元組。</exception>
      <returns>寫入 <paramref name="destination" /> 的總位元組數。</returns>
    </member>
    <member name="M:System.Security.Cryptography.MD5.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>使用 MD5 演算法嘗試計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <param name="destination">要接收雜湊值的緩衝區。</param>
      <param name="bytesWritten">當此方法傳回時，為寫入 <paramref name="destination" /> 的位元組總數。</param>
      <returns>如果 <paramref name="destination" /> 太小而無法保存計算的雜湊，則為 <see langword="false" />；否則為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.PKCS1MaskGenerationMethod">
      <summary>根據金鑰交換演算法所使用的 PKCS #1，來計算遮罩。</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.PKCS1MaskGenerationMethod" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.PKCS1MaskGenerationMethod.GenerateMask(System.Byte[],System.Int32)">
      <summary>從所指定長度之指定隨機種子，產生並傳回遮罩。</summary>
      <param name="rgbSeed">要用於計算遮罩的隨機種子。</param>
      <param name="cbReturn">所產生的遮罩長度 (以位元組為單位)。</param>
      <returns>隨機產生的遮罩，其長度等於 <paramref name="cbReturn" /> 參數。</returns>
    </member>
    <member name="P:System.Security.Cryptography.PKCS1MaskGenerationMethod.HashName">
      <summary>取得或設定要用於產生遮罩的雜湊演算法類型名稱。</summary>
      <returns>實作要用於計算遮罩之雜湊演算法的類型名稱。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RandomNumberGenerator">
      <summary>表示抽象類別 (Abstract Class)，密碼編譯亂數產生器的所有實作 (Implementation) 從它衍生。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create">
      <summary>建立預設之密碼編譯亂數產生器實作的執行個體，此產生器可以用來產生隨機資料。</summary>
      <returns>密碼編譯亂數產生器的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Create(System.String)">
      <summary>建立指定之密碼編譯亂數產生器實作的執行個體。</summary>
      <param name="rngName">要使用的亂數產生器實作的名稱。</param>
      <returns>密碼編譯亂數產生器的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose">
      <summary>在衍生類別中覆寫時，將目前 <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> 類別的執行個體所使用的所有資源全部釋出。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Dispose(System.Boolean)">
      <summary>當在衍生類別中覆寫時，釋放 <see cref="T:System.Security.Cryptography.RandomNumberGenerator" /> 所使用的 Unmanaged 資源，並選擇性釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.Fill(System.Span{System.Byte})">
      <summary>填入密碼編譯強式隨機位元組的範圍。</summary>
      <param name="data">要填入密碼編譯強式隨機位元組的範圍。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[])">
      <summary>在衍生類別中覆寫時，將在密碼編譯方面強式的隨機值序列填入位元組陣列。</summary>
      <param name="data">要將在密碼編譯方面強式的隨機位元組填入的陣列。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>將在密碼編譯方面強式的隨機值序列填入指定的位元組陣列。</summary>
      <param name="data">要將在密碼編譯方面強式的隨機位元組填入的陣列。</param>
      <param name="offset">要開始填入作業的陣列索引。</param>
      <param name="count">要填入的位元組數目。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 或 <paramref name="count" /> 小於 0</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="offset" /> 加上 <paramref name="count" /> 超過 <paramref name="data" /> 的長度。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetBytes(System.Span{System.Byte})">
      <summary>填入密碼編譯強式隨機位元組的範圍。</summary>
      <param name="data">要填入密碼編譯強式隨機位元組的範圍。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetInt32(System.Int32)">
      <summary>使用密碼編譯強式亂數產生器，產生介於 0 (含) 和指定獨佔上限之間的隨機整數。</summary>
      <param name="toExclusive">隨機範圍的獨佔上限。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> 參數小於或等於 0。</exception>
      <returns>介於 0 (含) 和 <paramref name="toExclusive" /> (獨佔) 之間的隨機整數。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetInt32(System.Int32,System.Int32)">
      <summary>使用密碼編譯強式亂數產生器，在指定下限和指定獨佔上限之間產生隨機整數。</summary>
      <param name="fromInclusive">隨機範圍的內含下限。</param>
      <param name="toExclusive">隨機範圍的獨佔上限。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="toExclusive" /> 參數小於或等於 <paramref name="fromInclusive" /> 參數。</exception>
      <returns>介於 <paramref name="fromInclusive" /> (含) 和 <paramref name="toExclusive" /> (獨佔) 之間的隨機整數。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Byte[])">
      <summary>在衍生類別中覆寫時，將在密碼編譯方面強式的非零值隨機序列填入位元組陣列。</summary>
      <param name="data">要將在密碼編譯方面強式的隨機非零位元組填入的陣列。</param>
    </member>
    <member name="M:System.Security.Cryptography.RandomNumberGenerator.GetNonZeroBytes(System.Span{System.Byte})">
      <summary>填入密碼編譯強式隨機非零值序列位元組的範圍。</summary>
      <param name="data">要填入密碼編譯強式隨機非零位元組的範圍。</param>
    </member>
    <member name="T:System.Security.Cryptography.RC2">
      <summary>表示基底類別，<see cref="T:System.Security.Cryptography.RC2" /> 演算法的所有實作都必須從它衍生。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RC2.EffectiveKeySizeValue">
      <summary>表示 <see cref="T:System.Security.Cryptography.RC2" /> 演算法使用之秘密金鑰的有效大小，以位元為單位。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RC2" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create">
      <summary>建立密碼編譯物件的執行個體，以執行 <see cref="T:System.Security.Cryptography.RC2" /> 演算法。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">在已啟用美國聯邦資訊處理標準 (FIPS) 模式的情況下使用演算法，但它與 FIPS 不相容。</exception>
      <returns>密碼編譯物件的執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RC2.Create(System.String)">
      <summary>建立密碼編譯物件的執行個體來執行 <see cref="T:System.Security.Cryptography.RC2" /> 演算法的指定實作。</summary>
      <param name="AlgName">要使用之 <see cref="T:System.Security.Cryptography.RC2" /> 的特定實作的名稱。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <paramref name="algName" /> 參數描述的演算法，在聯邦資訊處理標準 (FIPS) 模式啟用的情況下使用，但是和 FIPS 並不相容。</exception>
      <returns>密碼編譯物件的執行個體。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RC2.EffectiveKeySize">
      <summary>取得或設定 <see cref="T:System.Security.Cryptography.RC2" /> 演算法使用之秘密金鑰的大小，以位元為單位。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">有效金鑰大小無效。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.RC2" /> 演算法所使用的有效金鑰大小。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RC2.KeySize">
      <summary>取得或設定 <see cref="T:System.Security.Cryptography.RC2" /> 演算法使用之祕密金鑰的大小，以位元為單位。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">RC2 金鑰大小的值小於有效的金鑰大小值。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.RC2" /> 演算法使用之祕密金鑰的大小。</returns>
    </member>
    <member name="T:System.Security.Cryptography.Rfc2898DeriveBytes">
      <summary>依據 <see cref="T:System.Security.Cryptography.HMACSHA1" /> 使用虛擬亂數產生器，實作密碼式的金鑰衍生功能 PBKDF2。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32)">
      <summary>使用密碼、Salt 和反覆計數來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</summary>
      <param name="password">用來衍生金鑰的密碼。</param>
      <param name="salt">用來衍生金鑰的金鑰 Salt。</param>
      <param name="iterations">操作的重複次數。</param>
      <exception cref="T:System.ArgumentException">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</exception>
      <exception cref="T:System.ArgumentNullException">密碼或 Salt 是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.Byte[],System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>將 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體初始化，該類別使用指定的密碼、salt、反覆項目數和雜湊演算法名稱來衍生金鑰。</summary>
      <param name="password">用來衍生金鑰的密碼。</param>
      <param name="salt">用來衍生金鑰的金鑰 Salt。</param>
      <param name="iterations">操作的重複次數。</param>
      <param name="hashAlgorithm">要用來衍生金鑰的雜湊演算法。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="saltSize" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 屬性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊演算法名稱無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[])">
      <summary>使用密碼和 Salt 來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</summary>
      <param name="password">用來衍生金鑰的密碼。</param>
      <param name="salt">用來衍生金鑰的金鑰 Salt。</param>
      <exception cref="T:System.ArgumentException">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</exception>
      <exception cref="T:System.ArgumentNullException">密碼或 Salt 是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32)">
      <summary>使用密碼、Salt 和反覆計數來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</summary>
      <param name="password">用來衍生金鑰的密碼。</param>
      <param name="salt">用來衍生金鑰的金鑰 Salt。</param>
      <param name="iterations">操作的重複次數。</param>
      <exception cref="T:System.ArgumentException">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</exception>
      <exception cref="T:System.ArgumentNullException">密碼或 Salt 是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Byte[],System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>將 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體初始化，該類別使用指定的密碼、salt、反覆項目數和雜湊演算法名稱來衍生金鑰。</summary>
      <param name="password">用來衍生金鑰的密碼。</param>
      <param name="salt">用來衍生金鑰的金鑰 Salt。</param>
      <param name="iterations">操作的重複次數。</param>
      <param name="hashAlgorithm">要用來衍生金鑰的雜湊演算法。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 屬性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊演算法名稱無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32)">
      <summary>使用密碼和 Salt 大小來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</summary>
      <param name="password">用來衍生金鑰的密碼。</param>
      <param name="saltSize">您希望此類別產生之隨機 Salt 的大小。</param>
      <exception cref="T:System.ArgumentException">指定的 Salt 大小小於 8 個位元組。</exception>
      <exception cref="T:System.ArgumentNullException">密碼或 Salt 是 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32)">
      <summary>使用密碼、Salt 大小和反覆計數來衍生金鑰，以初始化 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體。</summary>
      <param name="password">用來衍生金鑰的密碼。</param>
      <param name="saltSize">您希望此類別產生之隨機 Salt 的大小。</param>
      <param name="iterations">操作的重複次數。</param>
      <exception cref="T:System.ArgumentException">指定的 Salt 大小小於 8 個位元組，或反覆計數小於 1。</exception>
      <exception cref="T:System.ArgumentNullException">密碼或 Salt 是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="iterations" /> 超出範圍。 這個參數需要非負數的數字。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.#ctor(System.String,System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>將 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別的新執行個體初始化，該類別使用指定的密碼、salt 大小、反覆項目數和雜湊演算法名稱來衍生金鑰。</summary>
      <param name="password">用來衍生金鑰的密碼。</param>
      <param name="saltSize">您希望此類別產生之隨機 Salt 的大小。</param>
      <param name="iterations">操作的重複次數。</param>
      <param name="hashAlgorithm">要用來衍生金鑰的雜湊演算法。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="saltSize" /> 小於零。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 屬性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">雜湊演算法名稱無效。</exception>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.CryptDeriveKey(System.String,System.String,System.Int32,System.Byte[])">
      <summary>從 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 物件衍生密碼編譯金鑰。</summary>
      <param name="algname">用來衍生金鑰的演算法名稱。</param>
      <param name="alghashname">要用來衍生金鑰的雜湊演算法名稱。</param>
      <param name="keySize">要衍生的金鑰大小 (以位元為單位)。</param>
      <param name="rgbIV">用來衍生金鑰的初始化向量 (IV)。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="keySize" /> 參數不正確。  
  
-或- 
無法取得密碼編譯服務提供者 (CSP)。  
  
-或- 
<paramref name="algname" /> 參數不是有效的演算法名稱。  
  
-或- 
<paramref name="alghashname" /> 參數不是有效的雜湊演算法名稱。</exception>
      <returns>所衍生金鑰。</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Dispose(System.Boolean)">
      <summary>釋放 <see cref="T:System.Security.Cryptography.Rfc2898DeriveBytes" /> 類別所使用的 Unmanaged 資源，並選擇性地釋放 Managed 資源。</summary>
      <param name="disposing">
        <see langword="true" /> 表示釋放 Managed 和 Unmanaged 資源，<see langword="false" /> 則表示只釋放 Unmanaged 資源。</param>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.GetBytes(System.Int32)">
      <summary>傳回這個物件的似隨機金鑰。</summary>
      <param name="cb">要產生的似隨機金鑰位元組數量。</param>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="cb" /> 超出範圍。 這個參數需要非負數的數字。</exception>
      <returns>位元組陣列，以虛擬隨機金鑰位元組填入。</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rfc2898DeriveBytes.Reset">
      <summary>重設作業的狀態。</summary>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.HashAlgorithm" />
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.IterationCount">
      <summary>取得或設定操作的重複次數。</summary>
      <exception cref="T:System.ArgumentOutOfRangeException">反覆計數小於 1。</exception>
      <returns>操作的重複次數。</returns>
    </member>
    <member name="P:System.Security.Cryptography.Rfc2898DeriveBytes.Salt">
      <summary>取得或設定用於操作的金鑰 Salt 值。</summary>
      <exception cref="T:System.ArgumentException">指定的 Salt 大小小於 8 個位元組。</exception>
      <exception cref="T:System.ArgumentNullException">Salt 是 <see langword="null" />。</exception>
      <returns>用於操作的金鑰 Salt 值。</returns>
    </member>
    <member name="T:System.Security.Cryptography.Rijndael">
      <summary>表示 <see cref="T:System.Security.Cryptography.Rijndael" /> 對稱加密 (Encryption) 演算法的所有實作 (Implementation) 必須繼承的來源基底類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.Rijndael" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create">
      <summary>建立密碼編譯物件，執行 <see cref="T:System.Security.Cryptography.Rijndael" /> 演算法。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">在已啟用美國聯邦資訊處理標準 (FIPS) 模式的情況下使用演算法，但它與 FIPS 不相容。</exception>
      <returns>密碼編譯物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.Rijndael.Create(System.String)">
      <summary>建立密碼編譯物件，執行 <see cref="T:System.Security.Cryptography.Rijndael" /> 演算法的指定實作。</summary>
      <param name="algName">要建立的 <see cref="T:System.Security.Cryptography.Rijndael" /> 指定實作名稱。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <paramref name="algName" /> 參數描述的演算法，在聯邦資訊處理標準 (FIPS) 模式啟用的情況下使用，但是和 FIPS 並不相容。</exception>
      <returns>密碼編譯物件。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RijndaelManaged">
      <summary>存取 <see cref="T:System.Security.Cryptography.Rijndael" /> 演算法的 Managed 版本。 此類別無法獲得繼承。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RijndaelManaged" /> 類別的新執行個體。</summary>
      <exception cref="T:System.InvalidOperationException">此類別與 FIPS 演算法不相容。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor">
      <summary>使用目前的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 屬性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)，建立對稱解密子物件。</summary>
      <returns>對稱解密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateDecryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.Rijndael" /> 和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />)，建立對稱 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" /> 解密子物件。</summary>
      <param name="rgbKey">秘密金鑰，提供給對稱演算法使用。 金鑰大小必須是 128、192 或 256 位元。</param>
      <param name="rgbIV">IV，提供給對稱演算法使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> 參數為 <see langword="null" />。  
  
-或- 
<paramref name="rgbIV" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 屬性的值不是 <see cref="F:System.Security.Cryptography.CipherMode.ECB" />、<see cref="F:System.Security.Cryptography.CipherMode.CBC" /> 或 <see cref="F:System.Security.Cryptography.CipherMode.CFB" />。</exception>
      <returns>對稱 <see cref="T:System.Security.Cryptography.Rijndael" /> 解密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor">
      <summary>使用目前的 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" /> 屬性和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)，建立對稱加密子物件。</summary>
      <returns>對稱加密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.CreateEncryptor(System.Byte[],System.Byte[])">
      <summary>使用指定的 <see cref="T:System.Security.Cryptography.Rijndael" /> 和初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />)，建立對稱 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" /> 加密子物件。</summary>
      <param name="rgbKey">秘密金鑰，提供給對稱演算法使用。 金鑰大小必須是 128、192 或 256 位元。</param>
      <param name="rgbIV">IV，提供給對稱演算法使用。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbKey" /> 參數為 <see langword="null" />。  
  
-或- 
<paramref name="rgbIV" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Mode" /> 屬性的值不是 <see cref="F:System.Security.Cryptography.CipherMode.ECB" />、<see cref="F:System.Security.Cryptography.CipherMode.CBC" /> 或 <see cref="F:System.Security.Cryptography.CipherMode.CFB" />。</exception>
      <returns>對稱 <see cref="T:System.Security.Cryptography.Rijndael" /> 加密子物件。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateIV">
      <summary>產生要使用於該演算法的隨機初始化向量 (<see cref="P:System.Security.Cryptography.SymmetricAlgorithm.IV" />)。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RijndaelManaged.GenerateKey">
      <summary>產生要使用於該演算法的隨機 <see cref="P:System.Security.Cryptography.SymmetricAlgorithm.Key" />。</summary>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.BlockSize">
      <summary>取得或設定密碼編譯作業的區塊大小，以位元為單位。</summary>
      <returns>密碼編譯作業的區塊大小，以位為單位。 預設值為128位。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.IV">
      <summary>取得或設定對稱演算法的初始化向量 (IV)。</summary>
      <returns>用於對稱演算法的初始化向量 (IV) 。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Key">
      <summary>取得或設定用於對稱演算法的秘密金鑰。</summary>
      <returns>用於對稱演算法的秘密金鑰。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.KeySize">
      <summary>取得或設定用於對稱演算法之秘密金鑰的大小，以位元為單位。</summary>
      <returns>對稱演算法使用之秘密金鑰的大小（以位為單位）。 預設值為256位。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.LegalKeySizes">
      <summary>取得對稱演算法所支援的金鑰大小，以位元為單位。</summary>
      <returns>對稱演算法所支援的金鑰大小（以位為單位）。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Mode">
      <summary>取得或設定對稱演算法的作業模式。</summary>
      <returns>對稱演算法的作業模式。 預設值為 <see cref="F:System.Security.Cryptography.CipherMode.CBC" /></returns>
    </member>
    <member name="P:System.Security.Cryptography.RijndaelManaged.Padding">
      <summary>取得或設定對稱演算法中使用的填補模式。</summary>
      <returns>對稱演算法中使用的填補模式。 預設為 <see cref="F:System.Security.Cryptography.PaddingMode.PKCS7" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSA">
      <summary>表示基底類別，<see cref="T:System.Security.Cryptography.RSA" /> 演算法的所有實作都會從它衍生。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSA" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create">
      <summary>建立 <see cref="T:System.Security.Cryptography.RSA" /> 演算法之預設實作的執行個體。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> 之預設實作的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Int32)">
      <summary>使用指定的金鑰大小建立新的暫時 RSA 金鑰。</summary>
      <param name="keySizeInBits">金鑰大小 (位元)。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">預設實作不支援 <paramref name="keySizeInBits" />。</exception>
      <returns>具有指定金鑰大小的新暫時 RSA 金鑰。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.Security.Cryptography.RSAParameters)">
      <summary>以指定的 RSA 金鑰參數建立新的暫時 RSA 金鑰。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.RSA" /> 演算法的參數。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="parameters" /> 不代表有效的 RSA 金鑰。</exception>
      <returns>新的暫時 RSA 金鑰。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Create(System.String)">
      <summary>建立 <see cref="T:System.Security.Cryptography.RSA" /> 之指定實作的執行個體。</summary>
      <param name="algName">要使用之 <see cref="T:System.Security.Cryptography.RSA" /> 的實作的名稱。</param>
      <returns>指定之 <see cref="T:System.Security.Cryptography.RSA" /> 實作的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Decrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>使用指定的填補模式在衍生類別中覆寫，解密輸入的資料。</summary>
      <param name="data">要解密的資料。</param>
      <param name="padding">填補模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。

-或-

<paramref name="data" /> 的長度不等於 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> 的位元組數目。

-或-

這個執行個體只表示公開金鑰。 

-或-

解密作業失敗。</exception>
      <returns>已解密的資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.DecryptValue(System.Byte[])">
      <summary>在衍生類別中覆寫時，使用私密金鑰解密輸入資料。</summary>
      <param name="rgb">要解密的密碼文字。</param>
      <exception cref="T:System.NotSupportedException">不支援這個方法呼叫。 從 .NET Framework 4.6 開始，會擲回這個例外狀況。</exception>
      <returns>所產生之純文字的 <paramref name="rgb" /> 參數解密。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.Encrypt(System.Byte[],System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>使用指定的填補模式在衍生類別中覆寫，加密輸入的資料。</summary>
      <param name="data">要加密的資料。</param>
      <param name="padding">填補模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。

-或-

<paramref name="data" /> 長度太長，不適合 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> 和所選填補的組合。

-或-

加密作業失敗。</exception>
      <returns>已加密的資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.EncryptValue(System.Byte[])">
      <summary>在衍生類別中覆寫時，使用公開金鑰加密輸入資料。</summary>
      <param name="rgb">要加密的純文字。</param>
      <exception cref="T:System.NotSupportedException">不支援這個方法呼叫。 從 .NET Framework 4.6 開始，會擲回這個例外狀況。</exception>
      <returns>所產生之密碼文字的 <paramref name="rgb" /> 參數加密。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportParameters(System.Boolean)">
      <summary>在衍生類別中覆寫時，會匯出 <see cref="T:System.Security.Cryptography.RSAParameters" />。</summary>
      <param name="includePrivateParameters">如果要包含私用參數，則為 <see langword="true" />；否則為 <see langword="false" />。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出參數。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.RSA" /> 的參數。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportRSAPrivateKey">
      <summary>以 PKCS#1 RSAPrivateKey 格式匯出目前金鑰。</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>位元組陣列，其中包含此金鑰的 PKCS#1 RSAPrivateKey 表示。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ExportRSAPublicKey">
      <summary>以 PKCS#1 RSAPublicKey 格式匯出目前金鑰的公開金鑰部分。</summary>
      <returns>位元組陣列，其中包含此金鑰的 PKCS#1 RSAPublicKey 表示。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.FromXmlString(System.String)">
      <summary>從 XML 字串的金鑰資訊初始化 <see cref="T:System.Security.Cryptography.RSA" /> 物件。</summary>
      <param name="xmlString">包含 <see cref="T:System.Security.Cryptography.RSA" /> 金鑰資訊的 XML 字串。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="xmlString" /> 參數為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="xmlString" /> 參數的格式無效。</exception>
      <exception cref="T:System.PlatformNotSupportedException">僅限 .NET Core：不支援此成員。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)">
      <summary>在衍生類別中覆寫時，會使用指定的雜湊演算法，來為位元組陣列中的指定部分計算出雜湊值。</summary>
      <param name="data">要雜湊的資料。</param>
      <param name="offset">在 <paramref name="data" /> 中要雜湊的第一個位元組索引。</param>
      <param name="count">要雜湊的位元組數。</param>
      <param name="hashAlgorithm">要用來雜湊資料的演算法。</param>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <returns>已雜湊的資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)">
      <summary>在衍生類別中覆寫時，會使用指定的雜湊演算法，來為指定的二進位資料流計算出雜湊值。</summary>
      <param name="data">要雜湊的二進位資料流。</param>
      <param name="hashAlgorithm">雜湊演算法。</param>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <returns>已雜湊的資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用位元組型密碼解密之後，從 PKCS#8 EncryptedPrivateKeyInfo 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="passwordBytes">解密金鑰內容時要用作密碼的位元組。</param>
      <param name="source">以 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="source" /> 的內容指出要套用的金鑰衍生函數 (Key Derivation Function) (KDF) 是舊版 PKCS#12 KDF，這需要 <see cref="T:System.Char" /> 型密碼。

-或-

<paramref name="source" /> 的內容不表示 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>使用 Char 型密碼解密之後，從 PKCS#8 EncryptedPrivateKeyInfo 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="password">要用於解密金鑰產製原料的密碼。</param>
      <param name="source">以 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="source" /> 的內容不表示 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Byte})">
      <summary>匯入 RFC 7468 PEM 編碼的加密私密金鑰，並取代這個物件的金鑰。</summary>
      <param name="input">要匯入的加密金鑰 PEM 文字。</param>
      <param name="passwordBytes">解密金鑰產製原料時要用作密碼的位元組。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含具有辨識標籤的 PEM 編碼金鑰。

-或-

<paramref name="input" /> 包含多個具有辨識標籤的 PEM 編碼金鑰。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，不代表 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，代表非支援格式的金鑰。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromEncryptedPem(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
      <summary>匯入 RFC 7468 PEM 編碼的加密私密金鑰，並取代這個物件的金鑰。</summary>
      <param name="input">要匯入的加密金鑰 PEM 文字。</param>
      <param name="password">要用於解密金鑰產製原料的密碼。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含具有辨識標籤的 PEM 編碼金鑰。

-或-

<paramref name="input" /> 包含多個具有辨識標籤的 PEM 編碼金鑰。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">密碼不正確。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，不代表 ASN.1-BER 編碼的 PKCS#8 EncryptedPrivateKeyInfo 結構。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="input" /> 中 PEM 文字的 Base-64 解碼內容，代表非支援格式的金鑰。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportFromPem(System.ReadOnlySpan{System.Char})">
      <summary>匯入 RFC 7468 PEM 編碼的金鑰，並取代這個物件的金鑰。</summary>
      <param name="input">要匯入的金鑰 PEM 文字。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="input" /> 不包含具有辨識標籤的 PEM 編碼金鑰。

-或-

<paramref name="input" /> 包含多個具有辨識標籤的 PEM 編碼金鑰。

-或-

<paramref name="input" /> 包含 PEM 編碼的加密金鑰。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportParameters(System.Security.Cryptography.RSAParameters)">
      <summary>在衍生類別中覆寫時，會匯入指定的 <see cref="T:System.Security.Cryptography.RSAParameters" />。</summary>
      <param name="parameters">
        <see cref="T:System.Security.Cryptography.RSA" /> 的參數。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密後，從 PKCS#8 PrivateKeyInfo 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="source">以 ASN.1-BER 編碼的 PKCS#8 PrivateKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的內容不表示 ASN.1-BER 編碼的 PKCS#8 PrivateKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportRSAPrivateKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密後，從 PKCS#1 RSAPrivateKey 結構匯入公開/私密金鑰組，以取代這個物件的金鑰。</summary>
      <param name="source">以 ASN.1-BER 編碼的 PKCS#1 RSAPrivateKey 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 內容不表示 ASN.1-BER 編碼的 PKCS#1 RSAPrivateKey 結構。

-或-

金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportRSAPublicKey(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密後，從 PKCS#1 RSAPublicKey 結構匯入公開金鑰，以取代這個物件的金鑰。</summary>
      <param name="source">以 ASN.1-BER 編碼的 PKCS#1 RSAPublicKey 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 內容不表示 ASN.1-BER 編碼的 PKCS#1 RSAPublicKey 結構。

-或-

金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ImportSubjectPublicKeyInfo(System.ReadOnlySpan{System.Byte},System.Int32@)">
      <summary>解密後，從 X.509 SubjectPublicKeyInfo 結構匯入公開金鑰，以取代這個物件的金鑰。</summary>
      <param name="source">以 ASN.1-DER 編碼的 X.509 SubjectPublicKeyInfo 結構位元組。</param>
      <param name="bytesRead">當此方法傳回時，會包含一個值，指出讀取自 <paramref name="source" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="source" /> 的內容不表示 ASN.1-DER 編碼的 X.509 SubjectPublicKeyInfo 結構。

-或-

<paramref name="source" /> 的內容指出金鑰適用於這個執行個體所表示演算法以外的演算法。

-或-

<paramref name="source" /> 的內容表示金鑰的格式不受支援。

-或-

演算法專屬金鑰匯入失敗。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>使用指定的雜湊演算法和填補模式，並簽署產生的雜湊值，來為指定的部分位元組陣列計算出雜湊值。</summary>
      <param name="data">要雜湊處理和簽章的輸入資料。</param>
      <param name="offset">這個陣列中的位移，在此處開始使用資料。</param>
      <param name="count">陣列中要用作資料的位元組數目。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="padding">填補模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小於零。  
  
-或- 
 <paramref name="count" /> 小於零。  
  
-或- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 產生的索引超出 <paramref name="data" /> 上限。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。

-或-

這個執行個體只表示公開金鑰。

-或-

建立簽章時發生錯誤。</exception>
      <returns>指定資料的 RSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>使用指定的雜湊演算法和填補模式，並簽署產生的雜湊值，來為指定的位元組陣列計算出雜湊值。</summary>
      <param name="data">要雜湊處理和簽章的輸入資料。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="padding">填補模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。

-或-

這個執行個體只表示公開金鑰。

-或-

建立簽章時發生錯誤。</exception>
      <returns>指定資料的 RSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>使用指定的雜湊演算法和填補模式，並簽署產生的雜湊值，來為指定的資料流計算出雜湊值。</summary>
      <param name="data">要雜湊處理和簽章的輸入輸入資料流。</param>
      <param name="hashAlgorithm">要用來建立雜湊值的雜湊演算法。</param>
      <param name="padding">填補模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。

-或-

這個執行個體只表示公開金鑰。

-或-

建立簽章時發生錯誤。</exception>
      <returns>指定資料的 RSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.SignHash(System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>在衍生類別中覆寫時，針對指定雜湊值的簽章，使用指定的填補來計算。</summary>
      <param name="hash">要簽署之資料的雜湊值。</param>
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <param name="padding">填補。</param>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 或 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。

-或-

這個執行個體只表示公開金鑰。

-或-

建立簽章時發生錯誤。</exception>
      <returns>指定雜湊值的 RSA 簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.ToXmlString(System.Boolean)">
      <summary>建立並傳回 XML 字串，其中包含目前 <see cref="T:System.Security.Cryptography.RSA" /> 物件的金鑰。</summary>
      <param name="includePrivateParameters">若是 <see langword="true" /> 則會加入公開和私密 RSA 金鑰；<see langword="false" /> 則只會加入公開金鑰。</param>
      <exception cref="T:System.PlatformNotSupportedException">僅限 .NET Core：不支援此成員。</exception>
      <returns>XML 字串，其中包含目前 <see cref="T:System.Security.Cryptography.RSA" /> 物件的金鑰。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryDecrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <summary>使用指定的填補模式，將結果寫入提供的緩衝區，以嘗試解密輸入資料。</summary>
      <param name="data">要解密的資料。</param>
      <param name="destination">接收解密資料的緩衝區。</param>
      <param name="padding">填補模式。</param>
      <param name="bytesWritten">當這個方法傳回時，寫入 <paramref name="destination" /> 的位元組總數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。

-或-

<paramref name="data" /> 的長度不等於 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> 的位元組數目。

-或-

這個執行個體只表示公開金鑰。 

-或-

解密作業失敗。</exception>
      <returns>如果 <paramref name="destination" /> 的長度足以接收解密的資料，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryEncrypt(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.RSAEncryptionPadding,System.Int32@)">
      <summary>使用指定的填補模式，嘗試加密所提供緩衝區中的輸入資料。</summary>
      <param name="data">要加密的資料。</param>
      <param name="destination">接收加密資料的緩衝區。</param>
      <param name="padding">填補模式。</param>
      <param name="bytesWritten">當這個方法傳回時，寫入 <paramref name="destination" /> 的位元組總數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。

-或-

<paramref name="data" /> 長度太長，不適合 <see cref="P:System.Security.Cryptography.AsymmetricAlgorithm.KeySize" /> 和所選填補的組合。

-或-

加密作業失敗。</exception>
      <returns>如果 <paramref name="destination" /> 的長度足以接收加密的資料，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Byte},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>使用位元組型密碼，嘗試以 PKCS#8 EncryptedPrivateKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="passwordBytes">加密金鑰內容時要用作密碼的位元組。</param>
      <param name="pbeParameters">加密金鑰內容時要使用的密碼型加密 (PBE) 參數。</param>
      <param name="destination">要接收 PKCS#8 EncryptedPrivateKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。

-或-

<paramref name="pbeParameters" /> 指出應該使用 <see cref="F:System.Security.Cryptography.PbeEncryptionAlgorithm.TripleDes3KeyPkcs12" />，這需要 <see cref="T:System.Char" /> 型密碼。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportEncryptedPkcs8PrivateKey(System.ReadOnlySpan{System.Char},System.Security.Cryptography.PbeParameters,System.Span{System.Byte},System.Int32@)">
      <summary>使用 Char 型密碼，嘗試以 PKCS#8 EncryptedPrivateKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="password">加密金鑰產製原料時要使用的密碼。</param>
      <param name="pbeParameters">加密金鑰產製原料時要使用的密碼型加密 (PBE) 參數。</param>
      <param name="destination">要接收 PKCS#8 EncryptedPrivateKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportPkcs8PrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>嘗試以 PKCS#8 PrivateKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="destination">要接收 PKCS#8 PrivateKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportRSAPrivateKey(System.Span{System.Byte},System.Int32@)">
      <summary>嘗試以 PKCS#1 RSAPrivateKey 格式將目前金鑰匯出至提供的緩衝區。</summary>
      <param name="destination">要接收 PKCS#1 RSAPrivateKey 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportRSAPublicKey(System.Span{System.Byte},System.Int32@)">
      <summary>嘗試以 PKCS#1 RSAPublicKey 格式將目前金鑰匯出至提供的緩衝區。</summary>
      <param name="destination">要接收 PKCS#1 RSAPublicKey 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryExportSubjectPublicKeyInfo(System.Span{System.Byte},System.Int32@)">
      <summary>嘗試以 X.509 SubjectPublicKeyInfo 格式將目前的金鑰匯出至提供的緩衝區。</summary>
      <param name="destination">要接收 X.509 SubjectPublicKeyInfo 資料的位元組範圍。</param>
      <param name="bytesWritten">當此方法傳回時，會包含一個值，指出寫入 <paramref name="destination" /> 的位元組數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">無法匯出金鑰。</exception>
      <returns>若 <paramref name="destination" /> 夠大可接收輸出，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Int32@)">
      <summary>使用指定的演算法來，將結果寫入提供的緩衝區，以嘗試計算所提供資料的雜湊。</summary>
      <param name="data">要雜湊的資料。</param>
      <param name="destination">要接收雜湊值的緩衝區。</param>
      <param name="hashAlgorithm">要用來雜湊資料的演算法。</param>
      <param name="bytesWritten">當這個方法傳回時，寫入 <paramref name="destination" /> 的位元組總數。 這個參數會被視為未初始化。</param>
      <returns>如果 <paramref name="destination" /> 的長度足以接收雜湊值，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TrySignData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <summary>使用所指定演算法並使用目前的金鑰簽署雜湊，將簽章寫入提供的緩衝區，以嘗試雜湊處理所提供的資料。</summary>
      <param name="data">要雜湊處理和簽章的輸入資料。</param>
      <param name="destination">要接收 RSA 簽章的緩衝區。</param>
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <param name="padding">填補模式。</param>
      <param name="bytesWritten">當這個方法傳回時，寫入 <paramref name="destination" /> 的位元組總數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">這個執行個體只表示公開金鑰。

-或-

建立簽章時發生錯誤。</exception>
      <returns>如果 <paramref name="destination" /> 的長度足以接收 RSA 簽章，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.TrySignHash(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding,System.Int32@)">
      <summary>將簽章寫入提供的緩衝區，嘗試以目前的金鑰簽署雜湊。</summary>
      <param name="hash">要簽署之資料的雜湊值。</param>
      <param name="destination" />
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <param name="padding">填補。</param>
      <param name="bytesWritten">當這個方法傳回時，寫入 <paramref name="destination" /> 的位元組總數。 這個參數會被視為未初始化。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。

-或-

這個執行個體只表示公開金鑰。

-或-

建立簽章時發生錯誤。</exception>
      <returns>如果 <paramref name="destination" /> 的長度足以接收 RSA 簽章，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>使用指定的雜湊演算法和填補，並和提供的簽章比較，來為指定的資料計算出雜湊值，藉此驗證數位簽章是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章資料。</param>
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <param name="padding">填補模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="signature" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。</exception>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>使用指定的雜湊演算法和填補，並和提供的簽章比較，來為指定的部分位元組陣列計算出資料的雜湊值，便藉此驗證數位簽章是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="offset">用來計算雜湊值的起始索引。</param>
      <param name="count">要雜湊的位元組數。</param>
      <param name="signature">要驗證的簽章資料。</param>
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <param name="padding">填補模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="signature" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="offset" /> 小於零。  
  
-或- 
 <paramref name="count" /> 小於零。  
  
-或- 
 <paramref name="offset" /> + <paramref name="count" /> - 1 產生的索引超出 <paramref name="data" /> 上限。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。</exception>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>使用指定的雜湊演算法和填補，並和提供的簽章比較，來為指定的資料流計算出雜湊值，藉此驗證數位簽章是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章資料。</param>
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <param name="padding">填補模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="data" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="signature" /> 為 <see langword="null" />。  
  
-或- 
 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。</exception>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyData(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>使用指定的雜湊演算法和填補，並和提供的簽章比較，來為指定的資料計算出雜湊值，藉此驗證數位簽章是否有效。</summary>
      <param name="data">已簽署的資料。</param>
      <param name="signature">要驗證的簽章資料。</param>
      <param name="hashAlgorithm">用來建立該資料雜湊值的雜湊演算法。</param>
      <param name="padding">填補模式。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。</exception>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>使用指定的雜湊演算法和填補，並和提供的雜湊值比較，來為簽章判斷雜湊值，藉此驗證數位簽章是否有效。</summary>
      <param name="hash">已簽署資料的雜湊值。</param>
      <param name="signature">要驗證的簽章資料。</param>
      <param name="hashAlgorithm">用來建立該雜湊值的雜湊演算法。</param>
      <param name="padding">填補模式。</param>
      <exception cref="T:System.NotImplementedException">衍生的類別必須覆寫這個方法。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 或 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。</exception>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSA.VerifyHash(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Security.Cryptography.HashAlgorithmName,System.Security.Cryptography.RSASignaturePadding)">
      <summary>使用指定的雜湊演算法和填補，並和提供的雜湊值比較，來為簽章判斷雜湊值，藉此驗證數位簽章是否有效。</summary>
      <param name="hash">已簽署資料的雜湊值。</param>
      <param name="signature">要驗證的簽章資料。</param>
      <param name="hashAlgorithm">用來建立該雜湊值的雜湊演算法。</param>
      <param name="padding">填補模式。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="hash" /> 或 <paramref name="padding" /> 為 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" />.<see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 為 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="padding" /> 未知，或不支援此實作。</exception>
      <returns>如果簽章有效則為 <see langword="true" />，否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSA.KeyExchangeAlgorithm">
      <summary>取得可透過這個 <see cref="T:System.Security.Cryptography.RSA" /> 實作所提供之金鑰交換演算法的名稱。</summary>
      <returns>傳回 "RSA"。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSA.SignatureAlgorithm">
      <summary>取得可透過這個 <see cref="T:System.Security.Cryptography.RSA" /> 實作所提供之簽章演算法的名稱。</summary>
      <returns>傳回 "RSA"。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPadding">
      <summary>指定要用於 RSA 加密或解密作業的填補模式和參數。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.CreateOaep(System.Security.Cryptography.HashAlgorithmName)">
      <summary>建立新的 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 執行個體，其 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> 是 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" /> 與指定的雜湊演算法。</summary>
      <param name="hashAlgorithm">雜湊演算法。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="hashAlgorithm" /> 的 <see cref="P:System.Security.Cryptography.HashAlgorithmName.Name" /> 屬性是 <see langword="null" /> 或 <see cref="F:System.String.Empty" />。</exception>
      <returns>模式為 <see cref="P:System.Security.Cryptography.RSAEncryptionPadding.Mode" /> 的物件是 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" />其具有 <paramref name="hashAlgorithm" /> 所指定的雜湊演算法。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Object)">
      <summary>判斷目前的執行個體與所指定物件是否相等。</summary>
      <param name="obj">要比較的物件。</param>
      <returns>如果 <paramref name="obj" /> 等於目前的執行個體，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.Equals(System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>判斷目前的執行個體與所指定 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 物件是否相等。</summary>
      <param name="other">要比較的物件。</param>
      <returns>如果 <paramref name="other" /> 等於目前的執行個體，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.GetHashCode">
      <summary>傳回這個 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 物件的雜湊碼。</summary>
      <returns>這個執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Equality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>表示兩個指定的 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 物件是否相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="left" /> 和 <see langword="right" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.op_Inequality(System.Security.Cryptography.RSAEncryptionPadding,System.Security.Cryptography.RSAEncryptionPadding)">
      <summary>表示兩個指定的 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 物件是否不相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="left" /> 和 <see langword="right" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAEncryptionPadding.ToString">
      <summary>傳回目前 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 執行個體的字串表示。</summary>
      <returns>目前物件的字串表示。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Mode">
      <summary>取得由這個 <see cref="T:System.Security.Cryptography.RSAEncryptionPadding" /> 執行個體所表示的填補模式。</summary>
      <returns>填補模式。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepHashAlgorithm">
      <summary>取得搭配 <see cref="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep" /> 填補模式使用的雜湊演算法。</summary>
      <returns>雜湊演算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA1">
      <summary>取得物件，這個物件代表使用 SHA1 雜湊演算法的最佳非對稱式加密填補 (OAEP) 加密標準。</summary>
      <returns>物件，代表使用 SHA1 雜湊演算法的 OAEP 加密標準。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA256">
      <summary>取得物件，這個物件代表使用 SHA256 雜湊演算法的最佳非對稱式加密填補 (OAEP) 加密標準。</summary>
      <returns>物件，代表使用 SHA256 雜湊演算法的 OAEP 加密標準。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA384">
      <summary>取得物件，這個物件代表使用 SHA-384 雜湊演算法的最佳非對稱式加密填補 (OAEP) 加密標準。</summary>
      <returns>代表使用 SHA384 雜湊演算法之 OAEP 加密標準的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.OaepSHA512">
      <summary>取得物件，這個物件代表使用 SHA512 雜湊演算法的最佳非對稱式加密填補 (OAEP) 加密標準。</summary>
      <returns>物件，代表使用 SHA512 雜湊演算法的 OAEP 加密標準。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAEncryptionPadding.Pkcs1">
      <summary>取得代表 PKCS #1 加密標準的物件。</summary>
      <returns>代表 PKCS #1 加密標準的物件。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAEncryptionPaddingMode">
      <summary>指定要用於 RSA 加密或解密作業的填補模式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Oaep">
      <summary>最佳非對稱加密填補。 建議新的應用程式使用此選項。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAEncryptionPaddingMode.Pkcs1">
      <summary>PKCS #1 v1.5。 我們因為要與現有應用程式相容而支援它。</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter">
      <summary>解密最佳非對稱加密填補 (OAEP) 金鑰交換資料。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的金鑰，初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter" /> 類別的新執行個體。</summary>
      <param name="key">持有私密金鑰的 <see cref="T:System.Security.Cryptography.RSA" /> 演算法執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>從加密的金鑰交換資料中擷取秘密資訊。</summary>
      <param name="rgbData">隱藏秘密資訊的金鑰交換資料。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">金鑰交換資料驗證失敗。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">遺漏金鑰。</exception>
      <returns>從金鑰交換資料中衍生的秘密資訊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>設定要用來解密機密資訊的私密金鑰。</summary>
      <param name="key">持有私密金鑰的 <see cref="T:System.Security.Cryptography.RSA" /> 演算法執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeDeformatter.Parameters">
      <summary>取得最佳非對稱加密填補 (OAEP) 金鑰交換的參數。</summary>
      <returns>包含 OAEP 金鑰交換作業參數的 XML 字串。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter">
      <summary>使用 <see cref="T:System.Security.Cryptography.RSA" /> 建立最佳非對稱加密填補 (OAEP) 金鑰交換資料。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的金鑰，初始化 <see cref="T:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter" /> 類別的新執行個體。</summary>
      <param name="key">保存公開金鑰的 <see cref="T:System.Security.Cryptography.RSA" /> 演算法執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>從指定的輸入資料建立加密的金鑰交換資料。</summary>
      <param name="rgbData">要以金鑰交換傳遞的機密資訊。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">遺漏金鑰。</exception>
      <returns>要傳送給預定收件者的加密金鑰交換資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>從指定的輸入資料建立加密的金鑰交換資料。</summary>
      <param name="rgbData">要以金鑰交換傳遞的機密資訊。</param>
      <param name="symAlgType">目前版本中未使用這個參數。</param>
      <returns>要傳送給預定收件者的加密金鑰交換資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>設定要用於將金鑰交換資料加密的公開金鑰。</summary>
      <param name="key">保存公開金鑰的 <see cref="T:System.Security.Cryptography.RSA" /> 演算法執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameter">
      <summary>取得或設定在建立金鑰交換的過程中用來建立填補的參數。</summary>
      <returns>參數值。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Parameters">
      <summary>取得最佳非對稱加密填補 (OAEP) 金鑰交換的參數。</summary>
      <returns>包含 OAEP 金鑰交換作業參數的 XML 字串。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAOAEPKeyExchangeFormatter.Rng">
      <summary>取得或設定於建立金鑰交換時所使用的隨機數字產生器演算法。</summary>
      <returns>要使用之隨機數字產生器演算法的執行個體。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAParameters">
      <summary>表示用於 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的標準參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.D">
      <summary>表示用於 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 <see langword="D" /> 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DP">
      <summary>表示用於 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 <see langword="DP" /> 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.DQ">
      <summary>表示用於 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 <see langword="DQ" /> 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Exponent">
      <summary>表示用於 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 <see langword="Exponent" /> 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.InverseQ">
      <summary>表示用於 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 <see langword="InverseQ" /> 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Modulus">
      <summary>表示用於 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 <see langword="Modulus" /> 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.P">
      <summary>表示用於 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 <see langword="P" /> 參數。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSAParameters.Q">
      <summary>表示用於 <see cref="T:System.Security.Cryptography.RSA" /> 演算法的 <see langword="Q" /> 參數。</summary>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter">
      <summary>解密 PKCS #1 金鑰交換資料。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的金鑰，初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter" /> 類別的新執行個體。</summary>
      <param name="key">持有私密金鑰的 <see cref="T:System.Security.Cryptography.RSA" /> 演算法執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.DecryptKeyExchange(System.Byte[])">
      <summary>從加密的金鑰交換資料中擷取秘密資訊。</summary>
      <param name="rgbIn">隱藏秘密資訊的金鑰交換資料。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">遺漏金鑰。</exception>
      <returns>從金鑰交換資料中衍生的秘密資訊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>設定要用來解密機密資訊的私密金鑰。</summary>
      <param name="key">持有私密金鑰的 <see cref="T:System.Security.Cryptography.RSA" /> 演算法執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.Parameters">
      <summary>取得 PKCS #1 金鑰交換的參數。</summary>
      <returns>包含 PKCS #1 金鑰交換作業參數的 XML 字串。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeDeformatter.RNG">
      <summary>取得或設定於建立金鑰交換時所使用的隨機數字產生器演算法。</summary>
      <returns>要使用之隨機數字產生器演算法的執行個體。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter">
      <summary>使用 <see cref="T:System.Security.Cryptography.RSA" /> 建立 PKCS #1 金鑰交換資料。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的金鑰，初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter" /> 類別的新執行個體。</summary>
      <param name="key">保存公開金鑰的 <see cref="T:System.Security.Cryptography.RSA" /> 演算法執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[])">
      <summary>從指定的輸入資料建立加密的金鑰交換資料。</summary>
      <param name="rgbData">要以金鑰交換傳遞的機密資訊。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbData" /> 太大。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">機碼是 <see langword="null" />。</exception>
      <returns>要傳送給預定收件者的加密金鑰交換資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.CreateKeyExchange(System.Byte[],System.Type)">
      <summary>從指定的輸入資料建立加密的金鑰交換資料。</summary>
      <param name="rgbData">要以金鑰交換傳遞的機密資訊。</param>
      <param name="symAlgType">目前版本中未使用這個參數。</param>
      <returns>要傳送給預定收件者的加密金鑰交換資料。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>設定要用於將金鑰交換資料加密的公開金鑰。</summary>
      <param name="key">保存公開金鑰的 <see cref="T:System.Security.Cryptography.RSA" /> 演算法執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Parameters">
      <summary>取得 PKCS #1 金鑰交換的參數。</summary>
      <returns>包含 PKCS #1 金鑰交換作業參數的 XML 字串。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSAPKCS1KeyExchangeFormatter.Rng">
      <summary>取得或設定於建立金鑰交換時所使用的隨機數字產生器演算法。</summary>
      <returns>要使用之隨機數字產生器演算法的執行個體。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter">
      <summary>驗證 <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 1.5 版簽章。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的金鑰，初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureDeformatter" /> 類別的新執行個體。</summary>
      <param name="key">包含公開金鑰的 <see cref="T:System.Security.Cryptography.RSA" /> 執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetHashAlgorithm(System.String)">
      <summary>設定要用來驗證簽章的雜湊演算法。</summary>
      <param name="strName">要用來驗證簽章的雜湊演算法。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>設定要用來驗證簽章的公開金鑰。</summary>
      <param name="key">包含公開金鑰的 <see cref="T:System.Security.Cryptography.RSA" /> 執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureDeformatter.VerifySignature(System.Byte[],System.Byte[])">
      <summary>確認指定之資料的 <see cref="T:System.Security.Cryptography.RSA" /> PKCS#1 簽章。</summary>
      <param name="rgbHash">使用 <paramref name="rgbSignature" /> 簽署的資料。</param>
      <param name="rgbSignature">要驗證 <paramref name="rgbHash" /> 的簽章。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">機碼是 <see langword="null" />。  
  
-或- 
雜湊演算法是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 參數為 <see langword="null" />。  
  
-或- 
<paramref name="rgbSignature" /> 參數為 <see langword="null" />。</exception>
      <returns>如果 <paramref name="rgbSignature" /> 和 <paramref name="rgbHash" /> 上使用指定雜湊演算法和金鑰計算的簽章相符，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter">
      <summary>建立 <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 1.5 版簽章。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.#ctor(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用指定的金鑰，初始化 <see cref="T:System.Security.Cryptography.RSAPKCS1SignatureFormatter" /> 類別的新執行個體。</summary>
      <param name="key">持有私密金鑰的 <see cref="T:System.Security.Cryptography.RSA" /> 演算法執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.CreateSignature(System.Byte[])">
      <summary>建立所指定資料的 <see cref="T:System.Security.Cryptography.RSA" /> PKCS #1 簽章。</summary>
      <param name="rgbHash">要簽署的資料。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicUnexpectedOperationException">機碼是 <see langword="null" />。  
  
-或- 
雜湊演算法是 <see langword="null" />。</exception>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="rgbHash" /> 參數為 <see langword="null" />。</exception>
      <returns>
        <paramref name="rgbHash" /> 的數位簽章。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetHashAlgorithm(System.String)">
      <summary>設定建立簽章時所要使用的雜湊演算法。</summary>
      <param name="strName">要用於建立簽章之雜湊演算法的名稱。</param>
    </member>
    <member name="M:System.Security.Cryptography.RSAPKCS1SignatureFormatter.SetKey(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>設定要用來建立簽章的私密金鑰。</summary>
      <param name="key">持有私密金鑰的 <see cref="T:System.Security.Cryptography.RSA" /> 演算法執行個體。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="key" /> 為 <see langword="null" />。</exception>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePadding">
      <summary>指定要用於 RSA 簽章建立或驗證作業的填補模式和參數。</summary>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Object)">
      <summary>傳回值，這個值指出此執行個體是否與指定的物件相等。</summary>
      <param name="obj">要與目前執行個體比較的物件。</param>
      <returns>如果指定的物件等於目前的物件，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.Equals(System.Security.Cryptography.RSASignaturePadding)">
      <summary>傳回值，指出這個執行個體是否等於指定的 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 物件。</summary>
      <param name="other">要與目前執行個體比較的物件。</param>
      <returns>如果指定的物件等於目前的物件，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.GetHashCode">
      <summary>傳回這個 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 執行個體的雜湊碼。</summary>
      <returns>這個 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 執行個體的雜湊碼。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Equality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>表示兩個指定的 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 物件是否相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="left" /> 和 <see langword="right" /> 相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.op_Inequality(System.Security.Cryptography.RSASignaturePadding,System.Security.Cryptography.RSASignaturePadding)">
      <summary>表示兩個指定的 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 物件是否不相等。</summary>
      <param name="left">要比較的第一個物件。</param>
      <param name="right">要比較的第二個物件。</param>
      <returns>如果 <see langword="left" /> 和 <see langword="right" /> 不相等，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="M:System.Security.Cryptography.RSASignaturePadding.ToString">
      <summary>傳回目前 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 執行個體的字串表示。</summary>
      <returns>目前物件的字串表示。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Mode">
      <summary>傳回這個 <see cref="T:System.Security.Cryptography.RSASignaturePadding" /> 執行個體的填補模式。</summary>
      <returns>這個執行個體的填補模式 (可能是 <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" /> 或 <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" />)。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pkcs1">
      <summary>取得使用 PKCS #1 v1.5 填補模式的物件。</summary>
      <returns>使用 <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1" /> 填補模式的物件。</returns>
    </member>
    <member name="P:System.Security.Cryptography.RSASignaturePadding.Pss">
      <summary>取得使用 PSS 填補模式的物件。</summary>
      <returns>使用 Salt 位元組數目等於雜湊大小之 <see cref="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss" /> 填補模式的物件。</returns>
    </member>
    <member name="T:System.Security.Cryptography.RSASignaturePaddingMode">
      <summary>指定要用於 RSA 簽章建立或驗證作業的填補模式。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pkcs1">
      <summary>PKCS #1 v1.5。</summary>
    </member>
    <member name="F:System.Security.Cryptography.RSASignaturePaddingMode.Pss">
      <summary>機率式簽章配置。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA1">
      <summary>計算輸入資料的 <see cref="T:System.Security.Cryptography.SHA1" /> 雜湊。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA1" /> 的新執行個體。</summary>
      <exception cref="T:System.InvalidOperationException">此物件的原則與 FIPS 演算法不相容。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create">
      <summary>建立 <see cref="T:System.Security.Cryptography.SHA1" /> 的預設實作的執行個體。</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA1" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.Create(System.String)">
      <summary>建立 <see cref="T:System.Security.Cryptography.SHA1" /> 之指定實作的執行個體。</summary>
      <param name="hashName">要使用之 <see cref="T:System.Security.Cryptography.SHA1" /> 的特定實作的名稱。</param>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA1" /> 的新執行個體，使用指定實作。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.Byte[])">
      <summary>使用 SHA1 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <returns>資料的雜湊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>使用 SHA1 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <returns>資料的雜湊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>使用 SHA1 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <param name="destination">要接收雜湊值的緩衝區。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 中的緩衝區太小而無法保存計算的雜湊大小。 SHA1 演算法一律會產生 160 位元雜湊，或 20 個位元組。</exception>
      <returns>寫入 <paramref name="destination" /> 的總位元組數。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA1.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>使用 SHA1 演算法嘗試計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <param name="destination">要接收雜湊值的緩衝區。</param>
      <param name="bytesWritten">當此方法傳回時，為寫入 <paramref name="destination" /> 的位元組總數。</param>
      <returns>如果 <paramref name="destination" /> 太小而無法保存計算的雜湊，則為 <see langword="false" />；否則為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA1Managed">
      <summary>計算使用 Managed 程式庫之輸入資料的 <see cref="T:System.Security.Cryptography.SHA1" /> 雜湊。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA1Managed" /> 類別的新執行個體。</summary>
      <exception cref="T:System.InvalidOperationException">此類別與 FIPS 演算法不相容。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA1Managed.Initialize">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA1Managed" /> 的執行個體。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA256">
      <summary>計算輸入資料的 <see cref="T:System.Security.Cryptography.SHA256" /> 雜湊。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA256" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create">
      <summary>建立 <see cref="T:System.Security.Cryptography.SHA256" /> 的預設實作的執行個體。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">僅限 .NET Framework 4.6.1 及較舊版本：在已啟用美國聯邦資訊處理標準 (FIPS) 模式的情況下使用演算法，但它與 FIPS 不相容。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA256" /> 的新執行個體。 在 .NET Framework 中，如果 FIPS 模式停用，此方法會建立 <see cref="T:System.Security.Cryptography.SHA256Managed" /> 類別的執行個體；如果 FIPS 模式作用中，它會建立 <see cref="T:System.Security.Cryptography.SHA256Cng" /> 類別的執行個體。 在 .NET Core 中，它會傳回衍生自 <see cref="T:System.Security.Cryptography.SHA256" /> 的私用類別執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.Create(System.String)">
      <summary>建立 <see cref="T:System.Security.Cryptography.SHA256" /> 的指定實作的執行個體。</summary>
      <param name="hashName">要使用之 <see cref="T:System.Security.Cryptography.SHA256" /> 的特定實作的名稱。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">僅限 .NET Framework：FIPS 模式已啟用，但 <paramref name="hashName" /> 要求 <see cref="T:System.Security.Cryptography.SHA256Managed" />，這與 FIPS 不相容。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA256" /> 的新執行個體，使用指定實作。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.Byte[])">
      <summary>使用 SHA256 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <returns>資料的雜湊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>使用 SHA256 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <returns>資料的雜湊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>使用 SHA256 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <param name="destination">要接收雜湊值的緩衝區。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 中的緩衝區太小而無法保存計算的雜湊大小。 SHA256 演算法一律會產生 256 位元雜湊，或 32 個位元組。</exception>
      <returns>寫入 <paramref name="destination" /> 的總位元組數。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA256.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>使用 SHA256 演算法嘗試計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <param name="destination">要接收雜湊值的緩衝區。</param>
      <param name="bytesWritten">當此方法傳回時，為寫入 <paramref name="destination" /> 的位元組總數。</param>
      <returns>如果 <paramref name="destination" /> 太小而無法保存計算的雜湊，則為 <see langword="false" />；否則為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA256Managed">
      <summary>計算使用 Managed 程式庫之輸入資料的 <see cref="T:System.Security.Cryptography.SHA256" /> 雜湊。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.#ctor">
      <summary>使用 Managed 程式庫初始化 <see cref="T:System.Security.Cryptography.SHA256Managed" /> 類別的新執行個體。</summary>
      <exception cref="T:System.InvalidOperationException">聯邦資訊處理標準 (FIPS) 安全性設定已啟用。 此實作不屬於 Windows Platform FIPS 已驗證密碼編譯演算法的一部分。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA256Managed.Initialize">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA256Managed" /> 的執行個體。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA384">
      <summary>計算輸入資料的 <see cref="T:System.Security.Cryptography.SHA384" /> 雜湊。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA384" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create">
      <summary>建立 <see cref="T:System.Security.Cryptography.SHA384" /> 的預設實作的執行個體。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">在已啟用美國聯邦資訊處理標準 (FIPS) 模式的情況下使用演算法，但它與 FIPS 不相容。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA384" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.Create(System.String)">
      <summary>建立 <see cref="T:System.Security.Cryptography.SHA384" /> 的指定實作的執行個體。</summary>
      <param name="hashName">要使用之 <see cref="T:System.Security.Cryptography.SHA384" /> 的特定實作的名稱。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <paramref name="hashName" /> 參數描述的演算法，在聯邦資訊處理標準 (FIPS) 模式啟用的情況下使用，但是和 FIPS 並不相容。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA384" /> 的新執行個體，使用指定實作。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.Byte[])">
      <summary>使用 SHA384 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <returns>資料的雜湊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>使用 SHA384 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <returns>資料的雜湊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>使用 SHA384 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <param name="destination">要接收雜湊值的緩衝區。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 中的緩衝區太小而無法保存計算的雜湊大小。 SHA384 演算法一律會產生 384 位元雜湊，或 48 個位元組。</exception>
      <returns>寫入 <paramref name="destination" /> 的總位元組數。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA384.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>使用 SHA384 演算法嘗試計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <param name="destination">要接收雜湊值的緩衝區。</param>
      <param name="bytesWritten">當此方法傳回時，為寫入 <paramref name="destination" /> 的位元組總數。</param>
      <returns>如果 <paramref name="destination" /> 太小而無法保存計算的雜湊，則為 <see langword="false" />；否則為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA384Managed">
      <summary>計算使用 Managed 程式庫之輸入資料的 <see cref="T:System.Security.Cryptography.SHA384" /> 雜湊。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA384Managed" /> 類別的新執行個體。</summary>
      <exception cref="T:System.InvalidOperationException">聯邦資訊處理標準 (FIPS) 安全性設定已啟用。 此實作不屬於 Windows Platform FIPS 已驗證密碼編譯演算法的一部分。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA384Managed.Initialize">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA384Managed" /> 的執行個體。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SHA512">
      <summary>計算輸入資料的 <see cref="T:System.Security.Cryptography.SHA512" /> 雜湊。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA512" /> 的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create">
      <summary>建立 <see cref="T:System.Security.Cryptography.SHA512" /> 的預設實作的執行個體。</summary>
      <exception cref="T:System.Reflection.TargetInvocationException">在已啟用美國聯邦資訊處理標準 (FIPS) 模式的情況下使用演算法，但它與 FIPS 不相容。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA512" /> 的新執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.Create(System.String)">
      <summary>建立 <see cref="T:System.Security.Cryptography.SHA512" /> 的指定實作的執行個體。</summary>
      <param name="hashName">要使用之 <see cref="T:System.Security.Cryptography.SHA512" /> 的特定實作的名稱。</param>
      <exception cref="T:System.Reflection.TargetInvocationException">
        <paramref name="hashName" /> 參數描述的演算法，在聯邦資訊處理標準 (FIPS) 模式啟用的情況下使用，但是和 FIPS 並不相容。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.SHA512" /> 的新執行個體，使用指定實作。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.Byte[])">
      <summary>使用 SHA512 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" /> 為 <see langword="null" />。</exception>
      <returns>資料的雜湊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.ReadOnlySpan{System.Byte})">
      <summary>使用 SHA512 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <returns>資料的雜湊。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.HashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte})">
      <summary>使用 SHA512 演算法計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <param name="destination">要接收雜湊值的緩衝區。</param>
      <exception cref="T:System.ArgumentException">
        <paramref name="destination" /> 中的緩衝區太小而無法保存計算的雜湊大小。 SHA1 演算法一律會產生 512 位元雜湊，或 64 個位元組。</exception>
      <returns>寫入 <paramref name="destination" /> 的總位元組數。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SHA512.TryHashData(System.ReadOnlySpan{System.Byte},System.Span{System.Byte},System.Int32@)">
      <summary>使用 SHA512 演算法嘗試計算資料的雜湊。</summary>
      <param name="source">要進行雜湊處理的資料。</param>
      <param name="destination">要接收雜湊值的緩衝區。</param>
      <param name="bytesWritten">當此方法傳回時，為寫入 <paramref name="destination" /> 的位元組總數。</param>
      <returns>如果 <paramref name="destination" /> 太小而無法保存計算的雜湊，則為 <see langword="false" />；否則為 <see langword="true" />。</returns>
    </member>
    <member name="T:System.Security.Cryptography.SHA512Managed">
      <summary>使用 Managed 程式庫計算輸入資料的 <see cref="T:System.Security.Cryptography.SHA512" /> 雜湊演算法。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SHA512Managed" /> 類別的新執行個體。</summary>
      <exception cref="T:System.InvalidOperationException">聯邦資訊處理標準 (FIPS) 安全性設定已啟用。 此實作不屬於 Windows Platform FIPS 已驗證密碼編譯演算法的一部分。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SHA512Managed.Initialize">
      <summary>使用 Managed 程式庫初始化 <see cref="T:System.Security.Cryptography.SHA512Managed" /> 類別的執行個體。</summary>
    </member>
    <member name="T:System.Security.Cryptography.SignatureDescription">
      <summary>包含數位簽章的屬性的資訊。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.SignatureDescription" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.#ctor(System.Security.SecurityElement)">
      <summary>從指定的 <see cref="T:System.Security.SecurityElement" /> 初始化 <see cref="T:System.Security.Cryptography.SignatureDescription" /> 類別的新執行個體。</summary>
      <param name="el">
        <see cref="T:System.Security.SecurityElement" />，要取得簽章描述之演算法的來源。</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="el" /> 參數為 <see langword="null" />。</exception>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDeformatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> 屬性來建立具有指定金鑰的 <see cref="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm" /> 執行個體。</summary>
      <param name="key">要在 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> 中使用的金鑰。</param>
      <returns>新建立的 <see cref="T:System.Security.Cryptography.AsymmetricSignatureDeformatter" /> 執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateDigest">
      <summary>使用 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 屬性來建立 <see cref="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm" /> 執行個體。</summary>
      <returns>新建立的 <see cref="T:System.Security.Cryptography.HashAlgorithm" /> 執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.SignatureDescription.CreateFormatter(System.Security.Cryptography.AsymmetricAlgorithm)">
      <summary>使用 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> 屬性來建立具有指定金鑰的 <see cref="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm" /> 執行個體。</summary>
      <param name="key">要在 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> 中使用的金鑰。</param>
      <returns>新建立的 <see cref="T:System.Security.Cryptography.AsymmetricSignatureFormatter" /> 執行個體。</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DeformatterAlgorithm">
      <summary>取得或設定簽章描述的變形項 (Deformatter) 演算法。</summary>
      <returns>簽章描述的變形項演算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.DigestAlgorithm">
      <summary>取得或設定簽章描述的摘要演算法。</summary>
      <returns>簽章描述的摘要演算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.FormatterAlgorithm">
      <summary>取得或設定簽章描述的格式子 (Formatter) 演算法。</summary>
      <returns>簽章描述的格式子演算法。</returns>
    </member>
    <member name="P:System.Security.Cryptography.SignatureDescription.KeyAlgorithm">
      <summary>取得或設定簽章描述的金鑰演算法。</summary>
      <returns>簽章描述的金鑰演算法。</returns>
    </member>
    <member name="T:System.Security.Cryptography.TripleDES">
      <summary>表示三重資料加密標準演算法的基底類別，所有 <see cref="T:System.Security.Cryptography.TripleDES" /> 實作都必須衍生自此類別。</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.#ctor">
      <summary>初始化 <see cref="T:System.Security.Cryptography.TripleDES" /> 類別的新執行個體。</summary>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create">
      <summary>建立密碼編譯物件的執行個體，以執行 <see cref="T:System.Security.Cryptography.TripleDES" /> 演算法。</summary>
      <returns>密碼編譯物件的執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.Create(System.String)">
      <summary>建立密碼編譯物件的執行個體來執行 <see cref="T:System.Security.Cryptography.TripleDES" /> 演算法的指定實作。</summary>
      <param name="str">要使用之 <see cref="T:System.Security.Cryptography.TripleDES" /> 的特定實作的名稱。</param>
      <returns>密碼編譯物件的執行個體。</returns>
    </member>
    <member name="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])">
      <summary>判斷指定的金鑰是否為弱式。</summary>
      <param name="rgbKey">測試祕密金鑰是否為弱式。</param>
      <exception cref="T:System.Security.Cryptography.CryptographicException">
        <paramref name="rgbKey" /> 參數的大小無效。</exception>
      <returns>如果是弱式金鑰，則為 <see langword="true" />；否則為 <see langword="false" />。</returns>
    </member>
    <member name="P:System.Security.Cryptography.TripleDES.Key">
      <summary>取得或設定 <see cref="T:System.Security.Cryptography.TripleDES" /> 演算法的祕密金鑰。</summary>
      <exception cref="T:System.ArgumentNullException">嘗試將金鑰設定為 <see langword="null" />。</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException">嘗試設定的金鑰長度無效。  
  
-或- 
嘗試設定弱式金鑰 (請參閱 <see cref="M:System.Security.Cryptography.TripleDES.IsWeakKey(System.Byte[])" />)。</exception>
      <returns>
        <see cref="T:System.Security.Cryptography.TripleDES" /> 演算法的祕密金鑰。</returns>
    </member>
  </members>
</doc>
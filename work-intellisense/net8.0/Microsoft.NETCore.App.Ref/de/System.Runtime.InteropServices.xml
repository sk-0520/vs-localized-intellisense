<?xml version="1.0" encoding="utf-8"?>
<doc xmlns:vsli="https://github.com/sk-0520/vs-localized-intellisense/tree/master/schema/2024">
  <assembly>
    <name>System.Runtime.InteropServices</name>
  </assembly>
  <members>
    <member name="T:System.DataMisalignedException">
      <summary vsli:raw="The exception that is thrown when a unit of data is read from or written to an address that is not a multiple of the data size. This class cannot be inherited.">Die Ausnahme, die ausgelöst wird, wenn eine Dateneinheit aus einer Adresse gelesen bzw. in eine solche geschrieben wird, die kein Mehrfaches der Datengröße ist. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.DataMisalignedException" />-Klasse.</summary>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class using the specified error message.">Initialisiert eine neue Instanz der <see cref="T:System.DataMisalignedException" />-Klasse unter Verwendung der angegebenen Fehlermeldung.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; object that describes the error. The content of &lt;paramref name=&quot;message&quot; /&gt; is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">Ein <see cref="T:System.String" />-Objekt, das den Fehler beschreibt. Der Inhalt der <paramref name="message" /> soll in verständlicher Sprache gehalten sein. Der Aufrufer dieses Konstruktors ist erforderlich, um sicherzustellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.</param>
    </member>
    <member name="M:System.DataMisalignedException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt; class using the specified error message and underlying exception.">Initialisiert eine neue Instanz der <see cref="T:System.DataMisalignedException" />-Klasse mit der angegebenen Fehlermeldung und der angegebenen zugrunde liegenden Ausnahme.</summary>
      <param name="message" vsli:raw="A &lt;see cref=&quot;T:System.String&quot; /&gt; object that describes the error. The content of &lt;paramref name=&quot;message&quot; /&gt; is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.">Ein <see cref="T:System.String" />-Objekt, das den Fehler beschreibt. Der Inhalt der <paramref name="message" /> soll in verständlicher Sprache gehalten sein. Der Aufrufer dieses Konstruktors ist erforderlich, um sicherzustellen, dass diese Zeichenfolge für die aktuelle Systemkultur lokalisiert wurde.</param>
      <param name="innerException" vsli:raw="The exception that is the cause of the current &lt;see cref=&quot;T:System.DataMisalignedException&quot; /&gt;. If the &lt;paramref name=&quot;innerException&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Die Ausnahme, die die aktuelle <see cref="T:System.DataMisalignedException" />-Ausnahme verursacht. Wenn der <paramref name="innerException" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
    <member name="T:System.DllNotFoundException">
      <summary vsli:raw="The exception that is thrown when a DLL specified in a DLL import cannot be found.">Die Ausnahme, die ausgelöst wird, wenn eine in einem DLL-Import angegebene DLL nicht gefunden werden kann.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with default properties.">Initialisiert eine neue Instanz der <see cref="T:System.DllNotFoundException" />-Klasse mit Standardeigenschaften.</summary>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with serialized data.">Initialisiert eine neue Instanz der <see cref="T:System.DllNotFoundException" />-Klasse mit serialisierten Daten.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; that holds the serialized object data about the exception being thrown.">Die <see cref="T:System.Runtime.Serialization.SerializationInfo" />, die die serialisierten Objektdaten für die ausgelöste Ausnahme enthält.</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; that contains contextual information about the source or destination.">Der <see cref="T:System.Runtime.Serialization.StreamingContext" />, der die Kontextinformationen über die Quelle oder das Ziel enthält.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with a specified error message.">Initialisiert eine neue Instanz der <see cref="T:System.DllNotFoundException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
    </member>
    <member name="M:System.DllNotFoundException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.DllNotFoundException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialisiert eine neue Instanz der <see cref="T:System.DllNotFoundException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="inner" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
    <member name="T:System.IO.UnmanagedMemoryAccessor">
      <summary vsli:raw="Provides random access to unmanaged blocks of memory from managed code.">Ermöglicht den wahlfreien Zugriff auf nicht verwaltete Speicherblöcke aus verwaltetem Code heraus.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.IO.UnmanagedMemoryAccessor" />-Klasse.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class with a specified buffer, offset, and capacity.">Initialisiert eine neue Instanz der <see cref="T:System.IO.UnmanagedMemoryAccessor" />-Klasse, wobei Puffer, Offset und Kapazität angegeben sind.</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">Der Puffer, der die Zugriffsmethode enthalten soll.</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">Das Byte, ab dem die Zugriffsmethode beginnen soll.</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">Die Größe des zu belegenden Speichers in Bytes.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> plus <paramref name="capacity" /> ist größer als <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.">
        <paramref name="offset" /> oder <paramref name="capacity" /> ist kleiner als 0.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> plus <paramref name="capacity" /> würde das größere Ende des Adressbereichs umschließen.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; class with a specified buffer, offset, capacity, and access right.">Initialisiert eine neue Instanz der <see cref="T:System.IO.UnmanagedMemoryAccessor" />-Klasse, wobei Puffer, Offset, Kapazität und Zugriffsrecht angegeben sind.</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">Der Puffer, der die Zugriffsmethode enthalten soll.</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">Das Byte, ab dem die Zugriffsmethode beginnen soll.</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">Die Größe des zu belegenden Speichers in Bytes.</param>
      <param name="access" vsli:raw="The type of access allowed to the memory. The default is &lt;see cref=&quot;F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite&quot; /&gt;.">Der zulässige Typ des Zugriffs auf den Speicher. Der Standardwert ist <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> plus <paramref name="capacity" /> ist größer als <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;access&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot; /&gt; enumeration value.">
        <paramref name="offset" /> oder <paramref name="capacity" /> ist kleiner als 0.  
  
- oder - 
 <paramref name="access" /> ist kein gültiger <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />-Enumerationswert.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> plus <paramref name="capacity" /> würde das größere Ende des Adressbereichs umschließen.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose">
      <summary vsli:raw="Releases all resources used by the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt;.">Gibt alle vom <see cref="T:System.IO.UnmanagedMemoryAccessor" /> verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Dispose(System.Boolean)">
      <summary vsli:raw="Releases the unmanaged resources used by the &lt;see cref=&quot;T:System.IO.UnmanagedMemoryAccessor&quot; /&gt; and optionally releases the managed resources.">Gibt die von <see cref="T:System.IO.UnmanagedMemoryAccessor" /> verwendeten nicht verwalteten Ressourcen und optional die verwalteten Ressourcen frei.</summary>
      <param name="disposing" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to release both managed and unmanaged resources; &lt;see langword=&quot;false&quot; /&gt; to release only unmanaged resources.">
        <see langword="true" />, um sowohl verwaltete als auch nicht verwaltete Ressourcen freizugeben, <see langword="false" />, um ausschließlich nicht verwaltete Ressourcen freizugeben.</param>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)">
      <summary vsli:raw="Sets the initial values for the accessor.">Legt die Anfangswerte für die Zugriffsmethode fest.</summary>
      <param name="buffer" vsli:raw="The buffer to contain the accessor.">Der Puffer, der die Zugriffsmethode enthalten soll.</param>
      <param name="offset" vsli:raw="The byte at which to start the accessor.">Das Byte, ab dem die Zugriffsmethode beginnen soll.</param>
      <param name="capacity" vsli:raw="The size, in bytes, of memory to allocate.">Die Größe des zu belegenden Speichers in Bytes.</param>
      <param name="access" vsli:raw="The type of access allowed to the memory. The default is &lt;see cref=&quot;F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite&quot; /&gt;.">Der zulässige Typ des Zugriffs auf den Speicher. Der Standardwert ist <see cref="F:System.IO.MemoryMappedFiles.MemoryMappedFileAccess.ReadWrite" />.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; is greater than &lt;paramref name=&quot;buffer&quot; /&gt;.">
        <paramref name="offset" /> plus <paramref name="capacity" /> ist größer als <paramref name="buffer" />.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;buffer&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="buffer" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;capacity&quot; /&gt; is less than zero.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;access&quot; /&gt; is not a valid &lt;see cref=&quot;T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess&quot; /&gt; enumeration value.">
        <paramref name="offset" /> oder <paramref name="capacity" /> ist kleiner als 0.  
  
- oder - 
 <paramref name="access" /> ist kein gültiger <see cref="T:System.IO.MemoryMappedFiles.MemoryMappedFileAccess" />-Enumerationswert.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="&lt;paramref name=&quot;offset&quot; /&gt; plus &lt;paramref name=&quot;capacity&quot; /&gt; would wrap around the high end of the address space.">
        <paramref name="offset" /> plus <paramref name="capacity" /> würde das größere Ende des Adressbereichs umschließen.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Read``1(System.Int64,``0@)">
      <summary vsli:raw="Reads a structure of type &lt;paramref name=&quot;T&quot; /&gt; from the accessor into a provided reference.">Liest eine Struktur vom Typ <paramref name="T" /> aus der Zugriffsmethode in einen bereitgestellten Verweis.</summary>
      <param name="position" vsli:raw="The position in the accessor at which to begin reading.">Die Position in der Zugriffsmethode, an der der Lesevorgang begonnen werden soll.</param>
      <param name="structure" vsli:raw="The structure to contain the read data.">Die Struktur, die die gelesenen Daten enthalten soll.</param>
      <typeparam name="T" vsli:raw="The type of structure.">Der Typ der Struktur.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read in a structure of type &lt;paramref name=&quot;T&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;see langword=&quot;T&quot; /&gt; is a value type that contains one or more reference types.">Es gibt nicht genug Bytes nach <paramref name="position" />, um in einer Struktur des Typs <paramref name="T" /> zu lesen.  
  
- oder - 
 <see langword="T" /> ist ein Werttyp, der mindestens einen Verweistyp enthält.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Reads structures of type &lt;paramref name=&quot;T&quot; /&gt; from the accessor into an array of type &lt;paramref name=&quot;T&quot; /&gt;.">Liest Strukturen vom Typ <paramref name="T" /> aus der Zugriffsmethode in ein Array vom Typ <paramref name="T" />.</summary>
      <param name="position" vsli:raw="The number of bytes in the accessor at which to begin reading.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Lesevorgang beginnen soll.</param>
      <param name="array" vsli:raw="The array to contain the structures read from the accessor.">Das Array, das die aus der Zugriffsmethode gelesenen Strukturen enthalten soll.</param>
      <param name="offset" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; in which to place the first copied structure.">Der Index in <paramref name="array" />, an dem die zuerst kopierte Struktur platziert werden soll.</param>
      <param name="count" vsli:raw="The number of structures of type &lt;c&gt;T&lt;/c&gt; to read from the accessor.">Die Anzahl von Strukturen vom Typ <c>T</c>, die aus der Zugriffsmethoden gelesen werden sollen.</param>
      <typeparam name="T" vsli:raw="The type of structure.">Der Typ der Struktur.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is not large enough to contain &lt;paramref name=&quot;count&quot; /&gt; of structures (starting from &lt;paramref name=&quot;position&quot; /&gt;).">
        <paramref name="array" /> ist nicht groß genug, um <paramref name="count" /> von Strukturen zu enthalten (beginnend bei <paramref name="position" />).</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
      <returns vsli:raw="The number of structures read into &lt;paramref name=&quot;array&quot; /&gt;. This value can be less than &lt;paramref name=&quot;count&quot; /&gt; if there are fewer structures available, or zero if the end of the accessor is reached.">Die Anzahl der Strukturen, die in <paramref name="array" /> gelesen wurden. Dieser Wert kann kleiner als <paramref name="count" /> sein, wenn weniger Strukturen verfügbar gibt, oder 0 (null), wenn das Ende der Zugriffsmethode erreicht wird.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadBoolean(System.Int64)">
      <summary vsli:raw="Reads a Boolean value from the accessor.">Liest einen booleschen Wert aus der Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Die Anzahl der Bytes im Accessor, ab der der Lesevorgang beginnen soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu lesen.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; or &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> oder <see langword="false" />.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadByte(System.Int64)">
      <summary vsli:raw="Reads a byte value from the accessor.">Liest einen Bytewert aus der Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Die Anzahl der Bytes im Accessor, ab der der Lesevorgang beginnen soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu lesen.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
      <returns vsli:raw="The value that was read.">Der gelesene Wert.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadChar(System.Int64)">
      <summary vsli:raw="Reads a character from the accessor.">Liest ein Zeichen aus der Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Die Anzahl der Bytes im Accessor, ab der der Lesevorgang beginnen soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu lesen.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
      <returns vsli:raw="The value that was read.">Der gelesene Wert.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDecimal(System.Int64)">
      <summary vsli:raw="Reads a decimal value from the accessor.">Liest einen Dezimalwert aus der Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Die Anzahl der Bytes im Accessor, ab der der Lesevorgang beginnen soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.  &#xA;  &#xA; -or-  &#xA;  &#xA; The decimal to read is invalid.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu lesen.  
  
- oder - 
Die zu lesende Dezimalzahl ist ungültig.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
      <returns vsli:raw="The value that was read.">Der gelesene Wert.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadDouble(System.Int64)">
      <summary vsli:raw="Reads a double-precision floating-point value from the accessor.">Liest einen Gleitkommawert mit doppelter Genauigkeit aus der Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Die Anzahl der Bytes im Accessor, ab der der Lesevorgang beginnen soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu lesen.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
      <returns vsli:raw="The value that was read.">Der gelesene Wert.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt16(System.Int64)">
      <summary vsli:raw="Reads a 16-bit integer from the accessor.">Liest eine 16-Bit-Ganzzahl aus dem Accessor.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Die Anzahl der Bytes im Accessor, ab der der Lesevorgang beginnen soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu lesen.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
      <returns vsli:raw="The value that was read.">Der gelesene Wert.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt32(System.Int64)">
      <summary vsli:raw="Reads a 32-bit integer from the accessor.">Liest eine 32-Bit-Ganzzahl aus dem Accessor.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Die Anzahl der Bytes im Accessor, ab der der Lesevorgang beginnen soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu lesen.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
      <returns vsli:raw="The value that was read.">Der gelesene Wert.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadInt64(System.Int64)">
      <summary vsli:raw="Reads a 64-bit integer from the accessor.">Liest eine 64-Bit-Ganzzahl aus dem Accessor.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Die Anzahl der Bytes im Accessor, ab der der Lesevorgang beginnen soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu lesen.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
      <returns vsli:raw="The value that was read.">Der gelesene Wert.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSByte(System.Int64)">
      <summary vsli:raw="Reads an 8-bit signed integer from the accessor.">Liest eine 8-Bit-Ganzzahl mit Vorzeichen aus dem Accessor.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Die Anzahl der Bytes im Accessor, ab der der Lesevorgang beginnen soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu lesen.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
      <returns vsli:raw="The value that was read.">Der gelesene Wert.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadSingle(System.Int64)">
      <summary vsli:raw="Reads a single-precision floating-point value from the accessor.">Liest einen Gleitkommawert mit einfacher Genauigkeit aus der Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Die Anzahl der Bytes im Accessor, ab der der Lesevorgang beginnen soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu lesen.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
      <returns vsli:raw="The value that was read.">Der gelesene Wert.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt16(System.Int64)">
      <summary vsli:raw="Reads an unsigned 16-bit integer from the accessor.">Liest eine 16-Bit-Ganzzahl ohne Vorzeichen aus dem Accessor.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Die Anzahl der Bytes im Accessor, ab der der Lesevorgang beginnen soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu lesen.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
      <returns vsli:raw="The value that was read.">Der gelesene Wert.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt32(System.Int64)">
      <summary vsli:raw="Reads an unsigned 32-bit integer from the accessor.">Liest eine 32-Bit-Ganzzahl ohne Vorzeichen aus dem Accessor.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Die Anzahl der Bytes im Accessor, ab der der Lesevorgang beginnen soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu lesen.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
      <returns vsli:raw="The value that was read.">Der gelesene Wert.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.ReadUInt64(System.Int64)">
      <summary vsli:raw="Reads an unsigned 64-bit integer from the accessor.">Liest eine 64-Bit-Ganzzahl ohne Vorzeichen aus der Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin reading.">Die Anzahl der Bytes im Accessor, ab der der Lesevorgang beginnen soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to read a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu lesen.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support reading.">Der Accessor unterstützt keine Lesevorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
      <returns vsli:raw="The value that was read.">Der gelesene Wert.</returns>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Boolean)">
      <summary vsli:raw="Writes a Boolean value into the accessor.">Schreibt einen booleschen Wert in die Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="value" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu schreiben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Byte)">
      <summary vsli:raw="Writes a byte value into the accessor.">Schreibt einen Bytewert in den Accessor.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="value" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu schreiben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Char)">
      <summary vsli:raw="Writes a character into the accessor.">Schreibt ein Zeichen in den Accessor.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="value" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu schreiben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Decimal)">
      <summary vsli:raw="Writes a decimal value into the accessor.">Schreibt einen Dezimalwert in die Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="value" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.  &#xA;  &#xA; -or-  &#xA;  &#xA; The decimal is invalid.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu schreiben.  
  
- oder - 
Die Dezimalzahl ist ungültig.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Double)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Double&quot; /&gt; value into the accessor.">Schreibt einen <see cref="T:System.Double" />-Wert in den Accessor.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="value" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu schreiben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int16)">
      <summary vsli:raw="Writes a 16-bit integer into the accessor.">Schreibt eine 16-Bit-Ganzzahl in die Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="value" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu schreiben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int32)">
      <summary vsli:raw="Writes a 32-bit integer into the accessor.">Schreibt eine 32-Bit-Ganzzahl in die Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="value" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu schreiben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Int64)">
      <summary vsli:raw="Writes a 64-bit integer into the accessor.">Schreibt eine 64-Bit-Ganzzahl in die Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="value" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after position to write a value.">Es gibt nicht genug Bytes nach Position, um einen Wert zu schreiben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.SByte)">
      <summary vsli:raw="Writes an 8-bit integer into the accessor.">Schreibt eine 8-Bit-Ganzzahl in die Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="value" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu schreiben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.Single)">
      <summary vsli:raw="Writes a &lt;see cref=&quot;T:System.Single&quot; /&gt; into the accessor.">Schreibt einen <see cref="T:System.Single" />-Wert in die Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="value" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu schreiben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt16)">
      <summary vsli:raw="Writes an unsigned 16-bit integer into the accessor.">Schreibt eine 16-Bit-Ganzzahl ohne Vorzeichen in den Accessor.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="value" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu schreiben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt32)">
      <summary vsli:raw="Writes an unsigned 32-bit integer into the accessor.">Schreibt eine 32-Bit-Ganzzahl ohne Vorzeichen in den Accessor.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="value" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu schreiben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write(System.Int64,System.UInt64)">
      <summary vsli:raw="Writes an unsigned 64-bit integer into the accessor.">Schreibt eine 64-Bit-Ganzzahl ohne Vorzeichen in die Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="value" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes after &lt;paramref name=&quot;position&quot; /&gt; to write a value.">Es gibt nicht genug Bytes nach <paramref name="position" />, um einen Wert zu schreiben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.Write``1(System.Int64,``0@)">
      <summary vsli:raw="Writes a structure into the accessor.">Schreibt eine Struktur in die Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="structure" vsli:raw="The structure to write.">Die zu schreibende Struktur.</param>
      <typeparam name="T" vsli:raw="The type of structure.">Der Typ der Struktur.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes in the accessor after &lt;paramref name=&quot;position&quot; /&gt; to write a structure of type &lt;paramref name=&quot;T&quot; /&gt;.">Es gibt nicht genug Bytes im Accessor nach <paramref name="position" />, um eine Struktur des Typs <paramref name="T" /> zu schreiben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="M:System.IO.UnmanagedMemoryAccessor.WriteArray``1(System.Int64,``0[],System.Int32,System.Int32)">
      <summary vsli:raw="Writes structures from an array of type &lt;paramref name=&quot;T&quot; /&gt; into the accessor.">Schreibt Strukturen aus einem Array vom Typ <paramref name="T" /> in die Zugriffsmethode.</summary>
      <param name="position" vsli:raw="The number of bytes into the accessor at which to begin writing.">Die Anzahl der Bytes in der Zugriffsmethode, ab der der Schreibvorgang beginnen soll.</param>
      <param name="array" vsli:raw="The array to write into the accessor.">Das Array, aus dem in den Accessor geschrieben werden soll.</param>
      <param name="offset" vsli:raw="The index in &lt;paramref name=&quot;array&quot; /&gt; to start writing from.">Der Index in <paramref name="array" />, bei dem der Schreibvorgang begonnen werden soll.</param>
      <param name="count" vsli:raw="The number of structures in &lt;paramref name=&quot;array&quot; /&gt; to write.">Die Anzahl der Strukturen in <paramref name="array" />, die geschrieben werden sollen.</param>
      <typeparam name="T" vsli:raw="The type of structure.">Der Typ der Struktur.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="There are not enough bytes in the accessor after &lt;paramref name=&quot;position&quot; /&gt; to write the number of structures specified by &lt;paramref name=&quot;count&quot; /&gt;.">Es gibt nicht genug Bytes im Accessor nach <paramref name="position" />, um die Anzahl der von <paramref name="count" /> angegebenen Strukturen zu schreiben.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;position&quot; /&gt; is less than zero or greater than the capacity of the accessor.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;offset&quot; /&gt; or &lt;paramref name=&quot;count&quot; /&gt; is less than zero.">
        <paramref name="position" /> ist kleiner als 0 (null) oder größer als die Kapazität des Accessors.  
  
- oder - 
 <paramref name="offset" /> oder <paramref name="count" /> ist kleiner als 0.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;array&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="array" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="The accessor does not support writing.">Der Accessor unterstützt keine Schreibvorgänge.</exception>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="The accessor has been disposed.">Der Accessor wurde freigegeben.</exception>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanRead">
      <summary vsli:raw="Determines whether the accessor is readable.">Bestimmt, ob die Zugriffsmethode lesbar ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is readable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Accessor lesbar ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.CanWrite">
      <summary vsli:raw="Determines whether the accessory is writable.">Bestimmt, ob in die Zugriffsmethode geschrieben werden kann.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is writable; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn in den Accessor geschrieben werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.Capacity">
      <summary vsli:raw="Gets the capacity of the accessor.">Ruft die Kapazität der Zugriffsmethode ab.</summary>
      <returns vsli:raw="The capacity of the accessor.">Die Kapazität der Zugriffsmethode.</returns>
    </member>
    <member name="P:System.IO.UnmanagedMemoryAccessor.IsOpen">
      <summary vsli:raw="Determines whether the accessor is currently open by a process.">Bestimmt, ob die Zugriffsmethode derzeit durch einen Prozess geöffnet ist.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the accessor is open; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Accessor geöffnet ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IDispatchConstantAttribute">
      <summary vsli:raw="Indicates that the default value for the attributed field or parameter is an instance of &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;, where the &lt;see cref=&quot;P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Gibt an, dass der Standardwert für das attributierte Feld oder den attributierten Parameter eine Instanz von <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> ist, wobei <see cref="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject" /> den Wert <see langword="null" /> hat.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IDispatchConstantAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.IDispatchConstantAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.CompilerServices.IDispatchConstantAttribute" />-Klasse.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IDispatchConstantAttribute.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;IDispatch&quot; /&gt; constant stored in this attribute.">Ruft die in diesem Attribut gespeicherte <see langword="IDispatch" />-Konstante ab.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;IDispatch&quot; /&gt; constant stored in this attribute. Only &lt;see langword=&quot;null&quot; /&gt; is allowed for an &lt;see langword=&quot;IDispatch&quot; /&gt; constant value.">Die in diesem Attribut gespeicherte <see langword="IDispatch" />-Konstante. Für einen <see langword="null" />-Konstantenwert ist nur <see langword="IDispatch" /> zulässig.</returns>
    </member>
    <member name="T:System.Runtime.CompilerServices.IUnknownConstantAttribute">
      <summary vsli:raw="Indicates that the default value for the attributed field or parameter is an instance of &lt;see cref=&quot;T:System.Runtime.InteropServices.UnknownWrapper&quot; /&gt;, where the &lt;see cref=&quot;P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;. This class cannot be inherited.">Gibt an, dass der Standardwert für das attributierte Feld oder den attributierten Parameter eine Instanz von <see cref="T:System.Runtime.InteropServices.UnknownWrapper" /> ist, wobei <see cref="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject" /> den Wert <see langword="null" /> hat. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.Runtime.CompilerServices.IUnknownConstantAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.CompilerServices.IUnknownConstantAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.CompilerServices.IUnknownConstantAttribute" />-Klasse.</summary>
    </member>
    <member name="P:System.Runtime.CompilerServices.IUnknownConstantAttribute.Value">
      <summary vsli:raw="Gets the &lt;see langword=&quot;IUnknown&quot; /&gt; constant stored in this attribute.">Ruft die in diesem Attribut gespeicherte <see langword="IUnknown" />-Konstante ab.</summary>
      <returns vsli:raw="The &lt;see langword=&quot;IUnknown&quot; /&gt; constant stored in this attribute. Only &lt;see langword=&quot;null&quot; /&gt; is allowed for an &lt;see langword=&quot;IUnknown&quot; /&gt; constant value.">Die in diesem Attribut gespeicherte <see langword="IUnknown" />-Konstante. Für einen <see langword="null" />-Konstantenwert ist nur <see langword="IUnknown" /> zulässig.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute">
      <summary vsli:raw="Allows an unmanaged method to call a managed method.">Ermöglicht es einer nicht verwalteten Methode, eine verwaltete Methode aufzurufen.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.AllowReversePInvokeCallsAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ArrayWithOffset">
      <summary vsli:raw="Encapsulates an array and an offset within the specified array.">Kapselt ein Array und einen Offset innerhalb des angegebenen Arrays.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.#ctor(System.Object,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; structure.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Struktur.</summary>
      <param name="array" vsli:raw="A managed array.">Ein verwaltetes Array.</param>
      <param name="offset" vsli:raw="The offset in bytes, of the element to be passed through platform invoke.">Der Offset des Elements, das durch Aufrufen der Plattform übergeben werden soll (in Byte).</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The array is larger than 2 gigabytes (GB).">Das Array ist größer als 2 Gigabyte (GB).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Object)">
      <summary vsli:raw="Indicates whether the specified object matches the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object.">Gibt an, ob das angegebene Objekt dem aktuellen <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt entspricht.</summary>
      <param name="obj" vsli:raw="Object to compare with this instance.">Objekt, das mit dieser Instanz verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the object matches this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das Objekt diesem <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.Equals(System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Indicates whether the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object matches the current instance.">Gibt an, ob das angegebene <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt der aktuellen Instanz entspricht.</summary>
      <param name="obj" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with this instance.">Ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt, das mit dieser Instanz verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object matches the current instance; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt der aktuellen Instanz entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetArray">
      <summary vsli:raw="Returns the managed array referenced by this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt;.">Gibt das verwaltete Array zurück, auf das von diesem <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> verwiesen wird.</summary>
      <returns vsli:raw="The managed array this instance references.">Das verwaltete Array, auf das diese Instanz verweist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetHashCode">
      <summary vsli:raw="Returns a hash code for this value type.">Gibt einen Hashcode für diesen Werttyp zurück.</summary>
      <returns vsli:raw="The hash code for this instance.">Der Hashcode für diese Instanz.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.GetOffset">
      <summary vsli:raw="Returns the offset provided when this &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; was constructed.">Gibt den Offset zurück, der beim Erstellen dieses <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" /> bereitgestellt wurde.</summary>
      <returns vsli:raw="The offset for this instance.">Der Offset für diese Instanz.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Equality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; objects have the same value.">Bestimmt, ob zwei angegebene <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekte denselben Wert haben.</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;b&quot; /&gt; parameter.">Ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt, das mit dem <paramref name="b" />-Parameter verglichen werden soll.</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;a&quot; /&gt; parameter.">Ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt, das mit dem <paramref name="a" />-Parameter verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;a&quot; /&gt; is the same as the value of &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="a" /> und <paramref name="b" /> denselben Wert haben, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ArrayWithOffset.op_Inequality(System.Runtime.InteropServices.ArrayWithOffset,System.Runtime.InteropServices.ArrayWithOffset)">
      <summary vsli:raw="Determines whether two specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; objects no not have the same value.">Bestimmt, ob zwei angegebene <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekte nicht den gleichen Wert haben.</summary>
      <param name="a" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;b&quot; /&gt; parameter.">Ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt, das mit dem <paramref name="b" />-Parameter verglichen werden soll.</param>
      <param name="b" vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object to compare with the &lt;paramref name=&quot;a&quot; /&gt; parameter.">Ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt, das mit dem <paramref name="a" />-Parameter verglichen werden soll.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the value of &lt;paramref name=&quot;a&quot; /&gt; is not the same as the value of &lt;paramref name=&quot;b&quot; /&gt;; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Wert von <paramref name="a" /> nicht dem Wert von <paramref name="b" /> entspricht, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.AutomationProxyAttribute">
      <summary vsli:raw="Specifies whether the type should be marshaled using the Automation marshaler or a custom proxy and stub.">Gibt an, ob der Typ mithilfe des Automation-Marshallers oder eines benutzerdefinierten Proxys und Stubs gemarshallt werden soll.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.AutomationProxyAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.AutomationProxyAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.AutomationProxyAttribute" />-Klasse.</summary>
      <param name="val" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class should be marshaled using the Automation Marshaler; &lt;see langword=&quot;false&quot; /&gt; if a proxy stub marshaler should be used.">
        <see langword="true" />, wenn die Klasse mit dem Automatisierungsmarshaller gemarshallt werden soll. <see langword="false" />, wenn ein Proxy-Stub-Marshaller verwendet werden soll.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.AutomationProxyAttribute.Value">
      <summary vsli:raw="Gets a value indicating the type of marshaler to use.">Ruft einen Wert ab, der den Typ des zu verwendenden Marshallers angibt.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the class should be marshaled using the Automation Marshaler; &lt;see langword=&quot;false&quot; /&gt; if a proxy stub marshaler should be used.">
        <see langword="true" />, wenn die Klasse mit dem Automatisierungsmarshaller gemarshallt werden soll. <see langword="false" />, wenn ein Proxy-Stub-Marshaller verwendet werden soll.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BestFitMappingAttribute">
      <summary vsli:raw="Controls whether Unicode characters are converted to the closest matching ANSI characters.">Steuert, ob Unicode-Zeichen in möglichst passende ANSI-Zeichen konvertiert werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.BestFitMappingAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI '?' character.">Aktiviert bzw. deaktiviert das Auslösen einer Ausnahme bei einem nicht zuzuordnenden Unicode-Zeichen, das in das ANSI-Zeichen "?" konvertiert wird.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BestFitMappingAttribute.#ctor(System.Boolean)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BestFitMappingAttribute&quot; /&gt; class set to the value of the &lt;see cref=&quot;P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping&quot; /&gt; property.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.BestFitMappingAttribute" />-Klasse, die auf den Wert der <see cref="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping" />-Eigenschaft festgelegt ist.</summary>
      <param name="BestFitMapping" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that best-fit mapping is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, um anzugeben, dass die optimale Zuordnung aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BestFitMappingAttribute.BestFitMapping">
      <summary vsli:raw="Gets the best-fit mapping behavior when converting Unicode characters to ANSI characters.">Ruft das Verhalten der optimalen Zuordnung bei der Konvertierung von Unicode-Zeichen in ANSI-Zeichen ab.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if best-fit mapping is enabled; otherwise, &lt;see langword=&quot;false&quot; /&gt;. The default is &lt;see langword=&quot;true&quot; /&gt;.">
        <see langword="true" />, wenn die optimale Zuordnung aktiviert ist, andernfalls <see langword="false" />. Der Standardwert ist <see langword="true" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.BStrWrapper">
      <summary vsli:raw="Marshals data of type &lt;see langword=&quot;VT_BSTR&quot; /&gt; from managed to unmanaged code. This class cannot be inherited.">Marshallt Daten vom Typ <see langword="VT_BSTR" /> von verwaltetem an nicht verwalteten Code. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; object.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.BStrWrapper" />-Klasse mit dem angegebenen <see cref="T:System.Object" />-Objekt.</summary>
      <param name="value" vsli:raw="The object to wrap and marshal as &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">Das zu umschließende Objekt, das als <see langword="VT_BSTR" /> gemarshallt werden soll.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.BStrWrapper.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.String&quot; /&gt; object.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.BStrWrapper" />-Klasse mit dem angegebenen <see cref="T:System.String" />-Objekt.</summary>
      <param name="value" vsli:raw="The object to wrap and marshal as &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">Das zu umschließende Objekt, das als <see langword="VT_BSTR" /> gemarshallt werden soll.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.BStrWrapper.WrappedObject">
      <summary vsli:raw="Gets the wrapped &lt;see cref=&quot;T:System.String&quot; /&gt; object to marshal as type &lt;see langword=&quot;VT_BSTR&quot; /&gt;.">Ruft das umschlossene <see cref="T:System.String" />-Objekt ab, das als <see langword="VT_BSTR" />-Typ gemarshallt werden soll.</summary>
      <returns vsli:raw="The object that is wrapped by &lt;see cref=&quot;T:System.Runtime.InteropServices.BStrWrapper&quot; /&gt;.">Das Objekt, das von <see cref="T:System.Runtime.InteropServices.BStrWrapper" /> umschlossen wird.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CallingConvention">
      <summary vsli:raw="Specifies the calling convention required to call methods implemented in unmanaged code.">Gibt die Aufrufkonvention an, die zum Aufrufen von Methoden erforderlich ist, die in nicht verwaltetem Code implementiert sind.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Cdecl">
      <summary vsli:raw="The caller cleans the stack. This enables calling functions with &lt;see langword=&quot;varargs&quot; /&gt;, which makes it appropriate to use for methods that accept a variable number of parameters, such as &lt;see langword=&quot;Printf&quot; /&gt;.">Der Aufrufer entleert den Stapel. Dies aktiviert Aufruffunktionen mit <see langword="varargs" />, wodurch die Verwendung für Methoden ermöglicht wird, die eine variable Anzahl von Parametern akzeptieren, beispielsweise <see langword="Printf" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.FastCall">
      <summary vsli:raw="This calling convention is not supported.">Diese Aufruffunktion wird nicht unterstützt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.StdCall">
      <summary vsli:raw="The callee cleans the stack.">Der Aufgerufene entleert den Stapel.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.ThisCall">
      <summary vsli:raw="The first parameter is the &lt;see langword=&quot;this&quot; /&gt; pointer and is stored in register ECX. Other parameters are pushed on the stack. This calling convention is used to call methods on classes exported from an unmanaged DLL.">Der erste Parameter ist der <see langword="this" />-Zeiger, der im Register ECX gespeichert wird. Weitere Parameter werden in den Stapel verschoben. Diese Aufrufkonvention wird zum Aufrufen von Methoden für Klassen verwendet, die aus einer nicht verwalteten DLL exportiert wurden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CallingConvention.Winapi">
      <summary vsli:raw="This member is not actually a calling convention, but instead uses the default platform calling convention.">Dieser Member stellt keine tatsächliche Aufrufkonvention dar, sondern verwendet die Standardkonvention für Plattformaufrufe. Unter Windows x86 ist der Standardwert beispielsweise <see cref="F:System.Runtime.InteropServices.CallingConvention.StdCall" />, unter Linux x86 ist es <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceAttribute">
      <summary vsli:raw="Indicates the type of class interface to be generated for a class exposed to COM, if an interface is generated at all.">Gibt die Art der Klassenschnittstelle an, die für eine für COM verfügbar gemachte Klasse generiert werden soll (sofern überhaupt eine Schnittstelle generiert wird).</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; enumeration value.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" />-Enumerationswert.</summary>
      <param name="classInterfaceType" vsli:raw="Describes the type of interface that is generated for a class.">Beschreibt den Schnittstellentyp, der für eine Klasse generiert wird.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ClassInterfaceAttribute.#ctor(System.Runtime.InteropServices.ClassInterfaceType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; enumeration member.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" />-Enumerationsmember.</summary>
      <param name="classInterfaceType" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; values that describes the type of interface that is generated for a class.">Einer der <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" />-Werte, der den Typ der für eine Klasse generierten Schnittstelle beschreibt.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ClassInterfaceAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; value that describes which type of interface should be generated for the class.">Ruft den <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" />-Wert ab, der beschreibt, welcher Schnittstellentyp für die Klasse generiert werden soll.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceType&quot; /&gt; value that describes which type of interface should be generated for the class.">Der <see cref="T:System.Runtime.InteropServices.ClassInterfaceType" />-Wert, der beschreibt, welcher Schnittstellentyp für die Klasse generiert werden soll.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ClassInterfaceType">
      <summary vsli:raw="Identifies the type of class interface that is generated for a class.">Identifiziert die Art der Klassenschnittstelle, die für eine Klasse generiert wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch">
      <summary vsli:raw="&lt;para&gt;Indicates that the class only supports late binding for COM clients. A &lt;see langword=&quot;dispinterface&quot; /&gt; for the class is automatically exposed to COM clients on request. The type library produced by Tlbexp.exe (Type Library Exporter) does not contain type information for the &lt;see langword=&quot;dispinterface&quot; /&gt; in order to prevent clients from caching the DISPIDs of the interface. The &lt;see langword=&quot;dispinterface&quot; /&gt; does not exhibit the versioning problems described in &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt; because clients can only late-bind to the interface.&lt;/para&gt;&lt;para&gt;This is the default setting for &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;.&lt;/para&gt;">
        <para>Gibt an, dass die Klasse nur spätes Binden für COM-Clients unterstützt. Eine <see langword="dispinterface" /> für die Klasse wird auf Anforderung automatisch für COM-Clients verfügbar gemacht. Die vom Tlbexp.exe (Type Library Exporter) erstellte Typbibliothek enthält keine Typinformationen für die <see langword="dispinterface" />, um zu verhindern, dass Clients die DISPIDs der Schnittstelle zwischenspeichern. Bei der <see langword="dispinterface" /> treten keine der in <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> beschriebenen Versionsprobleme auf, da für Clients nur spätes Binden an die Schnittstelle möglich ist.</para>
        <para>Das ist die Standardeinstellung für <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />.</para>
      </summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.AutoDual">
      <summary vsli:raw="Indicates that a dual class interface is automatically generated for the class and exposed to COM. Type information is produced for the class interface and published in the type library. Using &lt;see langword=&quot;AutoDual&quot; /&gt; is strongly discouraged because of the versioning limitations described in &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;.">Gibt an, dass für die Klasse automatisch eine duale Klassenschnittstelle generiert und für COM verfügbar gemacht wird. Für die Klassenschnittstelle werden Typinformationen erstellt und in der Typbibliothek veröffentlicht. Aufgrund der unter <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" /> beschriebenen Versionseinschränkungen wird von der Verwendung von <see langword="AutoDual" /> dringend abgeraten.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ClassInterfaceType.None">
      <summary vsli:raw="&lt;para&gt;Indicates that no class interface is generated for the class. If no interfaces are implemented explicitly, the class can only provide late-bound access through the &lt;see langword=&quot;IDispatch&quot; /&gt; interface. This is the recommended setting for &lt;see cref=&quot;T:System.Runtime.InteropServices.ClassInterfaceAttribute&quot; /&gt;. Using &lt;see langword=&quot;ClassInterfaceType.None&quot; /&gt; is the only way to expose functionality through interfaces implemented explicitly by the class.&lt;/para&gt;&lt;para&gt;Tlbexp.exe (Type Library Exporter) exposes the first public, COM-visible interface implemented by the class as the default interface of the coclass. In .NET Framework 2.0 and later versions, you can specify the default interface exposed to COM by using the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&quot; /&gt; attribute. If the class implements no interfaces, the first public, COM-visible interface implemented by a base class becomes the default interface (starting with the most recently derived base class and working backward). Tlbexp.exe exposes &lt;see langword=&quot;_Object&quot; /&gt; as the default interface if neither the class nor its base classes implement interfaces.&lt;/para&gt;">Gibt an, dass für die Klasse keine Klassenschnittstelle generiert wird. Wenn keine Schnittstellen explizit implementiert werden, kann die Klasse nur Zugriff mit spätem Binden über die <see langword="IDispatch" />-Schnittstelle bereitstellen. Dies ist die empfohlene Einstellung für <see cref="T:System.Runtime.InteropServices.ClassInterfaceAttribute" />. Das Verwenden von <see langword="ClassInterfaceType.None" /> ist die einzige Möglichkeit, Funktionen über Schnittstellen verfügbar zu machen, die von der Klasse explizit implementiert werden.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CoClassAttribute">
      <summary vsli:raw="Specifies the class identifier of a coclass imported from a type library.">Gibt den Klassenbezeichner einer aus einer Typbibliothek importierten Co-Klasse an.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CoClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CoClassAttribute&quot; /&gt; with the class identifier of the original coclass.">Initialisiert eine neue Instanz von <see cref="T:System.Runtime.InteropServices.CoClassAttribute" /> mit dem Klassenbezeichner der ursprünglichen Co-Klasse.</summary>
      <param name="coClass" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class identifier of the original coclass.">Ein <see cref="T:System.Type" />, der den Klassenbezeichner der ursprünglichen Co-Klasse enthält.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.CoClassAttribute.CoClass">
      <summary vsli:raw="Gets the class identifier of the original coclass.">Ruft den Klassenbezeichner der ursprünglichen Co-Klasse ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the class identifier of the original coclass.">Ein <see cref="T:System.Type" />, der den Klassenbezeichner der ursprünglichen Co-Klasse enthält.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CollectionsMarshal">
      <summary vsli:raw="An unsafe class that provides a set of methods to access the underlying data representations of collections.">Eine unsichere Klasse, die Methoden für den Zugriff auf die zugrunde liegenden Datendarstellungen von Sammlungen bereitstellt.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})">
      <summary vsli:raw="Gets a &lt;see cref=&quot;T:System.Span`1&quot; /&gt; view over the data in a list.&#xA; Items should not be added or removed from the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt; while the &lt;see cref=&quot;T:System.Span`1&quot; /&gt; is in use.">Ruft eine <see cref="T:System.Span`1" />-Ansicht der Daten in einer Liste ab.
Elemente sollten nicht zu <see cref="T:System.Collections.Generic.List`1" /> hinzugefügt oder daraus entfernt werden, solange <see cref="T:System.Span`1" /> verwendet wird.</summary>
      <param name="list" vsli:raw="List from which to create the &lt;see cref=&quot;T:System.Span`1&quot; /&gt;.">Die Liste, aus der die <see cref="T:System.Span`1" /> erstellt werden soll.</param>
      <typeparam name="T" vsli:raw="The type of items in the list.">Der Typ der Elemente in der Liste.</typeparam>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Span`1&quot; /&gt; instance over the &lt;see cref=&quot;T:System.Collections.Generic.List`1&quot; /&gt;.">Eine <see cref="T:System.Span`1" />-Instanz über der <see cref="T:System.Collections.Generic.List`1" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAliasNameAttribute">
      <summary vsli:raw="Indicates the COM alias for a parameter or field type.">Gibt den COM-Alias für einen Parameter oder Feldtyp an.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAliasNameAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAliasNameAttribute&quot; /&gt; class with the alias for the attributed field or parameter.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ComAliasNameAttribute" />-Klasse mit dem Alias für das attributierte Feld oder den Parameter.</summary>
      <param name="alias" vsli:raw="The alias for the field or parameter as found in the type library when it was imported.">Der Alias des Felds oder Parameters, wie er in der Typbibliothek zum Zeitpunkt des Imports vorhanden ist.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAliasNameAttribute.Value">
      <summary vsli:raw="Gets the alias for the field or parameter as found in the type library when it was imported.">Ruft den Alias des Felds oder Parameters ab, der beim Importieren in der Typbibliothek angegeben war.</summary>
      <returns vsli:raw="The alias for the field or parameter as found in the type library when it was imported.">Der Alias des Felds oder Parameters, wie er in der Typbibliothek zum Zeitpunkt des Imports vorhanden ist.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComAwareEventInfo">
      <summary vsli:raw="Permits late-bound registration of an event handler.">Lässt die spät gebundene Registrierung eines Ereignishandlers zu.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; class by using the specified type and a name of the event on the type.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />-Klasse unter Verwendung des angegebenen Typs und Namens des Ereignisses für den Typ.</summary>
      <param name="type" vsli:raw="The type of object.">Der Objekttyp.</param>
      <param name="eventName" vsli:raw="The name of an event on &lt;paramref name=&quot;type&quot; /&gt;.">Der Name eines Ereignisses für <paramref name="type" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.AddEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Attaches an event handler to a COM object.">Fügt einen Ereignishandler an ein COM-Objekt an.</summary>
      <param name="target" vsli:raw="The target object that the event delegate should bind to.">Das Zielobjekt, an das der Ereignisdelegat gebunden werden soll.</param>
      <param name="handler" vsli:raw="The event delegate.">Der Ereignisdelegat.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetAddMethod(System.Boolean)">
      <summary vsli:raw="Gets the method that was used to add an event handler delegate to the event source.">Ruft die Methode ab, mit der der Ereignisquelle ein Ereignishandlerdelegat hinzugefügt wurde.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn nicht öffentliche Methoden zurückgegeben werden sollen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> ist <see langword="true" />, und die zum Hinzufügen eines Ereignishandlerdelegaten verwendete Methode ist nicht öffentlich, aber der Aufrufer hat keine Berechtigung zum Reflektieren nicht öffentlicher Methoden.</exception>
      <returns vsli:raw="The method that was used to add an event handler delegate to the event source.">Die Methode, mit der der Ereignisquelle ein Ereignishandlerdelegat hinzugefügt wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets an array that contains all the custom attributes that are applied to this member.">Ruft ein Array ab, das alle auf diesen Member angewendeten benutzerdefinierten Attribute enthält, wenn sie in einer abgeleiteten Klasse überschrieben wird.</summary>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um die Vererbungskette dieses Members nach den Attributen zu durchsuchen; andernfalls <see langword="false" />.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context.">Dieser Member gehört zu einem Typ, der in den auf Reflexionen beschränkten Kontext geladen wird. Weitere Informationen finden Sie unter Gewusst wie: Laden von Assemblys in den reflexionsbezogenen Kontext.</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="A custom attribute type cannot be loaded.">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</exception>
      <returns vsli:raw="An array that contains all the custom attributes, or an array that has no elements if no attributes were defined.">Ein Array, das alle benutzerdefinierte Attribute enthält, oder ein Array ohne Elemente, wenn keine Attribute definiert wurden.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributes(System.Type,System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, gets an array that contains all the custom attributes of the specified type that are applied to this member.">Ruft ein Array ab, das alle auf diesen Member angewendeten benutzerdefinierten Attribute des angegebenen Typs enthält, wenn sie in einer abgeleiteten Klasse überschrieben wird.</summary>
      <param name="attributeType" vsli:raw="The attribute type to search for. Only attributes that are assignable to this type can be returned.">Der zu suchende Attributtyp. Es können nur Attribute zurückgegeben werden, die diesem Typ zugewiesen werden können.</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um die Vererbungskette dieses Members nach den Attributen zu durchsuchen; andernfalls <see langword="false" />.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;attributeType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="attributeType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This member belongs to a type that is loaded into the reflection-only context. See How to: Load Assemblies into the Reflection-Only Context">Dieser Member gehört zu einem Typ, der in den auf Reflexionen beschränkten Kontext geladen wird. Weitere Informationen finden Sie unter How to: Load Assemblies into the Reflection-Only Context</exception>
      <exception cref="T:System.TypeLoadException" vsli:raw="A custom attribute type cannot be loaded.">Ein benutzerdefinierter Attributtyp kann nicht geladen werden.</exception>
      <returns vsli:raw="An array that contains all the custom attributes of the specified type, or an array that has no elements if no attributes were defined.">Ein Array, das alle benutzerdefinierte Attribute des angegebenen Typs enthält, oder ein Array ohne Elemente, wenn keine Attribute definiert wurden.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetCustomAttributesData">
      <summary vsli:raw="Returns a list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects for the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt;.">Gibt eine Liste von <see cref="T:System.Reflection.CustomAttributeData" />-Klassen für die aktuelle <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />-Klasse zurück.</summary>
      <returns vsli:raw="A generic list of &lt;see cref=&quot;T:System.Reflection.CustomAttributeData&quot; /&gt; objects representing data about the attributes that have been applied to the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt;.">Eine generische Liste von <see cref="T:System.Reflection.CustomAttributeData" />-Klassen, die Daten zu den Attributen darstellen, die auf die aktuelle <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />-Klasse angewendet wurden.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetOtherMethods(System.Boolean)">
      <summary vsli:raw="Returns the public or non-public methods that have been associated with an event in metadata.">Gibt die öffentlichen oder nicht öffentlichen Methoden zurück, die einem Ereignis in den Metadaten zugeordnet wurden.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to include non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn nicht öffentliche Methoden eingeschlossen werden sollen, andernfalls <see langword="false" />.</param>
      <returns vsli:raw="An array representing the methods that have been associated with the event in metadata. If there are no such methods, an empty array is returned.">Ein Array, das die Methoden darstellt, die dem Ereignis in den Metadaten zugeordnet wurden. Wenn keine solchen Methoden vorhanden sind, wird ein leeres Array zurückgegeben.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRaiseMethod(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, returns the method that was called when the event was raised.">Gibt die Methode zurück, die beim Auslösen des Ereignisses aufgerufen wurde, wenn sie in einer abgeleiteten Klasse überschrieben wird.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn nicht öffentliche Methoden zurückgegeben werden sollen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> ist <see langword="true" />, und die zum Hinzufügen eines Ereignishandlerdelegaten verwendete Methode ist nicht öffentlich, aber der Aufrufer hat keine Berechtigung zum Reflektieren nicht öffentlicher Methoden.</exception>
      <returns vsli:raw="The object that was called when the event was raised.">Das Objekt, das beim Auslösen des Ereignisses aufgerufen wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.GetRemoveMethod(System.Boolean)">
      <summary vsli:raw="When overridden in a derived class, retrieves the &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object for removing a method of the event.">Ruft das <see cref="T:System.Reflection.MethodInfo" />-Objekt zum Entfernen einer Methode des Ereignisses ab, wenn sie in einer abgeleiteten Klasse überschrieben wird.</summary>
      <param name="nonPublic" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to return non-public methods; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn nicht öffentliche Methoden zurückgegeben werden sollen, andernfalls <see langword="false" />.</param>
      <exception cref="T:System.MethodAccessException" vsli:raw="&lt;paramref name=&quot;nonPublic&quot; /&gt; is &lt;see langword=&quot;true&quot; /&gt; and the method used to add an event handler delegate is non-public, but the caller does not have permission to reflect on non-public methods.">
        <paramref name="nonPublic" /> ist <see langword="true" />, und die zum Hinzufügen eines Ereignishandlerdelegaten verwendete Methode ist nicht öffentlich, aber der Aufrufer hat keine Berechtigung zum Reflektieren nicht öffentlicher Methoden.</exception>
      <returns vsli:raw="The method that was used to remove an event handler delegate from the event source.">Die Methode, mit der ein Ereignishandlerdelegat aus der Ereignisquelle entfernt wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.IsDefined(System.Type,System.Boolean)">
      <summary vsli:raw="Indicates whether one or more instances of the specified attribute are applied to this member.">Gibt an, ob eine oder mehrere Instanzen des angegebenen Attributs auf diesen Member angewendet wurden.</summary>
      <param name="attributeType" vsli:raw="The attribute type to search for.">Der zu suchende Attributtyp.</param>
      <param name="inherit" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to search this member's inheritance chain to find the attributes; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um die Vererbungskette dieses Members nach den Attributen zu durchsuchen; andernfalls <see langword="false" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the specified attribute has been applied to this member; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn das angegebene Attribut auf diesen Member angewendet wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComAwareEventInfo.RemoveEventHandler(System.Object,System.Delegate)">
      <summary vsli:raw="Detaches an event handler from a COM object.">Trennt einen Ereignishandler von einem COM-Objekt.</summary>
      <param name="target" vsli:raw="The target object that the event delegate is bound to.">Das Zielobjekt, an das der Ereignisdelegat gebunden ist.</param>
      <param name="handler" vsli:raw="The event delegate.">Der Ereignisdelegat.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The event does not have a public &lt;see langword=&quot;remove&quot; /&gt; accessor.">Das Ereignis besitzt keinen öffentlichen <see langword="remove" />-Accessor.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The handler that was passed in cannot be used.">Der übergebene Handler kann nicht verwendet werden.</exception>
      <exception cref="T:System.Reflection.TargetException" vsli:raw="The &lt;paramref name=&quot;target&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt; and the event is not static.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;see cref=&quot;T:System.Reflection.EventInfo&quot; /&gt; is not declared on the target.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch &lt;see cref=&quot;T:System.Exception&quot; /&gt; instead.">
        <block subset="none" type="note">
          <para>  
 Fangen Sie in .NET für Windows Store-Apps oder der portablen Klassenbibliothek stattdessen <see cref="T:System.Exception" /> ab.</para>
        </block>  
  
 Der <paramref name="target" />-Parameter ist <see langword="null" />, und das Ereignis ist nicht statisch.  
  
- oder - 
Die <see cref="T:System.Reflection.EventInfo" /> ist im Ziel nicht deklariert.</exception>
      <exception cref="T:System.MethodAccessException" vsli:raw="The caller does not have access permission to the member.&#xA;&#xA;Note: In .NET for Windows Store apps or the Portable Class Library, catch the base class exception, &lt;see cref=&quot;T:System.MemberAccessException&quot; /&gt;, instead.">
        <block subset="none" type="note">
          <para>  
 Fangen Sie in .NET für Windows Store-Apps oder der portablen Klassenbibliothek stattdessen die Basisklassenausnahme <see cref="T:System.MemberAccessException" /> ab.</para>
        </block>  
  
 Der Aufrufer verfügt nicht über Zugriffsberechtigung für diesen Member.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Attributes">
      <summary vsli:raw="Gets the attributes for this event.">Ruft die Attribute für dieses Ereignis ab.</summary>
      <returns vsli:raw="The read-only attributes for this event.">Die Schreibschutzattribute für dieses Ereignis.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.DeclaringType">
      <summary vsli:raw="Gets the class that declares this member.">Ruft die Klasse ab, die diesen Member deklariert.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object for the class that declares this member.">Das <see cref="T:System.Type" />-Objekt für die Klasse, in der dieser Member deklariert ist.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.MetadataToken">
      <summary vsli:raw="Gets the metadata token associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">Ruft das Metadatentoken ab, das der aktuellen <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />-Klasse zugeordnet ist.</summary>
      <returns vsli:raw="A 32-bit Integer that represents the metadata token.">Eine 32-Bit-Ganzzahl, die das Metadatentoken darstellt.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Module">
      <summary vsli:raw="Gets the module associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">Ruft das Modul ab, das der aktuellen <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" />-Klasse zugeordnet ist.</summary>
      <returns vsli:raw="The module associated with the current &lt;see cref=&quot;T:System.Runtime.InteropServices.ComAwareEventInfo&quot; /&gt; object.">Das Modul, das dem aktuellen-Objekt zugeordnet ist <see cref="T:System.Runtime.InteropServices.ComAwareEventInfo" /> .</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.Name">
      <summary vsli:raw="Gets the name of the current member.">Ruft den Namen des aktuellen Members ab.</summary>
      <returns vsli:raw="The name of this member.">Der Name dieses Members.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComAwareEventInfo.ReflectedType">
      <summary vsli:raw="Gets the class object that was used to initialize this instance.">Ruft das Klassenobjekt ab, das zum Initialisieren dieser Instanz verwendet wurde.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that was used to initialize the current object.">Das <see cref="T:System.Type" />-Objekt, das zum Initialisieren des aktuellen Objekts verwendet wurde.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute">
      <summary vsli:raw="Indicates to a COM client that all classes in the current version of an assembly are compatible with classes in an earlier version of the assembly.">Gibt für einen COM-Client an, dass alle Klassen in der aktuellen Version einer Assembly mit den Klassen in einer früheren Version der betreffenden Assembly kompatibel sind.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComCompatibleVersionAttribute.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComCompatibleVersionAttribute&quot; /&gt; class with the major version, minor version, build, and revision numbers of the assembly.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ComCompatibleVersionAttribute" />-Klasse mit der Hauptversions-, Nebenversions-, Build- und Revisionsnummer der Assembly.</summary>
      <param name="major" vsli:raw="The major version number of the assembly.">Die Hauptversionsnummer der Assembly.</param>
      <param name="minor" vsli:raw="The minor version number of the assembly.">Die Nebenversionsnummer der Assembly.</param>
      <param name="build" vsli:raw="The build number of the assembly.">Die Buildnummer der Assembly.</param>
      <param name="revision" vsli:raw="The revision number of the assembly.">Die Revisionsnummer der Assembly.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.BuildNumber">
      <summary vsli:raw="Gets the build number of the assembly.">Ruft die Buildnummer der Assembly ab.</summary>
      <returns vsli:raw="The build number of the assembly.">Die Buildnummer der Assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the assembly.">Ruft die Hauptversionsnummer der Assembly ab.</summary>
      <returns vsli:raw="The major version number of the assembly.">Die Hauptversionsnummer der Assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the assembly.">Ruft die Nebenversionsnummer der Assembly ab.</summary>
      <returns vsli:raw="The minor version number of the assembly.">Die Nebenversionsnummer der Assembly.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComCompatibleVersionAttribute.RevisionNumber">
      <summary vsli:raw="Gets the revision number of the assembly.">Ruft die Revisionsnummer der Assembly ab.</summary>
      <returns vsli:raw="The revision number of the assembly.">Die Revisionsnummer der Assembly.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComConversionLossAttribute">
      <summary vsli:raw="Indicates that information was lost about a class or interface when it was imported from a type library to an assembly.">Gibt an, dass Klassen- oder Schnittstelleninformationen beim Import aus einer Typbibliothek in eine Assembly verloren gegangen sind.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComConversionLossAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ComConversionLossAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see langword="ComConversionLossAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute">
      <summary vsli:raw="Specifies a default interface to expose to COM. This class cannot be inherited.">Gibt eine Standardschnittstelle an, die für COM verfügbar gemacht werden soll. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Type&quot; /&gt; object as the default interface exposed to COM.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ComDefaultInterfaceAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Type" />-Objekt als für COM verfügbar gemachte Standardschnittstelle.</summary>
      <param name="defaultInterface" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; value indicating the default interface to expose to COM.">Ein <see cref="T:System.Type" />-Wert, der die Standardschnittstelle angibt, die für COM verfügbar gemacht werden soll.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComDefaultInterfaceAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the default interface to expose to COM.">Ruft das <see cref="T:System.Type" />-Objekt ab, das die Standardschnittstelle angibt, die für COM verfügbar gemacht werden soll.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that specifies the default interface to expose to COM.">Das <see cref="T:System.Type" />-Objekt, das die Standardschnittstelle angibt, die für COM verfügbar gemacht werden soll.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventInterfaceAttribute">
      <summary vsli:raw="Identifies the source interface and the class that implements the methods of the event interface that is generated when a coclass is imported from a COM type library.">Identifiziert die Quellschnittstelle und die Klasse, die die Methoden der Ereignisschnittstelle implementiert, die beim Importieren einer Co-Klasse aus einer COM-Typbibliothek generiert wird.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventInterfaceAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComEventInterfaceAttribute&quot; /&gt; class with the source interface and event provider class.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ComEventInterfaceAttribute" />-Klasse mit der Quellschnittstellen- und der Ereignisanbieterklasse.</summary>
      <param name="SourceInterface" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the original source interface from the type library. COM uses this interface to call back to the managed class.">Ein <see cref="T:System.Type" />, der die ursprüngliche Quellschnittstelle aus der Typbibliothek enthält. COM verwendet diese Schnittstelle für Rückrufe an die verwaltete Klasse.</param>
      <param name="EventProvider" vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class that implements the methods of the event interface.">Ein <see cref="T:System.Type" />, der die Klasse zum Implementieren der Methoden der Ereignisschnittstelle enthält.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.EventProvider">
      <summary vsli:raw="Gets the class that implements the methods of the event interface.">Ruft die Klasse ab, die die Methoden der Ereignisschnittstelle implementiert.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; that contains the class that implements the methods of the event interface.">Ein <see cref="T:System.Type" />, der die Klasse zum Implementieren der Methoden der Ereignisschnittstelle enthält.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ComEventInterfaceAttribute.SourceInterface">
      <summary vsli:raw="Gets the original source interface from the type library.">Ruft die ursprüngliche Quellschnittstelle aus der Typbibliothek ab.</summary>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.Type&quot; /&gt; containing the source interface.">Ein <see cref="T:System.Type" />, der die Quellschnittstelle enthält.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComEventsHelper">
      <summary vsli:raw="Provides methods that enable .NET delegates that handle events to be added and removed from COM objects.">Stellt Methoden bereit, mit denen .NET Framework-Delegaten, die Ereignisse behandeln, COM-Objekten hinzugefügt und daraus entfernt werden können.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Combine(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary vsli:raw="Adds a delegate to the invocation list of events originating from a COM object.">Fügt der Aufrufliste von Ereignissen, die aus einem COM-Objekt stammen, einen Delegaten hinzu.</summary>
      <param name="rcw" vsli:raw="The COM object that triggers the events the caller would like to respond to.">Das COM-Objekt, das die Ereignisse auslöst, auf die der Aufrufer reagieren möchte.</param>
      <param name="iid" vsli:raw="The identifier of the source interface used by the COM object to trigger events.">Der Bezeichner der Quellschnittstelle, mit der das COM-Objekt Ereignisse auslöst.</param>
      <param name="dispid" vsli:raw="The dispatch identifier of the method on the source interface.">Der Dispatchbezeichner der Methode für die Quellschnittstelle.</param>
      <param name="d" vsli:raw="The delegate to invoke when the COM event is fired.">Der beim Auslösen des COM-Ereignisses aufzurufende Delegat.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComEventsHelper.Remove(System.Object,System.Guid,System.Int32,System.Delegate)">
      <summary vsli:raw="Removes a delegate from the invocation list of events originating from a COM object.">Entfernt einen Delegaten aus der Aufrufliste der Ereignisse, die von einem COM-Objekt stammen.</summary>
      <param name="rcw" vsli:raw="The COM object the delegate is attached to.">Das COM-Objekt, an das der Delegat angefügt ist.</param>
      <param name="iid" vsli:raw="The identifier of the source interface used by the COM object to trigger events.">Der Bezeichner der Quellschnittstelle, mit der das COM-Objekt Ereignisse auslöst.</param>
      <param name="dispid" vsli:raw="The dispatch identifier of the method on the source interface.">Der Dispatchbezeichner der Methode für die Quellschnittstelle.</param>
      <param name="d" vsli:raw="The delegate to remove from the invocation list.">Der Delegat, der aus der Aufrufliste entfernt werden soll.</param>
      <returns vsli:raw="The delegate that was removed from the invocation list.">Der Delegat, der aus der Aufrufliste entfernt wurde.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.COMException">
      <summary vsli:raw="The exception that is thrown when an unrecognized HRESULT is returned from a COM method call.">Die Ausnahme, die ausgelöst wird, wenn von einem COM-Methodenaufruf ein nicht erkanntes HRESULT zurückgegeben wird.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with default values.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.COMException" />-Klasse mit Standardwerten.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class from serialization data.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.COMException" />-Klasse aus Serialisierungsdaten.</summary>
      <param name="info" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.SerializationInfo&quot; /&gt; object that holds the serialized object data.">Das <see cref="T:System.Runtime.Serialization.SerializationInfo" />-Objekt, das die serialisierten Objektdaten enthält.</param>
      <param name="context" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.Serialization.StreamingContext&quot; /&gt; object that supplies the contextual information about the source or destination.">Das <see cref="T:System.Runtime.Serialization.StreamingContext" />-Objekt, das die Kontextinformationen zur Quelle bzw. zum Ziel bereitstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified message.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.COMException" />-Klasse mit einer angegebenen Meldung.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Die Meldung, in der die Ursache für die Ausnahme angegeben wird.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.COMException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="inner" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.COMException&quot; /&gt; class with a specified message and error code.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.COMException" />-Klasse mit einer angegebenen Meldung und einem angegebenen Fehlercode.</summary>
      <param name="message" vsli:raw="The message that indicates the reason the exception occurred.">Die Meldung, in der die Ursache für die eingetretene Ausnahme angegeben wird.</param>
      <param name="errorCode" vsli:raw="The error code (HRESULT) value associated with this exception.">Der dieser Ausnahme zugeordnete Fehlercodewert (HRESULT).</param>
    </member>
    <member name="M:System.Runtime.InteropServices.COMException.ToString">
      <summary vsli:raw="Converts the contents of the exception to a string.">Konvertiert den Inhalt der Ausnahme in eine Zeichenfolge.</summary>
      <returns vsli:raw="A string containing the &lt;see cref=&quot;P:System.Exception.HResult&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.Message&quot; /&gt;, &lt;see cref=&quot;P:System.Exception.InnerException&quot; /&gt;, and &lt;see cref=&quot;P:System.Exception.StackTrace&quot; /&gt; properties of the exception.">Eine Zeichenfolge, die die <see cref="P:System.Exception.HResult" />-Eigenschaft, die <see cref="P:System.Exception.Message" />-Eigenschaft, die <see cref="P:System.Exception.InnerException" />-Eigenschaft und die <see cref="P:System.Exception.StackTrace" />-Eigenschaft der Ausnahme enthält.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComImportAttribute">
      <summary vsli:raw="Indicates that the attributed type was previously defined in COM.">Gibt an, dass der attributierte Typ zuvor in COM definiert wurde.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComImportAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComImportAttribute&quot; /&gt;.">Initialisiert eine neue Instanz des <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComInterfaceType">
      <summary vsli:raw="Identifies how to expose an interface to COM.">Gibt an, wie eine Schnittstelle für COM verfügbar gemacht wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual">
      <summary vsli:raw="Indicates that the interface is exposed to COM as a dual interface, which enables both early and late binding. &lt;see cref=&quot;F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual&quot; /&gt; is the default value.">Gibt an, dass eine Schnittstelle für COM als duale Schnittstelle verfügbar gemacht wird, wodurch sowohl frühe als auch späte Bindung ermöglicht wird. Der Standardwert lautet <see cref="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsDual" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIDispatch">
      <summary vsli:raw="Indicates that an interface is exposed to COM as a dispinterface, which enables late binding only.">Gibt an, dass eine Schnittstelle für COM als dispinterface verfügbar gemacht wird, wodurch nur späte Bindung ermöglicht wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIInspectable">
      <summary vsli:raw="Indicates that an interface is exposed to COM as a Windows Runtime interface.">Gibt an, dass eine Schnittstelle für COM als Windows-Runtime-Schnittstelle verfügbar gemacht wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown">
      <summary vsli:raw="Indicates that an interface is exposed to COM as an interface that is derived from IUnknown, which enables only early binding.">Gibt an, dass eine Schnittstelle für COM als Schnittstelle verfügbar gemacht wird, die von IUnknownabgeleitet ist, wodurch nur frühe Bindung ermöglicht wird.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComMemberType">
      <summary vsli:raw="Describes the type of a COM member.">Beschreibt den Typ eines COM-Members.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.Method">
      <summary vsli:raw="The member is a normal method.">Der Member ist eine normale Methode.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropGet">
      <summary vsli:raw="The member gets properties.">Der Member ruft Eigenschaften ab.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComMemberType.PropSet">
      <summary vsli:raw="The member sets properties.">Der Member legt Eigenschaften fest.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute">
      <summary vsli:raw="Specifies the method to call when you register an assembly for use from COM; this enables the execution of user-written code during the registration process.">Gibt die Methode an, die beim Registrieren einer Assembly für die Verwendung durch COM aufgerufen werden muss. Dadurch kann während des Registrierungsvorgangs vom Benutzer erstellter Code ausgeführt werden.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComRegisterFunctionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComRegisterFunctionAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ComRegisterFunctionAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute">
      <summary vsli:raw="Identifies a list of interfaces that are exposed as COM event sources for the attributed class.">Gibt eine Liste mit Schnittstellen an, die als COM-Ereignisquellen für die attributierte Klasse verfügbar gemacht werden.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the name of the event source interface.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" />-Klasse mit dem Namen der Quellschnittstelle des Ereignisses.</summary>
      <param name="sourceInterfaces" vsli:raw="A null-delimited list of fully qualified event source interface names.">Eine durch NULL getrennte Liste von voll gekennzeichneten Namen der Ereignisquellen-Schnittstellen.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the type to use as a source interface.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" />-Klasse mit dem Typ, der als Quellschnittstelle verwendet werden soll.</summary>
      <param name="sourceInterface" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the source interface.">Der <see cref="T:System.Type" /> der Quellschnittstelle.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" />-Klasse mit den Typen, die als Quellschnittstellen verwendet werden sollen.</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">Der <see cref="T:System.Type" /> der Standard-Quellschnittstelle.</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">Der <see cref="T:System.Type" /> einer Quellschnittstelle.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">Initialisiert eine neue Instanz der <see langword="ComSourceInterfacesAttribute" />-Klasse mit den Typen, die als Quellschnittstellen verwendet werden sollen.</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">Der <see cref="T:System.Type" /> der Standard-Quellschnittstelle.</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">Der <see cref="T:System.Type" /> einer Quellschnittstelle.</param>
      <param name="sourceInterface3" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">Der <see cref="T:System.Type" /> einer Quellschnittstelle.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComSourceInterfacesAttribute.#ctor(System.Type,System.Type,System.Type,System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComSourceInterfacesAttribute&quot; /&gt; class with the types to use as source interfaces.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ComSourceInterfacesAttribute" />-Klasse mit den Typen, die als Quellschnittstellen verwendet werden sollen.</summary>
      <param name="sourceInterface1" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of the default source interface.">Der <see cref="T:System.Type" /> der Standard-Quellschnittstelle.</param>
      <param name="sourceInterface2" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">Der <see cref="T:System.Type" /> einer Quellschnittstelle.</param>
      <param name="sourceInterface3" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">Der <see cref="T:System.Type" /> einer Quellschnittstelle.</param>
      <param name="sourceInterface4" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; of a source interface.">Der <see cref="T:System.Type" /> einer Quellschnittstelle.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ComSourceInterfacesAttribute.Value">
      <summary vsli:raw="Gets the fully qualified name of the event source interface.">Ruft den voll gekennzeichneten Namen der Quellschnittstelle des Ereignisses ab.</summary>
      <returns vsli:raw="The fully qualified name of the event source interface.">Der voll gekennzeichnete Name der Quellschnittstelle des Ereignisses.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ADVF">
      <summary vsli:raw="Specifies the requested behavior when setting up an advise sink or a caching connection with an object.">Gibt das angeforderte Verhalten beim Einrichten einer Advise-Senke oder einer Zwischenspeicherungsverbindung mit einem Objekt an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_DATAONSTOP">
      <summary vsli:raw="For data advisory connections, assures accessibility to data.">Stellt bei Daten-Advise-Verbindungen den Zugriff auf die Daten sicher.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_NODATA">
      <summary vsli:raw="For data advisory connections (&lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt;), this flag requests the data object not to send data when it calls &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;.">Bei Daten-Advise-Verbindungen (<see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> oder <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />) fordert dieses Flag das Datenobjekt auf, keine Daten zu senden, wenn <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> aufgerufen wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_ONLYONCE">
      <summary vsli:raw="Requests that the object make only one change notification or cache update before deleting the connection.">Fordert an, dass das Objekt nur eine Änderungsbenachrichtigung oder Zwischenspeicheraktualisierung durchführt, bevor die Verbindung beendet wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVF_PRIMEFIRST">
      <summary vsli:raw="Requests that the object not wait for the data or view to change before making an initial call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; (for data or view advisory connections) or updating the cache (for cache connections).">Fordert an, dass das Objekt nicht auf die Daten- oder Ansichtsänderung wartet, bevor es <see cref="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> zum ersten Mal aufruft (bei Daten- oder Ansichts-Advise-Verbindungen) oder den Zwischenspeicher aktualisiert (bei Cachingverbindungen).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN">
      <summary vsli:raw="This value is used by DLL object applications and object handlers that perform the drawing of their objects.">Dieser Wert wird von DLL-Objektanwendungen und -Objekthandlern verwendet, die ihre Objekte selbst zeichnen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_NOHANDLER">
      <summary vsli:raw="Synonym for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN&quot; /&gt;, which is used more often.">Synonym für <see cref="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_FORCEBUILTIN" />, das öfter verwendet wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ADVF.ADVFCACHE_ONSAVE">
      <summary vsli:raw="For cache connections, this flag updates the cached representation only when the object containing the cache is saved.">Bei Cachingverbindungen aktualisiert dieses Flag die zwischengespeicherte Darstellung nur dann, wenn das Objekt mit dem Cache gespeichert wird.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BIND_OPTS">
      <summary vsli:raw="Stores the parameters that are used during a moniker binding operation.">Speichert die Parameter, die bei einem Monikerbindungsvorgang verwendet werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.cbStruct">
      <summary vsli:raw="Specifies the size, in bytes, of the &lt;see langword=&quot;BIND_OPTS&quot; /&gt; structure.">Gibt die Größe der <see langword="BIND_OPTS" />-Struktur in Bytes an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.dwTickCountDeadline">
      <summary vsli:raw="Indicates the amount of time (clock time in milliseconds, as returned by the &lt;see langword=&quot;GetTickCount&quot; /&gt; function) that the caller specified to complete the binding operation.">Gibt die Zeitspanne an (Systemzeit in Millisekunden, wie von der <see langword="GetTickCount" />-Funktion zurückgegeben), die der Aufrufer für die Durchführung des Bindungsvorgangs angegeben hat.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfFlags">
      <summary vsli:raw="Controls aspects of moniker binding operations.">Steuert Aspekte von Vorgängen der Monikerbindung.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BIND_OPTS.grfMode">
      <summary vsli:raw="Represents flags that should be used when opening the file that contains the object identified by the moniker.">Stellt die Flags dar, die beim Öffnen der Datei verwendet werden sollen, die das vom Moniker angegebene Objekt enthält.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.BINDPTR">
      <summary vsli:raw="Contains a pointer to a bound-to &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure, &lt;see cref=&quot;T:System.Runtime.InteropServices.VARDESC&quot; /&gt; structure, or an &lt;see langword=&quot;ITypeComp&quot; /&gt; interface.">Enthält einen Zeiger auf eine gebundene <see cref="T:System.Runtime.InteropServices.FUNCDESC" />-Struktur, eine gebundene <see cref="T:System.Runtime.InteropServices.VARDESC" />-Struktur oder eine gebundene <see langword="ITypeComp" />-Schnittstelle.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpfuncdesc">
      <summary vsli:raw="Represents a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure.">Stellt einen Zeiger auf eine <see cref="T:System.Runtime.InteropServices.FUNCDESC" />-Struktur dar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lptcomp">
      <summary vsli:raw="Represents a pointer to an &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ITypeComp&quot; /&gt; interface.">Stellt einen Zeiger auf eine <see cref="T:System.Runtime.InteropServices.ComTypes.ITypeComp" />-Schnittstelle dar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.BINDPTR.lpvardesc">
      <summary vsli:raw="Represents a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.VARDESC&quot; /&gt; structure.">Stellt einen Zeiger auf eine <see cref="T:System.Runtime.InteropServices.VARDESC" />-Struktur dar.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CALLCONV">
      <summary vsli:raw="Identifies the calling convention used by a method described in a METHODDATA structure.">Gibt die Aufrufkonvention einer Methode an, die in einer METHODDATA-Struktur beschrieben wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_CDECL">
      <summary vsli:raw="Indicates that the C declaration (CDECL) calling convention is used for a method.">Zeigt an, dass die C-Deklaration-Aufrufkonvention (CDECL) für eine Methode verwendet wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MACPASCAL">
      <summary vsli:raw="Indicates that the Macintosh Pascal (MACPASCAL) calling convention is used for a method.">Zeigt an, dass die Macintosh-Pascal-Aufrufkonvention (MACPASCAL) für eine Methode verwendet wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MAX">
      <summary vsli:raw="Indicates the end of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.CALLCONV&quot; /&gt; enumeration.">Zeigt das Ende der <see cref="T:System.Runtime.InteropServices.ComTypes.CALLCONV" />-Enumeration an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWCDECL">
      <summary vsli:raw="Indicates that the Macintosh Programmers' Workbench (MPW) CDECL calling convention is used for a method.">Zeigt an, dass die CDECL-Aufrufkonvention der Macintosh Programmers Workbench (MPW) für eine Methode verwendet wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MPWPASCAL">
      <summary vsli:raw="Indicates that the Macintosh Programmers' Workbench (MPW) PASCAL calling convention is used for a method.">Zeigt an, dass die PASCAL-Aufrufkonvention der Macintosh Programmers Workbench (MPW) für eine Methode verwendet wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_MSCPASCAL">
      <summary vsli:raw="Indicates that the MSC Pascal (MSCPASCAL) calling convention is used for a method.">Zeigt an, dass die MSC-Pascal-Aufrufkonvention (MSCPASCAL) für eine Methode verwendet wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_PASCAL">
      <summary vsli:raw="Indicates that the Pascal calling convention is used for a method.">Zeigt an, dass die Pascal-Aufrufkonvention für eine Methode verwendet wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_RESERVED">
      <summary vsli:raw="This value is reserved for future use.">Dieser Wert ist für die zukünftige Verwendung reserviert.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_STDCALL">
      <summary vsli:raw="Indicates that the standard calling convention (STDCALL) is used for a method.">Zeigt an, dass die Standardaufrufkonvention (STDCALL) für eine Methode verwendet wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CALLCONV.CC_SYSCALL">
      <summary vsli:raw="Indicates that the standard SYSCALL calling convention is used for a method.">Zeigt an, dass die SYSCALL-Standardaufrufkonvention für eine Methode verwendet wird.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.CONNECTDATA">
      <summary vsli:raw="Describes a connection that exists to a given connection point.">Beschreibt eine bestehende Verbindung mit einem bestimmten Verbindungspunkt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.dwCookie">
      <summary vsli:raw="Represents a connection token that is returned from a call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt;.">Stellt ein Verbindungstoken dar, das bei einem Aufruf von <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" /> zurückgegeben wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.CONNECTDATA.pUnk">
      <summary vsli:raw="Represents a pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface on a connected advisory sink. The caller must call &lt;see langword=&quot;IUnknown::Release&quot; /&gt; on this pointer when the &lt;see langword=&quot;CONNECTDATA&quot; /&gt; structure is no longer needed.">Stellt einen Zeiger auf die <see langword="IUnknown" />-Schnittstelle für eine verbundene Advisesenke dar. Wenn die <see langword="IUnknown::Release" />-Struktur nicht mehr benötigt wird, muss der Aufrufer für diesen Zeiger <see langword="CONNECTDATA" /> aufrufen.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DATADIR">
      <summary vsli:raw="Specifies the direction of the data flow in the &lt;paramref name=&quot;dwDirection&quot; /&gt; parameter of the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; method. This determines the formats that the resulting enumerator can enumerate.">Gibt die Richtung des Datenflusses im <paramref name="dwDirection" />-Parameter der <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" />-Methode an. Davon hängen die Formate ab, die der resultierende Enumerator auflisten kann.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_GET">
      <summary vsli:raw="Requests that &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; supply an enumerator for the formats that can be specified in &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;.">Fordert von <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> einen Enumerator für die Formate an, die in <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> angegeben werden können.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DATADIR.DATADIR_SET">
      <summary vsli:raw="Requests that &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)&quot; /&gt; supply an enumerator for the formats that can be specified in &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;.">Fordert von <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)" /> einen Enumerator für die Formate an, die in <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> angegeben werden können.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DESCKIND">
      <summary vsli:raw="Identifies the type description being bound to.">Gibt die Typbeschreibung für die Bindung an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_FUNCDESC">
      <summary vsli:raw="Indicates that a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure was returned.">Gibt an, dass eine <see cref="T:System.Runtime.InteropServices.FUNCDESC" />-Struktur zurückgegeben wurde.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_IMPLICITAPPOBJ">
      <summary vsli:raw="Indicates that an &lt;see langword=&quot;IMPLICITAPPOBJ&quot; /&gt; was returned.">Gibt an, dass ein <see langword="IMPLICITAPPOBJ" /> zurückgegeben wurde.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_MAX">
      <summary vsli:raw="Indicates an end-of-enumeration marker.">Gibt eine Markierung für das Ende der Enumeration an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_NONE">
      <summary vsli:raw="Indicates that no match was found.">Gibt an, dass keine Übereinstimmung gefunden wurde.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_TYPECOMP">
      <summary vsli:raw="Indicates that a &lt;see langword=&quot;TYPECOMP&quot; /&gt; was returned.">Gibt an, dass ein <see langword="TYPECOMP" /> zurückgegeben wurde.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DESCKIND.DESCKIND_VARDESC">
      <summary vsli:raw="Indicates that a &lt;see langword=&quot;VARDESC&quot; /&gt; was returned.">Gibt an, dass ein <see langword="VARDESC" /> zurückgegeben wurde.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DISPPARAMS">
      <summary vsli:raw="Contains the arguments passed to a method or property by &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">Enthält die Argumente, die von <see langword="IDispatch::Invoke" /> an eine Methode oder Eigenschaft übergeben werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cArgs">
      <summary vsli:raw="Represents the count of arguments.">Stellt die Anzahl der Argumente dar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.cNamedArgs">
      <summary vsli:raw="Represents the count of named arguments.">Stellt die Anzahl der benannten Argumente dar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgdispidNamedArgs">
      <summary vsli:raw="Represents the dispatch IDs of named arguments.">Stellt die Dispatch-IDs der benannten Argumente dar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DISPPARAMS.rgvarg">
      <summary vsli:raw="Represents a reference to the array of arguments.">Stellt einen Verweis auf das Argumentarray dar.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.DVASPECT">
      <summary vsli:raw="Specifies the desired data or view aspect of the object when drawing or getting data.">Gibt den gewünschten Daten- oder Ansichtsaspekt des Objekts beim Zeichnen oder Abrufen von Daten an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_CONTENT">
      <summary vsli:raw="A representation of an object that lets that object be displayed as an embedded object inside a container. This value is typically specified for compound document objects. The presentation can be provided for the screen or printer.">Eine Darstellung eines Objekts, die das Anzeigen des Objekts als eingebettetes Objekt in einem Container ermöglicht. Dieser Wert wird i. d. R. für Verbunddokumentobjekte angegeben. Die Darstellung kann für den Bildschirm oder den Drucker bereitgestellt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_DOCPRINT">
      <summary vsli:raw="A representation of an object on the screen as though it were printed to a printer using the Print command from the File menu. The described data may represent a sequence of pages.">Eine Darstellung eines Objekts auf dem Bildschirm, die dem Ausdruck mit dem Drucken-Befehl im Menü Datei gleicht. Die beschriebenen Daten können auf mehreren Seiten dargestellt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_ICON">
      <summary vsli:raw="An iconic representation of an object.">Eine Symboldarstellung eines Objekts.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.DVASPECT.DVASPECT_THUMBNAIL">
      <summary vsli:raw="A thumbnail representation of an object that lets that object be displayed in a browsing tool. The thumbnail is approximately a 120 by 120 pixel, 16-color (recommended), device-independent bitmap potentially wrapped in a metafile.">Eine Miniaturansicht eines Objekts, die das Anzeigen des Objekts in einem Browser ermöglicht. Die Miniaturansicht ist eine Bitmap mit ungefähr 120 x 120 Pixel, 16 Farben (empfohlen) und geräteunabhängig, die wahrscheinlich von einer Metadatei umschlossen ist.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC">
      <summary vsli:raw="Contains the type description and process transfer information for a variable, function, or a function parameter.">Enthält die Typbeschreibung und die Prozessübertragungsinformationen für eine Variable, Funktion oder einen Funktionsparameter.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.desc">
      <summary vsli:raw="Contains information about an element.">Enthält Informationen zu einem Element.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.tdesc">
      <summary vsli:raw="Identifies the type of the element.">Gibt den Elementtyp an.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION">
      <summary vsli:raw="Contains information about an element.">Enthält Informationen zu einem Element.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.idldesc">
      <summary vsli:raw="Contains information for remoting the element.">Enthält Informationen über Remoting des Elements.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.ELEMDESC.DESCUNION.paramdesc">
      <summary vsli:raw="Contains information about the parameter.">Enthält Informationen über den Parameter.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.EXCEPINFO">
      <summary vsli:raw="Describes the exceptions that occur during &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">Beschreibt die Ausnahmen, die während <see langword="IDispatch::Invoke" /> auftreten.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrDescription">
      <summary vsli:raw="Describes the error intended for the customer.">Eine für den Kunden bestimmte Beschreibung des Fehlers.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrHelpFile">
      <summary vsli:raw="Contains the fully-qualified drive, path, and file name of a Help file that contains more information about the error.">Enthält das Laufwerk, den vollqualifizierten Pfad und den Dateinamen einer Hilfedatei, in der Sie weitere Informationen über den Fehler finden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.bstrSource">
      <summary vsli:raw="Indicates the name of the source of the exception. Typically, this is an application name.">Gibt den Namen für die Quelle der Ausnahme an. In der Regel ist dies ein Anwendungsname.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.dwHelpContext">
      <summary vsli:raw="Indicates the Help context ID of the topic within the Help file.">Gibt die Hilfekontext-ID des Themas in der Hilfedatei an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pfnDeferredFillIn">
      <summary vsli:raw="Represents a pointer to a function that takes an &lt;see cref=&quot;T:System.Runtime.InteropServices.EXCEPINFO&quot; /&gt; structure as an argument and returns an HRESULT value. If deferred fill-in is not desired, this field is set to &lt;see langword=&quot;null&quot; /&gt;.">Stellt einen Zeiger auf die Funktion dar, die als Argument eine <see cref="T:System.Runtime.InteropServices.EXCEPINFO" />-Struktur annimmt und einen HRESULT-Wert zurückgibt. Wenn ein verzögertes Ausfüllen nicht gewünscht wird, wird dieses Feld auf <see langword="null" /> festgelegt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.pvReserved">
      <summary vsli:raw="This field is reserved; it must be set to &lt;see langword=&quot;null&quot; /&gt;.">Dieses Feld ist reserviert und muss auf <see langword="null" /> festgelegt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.scode">
      <summary vsli:raw="A return value describing the error.">Ein den Fehler beschreibender Rückgabewert.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wCode">
      <summary vsli:raw="Represents an error code identifying the error.">Stellt einen Fehlercode dar, der den Fehler bezeichnet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.EXCEPINFO.wReserved">
      <summary vsli:raw="This field is reserved; it must be set to 0.">Dieses Feld ist reserviert und muss auf 0 (null) festgelegt werden.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FILETIME">
      <summary vsli:raw="Represents the number of 100-nanosecond intervals since January 1, 1601. This structure is a 64-bit value.">Die Anzahl von 100-Nanosekunden-Intervallen seit dem 1. Januar 1601. Bei dieser Struktur handelt es sich um einen 64-Bit-Wert.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwHighDateTime">
      <summary vsli:raw="Specifies the high 32 bits of the &lt;see langword=&quot;FILETIME&quot; /&gt;.">Gibt die oberen 32 Bits von <see langword="FILETIME" /> an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FILETIME.dwLowDateTime">
      <summary vsli:raw="Specifies the low 32 bits of the &lt;see langword=&quot;FILETIME&quot; /&gt;.">Gibt die unteren 32 Bits von <see langword="FILETIME" /> an.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FORMATETC">
      <summary vsli:raw="Represents a generalized Clipboard format.">Stellt ein generalisiertes Zwischenablageformat dar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.cfFormat">
      <summary vsli:raw="Specifies the particular clipboard format of interest.">Gibt das spezielle Zwischenablageformat an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect">
      <summary vsli:raw="Specifies one of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DVASPECT&quot; /&gt; enumeration constants that indicates how much detail should be contained in the rendering.">Gibt eine der <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" />-Enumerationskonstanten an, die angibt, wie detailreich das Rendering erfolgen soll.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex">
      <summary vsli:raw="Specifies part of the aspect when the data must be split across page boundaries.">Gibt einen Teil des Aspektes an, wenn die Daten über Seitenbegrenzungen hinaus verteilt werden müssen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.ptd">
      <summary vsli:raw="Specifies a pointer to a &lt;see langword=&quot;DVTARGETDEVICE&quot; /&gt; structure containing information about the target device that the data is being composed for.">Gibt einen Zeiger auf eine <see langword="DVTARGETDEVICE" />-Struktur an, die Informationen über das Zielgerät enthält, für das die Daten erstellt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed">
      <summary vsli:raw="Specifies one of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; enumeration constants, which indicates the type of storage medium used to transfer the object's data.">Gibt eine der <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />-Enumerationskonstanten an, die den Typ des Speichermediums angibt, mit dem die Objektdaten übertragen werden.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCDESC">
      <summary vsli:raw="Defines a function description.">Definiert eine Funktionsbeschreibung.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.callconv">
      <summary vsli:raw="Specifies the calling convention of a function.">Gibt die Aufrufkonvention einer Funktion an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParams">
      <summary vsli:raw="Counts the total number of parameters.">Zählt die Gesamtanzahl der Parameter.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cParamsOpt">
      <summary vsli:raw="Counts the optional parameters.">Zählt die optionalen Parameter.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.cScodes">
      <summary vsli:raw="Counts the permitted return values.">Zählt die zulässigen Rückgabewerte.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.elemdescFunc">
      <summary vsli:raw="Contains the return type of the function.">Enthält den Rückgabetyp der Funktion.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.funckind">
      <summary vsli:raw="Specifies whether the function is virtual, static, or dispatch-only.">Gibt an, ob die Funktion virtuell, statisch oder auf Dispatch beschränkt ist.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.invkind">
      <summary vsli:raw="Specifies the type of a property function.">Gibt den Typ einer Eigenschaftsfunktion an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgelemdescParam">
      <summary vsli:raw="Indicates the array of &lt;see cref=&quot;F:System.Runtime.InteropServices.ELEMDESC&quot; /&gt;.">Gibt die Größe von <see cref="F:System.Runtime.InteropServices.FUNCDESC.cParams" /> an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.lprgscode">
      <summary vsli:raw="Stores the count of errors a function can return on a 16-bit system.">Speichert die Anzahl der Fehler, die eine Funktion auf einem 16-Bit-System zurückgeben kann.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.memid">
      <summary vsli:raw="Identifies the function member ID.">Bezeichnet die Funktionsmember-ID.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.oVft">
      <summary vsli:raw="Specifies the offset in the VTBL for &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL&quot; /&gt;.">Gibt den Offset in der VTBL für <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_VIRTUAL" /> an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCDESC.wFuncFlags">
      <summary vsli:raw="Indicates the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCFLAGS&quot; /&gt; of a function.">Gibt den <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" /> einer Funktion an.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCFLAGS">
      <summary vsli:raw="Identifies the constants that define the properties of a function.">Gibt die Konstanten an, die die Eigenschaften einer Funktion definieren.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FBINDABLE">
      <summary vsli:raw="The function that supports data binding.">Die Funktion, die Datenbindung unterstützt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTBIND">
      <summary vsli:raw="The function that best represents the object. Only one function in a type can have this attribute.">Die Funktion, die das Objekt am besten darstellt. Nur eine Funktion in einem Typ kann über dieses Attribut verfügen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDEFAULTCOLLELEM">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found, and is flagged as an accessor function for an element of the default collection, a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.">Lässt eine Optimierung zu, bei der der Compiler im Typ "abc" nach dem Member "xyz" sucht. Wenn ein solcher Member gefunden und als Accessorfunktion für einen Member der Standardauflistung markiert wird, wird ein Aufruf dieser Memberfunktion generiert. Zulässig für Member an Dispatchschnittstellen und Schnittstellen, nicht zulässig für Module.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FDISPLAYBIND">
      <summary vsli:raw="The function that is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE&quot; /&gt; must also be set.">Die dem Benutzer als bindungsfähig angezeigte Funktion. <see cref="F:System.Runtime.InteropServices.FUNCFLAGS.FUNCFLAG_FBINDABLE" /> muss auch festgelegt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FHIDDEN">
      <summary vsli:raw="The function should not be displayed to the user, although it exists and is bindable.">Die Funktion darf dem Benutzer nicht angezeigt werden, obwohl sie vorhanden und bindbar ist.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FIMMEDIATEBIND">
      <summary vsli:raw="Mapped as individual bindable properties.">Als einzelne bindbare Eigenschaften zugeordnet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FNONBROWSABLE">
      <summary vsli:raw="The property appears in an object browser, but not in a properties browser.">Die Eigenschaft wird in einem Objektkatalog, nicht jedoch in einem Eigenschaftenbrowser angezeigt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREPLACEABLE">
      <summary vsli:raw="Tags the interface as having default behaviors.">Markiert die Schnittstelle als Schnittstelle mit Standardverhalten.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FREQUESTEDIT">
      <summary vsli:raw="When set, any call to a method that sets the property results first in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;. The implementation of &lt;see langword=&quot;OnRequestEdit&quot; /&gt; determines if the call is allowed to set the property.">Bei Festlegung hat jeder Aufruf einer Methode, die die Eigenschaft festlegt, zunächst einen Aufruf von <see langword="IPropertyNotifySink::OnRequestEdit" /> zur Folge. Die Implementierung von <see langword="OnRequestEdit" /> bestimmt, ob der Aufruf zum Festlegen der Eigenschaft zulässig ist.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FRESTRICTED">
      <summary vsli:raw="The function should not be accessible from macro languages. This flag is intended for system-level functions or functions that type browsers should not display.">Der Zugriff auf die Funktion durch Makrosprachen darf nicht möglich sein. Dieses Flag ist für Funktionen auf Systemebene oder für Funktionen bestimmt, die von Typenbrowsern nicht angezeigt werden sollen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FSOURCE">
      <summary vsli:raw="The function returns an object that is a source of events.">Die Funktion gibt ein Objekt zurück, das eine Ereignisquelle ist.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUIDEFAULT">
      <summary vsli:raw="The type information member is the default member for display in the user interface.">Der Typinformationsmember ist der Standardmember für die Anzeige auf der Benutzeroberfläche.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCFLAGS.FUNCFLAG_FUSESGETLASTERROR">
      <summary vsli:raw="The function supports &lt;see langword=&quot;GetLastError&quot; /&gt;. If an error occurs during the function, the caller can call &lt;see langword=&quot;GetLastError&quot; /&gt; to retrieve the error code.">Die Funktion unterstützt <see langword="GetLastError" />. Wenn beim Ausführen der Funktion ein Fehler auftritt, kann der Aufrufer <see langword="GetLastError" /> aufrufen, um den Fehlercode abzurufen.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.FUNCKIND">
      <summary vsli:raw="Defines how to access a function.">Definiert den Zugriff auf eine Funktion.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_DISPATCH">
      <summary vsli:raw="The function can be accessed only through &lt;see langword=&quot;IDispatch&quot; /&gt;.">Auf die Funktion kann nur anhand von <see langword="IDispatch" /> zugegriffen werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_NONVIRTUAL">
      <summary vsli:raw="The function is accessed by &lt;see langword=&quot;static&quot; /&gt; address and takes an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">Der Zugriff auf die Funktion erfolgt über eine <see langword="static" />-Adresse, und die Funktion akzeptiert einen impliziten <see langword="this" />-Zeiger.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_PUREVIRTUAL">
      <summary vsli:raw="The function is accessed through the virtual function table (VTBL), and takes an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">Auf die Funktion wird über VTBL (Virtual Function Table) zugegriffen, und sie enthält einen impliziten <see langword="this" />-Zeiger.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_STATIC">
      <summary vsli:raw="The function is accessed by &lt;see langword=&quot;static&quot; /&gt; address and does not take an implicit &lt;see langword=&quot;this&quot; /&gt; pointer.">Der Zugriff auf die Funktion erfolgt über eine <see langword="static" />-Adresse, und die Funktion akzeptiert keinen impliziten <see langword="this" />-Zeiger.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.FUNCKIND.FUNC_VIRTUAL">
      <summary vsli:raw="The function is accessed in the same way as &lt;see cref=&quot;F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL&quot; /&gt;, except the function has an implementation.">Auf die Funktion wird ebenso wie auf <see cref="F:System.Runtime.InteropServices.FUNCKIND.FUNC_PUREVIRTUAL" /> zugegriffen, sofern die Funktion keine Implementierung besitzt.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IAdviseSink">
      <summary vsli:raw="Provides a managed definition of the &lt;see langword=&quot;IAdviseSink&quot; /&gt; interface.">Stellt eine verwaltete Definition der <see langword="IAdviseSink" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnClose">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has changed from the running state to the loaded state.  This method is called by a server.">Benachrichtigt alle registrierten Advise-Senken, dass das Objekt aus dem laufenden Zustand in den geladenen Zustand gewechselt ist.  Diese Methode wird von einem Server aufgerufen.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnDataChange(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Notifies all data objects currently registered advisory sinks that data in the object has changed.">Benachrichtigt alle aktuell registrierten Advise-Senken eines Datenobjekts, dass die Daten im Objekt geändert wurden.</summary>
      <param name="format" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt;, passed by reference, which describes the format, target device, rendering, and storage information of the calling data object.">Ein <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />, das als Verweis übergeben wird und das Format, das Zielgerät, das Rendering und Speicherinformationen des aufrufenden Datenobjekts beschreibt.</param>
      <param name="stgmedium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;, passed by reference, which defines the storage medium (global memory, disk file, storage object, stream object, Graphics Device Interface (GDI) object, or undefined) and ownership of that medium for the calling data object.">Ein als Verweis übergebenes <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, das das Speichermedium (globaler Speicher, Datenträgerdatei, Speicherobjekt, Streamobjekt, GDI (Graphics Device Interface)-Objekt oder nicht definiert) und den Besitz dieses Mediums für das aufrufende Datenobjekt definiert.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnRename(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has been renamed. This method is called by a server.">Benachrichtigt alle registrierten Advise-Senken, dass das Objekt umbenannt wurde. Diese Methode wird von einem Server aufgerufen.</summary>
      <param name="moniker" vsli:raw="A pointer to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on the new full moniker of the object.">Ein Zeiger auf die <see langword="IMoniker" />-Schnittstelle im neuen vollständigen Moniker des Objekts.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnSave">
      <summary vsli:raw="Notifies all registered advisory sinks that the object has been saved. This method is called by a server.">Benachrichtigt alle registrierten Advise-Senken, dass das Objekt gespeichert wurde. Diese Methode wird von einem Server aufgerufen.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IAdviseSink.OnViewChange(System.Int32,System.Int32)">
      <summary vsli:raw="Notifies an object's registered advisory sinks that its view has changed. This method is called by a server.">Benachrichtigt die registrierten Advise-Senken eines Objekts, die seine Ansicht geändert wurde. Diese Methode wird von einem Server aufgerufen.</summary>
      <param name="aspect" vsli:raw="The aspect, or view, of the object. Contains a value taken from the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DVASPECT&quot; /&gt; enumeration.">Der Aspekt oder die Ansicht des Objekts. Enthält einen aus der <see cref="T:System.Runtime.InteropServices.ComTypes.DVASPECT" />-Enumeration entnommenen Wert.</param>
      <param name="index" vsli:raw="The portion of the view that has changed. Currently, only -1 is valid.">Der Teil der Ansicht, die sich geändert hat. Zurzeit ist nur -1 gültig.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IBindCtx">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface.">Stellt die verwaltete Definition der <see langword="IBindCtx" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.EnumObjectParam(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary vsli:raw="Enumerates the strings that are the keys of the internally maintained table of contextual object parameters.">Zählt die Zeichenfolgen auf, die die Schlüssel der intern verwalteten Tabelle von Kontextparametern für Objekte sind.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the object parameter enumerator. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf den Enumerator von Objektparametern zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary vsli:raw="Returns the current binding options stored in the current bind context.">Gibt die aktuellen Bindungsoptionen zurück, die im aktuellen Bindungskontext gespeichert sind.</summary>
      <param name="pbindopts" vsli:raw="A pointer to the structure to receive the binding options.">Ein Zeiger, der auf die Struktur zum Empfangen der Bindungsoptionen zeigt.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetObjectParam(System.String,System.Object@)">
      <summary vsli:raw="Looks up the given key in the internally maintained table of contextual object parameters and returns the corresponding object, if one exists.">Sucht den angegebenen Schlüssel in der intern verwalteten Tabelle der Kontextobjektparameter und gibt ggf. das entsprechende Objekt zurück.</summary>
      <param name="pszKey" vsli:raw="The name of the object to search for.">Der Name des zu suchenden Objekts.</param>
      <param name="ppunk" vsli:raw="When this method returns, contains the object interface pointer. This parameter is passed uninitialized.">Die Methode gibt den Objektschnittstellenzeiger zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.GetRunningObjectTable(System.Runtime.InteropServices.ComTypes.IRunningObjectTable@)">
      <summary vsli:raw="Returns access to the Running Object Table (ROT) relevant to this binding process.">Gibt den Zugriff auf die ROT (Running Object Table) zurück, die für diesen Bindungsvorgang relevant ist.</summary>
      <param name="pprot" vsli:raw="When this method returns, contains a reference to the Running Object Table (ROT). This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf die Running Object Table (ROT) zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)">
      <summary vsli:raw="Registers the passed object as one of the objects that has been bound during a moniker operation and that should be released when the operation is complete.">Registriert das übergebene Objekt als eines der während einer Moniker-Operation gebundenen Objekte, das nach Abschluss der Operation freigegeben werden soll.</summary>
      <param name="punk" vsli:raw="The object to register for release.">Das zur Freigabe zu registrierende Objekt.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectParam(System.String,System.Object)">
      <summary vsli:raw="Registers the specified object pointer under the specified name in the internally maintained table of object pointers.">Registriert den angegebenen Objektzeiger unter dem angegebenen Namen in der intern verwalteten Tabelle von Objektzeigern.</summary>
      <param name="pszKey" vsli:raw="The name to register &lt;paramref name=&quot;punk&quot; /&gt; with.">Der Name, unter dem <paramref name="punk" /> zu registrieren ist.</param>
      <param name="punk" vsli:raw="The object to register.">Das zu registrierende Objekt.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.ReleaseBoundObjects">
      <summary vsli:raw="Releases all the objects currently registered with the bind context by using the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)&quot; /&gt; method.">Gibt alle momentan im Bindungskontext mithilfe der <see cref="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RegisterObjectBound(System.Object)" />-Methode registrierten Objekte frei.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectBound(System.Object)">
      <summary vsli:raw="Removes the object from the set of registered objects that need to be released.">Entfernt das Objekt aus dem Satz freizugebender registrierter Objekte.</summary>
      <param name="punk" vsli:raw="The object to unregister for release.">Das Objekt, dessen Registrierung für die Freigabe aufzuheben ist.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.RevokeObjectParam(System.String)">
      <summary vsli:raw="Revokes the registration of the object currently found under the specified key in the internally maintained table of contextual object parameters, if that key is currently registered.">Widerruft die Registrierung des Objekts, das momentan unter dem angegebenen Schlüssel in der intern verwalteten Tabelle von Kontextobjektparametern zu finden ist, wenn dieser Schlüssel derzeit registriert ist.</summary>
      <param name="pszKey" vsli:raw="The key to unregister.">Der Schlüssel, dessen Registrierung aufgehoben werden soll.</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the specified key was successfully removed from the table; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Ein <see langword="S_OK" /><see langword="HRESULT" />-Wert, wenn der angegebene Schlüssel erfolgreich aus der Tabelle entfernt wurde; andernfalls ein <see langword="S_FALSE" /><see langword="HRESULT" />-Wert.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IBindCtx.SetBindOptions(System.Runtime.InteropServices.ComTypes.BIND_OPTS@)">
      <summary vsli:raw="Stores a block of parameters in the bind context. These parameters will apply to later &lt;see langword=&quot;UCOMIMoniker&quot; /&gt; operations that use this bind context.">Speichert im Bindungskontext einen Block von Parametern. Diese Parameter gelten für spätere <see langword="UCOMIMoniker" />-Operationen, die diesen Bindungskontext verwenden.</summary>
      <param name="pbindopts" vsli:raw="The structure containing the binding options to set.">Die Struktur mit den festzulegenden Bindungsoptionen.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPoint">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IConnectionPoint&quot; /&gt; interface.">Stellt die verwaltete Definition der <see langword="IConnectionPoint" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)">
      <summary vsli:raw="Establishes an advisory connection between the connection point and the caller's sink object.">Richtet eine Advise-Verbindung zwischen dem Verbindungspunkt und dem Senkenobjekt des Aufrufers ein.</summary>
      <param name="pUnkSink" vsli:raw="A reference to the sink to receive calls for the outgoing interface managed by this connection point.">Ein Verweis auf die Senke, die Aufrufe für die von diesem Verbindungspunkt verwaltete Ausgangsschnittstelle empfangen soll.</param>
      <param name="pdwCookie" vsli:raw="When this method returns, contains the connection cookie. This parameter is passed uninitialized.">Diese Methode gibt das Verbindungscookie zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.EnumConnections(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary vsli:raw="Creates an enumerator object for iteration through the connections that exist to this connection point.">Erstellt ein Enumerationsobjekt zum Durchlaufen der bis zu diesem Verbindungspunkt vorhandenen Verbindungen.</summary>
      <param name="ppEnum" vsli:raw="When this method returns, contains the newly created enumerator. This parameter is passed uninitialized.">Diese Methode gibt den neu erstellten Enumerator zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionInterface(System.Guid@)">
      <summary vsli:raw="Returns the IID of the outgoing interface managed by this connection point.">Gibt die IID der von diesem Verbindungspunkt verwalteten Ausgangsschnittstelle zurück.</summary>
      <param name="pIID" vsli:raw="When this parameter returns, contains the IID of the outgoing interface managed by this connection point. This parameter is passed uninitialized.">Dieser Parameter gibt die IID der von diesem Verbindungspunkt verwalteten Ausgangsschnittstelle zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.GetConnectionPointContainer(System.Runtime.InteropServices.ComTypes.IConnectionPointContainer@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface pointer to the connectable object that conceptually owns this connection point.">Ruft den <see langword="IConnectionPointContainer" />-Schnittstellenzeiger auf das verbindungsfähige Objekt ab, das den Verbindungspunkt konzeptionell besitzt.</summary>
      <param name="ppCPC" vsli:raw="When this parameter returns, contains the connectable object's &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface. This parameter is passed uninitialized.">Dieser Parameters gibt die <see langword="IConnectionPointContainer" />-Schnittstelle des verbindungsfähigen Objekts zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Unadvise(System.Int32)">
      <summary vsli:raw="Terminates an advisory connection previously established through the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt; method.">Beendet eine Advise-Verbindung, die zuvor mit der <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />-Methode eingerichtet wurde.</summary>
      <param name="dwCookie" vsli:raw="The connection cookie previously returned from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)&quot; /&gt; method.">Das zuvor von der <see cref="M:System.Runtime.InteropServices.ComTypes.IConnectionPoint.Advise(System.Object,System.Int32@)" />-Methode zurückgegebene Verbindungscookie.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IConnectionPointContainer&quot; /&gt; interface.">Stellt die verwaltete Definition der <see langword="IConnectionPointContainer" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.EnumConnectionPoints(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary vsli:raw="Creates an enumerator of all the connection points supported in the connectable object, one connection point per IID.">Erstellt einen Enumerator aller Verbindungspunkte, die in dem verbindungsfähigen Objekt unterstützt werden, mit einem Verbindungspunkt pro IID.</summary>
      <param name="ppEnum" vsli:raw="When this method returns, contains the interface pointer of the enumerator. This parameter is passed uninitialized.">Diese Methode gibt den Schnittstellenzeiger des Enumerators zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IConnectionPointContainer.FindConnectionPoint(System.Guid@,System.Runtime.InteropServices.ComTypes.IConnectionPoint@)">
      <summary vsli:raw="Asks the connectable object if it has a connection point for a particular IID, and if so, returns the &lt;see langword=&quot;IConnectionPoint&quot; /&gt; interface pointer to that connection point.">Fragt das verbindungsfähige Objekt nach einem Verbindungspunkt für eine bestimmte IID. Wenn dieser vorhanden ist, wird der <see langword="IConnectionPoint" />-Schnittstellenzeiger zurückgegeben, der auf diesen Verbindungspunkt verweist.</summary>
      <param name="riid" vsli:raw="A reference to the outgoing interface IID whose connection point is being requested.">Ein Verweis auf die IID der Ausgangsschnittstelle, deren Verbindungspunkt angefragt wird.</param>
      <param name="ppCP" vsli:raw="When this method returns, contains the connection point that manages the outgoing interface &lt;paramref name=&quot;riid&quot; /&gt;. This parameter is passed uninitialized.">Diese Methode gibt den Verbindungspunkt zurück, der die <paramref name="riid" /> der Ausgangschnittstelle verwaltet. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDataObject">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IDataObject&quot; /&gt; interface.">Stellt die verwaltete Definition der <see langword="IDataObject" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)">
      <summary vsli:raw="Creates a connection between a data object and an advisory sink. This method is called by an object that supports an advisory sink and enables the advisory sink to be notified of changes in the object's data.">Erstellt eine Verbindung zwischen einem Datenobjekt und einer Advise-Senke. Diese Methode wird von einem Objekt aufgerufen, das eine Advise-Senke unterstützt, und aktiviert die Advise-Senke für den Empfang von Änderungsbenachrichtigungen für Daten des Objekts.</summary>
      <param name="pFormatetc" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, target device, aspect, and medium that will be used for future notifications.">Eine <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Struktur, die als Verweis übergeben wird und für zukünftige Benachrichtigungen das Format, das Zielgerät, den Aspekt und das Medium definiert.</param>
      <param name="advf" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ADVF&quot; /&gt; values that specifies a group of flags for controlling the advisory connection.">Einer der <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" />-Werte, der eine Gruppe von Flags für das Steuern der Advise-Verbindung angibt.</param>
      <param name="adviseSink" vsli:raw="A pointer to the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IAdviseSink&quot; /&gt; interface on the advisory sink that will receive the change notification.">Ein Zeiger auf die <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" />-Schnittstelle der Advise-Senke, die die Änderungsbenachrichtigung empfängt.</param>
      <param name="connection" vsli:raw="When this method returns, contains a pointer to a DWORD token that identifies this connection. You can use this token later to delete the advisory connection by passing it to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)&quot; /&gt;. If this value is zero, the connection was not established. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode einen Zeiger auf ein DWORD-Token, das diese Verbindung identifiziert. Sie können mit diesem Token später die Advise-Verbindung durch das Übergeben an <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)" /> löschen. Wenn dieser Wert 0 (null) ist, wurde die Verbindung nicht hergestellt. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The advisory connection was created.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; E_NOTIMPL&lt;/term&gt;&lt;description&gt; This method is not implemented on the data object.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; There is an invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; There is an invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_ADVISENOTSUPPORTED&lt;/term&gt;&lt;description&gt; The data object does not support change notification.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Diese Methode unterstützt die Standardrückgabewerte E_INVALIDARG, E_UNEXPECTED und E_OUTOFMEMORY sowie die folgenden Werte: 
 <list type="table"><listheader><term> Wert</term><description> BESCHREIBUNG</description></listheader><item><term> S_OK</term><description> Die Advise-Verbindung wurde erstellt.</description></item><item><term> E_NOTIMPL</term><description> Diese Methode ist bei einem Datenobjekt nicht implementiert.</description></item><item><term> DV_E_LINDEX</term><description> Ein Wert für <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> ist ungültig. Derzeit wird nur -1 unterstützt.</description></item><item><term> DV_E_FORMATETC</term><description> Ein Wert für den <paramref name="pFormatetc" />-Parameter ist ungültig.</description></item><item><term> OLE_E_ADVISENOTSUPPORTED</term><description> Das Datenobjekt unterstützt keine Änderungsbenachrichtigung.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.DUnadvise(System.Int32)">
      <summary vsli:raw="Destroys a notification connection that had been previously established.">Zerstört eine Benachrichtigungsverbindung, die zuvor hergestellt wurde.</summary>
      <param name="connection" vsli:raw="A DWORD token that specifies the connection to remove. Use the value returned by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)&quot; /&gt; when the connection was originally established.">Ein DWORD-Token, das die zu entfernende Verbindung angibt. Verwenden Sie den von <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.DAdvise(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.ADVF,System.Runtime.InteropServices.ComTypes.IAdviseSink,System.Int32@)" /> beim Herstellen der ursprünglichen Verbindung zurückgegebenen Wert.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumDAdvise(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary vsli:raw="Creates an object that can be used to enumerate the current advisory connections.">Erstellt ein Objekt, mit dem die aktuellen Advise-Verbindungen aufgelistet werden können.</summary>
      <param name="enumAdvise" vsli:raw="When this method returns, contains an &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA&quot; /&gt; that receives the interface pointer to the new enumerator object. If the implementation sets &lt;paramref name=&quot;enumAdvise&quot; /&gt; to &lt;see langword=&quot;null&quot; /&gt;, there are no connections to advisory sinks at this time. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode ein <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA" />, das den Schnittstellenzeiger auf das neue Enumeratorobjekt empfängt. Wenn die Implementierung <paramref name="enumAdvise" /> auf <see langword="null" /> festlegt, gibt es zu dieser Zeit keine Verbindungen zu Advise-Senken. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns vsli:raw="This method supports the standard return value E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The enumerator object is successfully instantiated or there are no connections.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_ADVISENOTSUPPORTED&lt;/term&gt;&lt;description&gt; This object does not support advisory notifications.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Diese Methode unterstützt den Standardrückgabewert E_OUTOFMEMORY sowie die folgenden Werte:  
  
 <list type="table"><listheader><term> Wert</term><description> BESCHREIBUNG</description></listheader><item><term> S_OK</term><description> Das Enumeratorobjekt wurde erfolgreich instanziiert, oder es gibt keine Verbindungen.</description></item><item><term> OLE_E_ADVISENOTSUPPORTED</term><description> Dieses Objekt unterstützt keine Advise-Benachrichtigungen.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.EnumFormatEtc(System.Runtime.InteropServices.ComTypes.DATADIR)">
      <summary vsli:raw="Creates an object for enumerating the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures for a data object. These structures are used in calls to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;.">Erstellt ein Objekt für das Auflisten der <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Strukturen für ein Datenobjekt. Diese Strukturen werden in Aufrufen von <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> oder <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> verwendet.</summary>
      <param name="direction" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.DATADIR&quot; /&gt; values that specifies the direction of the data.">Einer der <see cref="T:System.Runtime.InteropServices.ComTypes.DATADIR" />-Werte, der die Datenrichtung angibt.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The enumerator object was successfully created.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; E_NOTIMPL&lt;/term&gt;&lt;description&gt; The direction specified by the &lt;paramref name=&quot;direction&quot; /&gt; parameter is not supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_S_USEREG&lt;/term&gt;&lt;description&gt; Requests that OLE enumerate the formats from the registry.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Diese Methode unterstützt die Standardrückgabewerte E_INVALIDARG und E_OUTOFMEMORY sowie die folgenden Werte: 
 <list type="table"><listheader><term> Wert</term><description> BESCHREIBUNG</description></listheader><item><term> S_OK</term><description> Das Enumeratorobjekt wurde erfolgreich erstellt.</description></item><item><term> E_NOTIMPL</term><description> Die vom <paramref name="direction" />-Parameter angegebene Richtung wird nicht unterstützt.</description></item><item><term> OLE_S_USEREG</term><description> Fordert an, dass die Formate aus der Registrierung mit OLE aufgelistet werden.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary vsli:raw="Provides a standard &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure that is logically equivalent to a more complex structure. Use this method to determine whether two different &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures would return the same data, removing the need for duplicate rendering.">Stellt eine Standard-<see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Struktur bereit, die einer komplexeren Struktur logisch entspricht. Mit dieser Methode können Sie bestimmen, ob zwei unterschiedliche <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Strukturen dieselben Daten zurückgeben würden. Dadurch müssen Sie nicht doppelt rendern.</summary>
      <param name="formatIn" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device that the caller would like to use to retrieve data in a subsequent call such as &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; member is not significant in this case and should be ignored.">Ein Zeiger auf eine <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Struktur, der als Verweis übergeben wird und das Format, das Medium und das Zielgerät definiert, mit denen der Aufrufer Daten in einen späteren Aufruf abrufen möchte, z. B. <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />. Der <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />-Member hat in diesem Fall keine Bedeutung und sollte ignoriert werden.</param>
      <param name="formatOut" vsli:raw="When this method returns, contains a pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure that contains the most general information possible for a specific rendering, making it canonically equivalent to &lt;c&gt;formatetcIn&lt;/c&gt;. The caller must allocate this structure and the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)&quot; /&gt; method must fill in the data. To retrieve data in a subsequent call such as &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;, the caller uses the supplied value of &lt;paramref name=&quot;formatOut&quot; /&gt;, unless the value supplied is &lt;see langword=&quot;null&quot; /&gt;. This value is &lt;see langword=&quot;null&quot; /&gt; if the method returns &lt;see langword=&quot;DATA_S_SAMEFORMATETC&quot; /&gt;. The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; member is not significant in this case and should be ignored. This parameter is passed uninitialized.">Wenn diese Methode zurückgegeben wird, enthält diese einen Zeiger auf eine <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Struktur, die allgemeine Informationen für ein bestimmtes Rendering enthält, wodurch sie kanonisch äquivalent zu <c>formatetcIn</c> ist. Der Aufrufer muss diese Struktur zuordnen, und die <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetCanonicalFormatEtc(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.FORMATETC@)" />-Methode muss die Daten ausfüllen. Zum Abrufen der Daten in einem späteren Aufruf wie <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> verwendet der Aufrufer den von <paramref name="formatOut" /> bereitgestellten Wert, sofern dieser nicht <see langword="null" /> ist. Dieser Wert ist <see langword="null" />, wenn die Methode <see langword="DATA_S_SAMEFORMATETC" /> zurückgibt. Der <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />-Member hat in diesem Fall keine Bedeutung und sollte ignoriert werden. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; The returned &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure is different from the one that was passed.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DATA_S_SAMEFORMATETC&lt;/term&gt;&lt;description&gt; The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structures are the same and &lt;see langword=&quot;null&quot; /&gt; is returned in the &lt;paramref name=&quot;formatOut&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; There is an invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; There is an invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_NOTRUNNING&lt;/term&gt;&lt;description&gt; The application is not running.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Diese Methode unterstützt die Standardrückgabewerte E_INVALIDARG, E_UNEXPECTED und E_OUTOFMEMORY sowie die folgenden Werte: 
 <list type="table"><listheader><term> Wert</term><description> BESCHREIBUNG</description></listheader><item><term> S_OK</term><description> Die zurückgegebene <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Struktur unterscheidet sich von der übergebenen Struktur.</description></item><item><term> DATA_S_SAMEFORMATETC</term><description> Die <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Strukturen sind identisch, und im <paramref name="formatOut" />-Parameter wird <see langword="null" /> zurückgegeben.</description></item><item><term> DV_E_LINDEX</term><description> Ein Wert für <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> ist ungültig. Derzeit wird nur -1 unterstützt.</description></item><item><term> DV_E_FORMATETC</term><description> Ein Wert für den <paramref name="pFormatetc" />-Parameter ist ungültig.</description></item><item><term> OLE_E_NOTRUNNING</term><description> Die Anwendung wird nicht ausgeführt.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Obtains data from a source data object. The &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; method, which is called by a data consumer, renders the data described in the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure and transfers it through the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure. The caller then assumes responsibility for releasing the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure.">Ruft Daten aus einem Quelldatenobjekt ab. Die von einem Datennutzer aufgerufene <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />-Methode rendert die in der angegebenen <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Struktur beschriebenen Daten und überträgt diese über die angegebene <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />-Struktur. Der Aufrufer ist dann für das Freigeben der <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />-Struktur verantwortlich.</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use when passing the data. It is possible to specify more than one medium by using the Boolean OR operator, allowing the method to choose the best medium among those specified.">Ein Zeiger auf eine <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Struktur, der als Verweis übergeben wird und das Format, das Medium und das Zielgerät für das Übergeben der Daten definiert. Mithilfe des booleschen Operators OR können auch mehrere Medien angegeben werden, sodass die Methode das beste Medium aus den angegebenen Medien auswählen kann.</param>
      <param name="medium" vsli:raw="When this method returns, contains a pointer to the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure that indicates the storage medium containing the returned data through its &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed&quot; /&gt; member, and the responsibility for releasing the medium through the value of its &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member. If &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the receiver of the medium is responsible for releasing it; otherwise, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; points to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface on the appropriate object so its &lt;see langword=&quot;Release&quot; /&gt; method can be called. The medium must be allocated and filled in by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode einen Zeiger auf die <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />-Struktur, die das Speichermedium angibt, das die zurückgegebenen Daten in ihrem <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed" />-Member enthält, sowie die Verantwortung für das Freigeben des Mediums in ihrem <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" />-Member. Wenn <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /><see langword="null" /> ist, ist der Empfänger des Mediums für dessen Freigabe verantwortlich, andernfalls zeigt <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> auf die <see langword="IUnknown" />-Schnittstelle im entsprechenden Objekt, sodass dessen <see langword="Release" />-Methode aufgerufen werden kann. Das Medium muss zugeordnet und von <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> aufgefüllt werden. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)">
      <summary vsli:raw="Obtains data from a source data object. This method, which is called by a data consumer, differs from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; method in that the caller must allocate and free the specified storage medium.">Ruft Daten aus einem Quelldatenobjekt ab. Diese Methode, die von einem Datennutzer aufgerufen wird, unterscheidet sich von der <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" />-Methode dadurch, dass der Aufrufer das angegebene Speichermedium zuordnen und freigeben muss.</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use when passing the data. Only one medium can be specified in &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt;, and only the following &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; values are valid: &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE&quot; /&gt;, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM&quot; /&gt;, &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL&quot; /&gt;, or &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE&quot; /&gt;.">Ein Zeiger auf eine <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Struktur, der als Verweis übergeben wird und das Format, das Medium und das Zielgerät für das Übergeben der Daten definiert. In <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" /> darf nur ein Medium angegeben werden, und nur die folgenden <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />-Werte sind gültig: <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM" />, <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL" /> oder <see cref="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE" />.</param>
      <param name="medium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;, passed by reference, that defines the storage medium containing the data being transferred. The medium must be allocated by the caller and filled in by &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt;. The caller must also free the medium. The implementation of this method must always supply a value of &lt;see langword=&quot;null&quot; /&gt; for the &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure that this parameter points to.">Ein <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />, das als Verweis übergeben wird und das Speichermedium definiert, das die übertragenen Daten enthält. Das Medium muss vom Aufrufer zugeordnet und von <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetDataHere(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> aufgefüllt werden. Der Aufrufer muss das Medium auch freigeben. Die Implementierung dieser Methode muss immer den Wert <see langword="null" /> für den <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" />-Member der <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />-Struktur aufweisen, auf die dieser Parameter verweist.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.QueryGetData(System.Runtime.InteropServices.ComTypes.FORMATETC@)">
      <summary vsli:raw="Determines whether the data object is capable of rendering the data described in the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure. Objects attempting a paste or drop operation can call this method before calling &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; to get an indication of whether the operation may be successful.">Bestimmt, ob das Datenobjekt die in der <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Struktur beschriebenen Daten rendern kann. Objekte, die einen Einfüge oder Ablagevorgang ausführen möchten, können diese Methode aufrufen, bevor sie <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> aufrufen, um zu bestimmen, ob der Vorgang erfolgreich durchgeführt werden kann.</summary>
      <param name="format" vsli:raw="A pointer to a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format, medium, and target device to use for the query.">Ein Zeiger auf eine <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Struktur, der als Verweis übergeben wird und das Format, das Medium und das Zielgerät für die Abfrage definiert.</param>
      <returns vsli:raw="This method supports the standard return values E_INVALIDARG, E_UNEXPECTED, and E_OUTOFMEMORY, as well as the following:  &#xA;  &#xA; &lt;list type=&quot;table&quot;&gt;&lt;listheader&gt;&lt;term&gt; Value&lt;/term&gt;&lt;description&gt; Description&lt;/description&gt;&lt;/listheader&gt;&lt;item&gt;&lt;term&gt; S_OK&lt;/term&gt;&lt;description&gt; A subsequent call to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)&quot; /&gt; would probably be successful.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_LINDEX&lt;/term&gt;&lt;description&gt; An invalid value for &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex&quot; /&gt;; currently, only -1 is supported.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_FORMATETC&lt;/term&gt;&lt;description&gt; An invalid value for the &lt;paramref name=&quot;pFormatetc&quot; /&gt; parameter.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_TYMED&lt;/term&gt;&lt;description&gt; An invalid &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed&quot; /&gt; value.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; DV_E_DVASPECT&lt;/term&gt;&lt;description&gt; An invalid &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect&quot; /&gt; value.&lt;/description&gt;&lt;/item&gt;&lt;item&gt;&lt;term&gt; OLE_E_NOTRUNNING&lt;/term&gt;&lt;description&gt; The application is not running.&lt;/description&gt;&lt;/item&gt;&lt;/list&gt;">Diese Methode unterstützt die Standardrückgabewerte E_INVALIDARG, E_UNEXPECTED und E_OUTOFMEMORY sowie die folgenden Werte: 
 <list type="table"><listheader><term> Wert</term><description> BESCHREIBUNG</description></listheader><item><term> S_OK</term><description> Ein nachfolgender Aufruf von <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.GetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@)" /> wäre wahrscheinlich erfolgreich.</description></item><item><term> DV_E_LINDEX</term><description> Ein Wert für <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.lindex" /> ist ungültig. Derzeit wird nur -1 unterstützt.</description></item><item><term> DV_E_FORMATETC</term><description> Ein Wert für den <paramref name="pFormatetc" />-Parameter ist ungültig.</description></item><item><term> DV_E_TYMED</term><description> Ein ungültiger <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.tymed" />-Wert.</description></item><item><term> DV_E_DVASPECT</term><description> Ein ungültiger <see cref="F:System.Runtime.InteropServices.ComTypes.FORMATETC.dwAspect" />-Wert.</description></item><item><term> OLE_E_NOTRUNNING</term><description> Die Anwendung wird nicht ausgeführt.</description></item></list></returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)">
      <summary vsli:raw="Transfers data to the object that implements this method. This method is called by an object that contains a data source.">Überträgt Daten an das Objekt, das diese Methode implementiert. Diese Methode wird von einem Objekt aufgerufen, das eine Datenquelle enthält.</summary>
      <param name="formatIn" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure, passed by reference, that defines the format used by the data object when interpreting the data contained in the storage medium.">Eine <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Struktur, die als Verweis übergeben wird und das von einem Datenobjekt beim Interpretieren der Daten im Speichermedium verwendete Format definiert.</param>
      <param name="medium" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt; structure, passed by reference, that defines the storage medium in which the data is being passed.">Eine <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />-Struktur, die als Verweis übergeben wird und das Speichermedium definiert, an das die Daten übergeben werden.</param>
      <param name="release" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to specify that the data object called, which implements &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)&quot; /&gt;, owns the storage medium after the call returns. This means that the data object must free the medium after it has been used by calling the &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; function. &lt;see langword=&quot;false&quot; /&gt; to specify that the caller retains ownership of the storage medium, and the data object called uses the storage medium for the duration of the call only.">
        <see langword="true" />, um anzugeben, dass das aufgerufene Datenobjekt, das <see cref="M:System.Runtime.InteropServices.ComTypes.IDataObject.SetData(System.Runtime.InteropServices.ComTypes.FORMATETC@,System.Runtime.InteropServices.ComTypes.STGMEDIUM@,System.Boolean)" /> implementiert, das Speichermedium nach Beendigung des Aufrufs besitzt. Dies bedeutet, dass das Datenobjekt das Medium nach der Verwendung durch Aufruf der <see langword="ReleaseStgMedium" />-Funktion freigeben muss. <see langword="false" />, um anzugeben, dass der Aufrufer das Speichermedium auch weiter besitzt und das aufgerufene Datenobjekt dieses nur für die Dauer des Aufrufs verwendet.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLDESC">
      <summary vsli:raw="Contains information needed for transferring a structure element, parameter, or function return value between processes.">Enthält Informationen, die für die Übertragung eines Strukturelements, Parameters oder Funktionsrückgabewerts zwischen Prozessen erforderlich sind.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.dwReserved">
      <summary vsli:raw="Reserved; set to &lt;see langword=&quot;null&quot; /&gt;.">Reserviert, auf <see langword="null" /> festgelegt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLDESC.wIDLFlags">
      <summary vsli:raw="Indicates an &lt;see cref=&quot;T:System.Runtime.InteropServices.IDLFLAG&quot; /&gt; value describing the type.">Gibt einen <see cref="T:System.Runtime.InteropServices.IDLFLAG" />-Wert an, der den Typ beschreibt.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IDLFLAG">
      <summary vsli:raw="Describes how to transfer a structure element, parameter, or function return value between processes.">Beschreibt die Übertragung eines Strukturelements, Parameters oder Funktionsrückgabewerts zwischen Prozessen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FIN">
      <summary vsli:raw="The parameter passes information from the caller to the callee.">Der Parameter übergibt Informationen vom Aufrufer zum Aufgerufenen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FLCID">
      <summary vsli:raw="The parameter is the local identifier of a client application.">Der Parameter ist der lokale Bezeichner einer Clientanwendung.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FOUT">
      <summary vsli:raw="The parameter returns information from the callee to the caller.">Der Parameter gibt Informationen vom Aufgerufenen zum Aufrufer zurück.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_FRETVAL">
      <summary vsli:raw="The parameter is the return value of the member.">Der Parameter ist der Rückgabewert des Members.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IDLFLAG.IDLFLAG_NONE">
      <summary vsli:raw="Does not specify whether the parameter passes or receives information.">Es wird nicht angegeben, ob der Parameter Informationen weitergibt oder empfängt.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumConnectionPoints&quot; /&gt; interface.">Verwaltet die Definition der <see langword="IEnumConnectionPoints" />-Schnittstelle.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Erstellt einen neuen Enumerator, der den gleichen Enumerationszustand wie der aktuelle Enumerator enthält.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode einen Verweis auf den neu erstellten Enumerator. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IConnectionPoint[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Ruft eine angegebene Anzahl von Elementen in der Enumerationsfolge ab.</summary>
      <param name="celt" vsli:raw="The number of &lt;see langword=&quot;IConnectionPoint&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Die Anzahl der <see langword="IConnectionPoint" />-Verweise, die in <paramref name="rgelt" /> zurückgegeben werden sollen.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.">Enthält nach dem Beenden der Methode einen Verweis auf die aufgelisteten Verbindungen. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of connections enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Enthält nach dem Beenden dieser Methode einen Verweis auf die tatsächliche Anzahl der in <paramref name="rgelt" /> aufgelisteten Verbindungen.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" />, wenn der <paramref name="pceltFetched" />-Parameter gleich dem <paramref name="celt" />-Parameter ist, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Setzt die Enumerationsfolge auf den Anfang zurück.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnectionPoints.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Überspringt eine angegebene Anzahl von Elementen in der Enumerationsfolge.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Die Anzahl der Elemente, die in der Enumeration übersprungen werden sollen.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" />, wenn die Anzahl der übersprungenen Elemente gleich dem <paramref name="celt" />-Parameter ist, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumConnections">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumConnections&quot; /&gt; interface.">Verwaltet die Definition der <see langword="IEnumConnections" />-Schnittstelle.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Clone(System.Runtime.InteropServices.ComTypes.IEnumConnections@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Erstellt einen neuen Enumerator, der den gleichen Enumerationszustand wie der aktuelle Enumerator enthält.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode einen Verweis auf den neu erstellten Enumerator. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Next(System.Int32,System.Runtime.InteropServices.ComTypes.CONNECTDATA[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Ruft eine angegebene Anzahl von Elementen in der Enumerationsfolge ab.</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.CONNECTDATA&quot; /&gt; structures to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Die Anzahl der <see cref="T:System.Runtime.InteropServices.CONNECTDATA" />-Strukturen, die in <paramref name="rgelt" /> zurückgegeben werden sollen.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated connections. This parameter is passed uninitialized.">Enthält nach dem Beenden der Methode einen Verweis auf die aufgelisteten Verbindungen. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of connections enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Enthält nach dem Beenden dieser Methode einen Verweis auf die tatsächliche Anzahl der in <paramref name="rgelt" /> aufgelisteten Verbindungen.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" />, wenn der <paramref name="pceltFetched" />-Parameter gleich dem <paramref name="celt" />-Parameter ist, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Setzt die Enumerationsfolge auf den Anfang zurück.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumConnections.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Überspringt eine angegebene Anzahl von Elementen in der Enumerationsfolge.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Die Anzahl der Elemente, die in der Enumeration übersprungen werden sollen.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" />, wenn die Anzahl der übersprungenen Elemente gleich dem <paramref name="celt" />-Parameter ist, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IEnumFORMATETC&quot; /&gt; interface.">Stellt die verwaltete Definition der <see langword="IEnumFORMATETC" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Clone(System.Runtime.InteropServices.ComTypes.IEnumFORMATETC@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current enumerator.">Erstellt einen neuen Enumerator, der den gleichen Enumerationszustand wie der aktuelle Enumerator enthält.</summary>
      <param name="newEnum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode einen Verweis auf den neu erstellten Enumerator. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Next(System.Int32,System.Runtime.InteropServices.ComTypes.FORMATETC[],System.Int32[])">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Ruft eine angegebene Anzahl von Elementen in der Enumerationsfolge ab.</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Die Anzahl der <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Verweise, die in <paramref name="rgelt" /> zurückgegeben werden sollen.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; references. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode einen Verweis auf die aufgelisteten <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Verweise. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of references enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode einen Verweis auf die tatsächliche Anzahl der in <paramref name="rgelt" /> aufgelisteten Verweise. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" />, wenn der <paramref name="pceltFetched" />-Parameter gleich dem <paramref name="celt" />-Parameter ist, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Setzt die Enumerationsfolge auf den Anfang zurück.</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">Ein HRESULT mit dem Wert <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumFORMATETC.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Überspringt eine angegebene Anzahl von Elementen in der Enumerationsfolge.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Die Anzahl der Elemente, die in der Enumeration übersprungen werden sollen.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" />, wenn die Anzahl der übersprungenen Elemente gleich dem <paramref name="celt" />-Parameter ist, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumMoniker">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumMoniker&quot; /&gt; interface.">Verwaltet die Definition der <see langword="IEnumMoniker" />-Schnittstelle.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Clone(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Erstellt einen neuen Enumerator, der den gleichen Enumerationszustand wie der aktuelle Enumerator enthält.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode einen Verweis auf den neu erstellten Enumerator. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Next(System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Ruft eine angegebene Anzahl von Elementen in der Enumerationsfolge ab.</summary>
      <param name="celt" vsli:raw="The number of monikers to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Die Anzahl der Moniker, die in <paramref name="rgelt" /> zurückgegeben werden sollen.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated monikers. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf die aufgelisteten Moniker zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of monikers enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Die Methode gibt einen Verweis auf die tatsächliche Anzahl der in <paramref name="rgelt" /> aufgelisteten Moniker zurück.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" />, wenn der <paramref name="pceltFetched" />-Parameter gleich dem <paramref name="celt" />-Parameter ist, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Setzt die Enumerationsfolge auf den Anfang zurück.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumMoniker.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Überspringt eine angegebene Anzahl von Elementen in der Enumerationsfolge.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Die Anzahl der Elemente, die in der Enumeration übersprungen werden sollen.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" />, wenn die Anzahl der übersprungenen Elemente gleich dem <paramref name="celt" />-Parameter ist, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IEnumSTATDATA&quot; /&gt; interface.">Stellt die verwaltete Definition der <see langword="IEnumSTATDATA" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Clone(System.Runtime.InteropServices.ComTypes.IEnumSTATDATA@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current enumerator.">Erstellt einen neuen Enumerator, der den gleichen Enumerationszustand wie der aktuelle Enumerator enthält.</summary>
      <param name="newEnum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode einen Verweis auf den neu erstellten Enumerator. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Next(System.Int32,System.Runtime.InteropServices.ComTypes.STATDATA[],System.Int32[])">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Ruft eine angegebene Anzahl von Elementen in der Enumerationsfolge ab.</summary>
      <param name="celt" vsli:raw="The number of &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STATDATA&quot; /&gt; references to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Die Anzahl der <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" />-Verweise, die in <paramref name="rgelt" /> zurückgegeben werden sollen.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STATDATA&quot; /&gt; references. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode einen Verweis auf die aufgelisteten <see cref="T:System.Runtime.InteropServices.ComTypes.STATDATA" />-Verweise. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pceltFetched" vsli:raw="When this parameter returns, contains a reference to the actual number of references enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;. This parameter is passed uninitialized.">Enthält nach dem Beenden dieses Parameters einen Verweis auf die tatsächliche Anzahl der in <paramref name="rgelt" /> aufgelisteten Verweise. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" />, wenn der <paramref name="pceltFetched" />-Parameter gleich dem <paramref name="celt" />-Parameter ist, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Setzt die Enumerationsfolge auf den Anfang zurück.</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">Ein HRESULT mit dem Wert <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumSTATDATA.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Überspringt eine angegebene Anzahl von Elementen in der Enumerationsfolge.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Die Anzahl der Elemente, die in der Enumeration übersprungen werden sollen.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" />, wenn die Anzahl der übersprungenen Elemente gleich dem <paramref name="celt" />-Parameter ist, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumString">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumString&quot; /&gt; interface.">Verwaltet die Definition der <see langword="IEnumString" />-Schnittstelle.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Clone(System.Runtime.InteropServices.ComTypes.IEnumString@)">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Erstellt einen neuen Enumerator, der den gleichen Enumerationszustand wie der aktuelle Enumerator enthält.</summary>
      <param name="ppenum" vsli:raw="When this method returns, contains a reference to the newly created enumerator. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode einen Verweis auf den neu erstellten Enumerator. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Next(System.Int32,System.String[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Ruft eine angegebene Anzahl von Elementen in der Enumerationsfolge ab.</summary>
      <param name="celt" vsli:raw="The number of strings to return in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Die Anzahl der Zeichenfolgen, die in <paramref name="rgelt" /> zurückgegeben werden sollen.</param>
      <param name="rgelt" vsli:raw="When this method returns, contains a reference to the enumerated strings. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf die aufgelisteten Zeichenfolgen zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of strings enumerated in &lt;paramref name=&quot;rgelt&quot; /&gt;.">Diese Methode gibt einen Verweis auf die tatsächliche Anzahl der in <paramref name="rgelt" /> aufgelisteten Zeichenfolgen zurück.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" />, wenn der <paramref name="pceltFetched" />-Parameter gleich dem <paramref name="celt" />-Parameter ist, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Setzt die Enumerationsfolge auf den Anfang zurück.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumString.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Überspringt eine angegebene Anzahl von Elementen in der Enumerationsfolge.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Die Anzahl der Elemente, die in der Enumeration übersprungen werden sollen.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" />, wenn die Anzahl der übersprungenen Elemente gleich dem <paramref name="celt" />-Parameter ist, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT">
      <summary vsli:raw="Manages the definition of the &lt;see langword=&quot;IEnumVARIANT&quot; /&gt; interface.">Verwaltet die Definition der <see langword="IEnumVARIANT" />-Schnittstelle.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Clone">
      <summary vsli:raw="Creates a new enumerator that contains the same enumeration state as the current one.">Erstellt einen neuen Enumerator, der den gleichen Enumerationszustand wie der aktuelle Enumerator enthält.</summary>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT&quot; /&gt; reference to the newly created enumerator.">Ein <see cref="T:System.Runtime.InteropServices.ComTypes.IEnumVARIANT" />-Verweis auf den neu erstellten Enumerator.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Next(System.Int32,System.Object[],System.IntPtr)">
      <summary vsli:raw="Retrieves a specified number of items in the enumeration sequence.">Ruft eine angegebene Anzahl von Elementen in der Enumerationsfolge ab.</summary>
      <param name="celt" vsli:raw="The number of elements to return in &lt;c&gt;rgelt&lt;/c&gt;.">Die Anzahl der Elemente, die in <c>rgelt</c> zurückgegeben werden sollen.</param>
      <param name="rgVar" vsli:raw="When this method returns, contains a reference to the enumerated elements. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die aufgelisteten Elemente zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pceltFetched" vsli:raw="When this method returns, contains a reference to the actual number of elements enumerated in &lt;c&gt;rgelt&lt;/c&gt;.">Diese Methode gibt einen Verweis auf die tatsächliche Anzahl der in <c>rgelt</c> aufgelisteten Elemente zurück.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the &lt;paramref name=&quot;pceltFetched&quot; /&gt; parameter equals the &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" />, wenn der <paramref name="pceltFetched" />-Parameter gleich dem <paramref name="celt" />-Parameter ist, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Reset">
      <summary vsli:raw="Resets the enumeration sequence to the beginning.">Setzt die Enumerationsfolge auf den Anfang zurück.</summary>
      <returns vsli:raw="An HRESULT with the value &lt;see langword=&quot;S_OK&quot; /&gt;.">Ein HRESULT mit dem Wert <see langword="S_OK" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IEnumVARIANT.Skip(System.Int32)">
      <summary vsli:raw="Skips a specified number of items in the enumeration sequence.">Überspringt eine angegebene Anzahl von Elementen in der Enumerationsfolge.</summary>
      <param name="celt" vsli:raw="The number of elements to skip in the enumeration.">Die Anzahl der Elemente, die in der Enumeration übersprungen werden sollen.</param>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the number of elements skipped equals &lt;paramref name=&quot;celt&quot; /&gt; parameter; otherwise, &lt;see langword=&quot;S_FALSE&quot; /&gt;.">
        <see langword="S_OK" />, wenn die Anzahl der übersprungenen Elemente gleich dem <paramref name="celt" />-Parameter ist, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMoniker">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IMoniker&quot; /&gt; interface, with COM functionality from &lt;see langword=&quot;IPersist&quot; /&gt; and &lt;see langword=&quot;IPersistStream&quot; /&gt;.">Stellt die verwaltete Definition der <see langword="IMoniker" />-Schnittstelle mit COM-Funktionen von <see langword="IPersist" /> und <see langword="IPersistStream" /> bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToObject(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary vsli:raw="Uses the moniker to bind to the object that it identifies.">Verwendet den Moniker zum Binden an das von ihm bestimmte Objekt.</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context object used in this binding operation.">Ein Verweis auf die <see langword="IBindCtx" />-Schnittstelle für das Bindungskontextobjekt, das in diesem Bindungsvorgang verwendet wird.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">Ein Verweis auf den Moniker, der sich links vom aktuellen Moniker befindet, wenn der Moniker ein Teil eines zusammengesetzten Monikers ist.</param>
      <param name="riidResult" vsli:raw="The interface identifier (IID) of the interface that the client intends to use to communicate with the object that the moniker identifies.">Der Schnittstellenbezeichner (Interface Identifier, IID) der Schnittstelle, die der Client für die Kommunikation mit dem Objekt verwenden soll, das vom Moniker angegeben wird.</param>
      <param name="ppvResult" vsli:raw="When this method returns, contains a reference to the interface requested by &lt;paramref name=&quot;riidResult&quot; /&gt;. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf die von <paramref name="riidResult" /> angeforderte Schnittstelle zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.BindToStorage(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Guid@,System.Object@)">
      <summary vsli:raw="Retrieves an interface pointer to the storage that contains the object identified by the moniker.">Ruft einen Schnittstellenzeiger auf den Speicher ab, der das vom Moniker bezeichnete Objekt enthält.</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context object used during this binding operation.">Ein Verweis auf die <see langword="IBindCtx" />-Schnittstelle für das Bindungskontextobjekt, das in diesem Bindungsvorgang verwendet wird.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">Ein Verweis auf den Moniker, der sich links vom aktuellen Moniker befindet, wenn der Moniker ein Teil eines zusammengesetzten Monikers ist.</param>
      <param name="riid" vsli:raw="The interface identifier (IID) of the storage interface requested.">Der Schnittstellenbezeichner (Interface Identifier, IID) der angeforderten Speicherschnittstelle.</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the interface requested by &lt;paramref name=&quot;riid&quot; /&gt;. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf die von <paramref name="riid" /> angeforderte Schnittstelle zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.CommonPrefixWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Creates a new moniker based on the common prefix that this moniker shares with another moniker.">Erstellt einen neuen Moniker auf der Grundlage des Präfixes, das dieser Moniker mit einem anderen gemeinsam hat.</summary>
      <param name="pmkOther" vsli:raw="A reference to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on another moniker to compare with the current moniker for a common prefix.">Ein Verweis auf die <see langword="IMoniker" />-Schnittstelle für einen anderen Moniker, der mit dem aktuellen Moniker auf ein gemeinsames Präfix hin verglichen wird.</param>
      <param name="ppmkPrefix" vsli:raw="When this method returns, contains the moniker that is the common prefix of the current moniker and &lt;paramref name=&quot;pmkOther&quot; /&gt;. This parameter is passed uninitialized.">Die Methode gibt den Moniker zurück, der das gemeinsame Präfix des aktuellen Monikers und von <paramref name="pmkOther" /> darstellt. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ComposeWith(System.Runtime.InteropServices.ComTypes.IMoniker,System.Boolean,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Combines the current moniker with another moniker, creating a new composite moniker.">Kombiniert den aktuellen Moniker mit einem anderen Moniker und erstellt auf diese Weise einen neuen zusammengesetzten Moniker.</summary>
      <param name="pmkRight" vsli:raw="A reference to the &lt;see langword=&quot;IMoniker&quot; /&gt; interface on a moniker to append to the end of the current moniker.">Ein Verweis auf die <see langword="IMoniker" />-Schnittstelle für einen Moniker, der am Ende des aktuellen Monikers angefügt werden soll.</param>
      <param name="fOnlyIfNotGeneric" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to indicate that the caller requires a nongeneric composition. The operation proceeds only if &lt;paramref name=&quot;pmkRight&quot; /&gt; is a moniker class that the current moniker can combine with in some way other than forming a generic composite. &lt;see langword=&quot;false&quot; /&gt; to indicate that the method can create a generic composite if necessary.">
        <see langword="true" />, wenn der Aufrufer eine nicht generische Zusammensetzung erfordert. Die Operation wird nur dann fortgesetzt, wenn <paramref name="pmkRight" /> eine Monikerklasse darstellt, mit der der aktuelle Moniker kombiniert werden kann, ohne dabei einen generisch zusammengesetzten Moniker zu bilden. <see langword="false" />, wenn mithilfe der Methode bei Bedarf ein generisch zusammengesetzter Moniker erstellt werden kann.</param>
      <param name="ppmkComposite" vsli:raw="When this method returns, contains a reference to the resulting composite moniker. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf den sich ergebenden zusammengesetzten Moniker zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Enum(System.Boolean,System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Supplies a pointer to an enumerator that can enumerate the components of a composite moniker.">Stellt einen Zeiger auf einen Enumerator bereit, der die Komponenten eines zusammengesetzten Monikers auflisten kann.</summary>
      <param name="fForward" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to enumerate the monikers from left to right. &lt;see langword=&quot;false&quot; /&gt; to enumerate from right to left.">
        <see langword="true" />, um die Moniker von links nach rechts aufzulisten. <see langword="false" /> für die Auflistung von rechts nach links.</param>
      <param name="ppenumMoniker" vsli:raw="When this method returns, contains a reference to the enumerator object for the moniker. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf das Enumeratorobjekt für den Moniker zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetClassID(System.Guid@)">
      <summary vsli:raw="Retrieves the class identifier (CLSID) of an object.">Ruft die CLSID (Klassen-ID) für ein Objekt ab.</summary>
      <param name="pClassID" vsli:raw="When this method returns, contains the CLSID. This parameter is passed uninitialized.">Diese Methode gibt die CLSID zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String@)">
      <summary vsli:raw="Gets the display name, which is a user-readable representation of the current moniker.">Ruft den Anzeigenamen ab, der eine für den Benutzer lesbare Darstellung des aktuellen Monikers ist.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this operation.">Ein Verweis auf den in diesem Vorgang zu verwendenden Bindungskontext.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">Ein Verweis auf den Moniker, der sich links vom aktuellen Moniker befindet, wenn der Moniker ein Teil eines zusammengesetzten Monikers ist.</param>
      <param name="ppszDisplayName" vsli:raw="When this method returns, contains the display name string. This parameter is passed uninitialized.">Die Methode gibt die Zeichenfolge des Anzeigenamens zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetSizeMax(System.Int64@)">
      <summary vsli:raw="Returns the size, in bytes, of the stream needed to save the object.">Gibt die Größe des Streams in Bytes zurück, der für das Speichern des Objekts benötigt wird.</summary>
      <param name="pcbSize" vsli:raw="When this method returns, contains a &lt;see langword=&quot;long&quot; /&gt; value indicating the size, in bytes, of the stream needed to save this object. This parameter is passed uninitialized.">Die Methode gibt einen <see langword="long" />-Wert zurück, der die Größe des Streams in Bytes zurückgibt, der für das Speichern dieses Objekts benötigt wird. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Provides a number representing the time that the object identified by the current moniker was last changed.">Stellt eine Zahl bereit, die den Zeitpunkt angibt, an dem das vom aktuellen Moniker angegebene Objekt zuletzt geändert wurde.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">Ein Verweis auf den in diesem Bindungsvorgang zu verwendenden Bindungskontext.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker, if the moniker is part of a composite moniker.">Ein Verweis auf den Moniker, der sich links vom aktuellen Moniker befindet, wenn der Moniker ein Teil eines zusammengesetzten Monikers ist.</param>
      <param name="pFileTime" vsli:raw="When this method returns, contains the time of the last change. This parameter is passed uninitialized.">Die Methode gibt den Zeitpunkt der letzten Änderung zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Hash(System.Int32@)">
      <summary vsli:raw="Calculates a 32-bit integer using the internal state of the moniker.">Berechnet eine 32-Bit-Ganzzahl anhand des inneren Zustands des Monikers.</summary>
      <param name="pdwHash" vsli:raw="When this method returns, contains the hash value for this moniker. This parameter is passed uninitialized.">Die Methode gibt den Hashwert für diesen Moniker zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Inverse(System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Provides a moniker that, when composed to the right of the current moniker or one of similar structure, composes to nothing.">Stellt einen Moniker bereit, der nicht zu einer Zusammensetzung führt, wenn er rechts an den aktuellen Moniker bzw. an einen Moniker mit ähnlicher Struktur angefügt wird.</summary>
      <param name="ppmk" vsli:raw="When this method returns, contains a moniker that is the inverse of the current moniker. This parameter is passed uninitialized.">Die Methode gibt einen Moniker zurück, der das Gegenteil vom aktuellen Moniker ist. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsDirty">
      <summary vsli:raw="Checks the object for changes since it was last saved.">Überprüft das Objekt auf Änderungen, die nach dem letzen Speichern vorgenommen wurden.</summary>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the object has changed; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Ein <see langword="S_OK" /><see langword="HRESULT" />-Wert, wenn das Objekt geändert wurde; andernfalls ein <see langword="S_FALSE" /><see langword="HRESULT" />-Wert.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsEqual(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Compares the current moniker with a specified moniker and indicates whether they are identical.">Vergleicht den aktuellen Moniker mit einem angegebenen Moniker und gibt an, ob diese identisch sind.</summary>
      <param name="pmkOtherMoniker" vsli:raw="A reference to the moniker to use for comparison.">Ein für Vergleichszwecke vorgesehener Verweis auf den Moniker.</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the monikers are identical; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Ein <see langword="S_OK" /><see langword="HRESULT" />-Wert, wenn die Moniker identisch sind; andernfalls ein <see langword="S_FALSE" /><see langword="HRESULT" />-Wert.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsRunning(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Determines whether the object that is identified by the current moniker is currently loaded and running.">Bestimmt, ob das vom aktuellen Moniker angegebene Objekt gegenwärtig geladen ist und ausgeführt wird.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">Ein Verweis auf den in diesem Bindungsvorgang zu verwendenden Bindungskontext.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker if the current moniker is part of a composite.">Ein Verweis auf den Moniker, der sich links vom aktuellen Moniker befindet, wenn der aktuelle Moniker ein Teil eines zusammengesetzten Monikers ist.</param>
      <param name="pmkNewlyRunning" vsli:raw="A reference to the moniker most recently added to the Running Object Table (ROT).">Ein Verweis auf den Moniker, der der ROT (Running Object Table) zuletzt hinzugefügt wurde.</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is running; an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is not running; or an &lt;see langword=&quot;E_UNEXPECTED&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Ein <see langword="S_OK" /><see langword="HRESULT" />-Wert, wenn der Moniker ausgeführt wird; ein <see langword="S_FALSE" /><see langword="HRESULT" />-Wert, wenn der Moniker nicht ausgeführt wird, oder ein <see langword="E_UNEXPECTED" /><see langword="HRESULT" />-Wert.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.IsSystemMoniker(System.Int32@)">
      <summary vsli:raw="Indicates whether this moniker is of one of the system-supplied moniker classes.">Gibt an, ob dieser Moniker zu den vom System gelieferten Monikerklassen gehört.</summary>
      <param name="pdwMksys" vsli:raw="When this method returns, contains a pointer to an integer that is one of the values from the &lt;see langword=&quot;MKSYS&quot; /&gt; enumeration, and refers to one of the COM moniker classes. This parameter is passed uninitialized.">Die Methode gibt einen Zeiger auf eine Ganzzahl zurück, die einen Wert aus der <see langword="MKSYS" />-Enumeration darstellt und sich auf eine der COM-Monikerklassen bezieht. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns vsli:raw="An &lt;see langword=&quot;S_OK&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value if the moniker is a system moniker; otherwise, an &lt;see langword=&quot;S_FALSE&quot; /&gt;&lt;see langword=&quot;HRESULT&quot; /&gt; value.">Ein <see langword="S_OK" /><see langword="HRESULT" />-Wert, wenn der Moniker ein Systemmoniker ist; andernfalls ein <see langword="S_FALSE" /><see langword="HRESULT" />-Wert.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Load(System.Runtime.InteropServices.ComTypes.IStream)">
      <summary vsli:raw="Initializes an object from the stream where it was previously saved.">Initialisiert ein Objekt aus dem Stream, in dem es zuvor gespeichert wurde.</summary>
      <param name="pStm" vsli:raw="The stream that the object is loaded from.">Der Stream, aus dem das Objekt geladen wird.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Reads as many characters of the specified display name as the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)&quot; /&gt; understands and builds a moniker corresponding to the portion read.">Liest so viele Zeichen des angegebenen Anzeigenamens, wie von <see cref="M:System.Runtime.InteropServices.ComTypes.IMoniker.ParseDisplayName(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Runtime.InteropServices.ComTypes.IMoniker,System.String,System.Int32@,System.Runtime.InteropServices.ComTypes.IMoniker@)" /> verstanden werden, und erstellt entsprechend der gelesenen Teilzeichenfolge einen Moniker.</summary>
      <param name="pbc" vsli:raw="A reference to the bind context to use in this binding operation.">Ein Verweis auf den in diesem Bindungsvorgang zu verwendenden Bindungskontext.</param>
      <param name="pmkToLeft" vsli:raw="A reference to the moniker that has been built from the display name up to this point.">Ein Verweis auf den Moniker, der bis zu diesem Punkt aus dem Anzeigenamen erstellt wurde.</param>
      <param name="pszDisplayName" vsli:raw="A reference to the string containing the remaining display name to parse.">Ein Verweis auf die Zeichenfolge mit dem verbleibenden Anzeigenamen, der analysiert werden soll.</param>
      <param name="pchEaten" vsli:raw="When this method returns, contains the number of characters that were consumed in parsing &lt;paramref name=&quot;pszDisplayName&quot; /&gt;. This parameter is passed uninitialized.">Die Methode gibt die Anzahl von Zeichen zurück, die bei der Analyse von <paramref name="pszDisplayName" /> verwendet wurde. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="ppmkOut" vsli:raw="When this method returns, contains a reference to the moniker that was built from &lt;paramref name=&quot;pszDisplayName&quot; /&gt;. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf den Moniker zurück, der aus <paramref name="pszDisplayName" /> erstellt wurde. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Reduce(System.Runtime.InteropServices.ComTypes.IBindCtx,System.Int32,System.Runtime.InteropServices.ComTypes.IMoniker@,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Returns a reduced moniker, which is another moniker that refers to the same object as the current moniker but can be bound with equal or greater efficiency.">Gibt einen reduzierten Moniker zurück. Dies ist ein anderer Moniker, der auf dasselbe Objekt wie der aktuelle Moniker verweist, jedoch u. U. effizienter gebunden werden kann.</summary>
      <param name="pbc" vsli:raw="A reference to the &lt;see langword=&quot;IBindCtx&quot; /&gt; interface on the bind context to use in this binding operation.">Ein Verweis auf die <see langword="IBindCtx" />-Schnittstelle für den in diesem Bindungsvorgang verwendeten Bindungskontext.</param>
      <param name="dwReduceHowFar" vsli:raw="A value that specifies how far the current moniker should be reduced.">Ein Wert, der angibt, inwieweit der aktuelle Moniker reduziert werden soll.</param>
      <param name="ppmkToLeft" vsli:raw="A reference to the moniker to the left of the current moniker.">Ein Verweis auf den Moniker, der sich links vom aktuellen Moniker befindet.</param>
      <param name="ppmkReduced" vsli:raw="When this method returns, contains a reference to the reduced form of the current moniker, which can be &lt;see langword=&quot;null&quot; /&gt; if an error occurs or if the current moniker is reduced to nothing. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf die reduzierte Form des aktuellen Monikers zurück. Bei Auftreten eines Fehlers oder vollständiger Reduzierung des Monikers auf 0 (null) kann sie <see langword="null" /> sein. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.RelativePathTo(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.IMoniker@)">
      <summary vsli:raw="Supplies a moniker that, when appended to the current moniker (or one with a similar structure), yields the specified moniker.">Stellt einen Moniker bereit, der beim Anfügen an den aktuellen Moniker (oder einen mit ähnlicher Struktur) den angegebenen Moniker ergibt.</summary>
      <param name="pmkOther" vsli:raw="A reference to the moniker to which a relative path should be taken.">Ein Verweis auf den Moniker, für den ein relativer Pfad verwendet werden soll.</param>
      <param name="ppmkRelPath" vsli:raw="When this method returns, contains a reference to the relative moniker. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf den relativen Moniker zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IMoniker.Save(System.Runtime.InteropServices.ComTypes.IStream,System.Boolean)">
      <summary vsli:raw="Saves an object to the specified stream.">Speichert ein Objekt im angegebenen Stream.</summary>
      <param name="pStm" vsli:raw="The stream to which the object is saved.">Der Stream, in dem das Objekt gespeichert wird.</param>
      <param name="fClearDirty" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to clear the modified flag after the save is complete; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, um das Änderungsflag zu löschen, nachdem die Speicherung abgeschlossen ist; andernfalls <see langword="false" />.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS">
      <summary vsli:raw="Defines the attributes of an implemented or inherited interface of a type.">Definiert die Attribute einer implementierten oder geerbten Schnittstelle eines Typs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULT">
      <summary vsli:raw="The interface or dispinterface represents the default for the source or sink.">Die Schnittstelle bzw. Dispatchschnittstelle stellt den Standard für die Quelle oder die Senke dar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FDEFAULTVTABLE">
      <summary vsli:raw="Sinks receive events through the virtual function table (VTBL).">Senken empfangen Ereignisse über VTBL (Virtual Function Table).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FRESTRICTED">
      <summary vsli:raw="The member should not be displayed or programmable by users.">Der Member darf Benutzern nicht angezeigt werden und darf für sie auch nicht programmierbar sein.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS.IMPLTYPEFLAG_FSOURCE">
      <summary vsli:raw="This member of a coclass is called rather than implemented.">Dieser Member einer Co-Klasse wird aufgerufen und nicht implementiert.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND">
      <summary vsli:raw="Specifies how to invoke a function by &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">Gibt an, wie eine Funktion von <see langword="IDispatch::Invoke" /> aufgerufen wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_FUNC">
      <summary vsli:raw="The member is called using a normal function invocation syntax.">Der Member wird mit der üblichen Aufrufsyntax für Funktionen aufgerufen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYGET">
      <summary vsli:raw="The function is invoked using a normal property access syntax.">Die Funktion wird mit der üblichen Syntax für den Zugriff auf Eigenschaften aufgerufen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUT">
      <summary vsli:raw="The function is invoked using a property value assignment syntax.">Die Funktion wird mit Syntax für das Zuweisen von Eigenschaftswerten aufgerufen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.INVOKEKIND.INVOKE_PROPERTYPUTREF">
      <summary vsli:raw="The function is invoked using a property reference assignment syntax.">Die Funktion wird mit Syntax für das Zuweisen von Verweisen auf Eigenschaften aufgerufen.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IPersistFile">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IPersistFile&quot; /&gt; interface, with functionality from &lt;see langword=&quot;IPersist&quot; /&gt;.">Stellt die verwaltete Definition der <see langword="IPersistFile" />-Schnittstelle mit <see langword="IPersist" />-Funktionalität bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetClassID(System.Guid@)">
      <summary vsli:raw="Retrieves the class identifier (CLSID) of an object.">Ruft die CLSID (Klassen-ID) für ein Objekt ab.</summary>
      <param name="pClassID" vsli:raw="When this method returns, contains a reference to the CLSID. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die CLSID zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.GetCurFile(System.String@)">
      <summary vsli:raw="Retrieves either the absolute path to the current working file of the object or, if there is no current working file, the default file name prompt of the object.">Ruft entweder den absoluten Pfad zur aktuellen Arbeitsdatei des Objekts ab, oder, wenn keine Arbeitsdatei vorhanden ist, die Eingabeaufforderung für den Standarddateinamen des Objekts.</summary>
      <param name="ppszFileName" vsli:raw="When this method returns, contains the address of a pointer to a zero-terminated string containing the path for the current file, or the default file name prompt (such as *.txt). This parameter is passed uninitialized.">Diese Methode gibt die Adresse eines Zeigers auf eine auf 0 (null) endende Zeichenfolge zurück, die den Pfad für die aktuelle Datei oder die Eingabeaufforderung für Standarddateinamen (z. B. *.txt) enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.IsDirty">
      <summary vsli:raw="Checks an object for changes since it was last saved to its current file.">Überprüft ein Objekt auf Änderungen, die nach dem letzten Speichern in der aktuellen Datei vorgenommen wurden.</summary>
      <returns vsli:raw="&lt;see langword=&quot;S_OK&quot; /&gt; if the file has changed since it was last saved; &lt;see langword=&quot;S_FALSE&quot; /&gt; if the file has not changed since it was last saved.">
        <see langword="S_OK" />, wenn die Datei nach dem letzten Speichern geändert wurde, andernfalls <see langword="S_FALSE" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Load(System.String,System.Int32)">
      <summary vsli:raw="Opens the specified file and initializes an object from the file contents.">Öffnet die angegebene Datei, und initialisiert ein Objekt aus dem Dateiinhalt.</summary>
      <param name="pszFileName" vsli:raw="A zero-terminated string containing the absolute path of the file to open.">Eine auf 0 endende Zeichenfolge mit dem absoluten Pfad der zu öffnenden Datei.</param>
      <param name="dwMode" vsli:raw="A combination of values from the &lt;see langword=&quot;STGM&quot; /&gt; enumeration to indicate the access mode in which to open &lt;paramref name=&quot;pszFileName&quot; /&gt;.">Eine Kombination von Werten aus der <see langword="STGM" />-Enumeration, die den Zugriffsmodus für das Öffnen von <paramref name="pszFileName" /> angibt.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.Save(System.String,System.Boolean)">
      <summary vsli:raw="Saves a copy of the object into the specified file.">Speichert eine Kopie des Objekts in der angegebenen Datei.</summary>
      <param name="pszFileName" vsli:raw="A zero-terminated string containing the absolute path of the file to which the object is saved.">Eine auf 0 endende Zeichenfolge mit dem absoluten Pfad der Datei, in der das Objekt gespeichert ist.</param>
      <param name="fRemember" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to used the &lt;paramref name=&quot;pszFileName&quot; /&gt; parameter as the current working file; otherwise &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" /> für die Verwendung des <paramref name="pszFileName" />-Parameters als aktuelle Arbeitsdatei, andernfalls <see langword="false" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IPersistFile.SaveCompleted(System.String)">
      <summary vsli:raw="Notifies the object that it can write to its file.">Benachrichtigt das Objekt, dass dieses in die Datei schreiben kann.</summary>
      <param name="pszFileName" vsli:raw="The absolute path of the file where the object was previously saved.">Der absolute Pfad der Datei, in der das Objekt zuvor gespeichert wurde.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IRunningObjectTable">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IRunningObjectTable&quot; /&gt; interface.">Stellt die verwaltete Definition der <see langword="IRunningObjectTable" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.EnumRunning(System.Runtime.InteropServices.ComTypes.IEnumMoniker@)">
      <summary vsli:raw="Enumerates the objects currently registered as running.">Zählt die derzeit als ausgeführt registrierten Objekte auf.</summary>
      <param name="ppenumMoniker" vsli:raw="When this method returns, contains the new enumerator for the Running Object Table (ROT). This parameter is passed uninitialized.">Enthält nach dem Beenden der Methode den neuen Enumerator für die Running Object Table (ROT). Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetObject(System.Runtime.InteropServices.ComTypes.IMoniker,System.Object@)">
      <summary vsli:raw="Returns the registered object if the supplied object name is registered as running.">Gibt das registriertes Objekt zurück, wenn das Objekt des angegebenen Namens als ausgeführt registriert ist.</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">Ein Verweis auf den in der Running Object Table (ROT) zu suchenden Moniker.</param>
      <param name="ppunkObject" vsli:raw="When this method returns, contains the requested running object. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode das angeforderte ausgeführte Objekt. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">Ein <see langword="HRESULT" />-Wert, der den Erfolg oder Fehler der Operation angibt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.GetTimeOfLastChange(System.Runtime.InteropServices.ComTypes.IMoniker,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Searches for this moniker in the Running Object Table (ROT) and reports the recorded time of change, if present.">Sucht in der Running Object Table (ROT) nach diesem Moniker und teilt ggf. die aufgezeichnete Änderungszeit mit.</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">Ein Verweis auf den in der Running Object Table (ROT) zu suchenden Moniker.</param>
      <param name="pfiletime" vsli:raw="When this object returns, contains the objects last change time. This parameter is passed uninitialized.">Enthält nach dem Beenden dieses Objekts die Zeit der letzten Änderung für dieses Objekt. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">Ein <see langword="HRESULT" />-Wert, der den Erfolg oder Fehler der Operation angibt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.IsRunning(System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Determines whether the specified moniker is currently registered in the Running Object Table (ROT).">Bestimmt, ob der angegebene Moniker derzeit in der Running Object Table (ROT) registriert ist.</summary>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker to search for in the Running Object Table (ROT).">Ein Verweis auf den in der Running Object Table (ROT) zu suchenden Moniker.</param>
      <returns vsli:raw="An &lt;see langword=&quot;HRESULT&quot; /&gt; value that indicates the success or failure of the operation.">Ein <see langword="HRESULT" />-Wert, der den Erfolg oder Fehler der Operation angibt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)">
      <summary vsli:raw="Notes the time that a particular object changed so &lt;see langword=&quot;IMoniker::GetTimeOfLastChange&quot; /&gt; can report an appropriate change time.">Stellt die Zeit fest, zu der ein bestimmtes Objekt geändert wurde, sodass von <see langword="IMoniker::GetTimeOfLastChange" /> eine entsprechende Änderungszeit mitgeteilt werden kann.</summary>
      <param name="dwRegister" vsli:raw="The Running Object Table (ROT) entry of the changed object.">Der ROT-Eintrag (Running Object Table) des geänderten Objekts.</param>
      <param name="pfiletime" vsli:raw="A reference to the object's last change time.">Ein Verweis auf die Zeit der letzten Änderung des Objekts.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Register(System.Int32,System.Object,System.Runtime.InteropServices.ComTypes.IMoniker)">
      <summary vsli:raw="Registers that the supplied object has entered the running state.">Registriert, dass das bereitgestellte Objekt inzwischen ausgeführt wird.</summary>
      <param name="grfFlags" vsli:raw="Specifies whether the Running Object Table's (ROT) reference to &lt;paramref name=&quot;punkObject&quot; /&gt; is weak or strong, and controls access to the object through its entry in the ROT.">Gibt an, ob der ROT-Verweis (Running Object Table) auf <paramref name="punkObject" /> schwach oder stark ist und steuert den Zugriff auf das Objekt über dessen Eintrag in der ROT.</param>
      <param name="punkObject" vsli:raw="A reference to the object being registered as running.">Ein Verweis auf das als ausgeführt registrierte Objekt.</param>
      <param name="pmkObjectName" vsli:raw="A reference to the moniker that identifies &lt;paramref name=&quot;punkObject&quot; /&gt;.">Ein Verweis auf den Moniker, der das <paramref name="punkObject" /> bezeichnet.</param>
      <returns vsli:raw="A value that can be used to identify this ROT entry in subsequent calls to &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)&quot; /&gt; or &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)&quot; /&gt;.">Ein Wert, mit dem dieser ROT-Eintrag bei nachfolgenden Aufrufen von <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)" /> oder <see cref="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.NoteChangeTime(System.Int32,System.Runtime.InteropServices.ComTypes.FILETIME@)" /> bezeichnet werden kann.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IRunningObjectTable.Revoke(System.Int32)">
      <summary vsli:raw="Unregisters the specified object from the Running Object Table (ROT).">Hebt für das angegebene Objekt die Registrierung in der Running Object Table (ROT) auf.</summary>
      <param name="dwRegister" vsli:raw="The Running Object Table (ROT) entry to revoke.">Der rückgängig zu machende ROT-Eintrag (Running Object Table).</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.IStream">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;IStream&quot; /&gt; interface, with &lt;see langword=&quot;ISequentialStream&quot; /&gt; functionality.">Stellt die verwaltete Definition der <see langword="IStream" />-Schnittstelle mit <see langword="ISequentialStream" />-Funktionen bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Clone(System.Runtime.InteropServices.ComTypes.IStream@)">
      <summary vsli:raw="Creates a new stream object with its own seek pointer that references the same bytes as the original stream.">Erstellt ein neues Datenstromobjekt mit einem eigenen Suchzeiger, der auf die gleichen Bytes wie der Originaldatenstrom verweist.</summary>
      <param name="ppstm" vsli:raw="When this method returns, contains the new stream object. This parameter is passed uninitialized.">Enthält nach der Rückkehr dieser Methode das neue Datenstromobjekt. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)">
      <summary vsli:raw="Ensures that any changes made to a stream object that is open in transacted mode are reflected in the parent storage.">Stellt sicher, dass alle Änderungen an einem im Transaktionsmodus geöffneten Datenstromobjekt im übergeordneten Speicher widergespiegelt werden.</summary>
      <param name="grfCommitFlags" vsli:raw="A value that controls how the changes for the stream object are committed.">Ein Wert, der steuert, wie für die Änderungen am Datenstromobjekt ein Commit ausgeführt wird.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.CopyTo(System.Runtime.InteropServices.ComTypes.IStream,System.Int64,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Copies a specified number of bytes from the current seek pointer in the stream to the current seek pointer in another stream.">Kopiert eine angegebene Anzahl von Bytes vom aktuellen Suchzeiger im Datenstrom an den aktuellen Suchzeiger in einem anderen Datenstrom.</summary>
      <param name="pstm" vsli:raw="A reference to the destination stream.">Ein Verweis auf den Zielstream.</param>
      <param name="cb" vsli:raw="The number of bytes to copy from the source stream.">Die Anzahl der Bytes, die aus dem Quelldatenstrom kopiert werden sollen.</param>
      <param name="pcbRead" vsli:raw="On successful return, contains the actual number of bytes read from the source.">Bei erfolgreicher Rückgabe ist die tatsächliche Anzahl der aus der Quelle gelesenen Bytes enthalten.</param>
      <param name="pcbWritten" vsli:raw="On successful return, contains the actual number of bytes written to the destination.">Bei erfolgreicher Rückgabe ist die tatsächliche Anzahl der in das Ziel geschriebenen Bytes enthalten.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)">
      <summary vsli:raw="Restricts access to a specified range of bytes in the stream.">Schränkt den Zugriff auf einen bestimmten Bereich von Bytes im Datenstrom ein.</summary>
      <param name="libOffset" vsli:raw="The byte offset for the beginning of the range.">Der Byteoffset für den Anfang des Bereichs.</param>
      <param name="cb" vsli:raw="The length of the range, in bytes, to restrict.">Die Länge des einzuschränkenden Bereichs in Bytes.</param>
      <param name="dwLockType" vsli:raw="The requested restrictions on accessing the range.">Die angeforderten Einschränkungen für den Zugriff auf den Bereich.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Read(System.Byte[],System.Int32,System.IntPtr)">
      <summary vsli:raw="Reads a specified number of bytes from the stream object into memory starting at the current seek pointer.">Liest eine angegebene Anzahl von Bytes beginnend beim aktuellen Suchzeiger aus dem Datenstromobjekt in den Arbeitsspeicher.</summary>
      <param name="pv" vsli:raw="When this method returns, contains the data read from the stream. This parameter is passed uninitialized.">Enthält nach der Rückkehr dieser Methode die aus dem Datenstrom gelesenen Daten. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="cb" vsli:raw="The number of bytes to read from the stream object.">Die Anzahl von Bytes, die aus dem Datenstromobjekt gelesen werden sollen.</param>
      <param name="pcbRead" vsli:raw="A pointer to a &lt;see langword=&quot;ULONG&quot; /&gt; variable that receives the actual number of bytes read from the stream object.">Ein Zeiger auf eine <see langword="ULONG" />-Variable, die die tatsächliche Anzahl von Bytes empfängt, die aus dem Datenstromobjekt gelesen wurden.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Revert">
      <summary vsli:raw="Discards all changes that have been made to a transacted stream since the last &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)&quot; /&gt; call.">Verwirft alle Änderungen, die seit dem letzten <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.Commit(System.Int32)" />-Aufruf an einem transaktionsgebundenen Datenstrom vorgenommen wurden.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Seek(System.Int64,System.Int32,System.IntPtr)">
      <summary vsli:raw="Changes the seek pointer to a new location relative to the beginning of the stream, to the end of the stream, or to the current seek pointer.">Verschiebt den Suchzeiger auf eine neue Position im Verhältnis zum Anfang oder Ende des Datenstroms bzw. zum aktuellen Suchzeiger.</summary>
      <param name="dlibMove" vsli:raw="The displacement to add to &lt;paramref name=&quot;dwOrigin&quot; /&gt;.">Der Versatz, der <paramref name="dwOrigin" /> hinzugefügt wird.</param>
      <param name="dwOrigin" vsli:raw="The origin of the seek. The origin can be the beginning of the file, the current seek pointer, or the end of the file.">Der Ausgangspunkt der Suche. Der Ursprung kann der Dateianfang, der aktuelle Suchzeiger oder das Dateiende sein.</param>
      <param name="plibNewPosition" vsli:raw="On successful return, contains the offset of the seek pointer from the beginning of the stream.">Enthält nach erfolgreicher Rückkehr den Offset des Suchzeigers vom Anfang des Datenstroms.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.SetSize(System.Int64)">
      <summary vsli:raw="Changes the size of the stream object.">Ändert die Größe des Streamobjekts.</summary>
      <param name="libNewSize" vsli:raw="The new size of the stream as a number of bytes.">Die neue Größe des Datenstroms, angegeben als Anzahl von Bytes.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Stat(System.Runtime.InteropServices.ComTypes.STATSTG@,System.Int32)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.STATSTG&quot; /&gt; structure for this stream.">Ruft die <see cref="T:System.Runtime.InteropServices.STATSTG" />-Struktur für diesen Datenstrom ab.</summary>
      <param name="pstatstg" vsli:raw="When this method returns, contains a &lt;see langword=&quot;STATSTG&quot; /&gt; structure that describes this stream object. This parameter is passed uninitialized.">Die Methode gibt eine <see langword="STATSTG" />-Struktur zurück, die dieses Streamobjekt beschreibt. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="grfStatFlag" vsli:raw="Members in the &lt;see langword=&quot;STATSTG&quot; /&gt; structure that this method does not return, thus saving some memory allocation operations.">Die Member in der <see langword="STATSTG" />-Struktur, die von dieser Methode nicht zurückgegeben werden. Somit werden einige Operationen zur Speicherbelegung erspart.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.UnlockRegion(System.Int64,System.Int64,System.Int32)">
      <summary vsli:raw="Removes the access restriction on a range of bytes previously restricted with the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)&quot; /&gt; method.">Entfernt die Zugriffseinschränkung für einen Bereich von Bytes, der zuvor mit der <see cref="M:System.Runtime.InteropServices.ComTypes.IStream.LockRegion(System.Int64,System.Int64,System.Int32)" />-Methode eingeschränkt wurde.</summary>
      <param name="libOffset" vsli:raw="The byte offset for the beginning of the range.">Der Byteoffset für den Anfang des Bereichs.</param>
      <param name="cb" vsli:raw="The length, in bytes, of the range to restrict.">Die Länge des einzuschränkenden Bereichs in Bytes.</param>
      <param name="dwLockType" vsli:raw="The access restrictions previously placed on the range.">Die zuvor auf den Bereich angewendeten Zugriffseinschränkungen.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.IStream.Write(System.Byte[],System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a specified number of bytes into the stream object starting at the current seek pointer.">Schreibt eine angegebene Anzahl von Bytes beginnend beim aktuellen Suchzeiger in das Datenstromobjekt.</summary>
      <param name="pv" vsli:raw="The buffer to write this stream to.">Der Puffer, in den dieser Datenstrom geschrieben wird.</param>
      <param name="cb" vsli:raw="The number of bytes to write to the stream.">Die Anzahl von Bytes, die in den Datenstrom geschrieben werden.</param>
      <param name="pcbWritten" vsli:raw="On successful return, contains the actual number of bytes written to the stream object. If the caller sets this pointer to &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;, this method does not provide the actual number of bytes written.">Enthält nach erfolgreicher Rückkehr die tatsächliche Anzahl von Bytes, die in das Datenstromobjekt geschrieben wurden. Wenn der Aufrufer diesen Zeiger auf <see cref="F:System.IntPtr.Zero" /> festlegt, gibt diese Methode nicht die tatsächliche Anzahl von geschriebenen Bytes zurück.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeComp">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface.">Stellt die verwaltete Definition der <see langword="ITypeComp" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.Bind(System.String,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.DESCKIND@,System.Runtime.InteropServices.ComTypes.BINDPTR@)">
      <summary vsli:raw="Maps a name to a member of a type, or binds global variables and functions contained in a type library.">Ordnet dem Member eines Typs einen Namen zu oder bindet globale Variablen und Funktionen in einer Typbibliothek.</summary>
      <param name="szName" vsli:raw="The name to bind.">Der zu bindende Name.</param>
      <param name="lHashVal" vsli:raw="A hash value for &lt;paramref name=&quot;szName&quot; /&gt; computed by &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt;.">Ein von <see langword="LHashValOfNameSys" /> berechneter Hashwert für <paramref name="szName" />.</param>
      <param name="wFlags" vsli:raw="A flags word containing one or more of the invoke flags defined in the &lt;see langword=&quot;INVOKEKIND&quot; /&gt; enumeration.">Ein Flagwort mit mindestens einem Aufrufflag, das in der <see langword="INVOKEKIND" />-Enumeration definiert ist.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains a reference to the type description that contains the item to which it is bound, if a &lt;see langword=&quot;FUNCDESC&quot; /&gt; or &lt;see langword=&quot;VARDESC&quot; /&gt; was returned. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf die Typbeschreibung mit dem Element zurück, an das diese gebunden ist, wenn <see langword="FUNCDESC" /> oder <see langword="VARDESC" /> zurückgegeben wurde. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pDescKind" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;DESCKIND&quot; /&gt; enumerator that indicates whether the name bound-to is a &lt;see langword=&quot;VARDESC&quot; /&gt;, &lt;see langword=&quot;FUNCDESC&quot; /&gt;, or &lt;see langword=&quot;TYPECOMP&quot; /&gt;. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf einen <see langword="DESCKIND" />-Enumerator zurück, der angibt, ob es sich bei dem gebundenen Namen um <see langword="VARDESC" />, <see langword="FUNCDESC" /> oder <see langword="TYPECOMP" /> handelt. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pBindPtr" vsli:raw="When this method returns, contains a reference to the bound-to &lt;see langword=&quot;VARDESC&quot; /&gt;, &lt;see langword=&quot;FUNCDESC&quot; /&gt;, or &lt;see langword=&quot;ITypeComp&quot; /&gt; interface. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf die gebundene <see langword="VARDESC" />, <see langword="FUNCDESC" /> oder <see langword="ITypeComp" />-Schnittstelle zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeComp.BindType(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@,System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Binds to the type descriptions contained within a type library.">Bindet an die Typbeschreibungen in einer Typbibliothek.</summary>
      <param name="szName" vsli:raw="The name to bind.">Der zu bindende Name.</param>
      <param name="lHashVal" vsli:raw="A hash value for &lt;paramref name=&quot;szName&quot; /&gt; determined by &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt;.">Ein von <see langword="LHashValOfNameSys" /> bestimmter Hashwert für <paramref name="szName" />.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains a reference to an &lt;see langword=&quot;ITypeInfo&quot; /&gt; of the type to which &lt;paramref name=&quot;szName&quot; /&gt; was bound. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf die <see langword="ITypeInfo" /> des Typs zurück, an den <paramref name="szName" /> gebunden ist. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to an &lt;see langword=&quot;ITypeComp&quot; /&gt; variable. This parameter is passed uninitialized.">Die Methode gibt einen Verweis auf eine <see langword="ITypeComp" />-Variable zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo">
      <summary vsli:raw="Provides the managed definition of the Component Automation ITypeInfo interface.">Stellt die verwaltete Definition der ITypeInfo-Komponentenautomatisierungsschnittstelle bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary vsli:raw="Retrieves the addresses of static functions or variables, such as those defined in a DLL.">Ruft die Adressen statischer Funktionen oder Variablen ab, wie sie z. B. in einer DLL definiert sind.</summary>
      <param name="memid" vsli:raw="The member ID of the &lt;see langword=&quot;static&quot; /&gt; member's address to retrieve.">Die Member-ID der abzurufenden Adresse des <see langword="static" />-Members.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies whether the member is a property, and if so, what kind.">Ein <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" />-Wert, der angibt, ob es sich bei dem Member um eine Eigenschaft handelt, und ggf. um welche Art von Eigenschaft es sich handelt.</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;static&quot; /&gt; member. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf den <see langword="static" />-Member zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary vsli:raw="Creates a new instance of a type that describes a component class (coclass).">Erstellt eine neue Instanz eines Typs, der eine Komponentenklasse (Co-Klasse) beschreibt.</summary>
      <param name="pUnkOuter" vsli:raw="The object that acts as the controlling &lt;see langword=&quot;IUnknown&quot; /&gt;.">Das Objekt, das als steuernde <see langword="IUnknown" /> fungiert.</param>
      <param name="riid" vsli:raw="The IID of the interface that the caller uses to communicate with the resulting object.">Die IID der Schnittstelle, die der Aufrufer zur Kommunikation mit dem resultierenden Objekt verwendet.</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the created object. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf das erstellte Objekt zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary vsli:raw="Retrieves the type library that contains this type description and its index within that type library.">Ruft die Typbibliothek ab, in der die Typenbeschreibung und der Index in der Typbibliothek enthalten ist.</summary>
      <param name="ppTLB" vsli:raw="When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die enthaltende Typbibliothek zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pIndex" vsli:raw="When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf den Index der Typbeschreibung in der enthaltenden Typbibliothek zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Retrieves a description or specification of an entry point for a function in a DLL.">Ruft eine Beschreibung oder Angabe eines Einstiegspunkts für eine Funktion in einer DLL ab.</summary>
      <param name="memid" vsli:raw="The ID of the member function whose DLL entry description is to be returned.">Die ID der Memberfunktion, deren Beschreibung des DLL-Eintrags zurückgegeben werden soll.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by &lt;paramref name=&quot;memid&quot; /&gt;.">Einer der <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" />-Werte, der die durch <paramref name="memid" /> festgelegte Art von Member angibt.</param>
      <param name="pBstrDllName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;paramref name=&quot;pBstrDllName&quot; /&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the DLL.">Wenn dies nicht <see langword="null" /> ist, legt die Funktion <paramref name="pBstrDllName" /> auf ein <see langword="BSTR" /> fest, das den Namen der DLL enthält.</param>
      <param name="pBstrName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;c&gt;lpbstrName&lt;/c&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the entry point.">Wenn dies nicht <see langword="null" /> ist, legt die Funktion <c>lpbstrName</c> auf einen <see langword="BSTR" /> fest, der den Namen des Einstiegspunkts enthält.</param>
      <param name="pwOrdinal" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, and the function is defined by an ordinal, then &lt;c&gt;lpwOrdinal&lt;/c&gt; is set to point to the ordinal.">Wenn dies nicht <see langword="null" /> ist und die Funktion durch eine Ordnungszahl definiert ist, wird <c>lpwOrdinal</c> zum Zeigen auf die Ordnungszahl festgelegt.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.">Ruft die Dokumentationszeichenfolge, den vollständigen Namen und Pfad der Hilfedatei sowie die Kontext-ID des Hilfethemas für eine angegebene Typenbeschreibung ab.</summary>
      <param name="index" vsli:raw="The ID of the member whose documentation is to be returned.">Die ID des Members, dessen Dokumentation zurückgegeben werden soll.</param>
      <param name="strName" vsli:raw="When this method returns, contains the name of the item method. This parameter is passed uninitialized.">Diese Methode gibt den Namen der Elementmethode zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode die Dokumentationszeichenfolge für das angegebene Element. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf den Hilfekontext zurück, der dem angegebenen Element zugeordnet ist. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.">Diese Methode gibt den voll qualifizierten Namen der Hilfedatei zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure that contains information about a specified function.">Ruft die <see cref="T:System.Runtime.InteropServices.FUNCDESC" />-Struktur ab, in der Informationen über eine angegebene Funktion enthalten sind.</summary>
      <param name="index" vsli:raw="The index of the function description to return.">Der Index der zurückzugebenden Funktionsbeschreibung.</param>
      <param name="ppFuncDesc" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure that describes the specified function. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf eine <see langword="FUNCDESC" />-Struktur zurück, die die angegebene Funktion beschreibt. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary vsli:raw="Maps between member names and member IDs, and parameter names and parameter IDs.">Erstellt Zuordnungen zwischen Membernamen und Member-IDs sowie zwischen Parameternamen und Parameter-IDs.</summary>
      <param name="rgszNames" vsli:raw="An array of names to map.">Ein Array von zuzuordnenden Namen.</param>
      <param name="cNames" vsli:raw="The count of names to map.">Die Anzahl der zuzuordnenden Namen.</param>
      <param name="pMemId" vsli:raw="When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf ein Array mit Namenszuordnungen zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.IMPLTYPEFLAGS&quot; /&gt; value for one implemented interface or base interface in a type description.">Ruft den <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" />-Wert für eine einzelne implementierte Schnittstelle oder Basisschnittstelle in einer Typenbeschreibung ab.</summary>
      <param name="index" vsli:raw="The index of the implemented interface or base interface.">Der Index der implementierten Schnittstelle bzw. Basisschnittstelle.</param>
      <param name="pImplTypeFlags" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;IMPLTYPEFLAGS&quot; /&gt; enumeration. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die <see langword="IMPLTYPEFLAGS" />-Enumeration zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetMops(System.Int32,System.String@)">
      <summary vsli:raw="Retrieves marshaling information.">Ruft Marshallinformationen ab.</summary>
      <param name="memid" vsli:raw="The member ID that indicates which marshaling information is needed.">Die Member-ID, die angibt, welche Marshallinformationen erforderlich sind.</param>
      <param name="pBstrMops" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;opcode&quot; /&gt; string used in marshaling the fields of the structure described by the referenced type description, or returns &lt;see langword=&quot;null&quot; /&gt; if there is no information to return. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die <see langword="opcode" />-Zeichenfolge für das Marshallen der Felder in der Struktur zurück, die von der Typbeschreibung beschrieben wird, auf die verwiesen wird. Wenn jedoch keine zurückzugebenden Informationen vorhanden sind, wird <see langword="null" /> zurückgegeben. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.">Ruft die Variable mit der angegebenen Member-ID (oder den Namen der Eigenschaft bzw. Methode und deren Parameter) ab, die der angegebenen Funktions-ID entsprechen.</summary>
      <param name="memid" vsli:raw="The ID of the member whose name (or names) is to be returned.">ID des Members, dessen Name bzw. Namen zurückgegeben werden sollen.</param>
      <param name="rgBstrNames" vsli:raw="When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.">Diese Methode gibt den bzw. die dem Member zugeordneten Namen zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="cMaxNames" vsli:raw="The length of the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array.">Die Länge des <paramref name="rgBstrNames" />-Arrays.</param>
      <param name="pcNames" vsli:raw="When this method returns, contains the number of names in the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array. This parameter is passed uninitialized.">Diese Methode gibt die Anzahl der Namen im <paramref name="rgBstrNames" />-Array zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the referenced type descriptions if a type description references other type descriptions.">Ruft die Typbeschreibungen ab, auf die verwiesen wird, wenn eine Typbeschreibung auf andere Typbeschreibungen verweist.</summary>
      <param name="hRef" vsli:raw="A handle to the referenced type description to return.">Ein Handle für die zurückzugebende Typbeschreibung, auf die verwiesen wird.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains the referenced type description. This parameter is passed uninitialized.">Diese Methode gibt die Typbeschreibung zurück, auf die verwiesen wird. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the type description of the implemented interface types if a type description describes a COM class.">Ruft die Typbeschreibung der implementierten Schnittstellentypen ab, wenn eine Typbeschreibung eine COM-Klasse beschreibt.</summary>
      <param name="index" vsli:raw="The index of the implemented type whose handle is returned.">Der Index des implementierten Typs, dessen Handle zurückgegeben wird.</param>
      <param name="href" vsli:raw="When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf ein Handle für die implementierte Schnittstelle zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure that contains the attributes of the type description.">Ruft eine <see cref="T:System.Runtime.InteropServices.TYPEATTR" />-Struktur mit den Attributen der Typenbeschreibung ab.</summary>
      <param name="ppTypeAttr" vsli:raw="When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die Struktur zurück, die die Attribute dieser Typbeschreibung enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface for the type description, which enables a client compiler to bind to the type description's members.">Ruft die <see langword="ITypeComp" />-Schnittstelle für die Typenbeschreibung ab, sodass ein Clientcompiler eine Bindung an die Member der Typenbeschreibung vornehmen kann.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface of the containing type library. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die <see langword="ITypeComp" />-Schnittstelle der enthaltenden Typbibliothek zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable.">Ruft eine <see langword="VARDESC" />-Struktur ab, die die angegebene Variable beschreibt.</summary>
      <param name="index" vsli:raw="The index of the variable description to return.">Der Index der zurückzugebenden Variablenbeschreibung.</param>
      <param name="ppVarDesc" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die <see langword="VARDESC" />-Struktur zurück, die die angegebene Variable beschreibt. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary vsli:raw="Invokes a method, or accesses a property of an object, that implements the interface described by the type description.">Ruft eine Methode auf bzw. greift auf die Eigenschaft eines Objekts zu, die bzw. das die von der Typenbeschreibung beschriebene Schnittstelle implementiert.</summary>
      <param name="pvInstance" vsli:raw="A reference to the interface described by this type description.">Ein Verweis auf die von dieser Typbeschreibung beschriebene Schnittstelle.</param>
      <param name="memid" vsli:raw="A value that identifies the interface member.">Ein Wert, der den Schnittstellenmember angibt.</param>
      <param name="wFlags" vsli:raw="Flags that describe the context of the invoke call.">Flags, die den Kontext des Invoke-Aufrufs beschreiben.</param>
      <param name="pDispParams" vsli:raw="A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.">Ein Verweis auf eine Struktur, die ein Array von Argumenten und ein Array von DISPIDs für benannte Argumente enthält und die Anzahl der Elemente in jedem Array zählt.</param>
      <param name="pVarResult" vsli:raw="A reference to the location at which the result is to be stored. If &lt;paramref name=&quot;wFlags&quot; /&gt; specifies &lt;see langword=&quot;DISPATCH_PROPERTYPUT&quot; /&gt; or &lt;see langword=&quot;DISPATCH_PROPERTYPUTREF&quot; /&gt;, &lt;paramref name=&quot;pVarResult&quot; /&gt; is ignored. Set to &lt;see langword=&quot;null&quot; /&gt; if no result is desired.">Ein Verweis auf den gewünschten Speicherort für das Ergebnis. Wenn <paramref name="wFlags" /><see langword="DISPATCH_PROPERTYPUT" /> oder <see langword="DISPATCH_PROPERTYPUTREF" /> angibt, wird <paramref name="pVarResult" /> ignoriert. Wenn kein Ergebnis erforderlich ist, wird dies auf <see langword="null" /> festgelegt.</param>
      <param name="pExcepInfo" vsli:raw="A pointer to an exception information structure, which is filled in only if &lt;see langword=&quot;DISP_E_EXCEPTION&quot; /&gt; is returned.">Ein Zeiger auf eine Struktur für Ausnahmeinformationen, die nur bei Rückgabe von <see langword="DISP_E_EXCEPTION" /> aufgefüllt wird.</param>
      <param name="puArgErr" vsli:raw="If &lt;see langword=&quot;Invoke&quot; /&gt; returns &lt;see langword=&quot;DISP_E_TYPEMISMATCH&quot; /&gt;, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates the index within &lt;c&gt;rgvarg&lt;/c&gt; of the argument with the incorrect type. If more than one argument returns an error, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates only the first argument with an error. This parameter is passed uninitialized.">Bei der Rückgabe von <see langword="DISP_E_TYPEMISMATCH" /> durch <see langword="Invoke" /> gibt <paramref name="puArgErr" /> den Index in <c>rgvarg</c> des Arguments mit dem falschen Typ an. Wenn mehrere Argumente einen Fehler zurückgeben, gibt <paramref name="puArgErr" /> nur das erste Argument mit einem Fehler an. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseFuncDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">Gibt eine <see cref="T:System.Runtime.InteropServices.FUNCDESC" />-Struktur frei, die zuvor von der <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" />-Methode zurückgegeben wurde.</summary>
      <param name="pFuncDesc" vsli:raw="A reference to the &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure to release.">Ein Verweis auf die freizugebende <see langword="FUNCDESC" />-Struktur.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseTypeAttr(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)&quot; /&gt; method.">Gibt eine <see cref="T:System.Runtime.InteropServices.TYPEATTR" />-Struktur frei, die zuvor von der <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" />-Methode zurückgegeben wurde.</summary>
      <param name="pTypeAttr" vsli:raw="A reference to the &lt;see langword=&quot;TYPEATTR&quot; /&gt; structure to release.">Ein Verweis auf die freizugebende <see langword="TYPEATTR" />-Struktur.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.ReleaseVarDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see langword=&quot;VARDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">Gibt eine <see langword="VARDESC" />-Struktur frei, die zuvor von der <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" />-Methode zurückgegeben wurde.</summary>
      <param name="pVarDesc" vsli:raw="A reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure to release.">Ein Verweis auf die freizugebende <see langword="VARDESC" />-Struktur.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeInfo2">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeInfo2&quot; /&gt; interface.">Stellt die verwaltete Definition der <see langword="ITypeInfo2" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.AddressOfMember(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr@)">
      <summary vsli:raw="Retrieves the addresses of static functions or variables, such as those defined in a DLL.">Ruft die Adressen statischer Funktionen oder Variablen ab, wie sie z. B. in einer DLL definiert sind.</summary>
      <param name="memid" vsli:raw="The member ID of the &lt;see langword=&quot;static&quot; /&gt; member's address to retrieve.">Die Member-ID der abzurufenden Adresse des <see langword="static" />-Members.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies whether the member is a property, and if so, what kind.">Ein <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" />-Wert, der angibt, ob es sich bei dem Member um eine Eigenschaft handelt, und ggf. um welche Art von Eigenschaft es sich handelt.</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;static&quot; /&gt; member. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf den <see langword="static" />-Member zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.CreateInstance(System.Object,System.Guid@,System.Object@)">
      <summary vsli:raw="Creates a new instance of a type that describes a component class (coclass).">Erstellt eine neue Instanz eines Typs, der eine Komponentenklasse (Co-Klasse) beschreibt.</summary>
      <param name="pUnkOuter" vsli:raw="An object that acts as the controlling &lt;see langword=&quot;IUnknown&quot; /&gt;.">Ein Objekt, das als steuernde <see langword="IUnknown" /> fungiert.</param>
      <param name="riid" vsli:raw="The IID of the interface that the caller uses to communicate with the resulting object.">Die IID der Schnittstelle, die der Aufrufer zur Kommunikation mit dem resultierenden Objekt verwendet.</param>
      <param name="ppvObj" vsli:raw="When this method returns, contains a reference to the created object. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf das erstellte Objekt zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllCustData(System.IntPtr)">
      <summary vsli:raw="Gets all custom data items for the library.">Ruft alle benutzerdefinierten Datenelemente für die Bibliothek ab.</summary>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Ein Zeiger auf <see langword="CUSTDATA" />, der alle benutzerdefinierten Datenelemente enthält.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllFuncCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all custom data from the specified function.">Ruft alle benutzerdefinierten Daten aus der angegebenen Funktion ab.</summary>
      <param name="index" vsli:raw="The index of the function to get the custom data for.">Der Index der Funktion, für die die benutzerdefinierten Daten abgerufen werden sollen.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Ein Zeiger auf <see langword="CUSTDATA" />, der alle benutzerdefinierten Datenelemente enthält.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllImplTypeCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all custom data for the specified implementation type.">Ruft alle benutzerdefinierten Daten für den angegebenen Implementierungstyp ab.</summary>
      <param name="index" vsli:raw="The index of the implementation type for the custom data.">Der Index des Implementierungstyps für die benutzerdefinierten Daten.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt; which holds all custom data items.">Ein Zeiger auf <see langword="CUSTDATA" />, der alle benutzerdefinierten Datenelemente enthält.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllParamCustData(System.Int32,System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets all of the custom data for the specified function parameter.">Ruft alle benutzerdefinierten Daten für den angegebenen Funktionsparameter ab.</summary>
      <param name="indexFunc" vsli:raw="The index of the function to get the custom data for.">Der Index der Funktion, für die die benutzerdefinierten Daten abgerufen werden sollen.</param>
      <param name="indexParam" vsli:raw="The index of the parameter of this function to get the custom data for.">Der Index des Parameters dieser Funktion, für die die benutzerdefinierten Daten abgerufen werden sollen.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Ein Zeiger auf <see langword="CUSTDATA" />, der alle benutzerdefinierten Datenelemente enthält.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetAllVarCustData(System.Int32,System.IntPtr)">
      <summary vsli:raw="Gets the variable for the custom data.">Ruft die Variable für die benutzerdefinierten Daten ab.</summary>
      <param name="index" vsli:raw="The index of the variable to get the custom data for.">Der Index der Variablen, für die die benutzerdefinierten Daten abgerufen werden sollen.</param>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Ein Zeiger auf <see langword="CUSTDATA" />, der alle benutzerdefinierten Datenelemente enthält.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetContainingTypeLib(System.Runtime.InteropServices.ComTypes.ITypeLib@,System.Int32@)">
      <summary vsli:raw="Retrieves the type library that contains this type description and its index within that type library.">Ruft die Typbibliothek ab, in der die Typenbeschreibung und der Index in der Typbibliothek enthalten ist.</summary>
      <param name="ppTLB" vsli:raw="When this method returns, contains a reference to the containing type library. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die enthaltende Typbibliothek zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pIndex" vsli:raw="When this method returns, contains a reference to the index of the type description within the containing type library. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf den Index der Typbeschreibung in der enthaltenden Typbibliothek zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetCustData(System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data.">Ruft die benutzerdefinierten Daten ab.</summary>
      <param name="guid" vsli:raw="The GUID used to identify the data.">Die zur Identifizierung der Daten verwendete GUID.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">Enthält nach Rückgabe dieser Methode ein <see langword="Object" />, das angibt, wo die abgerufenen Daten abgelegt werden sollen. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDllEntry(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.IntPtr,System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Retrieves a description or specification of an entry point for a function in a DLL.">Ruft eine Beschreibung oder Angabe eines Einstiegspunkts für eine Funktion in einer DLL ab.</summary>
      <param name="memid" vsli:raw="The ID of the member function whose DLL entry description is to be returned.">Die ID der Memberfunktion, deren Beschreibung des DLL-Eintrags zurückgegeben werden soll.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by &lt;paramref name=&quot;memid&quot; /&gt;.">Einer der <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" />-Werte, der die durch <paramref name="memid" /> festgelegte Art von Member angibt.</param>
      <param name="pBstrDllName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;paramref name=&quot;pBstrDllName&quot; /&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the DLL.">Wenn dies nicht <see langword="null" /> ist, legt die Funktion <paramref name="pBstrDllName" /> auf ein <see langword="BSTR" /> fest, das den Namen der DLL enthält.</param>
      <param name="pBstrName" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, the function sets &lt;c&gt;lpbstrName&lt;/c&gt; to a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the entry point.">Wenn dies nicht <see langword="null" /> ist, legt die Funktion <c>lpbstrName</c> auf einen <see langword="BSTR" /> fest, der den Namen des Einstiegspunkts enthält.</param>
      <param name="pwOrdinal" vsli:raw="If not &lt;see langword=&quot;null&quot; /&gt;, and the function is defined by an ordinal, then &lt;c&gt;lpwOrdinal&lt;/c&gt; is set to point to the ordinal.">Wenn dies nicht <see langword="null" /> ist und die Funktion durch eine Ordnungszahl definiert ist, wird <c>lpwOrdinal</c> zum Zeigen auf die Ordnungszahl festgelegt.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, and the context ID for the Help topic for a specified type description.">Ruft die Dokumentationszeichenfolge, den vollständigen Namen und Pfad der Hilfedatei sowie die Kontext-ID des Hilfethemas für eine angegebene Typenbeschreibung ab.</summary>
      <param name="index" vsli:raw="The ID of the member whose documentation is to be returned.">Die ID des Members, dessen Dokumentation zurückgegeben werden soll.</param>
      <param name="strName" vsli:raw="When this method returns, contains the name of the item method. This parameter is passed uninitialized.">Diese Methode gibt den Namen der Elementmethode zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode die Dokumentationszeichenfolge für das angegebene Element. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains a reference to the Help context associated with the specified item. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf den Hilfekontext zurück, der dem angegebenen Element zugeordnet ist. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains the fully qualified name of the Help file. This parameter is passed uninitialized.">Diese Methode gibt den voll qualifizierten Namen der Hilfedatei zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.">Ruft die Dokumentationszeichenfolge, den vollständigen Dateinamen und Pfad der Hilfe, den zu verwendenden Lokalisierungskontext und die Kontext-ID des Hilfethemas der Bibliothek in der Hilfedatei ab.</summary>
      <param name="memid" vsli:raw="The member identifier for the type description.">Der Memberbezeichner für die Typbeschreibung.</param>
      <param name="pbstrHelpString" vsli:raw="When this method returns, contains a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the name of the specified item. If the caller does not need the item name, &lt;paramref name=&quot;pbstrHelpString&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Enthält nach Rückgabe dieser Methode einen <see langword="BSTR" />-Typ mit dem Namen des angegebenen Elements. Wenn der Aufrufer den Elementnamen nicht benötigt, kann <paramref name="pbstrHelpString" /> auch <see langword="null" /> sein. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pdwHelpStringContext" vsli:raw="When this method returns, contains the Help localization context. If the caller does not need the Help context, &lt;paramref name=&quot;pdwHelpStringContext&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Enthält nach Rückgabe dieser Methode den Lokalisierungskontext der Hilfe. Wenn der Aufrufer den Hilfekontext nicht benötigt, kann <paramref name="pdwHelpStringContext" /> auch <see langword="null" /> sein. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pbstrHelpStringDll" vsli:raw="When this method returns, contains a &lt;see langword=&quot;BSTR&quot; /&gt; that contains the fully qualified name of the file containing the DLL used for the Help file. If the caller does not need the file name, &lt;paramref name=&quot;pbstrHelpStringDll&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Enthält nach Rückgabe dieser Methode einen <see langword="BSTR" />-Typ, der den vollqualifizierten Namen der Datei enthält, die die für die Hilfedatei verwendete DLL enthält. Wenn der Aufrufer den Dateinamen nicht benötigt, kann <paramref name="pbstrHelpStringDll" /> auch <see langword="null" /> sein. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data from the specified function.">Ruft die benutzerdefinierten Daten aus der angegebenen Funktion ab.</summary>
      <param name="index" vsli:raw="The index of the function to get the custom data for.">Der Index der Funktion, für die die benutzerdefinierten Daten abgerufen werden sollen.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">Die zur Identifizierung der Daten verwendete GUID.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specified where to put the data. This parameter is passed uninitialized.">Enthält nach Rückgabe dieser Methode ein <see langword="Object" />, das angibt, wo die Daten abgelegt werden sollen. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure that contains information about a specified function.">Ruft die <see cref="T:System.Runtime.InteropServices.FUNCDESC" />-Struktur ab, in der Informationen über eine angegebene Funktion enthalten sind.</summary>
      <param name="index" vsli:raw="The index of the function description to return.">Der Index der zurückzugebenden Funktionsbeschreibung.</param>
      <param name="ppFuncDesc" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure that describes the specified function. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf eine <see langword="FUNCDESC" />-Struktur zurück, die die angegebene Funktion beschreibt. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetFuncIndexOfMemId(System.Int32,System.Runtime.InteropServices.ComTypes.INVOKEKIND,System.Int32@)">
      <summary vsli:raw="Binds to a specific member based on a known DISPID, where the member name is not known (for example, when binding to a default member).">Bindet – wo der Membername nicht bekannt ist – auf Basis einer bekannten DISPID an einen bestimmten Member (z.B. beim Binden an einen Standardmember).</summary>
      <param name="memid" vsli:raw="The member identifier.">Der Memberbezeichner.</param>
      <param name="invKind" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.INVOKEKIND&quot; /&gt; values that specifies the kind of member identified by memid.">Einer der <see cref="T:System.Runtime.InteropServices.ComTypes.INVOKEKIND" />-Werte, der die Art des durch Memid identifizierten Members angibt.</param>
      <param name="pFuncIndex" vsli:raw="When this method returns, contains an index into the function. This parameter is passed uninitialized.">Diese Methode gibt einen Index an die Funktion zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetIDsOfNames(System.String[],System.Int32,System.Int32[])">
      <summary vsli:raw="Maps between member names and member IDs, and parameter names and parameter IDs.">Erstellt Zuordnungen zwischen Membernamen und Member-IDs sowie zwischen Parameternamen und Parameter-IDs.</summary>
      <param name="rgszNames" vsli:raw="An array of names to map.">Ein Array von zuzuordnenden Namen.</param>
      <param name="cNames" vsli:raw="The count of names to map.">Die Anzahl der zuzuordnenden Namen.</param>
      <param name="pMemId" vsli:raw="When this method returns, contains a reference to an array in which name mappings are placed. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf ein Array mit Namenszuordnungen zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the implementation type of the custom data.">Ruft den Implementierungstyp der benutzerdefinierten Daten ab.</summary>
      <param name="index" vsli:raw="The index of the implementation type for the custom data.">Der Index des Implementierungstyps für die benutzerdefinierten Daten.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">Die zur Identifizierung der Daten verwendete GUID.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">Enthält nach Rückgabe dieser Methode ein <see langword="Object" />, das angibt, wo die abgerufenen Daten abgelegt werden sollen. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetImplTypeFlags(System.Int32,System.Runtime.InteropServices.ComTypes.IMPLTYPEFLAGS@)">
      <summary vsli:raw="Retrieves the &lt;see cref=&quot;T:System.Runtime.InteropServices.IMPLTYPEFLAGS&quot; /&gt; value for one implemented interface or base interface in a type description.">Ruft den <see cref="T:System.Runtime.InteropServices.IMPLTYPEFLAGS" />-Wert für eine einzelne implementierte Schnittstelle oder Basisschnittstelle in einer Typenbeschreibung ab.</summary>
      <param name="index" vsli:raw="The index of the implemented interface or base interface.">Der Index der implementierten Schnittstelle bzw. Basisschnittstelle.</param>
      <param name="pImplTypeFlags" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;IMPLTYPEFLAGS&quot; /&gt; enumeration. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die <see langword="IMPLTYPEFLAGS" />-Enumeration zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetMops(System.Int32,System.String@)">
      <summary vsli:raw="Retrieves marshaling information.">Ruft Marshallinformationen ab.</summary>
      <param name="memid" vsli:raw="The member ID that indicates which marshaling information is needed.">Die Member-ID, die angibt, welche Marshallinformationen erforderlich sind.</param>
      <param name="pBstrMops" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;opcode&quot; /&gt; string used in marshaling the fields of the structure described by the referenced type description, or returns &lt;see langword=&quot;null&quot; /&gt; if there is no information to return. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die <see langword="opcode" />-Zeichenfolge für das Marshallen der Felder in der Struktur zurück, die von der Typbeschreibung beschrieben wird, auf die verwiesen wird. Wenn jedoch keine zurückzugebenden Informationen vorhanden sind, wird <see langword="null" /> zurückgegeben. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetNames(System.Int32,System.String[],System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the variable with the specified member ID (or the name of the property or method and its parameters) that corresponds to the specified function ID.">Ruft die Variable mit der angegebenen Member-ID (oder den Namen der Eigenschaft bzw. Methode und deren Parameter) ab, die der angegebenen Funktions-ID entsprechen.</summary>
      <param name="memid" vsli:raw="The ID of the member whose name (or names) is to be returned.">ID des Members, dessen Name bzw. Namen zurückgegeben werden sollen.</param>
      <param name="rgBstrNames" vsli:raw="When this method returns, contains the name (or names) associated with the member. This parameter is passed uninitialized.">Diese Methode gibt den bzw. die dem Member zugeordneten Namen zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="cMaxNames" vsli:raw="The length of the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array.">Die Länge des <paramref name="rgBstrNames" />-Arrays.</param>
      <param name="pcNames" vsli:raw="When this method returns, contains the number of names in the &lt;paramref name=&quot;rgBstrNames&quot; /&gt; array. This parameter is passed uninitialized.">Diese Methode gibt die Anzahl der Namen im <paramref name="rgBstrNames" />-Array zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetParamCustData(System.Int32,System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the specified custom data parameter.">Ruft den angegebenen Parameter für benutzerdefinierte Daten ab.</summary>
      <param name="indexFunc" vsli:raw="The index of the function to get the custom data for.">Der Index der Funktion, für die die benutzerdefinierten Daten abgerufen werden sollen.</param>
      <param name="indexParam" vsli:raw="The index of the parameter of this function to get the custom data for.">Der Index des Parameters dieser Funktion, für die die benutzerdefinierten Daten abgerufen werden sollen.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">Die zur Identifizierung der Daten verwendete GUID.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">Enthält nach Rückgabe dieser Methode ein <see langword="Object" />, das angibt, wo die abgerufenen Daten abgelegt werden sollen. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the referenced type descriptions, if a type description references other type descriptions.">Ruft die Typbeschreibungen ab, auf die verwiesen wird, wenn eine Typbeschreibung auf andere Typbeschreibungen verweist.</summary>
      <param name="hRef" vsli:raw="A handle to the referenced type description to return.">Ein Handle für die zurückzugebende Typbeschreibung, auf die verwiesen wird.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains the referenced type description. This parameter is passed uninitialized.">Diese Methode gibt die Typbeschreibung zurück, auf die verwiesen wird. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetRefTypeOfImplType(System.Int32,System.Int32@)">
      <summary vsli:raw="Retrieves the type description of the implemented interface types, if a type description describes a COM class.">Ruft die Typbeschreibung der implementierten Schnittstellentypen ab, wenn eine Typbeschreibung eine COM-Klasse beschreibt.</summary>
      <param name="index" vsli:raw="The index of the implemented type whose handle is returned.">Der Index des implementierten Typs, dessen Handle zurückgegeben wird.</param>
      <param name="href" vsli:raw="When this method returns, contains a reference to a handle for the implemented interface. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf ein Handle für die implementierte Schnittstelle zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure that contains the attributes of the type description.">Ruft eine <see cref="T:System.Runtime.InteropServices.TYPEATTR" />-Struktur mit den Attributen der Typenbeschreibung ab.</summary>
      <param name="ppTypeAttr" vsli:raw="When this method returns, contains a reference to the structure that contains the attributes of this type description. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die Struktur zurück, die die Attribute dieser Typbeschreibung enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Retrieves the &lt;see langword=&quot;ITypeComp&quot; /&gt; interface for the type description, which enables a client compiler to bind to the type description's members.">Ruft die <see langword="ITypeComp" />-Schnittstelle für die Typenbeschreibung ab, sodass ein Clientcompiler eine Bindung an die Member der Typenbeschreibung vornehmen kann.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;ITypeComp&quot; /&gt; of the containing type library. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf <see langword="ITypeComp" /> der enthaltenden Typbibliothek zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeFlags(System.Int32@)">
      <summary vsli:raw="Returns the type flags without any allocations. This method returns a &lt;see langword=&quot;DWORD&quot; /&gt; type flag, which expands the type flags without growing the &lt;see langword=&quot;TYPEATTR&quot; /&gt; (type attribute).">Gibt die Typflags ohne Zuordnungen zurück. Diese Methode gibt ein <see langword="DWORD" />-Typflag zurück, das die Typflags ohne <see langword="TYPEATTR" />-Wachstum (Typattribut) erweitert.</summary>
      <param name="pTypeFlags" vsli:raw="When this method returns, contains a &lt;see langword=&quot;DWORD&quot; /&gt; reference to a &lt;see langword=&quot;TYPEFLAG&quot; /&gt;. This parameter is passed uninitialized.">Enthält nach dem Beenden der Methode einen <see langword="DWORD" />-Verweis auf ein <see langword="TYPEFLAG" />. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetTypeKind(System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Returns the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration quickly, without doing any allocations.">Gibt die <see langword="TYPEKIND" />-Enumeration schnell und ohne Zuordnungen zurück.</summary>
      <param name="pTypeKind" vsli:raw="When this method returns, contains a reference to a &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration. This parameter is passed uninitialized.">Enthält nach dem Beenden der Methode einen Verweis auf eine <see langword="TYPEKIND" />-Enumeration. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarCustData(System.Int32,System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the variable for the custom data.">Ruft die Variable für die benutzerdefinierten Daten ab.</summary>
      <param name="index" vsli:raw="The index of the variable to get the custom data for.">Der Index der Variablen, für die die benutzerdefinierten Daten abgerufen werden sollen.</param>
      <param name="guid" vsli:raw="The GUID used to identify the data.">Die zur Identifizierung der Daten verwendete GUID.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an &lt;see langword=&quot;Object&quot; /&gt; that specifies where to put the retrieved data. This parameter is passed uninitialized.">Enthält nach Rückgabe dieser Methode ein <see langword="Object" />, das angibt, wo die abgerufenen Daten abgelegt werden sollen. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarDesc(System.Int32,System.IntPtr@)">
      <summary vsli:raw="Retrieves a &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable.">Ruft eine <see langword="VARDESC" />-Struktur ab, die die angegebene Variable beschreibt.</summary>
      <param name="index" vsli:raw="The index of the variable description to return.">Der Index der zurückzugebenden Variablenbeschreibung.</param>
      <param name="ppVarDesc" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure that describes the specified variable. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die <see langword="VARDESC" />-Struktur zurück, die die angegebene Variable beschreibt. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.GetVarIndexOfMemId(System.Int32,System.Int32@)">
      <summary vsli:raw="Binds to a specific member based on a known &lt;see langword=&quot;DISPID&quot; /&gt;, where the member name is not known (for example, when binding to a default member).">Bindet – wo der Membername nicht bekannt ist – auf Basis einer bekannten <see langword="DISPID" /> an einen bestimmten Member (z.B. beim Binden an einen Standardmember).</summary>
      <param name="memid" vsli:raw="The member identifier.">Der Memberbezeichner.</param>
      <param name="pVarIndex" vsli:raw="When this method returns, contains an index of &lt;paramref name=&quot;memid&quot; /&gt;. This parameter is passed uninitialized.">Enthält nach Rückgabe dieser Methode einen <paramref name="memid" />-Index. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.Invoke(System.Object,System.Int32,System.Int16,System.Runtime.InteropServices.ComTypes.DISPPARAMS@,System.IntPtr,System.IntPtr,System.Int32@)">
      <summary vsli:raw="Invokes a method, or accesses a property of an object, that implements the interface described by the type description.">Ruft eine Methode auf bzw. greift auf die Eigenschaft eines Objekts zu, die bzw. das die von der Typenbeschreibung beschriebene Schnittstelle implementiert.</summary>
      <param name="pvInstance" vsli:raw="A reference to the interface described by this type description.">Ein Verweis auf die von dieser Typbeschreibung beschriebene Schnittstelle.</param>
      <param name="memid" vsli:raw="Identifier of the interface member.">Bezeichner des Schnittstellenmembers.</param>
      <param name="wFlags" vsli:raw="Flags describing the context of the invoke call.">Flags, die den Kontext des Invoke-Aufrufs beschreiben.</param>
      <param name="pDispParams" vsli:raw="A reference to a structure that contains an array of arguments, an array of DISPIDs for named arguments, and counts of the number of elements in each array.">Ein Verweis auf eine Struktur, die ein Array von Argumenten und ein Array von DISPIDs für benannte Argumente enthält und die Anzahl der Elemente in jedem Array zählt.</param>
      <param name="pVarResult" vsli:raw="A reference to the location at which the result is to be stored. If &lt;paramref name=&quot;wFlags&quot; /&gt; specifies &lt;see langword=&quot;DISPATCH_PROPERTYPUT&quot; /&gt; or &lt;see langword=&quot;DISPATCH_PROPERTYPUTREF&quot; /&gt;, &lt;paramref name=&quot;pVarResult&quot; /&gt; is ignored. Set to &lt;see langword=&quot;null&quot; /&gt; if no result is desired.">Ein Verweis auf den gewünschten Speicherort für das Ergebnis. Wenn <paramref name="wFlags" /><see langword="DISPATCH_PROPERTYPUT" /> oder <see langword="DISPATCH_PROPERTYPUTREF" /> angibt, wird <paramref name="pVarResult" /> ignoriert. Wenn kein Ergebnis erforderlich ist, wird dies auf <see langword="null" /> festgelegt.</param>
      <param name="pExcepInfo" vsli:raw="A pointer to an exception information structure, which is filled in only if &lt;see langword=&quot;DISP_E_EXCEPTION&quot; /&gt; is returned.">Ein Zeiger auf eine Struktur für Ausnahmeinformationen, die nur bei Rückgabe von <see langword="DISP_E_EXCEPTION" /> aufgefüllt wird.</param>
      <param name="puArgErr" vsli:raw="If &lt;see langword=&quot;Invoke&quot; /&gt; returns &lt;see langword=&quot;DISP_E_TYPEMISMATCH&quot; /&gt;, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates the index of the argument with incorrect type. If more than one argument returns an error, &lt;paramref name=&quot;puArgErr&quot; /&gt; indicates only the first argument with an error.">Wenn <see langword="Invoke" /><see langword="DISP_E_TYPEMISMATCH" /> zurückgibt, gibt <paramref name="puArgErr" /> den Index des Arguments an, das nicht den korrekten Typ besitzt. Wenn mehrere Argumente einen Fehler zurückgeben, gibt <paramref name="puArgErr" /> nur das erste Argument mit einem Fehler an.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseFuncDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">Gibt eine <see cref="T:System.Runtime.InteropServices.FUNCDESC" />-Struktur frei, die zuvor von der <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetFuncDesc(System.Int32,System.IntPtr@)" />-Methode zurückgegeben wurde.</summary>
      <param name="pFuncDesc" vsli:raw="A reference to the &lt;see langword=&quot;FUNCDESC&quot; /&gt; structure to release.">Ein Verweis auf die freizugebende <see langword="FUNCDESC" />-Struktur.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseTypeAttr(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEATTR&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)&quot; /&gt; method.">Gibt eine <see cref="T:System.Runtime.InteropServices.TYPEATTR" />-Struktur frei, die zuvor von der <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetTypeAttr(System.IntPtr@)" />-Methode zurückgegeben wurde.</summary>
      <param name="pTypeAttr" vsli:raw="A reference to the &lt;see langword=&quot;TYPEATTR&quot; /&gt; structure to release.">Ein Verweis auf die freizugebende <see langword="TYPEATTR" />-Struktur.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeInfo2.ReleaseVarDesc(System.IntPtr)">
      <summary vsli:raw="Releases a &lt;see langword=&quot;VARDESC&quot; /&gt; structure previously returned by the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)&quot; /&gt; method.">Gibt eine <see langword="VARDESC" />-Struktur frei, die zuvor von der <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeInfo.GetVarDesc(System.Int32,System.IntPtr@)" />-Methode zurückgegeben wurde.</summary>
      <param name="pVarDesc" vsli:raw="A reference to the &lt;see langword=&quot;VARDESC&quot; /&gt; structure to release.">Ein Verweis auf die freizugebende <see langword="VARDESC" />-Struktur.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;ITypeLib&quot; /&gt; interface.">Stellt die verwaltete Definition der <see langword="ITypeLib" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary vsli:raw="Finds occurrences of a type description in a type library.">Sucht in einer Typbibliothek nach dem Vorkommen einer Typenbeschreibung.</summary>
      <param name="szNameBuf" vsli:raw="The name to search for. This is an in/out parameter.">Der zu suchende Name. Dies ist ein In/Out-Parameter.</param>
      <param name="lHashVal" vsli:raw="A hash value to speed up the search, computed by the &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt; function. If &lt;paramref name=&quot;lHashVal&quot; /&gt; is 0, a value is computed.">Ein von der <see langword="LHashValOfNameSys" />-Funktion berechneter Hashwert zum Beschleunigen der Suche. Wenn <paramref name="lHashVal" /> 0 ist, wird ein Wert berechnet.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains an array of pointers to the type descriptions that contain the name specified in &lt;paramref name=&quot;szNameBuf&quot; /&gt;. This parameter is passed uninitialized.">Diese Methode gibt ein Array von Zeigern auf die Typenbeschreibungen zurück, die den in <paramref name="szNameBuf" /> angegebenen Namen enthalten. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="rgMemId" vsli:raw="An array of the &lt;see langword=&quot;MEMBERID&quot; /&gt; 's of the found items; &lt;paramref name=&quot;rgMemId&quot; /&gt; [i] is the &lt;see langword=&quot;MEMBERID&quot; /&gt; that indexes into the type description specified by &lt;paramref name=&quot;ppTInfo&quot; /&gt; [i]. Cannot be &lt;see langword=&quot;null&quot; /&gt;.">Ein Array von <see langword="MEMBERID" />s der gefundenen Elemente. <paramref name="rgMemId" />[i] ist die <see langword="MEMBERID" />, die eine Indizierung in der von <paramref name="ppTInfo" />[i] angegebenen Typenbeschreibung vornimmt. Darf nicht <see langword="null" /> sein.</param>
      <param name="pcFound" vsli:raw="On entry, indicates how many instances to look for. For example, &lt;paramref name=&quot;pcFound&quot; /&gt; = 1 can be called to find the first occurrence. The search stops when one instance is found.  &#xA;  &#xA; On exit, indicates the number of instances that were found. If the &lt;see langword=&quot;in&quot; /&gt; and &lt;see langword=&quot;out&quot; /&gt; values of &lt;paramref name=&quot;pcFound&quot; /&gt; are identical, there might be more type descriptions that contain the name.">Zeigt bei einem Eintrag die Anzahl der zu suchenden Instanzen an. Das erste Auftreten wird z. B. durch Aufrufen von <paramref name="pcFound" /> = 1 gesucht. Die Suche hält an, sobald eine Instanz gefunden wird.  
  
Gibt bei Beendigung der Suche die Anzahl der gefundenen Instanzen an. Wenn der <see langword="in" />-Wert und der <see langword="out" />-Wert von <paramref name="pcFound" /> identisch sind, ist der Name möglicherweise in mehreren Typbeschreibungen enthalten.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.">Ruft die Dokumentationszeichenfolge der Bibliothek, den vollständigen Namen und Pfad der Hilfedatei sowie den Kontextbezeichner des Hilfethemas für die Bibliothek in der Hilfedatei ab.</summary>
      <param name="index" vsli:raw="The index of the type description whose documentation is to be returned.">Der Index der Typenbeschreibung, deren Dokumentation zurückgegeben werden soll.</param>
      <param name="strName" vsli:raw="When this method returns, contains a string that represents the name of the specified item. This parameter is passed uninitialized.">Diese Methode gibt eine Zeichenfolge zurück, die den Namen des angegebenen Elements darstellt. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains a string that represents the documentation string for the specified item. This parameter is passed uninitialized.">Diese Methode gibt eine Zeichenfolge zurück, die die Dokumentationszeichenfolge des angegebenen Elements darstellt. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.">Diese Methode gibt den dem angegebenen Element zugeordneten Kontextbezeichner der Hilfe zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains a string that represents the fully qualified name of the Help file. This parameter is passed uninitialized.">Diese Methode gibt eine Zeichenfolge zurück, die den vollqualifizierten Namen der Hilfedatei darstellt. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves the structure that contains the library's attributes.">Ruft die Struktur mit den Attributen der Bibliothek ab.</summary>
      <param name="ppTLibAttr" vsli:raw="When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.">Diese Methode gibt eine Struktur zurück, die die Attribute der Bibliothek enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Enables a client compiler to bind to a library's types, variables, constants, and global functions.">Dadurch kann ein Clientcompiler Typen, Variablen, Konstanten und globale Funktionen einer Bibliothek binden.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains an instance of a &lt;see langword=&quot;ITypeComp&quot; /&gt; instance for this &lt;see langword=&quot;ITypeLib&quot; /&gt;. This parameter is passed uninitialized.">Diese Methode gibt eine Instanz einer <see langword="ITypeComp" />-Instanz für diesen <see langword="ITypeLib" /> zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the specified type description in the library.">Ruft die in der Bibliothek angegebene Typenbeschreibung ab.</summary>
      <param name="index" vsli:raw="The index of the &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface to return.">Der Index der zurückzugebenden <see langword="ITypeInfo" />-Schnittstelle.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeInfo&quot; /&gt; describing the type referenced by &lt;paramref name=&quot;index&quot; /&gt;. This parameter is passed uninitialized.">Diese Methode gibt eine <see langword="ITypeInfo" /> zurück, die den Typ beschreibt, auf den mit dem <paramref name="index" /> verwiesen wird. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoCount">
      <summary vsli:raw="Returns the number of type descriptions in the type library.">Gibt die Anzahl von Typenbeschreibungen in der Typbibliothek zurück.</summary>
      <returns vsli:raw="The number of type descriptions in the type library.">Die Anzahl von Typenbeschreibungen in der Typbibliothek.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the type description that corresponds to the specified GUID.">Ruft die Typenbeschreibung ab, die der angegebenen GUID entspricht.</summary>
      <param name="guid" vsli:raw="The IID of the interface or CLSID of the class whose type info is requested.">Die IID für die Schnittstelle oder CLSID für die Klasse, deren Typinformationen angefordert sind.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains the requested &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface. This parameter is passed uninitialized.">Diese Methode gibt die angeforderte <see langword="ITypeInfo" />-Schnittstelle zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Retrieves the type of a type description.">Ruft den Typ einer Typenbeschreibung ab.</summary>
      <param name="index" vsli:raw="The index of the type description within the type library.">Der Index der Typenbeschreibung in der Typbibliothek.</param>
      <param name="pTKind" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration for the type description. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die <see langword="TYPEKIND" />-Enumeration für die Typenbeschreibung zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.IsName(System.String,System.Int32)">
      <summary vsli:raw="Indicates whether a passed-in string contains the name of a type or member described in the library.">Gibt an, ob in einer übergebenen Zeichenfolge der Name eines in der Bibliothek beschriebenen Typs oder Members enthalten ist.</summary>
      <param name="szNameBuf" vsli:raw="The string to test. This is an in/out parameter.">Die zu testende Zeichenfolge. Dies ist ein In/Out-Parameter.</param>
      <param name="lHashVal" vsli:raw="The hash value of &lt;paramref name=&quot;szNameBuf&quot; /&gt;.">Der Hashwert von <paramref name="szNameBuf" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;szNameBuf&quot; /&gt; was found in the type library; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="szNameBuf" /> in der Typbibliothek gefunden wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib.ReleaseTLibAttr(System.IntPtr)">
      <summary vsli:raw="Releases the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPELIBATTR&quot; /&gt; structure originally obtained from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)&quot; /&gt; method.">Gibt die mithilfe der <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" />-Methode die ursprünglich abgerufene <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" />-Struktur frei.</summary>
      <param name="pTLibAttr" vsli:raw="The &lt;see langword=&quot;TLIBATTR&quot; /&gt; structure to release.">Die freizugebende <see langword="TLIBATTR" />-Struktur.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.ITypeLib2">
      <summary vsli:raw="Provides a managed definition of the &lt;see langword=&quot;ITypeLib2&quot; /&gt; interface.">Stellt eine verwaltete Definition der <see langword="ITypeLib2" />-Schnittstelle bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.FindName(System.String,System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo[],System.Int32[],System.Int16@)">
      <summary vsli:raw="Finds occurrences of a type description in a type library.">Sucht in einer Typbibliothek nach dem Vorkommen einer Typenbeschreibung.</summary>
      <param name="szNameBuf" vsli:raw="The name to search for.">Der zu suchende Name.</param>
      <param name="lHashVal" vsli:raw="A hash value to speed up the search, computed by the &lt;see langword=&quot;LHashValOfNameSys&quot; /&gt; function. If &lt;paramref name=&quot;lHashVal&quot; /&gt; is 0, a value is computed.">Ein von der <see langword="LHashValOfNameSys" />-Funktion berechneter Hashwert zum Beschleunigen der Suche. Wenn <paramref name="lHashVal" /> 0 ist, wird ein Wert berechnet.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains an array of pointers to the type descriptions that contain the name specified in &lt;paramref name=&quot;szNameBuf&quot; /&gt;. This parameter is passed uninitialized.">Diese Methode gibt ein Array von Zeigern auf die Typenbeschreibungen zurück, die den in <paramref name="szNameBuf" /> angegebenen Namen enthalten. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="rgMemId" vsli:raw="When this method returns, contains an array of the &lt;see langword=&quot;MEMBERID&quot; /&gt;s of the found items; &lt;paramref name=&quot;rgMemId&quot; /&gt; [i] is the &lt;see langword=&quot;MEMBERID&quot; /&gt; that indexes into the type description specified by &lt;paramref name=&quot;ppTInfo&quot; /&gt; [i]. This parameter cannot be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode ein Array von <see langword="MEMBERID" /> der gefundenen Elemente. <paramref name="rgMemId" />[i] ist die <see langword="MEMBERID" />, die eine Indizierung in der von <paramref name="ppTInfo" />[i] angegebenen Typenbeschreibung vornimmt. Dieser Parameter darf nicht <see langword="null" /> sein. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pcFound" vsli:raw="On entry, a value, passed by reference, that indicates how many instances to look for. For example, &lt;paramref name=&quot;pcFound&quot; /&gt; = 1 can be called to find the first occurrence. The search stops when one instance is found.  &#xA;  &#xA; On exit, indicates the number of instances that were found. If the &lt;see langword=&quot;in&quot; /&gt; and &lt;see langword=&quot;out&quot; /&gt; values of &lt;paramref name=&quot;pcFound&quot; /&gt; are identical, there might be more type descriptions that contain the name.">Zu Beginn ein als Verweis übergebener Wert, der angibt, wie viele Instanzen gesucht werden sollen. Das erste Auftreten wird z. B. durch Aufrufen von <paramref name="pcFound" /> = 1 gesucht. Die Suche hält an, sobald eine Instanz gefunden wird.  
  
Gibt bei Beendigung der Suche die Anzahl der gefundenen Instanzen an. Wenn der <see langword="in" />-Wert und der <see langword="out" />-Wert von <paramref name="pcFound" /> identisch sind, ist der Name möglicherweise in mehreren Typbeschreibungen enthalten.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetAllCustData(System.IntPtr)">
      <summary vsli:raw="Gets all custom data items for the library.">Ruft alle benutzerdefinierten Datenelemente für die Bibliothek ab.</summary>
      <param name="pCustData" vsli:raw="A pointer to &lt;see langword=&quot;CUSTDATA&quot; /&gt;, which holds all custom data items.">Ein Zeiger auf <see langword="CUSTDATA" />, der alle benutzerdefinierten Datenelemente enthält.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetCustData(System.Guid@,System.Object@)">
      <summary vsli:raw="Gets the custom data.">Ruft die benutzerdefinierten Daten ab.</summary>
      <param name="guid" vsli:raw="A &lt;see cref=&quot;T:System.Guid&quot; /&gt; , passed by reference, that is used to identify the data.">Eine <see cref="T:System.Guid" />, übergeben als Verweis, der verwendet wird, um die Daten zu identifizieren.</param>
      <param name="pVarVal" vsli:raw="When this method returns, contains an object that specifies where to put the retrieved data. This parameter is passed uninitialized.">Enthält nach Rückgabe dieser Methode ein Objekt, das angibt, wo die abgerufenen Daten abgelegt werden sollen. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation(System.Int32,System.String@,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, and the context identifier for the library Help topic in the Help file.">Ruft die Dokumentationszeichenfolge der Bibliothek, den vollständigen Namen und Pfad der Hilfedatei sowie den Kontextbezeichner des Hilfethemas für die Bibliothek in der Hilfedatei ab.</summary>
      <param name="index" vsli:raw="An index of the type description whose documentation is to be returned.">Ein Index der Typenbeschreibung, deren Dokumentation zurückgegeben werden soll.</param>
      <param name="strName" vsli:raw="When this method returns, contains a string that specifies the name of the specified item. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode eine Zeichenfolge, die den Namen des angegebenen Elements angibt. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="strDocString" vsli:raw="When this method returns, contains the documentation string for the specified item. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode die Dokumentationszeichenfolge für das angegebene Element. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="dwHelpContext" vsli:raw="When this method returns, contains the Help context identifier associated with the specified item. This parameter is passed uninitialized.">Diese Methode gibt den dem angegebenen Element zugeordneten Kontextbezeichner der Hilfe zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="strHelpFile" vsli:raw="When this method returns, contains a string that specifies the fully qualified name of the Help file. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode eine Zeichenfolge, die den vollqualifizierten Namen der Hilfedatei angibt. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetDocumentation2(System.Int32,System.String@,System.Int32@,System.String@)">
      <summary vsli:raw="Retrieves the library's documentation string, the complete Help file name and path, the localization context to use, and the context ID for the library Help topic in the Help file.">Ruft die Dokumentationszeichenfolge der Bibliothek, den vollständigen Dateinamen und Pfad der Hilfe, den zu verwendenden Lokalisierungskontext und die Kontext-ID des Hilfethemas der Bibliothek in der Hilfedatei ab.</summary>
      <param name="index" vsli:raw="An index of the type description whose documentation is to be returned; if &lt;paramref name=&quot;index&quot; /&gt; is -1, the documentation for the library is returned.">Ein Index der Typbeschreibung, deren Dokumentation zurückgegeben werden soll. Wenn <paramref name="index" /> -1 ist, wird die Dokumentation für die Bibliothek zurückgegeben.</param>
      <param name="pbstrHelpString" vsli:raw="When this method returns, contains a BSTR that specifies the name of the specified item. If the caller does not need the item name, &lt;paramref name=&quot;pbstrHelpString&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Enthält nach Rückgabe dieser Methode einen BSTR-Wert, der den Namen des angegebenen Elements angibt. Wenn der Aufrufer den Elementnamen nicht benötigt, kann <paramref name="pbstrHelpString" /> auch <see langword="null" /> sein. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pdwHelpStringContext" vsli:raw="When this method returns, contains the Help localization context. If the caller does not need the Help context, &lt;paramref name=&quot;pdwHelpStringContext&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Enthält nach Rückgabe dieser Methode den Lokalisierungskontext der Hilfe. Wenn der Aufrufer den Hilfekontext nicht benötigt, kann <paramref name="pdwHelpStringContext" /> auch <see langword="null" /> sein. Dieser Parameter wird nicht initialisiert übergeben.</param>
      <param name="pbstrHelpStringDll" vsli:raw="When this method returns, contains a BSTR that specifies the fully qualified name of the file containing the DLL used for Help file. If the caller does not need the file name, &lt;paramref name=&quot;pbstrHelpStringDll&quot; /&gt; can be &lt;see langword=&quot;null&quot; /&gt;. This parameter is passed uninitialized.">Enthält nach Rückgabe dieser Methode einen BSTR-Wert, der den vollqualifizierten Namen der Datei angibt, die die für die Hilfedatei verwendete DLL enthält. Wenn der Aufrufer den Dateinamen nicht benötigt, kann <paramref name="pbstrHelpStringDll" /> auch <see langword="null" /> sein. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibAttr(System.IntPtr@)">
      <summary vsli:raw="Retrieves the structure that contains the library's attributes.">Ruft die Struktur mit den Attributen der Bibliothek ab.</summary>
      <param name="ppTLibAttr" vsli:raw="When this method returns, contains a structure that contains the library's attributes. This parameter is passed uninitialized.">Diese Methode gibt eine Struktur zurück, die die Attribute der Bibliothek enthält. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetLibStatistics(System.IntPtr,System.Int32@)">
      <summary vsli:raw="Returns statistics about a type library that are required for efficient sizing of hash tables.">Gibt Statistiken über eine Typbibliothek zurück, die für die effiziente Größenanpassung von Hashtabellen erforderlich sind.</summary>
      <param name="pcUniqueNames" vsli:raw="A pointer to a count of unique names. If the caller does not need this information, set to &lt;see langword=&quot;null&quot; /&gt;.">Ein Zeiger auf eine Anzahl eindeutiger Namen. Wenn der Aufrufer diese Informationen nicht benötigt, kann der Wert auf <see langword="null" /> festgelegt werden.</param>
      <param name="pcchUniqueNames" vsli:raw="When this method returns, contains a pointer to a change in the count of unique names. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode einen Zeiger auf eine Änderung in der Anzahl der eindeutigen Namen. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeComp(System.Runtime.InteropServices.ComTypes.ITypeComp@)">
      <summary vsli:raw="Enables a client compiler to bind to a library's types, variables, constants, and global functions.">Dadurch kann ein Clientcompiler Typen, Variablen, Konstanten und globale Funktionen einer Bibliothek binden.</summary>
      <param name="ppTComp" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeComp&quot; /&gt; instance for this &lt;see langword=&quot;ITypeLib&quot; /&gt;. This parameter is passed uninitialized.">Enthält nach dem Beenden dieser Methode eine <see langword="ITypeComp" />-Instanz für diese <see langword="ITypeLib" />. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfo(System.Int32,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the specified type description in the library.">Ruft die in der Bibliothek angegebene Typenbeschreibung ab.</summary>
      <param name="index" vsli:raw="An index of the &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface to return.">Ein Index der zurückzugebenden <see langword="ITypeInfo" />-Schnittstelle.</param>
      <param name="ppTI" vsli:raw="When this method returns, contains an &lt;see langword=&quot;ITypeInfo&quot; /&gt; describing the type referenced by &lt;paramref name=&quot;index&quot; /&gt;. This parameter is passed uninitialized.">Diese Methode gibt eine <see langword="ITypeInfo" /> zurück, die den Typ beschreibt, auf den mit dem <paramref name="index" /> verwiesen wird. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoCount">
      <summary vsli:raw="Returns the number of type descriptions in the type library.">Gibt die Anzahl von Typenbeschreibungen in der Typbibliothek zurück.</summary>
      <returns vsli:raw="The number of type descriptions in the type library.">Die Anzahl von Typenbeschreibungen in der Typbibliothek.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoOfGuid(System.Guid@,System.Runtime.InteropServices.ComTypes.ITypeInfo@)">
      <summary vsli:raw="Retrieves the type description that corresponds to the specified GUID.">Ruft die Typenbeschreibung ab, die der angegebenen GUID entspricht.</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt;, passed by reference, that represents the IID of the &lt;see langword=&quot;CLSID&quot; /&gt; interface of the class whose type info is requested.">Die als Verweis übergebene <see cref="T:System.Guid" />, die die IID der <see langword="CLSID" />-Schnittstelle der Klasse darstellt, deren Typinformationen angefordert wurden.</param>
      <param name="ppTInfo" vsli:raw="When this method returns, contains the requested &lt;see langword=&quot;ITypeInfo&quot; /&gt; interface. This parameter is passed uninitialized.">Diese Methode gibt die angeforderte <see langword="ITypeInfo" />-Schnittstelle zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.GetTypeInfoType(System.Int32,System.Runtime.InteropServices.ComTypes.TYPEKIND@)">
      <summary vsli:raw="Retrieves the type of a type description.">Ruft den Typ einer Typenbeschreibung ab.</summary>
      <param name="index" vsli:raw="The index of the type description within the type library.">Der Index der Typenbeschreibung in der Typbibliothek.</param>
      <param name="pTKind" vsli:raw="When this method returns, contains a reference to the &lt;see langword=&quot;TYPEKIND&quot; /&gt; enumeration for the type description. This parameter is passed uninitialized.">Diese Methode gibt einen Verweis auf die <see langword="TYPEKIND" />-Enumeration für die Typenbeschreibung zurück. Dieser Parameter wird nicht initialisiert übergeben.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.IsName(System.String,System.Int32)">
      <summary vsli:raw="Indicates whether a passed-in string contains the name of a type or member described in the library.">Gibt an, ob in einer übergebenen Zeichenfolge der Name eines in der Bibliothek beschriebenen Typs oder Members enthalten ist.</summary>
      <param name="szNameBuf" vsli:raw="The string to test.">Die zu testende Zeichenfolge.</param>
      <param name="lHashVal" vsli:raw="The hash value of &lt;paramref name=&quot;szNameBuf&quot; /&gt;.">Der Hashwert von <paramref name="szNameBuf" />.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if &lt;paramref name=&quot;szNameBuf&quot; /&gt; was found in the type library; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn <paramref name="szNameBuf" /> in der Typbibliothek gefunden wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComTypes.ITypeLib2.ReleaseTLibAttr(System.IntPtr)">
      <summary vsli:raw="Releases the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPELIBATTR&quot; /&gt; structure originally obtained from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)&quot; /&gt; method.">Gibt die mithilfe der <see cref="T:System.Runtime.InteropServices.TYPELIBATTR" />-Methode die ursprünglich abgerufene <see cref="M:System.Runtime.InteropServices.ComTypes.ITypeLib.GetLibAttr(System.IntPtr@)" />-Struktur frei.</summary>
      <param name="pTLibAttr" vsli:raw="The &lt;see langword=&quot;TLIBATTR&quot; /&gt; structure to release.">Die freizugebende <see langword="TLIBATTR" />-Struktur.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.LIBFLAGS">
      <summary vsli:raw="Defines flags that apply to type libraries.">Definiert Flags für Typbibliotheken.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FCONTROL">
      <summary vsli:raw="The type library describes controls and should not be displayed in type browsers intended for nonvisual objects.">Die Typbibliothek beschreibt Steuerelemente und sollte nicht in Typbrowsern angezeigt werden, die für nichtvisuelle Objekte bestimmt sind.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHASDISKIMAGE">
      <summary vsli:raw="The type library exists in a persisted form on disk.">Die Typbibliothek steht auch dauerhaft auf der Festplatte zur Verfügung.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FHIDDEN">
      <summary vsli:raw="The type library should not be displayed to users, although its use is not restricted. The type library should be used by controls. Hosts should create a new type library that wraps the control with extended properties.">Die Typbibliothek sollte Benutzern nicht angezeigt werden, obwohl ihre Verwendung nicht eingeschränkt ist. Die Typbibliothek muss von Steuerelementen verwendet werden. Hosts müssen eine neue Typbibliothek erzeugen, die das Steuerelement mit erweiterten Eigenschaften umschließt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.LIBFLAGS.LIBFLAG_FRESTRICTED">
      <summary vsli:raw="The type library is restricted, and should not be displayed to users.">Die Typbibliothek unterliegt Beschränkungen und sollte Benutzern nicht angezeigt werden.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMDESC">
      <summary vsli:raw="Contains information about how to transfer a structure element, parameter, or function return value between processes.">Enthält Informationen zur Übertragung eines Strukturelements, Parameters oder Funktionsrückgabewerts zwischen Prozessen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.lpVarValue">
      <summary vsli:raw="Represents a pointer to a value that is being passed between processes.">Stellt einen Zeiger auf einen Wert dar, der zwischen Prozessen übergeben wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMDESC.wParamFlags">
      <summary vsli:raw="Represents bitmask values that describe the structure element, parameter, or return value.">Stellt Bitmaskenwerte dar, die das Strukturelement, den Parameter oder den Rückgabewert beschreiben.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.PARAMFLAG">
      <summary vsli:raw="Describes how to transfer a structure element, parameter, or function return value between processes.">Beschreibt die Übertragung eines Strukturelements, Parameters oder Funktionsrückgabewerts zwischen Prozessen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASCUSTDATA">
      <summary vsli:raw="The parameter has custom data.">Der Parameter enthält benutzerdefinierte Daten.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FHASDEFAULT">
      <summary vsli:raw="The parameter has default behaviors defined.">Für den Parameter sind Standardverhalten definiert.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FIN">
      <summary vsli:raw="The parameter passes information from the caller to the callee.">Der Parameter übergibt Informationen vom Aufrufer zum Aufgerufenen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FLCID">
      <summary vsli:raw="The parameter is the local identifier of a client application.">Der Parameter ist der lokale Bezeichner einer Clientanwendung.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOPT">
      <summary vsli:raw="The parameter is optional.">Der Parameter ist optional.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FOUT">
      <summary vsli:raw="The parameter returns information from the callee to the caller.">Der Parameter gibt Informationen vom Aufgerufenen zum Aufrufer zurück.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_FRETVAL">
      <summary vsli:raw="The parameter is the return value of the member.">Der Parameter ist der Rückgabewert des Members.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.PARAMFLAG.PARAMFLAG_NONE">
      <summary vsli:raw="Does not specify whether the parameter passes or receives information.">Es wird nicht angegeben, ob der Parameter Informationen weitergibt oder empfängt.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATDATA">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;STATDATA&quot; /&gt; structure.">Stellt die verwaltete Definition der <see langword="STATDATA" />-Struktur bereit.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advf">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.ADVF&quot; /&gt; enumeration value that determines when the advisory sink is notified of changes in the data.">Stellt den <see cref="T:System.Runtime.InteropServices.ComTypes.ADVF" />-Enumerationswert dar, der bestimmt, wann die Advise-Senke über Änderungen an den Daten benachrichtigt wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.advSink">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.IAdviseSink&quot; /&gt; interface that will receive change notifications.">Stellt die <see cref="T:System.Runtime.InteropServices.ComTypes.IAdviseSink" />-Schnittstelle dar, die Änderungsbenachrichtigungen empfängt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.connection">
      <summary vsli:raw="Represents the token that uniquely identifies the advisory connection. This token is returned by the method that sets up the advisory connection.">Stellt das Token dar, das die Advise-Verbindung eindeutig identifiziert. Dieses Token wird von der Methode zurückgegeben, die die Advise-Verbindung herstellt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATDATA.formatetc">
      <summary vsli:raw="Represents the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure for the data of interest to the advise sink. The advise sink receives notification of changes to the data specified by this &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.FORMATETC&quot; /&gt; structure.">Stellt die <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Struktur für die Daten dar, die die Advise-Senke benötigt. Die Advise-Senke empfängt Benachrichtigung über Änderungen an den von dieser <see cref="T:System.Runtime.InteropServices.ComTypes.FORMATETC" />-Struktur angegebenen Daten.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STATSTG">
      <summary vsli:raw="Contains statistical information about an open storage, stream, or byte-array object.">Enthält statistische Daten zu einem geöffneten Speicher-, Stream- oder Byte-Array-Objekt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.atime">
      <summary vsli:raw="Specifies the last access time for this storage, stream, or byte array.">Gibt für diesen Speicher, diesen Stream oder dieses Bytearray den Zeitpunkt des letzten Zugriffs an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.cbSize">
      <summary vsli:raw="Specifies the size, in bytes, of the stream or byte array.">Gibt die Größe des Streams oder Bytearrays in Bytes an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.clsid">
      <summary vsli:raw="Indicates the class identifier for the storage object.">Gibt den Klassenbezeichner für das Speicherobjekt an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.ctime">
      <summary vsli:raw="Indicates the creation time for this storage, stream, or byte array.">Gibt für diesen Speicher, diesen Stream oder dieses Bytearray den Erstellungszeitpunkt an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfLocksSupported">
      <summary vsli:raw="Indicates the types of region locking supported by the stream or byte array.">Gibt die vom Stream oder Bytearray unterstützten Arten der Bereichssperrung an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfMode">
      <summary vsli:raw="Indicates the access mode that was specified when the object was opened.">Gibt den beim Öffnen des Objekts angegebenen Zugriffsmodus an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.grfStateBits">
      <summary vsli:raw="Indicates the current state bits of the storage object (the value most recently set by the &lt;see langword=&quot;IStorage::SetStateBits&quot; /&gt; method).">Gibt die aktuellen Zustandsbits des Speicherobjekts an (der von der <see langword="IStorage::SetStateBits" />-Methode zuletzt festgelegte Wert).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.mtime">
      <summary vsli:raw="Indicates the last modification time for this storage, stream, or byte array.">Gibt für diesen Speicher, diesen Stream oder dieses Bytearray den Zeitpunkt der letzten Änderung an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.pwcsName">
      <summary vsli:raw="Represents a pointer to a null-terminated string containing the name of the object described by this structure.">Stellt einen Zeiger auf eine mit NULL endende Zeichenfolge dar, die den Namen des von dieser Struktur beschriebenen Objekts enthält.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.reserved">
      <summary vsli:raw="Reserved for future use.">Für zukünftige Verwendung reserviert.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STATSTG.type">
      <summary vsli:raw="Indicates the type of storage object, which is one of the values from the &lt;see langword=&quot;STGTY&quot; /&gt; enumeration.">Gibt den Typ des Speicherobjekts an, wobei es sich um einen der Werte der <see langword="STGTY" />-Enumeration handelt.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;STGMEDIUM&quot; /&gt; structure.">Stellt die verwaltete Definition der <see langword="STGMEDIUM" />-Struktur bereit.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease">
      <summary vsli:raw="Represents a pointer to an interface instance that allows the sending process to control the way the storage is released when the receiving process calls the &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; function. If &lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; uses default procedures to release the storage; otherwise, &lt;see langword=&quot;ReleaseStgMedium&quot; /&gt; uses the specified &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">Stellt einen Zeiger auf eine Schnittstelleninstanz dar, die dem sendenden Prozess das Steuern der Freigabe des Speichers ermöglicht, wenn der empfangende Prozess die <see langword="ReleaseStgMedium" />-Funktion aufruft. Wenn <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /><see langword="null" /> ist, verwendet <see langword="ReleaseStgMedium" /> Standardprozeduren für das Freigeben von Speicher, andernfalls verwendet <see langword="ReleaseStgMedium" /> die angegebene <see langword="IUnknown" />-Schnittstelle.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.tymed">
      <summary vsli:raw="Specifies the type of storage medium. The marshaling and unmarshaling routines use this value to determine which union member was used. This value must be one of the elements of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.TYMED&quot; /&gt; enumeration.">Gibt den Typ des Speichermediums an. Die Routinen für das Marshalling und Unmarshalling verwenden diesen Wert, um das verwendete Union-Element zu bestimmen. Dieser Wert muss eines der Elemente der <see cref="T:System.Runtime.InteropServices.ComTypes.TYMED" />-Enumeration sein.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.unionmember">
      <summary vsli:raw="Represents a handle, string, or interface pointer that the receiving process can use to access the data being transferred.">Stellt ein Handle, eine Zeichenfolge oder einen Schnittstellenzeiger dar, mit dem der empfangende Prozess auf die übertragenen Daten zuzugreifen kann.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.SYSKIND">
      <summary vsli:raw="Identifies the target operating system platform.">Gibt die Ziel-Betriebssystemplattform an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_MAC">
      <summary vsli:raw="The target operating system for the type library is Apple Macintosh. By default, all data fields are aligned on even-byte boundaries.">Das Zielbetriebssystem für die Typbibliothek ist Apple Macintosh. In der Standardeinstellung sind sämtliche Datenfelder an geraden Bytegrenzen ausgerichtet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN16">
      <summary vsli:raw="The target operating system for the type library is 16-bit Windows systems. By default, data fields are packed.">Die Typbibliothek ist für 16-Bit-Windows-Systeme bestimmt. In der Standardeinstellung sind die Datenfelder gepackt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN32">
      <summary vsli:raw="The target operating system for the type library is 32-bit Windows systems. By default, data fields are naturally aligned (for example, 2-byte integers are aligned on even-byte boundaries; 4-byte integers are aligned on quad-word boundaries, and so on).">Die Typbibliothek ist für 32-Bit-Windows-Systeme bestimmt. In der Standardeinstellung sind Datenfelder natürlich ausgerichtet (beispielsweise sind 2-Byte-Ganzzahlen an geraden Bytegrenzen ausgerichtet, 4-Byte-Ganzzahlen an Quad-Word-Grenzen usw.).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.SYSKIND.SYS_WIN64">
      <summary vsli:raw="The target operating system for the type library is 64-bit Windows systems.">Zielbetriebssystem für die Typbibliothek sind 64-Bit-Windows-Systeme.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYMED">
      <summary vsli:raw="Provides the managed definition of the &lt;see langword=&quot;TYMED&quot; /&gt; structure.">Stellt die verwaltete Definition der <see langword="TYMED" />-Struktur bereit.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ENHMF">
      <summary vsli:raw="The storage medium is an enhanced metafile. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteEnhMetaFile&quot; /&gt; to delete the bitmap.">Das Speichermedium ist eine erweiterte Metadatei. Wenn der <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />-Member aus <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /><see langword="null" /> ist, sollte der Zielprozess für das Löschen der Bitmap <see langword="DeleteEnhMetaFile" /> verwenden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_FILE">
      <summary vsli:raw="The storage medium is a disk file identified by a path. If the &lt;see langword=&quot;STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;OpenFile&quot; /&gt; to delete the file.">Das Speichermedium ist eine über einen Pfad gekennzeichnete Datenträgerdatei. Wenn der <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" />-Member aus <see langword="STGMEDIUM" /><see langword="null" /> ist, sollte der Zielprozess für das Löschen der Datei <see langword="OpenFile" /> verwenden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_GDI">
      <summary vsli:raw="The storage medium is a Graphics Device Interface (GDI) component (HBITMAP). If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteObject&quot; /&gt; to delete the bitmap.">Das Speichermedium ist eine GDI (Graphics Device Interface)-Komponente (HBITMAP). Wenn der <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />-Member aus <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /><see langword="null" /> ist, sollte der Zielprozess für das Löschen der Bitmap <see langword="DeleteObject" /> verwenden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_HGLOBAL">
      <summary vsli:raw="The storage medium is a global memory handle (HGLOBAL). Allocate the global handle with the GMEM_SHARE flag. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;GlobalFree&quot; /&gt; to release the memory.">Das Speichermedium ist ein globales Speicherhandle (HGLOBAL). Ordnen Sie das globale Handle dem GMEM_SHARE-Flag zu. Wenn der <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />-Member aus <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /><see langword="null" /> ist, sollte der Zielprozess für das Freigeben des Speichers <see langword="GlobalFree" /> verwenden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTORAGE">
      <summary vsli:raw="The storage medium is a storage component identified by an &lt;see langword=&quot;IStorage&quot; /&gt; pointer. The data is in the streams and storages contained by this &lt;see langword=&quot;IStorage&quot; /&gt; instance. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is not &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;IStorage::Release&quot; /&gt; to release the storage component.">Das Speichermedium ist eine durch einen <see langword="IStorage" />-Zeiger gekennzeichnete Speicherkomponente. Die Daten sind in den Streams und Speichern dieser <see langword="IStorage" />-Instanz enthalten. Wenn der <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />-Member aus <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> nicht <see langword="null" /> ist, sollte der Zielprozess für das Freigeben der Speicherkomponente <see langword="IStorage::Release" /> verwenden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_ISTREAM">
      <summary vsli:raw="The storage medium is a stream object identified by an &lt;see langword=&quot;IStream&quot; /&gt; pointer. Use &lt;see langword=&quot;ISequentialStream::Read&quot; /&gt; to read the data. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is not &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;IStream::Release&quot; /&gt; to release the stream component.">Das Speichermedium ist ein durch einen <see langword="IStream" />-Zeiger gekennzeichnetes Streamobjekt. Verwenden Sie zum Lesen der Daten <see langword="ISequentialStream::Read" />. Wenn der <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />-Member aus <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /> nicht <see langword="null" /> ist, sollte der Zielprozess für das Freigeben der Streamkomponente <see langword="IStream::Release" /> verwenden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_MFPICT">
      <summary vsli:raw="The storage medium is a metafile (HMETAFILE). Use the Windows or WIN32 functions to access the metafile's data. If the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComTypes.STGMEDIUM&quot; /&gt;&lt;see cref=&quot;F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease&quot; /&gt; member is &lt;see langword=&quot;null&quot; /&gt;, the destination process should use &lt;see langword=&quot;DeleteMetaFile&quot; /&gt; to delete the bitmap.">Das Speichermedium ist eine Metadatei (HMETAFILE). Verwenden Sie für den Zugriff auf die Daten der Metadatei die Windows- oder WIN32-Funktionen. Wenn der <see cref="T:System.Runtime.InteropServices.ComTypes.STGMEDIUM" />-Member aus <see cref="F:System.Runtime.InteropServices.ComTypes.STGMEDIUM.pUnkForRelease" /><see langword="null" /> ist, sollte der Zielprozess für das Löschen der Bitmap <see langword="DeleteMetaFile" /> verwenden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYMED.TYMED_NULL">
      <summary vsli:raw="No data is being passed.">Es werden keine Daten übergeben.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEATTR">
      <summary vsli:raw="Contains attributes of a &lt;see langword=&quot;UCOMITypeInfo&quot; /&gt;.">Enthält Attribute einer <see langword="UCOMITypeInfo" />.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbAlignment">
      <summary vsli:raw="Specifies the byte alignment for an instance of this type.">Gibt die Byteausrichtung für eine Instanz dieses Typs an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeInstance">
      <summary vsli:raw="The size of an instance of this type.">Die Größe einer Instanz dieses Typs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cbSizeVft">
      <summary vsli:raw="The size of this type's virtual method table (VTBL).">Die Größe der Tabelle virtueller Methoden (Virtual Methods Table, VTBL) dieses Typs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cFuncs">
      <summary vsli:raw="Indicates the number of functions on the interface this structure describes.">Gibt die Anzahl der Funktionen für die von dieser Struktur beschriebene Schnittstelle an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cImplTypes">
      <summary vsli:raw="Indicates the number of implemented interfaces on the interface this structure describes.">Gibt die Anzahl der implementierten Schnittstellen für die von dieser Struktur beschriebene Schnittstelle an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.cVars">
      <summary vsli:raw="Indicates the number of variables and data fields on the interface described by this structure.">Gibt die Anzahl der Variablen und Datenfelder für die von dieser Struktur beschriebene Schnittstelle an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.dwReserved">
      <summary vsli:raw="Reserved for future use.">Für zukünftige Verwendung reserviert.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.guid">
      <summary vsli:raw="The GUID of the type information.">Die GUID der Typinformationen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.idldescType">
      <summary vsli:raw="IDL attributes of the described type.">Die IDL-Attribute (Interface Definition Language) des beschriebenen Typs.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lcid">
      <summary vsli:raw="Locale of member names and documentation strings.">Gebietsschema der Membernamen und Dokumentationszeichenfolgen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.lpstrSchema">
      <summary vsli:raw="Reserved for future use.">Für zukünftige Verwendung reserviert.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.MEMBER_ID_NIL">
      <summary vsli:raw="A constant used with the &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.memidConstructor&quot; /&gt; and &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.memidDestructor&quot; /&gt; fields.">Eine mit dem <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidConstructor" />-Feld und dem <see cref="F:System.Runtime.InteropServices.TYPEATTR.memidDestructor" />-Feld verwendete Konstante.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidConstructor">
      <summary vsli:raw="ID of constructor, or &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL&quot; /&gt; if none.">ID des Konstruktors oder <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />, wenn nicht vorhanden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.memidDestructor">
      <summary vsli:raw="ID of destructor, or &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL&quot; /&gt; if none.">ID des Destruktors oder <see cref="F:System.Runtime.InteropServices.TYPEATTR.MEMBER_ID_NIL" />, wenn nicht vorhanden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.tdescAlias">
      <summary vsli:raw="If &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEATTR.typekind&quot; /&gt; == &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS&quot; /&gt;, specifies the type for which this type is an alias.">Wenn <see cref="F:System.Runtime.InteropServices.TYPEATTR.typekind" /> == <see cref="F:System.Runtime.InteropServices.TYPEKIND.TKIND_ALIAS" />: Gibt den Typ an, für den dieser Typ einen Alias darstellt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.typekind">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEKIND&quot; /&gt; value describing the type this information describes.">Ein <see cref="T:System.Runtime.InteropServices.TYPEKIND" />-Wert, der den Typ beschreibt, der durch diese Informationen beschrieben wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMajorVerNum">
      <summary vsli:raw="Major version number.">Hauptversionsnummer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wMinorVerNum">
      <summary vsli:raw="Minor version number.">Nebenversionsnummer.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEATTR.wTypeFlags">
      <summary vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; value describing this information.">Ein <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" />-Wert, der diese Informationen beschreibt.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEDESC">
      <summary vsli:raw="Describes the type of a variable, return type of a function, or the type of a function parameter.">Beschreibt den Typ einer Variablen, den Rückgabetyp einer Funktion oder den Typ eines Funktionsparameters.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.lpValue">
      <summary vsli:raw="If the variable is &lt;see langword=&quot;VT_SAFEARRAY&quot; /&gt; or &lt;see langword=&quot;VT_PTR&quot; /&gt;, the &lt;see langword=&quot;lpValue&quot; /&gt; field contains a pointer to a &lt;see langword=&quot;TYPEDESC&quot; /&gt; that specifies the element type.">Wenn die Variable <see langword="VT_SAFEARRAY" /> oder <see langword="VT_PTR" /> ist, enthält das <see langword="lpValue" />-Feld einen Zeiger auf den <see langword="TYPEDESC" />, mit dem der Elementtyp angegeben wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEDESC.vt">
      <summary vsli:raw="Indicates the variant type for the item described by this &lt;see langword=&quot;TYPEDESC&quot; /&gt;.">Gibt den Variant-Typ für das durch <see langword="TYPEDESC" /> beschriebene Element an.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEFLAGS">
      <summary vsli:raw="Defines the properties and attributes of a type description.">Definiert die Eigenschaften und Attribute einer Typbeschreibung.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAGGREGATABLE">
      <summary vsli:raw="The class supports aggregation.">Die Klasse unterstützt Aggregation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FAPPOBJECT">
      <summary vsli:raw="A type description that describes an &lt;see langword=&quot;Application&quot; /&gt; object.">Ein Typbeschreibung, die ein <see langword="Application" />-Objekt beschreibt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCANCREATE">
      <summary vsli:raw="Instances of the type can be created by &lt;see langword=&quot;ITypeInfo::CreateInstance&quot; /&gt;.">Instanzen des Typs können durch <see langword="ITypeInfo::CreateInstance" /> erstellt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FCONTROL">
      <summary vsli:raw="The type is a control from which other types will be derived and should not be displayed to users.">Der Typ ist ein Steuerelement, von dem andere Typen abgeleitet werden, und darf Benutzern nicht angezeigt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDISPATCHABLE">
      <summary vsli:raw="Indicates that the interface derives from &lt;see langword=&quot;IDispatch&quot; /&gt;, either directly or indirectly. This flag is computed; there is no Object Description Language for the flag.">Gibt an, dass die Schnittstelle direkt oder indirekt aus <see langword="IDispatch" /> abgeleitet ist. Dieses Flag ist berechnet. Für das Flag gibt es keine Objektbeschreibungssprache.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FDUAL">
      <summary vsli:raw="The interface supplies both &lt;see langword=&quot;IDispatch&quot; /&gt; and VTBL binding.">Die Schnittstelle stellt sowohl <see langword="IDispatch" /> als auch VTBL-Bindung bereit.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FHIDDEN">
      <summary vsli:raw="The type should not be displayed to browsers.">Der Typ darf in Browsern nicht angezeigt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FLICENSED">
      <summary vsli:raw="The type is licensed.">Der Typ ist lizenziert.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FNONEXTENSIBLE">
      <summary vsli:raw="The interface cannot add members at run time.">Die Schnittstelle kann zur Laufzeit keine Member hinzufügen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FOLEAUTOMATION">
      <summary vsli:raw="The types used in the interface are fully compatible with Automation, including VTBL binding support. Setting dual on an interface sets both this flag and the  &lt;see cref=&quot;F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL&quot; /&gt;. This flag is not allowed on dispinterfaces.">Die in der Schnittstelle verwendeten Typen sind vollständig automatisierungskompatibel, wobei die Unterstützung von VTBL-Bindung eingeschlossen ist. Durch das Festlegen einer Schnittstelle als dual wird sowohl dieses Flag als auch <see cref="F:System.Runtime.InteropServices.TYPEFLAGS.TYPEFLAG_FDUAL" /> festgelegt. Dieses Flag ist für Dispatchschnittstellen nicht zulässig.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPREDECLID">
      <summary vsli:raw="The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.">Der Typ ist vordefiniert. Die Clientanwendung erstellt automatisch eine einzelne Instanz des Objekts, das über dieses Attribut verfügt. Der Name der auf das Objekt zeigenden Variablen ist derselbe wie der Klassenname des Objekts.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FPROXY">
      <summary vsli:raw="Indicates that the interface will be using a proxy/stub dynamic link library. This flag specifies that the type library proxy should not be unregistered when the type library is unregistered.">Gibt an, dass die Schnittstelle eine Proxy-/Stub-Dynamic Link Library verwendet. Dieses Flag gibt an, dass die Registrierung des Proxys für die Typbibliothek nicht aufgehoben werden darf, wenn die Registrierung der Typbibliothek aufgehoben wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREPLACEABLE">
      <summary vsli:raw="The object supports &lt;see langword=&quot;IConnectionPointWithDefault&quot; /&gt;, and has default behaviors.">Das Objekt unterstützt <see langword="IConnectionPointWithDefault" /> und verfügt über Standardverhalten.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FRESTRICTED">
      <summary vsli:raw="Should not be accessible from macro languages. This flag is intended for system-level types or types that type browsers should not display.">Der Zugriff darf für Makrosprachen nicht möglich sein. Dieses Flag ist für Typen auf Systemebene oder für Typen bestimmt, die von Typenbrowsern nicht angezeigt werden sollen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEFLAGS.TYPEFLAG_FREVERSEBIND">
      <summary vsli:raw="Indicates base interfaces should be checked for name resolution before checking children, which is the reverse of the default behavior.">Gibt an, dass die Basisschnittstellen vor dem Überprüfen untergeordneter Elemente auf Namensauflösung geprüft werden sollen. Dies stellt die Umkehrung des Standardverhaltens dar.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPEKIND">
      <summary vsli:raw="Specifies various types of data and functions.">Gibt die verschiedenen Typen von Daten und Funktionen an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ALIAS">
      <summary vsli:raw="A type that is an alias for another type.">Ein Typ, der einen Alias für einen anderen Typ darstellt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_COCLASS">
      <summary vsli:raw="A set of implemented components interfaces.">Eine Gruppe von implementierten Komponentenschnittstellen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_DISPATCH">
      <summary vsli:raw="A set of methods and properties that are accessible through &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;. By default, dual interfaces return &lt;see langword=&quot;TKIND_DISPATCH&quot; /&gt;.">Eine Gruppe von Methoden und Eigenschaften, auf die über <see langword="IDispatch::Invoke" /> zugegriffen werden kann. In der Standardeinstellung geben duale Schnittstellen <see langword="TKIND_DISPATCH" /> zurück.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_ENUM">
      <summary vsli:raw="A set of enumerators.">Eine Gruppe von Enumeratoren.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_INTERFACE">
      <summary vsli:raw="A type that has virtual functions, all of which are pure.">Ein Typ, der über rein virtuelle Funktionen verfügt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MAX">
      <summary vsli:raw="End-of-enumeration marker.">Markierung für das Ende der Enumeration.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_MODULE">
      <summary vsli:raw="A module that can have only static functions and data (for example, a DLL).">Ein Modul, das nur statische Funktionen und Daten enthalten kann (z. B. eine DLL).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_RECORD">
      <summary vsli:raw="A structure with no methods.">Eine Struktur ohne Methoden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPEKIND.TKIND_UNION">
      <summary vsli:raw="A union of all members that have an offset of zero.">Eine Gesamtmenge aller Member, die einen Offset von 0 aufweisen.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.TYPELIBATTR">
      <summary vsli:raw="Identifies a particular type library and provides localization support for member names.">Gibt eine bestimmte Typbibliothek an und bietet Lokalisierungsunterstützung für Membernamen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.guid">
      <summary vsli:raw="Represents a globally unique library ID of a type library.">Stellt eine global eindeutige Bibliotheks-ID einer Typbibliothek dar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.lcid">
      <summary vsli:raw="Represents a locale ID of a type library.">Stellt eine Gebietsschema-ID einer Typbibliothek dar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.syskind">
      <summary vsli:raw="Represents the target hardware platform of a type library.">Stellt die Zielhardwareplattform für eine Typbibliothek dar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wLibFlags">
      <summary vsli:raw="Represents library flags.">Stellt Bibliotheksflags dar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMajorVerNum">
      <summary vsli:raw="Represents the major version number of a type library.">Stellt die Hauptversionsnummer einer Typbibliothek dar.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.TYPELIBATTR.wMinorVerNum">
      <summary vsli:raw="Represents the minor version number of a type library.">Stellt die Nebenversionsnummer einer Typbibliothek dar.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC">
      <summary vsli:raw="Describes a variable, constant, or data member.">Beschreibt eine Variable, Konstante oder einen Datenmember.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.desc">
      <summary vsli:raw="Contains information about a variable.">Enthält Informationen zu einer Variablen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.elemdescVar">
      <summary vsli:raw="Contains the variable type.">Der Typ des Containersteuerelements.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.lpstrSchema">
      <summary vsli:raw="This field is reserved for future use.">Dieses Feld ist für eine spätere Verwendung vorgesehen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.memid">
      <summary vsli:raw="Indicates the member ID of a variable.">Gibt die Member-ID einer Variablen an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.varkind">
      <summary vsli:raw="Defines how to marshal a variable.">Definiert, wie eine Variable gemarshallt wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.wVarFlags">
      <summary vsli:raw="Defines the properties of a variable.">Definiert die Eigenschaften einer Variablen.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION">
      <summary vsli:raw="Contains information about a variable.">Enthält Informationen zu einer Variablen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.lpvarValue">
      <summary vsli:raw="Describes a symbolic constant.">Beschreibt eine symbolische Konstante.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARDESC.DESCUNION.oInst">
      <summary vsli:raw="Indicates the offset of this variable within the instance.">Gibt den Offset dieser Variablen in der Instanz an.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARFLAGS">
      <summary vsli:raw="Identifies the constants that define the properties of a variable.">Gibt die Konstanten an, die die Eigenschaften einer Variablen definieren.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FBINDABLE">
      <summary vsli:raw="The variable supports data binding.">Die Variable unterstützt die Datenbindung.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTBIND">
      <summary vsli:raw="The variable is the single property that best represents the object. Only one variable in type information can have this attribute.">Die Variable ist die einzelne Eigenschaft, die das Objekt am besten darstellt. Nur eine Variable in den Typinformationen kann über dieses Attribut verfügen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDEFAULTCOLLELEM">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type of &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function. Permitted on members in dispinterfaces and interfaces; not permitted on modules.">Lässt eine Optimierung zu, bei der der Compiler im Typ "abc" nach dem Member "xyz" sucht. Wenn ein solcher Member gefunden und als Accessorfunktion für ein Element der Standardauflistung markiert wird, wird ein Aufruf dieser Memberfunktion generiert. Zulässig für Member an Dispatchschnittstellen und Schnittstellen, nicht zulässig für Module.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FDISPLAYBIND">
      <summary vsli:raw="The variable is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE&quot; /&gt; must also be set.">Die dem Benutzer als bindungsfähig angezeigte Variable. <see cref="F:System.Runtime.InteropServices.VARFLAGS.VARFLAG_FBINDABLE" /> muss auch festgelegt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FHIDDEN">
      <summary vsli:raw="The variable should not be displayed to the user in a browser, although it exists and is bindable.">Die Variable darf dem Benutzer nicht in einem Browser angezeigt werden, obwohl sie vorhanden und bindbar ist.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FIMMEDIATEBIND">
      <summary vsli:raw="The variable is mapped as individual bindable properties.">Die Variable wird als einzelne Eigenschaft zugeordnet, die gebunden werden kann.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FNONBROWSABLE">
      <summary vsli:raw="The variable appears in an object browser, but not in a properties browser.">Die Variable wird in einem Objektkatalog, jedoch nicht in einem Eigenschaftenbrowser angezeigt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREADONLY">
      <summary vsli:raw="Assignment to the variable should not be allowed.">Zuweisungen zur Variablen sollten nicht zulässig sein.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREPLACEABLE">
      <summary vsli:raw="Tags the interface as having default behaviors.">Markiert die Schnittstelle als Schnittstelle mit Standardverhalten.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FREQUESTEDIT">
      <summary vsli:raw="When set, any attempt to directly change the property results in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;. The implementation of &lt;see langword=&quot;OnRequestEdit&quot; /&gt; determines if the change is accepted.">Bei Festlegung hat jeder Versuch einer direkten Änderung der Eigenschaft einen Aufruf von <see langword="IPropertyNotifySink::OnRequestEdit" /> zur Folge. Die Implementierung von <see langword="OnRequestEdit" /> bestimmt, ob die Änderung angenommen wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FRESTRICTED">
      <summary vsli:raw="The variable should not be accessible from macro languages. This flag is intended for system-level variables or variables that you do not want type browsers to display.">Der Zugriff auf die Variable durch Makrosprachen darf nicht möglich sein. Dieses Flag ist für Variablen auf Systemebene oder für Variablen bestimmt, die von Typbrowsern nicht angezeigt werden sollen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FSOURCE">
      <summary vsli:raw="The variable returns an object that is a source of events.">Die Variable gibt ein Objekt zurück, das eine Ereignisquelle ist.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARFLAGS.VARFLAG_FUIDEFAULT">
      <summary vsli:raw="The variable is the default display in the user interface.">Die Variable ist die Standardanzeige auf der Benutzeroberfläche.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComTypes.VARKIND">
      <summary vsli:raw="Defines the kind of variable.">Definiert die Art der Variablen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_CONST">
      <summary vsli:raw="The &lt;see langword=&quot;VARDESC&quot; /&gt; structure describes a symbolic constant. There is no memory associated with it.">Die <see langword="VARDESC" />-Struktur beschreibt eine symbolische Konstante. Es gibt keinen ihr zugeordneten Arbeitsspeicher.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_DISPATCH">
      <summary vsli:raw="The variable can be accessed only through &lt;see langword=&quot;IDispatch::Invoke&quot; /&gt;.">Auf die Variable kann nur anhand von <see langword="IDispatch::Invoke" /> zugegriffen werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_PERINSTANCE">
      <summary vsli:raw="The variable is a field or member of the type. It exists at a fixed offset within each instance of the type.">Die Variable ist ein Feld oder ein Member des Typs. Sie ist bei einem festen Offset innerhalb jeder Instanz des Typs vorhanden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComTypes.VARKIND.VAR_STATIC">
      <summary vsli:raw="There is only one instance of the variable.">Es gibt nur eine Instanz der Variable.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute">
      <summary vsli:raw="Specifies the method to call when you unregister an assembly for use from COM; this allows for the execution of user-written code during the unregistration process.">Gibt die Methode an, die beim Aufheben der Registrierung einer Assembly für die Verwendung durch COM aufgerufen werden muss. Dadurch kann während des Aufhebens der Registrierung vom Benutzer erstellter Code ausgeführt werden.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComUnregisterFunctionAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ComUnregisterFunctionAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers">
      <summary vsli:raw="Class for managing wrappers of COM IUnknown types.">Klasse zum Verwalten von Wrappern von COM-IUnknown-Typen.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.#ctor">
      <summary vsli:raw="Instance constructor.">Instanzenkonstruktor.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ComputeVtables(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags,System.Int32@)">
      <summary vsli:raw="Computes the desired Vtable for &lt;paramref name=&quot;obj&quot; /&gt;, respecting the values of &lt;paramref name=&quot;flags&quot; /&gt;.">Berechnet die gewünschte VTable für <paramref name="obj" />, wobei die Werte von <paramref name="flags" /> beachtet werden.</summary>
      <param name="obj" vsli:raw="Target of the returned Vtables.">Ziel der zurückgegebenen VTables.</param>
      <param name="flags" vsli:raw="Flags used to compute Vtables.">Flags, die zum Berechnen von VTables verwendet werden.</param>
      <param name="count" vsli:raw="The number of elements contained in the returned memory.">Die Anzahl der Elemente, die im zurückgegebenen Arbeitsspeicher enthalten sind.</param>
      <returns vsli:raw="&lt;see cref=&quot;T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry&quot; /&gt; pointer containing memory for all COM interface entries.">
        <see cref="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry" />-Zeiger, der den Arbeitsspeicher für alle COM-Schnittstelleneinträge enthält.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.CreateObject(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)">
      <summary vsli:raw="Creates a managed object for the object that &lt;paramref name=&quot;externalComObject&quot; /&gt; points to, respecting the values of &lt;paramref name=&quot;flags&quot; /&gt;.">Erstellt ein verwaltetes Objekt für das Objekt, auf das <paramref name="externalComObject" /> verweist, wobei die Werte von <paramref name="flags" /> beachtet werden.</summary>
      <param name="externalComObject" vsli:raw="Object to import for usage into the .NET runtime.">Objekt, das zur Verwendung in der .NET-Runtime importiert werden soll.</param>
      <param name="flags" vsli:raw="Flags used to describe the external object.">Flags, die zum Beschreiben des externen Objekts verwendet werden.</param>
      <returns vsli:raw="A managed object associated with the supplied external COM object.">Ein verwaltetes Objekt, das dem bereitgestellten externen COM-Objekt zugeordnet ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetIUnknownImpl(System.IntPtr@,System.IntPtr@,System.IntPtr@)">
      <summary vsli:raw="Gets the runtime-provided IUnknown implementation.">Ruft die von der Runtime bereitgestellte IUnknown-Implementierung ab.</summary>
      <param name="fpQueryInterface" vsli:raw="Function pointer to QueryInterface.">Funktionszeiger auf QueryInterface.</param>
      <param name="fpAddRef" vsli:raw="Function pointer to AddRef.">Funktionszeiger auf AddRef.</param>
      <param name="fpRelease" vsli:raw="Function pointer to Release.">Funktionszeiger auf Release.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)">
      <summary vsli:raw="Creates a COM representation of the supplied object that can be passed to a non-managed environment.">Erstellt eine COM-Darstellung des angegebenen Objekts, die an eine nicht verwaltete Umgebung übergeben werden kann.</summary>
      <param name="instance" vsli:raw="The managed object to expose outside the .NET runtime.">Das verwaltete Objekt, das außerhalb der .NET-Runtime verfügbar gemacht werden soll.</param>
      <param name="flags" vsli:raw="Flags used to configure the generated interface.">Flags, die zum Konfigurieren der generierten Schnittstelle verwendet werden.</param>
      <returns vsli:raw="The generated COM interface, as a pointer to the &lt;code&gt;IUnknown&lt;/code&gt; interface implementation, that can be passed outside the .NET runtime.">Die generierte COM-Schnittstelle, die außerhalb der .NET-Runtime übergeben werden kann.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)">
      <summary vsli:raw="Gets the currently registered managed object or creates a new managed object and registers it.">Ruft das derzeit registrierte verwaltete Objekt ab oder erstellt ein neues verwaltetes Objekt und registriert es.</summary>
      <param name="externalComObject" vsli:raw="Object to import for usage into the .NET runtime.">Objekt, das zur Verwendung in der .NET-Runtime importiert werden soll.</param>
      <param name="flags" vsli:raw="Flags used to describe the external object.">Flags, die zum Beschreiben des externen Objekts verwendet werden.</param>
      <returns vsli:raw="A managed object associated with the supplied external COM object.">Ein verwaltetes Objekt, das dem bereitgestellten externen COM-Objekt zugeordnet ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.GetOrRegisterObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags,System.Object)">
      <summary vsli:raw="Gets the currently registered managed object or uses the supplied managed object and registers it.">Ruft das derzeit registrierte verwaltete Objekt ab oder verwendet das angegebene verwaltete Objekt und registriert es.</summary>
      <param name="externalComObject" vsli:raw="Object to import for usage into the .NET runtime.">Objekt, das zur Verwendung in der .NET-Runtime importiert werden soll.</param>
      <param name="flags" vsli:raw="Flags used to describe the external object.">Flags, die zum Beschreiben des externen Objekts verwendet werden.</param>
      <param name="wrapper" vsli:raw="The object to use as the wrapper for the external object.">Das Objekt, das als Wrapper für das externe Objekt verwendet werden soll.</param>
      <exception cref="T:System.NotSupportedException" vsli:raw="The wrapper instance is already associated with an external object.">Die Wrapperinstanz ist bereits einem externen Objekt zugeordnet.</exception>
      <returns vsli:raw="A managed object associated with the supplied external COM object.">Ein verwaltetes Objekt, das dem bereitgestellten externen COM-Objekt zugeordnet ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.RegisterForMarshalling(System.Runtime.InteropServices.ComWrappers)">
      <summary vsli:raw="Registers a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComWrappers&quot; /&gt; instance to be used as the global instance for marshalling in the runtime.">Registriert eine <see cref="T:System.Runtime.InteropServices.ComWrappers" />-Instanz, die als globale Instanz für das Marshalling in der Runtime verwendet werden soll.</summary>
      <param name="instance" vsli:raw="The instance to register.">Die zu registrierende Instanz.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method was called more than once.">Die Methode wurde mehrmals aufgerufen.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.RegisterForTrackerSupport(System.Runtime.InteropServices.ComWrappers)">
      <summary vsli:raw="Registers a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComWrappers&quot; /&gt; instance to be used as the global instance for reference tracker support.">Registriert eine <see cref="T:System.Runtime.InteropServices.ComWrappers" />-Instanz, die als globale Instanz zur Unterstützung der Verweisnachverfolgung verwendet werden soll.</summary>
      <param name="instance" vsli:raw="The instance to register.">Die zu registrierende Instanz.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The method was called more than once.">Die Methode wurde mehrmals aufgerufen.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ReleaseObjects(System.Collections.IEnumerable)">
      <summary vsli:raw="Releases a collection of objects outside of the normal object or COM interface lifetime.">Gibt eine Objektsammlung außerhalb der normalen Lebensdauer für Objekte oder COM-Schnittstellen frei.</summary>
      <param name="objects" vsli:raw="Collection of objects to release.">Sammlung der Objekte, die freigegeben werden sollen.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch">
      <summary vsli:raw="An application binary interface for function dispatch of a COM interface.">Eine Anwendungsbinärschnittstelle für das Funktionsdispatching einer COM-Schnittstelle.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.Vtable">
      <summary vsli:raw="Field that represents the virtual function table (vtable) in the IUnknown instance layout.">Feld, das die virtuelle Funktionstabelle (VTable) im IUnknown-Instanzlayout darstellt.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch.GetInstance``1(System.Runtime.InteropServices.ComWrappers.ComInterfaceDispatch*)">
      <summary vsli:raw="Given an &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; from a generated Vtable, converts it to the target type.">Wenn <see cref="T:System.IntPtr" /> aus einer generierten VTable vorhanden ist, wird das Element in den Zieltyp konvertiert.</summary>
      <param name="dispatchPtr" vsli:raw="Pointer to Vtable function entry.">Zeiger auf den VTable-Funktionseintrag.</param>
      <typeparam name="T" vsli:raw="Desired type.">Gewünschter Typ.</typeparam>
      <returns vsli:raw="An instance of the type associated with the dispatched function call.">Eine Instanz des Typs, der dem verteilten Funktionsaufruftyp zugeordnet ist.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry">
      <summary vsli:raw="Interface type and pointer to targeted VTable.">Schnittstellentyp und Zeiger auf VTable-Ziel.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry.IID">
      <summary vsli:raw="Interface identifier.">Schnittstellenkennung.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.ComWrappers.ComInterfaceEntry.Vtable">
      <summary vsli:raw="A pointer to the virtual lookup table of functions.">Ein Zeiger auf die virtuelle Suchtabelle für Funktionen.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CreateComInterfaceFlags">
      <summary vsli:raw="Specifies flags for the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)&quot; /&gt; method.">Gibt Flags für die <see cref="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateComInterfaceForObject(System.Object,System.Runtime.InteropServices.CreateComInterfaceFlags)" />-Methode an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.CallerDefinedIUnknown">
      <summary vsli:raw="&lt;para&gt;The caller will provide an IUnknown Vtable.&lt;/para&gt;&lt;para&gt;This flag is useful in scenarios when the caller has no need to rely on an IUnknown instance that's used when it's not possible to run managed code (that is, during a garbage collection). This is common in traditional COM scenarios, but scenarios where Reference Tracker hosting calls the IUnknown API during a garbage collection are possible.&lt;/para&gt;">Der Aufrufer stellt eine IUnknown-VTable bereit.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.None">
      <summary vsli:raw="Flag used to indicate no flags set.">Flag, das angibt, dass keine Flags festgelegt sind.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateComInterfaceFlags.TrackerSupport">
      <summary vsli:raw="&lt;para&gt;Flag used to indicate the COM interface should implement IReferenceTrackerTarget.&lt;/para&gt;&lt;para&gt;When this flag is passed, the resulting COM interface will have an internal implementation of IUnknown, therefore, none should be supplied by the caller.&lt;/para&gt;">Flag, mit dem angegeben wird, dass die COM-Schnittstelle IReferenceTrackerTarget implementieren soll.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CreateObjectFlags">
      <summary vsli:raw="Specifies flags for the &lt;see cref=&quot;M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)&quot; /&gt; method.">Gibt Flags für die <see cref="M:System.Runtime.InteropServices.ComWrappers.GetOrCreateObjectForComInstance(System.IntPtr,System.Runtime.InteropServices.CreateObjectFlags)" />-Methode an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.None">
      <summary vsli:raw="Flag used to indicate no flags set.">Flag, das angibt, dass keine Flags festgelegt sind.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.TrackerObject">
      <summary vsli:raw="Indicates that the supplied external COM object implements the IReferenceTracker.">Gibt an, dass das angegebene externe COM-Objekt IReferenceTracker implementiert.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CreateObjectFlags.UniqueInstance">
      <summary vsli:raw="Indicates to ignore internal caching and always create a unique instance.">Gibt an, dass das interne Caching ignoriert werden soll, und erstellt immer eine eindeutige Instanz.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CurrencyWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_CY&quot; /&gt;.">Erstellt einen Wrapper für Objekte, die der Marshaller als <see langword="VT_CY" /> marshallen soll.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Decimal)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CurrencyWrapper&quot; /&gt; class with the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" />-Klasse mit dem <see langword="Decimal" />, das umfasst und als Typ <see langword="VT_CY" /> gemarshallt werden soll.</summary>
      <param name="obj" vsli:raw="The &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as &lt;see langword=&quot;VT_CY&quot; /&gt;.">Das <see langword="Decimal" />, das umfasst und als <see langword="VT_CY" /> gemarshallt werden soll.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.CurrencyWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CurrencyWrapper&quot; /&gt; class with the object containing the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.CurrencyWrapper" />-Klasse mit dem Objekt, das das <see langword="Decimal" /> enthält, das umfasst und als Typ <see langword="VT_CY" /> gemarshallt werden soll.</summary>
      <param name="obj" vsli:raw="The object containing the &lt;see langword=&quot;Decimal&quot; /&gt; to be wrapped and marshaled as &lt;see langword=&quot;VT_CY&quot; /&gt;.">Das Objekt, das das <see langword="Decimal" /> enthält, das umfasst und als <see langword="VT_CY" /> gemarshallt werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter is not a &lt;see cref=&quot;T:System.Decimal&quot; /&gt; type.">Der <paramref name="obj" />-Parameter ist kein <see cref="T:System.Decimal" />-Typ.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.CurrencyWrapper.WrappedObject">
      <summary vsli:raw="Gets the wrapped object to be marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">Ruft das umfasste Objekt ab, das als Typ <see langword="VT_CY" /> gemarshallt werden soll.</summary>
      <returns vsli:raw="The wrapped object to be marshaled as type &lt;see langword=&quot;VT_CY&quot; /&gt;.">Das umfasste Objekt, das als Typ <see langword="VT_CY" /> gemarshallt werden soll.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceMode">
      <summary vsli:raw="Indicates whether the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)&quot; /&gt; method's IUnknown::QueryInterface calls can use the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface.">Gibt an, ob IUnknown::QueryInterface-Aufrufe der <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" />-Methode die <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" />-Schnittstelle verwenden können.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Allow">
      <summary vsli:raw="IUnknown::QueryInterface method calls can use the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface. When you use this value, the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)&quot; /&gt; method overload functions like the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)&quot; /&gt; overload.">IUnknown::QueryInterface-Methodenaufrufe können die Schnittstelle <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> verwenden. Wenn Sie diesen Wert verwenden, funktioniert die <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)" />-Methodenüberladung wie die <see cref="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)" />-Überladung.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceMode.Ignore">
      <summary vsli:raw="IUnknown::QueryInterface method calls should ignore the &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt; interface.">IUnknown::QueryInterface-Methodenaufrufe sollten die Schnittstelle <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> ignorieren.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.CustomQueryInterfaceResult">
      <summary vsli:raw="Provides return values for the &lt;see cref=&quot;M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)&quot; /&gt; method.">Stellt Rückgabewerte für die <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" />-Methode bereit.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Failed">
      <summary vsli:raw="The interface for a specific interface ID is not available. In this case, the returned interface is &lt;see langword=&quot;null&quot; /&gt;. E_NOINTERFACE is returned to the caller of IUnknown::QueryInterface.">Die Schnittstelle für eine bestimmte Schnittstellen-ID ist nicht verfügbar. In diesem Fall ist die zurückgegebene Schnittstelle <see langword="null" />. E_NOINTERFACE wird an den Aufrufer von IUnknown::QueryInterface zurückgegeben.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.Handled">
      <summary vsli:raw="The interface pointer that is returned from the &lt;see cref=&quot;M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)&quot; /&gt; method can be used as the result of IUnknown::QueryInterface.">Der Schnittstellenzeiger, der von der <see cref="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)" />-Methode zurückgegeben wird, kann als Ergebnis von IUnknown::QueryInterface verwendet werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.CustomQueryInterfaceResult.NotHandled">
      <summary vsli:raw="The custom &lt;see langword=&quot;QueryInterface&quot; /&gt; was not used. Instead, the default implementation of IUnknown::QueryInterface should be used.">Die benutzerdefinierte <see langword="QueryInterface" /> wurde nicht verwendet. Stattdessen sollte die Standardimplementierung von IUnknown::QueryInterface verwendet werden.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultCharSetAttribute">
      <summary vsli:raw="Specifies the value of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; enumeration. This class cannot be inherited.">Gibt den Wert der <see cref="T:System.Runtime.InteropServices.CharSet" />-Enumeration an. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultCharSetAttribute.#ctor(System.Runtime.InteropServices.CharSet)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultCharSetAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; value.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.DefaultCharSetAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.CharSet" />-Wert.</summary>
      <param name="charSet" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; values.">Einer der <see cref="T:System.Runtime.InteropServices.CharSet" />-Werte.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultCharSetAttribute.CharSet">
      <summary vsli:raw="Gets the default value of &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; for any call to &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt;.">Ruft den Standardwert von <see cref="T:System.Runtime.InteropServices.CharSet" /> für jeden Aufruf von <see cref="T:System.Runtime.InteropServices.DllImportAttribute" /> ab.</summary>
      <returns vsli:raw="The default value of &lt;see cref=&quot;T:System.Runtime.InteropServices.CharSet&quot; /&gt; for any call to &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt;.">Der Standardwert von <see cref="T:System.Runtime.InteropServices.CharSet" /> für jeden Aufruf von <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute">
      <summary vsli:raw="Specifies the paths that are used to search for DLLs that provide functions for platform invokes.">Gibt die Pfade an, die bei der Suche nach DLLs verwendet werden, die Funktionen für Plattformaufrufe bereitstellen.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.#ctor(System.Runtime.InteropServices.DllImportSearchPath)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; class, specifying the paths to use when searching for the targets of platform invokes.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />-Klasse und gibt die Pfade an, die bei der Suche nach den Zielen von Plattformaufrufen zu verwenden sind.</summary>
      <param name="paths" vsli:raw="A bitwise combination of enumeration values that specify the paths that the &lt;c&gt;LoadLibraryEx&lt;/c&gt; function searches during platform invokes.">Eine bitweise Kombination von Enumerationswerten, die die Pfade angeben, welche die <c>LoadLibraryEx</c>-Funktion während der Plattformaufrufe durchsuchen soll.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute.Paths">
      <summary vsli:raw="Gets a bitwise combination of enumeration values that specify the paths that the &lt;c&gt;LoadLibraryEx&lt;/c&gt; function searches during platform invokes.">Ruft eine bitweise Kombination von Enumerationswerten ab, die die Pfade angeben, welche die <c>LoadLibraryEx</c>-Funktion während der Plattformaufrufe durchsuchen soll.</summary>
      <returns vsli:raw="A bitwise combination of enumeration values that specify search paths for platform invokes.">Eine bitweise Kombination von Enumerationswerten, die Suchpfade für Plattformaufrufe angeben.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DefaultParameterValueAttribute">
      <summary vsli:raw="Sets the default value of a parameter when called from a language that supports default parameters. This class cannot be inherited.">Legt den Standardwert eines Parameters fest, wenn dieser mit einer Sprache aufgerufen wird, die Standardparameter unterstützt. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DefaultParameterValueAttribute.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultParameterValueAttribute&quot; /&gt; class with the default value of a parameter.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.DefaultParameterValueAttribute" />-Klasse mit dem Standardwert eines Parameters.</summary>
      <param name="value" vsli:raw="An object that represents the default value of a parameter.">Ein Objekt, das den Standardwert eines Parameters darstellt.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DefaultParameterValueAttribute.Value">
      <summary vsli:raw="Gets the default value of a parameter.">Ruft den Standardwert eines Parameters ab.</summary>
      <returns vsli:raw="An object that represents the default value of a parameter.">Ein Objekt, das den Standardwert eines Parameters darstellt.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispatchWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_DISPATCH&quot; /&gt;.">Erstellt einen Wrapper für Objekte, die der Marshaller als <see langword="VT_DISPATCH" /> marshallen soll.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispatchWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt; class with the object being wrapped.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.DispatchWrapper" />-Klasse mit dem Objekt, das umschlossen wird.</summary>
      <param name="obj" vsli:raw="The object to be wrapped and converted to &lt;see cref=&quot;F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH&quot; /&gt;.">Das Objekt, das in <see cref="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH" /> umgewandelt werden soll und das umschlossen wird.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a class or an array.  &#xA;  &#xA; -or-  &#xA;  &#xA; &lt;paramref name=&quot;obj&quot; /&gt; does not support &lt;see langword=&quot;IDispatch&quot; /&gt;.">
        <paramref name="obj" /> ist keine Klasse und kein Array.  
  
- oder - 
 <paramref name="obj" /> unterstützt <see langword="IDispatch" /> nicht.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter was marked with a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComVisibleAttribute&quot; /&gt; attribute that was passed a value of &lt;see langword=&quot;false&quot; /&gt;.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;obj&quot; /&gt; parameter inherits from a type marked with a &lt;see cref=&quot;T:System.Runtime.InteropServices.ComVisibleAttribute&quot; /&gt; attribute that was passed a value of &lt;see langword=&quot;false&quot; /&gt;.">Der <paramref name="obj" />-Parameter wurde mit einem <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />-Attribut gekennzeichnet, an das der Wert <see langword="false" /> übergeben wurde.  
  
- oder - 
Der <paramref name="obj" />-Parameter erbt von einem Typ, der mit einem <see cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />-Attribut gekennzeichnet ist, an das der Wert <see langword="false" /> übergeben wurde.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.DispatchWrapper.WrappedObject">
      <summary vsli:raw="Gets the object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;.">Ruft das Objekt ab, das von <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> umschlossen wird.</summary>
      <returns vsli:raw="The object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.DispatchWrapper&quot; /&gt;.">Das Objekt, das von <see cref="T:System.Runtime.InteropServices.DispatchWrapper" /> umschlossen wird.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DispIdAttribute">
      <summary vsli:raw="Specifies the COM dispatch identifier (DISPID) of a method, field, or property.">Gibt die COM-Dispatch-ID (DISPID) einer Methode, eines Felds oder einer Eigenschaft an.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DispIdAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;DispIdAttribute&quot; /&gt; class with the specified DISPID.">Initialisiert eine neue Instanz der <see langword="DispIdAttribute" />-Klasse mit der angegebenen DISPID.</summary>
      <param name="dispId" vsli:raw="The DISPID for the member.">Die DISPID des Members.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DispIdAttribute.Value">
      <summary vsli:raw="Gets the DISPID for the member.">Ruft die DISPID des Members ab.</summary>
      <returns vsli:raw="The DISPID for the member.">Die DISPID des Members.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportAttribute">
      <summary vsli:raw="Indicates that the attributed method is exposed by an unmanaged dynamic-link library (DLL) as a static entry point.">Gibt an, dass die attributierte Methode durch eine nicht verwaltete Dynamic Link Library (DLL) als statischer Einstiegspunkt verfügbar gemacht wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.BestFitMapping">
      <summary vsli:raw="Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.">Aktiviert bzw. deaktiviert das Verhalten der optimalen Zuordnung bei der Konvertierung von Unicode-Zeichen in ANSI-Zeichen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CallingConvention">
      <summary vsli:raw="Indicates the calling convention of an entry point.">Gibt die Aufrufkonvention eines Einstiegspunkts an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.CharSet">
      <summary vsli:raw="Indicates how to marshal string parameters to the method and controls name mangling.">Gibt an, wie Zeichenfolgenparameter an die Methode gemarshallt werden, und steuert die Namenszerlegung.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.EntryPoint">
      <summary vsli:raw="Indicates the name or ordinal of the DLL entry point to be called.">Gibt den Namen oder die Ordnungszahl des aufzurufenden DLL-Einstiegspunkts an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ExactSpelling">
      <summary vsli:raw="Controls whether the &lt;see cref=&quot;F:System.Runtime.InteropServices.DllImportAttribute.CharSet&quot; /&gt; field causes the common language runtime to search an unmanaged DLL for entry-point names other than the one specified.">Steuert, ob das <see cref="F:System.Runtime.InteropServices.DllImportAttribute.CharSet" />-Feld die Common Language Runtime anweist, eine nicht verwaltete DLL nach anderen Einstiegspunktnamen als dem angegebenen zu durchsuchen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.PreserveSig">
      <summary vsli:raw="Indicates whether unmanaged methods that have &lt;see langword=&quot;HRESULT&quot; /&gt; return values are directly translated or whether &lt;see langword=&quot;HRESULT&quot; /&gt; return values are automatically converted to exceptions.">Gibt an, ob nicht verwaltete Methoden, die über <see langword="HRESULT" />-Rückgabewerte oder <see langword="retval" />-Rückgabewerte verfügen, direkt übersetzt werden oder ob <see langword="HRESULT" />-Rückgabewerte oder <see langword="retval" />-Rückgabewerte automatisch in Ausnahmen konvertiert werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError">
      <summary vsli:raw="Indicates whether the callee sets an error (&lt;see langword=&quot;SetLastError&quot; /&gt; on Windows or &lt;see langword=&quot;errno&quot; /&gt; on other platforms) before returning from the attributed method.">Gibt an, ob der Aufgerufene vor dem Zurückgeben aus der attributierten Methode die Windows-API <see langword="SetLastError" /> aufruft.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.">Aktiviert bzw. deaktiviert das Auslösen einer Ausnahme bei einem nicht zuzuordnenden Unicode-Zeichen, das in das ANSI-Zeichen „?“ konvertiert wird.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DllImportAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.DllImportAttribute&quot; /&gt; class with the name of the DLL containing the method to import.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.DllImportAttribute" />-Klasse mit dem Namen der DLL, die die zu importierende Methode enthält.</summary>
      <param name="dllName" vsli:raw="The name of the DLL that contains the unmanaged method. In .NET Framework, this can include an assembly display name, if the DLL is included in an assembly.">Der Name der DLL, die die nicht verwaltete Methode enthält. Dieser kann einen Assemblyanzeigenamen einschließen, wenn die DLL in einer Assembly enthalten ist.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.DllImportAttribute.Value">
      <summary vsli:raw="Gets the name of the DLL file that contains the entry point.">Ruft den Namen der DLL-Datei ab, die den Einstiegspunkt enthält.</summary>
      <returns vsli:raw="The name of the DLL file that contains the entry point.">Der Name der DLL-Datei, die den Einstiegspunkt enthält.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportResolver">
      <summary vsli:raw="Provides a delegate used to resolve native libraries via callback.">Stellt einen Delegaten zum Auflösen nativer Bibliotheken über Rückruf bereit.</summary>
      <param name="libraryName" vsli:raw="The native library to resolve.">Die aufzulösende native Bibliothek.</param>
      <param name="assembly" vsli:raw="The assembly requesting the resolution.">Die Assembly, die die Lösung anfordert.</param>
      <param name="searchPath" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; on the PInvoke, if any. Otherwise, the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; on the assembly, if any. Otherwise &lt;see langword=&quot;null&quot; /&gt;.">Die <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />-Klasse auf der PInvoke, sofern vorhanden. Andernfalls die <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />-Klasse für die Assembly, sofern vorhanden. Andernfalls <see langword="null" />.</param>
      <returns vsli:raw="The handle for the loaded native library on success, or &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; on failure.">Der Ziehpunkt für die erfolgreich geladene native Bibliothek und das <see cref="F:System.IntPtr.Zero" />-Feld bei fehlgeschlagenem Laden der Bibliothek.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.DllImportSearchPath">
      <summary vsli:raw="Specifies the paths that are used to search for DLLs that provide functions for platform invokes.">Gibt die Pfade an, die bei der Suche nach DLLs verwendet werden, die Funktionen für Plattformaufrufe bereitstellen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.ApplicationDirectory">
      <summary vsli:raw="Include the application directory in the DLL search path.">Nehmen Sie das Anwendungsverzeichnis in den DLL-Suchpfad auf.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.AssemblyDirectory">
      <summary vsli:raw="When searching for assembly dependencies, include the directory that contains the assembly itself, and search that directory first. When used in Native AOT and single-file deployment models, the application's installation directory is considered the &quot;assembly directory&quot; and is searched.">Bei der Suche nach Assembly-Abhängigkeiten schließen Sie das Verzeichnis ein, das die Assembly selbst enthält, und durchsuchen dieses Verzeichnis zuerst. Dieser Wert wird von .NET Framework verwendet, bevor die Pfade der Win32-Funktion LoadLibraryEx übergeben werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.LegacyBehavior">
      <summary vsli:raw="Search the application directory, and then call the Win32 LoadLibraryEx function with the &lt;c&gt;LOAD_WITH_ALTERED_SEARCH_PATH&lt;/c&gt; flag. This value is ignored if any other value is specified. Operating systems that do not support the &lt;see cref=&quot;T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute&quot; /&gt; attribute use this value, and ignore other values.">Suchen Sie das Anwendungsverzeichnis, und rufen Sie anschließend die Win32-Funktion LoadLibraryEx mit dem <c>LOAD_WITH_ALTERED_SEARCH_PATH</c>-Flag auf. Dieser Wert wird ignoriert, wenn ein anderer Wert angegeben wird. Betriebssysteme, die das <see cref="T:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute" />-Attribut nicht unterstützen, verwenden diesen Wert und ignorieren andere Werte.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.SafeDirectories">
      <summary vsli:raw="Include the application directory, the &lt;see langword=&quot;%WinDir%\System32&quot; /&gt; directory, and user directories in the DLL search path.">Nehmen Sie das Anwendungsverzeichnis, das <see langword="%WinDir%\System32" />-Verzeichnis und die Benutzerverzeichnisse in den DLL-Suchpfad auf.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.System32">
      <summary vsli:raw="Include the &lt;see langword=&quot;%WinDir%\System32&quot; /&gt; directory in the DLL search path.">Nehmen Sie das <see langword="%WinDir%\System32" />-Verzeichnis in den DLL-Suchpfad auf.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UseDllDirectoryForDependencies">
      <summary vsli:raw="Search for the dependencies of a DLL in the folder where the DLL is located before searching other folders.">Suche nach den Abhängigkeiten einer DLL in dem Ordner, in dem sich die DLL befindet, bevor nach anderen Ordnern gesucht wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.DllImportSearchPath.UserDirectories">
      <summary vsli:raw="Include any path that was explicitly added to the process-wide search path by using the Win32 &lt;c&gt;AddDllDirectory&lt;/c&gt; function.">Schließen Sie jeden Pfad ein, der explizit im prozessweiten Suchpfad hinzugefügt wurde, indem die Win32-Funktion <c>AddDllDirectory</c> übergeben wurde.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute">
      <summary vsli:raw="Attribute required by any type that is returned by &lt;see cref=&quot;M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)&quot; /&gt;.">Ein Attribut, das von einem beliebigen von <see cref="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)" />zurückgegebenen Typ benötigt wird.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute.#ctor">
      <summary vsli:raw="Instance constructor.">Instanzenkonstruktor.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.ErrorWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_ERROR&quot; /&gt;.">Erstellt einen Wrapper für Objekte, die der Marshaller als <see langword="VT_ERROR" /> marshallen soll.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with the HRESULT that corresponds to the exception supplied.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ErrorWrapper" />-Klasse mit dem entsprechenden HRESULT für die angegebene Ausnahme.</summary>
      <param name="e" vsli:raw="The exception to be converted to an error code.">Die Ausnahme, die in einen Fehlercode konvertiert werden soll.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with the HRESULT of the error.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ErrorWrapper" />-Klasse mit dem HRESULT des Fehlers.</summary>
      <param name="errorCode" vsli:raw="The HRESULT of the error.">HRESULT des Fehlers.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ErrorWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ErrorWrapper&quot; /&gt; class with an object containing the HRESULT of the error.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ErrorWrapper" />-Klasse mit einem Objekt, das das HRESULT des Fehlers enthält.</summary>
      <param name="errorCode" vsli:raw="The object containing the HRESULT of the error.">Das Objekt, das das HRESULT des Fehlers enthält.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;errorCode&quot; /&gt; parameter is not an &lt;see cref=&quot;T:System.Int32&quot; /&gt; type.">Der <paramref name="errorCode" />-Parameter ist kein <see cref="T:System.Int32" />-Typ.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ErrorWrapper.ErrorCode">
      <summary vsli:raw="Gets the error code of the wrapper.">Ruft den Fehlercode des Wrappers ab.</summary>
      <returns vsli:raw="The HRESULT of the error.">HRESULT des Fehlers.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.GuidAttribute">
      <summary vsli:raw="Supplies an explicit &lt;see cref=&quot;T:System.Guid&quot; /&gt; when an automatic GUID is undesirable.">Stellt eine explizite <see cref="T:System.Guid" /> bereit, wenn ein automatischer GUID nicht erwünscht ist.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.GuidAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.GuidAttribute&quot; /&gt; class with the specified GUID.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.GuidAttribute" />-Klasse mit dem angegebenen GUID.</summary>
      <param name="guid" vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; to be assigned.">Die zuzuweisende <see cref="T:System.Guid" />.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.GuidAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Guid&quot; /&gt; of the class.">Ruft die <see cref="T:System.Guid" /> der Klasse ab.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Guid&quot; /&gt; of the class.">Der <see cref="T:System.Guid" /> der Klasse.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleCollector">
      <summary vsli:raw="Tracks outstanding handles and forces a garbage collection when the specified threshold is reached.">Verfolgt ausstehende Handles nach und erzwingt bei Erreichen des angegebenen Schwellenwerts eine Garbage Collection.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; class using a name and a threshold at which to begin handle collection.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.HandleCollector" />-Klasse mit einem Namen und einem Schwellenwert, an dem die Handle-Erfassung beginnen soll.</summary>
      <param name="name" vsli:raw="A name for the collector. This parameter allows you to name collectors that track handle types separately.">Ein Name für den Collector. Dieser Parameter ermöglicht Ihnen das Benennen von Collectors, die Typen von Handles separat verfolgen.</param>
      <param name="initialThreshold" vsli:raw="A value that specifies the point at which collections should begin.">Ein Wert, der den Punkt angibt, bei dem die Erfassung beginnen soll.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter is less than 0.">Der <paramref name="initialThreshold" />-Parameter ist kleiner als 0.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.#ctor(System.String,System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; class using a name, a threshold at which to begin handle collection, and a threshold at which handle collection must occur.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.HandleCollector" />-Klasse mit einem Namen, einem Schwellenwert für den Beginn der Handle-Erfassung sowie einem Schwellenwert, ab dem die Handle-Erfassung auftreten muss.</summary>
      <param name="name" vsli:raw="A name for the collector.  This parameter allows you to name collectors that track handle types separately.">Ein Name für den Collector.  Dieser Parameter ermöglicht Ihnen das Benennen von Collectors, die Typen von Handles separat verfolgen.</param>
      <param name="initialThreshold" vsli:raw="A value that specifies the point at which collections should begin.">Ein Wert, der den Punkt angibt, bei dem die Erfassung beginnen soll.</param>
      <param name="maximumThreshold" vsli:raw="A value that specifies the point at which collections must occur. This should be set to the maximum number of available handles.">Ein Wert, der den Punkt angibt, bei dem Erfassungen auftreten müssen. Dieser muss auf die maximale Anzahl verfügbarer Handles festgelegt werden.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter is less than 0.  &#xA;  &#xA; -or-  &#xA;  &#xA; The &lt;paramref name=&quot;maximumThreshold&quot; /&gt; parameter is less than 0.">Der <paramref name="initialThreshold" />-Parameter ist kleiner als 0.  
  
- oder - 
Der <paramref name="maximumThreshold" />-Parameter ist kleiner als 0.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;maximumThreshold&quot; /&gt; parameter is less than the &lt;paramref name=&quot;initialThreshold&quot; /&gt; parameter.">Der <paramref name="maximumThreshold" />-Parameter ist kleiner als der <paramref name="initialThreshold" />-Parameter.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Add">
      <summary vsli:raw="Increments the current handle count.">Erhöht die aktuelle Anzahl der Handles.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Count&quot; /&gt; property is less than 0.">Die <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" />-Eigenschaft ist kleiner als 0 (null).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleCollector.Remove">
      <summary vsli:raw="Decrements the current handle count.">Verringert die aktuelle Anzahl der Handles.</summary>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Count&quot; /&gt; property is less than 0.">Die <see cref="P:System.Runtime.InteropServices.HandleCollector.Count" />-Eigenschaft ist kleiner als 0 (null).</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Count">
      <summary vsli:raw="Gets the number of handles collected.">Ruft die Anzahl der erfassten Handles ab.</summary>
      <returns vsli:raw="The number of handles collected.">Die Anzahl der erfassten Handles.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.InitialThreshold">
      <summary vsli:raw="Gets a value that specifies the point at which collections should begin.">Ruft einen Wert ab, der den Punkt angibt, bei dem die Erfassung beginnen soll.</summary>
      <returns vsli:raw="A value that specifies the point at which collections should begin.">Ein Wert, der den Punkt angibt, bei dem die Erfassung beginnen soll.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.MaximumThreshold">
      <summary vsli:raw="Gets a value that specifies the point at which collections must occur.">Ruft einen Wert ab, der den Punkt angibt, bei dem Erfassungen auftreten müssen.</summary>
      <returns vsli:raw="A value that specifies the point at which collections must occur.">Ein Wert, der den Punkt angibt, bei dem Erfassungen auftreten müssen.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleCollector.Name">
      <summary vsli:raw="Gets the name of a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleCollector&quot; /&gt; object.">Ruft den Namen eines <see cref="T:System.Runtime.InteropServices.HandleCollector" />-Objekts ab.</summary>
      <returns vsli:raw="This &lt;see cref=&quot;P:System.Runtime.InteropServices.HandleCollector.Name&quot; /&gt; property allows you to name collectors that track handle types separately.">Diese <see cref="P:System.Runtime.InteropServices.HandleCollector.Name" />-Eigenschaft ermöglicht Ihnen das Benennen von Collectors, die Typen von Handles separat verfolgen.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.HandleRef">
      <summary vsli:raw="Wraps a managed object holding a handle to a resource that is passed to unmanaged code using platform invoke.">Umschließt ein verwaltetes Objekt, das ein Handle zu einer Ressource enthält, die über einen Plattformaufruf an nicht verwalteten Code übergeben wird.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.#ctor(System.Object,System.IntPtr)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; class with the object to wrap and a handle to the resource used by unmanaged code.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.HandleRef" />-Klasse mit dem zu umschließenden Objekt und einem Handle auf die Ressource, die von nicht verwaltetem Code verwendet wird.</summary>
      <param name="wrapper" vsli:raw="A managed object that should not be finalized until the platform invoke call returns.">Ein verwaltetes Objekt, das nicht finalisiert werden darf, bevor der Plattformaufruf beendet wird.</param>
      <param name="handle" vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; that indicates a handle to a resource.">Ein <see cref="T:System.IntPtr" />, das ein Handle für eine Ressource angibt.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.op_Explicit(System.Runtime.InteropServices.HandleRef)~System.IntPtr">
      <summary vsli:raw="Returns the handle to a resource of the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">Gibt das Handle für eine Ressource des angegebenen <see cref="T:System.Runtime.InteropServices.HandleRef" />-Objekts zurück.</summary>
      <param name="value" vsli:raw="The object that needs a handle.">Das Objekt, für das ein Handle erforderlich ist.</param>
      <returns vsli:raw="The handle to a resource of the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">Das Handle für eine Ressource des angegebenen <see cref="T:System.Runtime.InteropServices.HandleRef" />-Objekts.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.HandleRef.ToIntPtr(System.Runtime.InteropServices.HandleRef)">
      <summary vsli:raw="Returns the internal integer representation of a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">Gibt die interne Ganzzahldarstellung eines <see cref="T:System.Runtime.InteropServices.HandleRef" />-Objekts zurück.</summary>
      <param name="value" vsli:raw="A &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object to retrieve an internal integer representation from.">Ein <see cref="T:System.Runtime.InteropServices.HandleRef" />-Objekt, aus dem eine interne Ganzzahldarstellung abgerufen werden soll.</param>
      <returns vsli:raw="An &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; object that represents a &lt;see cref=&quot;T:System.Runtime.InteropServices.HandleRef&quot; /&gt; object.">Ein <see cref="T:System.IntPtr" />-Objekt, das ein <see cref="T:System.Runtime.InteropServices.HandleRef" />-Objekt darstellt.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Handle">
      <summary vsli:raw="Gets the handle to a resource.">Ruft das Handle für eine Ressource ab.</summary>
      <returns vsli:raw="The handle to a resource.">Das Handle für eine Ressource.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.HandleRef.Wrapper">
      <summary vsli:raw="Gets the object holding the handle to a resource.">Ruft das Objekt ab, das das Handle für eine Ressource enthält.</summary>
      <returns vsli:raw="The object holding the handle to a resource.">Das Objekt, das das Handle für eine Ressource enthält.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomAdapter">
      <summary vsli:raw="Provides a way for clients to access the actual object, rather than the adapter object handed out by a custom marshaler.">Bietet eine Möglichkeit, mit der Clients auf das eigentliche Objekt zugreifen können, anstatt das von einem benutzerdefinierten Marshaller ausgegebene Adapterobjekt zu verwenden.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomAdapter.GetUnderlyingObject">
      <summary vsli:raw="Provides access to the underlying object wrapped by a custom marshaler.">Stellt den Zugriff auf das zugrunde liegende Objekt bereit, das von einem benutzerdefinierten Marshaller umfasst wird.</summary>
      <returns vsli:raw="The object contained by the adapter object.">Das Objekt, das im Adapterobjekt enthalten ist.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomFactory">
      <summary vsli:raw="Enables users to write activation code for managed objects that extend &lt;see cref=&quot;T:System.MarshalByRefObject&quot; /&gt;.">Ermöglicht es Benutzern, Aktivierungscode für verwaltete Objekte zu schreiben, die <see cref="T:System.MarshalByRefObject" /> erweitern.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomFactory.CreateInstance(System.Type)">
      <summary vsli:raw="Creates a new instance of the specified type.">Erstellt eine neue Instanz des angegebenen Typs.</summary>
      <param name="serverType" vsli:raw="The type to activate.">Der zu aktivierende Typ.</param>
      <returns vsli:raw="A &lt;see cref=&quot;T:System.MarshalByRefObject&quot; /&gt; associated with the specified type.">Ein <see cref="T:System.MarshalByRefObject" />, der dem angegebenen Typ zugeordnet ist.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomMarshaler">
      <summary vsli:raw="Provides custom wrappers for handling method calls.">Stellt benutzerdefinierte Wrapper für die Behandlung von Methodenaufrufen bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)">
      <summary vsli:raw="Performs necessary cleanup of the managed data when it is no longer needed.">Führt die notwendigen Bereinigungsvorgänge für verwaltete Daten durch, wenn diesen nicht mehr benötigt werden.</summary>
      <param name="ManagedObj" vsli:raw="The managed object to be destroyed.">Das verwaltete Objekt, das zerstört werden soll.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)">
      <summary vsli:raw="Performs necessary cleanup of the unmanaged data when it is no longer needed.">Führt die notwendigen Bereinigungsvorgänge für nicht verwaltete Daten durch, wenn diesen nicht mehr benötigt werden.</summary>
      <param name="pNativeData" vsli:raw="A pointer to the unmanaged data to be destroyed.">Ein Zeiger auf nicht verwaltete Daten, die zerstört werden sollen.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize">
      <summary vsli:raw="Returns the size of the native data to be marshaled.">Gibt die Größe der systemeigenen Daten zurück, die gemarshallt werden sollen.</summary>
      <returns vsli:raw="The size, in bytes, of the native data.">Die Größe der systemeigenen Daten in Bytes.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)">
      <summary vsli:raw="Converts the managed data to unmanaged data.">Konvertiert verwaltete in nicht verwaltete Daten.</summary>
      <param name="ManagedObj" vsli:raw="The managed object to be converted.">Das verwaltete Objekt, das konvertiert werden soll.</param>
      <returns vsli:raw="A pointer to the COM view of the managed object.">Ein Zeiger auf die COM-Ansicht des verwalteten Objekts.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)">
      <summary vsli:raw="Converts the unmanaged data to managed data.">Konvertiert verwaltete in nicht verwaltete Daten.</summary>
      <param name="pNativeData" vsli:raw="A pointer to the unmanaged data to be wrapped.">Ein Zeiger auf nicht verwaltete Daten, die umschlossen werden sollen.</param>
      <returns vsli:raw="An object that represents the managed view of the COM data.">Ein Objekt, das die verwaltete Ansicht der COM-Daten darstellt.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ICustomQueryInterface">
      <summary vsli:raw="Enables developers to provide a custom, managed implementation of the IUnknown::QueryInterface(REFIID riid, void **ppvObject) method.">Ermöglicht Entwicklern das Bereitstellen einer benutzerdefinierten, verwalteten Implementierung der IUnknown::QueryInterface(REFIID riid, void **ppvObject)-Methode.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ICustomQueryInterface.GetInterface(System.Guid@,System.IntPtr@)">
      <summary vsli:raw="Returns an interface according to a specified interface ID.">Gibt entsprechend einer angegebenen Schnittstellen-ID eine Schnittstelle zurück.</summary>
      <param name="iid" vsli:raw="The GUID of the requested interface.">Die GUID der angeforderten Schnittstelle.</param>
      <param name="ppv" vsli:raw="A reference to the requested interface, when this method returns.">Nach dem Beenden der Methode ein Verweis auf die angeforderte Schnittstelle.</param>
      <returns vsli:raw="One of the enumeration values that indicates whether a custom implementation of IUnknown::QueryInterface was used.">Einer der Enumerationswerte, der angibt, ob eine benutzerdefinierte Implementierung von IUnknown::QueryInterface verwendet wurde.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.IDynamicInterfaceCastable">
      <summary vsli:raw="Interface used to participate in a type cast failure.">Schnittstelle, die zur Beteiligung an einem Typumwandlungsfehler verwendet wird.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.GetInterfaceImplementation(System.RuntimeTypeHandle)">
      <summary vsli:raw="Called during interface dispatch when the given interface type cannot be found in the class's metadata.">Wird während des Schnittstellendispatchings aufgerufen, wenn der angegebene Schnittstellentyp in den Metadaten der Klasse nicht gefunden werden kann.</summary>
      <param name="interfaceType" vsli:raw="The interface type.">Der Schnittstellentyp.</param>
      <exception cref="T:System.InvalidOperationException" vsli:raw="The returned type is not an interface type, or it was not marked with the &lt;see cref=&quot;T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute&quot; /&gt;.">Der zurückgegebene Typ ist kein Schnittstellentyp, oder er wurde nicht mit <see cref="T:System.Runtime.InteropServices.DynamicInterfaceCastableImplementationAttribute" /> gekennzeichnet.</exception>
      <returns vsli:raw="The type that should be used to dispatch for &lt;paramref name=&quot;interfaceType&quot; /&gt; on the current object.">Der Typ, der verwendet werden soll, um <paramref name="interfaceType" /> für das aktuelle Objekt zu dispatchen.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.IDynamicInterfaceCastable.IsInterfaceImplemented(System.RuntimeTypeHandle,System.Boolean)">
      <summary vsli:raw="Called when an implementing class instance is cast to an interface type that is not contained in the class's metadata.">Wird aufgerufen, wenn eine implementierende Klasseninstanz in einen Schnittstellentyp umgewandelt wird, der nicht in den Metadaten der Klasse enthalten ist.</summary>
      <param name="interfaceType" vsli:raw="The interface type.">Der Schnittstellentyp.</param>
      <param name="throwIfNotImplemented" vsli:raw="Indicates if the function should throw an exception instead of returning &lt;see langword=&quot;false&quot; /&gt;.">Gibt an, ob die Funktion eine Ausnahme auslösen soll, anstatt <see langword="false" /> zurückzugeben.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this object can be cast to the given interface; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn dieses Objekt in die angegebene Schnittstelle umgewandelt werden kann, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute">
      <summary vsli:raw="Indicates that the types defined within an assembly were originally defined in a type library.">Gibt an, dass die innerhalb einer Assembly definierten Typen ursprünglich in einer Typbibliothek definiert wurden.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute&quot; /&gt; class with the name of the original type library file.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ImportedFromTypeLibAttribute" />-Klasse mit dem Namen der ursprünglichen Typbibliotheksdatei.</summary>
      <param name="tlbFile" vsli:raw="The location of the original type library file.">Der Speicherort der ursprünglichen Typbibliotheksdatei.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ImportedFromTypeLibAttribute.Value">
      <summary vsli:raw="Gets the name of the original type library file.">Ruft den Namen der ursprünglichen Typbibliotheksdatei ab.</summary>
      <returns vsli:raw="The name of the original type library file.">Der Name der ursprünglichen Typbibliotheksdatei.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InterfaceTypeAttribute">
      <summary vsli:raw="Indicates whether a managed interface is dual, dispatch-only, or &lt;see langword=&quot;IUnknown&quot; /&gt; -only when exposed to COM.">Gibt an, ob es sich bei einer verwalteten Schnittstelle um eine duale, auf Dispatch beschränkte oder auf <see langword="IUnknown" /> beschränkte Schnittstelle handelt, wenn diese für COM verfügbar gemacht wird.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InterfaceTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; enumeration member.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.ComInterfaceType" />-Enumerationsmember.</summary>
      <param name="interfaceType" vsli:raw="Describes how the interface should be exposed to COM clients.">Beschreibt, wie die Schnittstelle für COM-Clients verfügbar gemacht werden soll.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InterfaceTypeAttribute.#ctor(System.Runtime.InteropServices.ComInterfaceType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InterfaceTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; enumeration member.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.InterfaceTypeAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.ComInterfaceType" />-Enumerationsmember.</summary>
      <param name="interfaceType" vsli:raw="One of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; values that describes how the interface should be exposed to COM clients.">Einer der <see cref="T:System.Runtime.InteropServices.ComInterfaceType" />-Werte, der beschreibt, wie die Schnittstelle für COM-Clients verfügbar gemacht werden soll.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.InterfaceTypeAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; value that describes how the interface should be exposed to COM.">Ruft den <see cref="T:System.Runtime.InteropServices.ComInterfaceType" />-Wert ab, der beschreibt, wie die Schnittstelle für COM verfügbar gemacht werden soll.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.ComInterfaceType&quot; /&gt; value that describes how the interface should be exposed to COM.">Der <see cref="T:System.Runtime.InteropServices.ComInterfaceType" />-Wert, der beschreibt, wie die Schnittstelle für COM verfügbar gemacht werden soll.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidComObjectException">
      <summary vsli:raw="The exception thrown when an invalid COM object is used.">Die Ausnahme, die bei Verwendung eines ungültigen COM-Objekts ausgelöst wird.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;InvalidComObjectException&quot; /&gt; with default properties.">Initialisiert eine Instanz von <see langword="InvalidComObjectException" /> mit Standardeigenschaften.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;COMException&quot; /&gt; class from serialization data.">Initialisiert eine neue Instanz der <see langword="COMException" />-Klasse aus Serialisierungsdaten.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String)">
      <summary vsli:raw="Initializes an instance of the &lt;see langword=&quot;InvalidComObjectException&quot; /&gt; with a message.">Initialisiert eine Instanz von <see langword="InvalidComObjectException" /> mit einer Meldung.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Die Meldung, in der die Ursache für die Ausnahme angegeben wird.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidComObjectException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InvalidComObjectException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.InvalidComObjectException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="inner" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.InvalidOleVariantTypeException">
      <summary vsli:raw="The exception thrown by the marshaler when it encounters an argument of a variant type that can not be marshaled to managed code.">Die Ausnahme, die vom Marshaller ausgelöst wird, wenn ein Argument eines Variantentyps gefunden wird, das nicht zu verwaltetem Code gemarshallt werden kann.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class with default values.">Initialisiert eine neue Instanz der <see langword="InvalidOleVariantTypeException" />-Klasse mit Standardwerten.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class from serialization data.">Initialisiert eine neue Instanz der <see langword="InvalidOleVariantTypeException" />-Klasse aus Serialisierungsdaten.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;InvalidOleVariantTypeException&quot; /&gt; class with a specified message.">Initialisiert eine neue Instanz der <see langword="InvalidOleVariantTypeException" />-Klasse mit einer angegebenen Meldung.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Die Meldung, in der die Ursache für die Ausnahme angegeben wird.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.InvalidOleVariantTypeException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.InvalidOleVariantTypeException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="inner" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.LCIDConversionAttribute">
      <summary vsli:raw="Indicates that a method's unmanaged signature expects a locale identifier (LCID) parameter.">Gibt an, dass für die nicht verwaltete Signatur einer Methode ein LCID-Parameter (Locale Identifier, Gebietsschemabezeichner) erwartet wird.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.LCIDConversionAttribute.#ctor(System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;LCIDConversionAttribute&quot; /&gt; class with the position of the LCID in the unmanaged signature.">Initialisiert eine neue Instanz der <see langword="LCIDConversionAttribute" />-Klasse mit der Position der LCID in der nicht verwalteten Signatur.</summary>
      <param name="lcid" vsli:raw="Indicates the position of the LCID argument in the unmanaged signature, where 0 is the first argument.">Gibt die Position des LCID-Arguments in der nicht verwalteten Signatur an, wobei 0 das erste Argument ist.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.LCIDConversionAttribute.Value">
      <summary vsli:raw="Gets the position of the LCID argument in the unmanaged signature.">Ruft die Position des LCID-Arguments in der nicht verwalteten Signatur ab.</summary>
      <returns vsli:raw="The position of the LCID argument in the unmanaged signature, where 0 is the first argument.">Die Position des LCID-Arguments in der nicht verwalteten Signatur, wobei 0 das erste Argument ist.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute">
      <summary vsli:raw="Provides support for user customization of interop stubs in managed-to-COM interop scenarios.">Unterstützt die Benutzeranpassung von Interop-Stubs in für COM verwalteten Interopszenarios.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.#ctor(System.Type,System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute&quot; /&gt; class with the specified class type and method name.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute" />-Klasse unter Verwendung des angegebenen Klassentyps und Methodennamens.</summary>
      <param name="classType" vsli:raw="The class that contains the required stub method.">Die Klasse, die die erforderliche Stub-Methode enthält.</param>
      <param name="methodName" vsli:raw="The name of the stub method.">Der Name der Stub-Methode.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;methodName&quot; /&gt; cannot be found.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method is not static or non-generic.  &#xA;  &#xA; -or-  &#xA;  &#xA; The method's parameter list does not match the expected parameter list for the stub.">
        <paramref name="methodName" /> kann nicht gefunden werden.  
  
- oder - 
Die Methode ist nicht statisch oder nicht generisch.  
  
- oder - 
Die Parameterliste der Methode passt nicht zur erwarteten Parameterliste für den Stub.</exception>
      <exception cref="T:System.MethodAccessException" vsli:raw="The interface that contains the managed interop method has no access to the stub method, because the stub method has private or protected accessibility, or because of a security issue.">Die Schnittstelle, die die verwaltete Interop-Methode enthält, verfügt über keinen Zugriff auf die Stubmethode, da die Stubmethode über privaten oder geschützten Zugriff verfügt oder wegen eines Sicherheitsproblems.</exception>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.ClassType">
      <summary vsli:raw="Gets the class that contains the required stub method.">Ruft die Klasse ab, die die erforderliche Stub-Methode enthält.</summary>
      <returns vsli:raw="The class that contains the customized interop stub.">Die Klasse, die den benutzerdefinierten Interop-Stub enthält.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.ManagedToNativeComInteropStubAttribute.MethodName">
      <summary vsli:raw="Gets the name of the stub method.">Ruft den Namen der Stub-Methode ab.</summary>
      <returns vsli:raw="The name of a customized interop stub.">Der Name eines benutzerdefinierten Interop-Stubs.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.Marshal">
      <summary vsli:raw="Provides a collection of methods for allocating unmanaged memory, copying unmanaged memory blocks, and converting managed to unmanaged types, as well as other miscellaneous methods used when interacting with unmanaged code.">Bietet eine Auflistung von Methoden zum Belegen von nicht verwaltetem Speicher, zum Kopieren von nicht verwalteten Speicherblöcken und zum Konvertieren von verwalteten in nicht verwaltete Typen sowie sonstige Methoden, die bei der Interaktion mit nicht verwaltetem Code verwendet werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemDefaultCharSize">
      <summary vsli:raw="Represents the default character size on the system; the default is 2 for Unicode systems and 1 for ANSI systems. This field is read-only.">Stellt die Standardzeichengröße für das System dar. Der Standardwert ist 2 für Unicode-Systeme und 1 für ANSI-Systeme. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.Marshal.SystemMaxDBCSCharSize">
      <summary vsli:raw="Represents the maximum size of a double byte character set (DBCS) size, in bytes, for the current operating system. This field is read-only.">Stellt die maximale Größe eines DBCS (Double-Byte Character Set) für das aktuelle Betriebssystem in Bytes dar. Dieses Feld ist schreibgeschützt.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AddRef(System.IntPtr)">
      <summary vsli:raw="Increments the reference count on the specified interface.">Inkrementiert den Verweiszähler für die angegebene Schnittstelle.</summary>
      <param name="pUnk" vsli:raw="The interface reference count to increment.">Der zu inkrementierende Verweiszähler für Schnittstellen.</param>
      <returns vsli:raw="The new value of the reference count on the &lt;paramref name=&quot;pUnk&quot; /&gt; parameter.">Der neue Wert des Verweiszählers für den <paramref name="pUnk" />-Parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)">
      <summary vsli:raw="Allocates a block of memory of specified size from the COM task memory allocator.">Belegt einen Speicherblock der angegebenen Größe aus der Speicherbelegungsfunktion für COM-Aufgaben.</summary>
      <param name="cb" vsli:raw="The size of the block of memory to be allocated.">Die Größe des zu belegenden Speicherblocks.</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">Es ist nicht genügend Arbeitsspeicher zum Erfüllen der Anforderung vorhanden.</exception>
      <returns vsli:raw="An integer representing the address of the block of memory allocated. This memory must be released with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)&quot; /&gt;.">Eine ganze Zahl, die die Adresse des belegten Speicherblocks darstellt. Dieser Speicher muss mit <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> freigegeben werden.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.Int32)">
      <summary vsli:raw="Allocates memory from the unmanaged memory of the process by using the specified number of bytes.">Reserviert Speicher aus dem nicht verwalteten Arbeitsspeicher des Prozesses mit der angegebenen Anzahl von Bytes.</summary>
      <param name="cb" vsli:raw="The required number of bytes in memory.">Die erforderliche Anzahl der Bytes im Speicher.</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">Es ist nicht genügend Arbeitsspeicher zum Erfüllen der Anforderung vorhanden.</exception>
      <returns vsli:raw="A pointer to the newly allocated memory. This memory must be released using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt; method.">Ein Zeiger auf den neu reservierten Speicher. Dieser Speicher muss unter Verwendung der <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />-Methode freigegeben werden.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)">
      <summary vsli:raw="Allocates memory from the unmanaged memory of the process by using the pointer to the specified number of bytes.">Reserviert Speicher aus dem nicht verwalteten Arbeitsspeicher des Prozesses mithilfe des Zeigers auf die angegebene Anzahl von Bytes.</summary>
      <param name="cb" vsli:raw="The required number of bytes in memory.">Die erforderliche Anzahl der Bytes im Speicher.</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">Es ist nicht genügend Arbeitsspeicher zum Erfüllen der Anforderung vorhanden.</exception>
      <returns vsli:raw="A pointer to the newly allocated memory. This memory must be released using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt; method.">Ein Zeiger auf den neu reservierten Speicher. Dieser Speicher muss unter Verwendung der <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" />-Methode freigegeben werden.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.AreComObjectsAvailableForCleanup">
      <summary vsli:raw="Indicates whether runtime callable wrappers (RCWs) from any context are available for cleanup.">Gibt an, ob Runtime Callable Wrappers (RCWs) aus einem beliebigen Kontext zur Bereinigung verfügbar sind.</summary>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if there are any RCWs available for cleanup; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn RCWs zur Bereinigung verfügbar sind, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.BindToMoniker(System.String)">
      <summary vsli:raw="Gets an interface pointer identified by the specified moniker.">Ruft einen vom angegebenen Moniker bezeichneten Schnittstellenzeiger ab.</summary>
      <param name="monikerName" vsli:raw="The moniker corresponding to the desired interface pointer.">Der dem gewünschten Schnittstellenzeiger entsprechende Moniker.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="An unrecognized HRESULT was returned by the unmanaged &lt;see langword=&quot;BindToMoniker&quot; /&gt; method.">Von der nicht verwalteten <see langword="BindToMoniker" />-Methode wurde ein nicht erkanntes HRESULT zurückgegeben.</exception>
      <returns vsli:raw="An object containing a reference to the interface pointer identified by the &lt;paramref name=&quot;monikerName&quot; /&gt; parameter. A moniker is a name, and in this case, the moniker is defined by an interface.">Ein Objekt mit einem Verweis auf den Schnittstellenzeiger, der durch den <paramref name="monikerName" />-Parameter angegeben wird. Ein Moniker stellt einen Namen dar, und in diesem Fall wird der Moniker durch eine Schnittstelle definiert.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ChangeWrapperHandleStrength(System.Object,System.Boolean)">
      <summary vsli:raw="Changes the strength of an object's COM Callable Wrapper (CCW) handle.">Ändert die Stärke des CCW-Handles (COM Callable Wrapper) für ein Objekt.</summary>
      <param name="otp" vsli:raw="The object whose CCW holds a reference counted handle. The handle is strong if the reference count on the CCW is greater than zero; otherwise, it is weak.">Das Objekt, dessen CCW ein Handle mit Verweiszähler enthält. Das Handle ist stark, wenn der Verweiszähler für den COM Callable Wrapper größer als 0 ist, andernfalls ist er schwach.</param>
      <param name="fIsWeak" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to change the strength of the handle on the &lt;paramref name=&quot;otp&quot; /&gt; parameter to weak, regardless of its reference count; &lt;see langword=&quot;false&quot; /&gt; to reset the handle strength on &lt;paramref name=&quot;otp&quot; /&gt; to be reference counted.">
        <see langword="true" />, um die Stärke des Handles für den <paramref name="otp" />-Parameter unabhängig von dessen Verweiszähler auf schwach zu ändern. <see langword="false" />, um die Stärke des Handles für <paramref name="otp" /> auf das Ausführen einer Verweiszählung zurückzusetzen.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CleanupUnusedObjectsInCurrentContext">
      <summary vsli:raw="Notifies the runtime to clean up all Runtime Callable Wrappers (RCWs) allocated in the current context.">Benachrichtigt die Laufzeit, dass alle im aktuellen Kontext reservierten Runtime Callable Wrapper (RCW) bereinigt werden sollen.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Byte[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 8-bit unsigned integer array to an unmanaged memory pointer.">Kopiert Daten aus einem eindimensionalen, verwalteten Array von 8-Bit-Ganzzahlen ohne Vorzeichen in einen nicht verwalteten Speicherzeiger.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Das eindimensionale Array, aus dem kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Der nullbasierte Index im Quellarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Der Speicherzeiger, in den kopiert werden soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> und <paramref name="length" /> sind nicht gültig.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Char[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed character array to an unmanaged memory pointer.">Kopiert Daten aus einem eindimensionalen, verwalteten Zeichenarray in einen nicht verwalteten Speicherzeiger.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Das eindimensionale Array, aus dem kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Der nullbasierte Index im Quellarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Der Speicherzeiger, in den kopiert werden soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> und <paramref name="length" /> sind nicht gültig.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startIndex" />, <paramref name="destination" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Double[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed double-precision floating-point number array to an unmanaged memory pointer.">Kopiert Daten aus einem eindimensionalen, verwalteten Array von Gleitkommazahlen mit doppelter Genauigkeit in einen nicht verwalteten Speicherzeiger.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Das eindimensionale Array, aus dem kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Der nullbasierte Index im Quellarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Der Speicherzeiger, in den kopiert werden soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> und <paramref name="length" /> sind nicht gültig.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int16[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 16-bit signed integer array to an unmanaged memory pointer.">Kopiert Daten aus einem eindimensionalen, verwalteten Array von 16-Bit-Ganzzahlen mit Vorzeichen in einen nicht verwalteten Speicherzeiger.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Das eindimensionale Array, aus dem kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Der nullbasierte Index im Quellarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Der Speicherzeiger, in den kopiert werden soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> und <paramref name="length" /> sind nicht gültig.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int32[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 32-bit signed integer array to an unmanaged memory pointer.">Kopiert Daten aus einem eindimensionalen, verwalteten Array von 32-Bit-Ganzzahlen mit Vorzeichen in einen nicht verwalteten Speicherzeiger.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Das eindimensionale Array, aus dem kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Der nullbasierte Index im Quellarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Der Speicherzeiger, in den kopiert werden soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> und <paramref name="length" /> sind nicht gültig.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="startIndex" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Int64[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed 64-bit signed integer array to an unmanaged memory pointer.">Kopiert Daten aus einem eindimensionalen, verwalteten Array von 64-Bit-Ganzzahlen mit Vorzeichen in einen nicht verwalteten Speicherzeiger.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Das eindimensionale Array, aus dem kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Der nullbasierte Index im Quellarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Der Speicherzeiger, in den kopiert werden soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> und <paramref name="length" /> sind nicht gültig.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Byte[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 8-bit unsigned integer array.">Kopiert Daten aus einem nicht verwalteten Speicherzeiger in ein verwaltetes Array von 8-Bit-Ganzzahlen ohne Vorzeichen.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Der Speicherzeiger, aus dem kopiert werden soll.</param>
      <param name="destination" vsli:raw="The array to copy to.">Das Array, in das kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Der nullbasierte Index im Zielarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Char[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed character array.">Kopiert Daten aus einem nicht verwalteten Speicherzeiger in ein verwaltetes Zeichenarray.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Der Speicherzeiger, aus dem kopiert werden soll.</param>
      <param name="destination" vsli:raw="The array to copy to.">Das Array, in das kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Der nullbasierte Index im Zielarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Double[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed double-precision floating-point number array.">Kopiert Daten aus einem nicht verwalteten Speicherzeiger in ein verwaltetes Array von Gleitkommazahlen mit doppelter Genauigkeit.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Der Speicherzeiger, aus dem kopiert werden soll.</param>
      <param name="destination" vsli:raw="The array to copy to.">Das Array, in das kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Der nullbasierte Index im Zielarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int16[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 16-bit signed integer array.">Kopiert Daten aus einem nicht verwalteten Speicherzeiger in ein verwaltetes Array von 16-Bit-Ganzzahlen mit Vorzeichen.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Der Speicherzeiger, aus dem kopiert werden soll.</param>
      <param name="destination" vsli:raw="The array to copy to.">Das Array, in das kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Der nullbasierte Index im Zielarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int32[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 32-bit signed integer array.">Kopiert Daten aus einem nicht verwalteten Speicherzeiger in ein verwaltetes Array von 32-Bit-Ganzzahlen mit Vorzeichen.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Der Speicherzeiger, aus dem kopiert werden soll.</param>
      <param name="destination" vsli:raw="The array to copy to.">Das Array, in das kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Der nullbasierte Index im Zielarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Int64[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed 64-bit signed integer array.">Kopiert Daten aus einem nicht verwalteten Speicherzeiger in ein verwaltetes Array von 64-Bit-Ganzzahlen mit Vorzeichen.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Der Speicherzeiger, aus dem kopiert werden soll.</param>
      <param name="destination" vsli:raw="The array to copy to.">Das Array, in das kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Der nullbasierte Index im Zielarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.IntPtr[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; array.">Kopiert Daten aus einem nicht verwalteten Speicherzeiger in ein verwaltetes <see cref="T:System.IntPtr" />-Array.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Der Speicherzeiger, aus dem kopiert werden soll.</param>
      <param name="destination" vsli:raw="The array to copy to.">Das Array, in das kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Der nullbasierte Index im Zielarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr,System.Single[],System.Int32,System.Int32)">
      <summary vsli:raw="Copies data from an unmanaged memory pointer to a managed single-precision floating-point number array.">Kopiert Daten aus einem nicht verwalteten Speicherzeiger in ein verwaltetes Array von Gleitkommazahlen mit einfacher Genauigkeit.</summary>
      <param name="source" vsli:raw="The memory pointer to copy from.">Der Speicherzeiger, aus dem kopiert werden soll.</param>
      <param name="destination" vsli:raw="The array to copy to.">Das Array, in das kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the destination array where copying should start.">Der nullbasierte Index im Zielarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.IntPtr[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed &lt;see cref=&quot;T:System.IntPtr&quot; /&gt; array to an unmanaged memory pointer.">Kopiert Daten aus einem eindimensionalen, verwalteten <see cref="T:System.IntPtr" />-Array in einen nicht verwalteten Speicherzeiger.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Das eindimensionale Array, aus dem kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Der nullbasierte Index im Quellarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Der Speicherzeiger, in den kopiert werden soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="destination" />, <paramref name="startIndex" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Copy(System.Single[],System.Int32,System.IntPtr,System.Int32)">
      <summary vsli:raw="Copies data from a one-dimensional, managed single-precision floating-point number array to an unmanaged memory pointer.">Kopiert Daten aus einem eindimensionalen, verwalteten Array von Gleitkommazahlen mit einfacher Genauigkeit in einen nicht verwalteten Speicherzeiger.</summary>
      <param name="source" vsli:raw="The one-dimensional array to copy from.">Das eindimensionale Array, aus dem kopiert werden soll.</param>
      <param name="startIndex" vsli:raw="The zero-based index in the source array where copying should start.">Der nullbasierte Index im Quellarray, an dem der Kopiervorgang beginnen soll.</param>
      <param name="destination" vsli:raw="The memory pointer to copy to.">Der Speicherzeiger, in den kopiert werden soll.</param>
      <param name="length" vsli:raw="The number of array elements to copy.">Die Anzahl der zu kopierenden Arrayelemente.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;startIndex&quot; /&gt; and &lt;paramref name=&quot;length&quot; /&gt; are not valid.">
        <paramref name="startIndex" /> und <paramref name="length" /> sind nicht gültig.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;source&quot; /&gt;, &lt;paramref name=&quot;startIndex&quot; /&gt;, &lt;paramref name=&quot;destination&quot; /&gt;, or &lt;paramref name=&quot;length&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="source" />, <paramref name="startIndex" />, <paramref name="destination" /> oder <paramref name="length" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject(System.IntPtr,System.Object)">
      <summary vsli:raw="Aggregates a managed object with the specified COM object.">Verbindet ein verwaltetes Objekt mit dem angegebenen COM-Objekt.</summary>
      <param name="pOuter" vsli:raw="The outer &lt;see langword=&quot;IUnknown&quot; /&gt; pointer.">Der äußere <see langword="IUnknown" />-Zeiger.</param>
      <param name="o" vsli:raw="An object to aggregate.">Ein zu aggregierendes Objekt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is a Windows Runtime object.">
        <paramref name="o" /> ist ein Windows-Runtime-Objekt.</exception>
      <returns vsli:raw="The inner &lt;see langword=&quot;IUnknown&quot; /&gt; pointer of the managed object.">Der innere <see langword="IUnknown" />-Zeiger des verwalteten Objekts.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateAggregatedObject``1(System.IntPtr,``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Aggregates a managed object of the specified type with the specified COM object.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt]  
  
 Aggregiert ein verwaltetes Objekt des angegebenen Typs mit dem angegebenen COM-Objekt.</summary>
      <param name="pOuter" vsli:raw="The outer IUnknown pointer.">Der äußere IUnknown-Zeiger.</param>
      <param name="o" vsli:raw="The managed object to aggregate.">Das zu aggregierende -Objekt.</param>
      <typeparam name="T" vsli:raw="The type of the managed object to aggregate.">Der Typ des zu aggregierenden verwalteten Objekts.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is a Windows Runtime object.">
        <paramref name="o" /> ist ein Windows-Runtime-Objekt.</exception>
      <returns vsli:raw="The inner IUnknown pointer of the managed object.">Der innere IUnknown-Zeiger des verwalteten Objekts.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType(System.Object,System.Type)">
      <summary vsli:raw="Wraps the specified COM object in an object of the specified type.">Umschließt das angegebene COM-Objekt mit einem Objekt des angegebenen Typs.</summary>
      <param name="o" vsli:raw="The object to be wrapped.">Das zu umschließende Objekt.</param>
      <param name="t" vsli:raw="The type of wrapper to create.">Der Typ des zu erstellenden Wrappers.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; must derive from &lt;see langword=&quot;__ComObject&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;t&quot; /&gt; is a Windows Runtime type.">
        <paramref name="t" /> muss von <see langword="__ComObject" /> abgeleitet werden.  
  
- oder - 
 <paramref name="t" /> ist ein Windows-Runtime-Typ.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="t" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; cannot be converted to the destination type because it does not support all required interfaces.">
        <paramref name="o" /> kann nicht in den Zieltyp konvertiert werden, da nicht alle erforderlichen Schnittstellen unterstützt werden.</exception>
      <returns vsli:raw="The newly wrapped object that is an instance of the desired type.">Das neu umschlossene Objekt, das eine Instanz des gewünschten Typs darstellt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.CreateWrapperOfType``2(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Wraps the specified COM object in an object of the specified type.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt]  
  
 Umschließt das angegebene COM-Objekt mit einem Objekt des angegebenen Typs.</summary>
      <param name="o" vsli:raw="The object to be wrapped.">Das zu umschließende Objekt.</param>
      <typeparam name="T" vsli:raw="The type of object to wrap.">Der Typ des zurückzugebenden Umbruchs.</typeparam>
      <typeparam name="TWrapper" vsli:raw="The type of object to return.">Der Typ des zurückzugebenden Objekts.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;typeparamref name=&quot;T&quot; /&gt; must derive from &lt;see langword=&quot;__ComObject&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;typeparamref name=&quot;T&quot; /&gt; is a Windows Runtime type.">
        <typeparamref name="T" /> muss von <see langword="__ComObject" /> abgeleitet werden.  
  
- oder - 
 <typeparamref name="T" /> ist ein Windows-Runtime-Typ.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; cannot be converted to the &lt;paramref name=&quot;TWrapper&quot; /&gt; because it does not support all required interfaces.">
        <paramref name="o" /> kann nicht in <paramref name="TWrapper" /> konvertiert werden, da nicht alle erforderlichen Schnittstellen unterstützt werden.</exception>
      <returns vsli:raw="The newly wrapped object.">Das neu umschlossene Objekt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)">
      <summary vsli:raw="Frees all substructures that the specified unmanaged memory block points to.">Gibt alle Unterstrukturen frei, auf die der angegebene nicht verwaltete Speicherblock zeigt.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Ein Zeiger auf einen nicht verwalteten Speicherblock.</param>
      <param name="structuretype" vsli:raw="Type of a formatted class. This provides the layout information necessary to delete the buffer in the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">Typ einer formatierten Klasse. Damit werden die Layoutinformationen bereitgestellt, die zum Löschen des Puffers im <paramref name="ptr" />-Parameter benötigt werden.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structureType&quot; /&gt; has an automatic layout. Use sequential or explicit instead.">
        <paramref name="structureType" /> weist ein automatisch angelegtes Layout auf. Verwenden Sie stattdessen sequenzielles oder explizites Layout.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Frees all substructures of a specified type that the specified unmanaged memory block points to.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt]  
  
 Gibt alle Unterstrukturen eines angegebenen Typs frei, auf die der angegebene nicht verwaltete Speicherblock zeigt.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Ein Zeiger auf einen nicht verwalteten Speicherblock.</param>
      <typeparam name="T" vsli:raw="The type of the formatted structure. This provides the layout information necessary to delete the buffer in the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">Der Typ der formatierten Struktur. Damit werden die Layoutinformationen bereitgestellt, die zum Löschen des Puffers im <paramref name="ptr" />-Parameter benötigt werden.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;typeparamref name=&quot;T&quot; /&gt; has an automatic layout. Use sequential or explicit instead.">
        <typeparamref name="T" /> weist ein automatisch angelegtes Layout auf. Verwenden Sie stattdessen sequenzielles oder explizites Layout.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FinalReleaseComObject(System.Object)">
      <summary vsli:raw="Releases all references to a Runtime Callable Wrapper (RCW) by setting its reference count to 0.">Gibt alle Verweise auf einen Runtime Callable Wrapper (RCW) durch Festlegen des Verweiszählers auf 0 frei.</summary>
      <param name="o" vsli:raw="The RCW to be released.">Der RCW, der freigegeben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is not a valid COM object.">
        <paramref name="o" /> ist kein gültiges COM-Objekt.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The new value of the reference count of the RCW associated with the &lt;paramref name=&quot;o&quot; /&gt; parameter, which is 0 (zero) if the release is successful.">Der neue Wert des Verweiszählers des RCWs, der dem <paramref name="o" />-Parameter zugeordnet ist. Dieser ist bei erfolgreicher Freigabe 0 (null).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeBSTR(System.IntPtr)">
      <summary vsli:raw="Frees a &lt;see langword=&quot;BSTR&quot; /&gt; using the COM SysFreeString function.">Gibt einen <see langword="BSTR" /> mithilfe der COM-SysFreeString-Funktion frei.</summary>
      <param name="ptr" vsli:raw="The address of the BSTR to be freed.">Die Adresse des freizugebenden BSTR.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)">
      <summary vsli:raw="Frees a block of memory allocated by the unmanaged COM task memory allocator.">Gibt einen Speicherblock frei, der von der nicht verwalteten Speicherbelegungsfunktion für COM-Aufgaben belegt wurde.</summary>
      <param name="ptr" vsli:raw="The address of the memory to be freed.">Die Adresse des freizugebenden Speichers.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)">
      <summary vsli:raw="Frees memory previously allocated from the unmanaged memory of the process.">Gibt Speicherplatz frei, der zuvor aus dem nicht verwalteten Speicher des Prozesses belegt wurde.</summary>
      <param name="hglobal" vsli:raw="The handle returned by the original matching call to &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">Das Handle, das beim ursprünglichen übereinstimmenden Aufruf von <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> zurückgegeben wurde.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateGuidForType(System.Type)">
      <summary vsli:raw="Returns the globally unique identifier (GUID) for the specified type, or generates a GUID using the algorithm used by the Type Library Exporter (Tlbexp.exe).">Gibt die GUID (Globally Unique Identifier, globaler eindeutiger Bezeichner) für den angegebenen Typ zurück oder generiert eine GUID mithilfe des vom Type Library Exporter-Tool (TlbExp.exe) verwendeten Algorithmus.</summary>
      <param name="type" vsli:raw="The type to generate a GUID for.">Der Typ, für den eine GUID generiert werden soll.</param>
      <returns vsli:raw="An identifier for the specified type.">Ein Bezeichner für den angegebenen Typ.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GenerateProgIdForType(System.Type)">
      <summary vsli:raw="Returns a programmatic identifier (ProgID) for the specified type.">Gibt eine ProgID (Programmbezeichner) für den angegebenen Typ zurück.</summary>
      <param name="type" vsli:raw="The type to get a ProgID for.">Der Typ, für den eine ProgID abgerufen werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; parameter is not a class that can be create by COM. The class must be public, have a public parameterless constructor, and be COM visible.">Der <paramref name="type" />-Parameter ist keine Klasse, die von COM erstellt werden kann. Die Klasse muss öffentlich sein, einen öffentlichen parameterlosen Konstruktor aufweisen und für COM sichtbar sein.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;type&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="type" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="The ProgID of the specified type.">Die ProgID für den angegebenen Typ.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type)">
      <summary vsli:raw="Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is enabled by default.">Gibt einen Zeiger auf eine IUnknown-Schnittstelle zurück, die die angegebene Schnittstelle für das angegebene Objekt darstellt. Der benutzerdefinierte Zugriff auf Abfrageschnittstellen ist standardmäßig aktiviert.</summary>
      <param name="o" vsli:raw="The object that provides the interface.">Das Objekt, das die Schnittstelle bereitstellt.</param>
      <param name="T" vsli:raw="The type of interface that is requested.">Der Typ der angeforderten Schnittstelle.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is a generic type definition.">Der <typeparamref name="T" />-Parameter ist keine Schnittstelle.  
  
- oder - 
Der Typ ist für COM nicht sichtbar.  
  
- oder - 
Der <typeparamref name="T" />-Parameter ist eine generische Typdefinition.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter does not support the requested interface.">Der <paramref name="o" />-Parameter unterstützt die angeforderte Schnittstelle nicht.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="o" />-Parameter ist <see langword="null" />.  
  
- oder - 
Der <typeparamref name="T" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="The interface pointer that represents the specified interface for the object.">Der Schnittstellenzeiger, der die angegebene Schnittstelle für das Objekt darstellt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject(System.Object,System.Type,System.Runtime.InteropServices.CustomQueryInterfaceMode)">
      <summary vsli:raw="Returns a pointer to an IUnknown interface that represents the specified interface on the specified object. Custom query interface access is controlled by the specified customization mode.">Gibt einen Zeiger auf eine IUnknown-Schnittstelle zurück, die die angegebene Schnittstelle für das angegebene Objekt darstellt. Der benutzerdefinierte Zugriff auf die Abfrageschnittstelle wird vom angegebenen Anpassungsmodus gesteuert.</summary>
      <param name="o" vsli:raw="The object that provides the interface.">Das Objekt, das die Schnittstelle bereitstellt.</param>
      <param name="T" vsli:raw="The type of interface that is requested.">Der Typ der angeforderten Schnittstelle.</param>
      <param name="mode" vsli:raw="One of the enumeration values that indicates whether to apply an &lt;see langword=&quot;IUnknown::QueryInterface&quot; /&gt; customization that is supplied by an &lt;see cref=&quot;T:System.Runtime.InteropServices.ICustomQueryInterface&quot; /&gt;.">Einer der Enumerationswerte, die angeben, ob eine <see langword="IUnknown::QueryInterface" />-Anpassung übernommen werden soll, die von einer <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface" /> angegeben wird.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is a generic type definition.">Der <typeparamref name="T" />-Parameter ist keine Schnittstelle.  
  
- oder - 
Der Typ ist für COM nicht sichtbar.  
  
- oder - 
Der <typeparamref name="T" />-Parameter ist eine generische Typdefinition.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The object &lt;paramref name=&quot;o&quot; /&gt; does not support the requested interface.">Das Objekt <paramref name="o" /> unterstützt die angeforderte Schnittstelle nicht.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="o" />-Parameter ist <see langword="null" />.  
  
- oder - 
Der <typeparamref name="T" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="The interface pointer that represents the interface for the object.">Der Schnittstellenzeiger, der die Schnittstelle für das Objekt darstellt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComInterfaceForObject``2(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns a pointer to an IUnknown interface that represents the specified interface on an object of the specified type. Custom query interface access is enabled by default.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt] 
Gibt einen Zeiger auf eine IUnknown-Schnittstelle zurück, die die angegebene Schnittstelle für das Objekt des angegebenen Typs darstellt. Der benutzerdefinierte Zugriff auf Abfrageschnittstellen ist standardmäßig aktiviert.</summary>
      <param name="o" vsli:raw="The object that provides the interface.">Das Objekt, das die Schnittstelle bereitstellt.</param>
      <typeparam name="T" vsli:raw="The type of &lt;paramref name=&quot;o&quot; /&gt;.">Der <paramref name="o" />-Typ.</typeparam>
      <typeparam name="TInterface" vsli:raw="The type of interface to return.">Der Typ der zurückzugebenden Schnittstelle.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;TInterface&quot; /&gt; parameter is not an interface.&#xA;&#xA; -or-&#xA;&#xA; The type is not visible to COM.&#xA;&#xA; -or-&#xA;&#xA; The &lt;typeparamref name=&quot;T&quot; /&gt; parameter is an open generic type.">Der <paramref name="TInterface" />-Parameter ist keine Schnittstelle.  
  
- oder - 
Der Typ ist für COM nicht sichtbar.  
  
- oder - 
Der <typeparamref name="T" />-Parameter ist ein offener generischer Typ.</exception>
      <exception cref="T:System.InvalidCastException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter does not support the &lt;paramref name=&quot;TInterface&quot; /&gt; interface.">Der <paramref name="o" />-Parameter unterstützt die angeforderte <paramref name="TInterface" /> Schnittstelle nicht.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;o&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="o" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="The interface pointer that represents the &lt;paramref name=&quot;TInterface&quot; /&gt; interface.">Der Schnittstellenzeiger, der die <paramref name="TInterface" />-Schnittstelle darstellt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetComObjectData(System.Object,System.Object)">
      <summary vsli:raw="Retrieves data that is referenced by the specified key from the specified COM object.">Ruft Daten ab, auf die durch den angegebenen Schlüssel im angegebenen COM-Objekt verwiesen wird.</summary>
      <param name="obj" vsli:raw="The COM object that contains the data that you want.">Das COM-Objekt, das die gewünschten Daten enthält.</param>
      <param name="key" vsli:raw="The key in the internal hash table of &lt;paramref name=&quot;obj&quot; /&gt; to retrieve the data from.">Der Schlüssel in der internen Hashtabelle des <paramref name="obj" />, aus dem die Daten abgerufen werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="key" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a COM object.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;obj&quot; /&gt; is a Windows Runtime object.">
        <paramref name="obj" /> ist kein COM-Objekt.  
  
- oder - 
 <paramref name="obj" /> ist ein Windows-Runtime-Objekt.</exception>
      <returns vsli:raw="The data represented by the &lt;paramref name=&quot;key&quot; /&gt; parameter in the internal hash table of the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">Die Daten, die in der internen Hashtabelle des <paramref name="key" />-Parameters durch den <paramref name="obj" />-Parameter dargestellt werden.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(System.IntPtr,System.Type)">
      <summary vsli:raw="Converts an unmanaged function pointer to a delegate.">Konvertiert einen nicht verwalteten Funktionszeiger in einen Delegaten.</summary>
      <param name="ptr" vsli:raw="The unmanaged function pointer to be converted.">Der nicht verwaltete Funktionszeiger, der konvertiert werden soll.</param>
      <param name="t" vsli:raw="The type of the delegate to be returned.">Der Typ des zurückzugebenden Delegaten.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is not a delegate or is generic.">Der <paramref name="t" />-Parameter ist weder ein Delegat, noch ist er generisch.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;ptr&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="ptr" />-Parameter ist <see langword="null" />.  
  
- oder - 
Der <paramref name="t" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="A delegate instance that can be cast to the appropriate delegate type.">Eine Delegatinstanz, die in den entsprechenden Delegattyp umgewandelt werden kann.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an unmanaged function pointer to a delegate of a specified type.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt]  
  
 Konvertiert einen nicht verwalteten Funktionszeiger in einen Delegaten eines angegebenen Typs.</summary>
      <param name="ptr" vsli:raw="The unmanaged function pointer to convert.">Der nicht verwaltete Funktionszeiger, der konvertiert werden soll.</param>
      <typeparam name="TDelegate" vsli:raw="The type of the delegate to return.">Der Typ des zurückzugebenden Delegaten.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;TDelegate&quot; /&gt; generic parameter is not a delegate, or it is an open generic type.">Der <paramref name="TDelegate" /> generische Parameter ist kein Delegat, oder es ist ein offener generischer Typ.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;ptr&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="ptr" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="A instance of the specified delegate type.">Eine Instanz vom angegebenen Delegaten.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetEndComSlot(System.Type)">
      <summary vsli:raw="Retrieves the last slot in the virtual function table (v-table or VTBL) of a type when exposed to COM.">Ruft den letzten Slot in der virtuellen Funktionstabelle (Vtable oder VTBL) eines Typs ab, wenn dieser für COM verfügbar gemacht wird.</summary>
      <param name="t" vsli:raw="A type that represents an interface or class.">Ein Typ, der eine Schnittstelle oder eine Klasse darstellt.</param>
      <returns vsli:raw="The last VTBL slot of the interface when exposed to COM. If the &lt;paramref name=&quot;t&quot; /&gt; parameter is a class, the returned VTBL slot is the last slot in the interface that is generated from the class.">Der letzte VTBL-Slot der Schnittstelle, wenn dies für COM verfügbar gemacht wird. Wenn der <paramref name="t" />-Parameter eine Klasse ist, handelt es sich bei dem zurückgegebenen VTBL-Slot um den letzten Slot der Schnittstelle, die aus der Klasse generiert wird.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionCode">
      <summary vsli:raw="Retrieves a code that identifies the type of the exception that occurred.">Ruft einen Code ab, der den Typ der aufgetretenen Ausnahme bezeichnet.</summary>
      <returns vsli:raw="The type of the exception.">Der Typ der Ausnahme.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32)">
      <summary vsli:raw="Converts the specified HRESULT error code to a corresponding &lt;see cref=&quot;T:System.Exception&quot; /&gt; object.">Konvertiert den angegebenen HRESULT-Fehlercode in ein entsprechendes <see cref="T:System.Exception" />-Objekt.</summary>
      <param name="errorCode" vsli:raw="The HRESULT to be converted.">Das zu konvertierende HRESULT.</param>
      <returns vsli:raw="An object that represents the converted HRESULT, or &lt;see langword=&quot;null&quot; /&gt; if the HRESULT value doesn't represent an error code (for example, &lt;see langword=&quot;S_OK&quot; /&gt; or &lt;see langword=&quot;S_FALSE&quot; /&gt;).">Ein Objekt, das den konvertierten HRESULT-Wert darstellt, oder <see langword="null" />, wenn der HRESULT-Wert keinen Fehlercode darstellt (z.B. <see langword="S_OK" /> oder <see langword="S_FALSE" />).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionForHR(System.Int32,System.IntPtr)">
      <summary vsli:raw="Converts the specified HRESULT error code to a corresponding &lt;see cref=&quot;T:System.Exception&quot; /&gt; object, with additional error information passed in an IErrorInfo interface for the exception object.">Konvertiert den angegebenen HRESULT-Fehlercode in ein entsprechendes <see cref="T:System.Exception" />-Objekt, wobei zusätzliche Fehlerinformationen für das Ausnahmeobjekt in eine IErrorInfo-Schnittstelle übergeben werden.</summary>
      <param name="errorCode" vsli:raw="The HRESULT to be converted.">Das zu konvertierende HRESULT.</param>
      <param name="errorInfo" vsli:raw="A pointer to the &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface that provides more information about the error. You can specify &lt;c&gt;IntPtr(0)&lt;/c&gt; to use the current &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface, or &lt;c&gt;IntPtr(-1)&lt;/c&gt; to ignore the current &lt;see langword=&quot;IErrorInfo&quot; /&gt; interface and construct the exception just from the error code.">Ein Zeiger auf die <see langword="IErrorInfo" />-Schnittstelle, die weitere Informationen über den Fehler bereitstellt. Sie können <c>IntPtr(0)</c> angeben, um die aktuelle <see langword="IErrorInfo" />-Schnittstelle zu verwenden, oder <c>IntPtr(-1)</c>, um die aktuelle <see langword="IErrorInfo" />-Schnittstelle zu ignorieren und die Ausnahme direkt aus dem Fehlercode zu erstellen.</param>
      <returns vsli:raw="An object that represents the converted HRESULT and information obtained from &lt;paramref name=&quot;errorInfo&quot; /&gt;, or &lt;see langword=&quot;null&quot; /&gt; if an HRESULT value doesn't represent an error code (for example, &lt;see langword=&quot;S_OK&quot; /&gt; or &lt;see langword=&quot;S_FALSE&quot; /&gt;).">Ein Objekt, das den konvertierten HRESULT-Wert und von <paramref name="errorInfo" /> abgerufene Informationen darstellt, oder <see langword="null" />, wenn ein HRESULT-Wert keinen Fehlercode darstellt (z.B. <see langword="S_OK" /> oder <see langword="S_FALSE" />).</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetExceptionPointers">
      <summary vsli:raw="Retrieves a computer-independent description of an exception, and information about the state that existed for the thread when the exception occurred.">Ruft eine computerunabhängige Beschreibung einer Ausnahme und Informationen zu dem Zustand ab, der beim Auftreten der Ausnahme für den Thread vorlag.</summary>
      <returns vsli:raw="A pointer to an EXCEPTION_POINTERS structure.">Ein Zeiger auf eine EXCEPTION_POINTERS-Struktur.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate(System.Delegate)">
      <summary vsli:raw="Converts a delegate into a function pointer that is callable from unmanaged code.">Konvertiert einen Delegaten in einen Funktionszeiger, der aus nicht verwaltetem Code aufgerufen werden kann.</summary>
      <param name="d" vsli:raw="The delegate to be passed to unmanaged code.">Der Delegat, der an nicht verwalteten Code übergeben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is a generic type definition.">Der <paramref name="d" />-Parameter ist eine generische Typdefinition.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="d" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.">Ein Wert, der an nicht verwalteten Code übergeben werden kann, der mit diesem Wert wiederum den zugrunde liegenden verwalteten Delegaten aufrufen kann.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetFunctionPointerForDelegate``1(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts a delegate of a specified type to a function pointer that is callable from unmanaged code.">[Wird nur im .NET Framework 4.5.1 und höheren Versionen unterstützt]  
  
 Konvertiert einen Delegaten eines angegebenen Typs in einen Funktionszeiger, der aus nicht verwaltetem Code aufgerufen werden kann.</summary>
      <param name="d" vsli:raw="The delegate to be passed to unmanaged code.">Der Delegat, der an nicht verwalteten Code übergeben werden soll.</param>
      <typeparam name="TDelegate" vsli:raw="The type of delegate to convert.">Der Typ des zu konvertierenden Delegaten.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is a generic type definition.">Der <paramref name="d" />-Parameter ist eine generische Typdefinition.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;d&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="d" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="A value that can be passed to unmanaged code, which, in turn, can use it to call the underlying managed delegate.">Ein Wert, der an nicht verwalteten Code übergeben werden kann, der mit diesem Wert wiederum den zugrunde liegenden verwalteten Delegaten aufrufen kann.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHINSTANCE(System.Reflection.Module)">
      <summary vsli:raw="Returns the instance handle (HINSTANCE) for the specified module.">Gibt das Instanzhandle (HINSTANCE) für das angegebene Modul zurück.</summary>
      <param name="m" vsli:raw="The module whose HINSTANCE is desired.">Das Modul mit dem gewünschten HINSTANCE.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="m" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="The HINSTANCE for &lt;paramref name=&quot;m&quot; /&gt;; or -1 if the module does not have an HINSTANCE.">Das HINSTANCE für <paramref name="m" /> oder -1, wenn das Modul über kein HINSTANCE verfügt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForException(System.Exception)">
      <summary vsli:raw="Converts the specified exception to an HRESULT.">Konvertiert die angegebene Ausnahme in ein HRESULT.</summary>
      <param name="e" vsli:raw="The exception to convert to an HRESULT.">Die in ein HRESULT zu konvertierende Ausnahme.</param>
      <returns vsli:raw="The HRESULT mapped to the supplied exception.">Das HRESULT, das der bereitgestellten Ausnahme zugeordnet ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetHRForLastWin32Error">
      <summary vsli:raw="Returns the HRESULT corresponding to the last error incurred by Win32 code executed using &lt;see cref=&quot;T:System.Runtime.InteropServices.Marshal&quot; /&gt;.">Gibt das HRESULT für den letzten Fehler zurück, der durch einen mit <see cref="T:System.Runtime.InteropServices.Marshal" /> ausgeführten Win32-Code ausgelöst wurde.</summary>
      <returns vsli:raw="The HRESULT corresponding to the last Win32 error code.">Das HRESULT für den letzten Win32-Fehlercode.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIDispatchForObject(System.Object)">
      <summary vsli:raw="Returns an IDispatch interface from a managed object.">Gibt eine IDispatch-Schnittstelle aus einem verwalteten Objekt zurück.</summary>
      <param name="o" vsli:raw="The object whose &lt;see langword=&quot;IDispatch&quot; /&gt; interface is requested.">Das Objekt, dessen <see langword="IDispatch" />-Schnittstelle angefordert wird.</param>
      <exception cref="T:System.InvalidCastException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; does not support the requested interface.">
        <paramref name="o" /> unterstützt die angeforderte Schnittstelle nicht.</exception>
      <returns vsli:raw="The &lt;see langword=&quot;IDispatch&quot; /&gt; pointer for the &lt;paramref name=&quot;o&quot; /&gt; parameter.">Der <see langword="IDispatch" />-Zeiger für den <paramref name="o" />-Parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetIUnknownForObject(System.Object)">
      <summary vsli:raw="Returns an IUnknown interface from a managed object.">Gibt eine IUnknown-Schnittstelle von einem verwalteten Objekt zurück.</summary>
      <param name="o" vsli:raw="The object whose &lt;see langword=&quot;IUnknown&quot; /&gt; interface is requested.">Das Objekt, dessen <see langword="IUnknown" />-Schnittstelle angefordert wird.</param>
      <returns vsli:raw="The &lt;see langword=&quot;IUnknown&quot; /&gt; pointer for the &lt;paramref name=&quot;o&quot; /&gt; parameter.">Der <see langword="IUnknown" />-Zeiger für den <paramref name="o" />-Parameter.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetLastWin32Error">
      <summary vsli:raw="Returns the error code returned by the last unmanaged function that was called using platform invoke that has the &lt;see cref=&quot;F:System.Runtime.InteropServices.DllImportAttribute.SetLastError&quot; /&gt; flag set.">Gibt den Fehlercode zurück, der durch die letzte nicht verwaltete Funktion zurückgegeben wurde, die mit einem Plattformaufruf aufgerufen wurde und bei der das <see cref="F:System.Runtime.InteropServices.DllImportAttribute.SetLastError" />-Flag festgelegt wurde.</summary>
      <returns vsli:raw="The last error code set by a call to the Win32 SetLastError function.">Der letzte durch einen Aufruf der Win32-SetLastError-Funktion festgelegte Fehlercode.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject(System.Object,System.IntPtr)">
      <summary vsli:raw="Converts an object to a COM VARIANT.">Konvertiert ein Objekt in einen COM-VARIANT.</summary>
      <param name="obj" vsli:raw="The object for which to get a COM VARIANT.">Das Objekt, für das ein COM-VARIANT abgerufen werden soll.</param>
      <param name="pDstNativeVariant" vsli:raw="A pointer to receive the VARIANT that corresponds to the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">Ein Zeiger, der den VARIANT empfangen soll, der dem <paramref name="obj" />-Parameter entspricht.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;obj&quot; /&gt; parameter is an instance of a generic type.">Der <paramref name="obj" />-Parameter ist eine Instanz eines generischen Typs.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetNativeVariantForObject``1(``0,System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an object of a specified type to a COM VARIANT.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt]  
  
 Konvertiert ein Objekt eines angegebenen Typs in eine COM VARIANTE.</summary>
      <param name="obj" vsli:raw="The object for which to get a COM VARIANT.">Das Objekt, für das ein COM-VARIANT abgerufen werden soll.</param>
      <param name="pDstNativeVariant" vsli:raw="A pointer to receive the VARIANT that corresponds to the &lt;paramref name=&quot;obj&quot; /&gt; parameter.">Ein Zeiger, der den VARIANT empfangen soll, der dem <paramref name="obj" />-Parameter entspricht.</param>
      <typeparam name="T" vsli:raw="The type of the object to convert.">Der Typ, des Objekts, das konvertiert werden soll.</typeparam>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForIUnknown(System.IntPtr)">
      <summary vsli:raw="Returns an instance of a type that represents a COM object by a pointer to its IUnknown interface.">Gibt eine Instanz eines Typs zurück, der ein COM-Objekt mit einem Zeiger auf die IUnknown-Schnittstelle darstellt.</summary>
      <param name="pUnk" vsli:raw="A pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">Ein Zeiger auf die <see langword="IUnknown" />-Schnittstelle.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;pUnk&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">
        <paramref name="pUnk" /> ist <see cref="F:System.IntPtr.Zero" />.</exception>
      <returns vsli:raw="An object that represents the specified unmanaged COM object.">Ein Objekt, das das angegebene nicht verwaltete COM-Objekt darstellt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant(System.IntPtr)">
      <summary vsli:raw="Converts a COM VARIANT to an object.">Konvertiert einen COM-VARIANT in ein Objekt.</summary>
      <param name="pSrcNativeVariant" vsli:raw="A pointer to a COM VARIANT.">Ein Zeiger auf ein COM-VARIANT.</param>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; is not a valid VARIANT type.">
        <paramref name="pSrcNativeVariant" /> ist kein gültiger VARIANT-Typ.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; has an unsupported type.">
        <paramref name="pSrcNativeVariant" /> weist einen nicht unterstützten Typ auf.</exception>
      <returns vsli:raw="An object that corresponds to the &lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; parameter.">Ein Objekt, das dem <paramref name="pSrcNativeVariant" />-Parameter entspricht.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectForNativeVariant``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts a COM VARIANT to an object of a specified type.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt]  
  
 Konvertiert ein COM VARIANTE in ein Objekt eines angegebenen Typs.</summary>
      <param name="pSrcNativeVariant" vsli:raw="A pointer to a COM VARIANT.">Ein Zeiger auf ein COM-VARIANT.</param>
      <typeparam name="T" vsli:raw="The type to which to convert the COM VARIANT.">Der Typ, in den die COM VARIANTE konvertiert werden soll.</typeparam>
      <exception cref="T:System.Runtime.InteropServices.InvalidOleVariantTypeException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; is not a valid VARIANT type.">
        <paramref name="pSrcNativeVariant" /> ist kein gültiger VARIANT-Typ.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="&lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; has an unsupported type.">
        <paramref name="pSrcNativeVariant" /> weist einen nicht unterstützten Typ auf.</exception>
      <returns vsli:raw="An object of the specified type that corresponds to the &lt;paramref name=&quot;pSrcNativeVariant&quot; /&gt; parameter.">Ein Objekt des angegebenen Typs, der dem <paramref name="pSrcNativeVariant" />-Parameter entspricht.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants(System.IntPtr,System.Int32)">
      <summary vsli:raw="Converts an array of COM VARIANTs to an array of objects.">Konvertiert ein Array mit COM-VARIANTs in ein Array von Objekten.</summary>
      <param name="aSrcNativeVariant" vsli:raw="A pointer to the first element of an array of COM VARIANTs.">Ein Zeiger auf das erste Element eines Arrays von COM-VARIANTs.</param>
      <param name="cVars" vsli:raw="The count of COM VARIANTs in &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">Die Zählung der COM-VARIANT in <paramref name="aSrcNativeVariant" />.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;cVars&quot; /&gt; is a negative number.">
        <paramref name="cVars" /> ist eine negative Zahl.</exception>
      <returns vsli:raw="An object array that corresponds to &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">Ein Objektarray, das diesem <paramref name="aSrcNativeVariant" /> entspricht.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetObjectsForNativeVariants``1(System.IntPtr,System.Int32)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Converts an array of COM VARIANTs to an array of a specified type.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt]  
  
 Konvertiert ein Array mit COM-VARIANT in ein Array eines angegebenen Typs.</summary>
      <param name="aSrcNativeVariant" vsli:raw="A pointer to the first element of an array of COM VARIANTs.">Ein Zeiger auf das erste Element eines Arrays von COM-VARIANTs.</param>
      <param name="cVars" vsli:raw="The count of COM VARIANTs in &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">Die Zählung der COM-VARIANT in <paramref name="aSrcNativeVariant" />.</param>
      <typeparam name="T" vsli:raw="The type of the array to return.">Der Typ des zurückzugebenden Arrays.</typeparam>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;cVars&quot; /&gt; is a negative number.">
        <paramref name="cVars" /> ist eine negative Zahl.</exception>
      <returns vsli:raw="An array of &lt;typeparamref name=&quot;T&quot; /&gt; objects that corresponds to &lt;paramref name=&quot;aSrcNativeVariant&quot; /&gt;.">Ein Array von <typeparamref name="T" />-Objekten, das <paramref name="aSrcNativeVariant" /> entspricht.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetStartComSlot(System.Type)">
      <summary vsli:raw="Gets the first slot in the virtual function table (v-table or VTBL) that contains user-defined methods.">Ruft den ersten Slot in der VTBL (Vtable oder virtuelle Funktionstabelle) ab, der benutzerdefinierte Methoden enthält.</summary>
      <param name="t" vsli:raw="A type that represents an interface or a class.">Ein Typ, der eine Schnittstelle oder eine Klasse darstellt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is not visible from COM.">
        <paramref name="t" /> ist für COM nicht sichtbar.</exception>
      <returns vsli:raw="The first VTBL slot that contains user-defined methods. The first slot is 3 if the interface is based on IUnknown, and 7 if the interface is based on IDispatch.">Der erste VTBL-Slot, der benutzerdefinierte Methoden enthält. Der erste Slot lautet 3, wenn die Schnittstelle auf IUnknown basiert. Er lautet 7, wenn die Schnittstelle auf IDispatch basiert.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypedObjectForIUnknown(System.IntPtr,System.Type)">
      <summary vsli:raw="Returns a managed object of a specified type that represents a COM object.">Gibt ein verwaltetes Objekt eines angegebenen Typs zurück, das ein COM-Objekt darstellt.</summary>
      <param name="pUnk" vsli:raw="A pointer to the &lt;see langword=&quot;IUnknown&quot; /&gt; interface of the unmanaged object.">Ein Zeiger auf die <see langword="IUnknown" />-Schnittstelle des nicht verwalteten Objekts.</param>
      <param name="t" vsli:raw="The type of the requested managed class.">Der Typ der angeforderten verwalteten Klasse.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;t&quot; /&gt; is not attributed with &lt;see cref=&quot;T:System.Runtime.InteropServices.ComImportAttribute&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;t&quot; /&gt; is a Windows Runtime type.">
        <paramref name="t" /> ist nicht mit dem Attribut <see cref="T:System.Runtime.InteropServices.ComImportAttribute" /> versehen.  
  
- oder - 
 <paramref name="t" /> ist ein Windows-Runtime-Typ.</exception>
      <returns vsli:raw="An instance of the class corresponding to the &lt;see cref=&quot;T:System.Type&quot; /&gt; object that represents the requested unmanaged COM object.">Eine Instanz der Klasse , die dem <see cref="T:System.Type" />-Objekt entspricht, das das angeforderte nicht verwaltete COM-Objekt darstellt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeFromCLSID(System.Guid)">
      <summary vsli:raw="Returns the type associated with the specified class identifier (CLSID).">Gibt den Typ zurück, dem die angegebene Klassen-ID (CLSID) zugeordnet ist.</summary>
      <param name="clsid" vsli:raw="The CLSID of the type to return.">Die CLSID des zurückzugebenden Typs.</param>
      <returns vsli:raw="&lt;see langword=&quot;System.__ComObject&quot; /&gt; regardless of whether the CLSID is valid.">
        <see langword="System.__ComObject" /> unabhängig von der Gültigkeit der CLSID.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetTypeInfoName(System.Runtime.InteropServices.ComTypes.ITypeInfo)">
      <summary vsli:raw="Retrieves the name of the type represented by an ITypeInfo object.">Ruft den Namen des Typs ab, der durch ein ITypeInfo-Objekt dargestellt wird.</summary>
      <param name="typeInfo" vsli:raw="An object that represents an &lt;see langword=&quot;ITypeInfo&quot; /&gt; pointer.">Ein Objekt, das einen <see langword="ITypeInfo" />-Zeiger darstellt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;typeInfo&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="typeInfo" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="The name of the type that the &lt;paramref name=&quot;typeInfo&quot; /&gt; parameter points to.">Der Name des Typs, auf den der <paramref name="typeInfo" />-Parameter zeigt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.GetUniqueObjectForIUnknown(System.IntPtr)">
      <summary vsli:raw="Creates a unique Runtime Callable Wrapper (RCW) object for a given IUnknown interface.">Erstellt ein eindeutiges Runtime Callable Wrapper-Objekt (RCW) für eine angegebene IUnknown-Schnittstelle.</summary>
      <param name="unknown" vsli:raw="A managed pointer to an &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">Ein verwalteter Zeiger auf eine <see langword="IUnknown" />-Schnittstelle.</param>
      <returns vsli:raw="A unique RCW for the specified &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">Ein eindeutiger RCW für die angegebene <see langword="IUnknown" />-Schnittstelle.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsComObject(System.Object)">
      <summary vsli:raw="Indicates whether a specified object represents a COM object.">Gibt an, ob ein angegebenes Objekt ein COM-Objekt darstellt.</summary>
      <param name="o" vsli:raw="The object to check.">Das zu überprüfende Objekt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the &lt;paramref name=&quot;o&quot; /&gt; parameter is a COM type; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der <paramref name="o" />-Parameter ein COM-Typ ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.IsTypeVisibleFromCom(System.Type)">
      <summary vsli:raw="Indicates whether a type is visible to COM clients.">Gibt an, ob ein Typ für COM-Clients sichtbar ist.</summary>
      <param name="t" vsli:raw="The type to check for COM visibility.">Der Typ, der auf Sichtbarkeit für COM zu überprüfen ist.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the type is visible to COM; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Typ für COM sichtbar ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf(System.Type,System.String)">
      <summary vsli:raw="Returns the field offset of the unmanaged form of the managed class.">Gibt den Feldoffset der nicht verwalteten Form der verwalteten Klasse zurück.</summary>
      <param name="t" vsli:raw="A value type or formatted reference type that specifies the managed class. You must apply the &lt;see cref=&quot;T:System.Runtime.InteropServices.StructLayoutAttribute&quot; /&gt; to the class.">Ein Werttyp oder formatierter Referenztyp, der die verwaltete Klasse angibt. Sie müssen das <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> auf die Klasse anwenden.</param>
      <param name="fieldName" vsli:raw="The field within the &lt;paramref name=&quot;t&quot; /&gt; parameter.">Das Feld im <paramref name="t" />-Parameter.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The class cannot be exported as a structure or the field is nonpublic. Beginning with the .NET Framework version 2.0, the field may be private.">Die Klasse kann nicht als Struktur exportiert werden, oder das Feld ist nicht öffentlich. Ab .NET Framework, Version 2.0, ist das Feld möglicherweise privat.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="t" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="The offset, in bytes, for the &lt;paramref name=&quot;fieldName&quot; /&gt; parameter within the specified class that is declared by platform invoke.">Der Offset in Bytes für den <paramref name="fieldName" />-Parameter in der durch Plattformaufrufe deklarierten angegebenen Klasse.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.OffsetOf``1(System.String)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the field offset of the unmanaged form of a specified managed class.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt]  
  
 Gibt den Feldoffset der nicht verwalteten Form einer festgelegten verwalteten Klasse zurück.</summary>
      <param name="fieldName" vsli:raw="The name of the field in the &lt;paramref name=&quot;T&quot; /&gt; type.">Der Name des Felds im <paramref name="T" /> Typ.</param>
      <typeparam name="T" vsli:raw="A managed value type or formatted reference type. You must apply the &lt;see cref=&quot;T:System.Runtime.InteropServices.StructLayoutAttribute&quot; /&gt; attribute to the class.">Ein verwalteter Wert- oder formatierter Verweistyp. Sie müssen das <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />-Attribut auf die Klasse anwenden.</typeparam>
      <returns vsli:raw="The offset, in bytes, for the &lt;paramref name=&quot;fieldName&quot; /&gt; parameter within the specified class that is declared by platform invoke.">Der Offset in Bytes für den <paramref name="fieldName" />-Parameter in der durch Plattformaufrufe deklarierten angegebenen Klasse.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Prelink(System.Reflection.MethodInfo)">
      <summary vsli:raw="Executes one-time method setup tasks without calling the method.">Führt einmalige Aufgaben zur Methodeneinrichtung aus, ohne die Methode aufzurufen.</summary>
      <param name="m" vsli:raw="The method to be checked.">Die Methode, die überprüft werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="m" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;m&quot; /&gt; parameter is not a &lt;see cref=&quot;T:System.Reflection.MethodInfo&quot; /&gt; object.">Der <paramref name="m" />-Parameter ist kein <see cref="T:System.Reflection.MethodInfo" />-Objekt.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PrelinkAll(System.Type)">
      <summary vsli:raw="Performs a pre-link check for all methods on a class.">Führt eine Linkervorstufen-Prüfung für alle Methoden einer Klasse durch.</summary>
      <param name="c" vsli:raw="The class whose methods are to be checked.">Die Klasse, deren Methoden überprüft werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;c&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="c" />-Parameter ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr)">
      <summary vsli:raw="Copies all characters up to the first null character from an unmanaged ANSI or UTF-8 string to a managed &lt;see cref=&quot;T:System.String&quot; /&gt;, and widens each character to UTF-16.">Kopiert alle Zeichen bis zum ersten NULL-Zeichen aus einer nicht verwalteten ANSI- oder UTF-8-Zeichenfolge in einen verwalteten <see cref="T:System.String" /> und erweitert die einzelnen ANSI-Zeichen zu UTF-16.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Die Adresse des ersten Zeichens der nicht verwalteten Zeichenfolge.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string. If &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;, the method returns a null string.">Eine verwaltete Zeichenfolge, die eine Kopie der nicht verwalteten Zeichenfolge enthält. Wenn <paramref name="ptr" /> den Wert <see langword="null" /> aufweist, gibt die Methode eine NULL-Zeichenfolge zurück.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAnsi(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt;, copies a specified number of characters from an unmanaged ANSI or UTF-8 string into it, and widens each character to UTF-16.">Belegt einen verwalteten <see cref="T:System.String" />, kopiert eine angegebene Anzahl von Zeichen aus einer nicht verwalteten ANSI- oder UTF-8-Zeichenfolge hinein und erweitert jedes ANSI-Zeichen zu einem UTF-16.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Die Adresse des ersten Zeichens der nicht verwalteten Zeichenfolge.</param>
      <param name="len" vsli:raw="The byte count of the input string to copy.">Die zu kopierende Anzahl von Bytes aus der Eingabezeichenfolge.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; is less than zero.">
        <paramref name="len" /> ist kleiner als Null.</exception>
      <returns vsli:raw="A managed string that holds a copy of the native string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Eine verwaltete Zeichenfolge, die eine Kopie der systemeigenen Zeichenfolge enthält, wenn der Wert des <paramref name="ptr" />-Parameters nicht <see langword="null" /> ist. Andernfalls gibt diese Methode <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from a string stored in unmanaged memory into it.">Reserviert einen verwalteten <see cref="T:System.String" /> und kopiert alle Zeichen bis zum ersten NULL-Zeichen aus einer Zeichenfolge hinein, die im nicht verwalteten Speicher gespeichert ist.</summary>
      <param name="ptr" vsli:raw="For Unicode platforms, the address of the first Unicode character.&#xA;&#xA; -or-&#xA;&#xA; For ANSI platforms, the address of the first ANSI character.">Für Unicode-Plattformen die Adresse des ersten Unicode-Zeichens.  
  
 - oder -  
  
 Für ANSI-Plattformen die Adresse des ersten ANSI-Zeichens.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Eine verwaltete Zeichenfolge, die eine Kopie der nicht verwalteten Zeichenfolge enthält, wenn der Wert des <paramref name="ptr" />-Parameters nicht <see langword="null" /> ist. Andernfalls gibt diese Methode <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringAuto(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies the specified number of characters from a string stored in unmanaged memory into it.">Reserviert einen verwalteten <see cref="T:System.String" /> und kopiert die angegebene Anzahl von Zeichen aus einer in nicht verwaltetem Speicher gespeicherten Zeichenfolge hinein.</summary>
      <param name="ptr" vsli:raw="For Unicode platforms, the address of the first Unicode character.&#xA;&#xA; -or-&#xA;&#xA; For ANSI platforms, the address of the first ANSI character.">Für Unicode-Plattformen die Adresse des ersten Unicode-Zeichens.  
  
 - oder -  
  
 Für ANSI-Plattformen die Adresse des ersten ANSI-Zeichens.</param>
      <param name="len" vsli:raw="The number of characters to copy.">Die Anzahl der zu kopierenden Zeichen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;len&quot; /&gt; is less than zero.">
        <paramref name="len" /> ist kleiner als Null.</exception>
      <returns vsli:raw="A managed string that holds a copy of the native string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Eine verwaltete Zeichenfolge, die eine Kopie der systemeigenen Zeichenfolge enthält, wenn der Wert des <paramref name="ptr" />-Parameters nicht <see langword="null" /> ist. Andernfalls gibt diese Methode <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringBSTR(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a binary string (BSTR) stored in unmanaged memory into it.">Reserviert einen verwalteten <see cref="T:System.String" /> und kopiert eine binäre Zeichenfolge (BSTR) aus dem nicht verwalteten Speicher hinein.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Die Adresse des ersten Zeichens der nicht verwalteten Zeichenfolge.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; equals &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">
        <paramref name="ptr" /> ist gleich <see cref="F:System.IntPtr.Zero" />.</exception>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string.">Eine verwaltete Zeichenfolge, die eine Kopie der nicht verwalteten Zeichenfolge enthält.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from an unmanaged Unicode string into it.">Reserviert einen verwalteten <see cref="T:System.String" /> und kopiert alle Zeichen bis zum ersten NULL-Zeichen aus einer nicht verwalteten Unicode-Zeichenfolge hinein.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Die Adresse des ersten Zeichens der nicht verwalteten Zeichenfolge.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Eine verwaltete Zeichenfolge, die eine Kopie der nicht verwalteten Zeichenfolge enthält, wenn der Wert des <paramref name="ptr" />-Parameters nicht <see langword="null" /> ist. Andernfalls gibt diese Methode <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUni(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a specified number of characters from an unmanaged Unicode string into it.">Reserviert einen verwalteten <see cref="T:System.String" /> und kopiert eine angegebene Anzahl von Zeichen aus einer nicht verwalteten Unicode-Zeichenfolge hinein.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Die Adresse des ersten Zeichens der nicht verwalteten Zeichenfolge.</param>
      <param name="len" vsli:raw="The number of Unicode characters to copy.">Die Anzahl der zu kopierenden Unicode-Zeichen.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Eine verwaltete Zeichenfolge, die eine Kopie der nicht verwalteten Zeichenfolge enthält, wenn der Wert des <paramref name="ptr" />-Parameters nicht <see langword="null" /> ist. Andernfalls gibt diese Methode <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies all characters up to the first null character from an unmanaged UTF-8 string into it.">Reserviert einen verwalteten <see cref="T:System.String" /> und kopiert alle Zeichen bis zum ersten NULL-Zeichen aus einer nicht verwalteten UTF-8-Zeichenfolge hinein.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Die Adresse des ersten Zeichens der nicht verwalteten Zeichenfolge.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Eine verwaltete Zeichenfolge, die eine Kopie der nicht verwalteten Zeichenfolge enthält, wenn der Wert des <paramref name="ptr" />-Parameters nicht <see langword="null" /> ist. Andernfalls gibt diese Methode <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStringUTF8(System.IntPtr,System.Int32)">
      <summary vsli:raw="Allocates a managed &lt;see cref=&quot;T:System.String&quot; /&gt; and copies a specified number of bytes from an unmanaged UTF8 string into it.">Reserviert einen verwalteten <see cref="T:System.String" /> und kopiert eine angegebene Anzahl von Zeichen aus einer nicht verwalteten UTF-8-Zeichenfolge hinein.</summary>
      <param name="ptr" vsli:raw="The address of the first character of the unmanaged string.">Die Adresse des ersten Zeichens der nicht verwalteten Zeichenfolge.</param>
      <param name="byteLen" vsli:raw="The number of bytes to copy.">Die Anzahl der zu kopierenden Bytes.</param>
      <returns vsli:raw="A managed string that holds a copy of the unmanaged string if the value of the &lt;paramref name=&quot;ptr&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;; otherwise, this method returns &lt;see langword=&quot;null&quot; /&gt;.">Eine verwaltete Zeichenfolge, die eine Kopie der nicht verwalteten Zeichenfolge enthält, wenn der Wert des <paramref name="ptr" />-Parameters nicht <see langword="null" /> ist. Andernfalls gibt diese Methode <see langword="null" /> zurück.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Object)">
      <summary vsli:raw="Marshals data from an unmanaged block of memory to a managed object.">Marshallt Daten aus einem nicht verwalteten Speicherblock zu einem verwalteten Objekt.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Ein Zeiger auf einen nicht verwalteten Speicherblock.</param>
      <param name="structure" vsli:raw="The object to which the data is to be copied. This must be an instance of a formatted class.">Das Objekt, in das die Daten kopiert werden sollen. Dabei muss es sich um eine Instanz einer formatierten Klasse handeln.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="Structure layout is not sequential or explicit.&#xA;&#xA; -or-&#xA;&#xA; Structure is a boxed value type.">Das Strukturlayout ist weder sequenziell noch explizit.  
  
 - oder -  
  
 Die Struktur ist ein geschachtelter Werttyp.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure(System.IntPtr,System.Type)">
      <summary vsli:raw="Marshals data from an unmanaged block of memory to a newly allocated managed object of the specified type.">Marshallt Daten aus einem nicht verwalteten Speicherblock zu einem neu belegten, verwalteten Objekt des angegebenen Typs.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Ein Zeiger auf einen nicht verwalteten Speicherblock.</param>
      <param name="structureType" vsli:raw="The type of object to be created. This object must represent a formatted class or a structure.">Der Typ des zu erstellenden Objekts. Dieses Objekt muss eine formatierte Klasse oder eine Struktur darstellen.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;structureType&quot; /&gt; parameter layout is not sequential or explicit.&#xA;&#xA; -or-&#xA;&#xA; The &lt;paramref name=&quot;structureType&quot; /&gt; parameter is a generic type definition.">Das <paramref name="structureType" />-Parameterlayout ist weder sequenziell noch explizit.  
  
- oder - 
Der <paramref name="structureType" />-Parameter ist eine generische Typdefinition.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;structureType&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="structureType" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.MissingMethodException" vsli:raw="The class specified by &lt;paramref name=&quot;structureType&quot; /&gt; does not have an accessible parameterless constructor.">Die von <paramref name="structureType" /> angegebene Klasse besitzt keinen zugänglichen parameterlosen Konstruktor.</exception>
      <returns vsli:raw="A managed object containing the data pointed to by the &lt;paramref name=&quot;ptr&quot; /&gt; parameter.">Ein verwaltetes Objekt mit Daten, auf die der <paramref name="ptr" />-Parameter zeigt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from an unmanaged block of memory to a newly allocated managed object of the type specified by a generic type parameter.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt]  
  
 Marshallt Daten aus einem nicht verwalteten Speicherblock zu einem neu belegten, verwalteten Objekt des von einem generischen Typparameter angegebenen Typs.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Ein Zeiger auf einen nicht verwalteten Speicherblock.</param>
      <typeparam name="T" vsli:raw="The type of the object to which the data is to be copied. This must be a formatted class or a structure.">Der Typ des Objekts, in das die Daten kopiert werden sollen. Dies muss eine formatierte Klasse oder eine Struktur sein.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="The layout of &lt;typeparamref name=&quot;T&quot; /&gt; is not sequential or explicit.">Das Layout von <typeparamref name="T" />ist weder sequenziell noch explizit.</exception>
      <exception cref="T:System.MissingMethodException" vsli:raw="The class specified by &lt;typeparamref name=&quot;T&quot; /&gt; does not have an accessible parameterless constructor.">Die von <typeparamref name="T" /> angegebene Klasse besitzt keinen zugänglichen parameterlosen Konstruktor.</exception>
      <returns vsli:raw="A managed object that contains the data that the &lt;paramref name=&quot;ptr&quot; /&gt; parameter points to.">Ein verwaltetes Objekt mit Daten, auf die der <paramref name="ptr" />-Parameter zeigt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.PtrToStructure``1(System.IntPtr,``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from an unmanaged block of memory to a managed object of the specified type.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt]  
  
 Marshallt Daten aus einem nicht verwalteten Speicherblock zu einem verwalteten Objekt eines festgelegten Typs.</summary>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory.">Ein Zeiger auf einen nicht verwalteten Speicherblock.</param>
      <param name="structure" vsli:raw="The object to which the data is to be copied.">Das Objekt, in das die Daten kopiert werden sollen.</param>
      <typeparam name="T" vsli:raw="The type of &lt;paramref name=&quot;structure&quot; /&gt;. This must be a formatted class.">Der <paramref name="structure" />-Typ. Muss eine formatierte Klasse sein.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="Structure layout is not sequential or explicit.">Das Strukturlayout ist weder sequenziell noch explizit.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.QueryInterface(System.IntPtr,System.Guid@,System.IntPtr@)">
      <summary vsli:raw="Requests a pointer to a specified interface from a COM object.">Fordert einen Zeiger auf eine angegebene Schnittstelle von einem COM-Objekt an.</summary>
      <param name="pUnk" vsli:raw="The interface to be queried.">Die abzufragende Schnittstelle.</param>
      <param name="iid" vsli:raw="The interface identifier (IID) of the requested interface.">Der Schnittstellenbezeichner (Interface Identifier, IID) der angeforderten Schnittstelle.</param>
      <param name="ppv" vsli:raw="When this method returns, contains a reference to the returned interface.">Enthält nach dem Beenden der Methode einen Verweis auf die zurückgegebene Schnittstelle.</param>
      <returns vsli:raw="An HRESULT that indicates the success or failure of the call.">Ein HRESULT, das den Erfolg oder Fehler des Aufrufs angibt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr)">
      <summary vsli:raw="Reads a single byte from unmanaged memory.">Liest ein einzelnes Byte aus dem nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Die Adresse im nicht verwalteten Speicher, an der gelesen werden soll.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> ist kein erkanntes Format.  
  
- oder - 
 <paramref name="ptr" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="ptr" /> ist ungültig.</exception>
      <returns vsli:raw="The byte read from unmanaged memory.">Das aus dem nicht verwalteten Arbeitsspeicher gelesene Byte.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a single byte at a given offset (or index) from unmanaged memory.">Liest ein einzelnes Byte an einem angegebenen Offset (oder Index) aus dem nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Die Basisadresse im nicht verwalteten Speicher, an der gelesen werden soll.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Lesen hinzugefügt wird.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <returns vsli:raw="The byte read from unmanaged memory at the given offset.">Das aus dem nicht verwalteten Arbeitsspeicher am angegebenen Offset gelesene Byte.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadByte(System.Object,System.Int32)">
      <summary vsli:raw="Reads a single byte at a given offset (or index) from unmanaged memory.">Liest ein einzelnes Byte an einem angegebenen Offset (oder Index) aus dem nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Die Basisadresse im nicht verwalteten Speicher des Quellobjekts.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Lesen hinzugefügt wird.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> ist ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt. Diese Methode akzeptiert keine <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Parameter.</exception>
      <returns vsli:raw="The byte read from unmanaged memory at the given offset.">Das aus dem nicht verwalteten Arbeitsspeicher am angegebenen Offset gelesene Byte.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr)">
      <summary vsli:raw="Reads a 16-bit signed integer from unmanaged memory.">Liest eine 16-Bit-Ganzzahl mit Vorzeichen aus dem nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Die Adresse im nicht verwalteten Speicher, an der gelesen werden soll.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> ist kein erkanntes Format.  
  
- oder - 
 <paramref name="ptr" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="ptr" /> ist ungültig.</exception>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory.">Die 16-Bit-Ganzzahl mit Vorzeichen, die aus dem nicht verwalteten Speicher gelesen wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 16-bit signed integer at a given offset from unmanaged memory.">Liest eine 16-Bit-Ganzzahl mit Vorzeichen an einem angegebenen Offset aus dem nicht verwalteten Arbeitsspeicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Die Basisadresse im nicht verwalteten Speicher, an der gelesen werden soll.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Lesen hinzugefügt wird.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory at the given offset.">Die 16-Bit-Ganzzahl mit Vorzeichen, die am angegebenen Offset aus dem nicht verwalteten Arbeitsspeicher gelesen wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt16(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 16-bit signed integer at a given offset from unmanaged memory.">Liest eine 16-Bit-Ganzzahl mit Vorzeichen an einem angegebenen Offset aus dem nicht verwalteten Arbeitsspeicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Die Basisadresse im nicht verwalteten Speicher des Quellobjekts.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Lesen hinzugefügt wird.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> ist ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt. Diese Methode akzeptiert keine <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Parameter.</exception>
      <returns vsli:raw="The 16-bit signed integer read from unmanaged memory at the given offset.">Die 16-Bit-Ganzzahl mit Vorzeichen, die am angegebenen Offset aus dem nicht verwalteten Arbeitsspeicher gelesen wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr)">
      <summary vsli:raw="Reads a 32-bit signed integer from unmanaged memory.">Liest eine 32-Bit-Ganzzahl mit Vorzeichen aus dem nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Die Adresse im nicht verwalteten Speicher, an der gelesen werden soll.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> ist kein erkanntes Format.  
  
- oder - 
 <paramref name="ptr" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="ptr" /> ist ungültig.</exception>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory.">Die 32-Bit-Ganzzahl mit Vorzeichen, die aus dem nicht verwalteten Speicher gelesen wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 32-bit signed integer at a given offset from unmanaged memory.">Liest eine 32-Bit-Ganzzahl mit Vorzeichen an einem angegebenen Offset aus dem nicht verwalteten Arbeitsspeicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Die Basisadresse im nicht verwalteten Speicher, an der gelesen werden soll.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Lesen hinzugefügt wird.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory.">Die 32-Bit-Ganzzahl mit Vorzeichen, die aus dem nicht verwalteten Speicher gelesen wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt32(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 32-bit signed integer at a given offset from unmanaged memory.">Liest eine 32-Bit-Ganzzahl mit Vorzeichen an einem angegebenen Offset aus dem nicht verwalteten Arbeitsspeicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Die Basisadresse im nicht verwalteten Speicher des Quellobjekts.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Lesen hinzugefügt wird.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> ist ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt. Diese Methode akzeptiert keine <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Parameter.</exception>
      <returns vsli:raw="The 32-bit signed integer read from unmanaged memory at the given offset.">Die 32-Bit-Ganzzahl mit Vorzeichen, die am angegebenen Offset aus dem nicht verwalteten Arbeitsspeicher gelesen wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr)">
      <summary vsli:raw="Reads a 64-bit signed integer from unmanaged memory.">Liest eine 64-Bit-Ganzzahl mit Vorzeichen aus dem nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Die Adresse im nicht verwalteten Speicher, an der gelesen werden soll.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> ist kein erkanntes Format.  
  
- oder - 
 <paramref name="ptr" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="ptr" /> ist ungültig.</exception>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory.">Die 64-Bit-Ganzzahl mit Vorzeichen, die aus dem nicht verwalteten Speicher gelesen wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a 64-bit signed integer at a given offset from unmanaged memory.">Liest eine 64-Bit-Ganzzahl mit Vorzeichen an einem angegebenen Offset aus dem nicht verwalteten Arbeitsspeicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Die Basisadresse im nicht verwalteten Speicher, an der gelesen werden soll.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Lesen hinzugefügt wird.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory at the given offset.">Die 64-Bit-Ganzzahl mit Vorzeichen, die am angegebenen Offset aus dem nicht verwalteten Arbeitsspeicher gelesen wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadInt64(System.Object,System.Int32)">
      <summary vsli:raw="Reads a 64-bit signed integer at a given offset from unmanaged memory.">Liest eine 64-Bit-Ganzzahl mit Vorzeichen an einem angegebenen Offset aus dem nicht verwalteten Arbeitsspeicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Die Basisadresse im nicht verwalteten Speicher des Quellobjekts.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Lesen hinzugefügt wird.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> ist ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt. Diese Methode akzeptiert keine <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Parameter.</exception>
      <returns vsli:raw="The 64-bit signed integer read from unmanaged memory at the given offset.">Die 64-Bit-Ganzzahl mit Vorzeichen, die am angegebenen Offset aus dem nicht verwalteten Arbeitsspeicher gelesen wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr)">
      <summary vsli:raw="Reads a processor native-sized integer from unmanaged memory.">Liest eine ganze Zahl von prozessoreigener Größe aus dem nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory from which to read.">Die Adresse im nicht verwalteten Speicher, an der gelesen werden soll.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> ist kein erkanntes Format.  
  
- oder - 
 <paramref name="ptr" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="ptr" /> ist ungültig.</exception>
      <returns vsli:raw="The integer read from unmanaged memory. A 32 bit integer is returned on 32 bit machines and a 64 bit integer is returned on 64 bit machines.">Die aus dem nicht verwaltetem Arbeitsspeicher gelesene Ganzzahl. Auf 32-Bit-Computern wird eine 32-Bit-Ganzzahl zurückgegeben und auf 64-Bit-Computern eine 64-Bit-Ganzzahl.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.IntPtr,System.Int32)">
      <summary vsli:raw="Reads a processor native sized integer at a given offset from unmanaged memory.">Liest eine ganze Zahl von prozessoreigener Größe an einem angegebenen Offset aus dem nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory from which to read.">Die Basisadresse im nicht verwalteten Speicher, an der gelesen werden soll.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Lesen hinzugefügt wird.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <returns vsli:raw="The integer read from unmanaged memory at the given offset.">Die aus dem nicht verwalteten Arbeitsspeicher am angegebenen Offset gelesene ganze Zahl.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReadIntPtr(System.Object,System.Int32)">
      <summary vsli:raw="Reads a processor native sized integer from unmanaged memory.">Liest eine ganze Zahl von prozessoreigener Größe aus dem nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the source object.">Die Basisadresse im nicht verwalteten Speicher des Quellobjekts.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before reading.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Lesen hinzugefügt wird.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> ist ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt. Diese Methode akzeptiert keine <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Parameter.</exception>
      <returns vsli:raw="The integer read from unmanaged memory at the given offset.">Die aus dem nicht verwalteten Arbeitsspeicher am angegebenen Offset gelesene ganze Zahl.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocCoTaskMem(System.IntPtr,System.Int32)">
      <summary vsli:raw="Resizes a block of memory previously allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)&quot; /&gt;.">Ändert die Größe eines bereits mit <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> belegten Speicherblocks.</summary>
      <param name="pv" vsli:raw="A pointer to memory allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)&quot; /&gt;.">Ein Zeiger auf den mit <see cref="M:System.Runtime.InteropServices.Marshal.AllocCoTaskMem(System.Int32)" /> belegten Speicher.</param>
      <param name="cb" vsli:raw="The new size of the allocated block.">Die neue Größe des belegten Blocks.</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">Es ist nicht genügend Arbeitsspeicher zum Erfüllen der Anforderung vorhanden.</exception>
      <returns vsli:raw="An integer representing the address of the reallocated block of memory. This memory must be released with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)&quot; /&gt;.">Eine ganze Zahl, die die Adresse des neu belegten Speicherblocks darstellt. Dieser Speicher muss mit <see cref="M:System.Runtime.InteropServices.Marshal.FreeCoTaskMem(System.IntPtr)" /> freigegeben werden.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReAllocHGlobal(System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Resizes a block of memory previously allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">Ändert die Größe eines bereits mit <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> belegten Speicherblocks.</summary>
      <param name="pv" vsli:raw="A pointer to memory allocated with &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)&quot; /&gt;.">Ein Zeiger auf den mit <see cref="M:System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr)" /> belegten Speicher.</param>
      <param name="cb" vsli:raw="The new size of the allocated block. This is not a pointer; it is the byte count you are requesting, cast to type &lt;see cref=&quot;T:System.IntPtr&quot; /&gt;. If you pass a pointer, it is treated as a size.">Die neue Größe des belegten Blocks. Dies ist kein Zeiger; es ist die Byteanzahl, die Sie anfordern, umgewandelt zum Typ <see cref="T:System.IntPtr" />. Wenn Sie einen Zeiger übergeben, wird er als Größe behandelt.</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory to satisfy the request.">Es ist nicht genügend Arbeitsspeicher zum Erfüllen der Anforderung vorhanden.</exception>
      <returns vsli:raw="A pointer to the reallocated memory. This memory must be released using &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)&quot; /&gt;.">Ein Zeiger auf den neu reservierten Arbeitsspeicher. Dieser Speicher muss mit <see cref="M:System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr)" /> freigegeben werden.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.Release(System.IntPtr)">
      <summary vsli:raw="Decrements the reference count on the specified interface.">Dekrementiert den Verweiszähler für die angegebene Schnittstelle.</summary>
      <param name="pUnk" vsli:raw="The interface to release.">Die freizugebende Schnittstelle.</param>
      <returns vsli:raw="The new value of the reference count on the interface specified by the &lt;paramref name=&quot;pUnk&quot; /&gt; parameter.">Der neue Wert des Verweiszählers für die Schnittstelle, die durch den <paramref name="pUnk" />-Parameter angegeben ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ReleaseComObject(System.Object)">
      <summary vsli:raw="Decrements the reference count of the Runtime Callable Wrapper (RCW) associated with the specified COM object.">Verringert den Verweiszähler des dem angegebenen COM-Objekt zugeordneten Runtime Callable Wrapper (RCW).</summary>
      <param name="o" vsli:raw="The COM object to release.">Das freizugebende COM-Objekt.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is not a valid COM object.">
        <paramref name="o" /> ist kein gültiges COM-Objekt.</exception>
      <exception cref="T:System.NullReferenceException" vsli:raw="&lt;paramref name=&quot;o&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="o" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="The new value of the reference count of the RCW associated with &lt;paramref name=&quot;o&quot; /&gt;. This value is typically zero since the RCW keeps just one reference to the wrapped COM object regardless of the number of managed clients calling it.">Der neue Wert für den Verweiszähler des RCW, der <paramref name="o" /> zugeordnet ist. Dieser Wert ist in der Regel 0, da der RCW unabhängig von der Anzahl der aufrufenden verwalteten Clients genau einen Verweis auf das umschlossene COM-Objekt beibehält.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)">
      <summary vsli:raw="Allocates an unmanaged binary string (BSTR) and copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into it.">Reserviert eine nicht verwaltete binäre Zeichenfolge (BSTR) und kopiert den Inhalt eines verwalteten <see cref="T:System.Security.SecureString" />-Objekts hinein.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Das zu kopierende verwaltete Objekt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="s" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Die Adresse im nicht verwalteten Speicher, in die der <paramref name="s" />-Parameter kopiert wurde, oder 0, wenn ein NULL-Objekt bereitgestellt wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">Kopiert den Inhalt eines verwalteten <see cref="T:System.Security.SecureString" />-Objekts in einen Speicherblock, der von der nicht verwalteten Speicherbelegung für COM-Aufgaben reserviert wurde.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Das zu kopierende verwaltete Objekt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="s" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Die Adresse im nicht verwalteten Speicher, in die der <paramref name="s" />-Parameter kopiert wurde, oder 0, wenn ein NULL-Objekt bereitgestellt wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">Kopiert den Inhalt eines verwalteten <see cref="T:System.Security.SecureString" />-Objekts in einen Speicherblock, der von der nicht verwalteten Speicherbelegung für COM-Aufgaben reserviert wurde.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Das zu kopierende verwaltete Objekt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="s" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Die Adresse im nicht verwalteten Speicher, in die der <paramref name="s" />-Parameter kopiert wurde, oder 0, wenn ein NULL-Objekt bereitgestellt wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">Kopiert den Inhalt eines verwalteten <see cref="T:System.Security.SecureString" /> in den nicht verwalteten Speicher und konvertiert ihn beim Kopieren in das ANSI-Format.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Das zu kopierende verwaltete Objekt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="s" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied, or 0 if a null object was supplied.">Die Adresse im nicht verwalteten Speicher, in die der <paramref name="s" />-Parameter kopiert wurde, oder 0, wenn ein NULL-Objekt bereitgestellt wurde.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into unmanaged memory.">Kopiert den Inhalt eines verwalteten <see cref="T:System.Security.SecureString" />-Objekts in den nicht verwalteten Speicher.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Das zu kopierende verwaltete Objekt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="s" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <returns vsli:raw="The address, in unmanaged memory, where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is a &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object whose length is 0.">Die Adresse im nicht verwalteten Arbeitsspeicher, an die <paramref name="s" /> kopiert wurde, oder 0, wenn <paramref name="s" /> ein <see cref="T:System.Security.SecureString" />-Objekt mit der Länge 0 ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SetComObjectData(System.Object,System.Object,System.Object)">
      <summary vsli:raw="Sets data referenced by the specified key in the specified COM object.">Legt Daten fest, auf die durch den angegebenen Schlüssel im angegebenen COM-Objekt verwiesen wird.</summary>
      <param name="obj" vsli:raw="The COM object in which to store the data.">Das COM-Objekt, in dem die Daten gespeichert werden sollen.</param>
      <param name="key" vsli:raw="The key in the internal hash table of the COM object in which to store the data.">Der Schlüssel in der internen Hashtabelle des COM-Objekts, in dem die Daten gespeichert werden sollen.</param>
      <param name="data" vsli:raw="The data to set.">Die festzulegenden Daten.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;key&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="obj" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="key" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;obj&quot; /&gt; is not a COM object.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;obj&quot; /&gt; is a Windows Runtime object.">
        <paramref name="obj" /> ist kein COM-Objekt.  
  
- oder - 
 <paramref name="obj" /> ist ein Windows-Runtime-Objekt.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the data was set successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Daten erfolgreich festgelegt wurden, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Object)">
      <summary vsli:raw="Returns the unmanaged size of an object in bytes.">Gibt die nicht verwaltete Größe eines Objekts in Bytes zurück.</summary>
      <param name="structure" vsli:raw="The object whose size is to be returned.">Das Objekt, dessen Größe zurückgegeben werden soll.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;structure&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="structure" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="The size of the specified object in unmanaged code.">Die Größe des angegebenen Objekts in nicht verwaltetem Code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf(System.Type)">
      <summary vsli:raw="Returns the size of an unmanaged type in bytes.">Gibt die Größe eines nicht verwalteten Typs in Bytes zurück.</summary>
      <param name="t" vsli:raw="The type whose size is to be returned.">Der Typ, dessen Größe zurückgegeben werden soll.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is a generic type definition.">Der <paramref name="t" />-Parameter ist eine generische Typdefinition.</exception>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;t&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="t" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="The size of the specified type in unmanaged code.">Die Größe des angegebenen Typs in nicht verwaltetem Code.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the size of an unmanaged type in bytes.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt]  
  
 Gibt die Größe eines nicht verwalteten Typs in Bytes zurück.</summary>
      <typeparam name="T" vsli:raw="The type whose size is to be returned.">Der Typ, dessen Größe zurückgegeben werden soll.</typeparam>
      <returns vsli:raw="The size, in bytes, of the type that is specified by the &lt;typeparamref name=&quot;T&quot; /&gt; generic type parameter.">Die Größe, in Bytes, des Typs, der durch den <typeparamref name="T" /> generischen Typparameter angegeben wird.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.SizeOf``1(``0)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Returns the unmanaged size of an object of a specified type in bytes.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt]  
  
 Gibt die nicht verwaltete Größe eines Objekts eines angegebenen Typs in Bytes zurück.</summary>
      <param name="structure" vsli:raw="The object whose size is to be returned.">Das Objekt, dessen Größe zurückgegeben werden soll.</param>
      <typeparam name="T" vsli:raw="The type of the &lt;paramref name=&quot;structure&quot; /&gt; parameter.">Der Typ des <paramref name="structure" />-Parameters.</typeparam>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;structure&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="structure" />-Parameter ist <see langword="null" />.</exception>
      <returns vsli:raw="The size, in bytes, of the specified object in unmanaged code.">Die Größe des angegebenen Objekts in nicht verwaltetem Code in Bytes.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToBSTR(System.String)">
      <summary vsli:raw="Allocates a BSTR and copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into it.">Weist einen BSTR zu und kopiert den Inhalt eines verwalteten <see cref="T:System.String" /> hinein.</summary>
      <param name="s" vsli:raw="The managed string to be copied.">Die zu kopierende verwaltete Zeichenfolge.</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The length for &lt;paramref name=&quot;s&quot; /&gt; is out of range.">Die Länge für <paramref name="s" /> liegt außerhalb des gültigen Bereichs.</exception>
      <returns vsli:raw="An unmanaged pointer to the &lt;see langword=&quot;BSTR&quot; /&gt;, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is null.">Ein nicht verwalteter Zeiger auf das <see langword="BSTR" /> oder 0, wenn <paramref name="s" /> NULL ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAnsi(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">Kopiert den Inhalt eines verwalteten <see cref="T:System.String" /> in einen Speicherblock, der von der nicht verwalteten Speicherbelegung für COM-Aufgaben reserviert wurde.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Eine zu kopierende verwaltete Zeichenfolge.</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">Der <paramref name="s" />-Parameter übersteigt die vom Betriebssystem zugelassene maximale Länge.</exception>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Eine ganze Zahl, die einen Zeiger auf den für die Zeichenfolge belegten Speicherblock darstellt, oder 0, wenn <paramref name="s" /> gleich <see langword="null" /> ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemAuto(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">Kopiert den Inhalt eines verwalteten <see cref="T:System.String" /> in einen Speicherblock, der von der nicht verwalteten Speicherbelegung für COM-Aufgaben reserviert wurde.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Eine zu kopierende verwaltete Zeichenfolge.</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The length for &lt;paramref name=&quot;s&quot; /&gt; is out of range.">Die Länge für <paramref name="s" /> liegt außerhalb des gültigen Bereichs.</exception>
      <returns vsli:raw="The allocated memory block, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Der reservierte Speicherblock oder 0, wenn <paramref name="s" /> gleich <see langword="null" /> ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUni(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">Kopiert den Inhalt eines verwalteten <see cref="T:System.String" /> in einen Speicherblock, der von der nicht verwalteten Speicherbelegung für COM-Aufgaben reserviert wurde.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Eine zu kopierende verwaltete Zeichenfolge.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">Der <paramref name="s" />-Parameter übersteigt die vom Betriebssystem zugelassene maximale Länge.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if s is &lt;see langword=&quot;null&quot; /&gt;.">Eine ganze Zahl, die einen Zeiger auf den für die Zeichenfolge belegten Speicherblock darstellt, oder 0, wenn s gleich <see langword="null" /> ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; to a block of memory allocated from the unmanaged COM task allocator.">Kopiert den Inhalt eines verwalteten <see cref="T:System.String" /> in einen Speicherblock, der von der nicht verwalteten Speicherbelegung für COM-Aufgaben reserviert wurde.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Eine zu kopierende verwaltete Zeichenfolge.</param>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">Der <paramref name="s" />-Parameter übersteigt die vom Betriebssystem zugelassene maximale Länge.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <returns vsli:raw="An integer representing a pointer to the block of memory allocated for the string, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Eine ganze Zahl, die einen Zeiger auf den für die Zeichenfolge belegten Speicherblock darstellt, oder 0, wenn <paramref name="s" /> gleich <see langword="null" /> ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAnsi(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">Kopiert den Inhalt eines verwalteten <see cref="T:System.String" /> in den nicht verwalteten Speicher und konvertiert ihn beim Kopieren in das ANSI-Format.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Eine zu kopierende verwaltete Zeichenfolge.</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">Der <paramref name="s" />-Parameter übersteigt die vom Betriebssystem zugelassene maximale Länge.</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Die Adresse im nicht verwalteten Arbeitsspeicher, an die <paramref name="s" /> kopiert wurde, oder 0, wenn <paramref name="s" /> gleich <see langword="null" /> ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalAuto(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory, converting into ANSI format if required.">Kopiert den Inhalt eines verwalteten <see cref="T:System.String" /> in den nicht verwalteten Speicher und konvertiert ihn ggf. in das ANSI-Format.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Eine zu kopierende verwaltete Zeichenfolge.</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where the string was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Die Adresse im nicht verwalteten Arbeitsspeicher, an die die Zeichenfolge kopiert wurde, oder 0, wenn <paramref name="s" /> gleich <see langword="null" /> ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StringToHGlobalUni(System.String)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.String&quot; /&gt; into unmanaged memory.">Kopiert den Inhalt eines verwalteten <see cref="T:System.String" /> in den nicht verwalteten Speicher.</summary>
      <param name="s" vsli:raw="A managed string to be copied.">Eine zu kopierende verwaltete Zeichenfolge.</param>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="The method could not allocate enough native heap memory.">Die Methode konnte nicht genügend Speicher für den systemeigenen Heap belegen.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter exceeds the maximum length allowed by the operating system.">Der <paramref name="s" />-Parameter übersteigt die vom Betriebssystem zugelassene maximale Länge.</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">Die Adresse im nicht verwalteten Arbeitsspeicher, an die <paramref name="s" /> kopiert wurde, oder 0, wenn <paramref name="s" /> gleich <see langword="null" /> ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr(System.Object,System.IntPtr,System.Boolean)">
      <summary vsli:raw="Marshals data from a managed object to an unmanaged block of memory.">Marshallt Daten aus einem verwalteten Objekt zu einem nicht verwalteten Speicherblock.</summary>
      <param name="structure" vsli:raw="A managed object that holds the data to be marshaled. This object must be a structure or an instance of a formatted class.">Ein verwaltetes Objekt mit den zu marshallenden Daten. Dieses Objekt muss eine Struktur oder Instanz einer formatierten Klasse sein.</param>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory, which must be allocated before this method is called.">Ein Zeiger auf einen nicht verwalteten Speicherblock, der vor dem Aufruf der Methode belegt werden muss.</param>
      <param name="fDeleteOld" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to call the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)&quot; /&gt; method on the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before this method copies the data. The block must contain valid data. Note that passing &lt;see langword=&quot;false&quot; /&gt; when the memory block already contains data can lead to a memory leak.">
        <see langword="true" />, wenn die <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure(System.IntPtr,System.Type)" />-Methode für den <paramref name="ptr" />-Parameter aufgerufen werden soll, bevor diese Methode die Daten kopiert. Der Block muss gültige Daten enthalten. Beachten Sie, dass das Übergeben von <see langword="false" />, wenn der Speicherblock bereits Daten enthält, zu einem Speicherverlust führen kann.</param>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structure&quot; /&gt; is a reference type that is not a formatted class.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;structure&quot; /&gt; is an instance of a generic type (in the .NET Framework 4.5 and earlier versions only).">
        <paramref name="structure" /> ist ein Verweistyp, der keine formatierte Klasse ist.  
  
- oder - 
 <paramref name="structure" /> ist eine Instanz eines generischen Typs (nur in .NET Framework 4.5 und früheren Versionen).</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.StructureToPtr``1(``0,System.IntPtr,System.Boolean)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Marshals data from a managed object of a specified type to an unmanaged block of memory.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt]  
  
 Marshallt Daten aus einem verwalteten Objekt eines festgelegten Typs zu einem nicht verwalteten Speicherblock.</summary>
      <param name="structure" vsli:raw="A managed object that holds the data to be marshaled. The object must be a structure or an instance of a formatted class.">Ein verwaltetes Objekt mit den zu marshallenden Daten. Dieses Objekt muss eine Struktur oder Instanz einer formatierten Klasse sein.</param>
      <param name="ptr" vsli:raw="A pointer to an unmanaged block of memory, which must be allocated before this method is called.">Ein Zeiger auf einen nicht verwalteten Speicherblock, der vor dem Aufruf der Methode belegt werden muss.</param>
      <param name="fDeleteOld" vsli:raw="&lt;see langword=&quot;true&quot; /&gt; to call the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)&quot; /&gt; method on the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before this method copies the data. The block must contain valid data. Note that passing &lt;see langword=&quot;false&quot; /&gt; when the memory block already contains data can lead to a memory leak.">
        <see langword="true" />, wenn die <see cref="M:System.Runtime.InteropServices.Marshal.DestroyStructure``1(System.IntPtr)" />-Methode für den <paramref name="ptr" />-Parameter aufgerufen werden soll, bevor diese Methode die Daten kopiert. Der Block muss gültige Daten enthalten. Beachten Sie, dass das Übergeben von <see langword="false" />, wenn der Speicherblock bereits Daten enthält, zu einem Speicherverlust führen kann.</param>
      <typeparam name="T" vsli:raw="The type of the managed object.">Der Typ des verwalteten Objekts.</typeparam>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;structure&quot; /&gt; is a reference type that is not a formatted class.">
        <paramref name="structure" /> ist ein Verweistyp, der keine formatierte Klasse ist.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32)">
      <summary vsli:raw="Throws an exception with a specific failure HRESULT value.">Löst eine Ausnahme mit einem bestimmten HRESULT-Fehlerwert aus.</summary>
      <param name="errorCode" vsli:raw="The HRESULT corresponding to the desired exception.">Das der gewünschten Ausnahme entsprechende HRESULT.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ThrowExceptionForHR(System.Int32,System.IntPtr)">
      <summary vsli:raw="Throws an exception with a specific failure HRESULT, based on the specified IErrorInfo interface.">Löst eine Ausnahme mit einem bestimmten Fehler-HRESULT auf Grundlage der angegebenen IErrorInfo-Schnittstelle aus.</summary>
      <param name="errorCode" vsli:raw="The HRESULT corresponding to the desired exception.">Das der gewünschten Ausnahme entsprechende HRESULT.</param>
      <param name="errorInfo" vsli:raw="A pointer to the IErrorInfo interface that provides more information about the error. You can specify &lt;c&gt;IntPtr(0)&lt;/c&gt; to use the current IErrorInfo interface, or &lt;c&gt;IntPtr(-1)&lt;/c&gt; to ignore the current IErrorInfo interface and construct the exception just from the error code.">Ein Zeiger auf die IErrorInfo-Schnittstelle, die weitere Informationen über den Fehler bereitstellt. Sie können <c>IntPtr(0)</c> angeben, um die aktuelle IErrorInfo-Schnittstelle zu verwenden, oder <c>IntPtr(-1)</c>, um die aktuelle IErrorInfo-Schnittstelle zu ignorieren und die Ausnahme direkt aus dem Fehlercode zu erstellen.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement(System.Array,System.Int32)">
      <summary vsli:raw="Gets the address of the element at the specified index inside the specified array.">Ruft die Adresse des Elements am angegebenen Index des angegebenen Arrays ab.</summary>
      <param name="arr" vsli:raw="The array that contains the desired element.">Das Array, das das gewünschte Element enthält.</param>
      <param name="index" vsli:raw="The index in the &lt;paramref name=&quot;arr&quot; /&gt; parameter of the desired element.">Der Index im <paramref name="arr" />-Parameter des gewünschten Elements.</param>
      <returns vsli:raw="The address of &lt;paramref name=&quot;index&quot; /&gt; inside &lt;paramref name=&quot;arr&quot; /&gt;.">Die Adresse des <paramref name="index" /> im <paramref name="arr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.UnsafeAddrOfPinnedArrayElement``1(``0[],System.Int32)">
      <summary vsli:raw="[Supported in the .NET Framework 4.5.1 and later versions]&#xA;&#xA; Gets the address of the element at the specified index in an array of a specified type.">[Wird nur in .NET Framework 4.5.1 und neueren Versionen unterstützt]  
  
 Ruft die Adresse des Elements am angegebenen Index in einem Arrays des angegebenen Typs ab.</summary>
      <param name="arr" vsli:raw="The array that contains the desired element.">Das Array, das das gewünschte Element enthält.</param>
      <param name="index" vsli:raw="The index of the desired element in the &lt;paramref name=&quot;arr&quot; /&gt; array.">Der Index des gewünschten Elements im <paramref name="arr" />-Array.</param>
      <typeparam name="T" vsli:raw="The type of the array.">Der Typ des Arrays.</typeparam>
      <returns vsli:raw="The address of &lt;paramref name=&quot;index&quot; /&gt; in &lt;paramref name=&quot;arr&quot; /&gt;.">Die Adresse des <paramref name="index" /> im <paramref name="arr" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory.">Schreibt einen einzelnen Bytewert in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Die Adresse im nicht verwalteten Speicher, in die geschrieben werden soll.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> ist kein erkanntes Format.  
  
- oder - 
 <paramref name="ptr" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="ptr" /> ist ungültig.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.IntPtr,System.Int32,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory at a specified offset.">Schreibt einen einzelnen Bytewert an einem angegebenen Offset in den nicht verwalteten Arbeitsspeicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Die Basisadresse im nicht verwalteten Speicher, in die geschrieben werden soll.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Schreiben hinzugefügt wird.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteByte(System.Object,System.Int32,System.Byte)">
      <summary vsli:raw="Writes a single byte value to unmanaged memory at a specified offset.">Schreibt einen einzelnen Bytewert an einem angegebenen Offset in den nicht verwalteten Arbeitsspeicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Die Basisadresse im nicht verwalteten Speicher des Zielobjekts.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Schreiben hinzugefügt wird.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> ist ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt. Diese Methode akzeptiert keine <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Parameter.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Char)">
      <summary vsli:raw="Writes a character as a 16-bit integer value to unmanaged memory.">Schreibt ein Zeichen als 16-Bit-Ganzzahl in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Die Adresse im nicht verwalteten Speicher, in die geschrieben werden soll.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> ist kein erkanntes Format.  
  
- oder - 
 <paramref name="ptr" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="ptr" /> ist ungültig.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int16)">
      <summary vsli:raw="Writes a 16-bit integer value to unmanaged memory.">Schreibt eine 16-Bit-Ganzzahl in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Die Adresse im nicht verwalteten Speicher, in die geschrieben werden soll.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> ist kein erkanntes Format.  
  
- oder - 
 <paramref name="ptr" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="ptr" /> ist ungültig.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Char)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">Schreibt den Wert einer 16-Bit-Ganzzahl mit Vorzeichen an einem angegebenen Offset in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The base address in the native heap to write to.">Die Basisadresse im systemeigenen Heap, in die geschrieben werden soll.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Schreiben hinzugefügt wird.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.IntPtr,System.Int32,System.Int16)">
      <summary vsli:raw="Writes a 16-bit signed integer value into unmanaged memory at a specified offset.">Schreibt den Wert einer 16-Bit-Ganzzahl mit Vorzeichen an einem angegebenen Offset in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Die Basisadresse im nicht verwalteten Speicher, in die geschrieben werden soll.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Schreiben hinzugefügt wird.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Char)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">Schreibt den Wert einer 16-Bit-Ganzzahl mit Vorzeichen an einem angegebenen Offset in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Die Basisadresse im nicht verwalteten Speicher des Zielobjekts.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Schreiben hinzugefügt wird.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> ist ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt. Diese Methode akzeptiert keine <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Parameter.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt16(System.Object,System.Int32,System.Int16)">
      <summary vsli:raw="Writes a 16-bit signed integer value to unmanaged memory at a specified offset.">Schreibt den Wert einer 16-Bit-Ganzzahl mit Vorzeichen an einem angegebenen Offset in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Die Basisadresse im nicht verwalteten Speicher des Zielobjekts.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Schreiben hinzugefügt wird.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> ist ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt. Diese Methode akzeptiert keine <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Parameter.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value to unmanaged memory.">Schreibt eine 32-Bit-Ganzzahl mit Vorzeichen in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Die Adresse im nicht verwalteten Speicher, in die geschrieben werden soll.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> ist kein erkanntes Format.  
  
- oder - 
 <paramref name="ptr" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="ptr" /> ist ungültig.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.IntPtr,System.Int32,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value into unmanaged memory at a specified offset.">Schreibt den Wert einer 32-Bit-Ganzzahl mit Vorzeichen an einem angegebenen Offset in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Die Basisadresse im nicht verwalteten Speicher, in die geschrieben werden soll.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Schreiben hinzugefügt wird.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt32(System.Object,System.Int32,System.Int32)">
      <summary vsli:raw="Writes a 32-bit signed integer value to unmanaged memory at a specified offset.">Schreibt den Wert einer 32-Bit-Ganzzahl mit Vorzeichen an einem angegebenen Offset in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Die Basisadresse im nicht verwalteten Speicher des Zielobjekts.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Schreiben hinzugefügt wird.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> ist ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt. Diese Methode akzeptiert keine <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Parameter.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int32,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory at a specified offset.">Schreibt den Wert einer 64-Bit-Ganzzahl mit Vorzeichen an einem angegebenen Offset in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write.">Die zu schreibende Basisadresse im nicht verwalteten Speicher.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Schreiben hinzugefügt wird.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.IntPtr,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory.">Schreibt eine 64-Bit-Ganzzahl mit Vorzeichen in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Die Adresse im nicht verwalteten Speicher, in die geschrieben werden soll.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> ist kein erkanntes Format.  
  
- oder - 
 <paramref name="ptr" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="ptr" /> ist ungültig.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteInt64(System.Object,System.Int32,System.Int64)">
      <summary vsli:raw="Writes a 64-bit signed integer value to unmanaged memory at a specified offset.">Schreibt den Wert einer 64-Bit-Ganzzahl mit Vorzeichen an einem angegebenen Offset in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Die Basisadresse im nicht verwalteten Speicher des Zielobjekts.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Schreiben hinzugefügt wird.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> ist ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt. Diese Methode akzeptiert keine <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Parameter.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a processor native-sized integer value to unmanaged memory at a specified offset.">Schreibt einen Ganzzahlwert von prozessoreigener Größe am angegebenen Offset in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory to write to.">Die Basisadresse im nicht verwalteten Speicher, in die geschrieben werden soll.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Schreiben hinzugefügt wird.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.IntPtr,System.IntPtr)">
      <summary vsli:raw="Writes a processor native sized integer value into unmanaged memory.">Schreibt einen Ganzzahlwert von prozessoreigener Größe in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The address in unmanaged memory to write to.">Die Adresse im nicht verwalteten Speicher, in die geschrieben werden soll.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is not a recognized format.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.&#xA;&#xA; -or-&#xA;&#xA; &lt;paramref name=&quot;ptr&quot; /&gt; is invalid.">
        <paramref name="ptr" /> ist kein erkanntes Format.  
  
- oder - 
 <paramref name="ptr" /> ist <see langword="null" />.  
  
- oder - 
 <paramref name="ptr" /> ist ungültig.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.WriteIntPtr(System.Object,System.Int32,System.IntPtr)">
      <summary vsli:raw="Writes a processor native sized integer value to unmanaged memory.">Schreibt einen Ganzzahlwert von prozessoreigener Größe in den nicht verwalteten Speicher.</summary>
      <param name="ptr" vsli:raw="The base address in unmanaged memory of the target object.">Die Basisadresse im nicht verwalteten Speicher des Zielobjekts.</param>
      <param name="ofs" vsli:raw="An additional byte offset, which is added to the &lt;paramref name=&quot;ptr&quot; /&gt; parameter before writing.">Ein zusätzlicher Byteoffset, der dem <paramref name="ptr" />-Parameter vor dem Schreiben hinzugefügt wird.</param>
      <param name="val" vsli:raw="The value to write.">Der zu schreibende Wert.</param>
      <exception cref="T:System.AccessViolationException" vsli:raw="Base address (&lt;paramref name=&quot;ptr&quot; /&gt;) plus offset byte (&lt;paramref name=&quot;ofs&quot; /&gt;) produces a null or invalid address.">Die Basisadresse (<paramref name="ptr" />) und das Offsetbyte (<paramref name="ofs" />) erzeugen NULL oder eine ungültige Adresse.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;ptr&quot; /&gt; is an &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; object. This method does not accept &lt;see cref=&quot;T:System.Runtime.InteropServices.ArrayWithOffset&quot; /&gt; parameters.">
        <paramref name="ptr" /> ist ein <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Objekt. Diese Methode akzeptiert keine <see cref="T:System.Runtime.InteropServices.ArrayWithOffset" />-Parameter.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR(System.IntPtr)">
      <summary vsli:raw="Frees a BSTR pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)&quot; /&gt; method.">Gibt einen BSTR-Zeiger frei, der mit der <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToBSTR(System.Security.SecureString)" />-Methode reserviert wurde.</summary>
      <param name="s" vsli:raw="The address of the &lt;see langword=&quot;BSTR&quot; /&gt; to free.">Die Adresse des freizugebenden <see langword="BSTR" />.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)&quot; /&gt; method.">Gibt einen nicht verwalteten Zeichenfolgenzeiger frei, der mit der <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)" />-Methode reserviert wurde.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">Die Adresse der nicht verwalteten Zeichenfolge, die freigegeben werden soll.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)&quot; /&gt; method.">Gibt einen nicht verwalteten Zeichenfolgenzeiger frei, der mit der <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)" />-Methode reserviert wurde.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">Die Adresse der nicht verwalteten Zeichenfolge, die freigegeben werden soll.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUTF8(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)&quot; /&gt; method.">Gibt einen nicht verwalteten Zeichenfolgenzeiger frei, der mit der <see cref="M:System.Runtime.InteropServices.Marshal.StringToCoTaskMemUTF8(System.String)" />-Methode reserviert wurde.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">Die Adresse der nicht verwalteten Zeichenfolge, die freigegeben werden soll.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)&quot; /&gt; method.">Gibt einen nicht verwalteten Zeichenfolgenzeiger frei, der mit der <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)" />-Methode reserviert wurde.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">Die Adresse der nicht verwalteten Zeichenfolge, die freigegeben werden soll.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode(System.IntPtr)">
      <summary vsli:raw="Frees an unmanaged string pointer that was allocated using the &lt;see cref=&quot;M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)&quot; /&gt; method.">Gibt einen nicht verwalteten Zeichenfolgenzeiger frei, der mit der <see cref="M:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)" />-Methode reserviert wurde.</summary>
      <param name="s" vsli:raw="The address of the unmanaged string to free.">Die Adresse der nicht verwalteten Zeichenfolge, die freigegeben werden soll.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalAsAttribute">
      <summary vsli:raw="Indicates how to marshal the data between managed and unmanaged code.">Gibt an, wie die Daten zwischen verwaltetem und nicht verwaltetem Code gemarshallt werden sollen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType">
      <summary vsli:raw="Specifies the element type of the unmanaged &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.LPArray&quot; /&gt; or &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.ByValArray&quot; /&gt;.">Gibt den Elementtyp des nicht verwalteten <see cref="F:System.Runtime.InteropServices.UnmanagedType.LPArray" /> oder <see cref="F:System.Runtime.InteropServices.UnmanagedType.ByValArray" /> an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.IidParameterIndex">
      <summary vsli:raw="Specifies the parameter index of the unmanaged &lt;see langword=&quot;iid_is&quot; /&gt; attribute used by COM.">Gibt den Parameterindex des nicht verwalteten <see langword="iid_is" />-Attributs an, das von COM verwendet wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie">
      <summary vsli:raw="Provides additional information to a custom marshaler.">Stellt zusätzliche Informationen für einen benutzerdefinierten Marshaller zur Verfügung.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType">
      <summary vsli:raw="Specifies the fully qualified name of a custom marshaler.">Gibt den voll gekennzeichneten Namen eines benutzerdefinierten Marshallers an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef">
      <summary vsli:raw="Implements &lt;see cref=&quot;F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType&quot; /&gt; as a type.">Implementiert <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> als Typ.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType">
      <summary vsli:raw="Indicates the element type of the &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">Gibt den Elementtyp von <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArrayUserDefinedSubType">
      <summary vsli:raw="Indicates the user-defined element type of the &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">Gibt den benutzerdefinierten Elementtyp von <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst">
      <summary vsli:raw="Indicates the number of elements in the fixed-length array or the number of characters (not bytes) in a string to import.">Gibt die Anzahl der Elemente im Array fester Länger oder die Anzahl der Zeichen (nicht der Bytes) in einer zu importierenden Zeichenfolge an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex">
      <summary vsli:raw="Indicates the zero-based parameter that contains the count of array elements, similar to &lt;see langword=&quot;size_is&quot; /&gt; in COM.">Gibt den nullbasierten Parameter an, der die Anzahl von Arrayelementen enthält, vergleichbar mit <see langword="size_is" /> in COM.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.UnmanagedType" />-Wert.</summary>
      <param name="unmanagedType" vsli:raw="The value the data is to be marshaled as.">Der Wert, als der die Daten gemarshallt werden sollen.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalAsAttribute.#ctor(System.Runtime.InteropServices.UnmanagedType)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; enumeration member.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.UnmanagedType" />-Enumerationsmember.</summary>
      <param name="unmanagedType" vsli:raw="The value the data is to be marshaled as.">Der Wert, als der die Daten gemarshallt werden sollen.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.MarshalAsAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value the data is to be marshaled as.">Ruft den <see cref="T:System.Runtime.InteropServices.UnmanagedType" />-Wert ab, als der die Daten gemarshallt werden sollen.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedType&quot; /&gt; value the data is to be marshaled as.">Der <see cref="T:System.Runtime.InteropServices.UnmanagedType" />-Wert, als der die Daten gemarshallt werden sollen.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.MarshalDirectiveException">
      <summary vsli:raw="The exception that is thrown by the marshaler when it encounters a &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalAsAttribute&quot; /&gt; it does not support.">Die vom Marshaller ausgelöste Ausnahme, wenn dieser ein nicht unterstütztes <see cref="T:System.Runtime.InteropServices.MarshalAsAttribute" /> entdeckt.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class with default properties.">Initialisiert eine neue Instanz der <see langword="MarshalDirectiveException" />-Klasse mit Standardeigenschaften.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class from serialization data.">Initialisiert eine neue Instanz der <see langword="MarshalDirectiveException" />-Klasse aus Serialisierungsdaten.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;MarshalDirectiveException&quot; /&gt; class with a specified error message.">Initialisiert eine neue Instanz der <see langword="MarshalDirectiveException" />-Klasse mit einer angegebenen Fehlermeldung.</summary>
      <param name="message" vsli:raw="The error message that specifies the reason for the exception.">Die Fehlermeldung, in der die Ursache für die Ausnahme angegeben wird.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.MarshalDirectiveException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.MarshalDirectiveException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.MarshalDirectiveException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="inner" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.NativeLibrary">
      <summary vsli:raw="Provides APIs for managing native libraries.">Stellt APIs für die Verwaltung nativer Bibliotheken bereit.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)">
      <summary vsli:raw="Frees a loaded library with the specified OS handle, or takes no action if the input handle is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt;.">Gibt eine geladene Bibliothek mit dem angegebenen Betriebssystemhandle frei, oder führt keine Aktion durch, wenn das Eingabehandle <see cref="F:System.IntPtr.Zero" /> ist.</summary>
      <param name="handle" vsli:raw="The native library OS handle to be freed.">Das Betriebssystemhandle der nativen Bibliothek, die freigegeben werden soll.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)">
      <summary vsli:raw="Gets the address of an exported symbol.">Ruft die Adresse eines exportierten Symbols ab.</summary>
      <param name="handle" vsli:raw="The native library OS handle.">Das Betriebssystemhandle der nativen Bibliothek.</param>
      <param name="name" vsli:raw="The name of the exported symbol.">Der Name des exportierten Symbols.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handle&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handle" /> oder <paramref name="name" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.EntryPointNotFoundException" vsli:raw="The symbol is not found.">Das Symbol wurde nicht gefunden.</exception>
      <returns vsli:raw="The address of the symbol.">Die Adresse des Symbols.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)">
      <summary vsli:raw="Provides a simple API for loading a native library that wraps the OS loader and uses default flags.">Bietet eine einfache API zum Laden einer nativen Bibliothek, die das Betriebssystem-Ladeprogramm umschließt und Standardflags verwendet.</summary>
      <param name="libraryPath" vsli:raw="The name of the native library to be loaded.">Der Name der zu ladenden nativen Bibliothek.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.DllNotFoundException" vsli:raw="The library can't be found.">Die Bibliothek wurde nicht gefunden.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The library is not valid.">Die Bibliothek ist nicht gültig.</exception>
      <returns vsli:raw="The OS handle for the loaded native library.">Das Betriebssystemhandle für die geladene native Bibliothek.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})">
      <summary vsli:raw="Provides a high-level API for loading a native library.">Bietet eine API auf höchster Stufe zum Laden einer nativen Bibliothek.</summary>
      <param name="libraryName" vsli:raw="The name of the native library to be loaded.">Der Name der zu ladenden nativen Bibliothek.</param>
      <param name="assembly" vsli:raw="The assembly loading the native library.">Die Assembly, die die native Bibliothek lädt.</param>
      <param name="searchPath" vsli:raw="The search path.">Der Suchpfad.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryName&quot; /&gt; or &lt;paramref name=&quot;assembly&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryName" /> oder <paramref name="assembly" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; is not a &lt;see langword=&quot;RuntimeAssembly&quot; /&gt;.">
        <paramref name="assembly" /> ist keine <see langword="RuntimeAssembly" />.</exception>
      <exception cref="T:System.DllNotFoundException" vsli:raw="The library can't be found.">Die Bibliothek wurde nicht gefunden.</exception>
      <exception cref="T:System.BadImageFormatException" vsli:raw="The library is not valid.">Die Bibliothek ist nicht gültig.</exception>
      <returns vsli:raw="The OS handle for the loaded library.">Das Betriebssystemhandle für die geladene Bibliothek.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)">
      <summary vsli:raw="Sets a callback for resolving native library imports from an assembly.">Legt einen Rückruf für die Auflösung von Importen nativer Bibliotheken aus einer Assembly fest.</summary>
      <param name="assembly" vsli:raw="The assembly for which the resolver is registered.">Die Assembly, für die der Resolver registriert ist.</param>
      <param name="resolver" vsli:raw="The resolver callback to register.">Der zu registrierende Resolverrückruf.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; or &lt;paramref name=&quot;resolver&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="assembly" /> oder <paramref name="resolver" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="A resolver is already set for this assembly.">Ein Resolver ist bereits für diese Assembly festgelegt.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)">
      <summary vsli:raw="Gets the address of an exported symbol and returns a value that indicates whether the method call succeeded.">Ruft die Adresse eines exportierten Symbols ab und gibt einen Wert zurück, der angibt, ob der Methodenaufruf erfolgreich war.</summary>
      <param name="handle" vsli:raw="The native library OS handle.">Das Betriebssystemhandle der nativen Bibliothek.</param>
      <param name="name" vsli:raw="The name of the exported symbol.">Der Name des exportierten Symbols.</param>
      <param name="address" vsli:raw="When the method returns, contains the symbol address, if it exists.">Enthält bei Rückgabe der Methode die Symboladresse, sofern vorhanden.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;handle&quot; /&gt; is &lt;see cref=&quot;F:System.IntPtr.Zero&quot; /&gt; or &lt;paramref name=&quot;name&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="handle" /> oder <paramref name="name" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the address of the exported symbol was found successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Rückgabe durch die Methode erfolgreich war; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)">
      <summary vsli:raw="Provides a simple API for loading a native library and returns a value that indicates whether the operation succeeded.">Bietet eine einfache API zum Laden einer nativen Bibliothek und gibt einen Wert zurück, der angibt, ob der Vorgang erfolgreich war.</summary>
      <param name="libraryPath" vsli:raw="The name of the native library to be loaded.">Der Name der zu ladenden nativen Bibliothek.</param>
      <param name="handle" vsli:raw="When the method returns, the OS handle of the loaded native library.">Das Betriebssystemhandle der geladenen nativen Bibliothek bei Rückgabe der Methode.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> ist <see langword="null" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the native library was loaded successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die native Bibliothek erfolgreich geladen wurde; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)">
      <summary vsli:raw="Provides a high-level API that loads a native library and returns a value that indicates whether the operation succeeded.">Bietet eine API auf höchster Stufe zum Laden einer nativen Bibliothek und gibt einen Wert zurück, der angibt, ob der Vorgang erfolgreich war.</summary>
      <param name="libraryName" vsli:raw="The name of the native library to be loaded.">Der Name der zu ladenden nativen Bibliothek.</param>
      <param name="assembly" vsli:raw="The assembly loading the native library.">Die Assembly, die die native Bibliothek lädt.</param>
      <param name="searchPath" vsli:raw="The search path.">Der Suchpfad.</param>
      <param name="handle" vsli:raw="When the method returns, the OS handle of the loaded native library.">Das Betriebssystemhandle der geladenen nativen Bibliothek bei Rückgabe der Methode.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;libraryPath&quot; /&gt; or &lt;paramref name=&quot;assembly&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="libraryPath" /> oder <paramref name="assembly" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentException" vsli:raw="&lt;paramref name=&quot;assembly&quot; /&gt; is not a &lt;see langword=&quot;RuntimeAssembly&quot; /&gt;.">
        <paramref name="assembly" /> ist keine <see langword="RuntimeAssembly" />.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the native library was loaded successfully; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn der Ladevorgang erfolgreich war; andernfalls <see langword="false" />.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.OptionalAttribute">
      <summary vsli:raw="Indicates that a parameter is optional.">Gibt an, dass ein Parameter optional ist.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.OptionalAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;OptionalAttribute&quot; /&gt; class with default values.">Initialisiert eine neue Instanz der <see langword="OptionalAttribute" />-Klasse mit Standardwerten.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PreserveSigAttribute">
      <summary vsli:raw="Indicates that the HRESULT signature transformation that takes place during COM interop calls should be suppressed.">Gibt an, dass die während COM-Interop-Aufrufen stattfindende HRESULT- oder <see langword="retval" />-Signaturtransformation unterdrückt werden soll.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PreserveSigAttribute.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.PreserveSigAttribute&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.PreserveSigAttribute" />-Klasse.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute">
      <summary vsli:raw="Indicates that the attributed assembly is a primary interop assembly.">Gibt an, dass die attributierte Assembly eine primäre Interop-Assembly ist.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute&quot; /&gt; class with the major and minor version numbers of the type library for which this assembly is the primary interop assembly.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute" />-Klasse mit der Hauptversionsnummer und der Nebenversionsnummer der Typbibliothek, für die diese Assembly die primäre Interop-Assembly ist.</summary>
      <param name="major" vsli:raw="The major version of the type library for which this assembly is the primary interop assembly.">Die Hauptversion der Typbibliothek, für die diese Assembly die primäre Interop-Assembly ist.</param>
      <param name="minor" vsli:raw="The minor version of the type library for which this assembly is the primary interop assembly.">Die Nebenversion der Typbibliothek, für die diese Assembly die primäre Interop-Assembly ist.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the type library for which this assembly is the primary interop assembly.">Ruft die Hauptversionsnummer der Typbibliothek ab, für die diese Assembly die primäre Interop-Assembly ist.</summary>
      <returns vsli:raw="The major version number of the type library for which this assembly is the primary interop assembly.">Die Hauptversionsnummer der Typbibliothek, für die diese Assembly die primäre Interop-Assembly ist.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.PrimaryInteropAssemblyAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the type library for which this assembly is the primary interop assembly.">Ruft die Nebenversionsnummer der Typbibliothek ab, für die diese Assembly die primäre Interop-Assembly ist.</summary>
      <returns vsli:raw="The minor version number of the type library for which this assembly is the primary interop assembly.">Die Nebenversionsnummer der Typbibliothek, für die diese Assembly die primäre Interop-Assembly ist.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.ProgIdAttribute">
      <summary vsli:raw="Allows the user to specify the ProgID of a class.">Ermöglicht dem Benutzer die Angabe der ProgID einer Klasse.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.ProgIdAttribute.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;ProgIdAttribute&quot; /&gt; with the specified ProgID.">Initialisiert eine neue Instanz von <see langword="ProgIdAttribute" /> mit der angegebenen ProgID.</summary>
      <param name="progId" vsli:raw="The ProgID to be assigned to the class.">Die ProgID, die der Klasse zugewiesen werden soll.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.ProgIdAttribute.Value">
      <summary vsli:raw="Gets the ProgID of the class.">Ruft die ProgID der Klasse ab.</summary>
      <returns vsli:raw="The ProgID of the class.">Die ProgID der Klasse.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.RuntimeEnvironment">
      <summary vsli:raw="Provides a collection of &lt;see langword=&quot;static&quot; /&gt; methods that return information about the common language runtime environment.">Stellt eine Auflistung von <see langword="static" />-Methoden bereit, die Informationen über die Common Language Runtime-Umgebung zurückgeben.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.FromGlobalAccessCache(System.Reflection.Assembly)">
      <summary vsli:raw="Tests whether the specified assembly is loaded in the global assembly cache.">Überprüft, ob die angegebene Assembly im globalen Assemblycache geladen ist.</summary>
      <param name="a" vsli:raw="The assembly to test.">Die zu überprüfende Assembly.</param>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if the assembly is loaded in the global assembly cache; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn die Assembly im globalen Assemblycache geladen wurde, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeDirectory">
      <summary vsli:raw="Returns the directory where the common language runtime is installed.">Gibt das Verzeichnis zurück, in dem die Common Language Runtime installiert ist.</summary>
      <returns vsli:raw="A string that contains the path to the directory where the common language runtime is installed.">Eine Zeichenfolge mit dem Pfad zu dem Verzeichnis, in dem die Common Language Runtime installiert ist.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsIntPtr(System.Guid,System.Guid)">
      <summary vsli:raw="Returns the specified interface on the specified class.">Gibt die angegebene Schnittstelle für die angegebene Klasse zurück.</summary>
      <param name="clsid" vsli:raw="The identifier for the desired class.">Der Bezeichner für die gewünschte Klasse.</param>
      <param name="riid" vsli:raw="The identifier for the desired interface.">Der Bezeichner für die gewünschte Schnittstelle.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="IUnknown::QueryInterface failure.">IUnknown::QueryInterface-Fehler.</exception>
      <returns vsli:raw="An unmanaged pointer to the requested interface.">Ein nicht verwalteter Zeiger auf die angeforderte Schnittstelle.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetRuntimeInterfaceAsObject(System.Guid,System.Guid)">
      <summary vsli:raw="Returns an instance of a type that represents a COM object by a pointer to its &lt;see langword=&quot;IUnknown&quot; /&gt; interface.">Gibt eine Instanz eines Typs zurück, der ein COM-Objekt mithilfe eines Zeigers auf seine <see langword="IUnknown" />-Schnittstelle darstellt.</summary>
      <param name="clsid" vsli:raw="The identifier for the desired class.">Der Bezeichner für die gewünschte Klasse.</param>
      <param name="riid" vsli:raw="The identifier for the desired interface.">Der Bezeichner für die gewünschte Schnittstelle.</param>
      <exception cref="T:System.Runtime.InteropServices.COMException" vsli:raw="IUnknown::QueryInterface failure.">IUnknown::QueryInterface-Fehler.</exception>
      <returns vsli:raw="An object that represents the specified unmanaged COM object.">Ein Objekt, das das angegebene nicht verwaltete COM-Objekt darstellt.</returns>
    </member>
    <member name="M:System.Runtime.InteropServices.RuntimeEnvironment.GetSystemVersion">
      <summary vsli:raw="Gets the version number of the common language runtime that's running the current process.">Ruft die Versionsnummer der Common Language Runtime ab, die den aktuellen Prozess ausführt.</summary>
      <returns vsli:raw="A string containing the version number of the common language runtime.">Eine Zeichenfolge mit der Versionsnummer der Common Language Runtime.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.RuntimeEnvironment.SystemConfigurationFile">
      <summary vsli:raw="Gets the path to the system configuration file.">Ruft den Pfad der Systemkonfigurationsdatei ab.</summary>
      <returns vsli:raw="The path to the system configuration file.">Der Pfad der Systemkonfigurationsdatei.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayRankMismatchException">
      <summary vsli:raw="The exception thrown when the rank of an incoming &lt;see langword=&quot;SAFEARRAY&quot; /&gt; does not match the rank specified in the managed signature.">Die Ausnahme, die ausgelöst wird, wenn der Rang eines eingehenden <see langword="SAFEARRAY" /> nicht mit dem in der verwalteten Signatur angegebenen Rang übereinstimmt.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with default values.">Initialisiert eine neue Instanz der <see langword="SafeArrayTypeMismatchException" />-Klasse mit Standardwerten.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class from serialization data.">Initialisiert eine neue Instanz der <see langword="SafeArrayTypeMismatchException" />-Klasse aus Serialisierungsdaten.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayRankMismatchException&quot; /&gt; class with the specified message.">Initialisiert eine neue Instanz der <see langword="SafeArrayRankMismatchException" />-Klasse mit der angegebenen Meldung.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Die Meldung, in der die Ursache für die Ausnahme angegeben wird.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayRankMismatchException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeArrayRankMismatchException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.SafeArrayRankMismatchException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="inner" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException">
      <summary vsli:raw="The exception thrown when the type of the incoming &lt;see langword=&quot;SAFEARRAY&quot; /&gt; does not match the type specified in the managed signature.">Die Ausnahme, die ausgelöst wird, wenn der Typ des eingehenden <see langword="SAFEARRAY" /> nicht mit dem in der verwalteten Signatur angegebenen Typ übereinstimmt.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with default values.">Initialisiert eine neue Instanz der <see langword="SafeArrayTypeMismatchException" />-Klasse mit Standardwerten.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class from serialization data.">Initialisiert eine neue Instanz der <see langword="SafeArrayTypeMismatchException" />-Klasse aus Serialisierungsdaten.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;SafeArrayTypeMismatchException&quot; /&gt; class with the specified message.">Initialisiert eine neue Instanz der <see langword="SafeArrayTypeMismatchException" />-Klasse mit der angegebenen Meldung.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Die Meldung, in der die Ursache für die Ausnahme angegeben wird.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SafeArrayTypeMismatchException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SafeArrayTypeMismatchException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.SafeArrayTypeMismatchException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="inner" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
    <member name="T:System.Runtime.InteropServices.SEHException">
      <summary vsli:raw="Represents structured exception handling (SEH) errors.">Stellt SEH-Fehler (Structured Exception Handler, strukturierter Ausnahmehandler) dar.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.SEHException" />-Klasse.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class from serialization data.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.SEHException" />-Klasse aus Serialisierungsdaten.</summary>
      <param name="info" vsli:raw="The object that holds the serialized object data.">Das Objekt, das die Daten des serialisierten Objekts enthält.</param>
      <param name="context" vsli:raw="The contextual information about the source or destination.">Die Kontextinformationen zur Quelle bzw. zum Ziel.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;info&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="info" /> ist <see langword="null" />.</exception>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class with a specified message.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.SEHException" />-Klasse mit einer angegebenen Meldung.</summary>
      <param name="message" vsli:raw="The message that indicates the reason for the exception.">Die Meldung, in der die Ursache für die Ausnahme angegeben wird.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.#ctor(System.String,System.Exception)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.SEHException&quot; /&gt; class with a specified error message and a reference to the inner exception that is the cause of this exception.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.SEHException" />-Klasse mit einer angegebenen Fehlermeldung und einem Verweis auf die innere Ausnahme, die diese Ausnahme ausgelöst hat.</summary>
      <param name="message" vsli:raw="The error message that explains the reason for the exception.">Die Fehlermeldung, in der die Ursache der Ausnahme erklärt wird.</param>
      <param name="inner" vsli:raw="The exception that is the cause of the current exception. If the &lt;paramref name=&quot;inner&quot; /&gt; parameter is not &lt;see langword=&quot;null&quot; /&gt;, the current exception is raised in a &lt;see langword=&quot;catch&quot; /&gt; block that handles the inner exception.">Die Ausnahme, die die Ursache der aktuellen Ausnahme ist. Wenn der <paramref name="inner" />-Parameter nicht <see langword="null" /> ist, wird die aktuelle Ausnahme in einem <see langword="catch" />-Block ausgelöst, der die innere Ausnahme behandelt.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.SEHException.CanResume">
      <summary vsli:raw="Indicates whether the exception can be recovered from, and whether the code can continue from the point at which the exception was thrown.">Gibt an, ob der Zustand vor der Ausnahme wiederhergestellt werden kann und ob der Code ab der Stelle, an der die Ausnahme ausgelöst wurde, weiter ausgeführt werden kann.</summary>
      <returns vsli:raw="Always &lt;see langword=&quot;false&quot; /&gt;, because resumable exceptions are not implemented.">Immer <see langword="false" />, da Ausnahmen mit der Möglichkeit zur Wiederaufnahme nicht implementiert sind.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.StandardOleMarshalObject">
      <summary vsli:raw="Replaces the standard common language runtime (CLR) free-threaded marshaler with the standard OLE STA marshaler.">Ersetzt den standardmäßigen Freethreaded-Marshaller der Common Language Runtime durch den standardmäßigen OLE STA-Marshaller.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.StandardOleMarshalObject.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.StandardOleMarshalObject&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.StandardOleMarshalObject" />-Klasse.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeIdentifierAttribute">
      <summary vsli:raw="Provides support for type equivalence.">Bietet Unterstützung für Typäquivalenz.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeIdentifierAttribute&quot; /&gt; class.">Erstellt eine neue Instanz der <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" />-Klasse.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)">
      <summary vsli:raw="Creates a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeIdentifierAttribute&quot; /&gt; class with the specified scope and identifier.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.TypeIdentifierAttribute" />-Klasse mit dem angegebenen Bereich und Bezeichner.</summary>
      <param name="scope" vsli:raw="The first type equivalence string.">Die erste Typäquivalenzzeichenfolge.</param>
      <param name="identifier" vsli:raw="The second type equivalence string.">Die zweite Typäquivalenzzeichenfolge.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Identifier">
      <summary vsli:raw="Gets the value of the &lt;paramref name=&quot;identifier&quot; /&gt; parameter that was passed to the &lt;see cref=&quot;M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)&quot; /&gt; constructor.">Ruft den Wert des <paramref name="identifier" />-Parameters ab, der an den <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" />-Konstruktor übergeben wurde.</summary>
      <returns vsli:raw="The value of the constructor's &lt;paramref name=&quot;identifier&quot; /&gt; parameter.">Der Wert des <paramref name="identifier" />-Parameters für den Konstruktor.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeIdentifierAttribute.Scope">
      <summary vsli:raw="Gets the value of the &lt;paramref name=&quot;scope&quot; /&gt; parameter that was passed to the &lt;see cref=&quot;M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)&quot; /&gt; constructor.">Ruft den Wert des <paramref name="scope" />-Parameters ab, der an den <see cref="M:System.Runtime.InteropServices.TypeIdentifierAttribute.#ctor(System.String,System.String)" />-Konstruktor übergeben wurde.</summary>
      <returns vsli:raw="The value of the constructor's &lt;paramref name=&quot;scope&quot; /&gt; parameter.">Der Wert des <paramref name="scope" />-Parameters für den Konstruktor.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.FUNCFLAGS&quot; /&gt; that were originally imported for this method from the COM type library.">Enthält die <see cref="T:System.Runtime.InteropServices.FUNCFLAGS" />, die ursprünglich aus der COM-Typbibliothek für diese Methode importiert wurden.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibFuncAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value.">Initialisiert eine neue Instanz der <see langword="TypeLibFuncAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" />-Wert.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for the attributed method as found in the type library it was imported from.">Der <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" />-Wert für die attributierte Methode aus der Typbibliothek, aus der er importiert wurde.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibFuncAttribute.#ctor(System.Runtime.InteropServices.TypeLibFuncFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibFuncAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value.">Initialisiert eine neue Instanz der <see langword="TypeLibFuncAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" />-Wert.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for the attributed method as found in the type library it was imported from.">Der <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" />-Wert für die attributierte Methode aus der Typbibliothek, aus der er importiert wurde.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibFuncAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for this method.">Ruft den <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" />-Wert für diese Methode ab.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibFuncFlags&quot; /&gt; value for this method.">Der <see cref="T:System.Runtime.InteropServices.TypeLibFuncFlags" />-Wert für diese Methode.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibFuncFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see langword=&quot;FUNCFLAGS&quot; /&gt; in the COM type library from where this method was imported.">Beschreibt die ursprünglichen Einstellungen von <see langword="FUNCFLAGS" /> in der COM-Typbibliothek, aus der diese Methode importiert wurde.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable">
      <summary vsli:raw="The function that supports data binding.">Die Funktion, die Datenbindung unterstützt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultBind">
      <summary vsli:raw="The function that best represents the object. Only one function in a type information can have this attribute.">Die Funktion, die das Objekt am besten darstellt. Nur eine Funktion in den Typinformationen kann über dieses Attribut verfügen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDefaultCollelem">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.">Erlaubt eine Optimierung, bei der der Compiler im Typ "abc" nach dem Member "xyz" sucht. Wenn ein solcher Member gefunden und als Accessorfunktion für ein Element der Standardauflistung markiert wird, wird ein Aufruf dieser Memberfunktion generiert.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FDisplayBind">
      <summary vsli:raw="The function that is displayed to the user as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable&quot; /&gt; must also be set.">Die dem Benutzer als bindungsfähig angezeigte Funktion. <see cref="F:System.Runtime.InteropServices.TypeLibFuncFlags.FBindable" /> muss auch festgelegt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FHidden">
      <summary vsli:raw="The function should not be displayed to the user, although it exists and is bindable.">Die Funktion darf dem Benutzer nicht angezeigt werden, obwohl sie vorhanden und bindbar ist.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FImmediateBind">
      <summary vsli:raw="The function is mapped as individual bindable properties.">Die Funktion wird in Form von einzelnen Eigenschaften zugeordnet, die gebunden werden können.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FNonBrowsable">
      <summary vsli:raw="The property appears in an object browser, but not in a properties browser.">Die Eigenschaft wird in einem Objektkatalog, nicht jedoch in einem Eigenschaftenbrowser angezeigt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FReplaceable">
      <summary vsli:raw="Tags the interface as having default behaviors.">Markiert die Schnittstelle als Schnittstelle mit Standardverhalten.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRequestEdit">
      <summary vsli:raw="When set, any call to a method that sets the property results first in a call to &lt;see langword=&quot;IPropertyNotifySink::OnRequestEdit&quot; /&gt;.">Bei Festlegung hat jeder Aufruf einer Methode, die die Eigenschaft festlegt, zunächst einen Aufruf von <see langword="IPropertyNotifySink::OnRequestEdit" /> zur Folge.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level functions or functions that type browsers should not display.">Dieses Flag ist für Funktionen auf Systemebene oder für Funktionen bestimmt, die von Typenbrowsern nicht angezeigt werden sollen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FSource">
      <summary vsli:raw="The function returns an object that is a source of events.">Die Funktion gibt ein Objekt zurück, das eine Ereignisquelle ist.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUiDefault">
      <summary vsli:raw="The type information member is the default member for display in the user interface.">Der Typinformationsmember ist der Standardmember für die Anzeige auf der Benutzeroberfläche.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibFuncFlags.FUsesGetLastError">
      <summary vsli:raw="The function supports &lt;see langword=&quot;GetLastError&quot; /&gt;.">Die Funktion unterstützt <see langword="GetLastError" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibImportClassAttribute">
      <summary vsli:raw="Specifies which &lt;see cref=&quot;T:System.Type&quot; /&gt; exclusively uses an interface. This class cannot be inherited.">Gibt an, welcher <see cref="T:System.Type" /> eine Schnittstelle exklusiv verwendet. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibImportClassAttribute.#ctor(System.Type)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibImportClassAttribute&quot; /&gt; class specifying the &lt;see cref=&quot;T:System.Type&quot; /&gt; that exclusively uses an interface.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.TypeLibImportClassAttribute" />-Klasse, die den <see cref="T:System.Type" /> angibt, der eine Schnittstelle exklusiv verwendet.</summary>
      <param name="importClass" vsli:raw="The &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">Das <see cref="T:System.Type" />-Objekt, das eine Schnittstelle exklusiv verwendet.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibImportClassAttribute.Value">
      <summary vsli:raw="Gets the name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">Ruft den Namen eines <see cref="T:System.Type" />-Objekts ab, das eine Schnittstelle exklusiv verwendet.</summary>
      <returns vsli:raw="The name of a &lt;see cref=&quot;T:System.Type&quot; /&gt; object that exclusively uses an interface.">Der Name eines <see cref="T:System.Type" />-Objekts, das eine Schnittstelle exklusiv verwendet.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; that were originally imported for this type from the COM type library.">Enthält die ursprünglich für diesen Typ aus der COM-Typbibliothek importierten <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value.">Initialisiert eine neue Instanz der <see langword="TypeLibTypeAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" />-Wert.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for the attributed type as found in the type library it was imported from.">Der <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" />-Wert für den attributierten Typ, wie er in der Typbibliothek angegeben ist, aus der er importiert wurde.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibTypeAttribute.#ctor(System.Runtime.InteropServices.TypeLibTypeFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see langword=&quot;TypeLibTypeAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value.">Initialisiert eine neue Instanz der <see langword="TypeLibTypeAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" />-Wert.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for the attributed type as found in the type library it was imported from.">Der <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" />-Wert für den attributierten Typ, wie er in der Typbibliothek angegeben ist, aus der er importiert wurde.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibTypeAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for this type.">Ruft den <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" />-Wert für diesen Typ ab.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibTypeFlags&quot; /&gt; value for this type.">Der <see cref="T:System.Runtime.InteropServices.TypeLibTypeFlags" />-Wert für diesen Typ.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibTypeFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TYPEFLAGS&quot; /&gt; in the COM type library from which the type was imported.">Beschreibt die ursprünglichen Einstellungen von <see cref="T:System.Runtime.InteropServices.TYPEFLAGS" /> in der COM-Typbibliothek, aus der dieser Typ importiert wurde.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAggregatable">
      <summary vsli:raw="The class supports aggregation.">Die Klasse unterstützt Aggregation.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FAppObject">
      <summary vsli:raw="A type description that describes an &lt;see langword=&quot;Application&quot; /&gt; object.">Ein Typbeschreibung, die ein <see langword="Application" />-Objekt beschreibt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FCanCreate">
      <summary vsli:raw="Instances of the type can be created by &lt;see langword=&quot;ITypeInfo::CreateInstance&quot; /&gt;.">Instanzen des Typs können durch <see langword="ITypeInfo::CreateInstance" /> erstellt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FControl">
      <summary vsli:raw="The type is a control from which other types will be derived, and should not be displayed to users.">Der Typ ist ein Steuerelement, aus dem andere Typen abgeleitet werden, und darf Benutzern nicht angezeigt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDispatchable">
      <summary vsli:raw="Indicates that the interface derives from &lt;see langword=&quot;IDispatch&quot; /&gt;, either directly or indirectly.">Gibt an, dass die Schnittstelle direkt oder indirekt aus <see langword="IDispatch" /> abgeleitet ist.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FDual">
      <summary vsli:raw="The interface supplies both &lt;see langword=&quot;IDispatch&quot; /&gt; and V-table binding.">Die Schnittstelle stellt sowohl <see langword="IDispatch" /> als auch Vtable-Bindung bereit.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FHidden">
      <summary vsli:raw="The type should not be displayed to browsers.">Der Typ darf in Browsern nicht angezeigt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FLicensed">
      <summary vsli:raw="The type is licensed.">Der Typ ist lizenziert.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FNonExtensible">
      <summary vsli:raw="The interface cannot add members at run time.">Die Schnittstelle kann zur Laufzeit keine Member hinzufügen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FOleAutomation">
      <summary vsli:raw="The types used in the interface are fully compatible with Automation, including vtable binding support.">Die in der Schnittstelle verwendeten Typen sind vollständig automatisierungskompatibel, wobei die Unterstützung von Vtable-Bindung eingeschlossen ist.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FPreDeclId">
      <summary vsli:raw="The type is predefined. The client application should automatically create a single instance of the object that has this attribute. The name of the variable that points to the object is the same as the class name of the object.">Der Typ ist vordefiniert. Die Clientanwendung erstellt automatisch eine einzelne Instanz des Objekts, das über dieses Attribut verfügt. Der Name der auf das Objekt zeigenden Variablen ist derselbe wie der Klassenname des Objekts.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReplaceable">
      <summary vsli:raw="The object supports &lt;see langword=&quot;IConnectionPointWithDefault&quot; /&gt;, and has default behaviors.">Das Objekt unterstützt <see langword="IConnectionPointWithDefault" /> und verfügt über Standardverhalten.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level types or types that type browsers should not display.">Dieses Flag ist für Typen auf Systemebene oder für Typen bestimmt, die von Typenbrowsern nicht angezeigt werden sollen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibTypeFlags.FReverseBind">
      <summary vsli:raw="Indicates base interfaces should be checked for name resolution before checking child interfaces. This is the reverse of the default behavior.">Gibt an, dass Basisschnittstellen vor dem Überprüfen von untergeordneten Schnittstellen auf Namensauflösung überprüft werden sollen. Dies ist die Umkehrung des Standardverhaltens.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarAttribute">
      <summary vsli:raw="Contains the &lt;see cref=&quot;T:System.Runtime.InteropServices.VARFLAGS&quot; /&gt; that were originally imported for this field from the COM type library.">Enthält die ursprünglich aus der COM-Typbibliothek für dieses Feld importierten <see cref="T:System.Runtime.InteropServices.VARFLAGS" />.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Int16)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" />-Wert.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for the attributed field as found in the type library it was imported from.">Der <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" />-Wert für das attributierte Feld, wie er in der Typbibliothek angegeben ist, aus der er importiert wurde.</param>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVarAttribute.#ctor(System.Runtime.InteropServices.TypeLibVarFlags)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarAttribute&quot; /&gt; class with the specified &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.TypeLibVarAttribute" />-Klasse mit dem angegebenen <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" />-Wert.</summary>
      <param name="flags" vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for the attributed field as found in the type library it was imported from.">Der <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" />-Wert für das attributierte Feld, wie er in der Typbibliothek angegeben ist, aus der er importiert wurde.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVarAttribute.Value">
      <summary vsli:raw="Gets the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for this field.">Ruft den <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" />-Wert für dieses Feld ab.</summary>
      <returns vsli:raw="The &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVarFlags&quot; /&gt; value for this field.">Der <see cref="T:System.Runtime.InteropServices.TypeLibVarFlags" />-Wert für dieses Feld.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVarFlags">
      <summary vsli:raw="Describes the original settings of the &lt;see cref=&quot;T:System.Runtime.InteropServices.VARFLAGS&quot; /&gt; in the COM type library from which the variable was imported.">Beschreibt die ursprünglichen Einstellungen der <see cref="T:System.Runtime.InteropServices.VARFLAGS" /> in der COM-Typbibliothek, aus der diese Variable importiert wurde.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable">
      <summary vsli:raw="The variable supports data binding.">Die Variable unterstützt die Datenbindung.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultBind">
      <summary vsli:raw="The variable is the single property that best represents the object. Only one variable in a type info can have this value.">Die Variable ist die einzelne Eigenschaft, die das Objekt am besten darstellt. Nur eine Variable in den Typinformationen kann diesen Wert aufweisen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDefaultCollelem">
      <summary vsli:raw="Permits an optimization in which the compiler looks for a member named &quot;xyz&quot; on the type &quot;abc&quot;. If such a member is found and is flagged as an accessor function for an element of the default collection, then a call is generated to that member function.">Erlaubt eine Optimierung, bei der der Compiler im Typ "abc" nach dem Member "xyz" sucht. Wenn ein solcher Member gefunden und als Accessorfunktion für ein Element der Standardauflistung markiert wird, wird ein Aufruf dieser Memberfunktion generiert.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FDisplayBind">
      <summary vsli:raw="The variable is displayed as bindable. &lt;see cref=&quot;F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable&quot; /&gt; must also be set.">Die Variable wird als bindungsfähig angezeigt. <see cref="F:System.Runtime.InteropServices.TypeLibVarFlags.FBindable" /> muss auch festgelegt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FHidden">
      <summary vsli:raw="The variable should not be displayed in a browser, though it exists and is bindable.">Die Variable darf in einem Browser nicht angezeigt werden, obwohl sie vorhanden ist und gebunden werden kann.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FImmediateBind">
      <summary vsli:raw="The variable is mapped as individual bindable properties.">Die Variable wird als einzelne Eigenschaft zugeordnet, die gebunden werden kann.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FNonBrowsable">
      <summary vsli:raw="The variable appears in an object browser, but not in a properties browser.">Die Variable wird in einem Objektkatalog, jedoch nicht in einem Eigenschaftenbrowser angezeigt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReadOnly">
      <summary vsli:raw="Assignment to the variable should not be allowed.">Zuweisungen zur Variablen sollten nicht zulässig sein.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FReplaceable">
      <summary vsli:raw="Tags the interface as having default behaviors.">Markiert die Schnittstelle als Schnittstelle mit Standardverhalten.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRequestEdit">
      <summary vsli:raw="Indicates that the property supports the COM &lt;see langword=&quot;OnRequestEdit&quot; /&gt; notification.">Gibt an, dass die Eigenschaft die <see langword="OnRequestEdit" />-Benachrichtigung von COM unterstützt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FRestricted">
      <summary vsli:raw="This flag is intended for system-level functions or functions that type browsers should not display.">Dieses Flag ist für Funktionen auf Systemebene oder für Funktionen bestimmt, die von Typenbrowsern nicht angezeigt werden sollen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FSource">
      <summary vsli:raw="The variable returns an object that is a source of events.">Die Variable gibt ein Objekt zurück, das eine Ereignisquelle ist.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.TypeLibVarFlags.FUiDefault">
      <summary vsli:raw="The default display in the user interface.">Die Standardanzeige auf der Benutzeroberfläche.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.TypeLibVersionAttribute">
      <summary vsli:raw="Specifies the version number of an exported type library.">Gibt die Versionsnummer einer exportierten Typbibliothek an.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.TypeLibVersionAttribute.#ctor(System.Int32,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.TypeLibVersionAttribute&quot; /&gt; class with the major and minor version numbers of the type library.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.TypeLibVersionAttribute" />-Klasse mit der Hauptversionsnummer und der Nebenversionsnummer der Typbibliothek.</summary>
      <param name="major" vsli:raw="The major version number of the type library.">Die Hauptversionsnummer der Typbibliothek.</param>
      <param name="minor" vsli:raw="The minor version number of the type library.">Die Nebenversionsnummer der Typbibliothek.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MajorVersion">
      <summary vsli:raw="Gets the major version number of the type library.">Ruft die Hauptversionsnummer der Typbibliothek ab.</summary>
      <returns vsli:raw="The major version number of the type library.">Die Hauptversionsnummer der Typbibliothek.</returns>
    </member>
    <member name="P:System.Runtime.InteropServices.TypeLibVersionAttribute.MinorVersion">
      <summary vsli:raw="Gets the minor version number of the type library.">Ruft die Nebenversionsnummer der Typbibliothek ab.</summary>
      <returns vsli:raw="The minor version number of the type library.">Die Nebenversionsnummer der Typbibliothek.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnknownWrapper">
      <summary vsli:raw="Wraps objects the marshaler should marshal as a &lt;see langword=&quot;VT_UNKNOWN&quot; /&gt;.">Erstellt einen Wrapper für Objekte, die der Marshaller als <see langword="VT_UNKNOWN" /> marshallen soll.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnknownWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnknownWrapper&quot; /&gt; class with the object to be wrapped.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.UnknownWrapper" />-Klasse mit dem Objekt, für das ein Wrapper erstellt werden soll.</summary>
      <param name="obj" vsli:raw="The object being wrapped.">Das Objekt, für das ein Wrapper erstellt werden soll.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnknownWrapper.WrappedObject">
      <summary vsli:raw="Gets the object contained by this wrapper.">Ruft das in diesem Wrapper enthaltene Objekt ab.</summary>
      <returns vsli:raw="The wrapped object.">Das Objekt, das umschlossen wird.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute">
      <summary vsli:raw="Any method marked with &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute&quot; /&gt; can be directly called from native code. The function token can be loaded to a local variable using the address-of operator in C# and passed as a callback to a native method.">Jede Methode, die mit <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" /> gekennzeichnet ist, kann direkt aus nativem Code aufgerufen werden. Das Funktionstoken kann mithilfe des address-of-Operators in C# in eine lokale Variable geladen und als Rückruf an eine native Methode übermittelt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.CallConvs">
      <summary vsli:raw="Optional. If omitted, the runtime will use the default platform calling convention.">Dies ist optional. Wenn der Wert weggelassen wird, verwendet die Laufzeit die standardmäßige Aufrufkonvention der Plattform.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.EntryPoint">
      <summary vsli:raw="Optional. If omitted, no named export is emitted during compilation.">Dies ist optional. Wenn keine Angabe erfolgt, wird während der Kompilierung kein benannter Export ausgegeben.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute.#ctor">
      <summary vsli:raw="Initializes a new &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute&quot; /&gt; instance.">Initialisiert eine neue Instanz von <see cref="T:System.Runtime.InteropServices.UnmanagedCallersOnlyAttribute" />.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute">
      <summary vsli:raw="Controls the marshaling behavior of a delegate signature passed as an unmanaged function pointer to or from unmanaged code. This class cannot be inherited.">Steuert das Marshallingverhalten einer Delegatsignatur, die als nicht verwalteter Funktionszeiger an nicht verwalteten Code oder von nicht verwaltetem Code übergeben wurde. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.BestFitMapping">
      <summary vsli:raw="Enables or disables best-fit mapping behavior when converting Unicode characters to ANSI characters.">Aktiviert bzw. deaktiviert das Verhalten der optimalen Zuordnung bei der Konvertierung von Unicode-Zeichen in ANSI-Zeichen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CharSet">
      <summary vsli:raw="Indicates how to marshal string parameters to the method, and controls name mangling.">Gibt an, wie Zeichenfolgenparameter an die Methode gemarshallt werden, und steuert die Namenszerlegung.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.SetLastError">
      <summary vsli:raw="Indicates whether the callee calls the &lt;see langword=&quot;SetLastError&quot; /&gt; Windows API function before returning from the attributed method.">Gibt an, ob der Aufgerufene vor dem Zurückgeben aus der attributierten Methode die Windows-API <see langword="SetLastError" /> aufruft.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.ThrowOnUnmappableChar">
      <summary vsli:raw="Enables or disables the throwing of an exception on an unmappable Unicode character that is converted to an ANSI &quot;?&quot; character.">Aktiviert bzw. deaktiviert das Auslösen einer Ausnahme bei einem nicht zuzuordnenden Unicode-Zeichen, das in das ANSI-Zeichen „?“ konvertiert wird.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute&quot; /&gt; class with the specified calling convention.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute" />-Klasse mit der angegebenen Aufrufkonvention.</summary>
      <param name="callingConvention" vsli:raw="The specified calling convention.">Die angegebene Aufrufkonvention.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.CallingConvention">
      <summary vsli:raw="Gets the value of the calling convention.">Ruft den Wert der Aufrufkonvention ab.</summary>
      <returns vsli:raw="The value of the calling convention specified by the &lt;see cref=&quot;M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)&quot; /&gt; constructor.">Der Wert der vom <see cref="M:System.Runtime.InteropServices.UnmanagedFunctionPointerAttribute.#ctor(System.Runtime.InteropServices.CallingConvention)" />-Konstruktor angegebenen Aufrufkonvention.</returns>
    </member>
    <member name="T:System.Runtime.InteropServices.UnmanagedType">
      <summary>Gibt an, wie Parameter oder Felder in nicht verwaltetem Code gemarshallt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AnsiBStr">
      <summary>Eine Zeichenfolge aus ANSI-Zeichen, die ein Einzelbyte mit Längenpräfix ist. Sie können diesen Member für den Datentyp <see cref="T:System.String" /> verwenden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.AsAny">
      <summary>Ein dynamischer Typ, der zur Laufzeit den Typ eines Objekts bestimmt und das Objekt als diesen Typ marshallt. Dieser Member ist nur für Plattformaufrufmethoden gültig.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Bool">
      <summary>Ein boolescher Wert mit 4 Byte (<see langword="true" /> != 0, <see langword="false" /> = 0). Dies ist der Win32-BOOL-Typ.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.BStr">
      <summary>Eine Zeichenfolge aus Unicode-Zeichen, die ein Doppelbyte mit Längenpräfix ist. Sie können diesen Member, der die Standardzeichenfolge in COM darstellt, für den Datentyp <see cref="T:System.String" /> verwenden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValArray">
      <summary>Wenn die <see cref="P:System.Runtime.InteropServices.MarshalAsAttribute.Value" />-Eigenschaft auf <see langword="ByValArray" /> festgelegt wird, muss das Feld <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> so festgelegt werden, dass die Anzahl der Elemente im Array angegeben wird. Das Feld <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.ArraySubType" /> kann optional den <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> der Arrayelemente enthalten, wenn zwischen verschiedenen Zeichenfolgetypen unterschieden werden muss. Sie können diesen <see cref="T:System.Runtime.InteropServices.UnmanagedType" /> nur für ein Array verwenden, dessen Elemente in einer Struktur in Form von Feldern angezeigt werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.ByValTStr">
      <summary>Wird für Inlinearrays mit Zeichen fester Länge verwendet, die in einer Struktur dargestellt werden. <see langword="ByValTStr" />-Typen verhalten sich wie Zeichenfolgen im C-Stil mit fester Größe innerhalb einer Struktur (beispielsweise <c>char s[5]</c>). Der in <see langword="ByValTStr" /> verwendete Zeichentyp wird durch das <see cref="T:System.Runtime.InteropServices.CharSet" />-Argument des <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" />-Attributs bestimmt, das auf die enthaltende Struktur angewendet wird. Verwenden Sie immer das Feld <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" />, um die Größe des Arrays anzugeben.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Currency">
      <summary>Ein Währungstyp. Wird für <see cref="T:System.Decimal" /> verwendet, um den Dezimalwert als COM-Währungstyp und nicht als <see langword="Decimal" /> zu marshallen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler">
      <summary>Gibt bei Verwendung mit den Feldern <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType" /> oder <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef" /> die benutzerdefinierte Marshallerklasse an. Das Feld <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie" /> kann zum Übergeben zusätzlicher Informationen an den benutzerdefinierten Marshaller verwendet werden. Sie können diesen Member für beliebige Verweistypen verwenden. Dieser Member ist nur für Parameter und Rückgabewerte gültig. Er kann nicht für Felder verwendet werden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Error">
      <summary>Ein nativer Typ, der mit einem <see cref="F:System.Runtime.InteropServices.UnmanagedType.I4" /> oder einem <see cref="F:System.Runtime.InteropServices.UnmanagedType.U4" /> verknüpft ist und bewirkt, dass der Parameter als ein HRESULT in die Bibliothek mit den Exporttypen exportiert wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.FunctionPtr">
      <summary>Eine Ganzzahl, die als C-Funktionszeiger verwendet werden kann. Sie können diesen Member für einen <see cref="T:System.Delegate" />-Datentyp oder einen Typ verwenden, der von einem <see cref="T:System.Delegate" /> erbt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.HString">
      <summary>Eine Windows-Runtime-Zeichenfolge. Sie können diesen Member für den Datentyp <see cref="T:System.String" /> verwenden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I1">
      <summary>Eine 1-Byte-Ganzzahl mit Vorzeichen. Sie können mit diesem Member einen booleschen Wert in einen 1-Byte-Wert im C-Format <see langword="bool" /> (<see langword="true" /> = 1, <see langword="false" /> = 0) transformieren.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I2">
      <summary>Eine 2-Byte-Ganzzahl mit Vorzeichen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I4">
      <summary>Eine 4-Byte-Ganzzahl mit Vorzeichen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.I8">
      <summary>Eine 8-Byte-Ganzzahl mit Vorzeichen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IDispatch">
      <summary>Ein COM-<see langword="IDispatch" />-Zeiger (<see langword="Object" /> in Microsoft Visual Basic 6.0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IInspectable">
      <summary>Ein Windows-Runtime-Schnittstellenzeiger. Sie können diesen Member für den Datentyp <see cref="T:System.Object" /> verwenden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Interface">
      <summary>Ein COM-Schnittstellenzeiger. Die <see cref="T:System.Guid" /> der Schnittstelle wird aus den Metadaten der Klasse ermittelt. Mit diesem Member geben Sie den genauen Schnittstellentyp oder den Standardschnittstellentyp an, wenn Sie ihn auf eine Klasse anwenden. Dieser Member bewirkt das gleiche Verhalten wie <see cref="F:System.Runtime.InteropServices.UnmanagedType.IUnknown" />, wenn Sie ihn auf den Datentyp <see cref="T:System.Object" /> anwenden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.IUnknown">
      <summary>Ein COM-<see langword="IUnknown" />-Zeiger. Sie können diesen Member für den Datentyp <see cref="T:System.Object" /> verwenden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPArray">
      <summary>Ein Zeiger auf das erste Element eines C-Arrays. Beim Marshallen von verwaltetem zu nicht verwalteten Code wird die Länge des Arrays anhand der Länge des verwalteten Arrays bestimmt. Beim Marshallen von nicht verwaltetem in verwalteten Code wird die Länge des Arrays vom Feld <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeConst" /> und vom Feld <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SizeParamIndex" /> bestimmt, auf die optional der nicht verwaltete Typ der Elemente im Array folgt, wenn eine Unterscheidung zwischen Zeichenfolgentypen erforderlich ist.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStr">
      <summary>Eine aus ANSI-Zeichen bestehende, mit NULL beendete Einzelbyte-Zeichenfolge. Sie können diesen Member für die Datentypen <see cref="T:System.String" /> und <see cref="T:System.Text.StringBuilder" /> verwenden.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPStruct">
      <summary>Ein Zeiger auf eine C-Struktur, mit dem verwaltete formatierte Klassen gemarshallt werden. Dieser Member ist nur für Plattformaufrufmethoden gültig.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPTStr">
      <summary>Eine plattformabhängige Zeichenfolge, d.&amp;nbsp;h. ANSI unter Windows&amp;nbsp;98 und Unicode unter Windows&amp;nbsp;NT und Windows&amp;nbsp;XP. Dieser Wert wird nur für Plattformaufrufe und nicht für COM-Interop unterstützt, da das Exportieren einer Zeichenfolge vom Typ <see langword="LPTStr" /> nicht unterstützt wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPUTF8Str">
      <summary>Ein Zeiger auf eine UTF-8-Zeichenfolge.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.LPWStr">
      <summary>Eine aus Unicode-Zeichen bestehende, mit NULL beendete 2-Byte-Zeichenfolge. Der Wert <see langword="LPWStr" /> kann nicht mit einer nicht verwalteten Zeichenfolge verwendet werden, es sei denn, die Zeichenfolge wurde mit der nicht verwalteten <see langword="CoTaskMemAlloc" />-Funktion erstellt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R4">
      <summary>Eine 4-Byte-Gleitkommazahl.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.R8">
      <summary>Eine 8-Byte-Gleitkommazahl.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SafeArray">
      <summary>Ein <see langword="SafeArray" /> ist ein selbstbeschreibendes Array mit dem Typ, dem Rang und den Grenzen der verknüpften Arraydaten. Sie können diesen Member mit dem Feld <see cref="F:System.Runtime.InteropServices.MarshalAsAttribute.SafeArraySubType" /> verwenden, um den Standardelementtyp zu überschreiben.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.Struct">
      <summary>Ein VARIANT zum Marshallen verwalteter formatierter Klassen und Werttypen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysInt">
      <summary>Eine plattformabhängige Ganzzahl mit Vorzeichen.: 4 Byte für 32-Bit-Windows, 8 Bytes auf 64-Bit-Windows.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.SysUInt">
      <summary>Eine plattformabhängige Ganzzahl ohne Vorzeichen.: 4 Byte für 32-Bit-Windows, 8 Bytes auf 64-Bit-Windows.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.TBStr">
      <summary>Eine plattformabhängige <see langword="char" />-Zeichenfolge mit Längenpräfix: ANSI unter Windows 98, Unicode unter Windows NT. Dieser BSTR-ähnliche Member wird nur selten verwendet.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U1">
      <summary>Eine 1-Byte-Ganzzahl ohne Vorzeichen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U2">
      <summary>Eine 2-Byte-Ganzzahl ohne Vorzeichen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U4">
      <summary>Eine 4-Byte-Ganzzahl ohne Vorzeichen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.U8">
      <summary>Eine 8-Byte-Ganzzahl ohne Vorzeichen.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VariantBool">
      <summary>Ein durch OLE definierter VARIANT_BOOL-Typ mit 2 Byte (<see langword="true" /> = -1, <see langword="false" /> = 0).</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.UnmanagedType.VBByRefStr">
      <summary>Ein Wert, der es Visual Basic ermöglicht, eine Zeichenfolge in nicht verwaltetem Code zu ändern und die Ergebnisse in verwaltetem Code wiederzugeben. Dieser Wert wird nur für Plattformaufrufe unterstützt.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VarEnum">
      <summary vsli:raw="Indicates how to marshal the array elements when an array is marshaled from managed to unmanaged code as a &lt;see cref=&quot;F:System.Runtime.InteropServices.UnmanagedType.SafeArray&quot; /&gt;.">Gibt an, wie die Arrayelemente gemarshallt werden sollen, wenn ein Array als <see cref="F:System.Runtime.InteropServices.UnmanagedType.SafeArray" /> aus verwaltetem in nicht verwalteten Code gemarshallt wird.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ARRAY">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;SAFEARRAY&quot; /&gt; pointer.">Gibt einen <see langword="SAFEARRAY" />-Zeiger an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB">
      <summary vsli:raw="Indicates length prefixed bytes.">Gibt Bytes mit Längenpräfix an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BLOB_OBJECT">
      <summary vsli:raw="Indicates that a blob contains an object.">Gibt an, dass ein BLOB ein Objekt enthält.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BOOL">
      <summary vsli:raw="Indicates a Boolean value.">Gibt einen booleschen Wert an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BSTR">
      <summary vsli:raw="Indicates a BSTR string.">Gibt eine BSTR-Zeichenfolge an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_BYREF">
      <summary vsli:raw="Indicates that a value is a reference.">Gibt an, dass ein Wert ein Verweis ist.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CARRAY">
      <summary vsli:raw="Indicates a C style array.">Gibt ein C-Array an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CF">
      <summary vsli:raw="Indicates the clipboard format.">Gibt das Format der Zwischenablage an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CLSID">
      <summary vsli:raw="Indicates a class ID.">Gibt eine Klassen-ID an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_CY">
      <summary vsli:raw="Indicates a currency value.">Gibt einen Währungswert an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DATE">
      <summary vsli:raw="Indicates a DATE value.">Gibt einen DATE-Wert an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DECIMAL">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;decimal&quot; /&gt; value.">Gibt einen <see langword="decimal" />-Wert an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_DISPATCH">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;IDispatch&quot; /&gt; pointer.">Gibt einen <see langword="IDispatch" />-Zeiger an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_EMPTY">
      <summary vsli:raw="Indicates that a value was not specified.">Gibt an, dass kein Wert angegeben wurde.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_ERROR">
      <summary vsli:raw="Indicates an SCODE.">Gibt einen SCODE an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_FILETIME">
      <summary vsli:raw="Indicates a FILETIME value.">Gibt einen FILETIME-Wert an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_HRESULT">
      <summary vsli:raw="Indicates an HRESULT.">Gibt ein HRESULT an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I1">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;char&quot; /&gt; value.">Gibt einen <see langword="char" />-Wert an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I2">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;short&quot; /&gt; integer.">Gibt eine <see langword="short" />-Ganzzahl an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I4">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;long&quot; /&gt; integer.">Gibt eine <see langword="long" />-Ganzzahl an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_I8">
      <summary vsli:raw="Indicates a 64-bit integer.">Gibt einen 64-Bit-Integer-Wert an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_INT">
      <summary vsli:raw="Indicates an integer value.">Gibt einen Ganzzahlwert an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPSTR">
      <summary vsli:raw="Indicates a null-terminated string.">Gibt eine auf NULL endende Zeichenfolge an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_LPWSTR">
      <summary vsli:raw="Indicates a wide string terminated by &lt;see langword=&quot;null&quot; /&gt;.">Gibt eine auf <see langword="null" /> endende breite Zeichenfolge an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_NULL">
      <summary vsli:raw="Indicates a null value, similar to a null value in SQL.">Gibt einen NULL-Wert an, der mit einem NULL-Wert in SQL vergleichbar ist.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_PTR">
      <summary vsli:raw="Indicates a pointer type.">Gibt einen Zeigertyp an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R4">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;float&quot; /&gt; value.">Gibt einen <see langword="float" />-Wert an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_R8">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;double&quot; /&gt; value.">Gibt einen <see langword="double" />-Wert an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_RECORD">
      <summary vsli:raw="Indicates a user defined type.">Gibt einen benutzerdefinierten Typ an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_SAFEARRAY">
      <summary vsli:raw="Indicates a SAFEARRAY. Not valid in a VARIANT.">Gibt ein SAFEARRAY an. In einem VARIANT nicht gültig.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORAGE">
      <summary vsli:raw="Indicates that the name of a storage follows.">Gibt an, dass der Name eines Speichers folgt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STORED_OBJECT">
      <summary vsli:raw="Indicates that a storage contains an object.">Gibt an, dass ein Speicher ein Objekt enthält.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAM">
      <summary vsli:raw="Indicates that the name of a stream follows.">Gibt an, dass der Name eines Streams folgt.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_STREAMED_OBJECT">
      <summary vsli:raw="Indicates that a stream contains an object.">Gibt an, dass ein Stream ein Objekt enthält.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI1">
      <summary vsli:raw="Indicates a &lt;see langword=&quot;byte&quot; /&gt;.">Gibt ein <see langword="byte" /> an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI2">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt;&lt;see langword=&quot;short&quot; /&gt;.">Gibt ein <see langword="unsigned" /><see langword="short" /> an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI4">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt;&lt;see langword=&quot;long&quot; /&gt;.">Gibt ein <see langword="unsigned" /><see langword="long" /> an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UI8">
      <summary vsli:raw="Indicates an 64-bit unsigned integer.">Gibt einen 64-Bit-Unsigned Integer-Wert an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UINT">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;unsigned&quot; /&gt; integer value.">Gibt einen <see langword="unsigned" />-Ganzzahlwert an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_UNKNOWN">
      <summary vsli:raw="Indicates an &lt;see langword=&quot;IUnknown&quot; /&gt; pointer.">Gibt einen <see langword="IUnknown" />-Zeiger an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_USERDEFINED">
      <summary vsli:raw="Indicates a user defined type.">Gibt einen benutzerdefinierten Typ an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VARIANT">
      <summary vsli:raw="Indicates a VARIANT &lt;see langword=&quot;far&quot; /&gt; pointer.">Gibt einen VARIANT-<see langword="far" />-Zeiger an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VECTOR">
      <summary vsli:raw="Indicates a simple, counted array.">Gibt ein einfaches, gezähltes Array an.</summary>
    </member>
    <member name="F:System.Runtime.InteropServices.VarEnum.VT_VOID">
      <summary vsli:raw="Indicates a C style &lt;see langword=&quot;void&quot; /&gt;.">Gibt <see langword="void" /> im Stil von C an.</summary>
    </member>
    <member name="T:System.Runtime.InteropServices.VariantWrapper">
      <summary vsli:raw="Marshals data of type &lt;see langword=&quot;VT_VARIANT | VT_BYREF&quot; /&gt; from managed to unmanaged code. This class cannot be inherited.">Marshallt Daten vom Typ <see langword="VT_VARIANT | VT_BYREF" /> von verwaltetem an nicht verwalteten Code. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; class for the specified &lt;see cref=&quot;T:System.Object&quot; /&gt; parameter.">Initialisiert eine neue Instanz der <see cref="T:System.Runtime.InteropServices.VariantWrapper" />-Klasse für den angegebenen <see cref="T:System.Object" />-Parameter.</summary>
      <param name="obj" vsli:raw="The object to marshal.">Das zu marshallende Objekt.</param>
    </member>
    <member name="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject">
      <summary vsli:raw="Gets the object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; object.">Ruft das von dem <see cref="T:System.Runtime.InteropServices.VariantWrapper" />-Objekt umschlossene Objekt ab.</summary>
      <returns vsli:raw="The object wrapped by the &lt;see cref=&quot;T:System.Runtime.InteropServices.VariantWrapper&quot; /&gt; object.">Das von dem <see cref="T:System.Runtime.InteropServices.VariantWrapper" />-Objekt umschlossene Objekt.</returns>
    </member>
    <member name="T:System.Security.SecureString">
      <summary vsli:raw="Represents text that should be kept confidential, such as by deleting it from computer memory when no longer needed. This class cannot be inherited.">Stellt Text dar, der vertraulich behandelt werden soll, etwa durch Löschen aus dem Arbeitsspeicher des Computers, wenn er nicht mehr benötigt wird. Diese Klasse kann nicht vererbt werden.</summary>
    </member>
    <member name="M:System.Security.SecureString.#ctor">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; class.">Initialisiert eine neue Instanz der <see cref="T:System.Security.SecureString" />-Klasse.</summary>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this instance.">Beim Schützen oder Aufheben des Schutzes für den Wert dieser Instanz ist ein Fehler aufgetreten.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This operation is not supported on this platform.">Diese Operation wird auf dieser Plattform nicht unterstützt.</exception>
    </member>
    <member name="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)">
      <summary vsli:raw="Initializes a new instance of the &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; class from a subarray of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects.  &#xA;  &#xA; This constructor is not CLS-compliant. The CLS-compliant alternative is &lt;see cref=&quot;M:System.Security.SecureString.#ctor&quot; /&gt;.">Initialisiert eine neue Instanz der <see cref="T:System.Security.SecureString" />-Klasse aus einem Unterarray von <see cref="T:System.Char" />-Objekten.  
  
Dieser Konstruktor ist nicht CLS-kompatibel. Die CLS-kompatible Alternative ist <see cref="M:System.Security.SecureString.#ctor" />.</summary>
      <param name="value" vsli:raw="A pointer to an array of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects.">Ein Zeiger auf ein Array von <see cref="T:System.Char" />-Objekten.</param>
      <param name="length" vsli:raw="The number of elements of &lt;paramref name=&quot;value&quot; /&gt; to include in the new instance.">Die Anzahl der Elemente von <paramref name="value" />, die in die neue Instanz eingeschlossen werden sollen.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="&lt;paramref name=&quot;value&quot; /&gt; is &lt;see langword=&quot;null&quot; /&gt;.">
        <paramref name="value" /> ist <see langword="null" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;length&quot; /&gt; is less than zero or greater than 65,536.">
        <paramref name="length" /> ist kleiner als 0 (null) oder größer als 65.536.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Beim Schützen oder Aufheben des Schutzes für den Wert dieser sicheren Zeichenfolge ist ein Fehler aufgetreten.</exception>
      <exception cref="T:System.NotSupportedException" vsli:raw="This operation is not supported on this platform.">Diese Operation wird auf dieser Plattform nicht unterstützt.</exception>
    </member>
    <member name="M:System.Security.SecureString.AppendChar(System.Char)">
      <summary vsli:raw="Appends a character to the end of the current secure string.">Fügt am Ende der aktuellen sicheren Zeichenfolge ein Zeichen an.</summary>
      <param name="c" vsli:raw="A character to append to this secure string.">Ein Zeichen, das an diese sichere Zeichenfolge angefügt werden soll.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Diese sichere Zeichenfolge ist schreibgeschützt.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="Performing this operation would make the length of this secure string greater than 65,536 characters.">Beim Ausführen dieses Vorgangs überschreitet diese sichere Zeichenfolge die Länge von 65.536 Zeichen.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Beim Schützen oder Aufheben des Schutzes für den Wert dieser sicheren Zeichenfolge ist ein Fehler aufgetreten.</exception>
    </member>
    <member name="M:System.Security.SecureString.Clear">
      <summary vsli:raw="Deletes the value of the current secure string.">Löscht den Wert der aktuellen sicheren Zeichenfolge.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Diese sichere Zeichenfolge ist schreibgeschützt.</exception>
    </member>
    <member name="M:System.Security.SecureString.Copy">
      <summary vsli:raw="Creates a copy of the current secure string.">Erstellt eine Kopie der aktuellen sicheren Zeichenfolge.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Beim Schützen oder Aufheben des Schutzes für den Wert dieser sicheren Zeichenfolge ist ein Fehler aufgetreten.</exception>
      <returns vsli:raw="A duplicate of this secure string.">Ein Duplikat dieser sicheren Zeichenfolge.</returns>
    </member>
    <member name="M:System.Security.SecureString.Dispose">
      <summary vsli:raw="Releases all resources used by the current &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object.">Gibt alle vom aktuellen <see cref="T:System.Security.SecureString" />-Objekt verwendeten Ressourcen frei.</summary>
    </member>
    <member name="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)">
      <summary vsli:raw="Inserts a character in this secure string at the specified index position.">Fügt in dieser sicheren Zeichenfolge an der angegebenen Indexposition ein Zeichen ein.</summary>
      <param name="index" vsli:raw="The index position where parameter &lt;paramref name=&quot;c&quot; /&gt; is inserted.">Die Indexposition, an der der <paramref name="c" />-Parameter eingefügt wird.</param>
      <param name="c" vsli:raw="The character to insert.">Das einzufügende Zeichen.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Diese sichere Zeichenfolge ist schreibgeschützt.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than the length of this secure string.  &#xA;  &#xA; -or-  &#xA;  &#xA; Performing this operation would make the length of this secure string greater than 65,536 characters.">
        <paramref name="index" /> ist kleiner als 0 (null) oder größer als die Länge dieser sicheren Zeichenfolge.  
  
- oder - 
Beim Ausführen dieses Vorgangs überschreitet diese sichere Zeichenfolge die Länge von 65.536 Zeichen.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Beim Schützen oder Aufheben des Schutzes für den Wert dieser sicheren Zeichenfolge ist ein Fehler aufgetreten.</exception>
    </member>
    <member name="M:System.Security.SecureString.IsReadOnly">
      <summary vsli:raw="Indicates whether this secure string is marked read-only.">Gibt an, ob diese sichere Zeichenfolge als schreibgeschützt markiert ist.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
      <returns vsli:raw="&lt;see langword=&quot;true&quot; /&gt; if this secure string is marked read-only; otherwise, &lt;see langword=&quot;false&quot; /&gt;.">
        <see langword="true" />, wenn diese sichere Zeichenfolge schreibgeschützt ist, andernfalls <see langword="false" />.</returns>
    </member>
    <member name="M:System.Security.SecureString.MakeReadOnly">
      <summary vsli:raw="Makes the text value of this secure string read-only.">Legt den Textwert dieser sicheren Zeichenfolge als schreibgeschützt fest.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
    </member>
    <member name="M:System.Security.SecureString.RemoveAt(System.Int32)">
      <summary vsli:raw="Removes the character at the specified index position from this secure string.">Entfernt das Zeichen an der angegebenen Indexposition aus dieser sicheren Zeichenfolge.</summary>
      <param name="index" vsli:raw="The index position of a character in this secure string.">Die Indexposition eines Zeichens in dieser sicheren Zeichenfolge.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Diese sichere Zeichenfolge ist schreibgeschützt.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than or equal to the length of this secure string.">
        <paramref name="index" /> ist kleiner als 0 (null), größer als die Länge der sicheren Zeichenfolge oder gleich der Länge dieser Zeichenfolge.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Beim Schützen oder Aufheben des Schutzes für den Wert dieser sicheren Zeichenfolge ist ein Fehler aufgetreten.</exception>
    </member>
    <member name="M:System.Security.SecureString.SetAt(System.Int32,System.Char)">
      <summary vsli:raw="Replaces the existing character at the specified index position with another character.">Ersetzt das an der angegebenen Indexposition vorhandene Zeichen durch ein anderes Zeichen.</summary>
      <param name="index" vsli:raw="The index position of an existing character in this secure string.">Die Indexposition eines vorhandenen Zeichens in dieser sicheren Zeichenfolge</param>
      <param name="c" vsli:raw="A character that replaces the existing character.">Ein Zeichen, das das vorhandene Zeichen ersetzt.</param>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
      <exception cref="T:System.InvalidOperationException" vsli:raw="This secure string is read-only.">Diese sichere Zeichenfolge ist schreibgeschützt.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException" vsli:raw="&lt;paramref name=&quot;index&quot; /&gt; is less than zero, or greater than or equal to the length of this secure string.">
        <paramref name="index" /> ist kleiner als 0 (null), größer als die Länge der sicheren Zeichenfolge oder gleich der Länge dieser Zeichenfolge.</exception>
      <exception cref="T:System.Security.Cryptography.CryptographicException" vsli:raw="An error occurred while protecting or unprotecting the value of this secure string.">Beim Schützen oder Aufheben des Schutzes für den Wert dieser sicheren Zeichenfolge ist ein Fehler aufgetreten.</exception>
    </member>
    <member name="P:System.Security.SecureString.Length">
      <summary vsli:raw="Gets the number of characters in the current secure string.">Ruft die Anzahl der Zeichen in der aktuellen sicheren Zeichenfolge ab.</summary>
      <exception cref="T:System.ObjectDisposedException" vsli:raw="This secure string has already been disposed.">Diese sichere Zeichenfolge wurde bereits verworfen.</exception>
      <returns vsli:raw="The number of &lt;see cref=&quot;T:System.Char&quot; /&gt; objects in this secure string.">Die Anzahl von <see cref="T:System.Char" />-Objekten in dieser sicheren Zeichenfolge.</returns>
    </member>
    <member name="T:System.Security.SecureStringMarshal">
      <summary vsli:raw="Provides a collection of methods for allocating unmanaged memory and copying unmanaged memory blocks.">Stellt eine Auflistung von Methoden zum Belegen von nicht verwaltetem Speicher und dem Kopieren von nicht verwalteten Speicherblöcken bereit.</summary>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">Kopiert den Inhalt eines verwalteten <see cref="T:System.Security.SecureString" />-Objekts in einen Speicherblock, der von der nicht verwalteten Speicherbelegung für COM-Aufgaben reserviert wurde.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Das zu kopierende verwaltete Objekt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="s" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Die Adresse im nicht verwalteten Speicher, in die der <paramref name="s" />-Parameter kopiert wurde, oder 0, wenn ein NULL-Objekt bereitgestellt wurde.</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToCoTaskMemUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object to a block of memory allocated from the unmanaged COM task allocator.">Kopiert den Inhalt eines verwalteten <see cref="T:System.Security.SecureString" />-Objekts in einen Speicherblock, der von der nicht verwalteten Speicherbelegung für COM-Aufgaben reserviert wurde.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Das zu kopierende verwaltete Objekt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="s" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <returns vsli:raw="The address, in unmanaged memory, where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied to, or 0 if a null object was supplied.">Die Adresse im nicht verwalteten Speicher, in die der <paramref name="s" />-Parameter kopiert wurde, oder 0, wenn ein NULL-Objekt bereitgestellt wurde.</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocAnsi(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; into unmanaged memory, converting into ANSI format as it copies.">Kopiert den Inhalt eines verwalteten <see cref="T:System.Security.SecureString" /> in den nicht verwalteten Speicher und konvertiert ihn beim Kopieren in das ANSI-Format.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Das zu kopierende verwaltete Objekt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="s" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <returns vsli:raw="The address, in unmanaged memory, to where the &lt;paramref name=&quot;s&quot; /&gt; parameter was copied, or 0 if a null object was supplied.">Die Adresse im nicht verwalteten Speicher, in die der <paramref name="s" />-Parameter kopiert wurde, oder 0, wenn ein NULL-Objekt bereitgestellt wurde.</returns>
    </member>
    <member name="M:System.Security.SecureStringMarshal.SecureStringToGlobalAllocUnicode(System.Security.SecureString)">
      <summary vsli:raw="Copies the contents of a managed &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object into unmanaged memory.">Kopiert den Inhalt eines verwalteten <see cref="T:System.Security.SecureString" />-Objekts in den nicht verwalteten Speicher.</summary>
      <param name="s" vsli:raw="The managed object to copy.">Das zu kopierende verwaltete Objekt.</param>
      <exception cref="T:System.ArgumentNullException" vsli:raw="The &lt;paramref name=&quot;s&quot; /&gt; parameter is &lt;see langword=&quot;null&quot; /&gt;.">Der <paramref name="s" />-Parameter ist <see langword="null" />.</exception>
      <exception cref="T:System.OutOfMemoryException" vsli:raw="There is insufficient memory available.">Es ist nicht genügend Arbeitsspeicher verfügbar.</exception>
      <returns vsli:raw="The address, in unmanaged memory, where &lt;paramref name=&quot;s&quot; /&gt; was copied, or 0 if &lt;paramref name=&quot;s&quot; /&gt; is a &lt;see cref=&quot;T:System.Security.SecureString&quot; /&gt; object whose length is 0.">Die Adresse im nicht verwalteten Arbeitsspeicher, an die <paramref name="s" /> kopiert wurde, oder 0, wenn <paramref name="s" /> ein <see cref="T:System.Security.SecureString" />-Objekt mit der Länge 0 ist.</returns>
    </member>
  </members>
</doc>